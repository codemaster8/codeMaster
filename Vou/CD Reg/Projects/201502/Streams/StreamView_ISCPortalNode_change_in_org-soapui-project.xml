<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="StreamView_ISCPortal_ISCPortalCS" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Linked LASP Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="TC_DECE_15110 - StreamView - LLP - LASP can view stream created by organizational attached DLASP CS node - 200 OK"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\Reports\Reports 106.2.3\LP1_R3\Stream View"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Coordinator APIs" type="rest" basePath="" id="5f5fa9bb-9b9e-4f14-aedb-0c6213f2720d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyGet I" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="d919ec56-229d-4382-a3dd-dbb25acce2fe"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="beb8a3d0-cab4-4ebf-a142-6007361fd910"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet I" mediaType="application/xml" id="10b74fb0-a069-442d-84a1-782f60bae25f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="4f96f872-af4f-497c-8a1b-a7f5f16c4ff3"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="5afa490c-0dbb-4b17-b971-e2a534588528"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet User" mediaType="application/xml" id="341d4480-57b6-4a46-b4ad-d587a3fb4e58"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="cc0e876d-768d-451f-a388-b7ba161e2463"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="227599bc-11f1-491a-9d0b-fda90c4b7006"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet Account" mediaType="application/xml" id="d7950e51-8123-41fb-afb9-f9b8d3974242"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policies" type="rest" basePath="" id="c6e738c0-1829-4898-a27b-a36c90bf1905" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyDelete Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="d6a052b4-a5d8-4db7-b764-6f937898642b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="6d2a100d-d63c-4874-a8f7-b629aa2e29b9"><con:settings/><con:parameters/><con:request name="PolicyDelete Account" mediaType="application/xml" id="04bd0030-8141-4295-b655-c9e3d112f5bb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDelete User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="61b070ca-1d53-4746-af74-120fe4e192d3"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="b688d139-184a-4307-bae1-82e784254a01"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/082012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyDelete User" mediaType="application/xml" id="98657050-24bd-437c-a9ce-df5f0ed8c8a6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ashwin.tikle\Desktop\E2E_1_1.wadl" id="96be61ee-61be-486b-a585-16357eb9fcaf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ashwin.tikle/Desktop/E2E_1_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ashwin.tikle/Desktop/E2E_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2E"/>
  <resources base="">
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="UserCreate">
      <doc xml:lang="en" title="UserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="urn:dece:type:tokentype:usernamepassword" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="${#TestCase#audienceList}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateUser">
      <doc xml:lang="en" title="PolicyCreateUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateUser">
        <doc xml:lang="en" title="PolicyCreateUser"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateAccount">
      <doc xml:lang="en" title="PolicyCreateAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateAccount">
        <doc xml:lang="en" title="PolicyCreateAccount"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="AccountCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="52f53a27-8740-421b-8f00-d6e1cdb8c926"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="0dad099c-622c-4d05-b2bd-3855daae2585"><con:settings/><con:parameters/><con:request name="Request 1" id="54461de8-68c4-4fd4-a568-d944bccf95a4" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="f372e6d3-e6bc-4144-8d01-bc2d37a50e1b"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="be614274-8715-4b19-89bd-e190870167dd"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4c7f8bf2-e272-4a1f-b247-7b6102172c89" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="1e5d646e-dae4-49c6-a447-3c95097c3e8c"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="588c0b9c-8ce8-497c-bed1-1f71c3d5ec60"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8d2fe641-f390-49d2-a78b-e6c419bc2bd3" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="24a53b2b-b335-49d8-af6b-b3b56eb57de3"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="a0afb856-fb17-401e-9462-8ff65488d65e"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ac20ad4a-882a-43f1-9197-1c0d38ced08e" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="9af0bb11-bc7f-45b8-9e68-1b253d2d4c60"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="b16c768a-edbb-42e6-b501-61806c0fc5e7"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="3396c672-1b00-4c76-be86-a385c2dc4963" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="d0052c78-c4fb-4d47-a56e-98795195d231"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="d302f3b5-3d82-4dd3-9ad9-276410c98596"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="975bf743-4f91-4757-9a68-2dd0fa7dfa3b" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="StreamDelete" type="rest" id="3cced55e-7a5c-4f22-9e3e-d0bdca96cb5d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="4ee07877-9cdc-4d0b-89b0-889e49dbffed"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="143e485f-a884-43c0-9cd2-0392a7c61454"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="b7722644-b5f7-488d-919f-f5418755f776"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" id="3ecf306b-5051-4aca-8c85-178a8adcb915"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="53f127d1-5ff8-4f9c-a8cd-16617b0bee31"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="0912_concat.pem" id="03f089d0-19b2-483d-8dfc-500d5e6877d3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#rtrassert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:RightsTokenData xmlns:dece="http://www.decellc.org/schema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema dece.xsd ">
  <dece:ALID>${#Project#alid}</dece:ALID>
  <dece:CID>${#Project#cid}</dece:CID>
  <dece:SoldAs>
    <dece:DisplayName Language="en">Avatar</dece:DisplayName>
    <dece:CID>${#Project#cid}</dece:CID>
  </dece:SoldAs>
  <dece:RightsProfiles>
    <dece:PurchaseProfile Profile="urn:dece:type:mediaprofile:highdefinition">
      <dece:BurnsLeft>0</dece:BurnsLeft>
      <dece:CanDownload>true</dece:CanDownload>
      <dece:CanStream>true</dece:CanStream>
    </dece:PurchaseProfile>
  <!--  <dece:RentalProfile>
      <dece:AbsoluteExpiration>2001-12-31T12:00:00</dece:AbsoluteExpiration> 
      <dece:DownloadToPlayMax>PT1004199059S</dece:DownloadToPlayMax>
      <dece:PlayDurationMax>PT130S</dece:PlayDurationMax>
    </dece:RentalProfile> -->     
  </dece:RightsProfiles>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/aaaa</dece:Location>
    <dece:Preference>2</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/bbbb</dece:Location>
    <dece:Preference>3</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:FulfillmentWebLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/cccc</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentWebLoc>
  <dece:FulfillmentManifestLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/dddddd</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentManifestLoc>
  <dece:PurchaseInfo>
    <dece:RetailerID>urn:dece:org:org:dece:${#Project#rtrorgid}</dece:RetailerID>
    <dece:RetailerTransaction>99-${=(int)(Math.random()*100000)}-${=(int)(Math.random()*100000)}</dece:RetailerTransaction>
    <dece:PurchaseAccount>urn:dece:accountid:org:dece:${#Project#rtrnodeaccountid}</dece:PurchaseAccount>
    <dece:PurchaseUser>urn:dece:userid:org:dece:${#Project#rtrnodeuserid}</dece:PurchaseUser>
    <dece:PurchaseTime>2010-11-29T08:44:01Z</dece:PurchaseTime>
  </dece:PurchaseInfo>
  <dece:TokenInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}"   LastModifiedDateTime="2001-12-31T12:00:00">
    <dece:TransactionInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}" LastModifiedDateTime="2001-12-31T12:00:00">dece:TransactionInfo</dece:TransactionInfo>
  </dece:TokenInfo>
  <dece:ViewControl>
    <dece:AllowedUser></dece:AllowedUser>
  </dece:ViewControl>
</dece:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="e655ce4e-ba7d-46e2-87f5-992d822b2b7c"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="b410624d-0c49-476f-8c21-7f4aa92ba08e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamCreate" mediaType="application/xml" postQueryString="false" id="34d8df23-3008-4be3-b5c9-4bc99048936e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="http://www.decellc.org/schema" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>
 <TransactionID>${#TestCase#transactionid}</TransactionID>
 <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#streamcreaterequestuser}</RequestingUserID>
 <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>
</Stream>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="23530b97-8d7a-427f-8f69-0d72abe3b197"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="defe2d74-3119-4f04-8a43-1caebaa98a97"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 403</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="61af7436-805e-4c84-ae63-970034e63305"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="50847d57-c655-41ec-a6b1-3fb7f41c8471"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="29ef3a71-fbbb-469c-bb47-5d1f0e15b16f"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201 0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS" mediaType="application/xml" postQueryString="false" id="1020e423-d247-4def-ad4f-0a2203db3522"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="http://www.decellc.org/schema">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS GET" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="2a8795c4-2c72-40bf-8761-a443ae3131d1"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="7c92f1fe-825e-4ac1-9f7c-16f5bc9ede04"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS GET" mediaType="application/xml" id="63ace201-c197-4fc4-a331-b8f95ddbd7d9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="f22fa47f-6a3b-4c36-999f-1abae6e22fcc"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="PUT" method="PUT" id="0deb9e73-8381-41d3-9e9b-bc73d6337faa"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="e97536ba-9f0c-4ef4-940f-1c78cf806113"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="46a4a4b4-53ca-44d0-8c51-bdd823f78f72"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="4b6eb65a-c952-421f-b327-55f0e0a2f856"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:request name="PolicyCreate Account" mediaType="application/xml" postQueryString="false" id="6f3a3169-aab3-47f5-bf98-e5e206b21ac7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="16f14ebd-e4d6-41dd-9fe6-d68dd9c209d6"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="cb5438e0-5a4d-4fd4-b5d3-77cdeb43e663"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="PolicyCreate User" mediaType="application/xml" postQueryString="false" id="8ea69387-e714-4ce2-a8a4-0395c0506241"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView1" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="f44fe5a8-d3ba-4fd0-85e4-4400547ab563"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="HEAD" method="HEAD" id="0ffbb522-c9b0-4a6b-b454-e85c7154ce2f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="01946d83-c0dc-4db3-b3bc-cd759171e0c9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamViewQHost" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="09f09542-f2f1-4988-94c1-19a945952a86"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="aa501638-62ca-4a3e-a5f9-7031140531c9"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="StreamView" mediaType="application/xml" id="85766d3e-8d6a-4591-ae3e-8e535019388a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" id="15a998f8-4774-4609-9ee0-e921c0467ed6"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="799af3de-7493-4a23-9b85-a93f96d36e58"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="6993c899-6209-4665-a0fd-05a0cfaff6e3"><con:settings/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="00SetupScripts" id="a0001fac-6a7e-4df7-851a-5c5a41942cc6"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="c4631eb1-eff6-4e23-91ac-070f0812a2db"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="86027491-f23c-4cda-8541-5d8517c47bf3"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();

	log.info("Set Environment properties!!!");
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def projectPath = groovyUtils.projectPath
	log.info("Project Path : '" + projectPath + "'");

	def eNV = context.expand( '${#Project#ENV}' )
	log.info("Environment: '" + eNV+ "'");

	def propertiesPath = null;

	if (System.properties['os.name'].toLowerCase().contains('windows')) 
		{
				log.info "it's Windows OS!!";
				File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
				propertiesPath = temp.getCanonicalPath();
		} 
	else 
		{
				log.info "it's Linux OS!!";
				File temp = new File(projectPath + "/../../../Properties/");
				propertiesPath = temp.getCanonicalPath();
		}
		
	log.info("Properties File Location : '" + propertiesPath+ "'");


	def propMap=[:]
	BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
	log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
	String line;
	while ((line = reader.readLine()) != null)
		{
			if (line.trim().length()==0) continue;
			if (line.charAt(0)=='#') continue;

			int delimPosition = line.indexOf("=");
			String key = line.substring(0, delimPosition-0).trim();
			String value = line.substring(delimPosition+1).trim();
			propMap.put(key, value);
		}

	propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="8a8ba184-fc81-4639-99c2-7233fca907fe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;

//a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));
//assert a.cidSetStatusActive('urn:dece:cid:file:STREAMS_CIDVersion_828445.txt')==1</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="4beebf0e-1bdb-40cb-bd50-75b4821291e7"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="a640e408-d584-406d-96f9-c95413f9a2e6"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true" id="f73817ca-3d25-425e-9dd1-8c0e9f1cfba3"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="4946d72a-8a7e-4a4c-b9c8-26e8507344a4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:testStep type="groovy" name="MicroService Enable/Disable Testcases" id="580e22d2-6b5e-4462-b7aa-482f47f19ec0"><con:settings/><con:config><script><![CDATA[
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList<String> Suit_lst=new ArrayList<String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}

//log.info "suit"+Suit_lst.get(1);





ArrayList<String> Tstep=new ArrayList<String>();

def TStep1  = "Remove Account's StreamHandles";
def TStep2 = "Verify STREAM_DATA_HISTORY row";
def TStep3 = "Verify STREAM_DATA, STREAM_HISTORY row counts for the Account";
def TStep4 = "Post Test Cleanup";
def TStep5 ="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts"
def TStep6 ="Verify STREAM_DATA row"
def TStep7 = "Remove account's stream handles"
def TStep8 =  "Post Test Execution cleanup"

Tstep.add(TStep1);
Tstep.add(TStep2);
Tstep.add(TStep3);
Tstep.add(TStep4);
Tstep.add(TStep5);
Tstep.add(TStep6);
Tstep.add(TStep7);
Tstep.add(TStep8);

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i <= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
                if(targetTestCase.isDisabled() == false)
                {
                                for(j = 0; j <= testStepCount - 1; j++)
                                {              
                                	      def q=0;  
                                                try
                                                {     
                                                          for (String T_step : Tstep)	
					                                {
                                                                if (testStepList[j].name == T_step) {
                                                                                
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                //targetTestCase.removeTestStep(targetTestStep);
                                                                                if(microService=="ON")
																				{  
																				   targetTestStep.setDisabled(true)
																				   log.info "Disabled Step " + testStepList[j].name;
																				}
																				else
																				{  
																				   targetTestStep.setDisabled(false)
																				   log.info "Enabled Step " + testStepList[j].name;
																				}
                                                                         }
													q++;
																  
												}
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
                }
    } 
}                                                                                             
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Identify Flaky Testcases" id="cc1c79af-7c45-42c6-8411-a2133557e2b2"><con:settings/><con:config><script>///**** Flaky project level 'Flaky_Disabled' variable on basis of which flaky testcase will be diabled or not

def testCase  = testRunner.getTestCase();


def Flaky_Disabled  = context.expand( '${#Project#Flaky_Disabled}' ).toString();
log.info "Flaky_Disabled : $Flaky_Disabled"
ArrayList&lt;String> Suit_lst=new ArrayList&lt;String>();

def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {

Suit_lst.add(suiteName.name);
  
}
def projectName =project.name;


ArrayList&lt;String> Tstep=new ArrayList&lt;String>();
def count=1;

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i &lt;= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                def tstSuite=testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite)
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
               
				if(targetTestCase.name.toLowerCase().contains("_flaky") || targetTestCase.name.toLowerCase().endsWith("_MIGRATED"))
	{   
			       

				  if(Flaky_Disabled=='true' || Flaky_Disabled=='True' || Flaky_Disabled=='TRUE')
				   { targetTestCase.setDisabled(true);
				   }
                      else
                      {
                      	targetTestCase.setDisabled(false);
                      	}
				  

				  count++;
				}
                      
                
    } 
}                                                                                             
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>396d1d6b-33dd-48d6-b41d-40fc4be4bc57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="P0_StreamView_ISCPortal_ISCPortalCS" id="c7411f18-8e16-4b41-9bc7-dc7519619fab"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_70000 - StreamView - PORTAL - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="98405fca-140f-4559-b8d2-e30eb9efcbf4"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Create Account,Users and STS" id="473a5e57-da67-44e2-b713-d9501d601b4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="58c8c670-ac39-403b-8128-fbb84ae3afea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
tP.setPropertyValue("expectDBCreatedByDB",tC.getPropertyValue("nodeid"));
tP.setPropertyValue("expectDBDeletedByDB",tC.getPropertyValue("nodeid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5164cd0a-f139-49dd-bafa-a14197afd4a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="4c7ccbdc-9bf4-400f-8bff-9186daec7175"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="e4ce8dc9-6c20-461e-a51d-6bcaad836f3b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log);

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="3956c59a-9e93-4563-91b2-238459876fbd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log);

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="5b4624e6-834b-4708-8232-fb430f2457de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bdfc7671-92eb-4440-a739-b4398bf9ac00" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>158C9EA951616F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value>158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZrb+I4FP0rKP24CnkQXlFBojw6TKF0CHRW+6UyziW4JDbEDtD++rEDpITSLrsSEvLN9bnnPnzsW46i0HZbnEMsCKOFXRRS7qbWhpbE1GWIE+5SFAF3BXa91nDg2kXTRcctWqHfaWgv84o1q85nNd2uWzPdcUq+PrOwo898u+ZA1SlXK7Z05TyBPuUCUdHQbNMq66b81SZmxbVMt1wtOnbtH63wDDGX2NKlaGoHUjve0BZCrFzD2G63xW2pyOLAsE3TMv4eDjy8gAhpzdt9RmmguHnwx0UfMIQhLmIWGbdGzufW565HAopEEsMhlv9VLNMw64b08TkJbrRsL/h9Omfpso0oowSjkLwjVZ8hiAXzC60wYDERi+jLJCxTAeuwwzq2HHqjGXlqVwLlGMYc6XyBrAPWGOYQA8VQmI77De3muq6lWycxonzO4ojnl/+ND9ANhGwFvs6PaR2oXQ94oVLNW8Bun+Iw4WQDj2pYVwgDP3QT8PVQhacY5mQ3IFwO6I4rdsYpvbPlvhodEgAX/6dBJ83ZgzyjMIEmeRLTsFt5mnYf++OoOpn52/H8vldJWmYjJXDqnBqy1u6XZ0OZDdF+xxPfIjvoUTrosrJfGWC/bdQgMfo2KZvdZNQbroljw7TTXXT8332z4q8Db1mqjkYPrfeg/PZzu1jgaDyfL0Zlirj3V++5zpbGKgHyY/JmedHI2w6ZJd43j9Wfg7fEicd8dL8e9myy7YyXXa+2wwP4sZrVxtP74GH8e7DcPZivCzJc/npu/7LpsuXMpp1n+nhI94x/3nY8814yewUsjks1Bv1OoSe7hMT3YqYsxNfnqau7UuLDBVChNdUupR1uIuWO+K7s4X5tlWvtVte5692Zd6WOrJpZLpnVet3qmS2rbJWOIrNncUaxzeicqFhKcvdj8z1BHLkcqA+xvmGJVDqufYPYQQIV+nQsDwGjHCZMyrPFyHpVgg2uBX45mIkwFCELXq2dVnhkYkRHcWsuIM5rcj2nyWPAZEVACbeaay4HmwtZizXaJCK0ihtUpJBIaY+Vyrq2UysbnESrEBRTI2J+EkJxtVillTH4/t/WEeaptTNoeU8vbe8lPRDGl+mdfztWQvr4RDlwldIdyG7ChTvGOebzKe/KxbvoCN9KfKLOlyyriAneM8l/+pgWNSbZqHwkdmSebTg35MCN87yyeP6G4Gzss8tbarpUgeaxOWtkFdfFZLNJ0n5IcTdiCW+oihimbXiAE6lTbxO2BGpkKMZVl0JG/Cx4Zs9TTMSCegIJiOT8FNLlFa8AD7h6BfTl4O+ufWLkQsrSCdiJS7Z2KF8wivG3jxzsYuUnzU/yb8ti/6NjF7BO4sg85SNAEBqolboQ3r4YD8wkLJFSxuJT8EsAl4LnjVmRMy5CDtQsEfD1l4LSqIaGMGYJFf2OlhpOdTPlKd5W4H44fYJJpTl7q5F/f6zpJB0BDPKFx0mKr65cVx0BGpxo7yHoF/Jb/05+8+yan8yfLSd1Op/x5h8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158CAE4BFB0B3D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158CAE4BFB0B3D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>158CAE4BFB093D50E05307991F0A1513</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158CAE4BFB093D50E05307991F0A1513</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value>158C9EA951686F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:158C9EA951686F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2f44bea9-5b99-41f2-a466-580b74a58689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76200 - StreamView - PORTAL - Full user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e72b30e3-c281-4458-b234-d53f46f42fc9"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7d9a38cb-602e-45c2-95c2-1a1a9f83c5d9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreatedByDB",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedByDB",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ae7bff29-bbd1-4121-87d6-261dfc0f7167"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d0d3e654-20bc-4f8b-b75d-a010bbfbe75e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="7ae08a9c-4463-42ce-8ecd-c19735fc2738"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4b40136c-f12d-433a-b78b-37a5e70c5e36"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="fcd7d0a3-7262-4721-aa11-757fe7f3ceb7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="1eb07146-4143-4f4e-a377-9385e13c79f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1c0236dc-9b9a-4a0f-9cb4-99ba71ea1c13" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="adae0833-d553-4f2f-83a7-5cff875eea13" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b1dd8d40-621a-4acb-b417-58002fcf107d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A26C7E70A43843AD92CEBEE72D5C846F</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA951616F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc9o6EP0rjPsxY2Sbpz2BGQJJSxuaFJI05csdIa+NwEggyUDy669kwAFCcunNZIbRenX27ENHupR4lnhBS0oQinJWWM8SJoPM2rBSwQKOJZUBwzOQgSLBoNW7DbyiE+DdFqvQ7TSsfyL9N6pWarbnO2CXRxVi12tRyfbCEnbrNRhhr6pdpUyhy6TCTDUsz3ErtqP/6w9ONXD8wCsVa443tApPIKTG1i5Fx9qSWsuGNVZqHiC0Wq2Kq1KRixh5juOi597tgIxhhq3m5SajLJBobv1JMQQCSUKKhM/QJTrwuQxlMKAxwyoVsI0VfhTLQY6PtE8oafzFyvdC2GURz5ZtzDijBCf0FZv69ECNeVhoJTEXVI1nHybhOgbYhjWxiVtmXyx0SO1MoAOGQmJbjrG7xepDBAIYgcJjv9uwvpzXtWzrg8BMRlzM5OHy7/gAW0LC5xDacpfWltr5gCcq1bwEEnQZSVJJl/DTDOscE5DbbgI5H6pwLyCi61sq9YCupWGH9ukdLTfV6NAYpPo/DdprzgbkCScpND2fz0qP14tqNKw6SW2ast5t7a7nu1PZyAjsO2eGvLWb5dFQ5kO02fHyHE96o0jcfe2VbvkVQd2Ywo/Xsvwm4z/hqjf4TcYXbh9K02H7Wd4kv67IRaeqXl0Y/H55ks8//oQ3uDXudMSDwv3a14lfe44XQqQPi4to0v8WDdFjF9WuXltXvHbNV+53fpF4/qT93O1d1X/RlzIfTvqrdjp5ond0otJ7vAif+O/v03so/5mU4+HITZxvw5CvGnk6e/wPbbszP0hHEyBqtzRj0O0UbnSXsPpczIyFhnaUuQZzIz5SAVNW0+wy2hGkWu5oGOgebtZupd72r1t+xa22qzde/dqplJyK77s3Tsvz6vWdyGxYHFFscxZRE8tI7mZsPidIZoEEFoKwlzzVSietTxA7WOFCl/X1IeBMwgPX8uz6y8V0ntS9VWkeuup1GpdVvFrEsdbvn1zdsTvRihSIQ1H2D0S5D4TOKRjlNoMt9WRLpYuxwMtUJW5xiYsMUq3twshs4JXrFSTpbJ6AoYpmPEwTKM7H86w0SG5+PRsTmVmpJHMuFE6yE4E+zO/4264U2iekxkGalK5AtxNOXDLuLp93eVdPXkY7+FYaUnPAdF2VoGTD5PDT27iYOcln5S2xHfN8w18CEHkCAn3CDx2XJo8YLule/N1tru8FrSTNXX8X2C0uiulymWYtLZdLSGh4ZIqKHA8NgKRa614e+BQYylHQWRdLTvwoeG4/pJiqMRsorGCmR7CQLc94SQxAmpdEVx+e9bnPlIOQunQK1uqUrZ3oV5Bh/OlDiQTE+Gnzvf5ZcRG+dewE1l4cnad+SCjKYrMyl8rLBwNCuIalWg652Ac/BXAq+KExL3LORemBGqUKPv5SMDrXsDAhPGWq27Eyw772ZjzVyxyCN6d3MJm85+89+t8PPptmI0BAvxIlzfDNtR2YI8DiPf3eBv1Awp3PJPyQXfOd+b1lr07HM978Fw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA9516C6F28E05305991F0A2288</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA951606F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA951686F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158C9EA9516C6F28E05305991F0A2288</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA951606F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158CAF6843194409E05307991F0AD722</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158CAF6843194409E05307991F0AD722</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A26C7E70A43843AD92CEBEE72D5C846F</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA951686F28E05305991F0A2288</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>A26C7E70A43843AD92CEBEE72D5C846F</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:A26C7E70A43843AD92CEBEE72D5C846F</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectDBCreatedByDB</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedByDB</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86200 - StreamView - PORTALCS - Full user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="70109b13-fcdc-4086-aecc-bafe4e35dbf7"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="97f1faa2-3492-4dbf-b2bf-61545d5a3cfa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="bddb8a7b-458e-4ecd-8fbb-6cc5062acf5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="54275715-9e96-4a42-835c-0f9b05fa41b7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="027e11b0-da9c-44b6-a23c-332e1113202b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9696e3ba-478c-4ced-bace-b784e9caecde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="dea81793-c4d4-4deb-a8b6-2ad42b77f007"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="daa3e7a2-7fbc-44c4-aa2e-b40e116fde4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="48f8aaf3-4755-4aed-b13e-c942c28dff0a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dda79d8b-e02a-4491-8a81-135985a6b1e9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0df7a2ad-cc5d-4b24-9c38-924121971983" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:ABC8FF8DF18840F3BD897982CD3598A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA951616F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc9o6EP0rjPsxY2Sbpz2BGQJJSxuaFJI05csdIa+NwEggyUDy669kwAFCcunNZIbRenX27ENHupR4lnhBS0oQinJWWM8SJoPM2rBSwQKOJZUBwzOQgSLBoNW7DbyiE+DdFqvQ7TSsfyL9N6pWarbnO2CXRxVi12tRyfbCEnbrNRhhr6pdpUyhy6TCTDUsz3ErtqP/6w9ONXD8wCsVa443tApPIKTG1i5Fx9qSWsuGNVZqHiC0Wq2Kq1KRixh5juOi597tgIxhhq3m5SajLJBobv1JMQQCSUKKhM/QJTrwuQxlMKAxwyoVsI0VfhTLQY6PtE8oafzFyvdC2GURz5ZtzDijBCf0FZv69ECNeVhoJTEXVI1nHybhOgbYhjWxiVtmXyx0SO1MoAOGQmJbjrG7xepDBAIYgcJjv9uwvpzXtWzrg8BMRlzM5OHy7/gAW0LC5xDacpfWltr5gCcq1bwEEnQZSVJJl/DTDOscE5DbbgI5H6pwLyCi61sq9YCupWGH9ukdLTfV6NAYpPo/DdprzgbkCScpND2fz0qP14tqNKw6SW2ast5t7a7nu1PZyAjsO2eGvLWb5dFQ5kO02fHyHE96o0jcfe2VbvkVQd2Ywo/Xsvwm4z/hqjf4TcYXbh9K02H7Wd4kv67IRaeqXl0Y/H55ks8//oQ3uDXudMSDwv3a14lfe44XQqQPi4to0v8WDdFjF9WuXltXvHbNV+53fpF4/qT93O1d1X/RlzIfTvqrdjp5ond0otJ7vAif+O/v03so/5mU4+HITZxvw5CvGnk6e/wPbbszP0hHEyBqtzRj0O0UbnSXsPpczIyFhnaUuQZzIz5SAVNW0+wy2hGkWu5oGOgebtZupd72r1t+xa22qzde/dqplJyK77s3Tsvz6vWdyGxYHFFscxZRE8tI7mZsPidIZoEEFoKwlzzVSietTxA7WOFCl/X1IeBMwgPX8uz6y8V0ntS9VWkeuup1GpdVvFrEsdbvn1zdsTvRihSIQ1H2D0S5D4TOKRjlNoMt9WRLpYuxwMtUJW5xiYsMUq3twshs4JXrFSTpbJ6AoYpmPEwTKM7H86w0SG5+PRsTmVmpJHMuFE6yE4E+zO/4264U2iekxkGalK5AtxNOXDLuLp93eVdPXkY7+FYaUnPAdF2VoGTD5PDT27iYOcln5S2xHfN8w18CEHkCAn3CDx2XJo8YLule/N1tru8FrSTNXX8X2C0uiulymWYtLZdLSGh4ZIqKHA8NgKRa614e+BQYylHQWRdLTvwoeG4/pJiqMRsorGCmR7CQLc94SQxAmpdEVx+e9bnPlIOQunQK1uqUrZ3oV5Bh/OlDiQTE+Gnzvf5ZcRG+dewE1l4cnad+SCjKYrMyl8rLBwNCuIalWg652Ac/BXAq+KExL3LORemBGqUKPv5SMDrXsDAhPGWq27Eyw772ZjzVyxyCN6d3MJm85+89+t8PPptmI0BAvxIlzfDNtR2YI8DiPf3eBv1Awp3PJPyQXfOd+b1lr07HM978Fw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA9516C6F28E05305991F0A2288</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA951606F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA951686F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158C9EA9516C6F28E05305991F0A2288</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA951606F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158CAE4BFC703D50E05307991F0A1513</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158CAE4BFC703D50E05307991F0A1513</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>ABC8FF8DF18840F3BD897982CD3598A5</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA951686F28E05305991F0A2288</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>ABC8FF8DF18840F3BD897982CD3598A5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:ABC8FF8DF18840F3BD897982CD3598A5</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158C9EA9516D6F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="PortalTestCases" id="82ff7610-33c4-4a57-ae59-20d09e851bd9"><con:description/><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\ashwin.tikle\Desktop\stream view report</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_70000 - StreamView - PORTAL - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a200776e-cc33-4e55-8151-68aae69038e1"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Create Account,Users and STS" id="2f44bea9-5b99-41f2-a466-580b74a58689"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="8c7f6791-93f9-468c-b46b-7111197fc4c5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
tP.setPropertyValue("expectDBCreatedByDB",tC.getPropertyValue("nodeid"));
tP.setPropertyValue("expectDBDeletedByDB",tC.getPropertyValue("nodeid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="56b98ce2-ff48-4200-9843-ad719d4d53b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="0f0c783c-bf5e-4b80-8533-c2a493cd3f02"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="ef23f91b-db4e-49ec-964f-e4f02d929538"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log);

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="c9042c5b-f52c-49d9-8398-beffe4a760a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log);

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="8cfff0ff-8a3d-4a39-a58c-73ce87783b64" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6b4db6ad-9170-42ce-a818-9384a5f97e16" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVbbbuo6EP0VlP14FHIhUIgKEptLhVoobQq77UtlnAm4TRxqO4Hy9dsOkBJKezhHQkKejNesuXjZlxxFoe22OQcmSExL6yik3M2sTS1h1I0RJ9ylKALuCux67eGNa5dNF+23aKVBt6m9NHzbryPb0REg0B0cVPWZEyC9WpvVa4Ft+TZ2pCvnCQwoF4iKpmabVlU35a/+YNZcq+pWL8o1s/6slabAuMSWLmVT25Fa86a2EGLpGsZqtSqvKuWYzQ3bNC3jcXjj4QVESGtdbjPKArHWzh+XfcAQhriM48i4NAo+lz53PTKnSCQMdrH872KZhtkwpI/PyfyXlu8Ff0CDOFt2EI0pwSgkG6TqMwSxiP1SO5zHjIhF9G0SlqmAdVhjHVsO/aUZRWpnAhUYMo50vkDWDuseAmBAMZQm94Om9uu8rmVbHxiiPIhZxIvL/8YHaAphvARf5/u0dtTOBzxRqdYlYHdAcZhwksJIDesSYeC7bgI+H6o0ZhCQ9Q3hckDXXLEzDukdLbfV6JI5cPF/GnTQnC3IFIUJtLzVlL3y66tJd9nrXGDoPvv3QTBt392smhmBQ+fMkLd2uzwaynyItjseKnjq+P27bnrdiz96y+GcXd89dyadZ3i1U3Q/m0yuWbqw55u7qVer/dlEePCWePbjkFTn6e+7xZ/wdrNsT3uN0dW402/UBu147TX6ySgyycd8wq46Ces++rXNjFT6T+n7dNbr31zV66P6JL6r+ayB3qk5Wm38aDRjkD71vNrzP+2r24cn53WchmR8gXvDil11nGaezgH/om1/5r1k9gpY7JdqDAbdUl92CYmfxUxZiK8Hmau7VOLDBVChtdQupR1uIuWO+K7s4XZtVeuddr9Wdxy75zhmo2dWK+ZFo2H1zXb3wrb3IrNlcUSxE9OAqFhKcrdj8zNBHLkcqA9MT+NEKh3XfkDsIoFKA3ovD0FMOTzEUp4tYc8WaUJsLt4Wb4zM18FbWLFJXSuNYnFLb1k7EMCKmtwoaPI9YLIkoIRbzTWXg82FrMU7ShMRWuUUlSkkUtqZUlnXdupVg5NoGYJiakSxn4RQXi6WWWUMvv23dYR5Zu3etL3xS8d7yQ6E8W16x9/2lZA+PlEOXKX0G2Q34cQd4+zz+ZJ37eRdtIdvJz5R50uWVTCCt0yKnz6nRY1JPiqfie2Z5xuODQVw4zivPJ6fEpyPfX55S02XKtDaN+cdWeX3cpKmSdYPx6kYTMIbqiKGaRse4ETq1MdD/AbUyFGMsy6FnPhR8NxepJiIBfUEEhDJ+SllyzNeAR5w9QoYyMFfn/vEKISUpROwFqdsnVC+YBTjHx852MXKT5rH8m8VM/+zYyewDuLIPOUjQBA6Vyt1IXx8Mx44lrBESlnMDsFPAZwKXjTmRc65CDlQs0TA919KSqOaGsI4TqgYdLXMcKibGU/xsQT30+kLTCbN+VuN/PtjTSfZCGCQLzxOMnx15brqCND5gfbugn4jv52f5LfIrvXF/NVyUKfjGW/9BQ==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158CAF68442E4409E05307991F0AD722</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158CAF68442E4409E05307991F0AD722</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>158CAF68442C4409E05307991F0AD722</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158CAF68442C4409E05307991F0AD722</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value>158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2f44bea9-5b99-41f2-a466-580b74a58689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_70050 - StreamView - PORTAL - AccountIdUnmatched - Node AccountID in URL is null - 403 Forbidden_MIGRATED" searchProperties="true" id="541bc002-e54d-492b-a0a5-1aff1303dd3f"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1503f1be-e9cf-4de2-9f30-94396d0a8f4a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_ACCOUNTID_MISMATCH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ae478eaa-2865-4520-a7d7-e35f07354339"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="079f4d83-2b1e-4c89-9c42-fcf4ab1eebe0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Change URL in account to another account" id="73830425-cea2-4397-985d-6daf93ed8f73"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("assertionAccountIdFULL");

a += "A32";

tC.setPropertyValue("assertionAccountIdFULL", a);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="6ebb06d5-d3de-45cb-8116-fe7b3853eee3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set URL node accountId null" id="3f81a791-8271-4be0-b118-6a7502199a99"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionAccountIdFULL",tP.getPropertyValue("urnaccount"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e0400c5b-1ffc-47e6-8e17-aff67e58c4aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="563a90d0-9ac4-47cf-9348-2491e0a430a9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_70052 - StreamView - PORTAL - AccountIdUnmatched - nodeaccountid and URL accountId mismatch - 403 Forbidden_MIGRATED" searchProperties="true" id="cb0b452e-31e4-40b0-8612-2526b47a8130"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9d9e66bd-3c48-4718-a95d-80463de00315"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_ACCOUNTID_MISMATCH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="51c7e43c-aec5-439c-b8e9-b3c3524828f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7f356c65-1410-47aa-b1c5-fb12316e4b84" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="ecc36350-bfc3-4f07-8593-3ebc3a4c8f7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Change URL in account to another account" id="721482a5-cf5e-4b7a-a9da-63828cef91e8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("assertionAccountIdFULL");

a += "A32";

tC.setPropertyValue("assertionAccountIdFULL", a);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="c7f7a039-0147-4bec-a206-e7e8c5304bf1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e16a2f55-2d3b-4cdb-b3c6-502adf2d1ee1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288A32</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75000 - StreamView - PORTAL - StreamNotFound - Stream supplied does not exist - 404 Not Found_MIGRATED" searchProperties="true" id="84623f41-3596-478d-a64e-96124a691950"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has no active nor deleted streams associated with it.  The stream handle will be properly formed, yet, nonexistent. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ecf2f04a-da55-4f13-8683-342239a8cbec"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","35");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="1d69b472-99b9-47b7-9951-129314c49805"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d7d9674b-9643-4ef3-bf63-e2320e8e906a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="fe2b1b9a-5f9d-4f63-877c-129bf2fbe00a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get nonexistent Stream Handle value" id="96cee6f1-752e-4046-a259-8396fe040c3e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String urn  = tP.getPropertyValue("urnstream");
String hexy = a.randomHexString(40);

this.log.info "urn[$urn] - hexy[$hexy]";

tC.setPropertyValue("streamhandleFULL",urn + hexy);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e140df6d-b06f-4073-9281-0f4acd79189a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d9cd6890-a28e-4c00-870a-54c9ceda395e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="621382df-82e2-4f71-8b70-009b125234d1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName( "Get nonexistent Stream Handle value");
}





</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:1E7E33388FEACFB72B1F835B3CC4EBFD1AED85CD</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>35</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>35</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75001 - StreamView - PORTAL - StreamOwnerMismatch - Stream supplied is in deleted status yet not expired - 403 Forbidden_MIGRATED" searchProperties="true" id="b56f401d-a944-4cce-bdc1-b4a84d92d145"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="eb30bdba-5c3b-49c8-b242-7026ca64cce2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e14ffaea-0b67-4d1e-b712-884bb347abd1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7225121b-7008-4717-ac37-bafafa468a81" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="de096ab4-943e-4d40-8d9a-ec11ffd60923"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5ea7903a-4c0c-4d2d-8870-27be2d11c058"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="f180c38d-0b21-40b1-b7dc-1278daf798be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="4f52f358-f42d-46da-a573-972a2579bc02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="04bbe530-9592-41b0-8bde-c4d92d9e9bfe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dddee3b5-e00b-4cfb-87c4-4f1f9fb14a98" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3b058430-fb1b-4db0-8b78-a8f254d3cf88" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:4EC084A8883F4A0FA9DB3B3FC03A2E9D</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158CAF68471F4409E05307991F0AD722</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158CAF68471F4409E05307991F0AD722</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>4EC084A8883F4A0FA9DB3B3FC03A2E9D</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>4EC084A8883F4A0FA9DB3B3FC03A2E9D</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:4EC084A8883F4A0FA9DB3B3FC03A2E9D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75002 - StreamView - PORTAL - StreamOwnerMismatch - Stream supplied is in deleted status and expired - 403 Forbidden_MIGRATED" searchProperties="true" id="37fa50e3-b6c0-405d-9ecc-de3d7314573e"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1761fa33-8db8-42c8-9e9d-476dcc8af01d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f9e948bc-db92-41fc-ad4e-53d701c37dd8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="01121120-3ef6-494b-abb0-33f02b8a91d9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="37c79354-75c8-4de0-880d-741d2b640f91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="0878302b-5f1b-4cdc-951c-edcb9ad6e7ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="ddde813f-e9a0-49e3-bd45-5da38685740d"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="4ef884c1-0a69-4840-bd82-323d5b6a6973"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="1d40a42d-1557-4ab7-8e9d-215372b66f83"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Expire the Stream" id="5fa4408b-4f84-4959-ad88-762bc99943d7"><con:settings/><con:config><script> def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");


a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamExpireYears(tC.getPropertyValue("streamhandle"),1);

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="aa46a6f5-2ead-4353-a4d4-8f18e583de22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7853f653-f173-42e3-8cdd-607bc77faaef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2766b33d-1404-4871-b78d-03aa5b1de49f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d864fede-f822-4ad3-9751-13fd1f88415c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>158CAF68472D4409E05307991F0AD722</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158CAF68472D4409E05307991F0AD722</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>82E7B4F36AB0477BAB9B446FC053C88A</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:82E7B4F36AB0477BAB9B446FC053C88A</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>82E7B4F36AB0477BAB9B446FC053C88A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:82E7B4F36AB0477BAB9B446FC053C88A</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75003 - StreamView - PORTAL - Stream supplied is in active status and expired - 200 OK_MIGRATED" searchProperties="true" id="f9be56c9-7ec9-4943-9cf0-c0f2bb6002ee"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="030c9a8b-579a-4631-8803-347e970ca848"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9eebaa72-d949-4f72-a9b5-41228b8fb38f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c134873f-954a-4808-9da9-920c50031596" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d9ac1f27-afb9-410b-b06c-bd0fb96708ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="093e7c32-9826-4229-a12b-a82f6b54a752"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Expire the Stream" id="b4d6a6e2-a9b6-4f16-83c0-da064433b64c"><con:settings/><con:config><script> def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

tC.setPropertyValue("expectDBDeletedBy","0");
tC.setPropertyValue("expectDBDeletedBy_" + cnt,"0");
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBStatus_" + cnt,"active");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamExpireYears(tC.getPropertyValue("streamhandle"),1);

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="0a0753a7-cd5b-41f8-bb4f-dd432116c5da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="65f8a0d6-2037-4b05-a836-2bed3228730a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="47311471-7418-436d-836a-e1dd10efe605" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="69d1cff0-f555-4857-99b3-3156bc4d0dfd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="39993c0d-488e-4771-92e4-371db2135e05" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2711DE32FC254945B730741AA4EF8146</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158CAF68473B4409E05307991F0AD722</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158CAF68473B4409E05307991F0AD722</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2711DE32FC254945B730741AA4EF8146</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>0</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>2711DE32FC254945B730741AA4EF8146</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:2711DE32FC254945B730741AA4EF8146</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75007 - StreamView - PORTAL - StreamOwnerMismatch - Single StreamView following StreamDelete - 403 Forbidden" searchProperties="true" id="51ef19ff-7ba2-41a2-86a7-d932ec4c24ed"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="07786c0b-13e0-46f9-9f4f-9b05f8e354af"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e96a76b8-e7e5-44b3-aade-b0af87f00c18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="895996e0-21b1-42ee-bcdf-69e9b21e2162" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c40a652a-98b9-4e49-bbc6-ed1baf5e05b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6f328a0a-55ba-45e3-bac0-ff135c4c5a70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="73897f02-ed89-4526-bf3a-24bc995480b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="7f00cc92-6e03-4012-9dde-6fb99a3df922"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d9554f71-c074-4aee-86ec-20b2aebbd725"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="645a3f43-d476-48df-952b-ffeabb5a5a4a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="77fd4a8b-1a88-4281-93d6-d6d059bcf510" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fcdc9ad4-6410-41f5-901c-7d29f5420f17" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DAE098100FDE4F28ABD6ED716A0C3CEE</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D0DC6DD126C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D0DC6DD126C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>DAE098100FDE4F28ABD6ED716A0C3CEE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>DAE098100FDE4F28ABD6ED716A0C3CEE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:DAE098100FDE4F28ABD6ED716A0C3CEE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75114 - StreamView - PORTAL - Stream handle that is 29 days post CREATED_DATE is displayed - 200 OK_MIGRATED" searchProperties="true" id="46eb02c7-20dc-414c-89e7-d5ef17b0a037"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f613ce2f-d4cd-4999-8beb-fcc1c4c9d892"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","100");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
tC.setPropertyValue("streamViewIgnoreDateDiff","true");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamViewIgnoreCreateDateDiff","true");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ddf1b6df-08b8-444d-91c4-b28f37e8c8df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="103eea3c-19e1-48bf-9f15-d5a0fcd027e0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="90312809-43d5-49d0-9b6a-70d10d5fd63b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a57761bd-6af2-4abd-82c7-3e5cc4006f06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.CREATED_DATE in the past" id="78f5fc6c-bc55-42e7-9c80-1ce6fa011166"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamSetCreatedDate(tC.getPropertyValue("streamhandle"),-29);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="a0c06aa9-cdff-4170-8079-ac0efdd4f745"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="17ef5d09-36cc-43be-9b9b-fcf89dc0d218"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="58fe7b93-6852-4c31-9a01-a551e28fe7ae" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct  = tC.getPropertyValue("accountoid");
def count = tC.getPropertyValue("counter").toInteger();  

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D81E73078980429F81A5A0763E55C698</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>100</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D0DC6DD636C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D0DC6DD636C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>D81E73078980429F81A5A0763E55C698</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D81E73078980429F81A5A0763E55C698</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D81E73078980429F81A5A0763E55C698</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75121 - StreamView - PORTAL - StreamHandleIDNotValid - Stream handle supplied is malformed - 400 Bad Request_MIGRATED" searchProperties="true" id="5bf5c4c6-407d-47ea-a545-a0a154d83f40"><con:description>This test case will verify proper response with the supplied stream handle malformed.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a5583e5a-12f3-4101-ace5-75bd108d88e6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_HANDLE_ID_NOT_VALID");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7dccd37b-fead-4d69-aa2b-703ac9dd797f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="908fe381-10ec-4807-9882-46cb52e0df57" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="0cb0ea49-897e-4592-9d6e-0eb7fa2f2cd9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of malformed stream handles" id="31c1812a-122e-4db9-9a6d-ad7710677de0"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">b&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">C&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">D&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">ee&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FF&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">gG&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AAAAaaaBBBBBccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">13332a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a322212&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">332232a3232&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2232-232-111&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhndleid:org:dece:3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:streamhandleid:org:dece:3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece::streamhandleid:org:dece:33&lt;/con:entry></row></con:configuration></con:dataSource><con:property>sh</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="7eb743b1-7c13-4d7c-b2ab-2f4b01ab7ce7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>sh</con:sourceType><con:sourceStep>Data grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="331be2bb-5906-49ca-9757-ca2c10ff273c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get the next malformed stream handle" id="c38ec86a-e787-4048-9a25-d7a29a36267e"><con:settings/><con:config><dataSourceStep>Data grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece::streamhandleid:org:dece:33</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_HANDLE_ID_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75122 - StreamView - PORTAL - StreamHandleIDNotValid - Stream handle supplied is malformed with special characters - 400 Bad Request" searchProperties="true" id="a88467da-d253-4dd3-91fe-f53e5aebda55"><con:description>This test case will verify proper response when the StreamView API is invoked with a malformed stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="051c6348-6532-4177-bd8c-a4ed82cd5212"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_HANDLE_ID_NOT_VALID");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c71dfbde-19f7-4fca-b011-5121033f7403"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="42a4e73d-8d86-41c9-a258-af28f70cc109" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="37b4c037-1518-4b17-b332-081cd6e9e77d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of malformed stream handles" id="5052ee07-5145-477d-9268-31c7d44110ba"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">@&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">(&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">)&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">_&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">_&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">=&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:=&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:......&lt;/con:entry></row></con:configuration></con:dataSource><con:property>sh</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="79dfd17c-3c01-4b36-8af3-0334c24f49d8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>sh</con:sourceType><con:sourceStep>Data grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="67ac248b-c553-4e45-8388-ba88f035d18b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get the next malformed stream handle" id="807f17ed-e366-441e-a453-58f3e4e8b52c"><con:settings/><con:config><dataSourceStep>Data grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:......</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_HANDLE_ID_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75135 - StreamView - PORTAL - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'deleted' displayed - 200 OK" searchProperties="true" id="6800cb10-648f-4c07-8a8b-9d33626048aa"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of deleted will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="32c7cea4-e003-4ce1-880b-51d42690b1c8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b4cabe51-7336-4d1a-8a0b-16f5c564e0e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="205bb50e-98f5-4681-8479-81e90668e975" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="5bb5fe5d-ec97-4831-9168-5f717dee0308"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="3a72cfc1-00b4-44bc-90fc-16c4a0b3b609"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="014029d1-c239-43f7-b48f-9b52e03e3ed0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusDeleted(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="8f441ab3-2073-4878-8128-614ba7d44c4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="31e9a6a9-17a0-4c1e-8779-6fea50c02b05"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1824ab5c-75e5-4454-8d21-41aae01580a5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0b62701e-493a-4e24-9439-6fd89d3a912a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="78c45c1d-9a0a-4eb8-881f-69f5de2cd6c1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D7A48CCB5C5244A5A3DBAE4BC9B92806</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D0DC6DE726C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D0DC6DE726C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>D7A48CCB5C5244A5A3DBAE4BC9B92806</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D7A48CCB5C5244A5A3DBAE4BC9B92806</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D7A48CCB5C5244A5A3DBAE4BC9B92806</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75136 - StreamView - PORTAL - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'suspended' displayed - 200 OK" searchProperties="true" id="1fb11622-033c-49ce-92ba-27d9f5b64c23" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of suspended will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cac01447-2b35-458c-8afb-1b46a35de7cc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e1888b70-c215-42bc-802c-90928fb13808"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b4f3271a-c304-4ab6-bdd0-672289f974e6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a91f7440-4225-4a14-9c61-e1eb1b36221d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6d510b1c-41de-4c8b-ac16-cbb784f79c02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="2e294cb3-640b-4cd7-9f47-adbcd3600cfb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusSuspended(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="6d7d5237-ef46-4027-9fd4-76f504f5277b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="1cc6c105-ec4e-46aa-8f27-1db1e7c73c83"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="85d46e0d-19bb-4f55-b6a3-1a7e305dd4b7" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8723edd8-bab0-4e91-bd79-7761d4214d46" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0d101e9e-67d9-43a6-851c-db84cced4f71" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6C42C0A22A1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6C42C0A22A1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6C42993500A678E0401F0A059962BE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C42993500A678E0401F0A059962BE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C42993500A678E0401F0A059962BE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75137 - StreamView - PORTAL - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'other' displayed - 200 OK" searchProperties="true" id="a522b1a4-6148-4763-ad56-7eea4ff86524" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ce885eb9-3967-4c58-b557-601176af1f95"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d06d99d5-cbb9-4726-9753-a189c2a35750"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2b4ca659-58a7-49aa-b407-01d80ccdc7fb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f1bd3c7f-11a6-4651-84bf-63b7b4e4c627"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="11733258-2b3e-497b-b0b1-630b39cd14cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="917abf4e-584e-4846-8410-52feaee034f7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="b9097c79-2fa0-4319-bc79-7c58233d164f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="6bf2ab6a-9a23-40ce-93b7-a6702106b2b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e9c504cf-409b-4c9e-bd04-cd9e6d9434de" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0ec5b3e2-1788-4469-990f-f6876f47d4b8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="70d93188-562f-42fe-91d6-923f5f1150ca" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6C4298A1F75FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6C4298A1F75FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6C429A8FB44CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C429A8FB44CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C429A8FB44CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75138 - StreamView - PORTAL - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'pending' displayed - 200 OK" searchProperties="true" id="5a615ec1-0d34-4f9b-ab33-b469b4b8284b" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of pending will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d13b60da-db51-46fb-bec6-3aa8c7e93eb1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a09cd41c-6ba3-4e7b-bed0-474cba02985b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="0dbb13ab-4c9c-4839-8025-4dfa9313afde" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="0f0eb38e-a71e-4f44-8102-f19c85fd34a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e199ba60-f1e3-4bee-b7b2-95056f5e575c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="3fcd9728-a266-4a6d-811f-a1cceb182926"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusPending(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="fccf0bfb-90a0-4c68-8695-b2f3813a5f92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="34d5b7cc-64c4-4ec4-80f8-10989ee72889"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6ec5fe58-cdb7-47a6-8d0a-95cdea74c634" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="347c955b-305c-433e-aee0-4f1f1d02f3d3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="541d1b51-8791-49d7-a48c-e8101b03f58b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6C42C0A2A21B47E0401F0A059962C6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6C42C0A2A21B47E0401F0A059962C6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6C4299B3A62DBBE0401F0A059962C2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C4299B3A62DBBE0401F0A059962C2</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C4299B3A62DBBE0401F0A059962C2</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75139 - StreamView - PORTAL - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'other' displayed - 200 OK" searchProperties="true" id="885baf79-590f-420b-9d11-7bbd020c2ba0" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b0b4b786-ca53-4f8d-9e23-8b9bea8834a3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b4d1e1ed-ce87-460d-ac56-ddf75099d8af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bfb22a35-bc46-46c2-927f-c9b014b297dc" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="654f7d3b-0db7-4a84-96f1-20ea1fac7f61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="883daaab-9269-4018-ba55-1616c031b07d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="9a2c5af7-104d-48c1-80c2-d28e88c51976"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="1b0cd98f-64ae-472f-9b8f-6edbb0469456"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="60f2ea37-9a5a-4d9e-b870-bd783c4e28a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3fc85842-58f1-40aa-bf84-9d7b338d6455" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3c21c57b-41a6-467f-9000-8177e52068a9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b1ed834b-fc41-4168-b2dd-47f82d4038e7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6C42BB88C13FBBE0401F0A059962B6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6C42BB88C13FBBE0401F0A059962B6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6C4298A2725FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C4298A2725FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C4298A2725FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75141 - StreamView - PORTAL - Stream with RightsToken PURCHASE_PROFILE.STREAM of  'N' displayed - 200 OK" searchProperties="true" id="fc40122d-4846-431b-8b44-a769563db90e"><con:description> This test case will verify that an active stream associated with a RightsToken that has PURCHASE_PROFILE.STREAM of  'N' displayed</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="df9c26ef-2423-4ac3-b2c3-76d3d6a87346"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="20d5b235-b4a5-4b55-b989-28bccf772dae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f4251c0f-97c5-48b4-bcd9-120392213a1c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="929ca61e-6712-4c67-96d4-dc327ded5506"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2b25c373-1e60-449c-8a53-0f25a9585bb1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightToken's PURCHASE_PROFILE.STREAM to 'N'" id="2831803d-6820-4a03-b173-f98b521b2614"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="0b9e8aef-ed64-4a92-b3fd-9eb06d15fbfa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="8f4fbb89-adaf-4812-a4d0-9fa72043ae8f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="eca14a3c-908d-4608-8ab9-3b92c4d31d60" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c202cdca-bd85-4feb-9061-69daac99a503" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="34613a0d-e370-440c-9cac-8e81fed7a2f7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DF05DF104CAE4DA29E7BECAA924DF3F1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D96F28E05305991F0A2288</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+I6FP0rKPNxFLKQAIkKEutrZko3SmfaL0/GuYDbxA6xw9JfP3aAFCjtY56EhHxzfe65i499wVEc2X6Lc0gFYbS0iiPK/dza0LKU+gxxwn2KYuC+wP6wNbjy7bLpo90WrRR0G9q/eDyuYduxdas2cXWnhkH3sF3Ta65bQbVqbVKrW9KV8wwCygWioqHZpuXqpvzVH8yqbzm+7ZYdy3nWSo+QcoktXcqmtiW14g1tJkTiG8ZyuSwvK2WWTg3bNC3j9+BqiGcQI615sckoD5Q2t/64HAKGKMJlzGLjwjjwuQi5PyRTikSWwjZW+Fks0zA9Q/qEnEy/acVeCAM6YfmygyijBKOIvCFVnwGIGQtLrWjKUiJm8adJWKYC1mGFdWw59JtmHFI7E+iAYcqRzmfI2mLdwwRSoBhKo/ugoX07r2v51ocUUT5hacwPl3/HB+gCIpZAqPNdWltq5wOeqFTzArAfUBxlnCzgWg1rgjDwbTcBnw9Vuk1hQlZXhMsBXXHFztind7TcVKNLpsDF/2nQXnM2II8oyqAZMG/83J4H7ef4sjLs3zvVKHLn9ervMGjkBPadc0PR2s3yaCiLIdrsmI+6SXhnpNHA4z8ezfXv5WJEezd9cJ9+tt/a4jKtrGl90WfXP9OR8G6i7nVnyF9enqOo567H1vTS/YWd4LFnUPgxWM1d8Xj3eJXErZf10uuuRr+eeg8Ydb7f3LYtw34dzM2fcWcp7m/dq95T9Soa/VNnt5W3Ycdbj9iruM3eWj3Suq6w6prM7qK7797AXJgDPHd5o0hnj/+hbXfmh9n4BbDYLdUYBN1SX3YJia/FTFlIqE9yVz9R4sMFUKE11S6lHX4m5Y6EvuzhZm259U6r57T7XdOpdF2zZ7oVs+Z5Vt9sWa5V2YnMhsURxQ6jE6JiKcndjM3XBHHsc6AhpPqCZVLpuPYFYhcJVArovTwEjHJ4YFKeLVR58dYYUpeOa1YteV2vAVYhDSOtdM3EDb1JWxMB6aEoeweifA+YJASUcqvB5nKyuZDFmKNFJiKrvEBlCpnU9lTJrG87ddfgJE4iUFSNmIVZBOVkluSlMfjm39YR5rmVcJywVKAoPxHGp/kdf9uVQvqERDlwlVIbZDvhxCVj7fL5kHf15GW0g29lIVEHTNZVpARvmBx+eh8XNSfFrLwntmNebPhLAMxPQBhf8DOOS1NEDBdkL/7uNpf3glSS5q6/c2SV5+VsscjyljpOxUglvKGKapi2MQScSa1bP7BXoEaBYpx1sRTEj4IX9kOKmZjRoUACYjmCpXx5xktiCFy9JAJ5eFbnPlMOQsrSCViJU7ZOJF9BivGXDyXsY+Unzbfyb8nS8L1jJ7D24sg85UNCEDpVK3WprD8ZEMwkLJFyyNJ98FMAp4IfGosiF1yEHKhxJuDzLyWlcw0NYcwyKoKulhv2tTfnKdYJ+O9OH2ByeS/ee+S/H3w6yUcAg3wlcpLjq2vbV0eATvf0exv0WMK9XstzK916tW/Xcwl3NxJu2/V6UZQDds0P5o+WvTodz3jzDw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158CAE4BFD043D50E05307991F0A1513</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158C9EA953D86F28E05305991F0A2288</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D2564EE1506A4E05307991F0A09AE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D2564EE1506A4E05307991F0A09AE</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>DF05DF104CAE4DA29E7BECAA924DF3F1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158C9EA953E06F28E05305991F0A2288</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>DF05DF104CAE4DA29E7BECAA924DF3F1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:DF05DF104CAE4DA29E7BECAA924DF3F1</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75142 - StreamView - PORTAL - Stream with RightsToken whos RENTAL_ABSOLUTE_EXPIRATION has expired - 200 OK" searchProperties="true" id="2e07b4ae-ac8a-4e43-b58a-449339d68dcb"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="32ec5dfc-53c9-4cf8-8f2d-43723c66d6df"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8141ce29-ebb4-47df-ad4c-f42a13a99112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4dfbcddd-fa37-4aa1-9ab5-2f63ccb203f5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6e9fe1aa-2be6-4bbe-b352-f807e58ddfc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="af1db587-7861-43c2-8193-445c71cdec9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightToken's RENTAL_ABSOLUTE_EXPIRATION to past" id="b117985e-630c-4a19-b17d-216182b92622"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenExpireYears(rt,1) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="6c8da736-1b67-4e0d-84ea-1806eb4af1a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="2e3e0406-2cb4-47a1-a357-6f3b054295b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b34e885e-578d-4d2a-95de-6a1440297490" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2d966bcf-fa57-42c5-bb02-94d793c41c8e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="43e9b0f4-9f80-4ddb-b596-50501374f815" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_114643</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:04A9A5DE74A84D6F9EA1A4601D77E2D2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B617E93E05307991F0A932A</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPMRhTxIAkQFiRa60OljWuhj+2VlnBvwkNghdiDtr187QAqUdpmVkJBvrs899+Fjn3EUR7bf5RxSQRit5HFEuV9Y21qWUp8hTrhPUQzcF9gfdW+ufbtm+mi7RasMe23tH3CbqOl6ju6aNtKdutvQJ9gNdFTHKPTcFjRaoXTlPIMh5QJR0dZs03J1U/6aY9Pz65Zfd2um471qlSdIucSWLjVT25DKeVubCZH4hrFarWqreo2lU8M2Tct4ubke4RnESOucrTMqAqWdjT+uBYAhinANs9g4M/Z8zgLuj8iUIpGlsIkVfBXLNMyWIX0CTqY/tHIvBEMasmJ5gSijBKOIvCNVnxsQMxZUutGUpUTM4i+TsEwFrEOOdWw59Idm7FM7EWiPYcqRzmfI2mA9QAgpUAyVx4dhW/txWteKreMUUR6yNOb7yz/jA3QJEUsg0Pk2rQ210wGPVKpzBtgfUhxlnCzhVg1rgjDwTTcBnw5V+ZVCSPJrwuWA5lyxM3bpHSzX1eiRKXDxfxq005w1yBOKMujA+HV0Vc24/fy7PnoKibV6fw5zch/Y83ZBYNe5MJStXS8PhrIcovWO28fFIrqzY56TwWBuuOwx/Mn57fPVbJz8PXFGLfHwdr7MeJyjBUDvtTrO077TeLh6eX48f249Vxfz/mIQtga45eVp9d6j/fvHaLCMVo1x5jUXaHHTd6q9weS1MXLn3pVIo8bd0zSx76c0jpaXtz9HkTm+eh03r8+rmXn/9H7lDs6TiXhpvg/GXZ7j1BlcejD/66ZdprPDf9+2PfOjbPIbsNgu1RgMe5VL2SUkvhczZSGBHhaufqLEhwugQuuoXUo7/EzKHQl82cP12nKbPduxuqZ96Trdi8u+6dbNRqtlXZrdZtOrb0VmzeKA4gWjIVGxlOSux+Z7gjj2OdAAUn3JMql0XPsGsYcEqgzpgzwEjHIYMynPFluKuMFc1wvJfBYlOHYjlDjviVa5ZeKO3qXdUEC6r8mtPU1+AEwSAkq41VxzOdhcyFos0DITkVVbohqFTEp7qlTWt52ma3ASJxEopkbMgiyCWjJLisoYfP1v6wjzwko4TlgqUFQcCOPL9A6/bSshfQKiHLhK6RxkN+HIHWNv8/mUt3f0LtrCd7OAqPMlyypSgtdM9j99TIsak3JUPhLbMi83/CEA5kcgjG/4GYelKSMGS7ITf3uZy2tBCkln298FsmqLWrZcZkVLHadupBLeUEU1TNsYAc6k1L2N2RyoUaIYJ90rJfGD4KV9n2ImZnQkkIBYjmClWJ7wkBgBVw+JoTw7+amvlL2QsnQCcnHMdhHJR5Bi/O07CftY+UnzL/m3Ymnw0bEjWDtxZJ7yHSEInaqVulPevhgQzCQskWrI0l3wYwDHgu8byyKXXIQcqEkm4OsvFSVzbQ1hzDIqhj2tMOxKb8FTvCXgfzh9ginUvXzukf9+7+mkGAEM8pHISYGvbm1fHQE63ZHvTdBPCu7WbfPcMxv9Vn1XwVt1u1sWZY9d55P5s2WnTocz3vkX</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D241A02F54ACFE05307991F0A8863</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D241A02F54ACFE05307991F0A8863</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B607E93E05307991F0A932A</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B687E93E05307991F0A932A</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D25320B607E93E05307991F0A932A</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D148DADA734B3E05307991F0A24CE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D148DADA734B3E05307991F0A24CE</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>04A9A5DE74A84D6F9EA1A4601D77E2D2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D25320B687E93E05307991F0A932A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>04A9A5DE74A84D6F9EA1A4601D77E2D2</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:04A9A5DE74A84D6F9EA1A4601D77E2D2</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158CAE4BFD053D50E05307991F0A1513</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75150 - StreamView - PORTAL - StreamClientNickname verification when value is NULL - 200 OK_MIGRATED" searchProperties="true" id="04b1c377-eccc-437f-a2b9-19970fd9e770"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="27bc44a5-b7ce-4707-a12e-7f4b88901955"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c28c72ae-11fd-4510-9208-1ea709ba6c10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a5ed72ad-affe-47c9-a704-741d3c82669d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="95a75802-9f84-4b1c-92cc-5ac970ff2854"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="458ce890-a099-4127-9dc1-c29eaab2111f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="55109fd0-c0da-4fbc-ae71-ecddf7f18240"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="75b81e5e-c84d-4080-ae70-83c3fc983ffe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="47ef3fb9-f778-4db2-9631-bc73c3599eea" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c05e483d-7ffe-492f-bd2d-46b6bce2f7de" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f079d18c-8b34-4030-b901-46a7eebf114f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_120347</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EC91288243BC4D72A7C30CA143D1AE1B</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B617E93E05307991F0A932A</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPMRhTxIAkQFiRa60OljWuhj+2VlnBvwkNghdiDtr187QAqUdpmVkJBvrs899+Fjn3EUR7bf5RxSQRit5HFEuV9Y21qWUp8hTrhPUQzcF9gfdW+ufbtm+mi7RasMe23tH3CbqOl6ju6aNtKdutvQJ9gNdFTHKPTcFjRaoXTlPIMh5QJR0dZs03J1U/6aY9Pz65Zfd2um471qlSdIucSWLjVT25DKeVubCZH4hrFarWqreo2lU8M2Tct4ubke4RnESOucrTMqAqWdjT+uBYAhinANs9g4M/Z8zgLuj8iUIpGlsIkVfBXLNMyWIX0CTqY/tHIvBEMasmJ5gSijBKOIvCNVnxsQMxZUutGUpUTM4i+TsEwFrEOOdWw59Idm7FM7EWiPYcqRzmfI2mA9QAgpUAyVx4dhW/txWteKreMUUR6yNOb7yz/jA3QJEUsg0Pk2rQ210wGPVKpzBtgfUhxlnCzhVg1rgjDwTTcBnw5V+ZVCSPJrwuWA5lyxM3bpHSzX1eiRKXDxfxq005w1yBOKMujA+HV0Vc24/fy7PnoKibV6fw5zch/Y83ZBYNe5MJStXS8PhrIcovWO28fFIrqzY56TwWBuuOwx/Mn57fPVbJz8PXFGLfHwdr7MeJyjBUDvtTrO077TeLh6eX48f249Vxfz/mIQtga45eVp9d6j/fvHaLCMVo1x5jUXaHHTd6q9weS1MXLn3pVIo8bd0zSx76c0jpaXtz9HkTm+eh03r8+rmXn/9H7lDs6TiXhpvg/GXZ7j1BlcejD/66ZdprPDf9+2PfOjbPIbsNgu1RgMe5VL2SUkvhczZSGBHhaufqLEhwugQuuoXUo7/EzKHQl82cP12nKbPduxuqZ96Trdi8u+6dbNRqtlXZrdZtOrb0VmzeKA4gWjIVGxlOSux+Z7gjj2OdAAUn3JMql0XPsGsYcEqgzpgzwEjHIYMynPFluKuMFc1wvJfBYlOHYjlDjviVa5ZeKO3qXdUEC6r8mtPU1+AEwSAkq41VxzOdhcyFos0DITkVVbohqFTEp7qlTWt52ma3ASJxEopkbMgiyCWjJLisoYfP1v6wjzwko4TlgqUFQcCOPL9A6/bSshfQKiHLhK6RxkN+HIHWNv8/mUt3f0LtrCd7OAqPMlyypSgtdM9j99TIsak3JUPhLbMi83/CEA5kcgjG/4GYelKSMGS7ITf3uZy2tBCkln298FsmqLWrZcZkVLHadupBLeUEU1TNsYAc6k1L2N2RyoUaIYJ90rJfGD4KV9n2ImZnQkkIBYjmClWJ7wkBgBVw+JoTw7+amvlL2QsnQCcnHMdhHJR5Bi/O07CftY+UnzL/m3Ymnw0bEjWDtxZJ7yHSEInaqVulPevhgQzCQskWrI0l3wYwDHgu8byyKXXIQcqEkm4OsvFSVzbQ1hzDIqhj2tMOxKb8FTvCXgfzh9ginUvXzukf9+7+mkGAEM8pHISYGvbm1fHQE63ZHvTdBPCu7WbfPcMxv9Vn1XwVt1u1sWZY9d55P5s2WnTocz3vkX</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D241A02F54ACFE05307991F0A8863</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D241A02F54ACFE05307991F0A8863</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B607E93E05307991F0A932A</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B687E93E05307991F0A932A</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D25320B607E93E05307991F0A932A</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D26457C8E6855E05305991F0ACCD3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D26457C8E6855E05305991F0ACCD3</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EC91288243BC4D72A7C30CA143D1AE1B</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D25320B687E93E05307991F0A932A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>EC91288243BC4D72A7C30CA143D1AE1B</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:EC91288243BC4D72A7C30CA143D1AE1B</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75151 - StreamView - PORTAL - StreamClientNickname verification when value is single character - 200 OK" searchProperties="true" id="6d454c61-8ce6-4a46-a866-5982815a876d"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ee0b553d-aa76-4011-a16f-d357a9e7fcaa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="146044b7-5853-4972-b988-5ec5d3bafef7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="71c7b4d3-b901-452e-8e32-7fed1e148090" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a5b8f10a-f8b0-443d-b8e8-d33a1f4a67f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of Nicknames" id="578e10a4-8a20-4db7-bea6-bce15e387d84"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">B&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">-&lt;/con:entry></row></con:configuration></con:dataSource><con:property>a</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer of NickName" id="e5c4716e-b4f6-41c7-b373-d9c43971b6d6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>a</con:name><con:sourceType>a</con:sourceType><con:sourceStep>Grid of Nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="1ac9757f-18a7-48ea-97a4-7d3052b37f43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="77e80144-dc92-4e39-b3ca-745e5080da68"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="ea3d8c33-d6f3-41a0-b101-7ce255853dd5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="63e8ec03-9aec-4a45-9f9a-10d00e27544d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e35bd8df-6292-4a6a-bd72-9a39b3b8d8f0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="1f3bde34-3fc5-4ea9-bd85-c87985a298ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="4f549877-eadd-408f-814a-e3140bca034b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next Nickname" id="10d3f378-175f-4346-a68a-8918748b638c"><con:settings/><con:config><dataSourceStep>Grid of Nicknames</dataSourceStep><targetStep>Property Transfer of NickName</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_120347</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">-</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:539BBA259FBC402886266805D4684AB2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B617E93E05307991F0A932A</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjFbKQsEQFiRJ6S0s3aEtvv1SuMwH3JjbEDkt//bMDpITSPt6TkJAn4zNnFh/7lKM4sr0255AIwmhpGUeUe5m1qaUJ9RjihHsUxcA9gb1h+7rv2WXTQ9stWqnnN7XXWs3FNWzX9RCqoe6EZlWvu42GbiKzjqxKPQxwTbpynkKPcoGoaGq2abm6KX/1B7PqVSqe7ZQdx33RSk+QcIktXcqmtiG15E1tIsTUM4zFYlFeVMosGRu2aVrG83V/iCcQI611us4oC5S0Nv64HACGKMJlzGLj1Cj4nAbcG5IxRSJNYBMr+C6WaZgNQ/oEnIx/afleCHo0ZNmygyijBKOIfCBVn2sQExaU2tGYJURM4m+TsEwFrMMS69hy6C/NKFI7EqjAMOFI5xNkbbAGEEICFEPpcdBrar+O61q29SFBlIcsiXlx+d/4AJ1DxKYQ6Hyb1oba8YAHKtU6Bez1KI5STuZwo4Z1ijDwTTcBHw9VuksgJMs+4XJAl1yxM3bp7S3X1fDJGLj4Pw3aac4a5AlFKbQG3fNp31imJ/jy3k5Su5rOu/5sxGZX42ZGYNc5M+StXS/3hjIfovUO3lldXbHe7NGq+cnL7eqaPKP6yhQBdk4WTscZ9V+mcB8trnr92khM/l4M/Peziz+8O5hhfjVO08oI/2bi/Pfkrv5mTdw2HVwn4nlude7+zLEvJhesff+0uJyeVEazS/J4HYFPlu7VjQOPJw+XENhvJ10Uj373n1fo/XI1OE8YHg/tRjqiFwOyuujg5cNbJby4eWzm6ezwL9q2Z36Yvr0DFtulGoOeXzqXXULiZzFTFhLoYebqTZX4cAFUaC21S2mHl0q5I4Ene7heW27dt13fOWtUrVq33umabsWsNRrWudmudm1zKzJrFnsUO4yGRMVSkrsem58J4tjjQANI9DlLpdJx7QdEHwlU6tGBPASMcnhgUp4tLskx2/yIP8LUequOg/c4jBuu62ilGyZu6W3SDgUkRVFuFER5AJhMCSjlVoPN5WRzIYsxQ/NURFZ5jsoUUqntiZJZua/uGpzE0wgUVSNmQRpBeTqZZqUx+Prf1hHmmdXvt4d3r53ha3YijG/z2/+2LYX0CYhy4CqlM5DthAOXjLXN50ve1YOX0Ra+nQZEHTBZV5EQvGZS/PQ5LmpO8ln5TGzLPN+wbyiAG/t55fGCOcH53Oe3txR1KQOtbXNmyCrPyul8nmb9cJyKkUh4Q1XEMG1jCDiVQrV6YH+BGjmKcdStkBPfC57bixRTMaFDgQTEcn5K2fKIZ8AQuHoG9OTkL499YxRCytIJWIpDtk4knzCK8Y+vHOxh5SfNd/JvwZLgs2MHsHbiyDzlK0AQOlYrdSOsvhkPzCQskVrGkl3wQwCHgheNeZFzLkIO1Fsq4PsvJSVSTQ1hzFIqer6WGXaFM+MpVlPwPp2+wGTanD/WyL+/1nSSjQAG+cTjJMNXd66njgAd74jvJuhh/XXPf9LfIrvWF/NXy06d9me89Q8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D25D4B9617E8CE05307991F0A6E20</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25D4B9617E8CE05307991F0A6E20</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25D4B95F7E8CE05307991F0A6E20</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D25320B687E93E05307991F0A932A</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D25D4B95F7E8CE05307991F0A6E20</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D31D3EA1C7D62E05305991F0A917E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D31D3EA1C7D62E05305991F0A917E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>539BBA259FBC402886266805D4684AB2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D25320B687E93E05307991F0A932A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>539BBA259FBC402886266805D4684AB2</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:539BBA259FBC402886266805D4684AB2</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75152 - StreamView - PORTAL - StreamClientNickname verification when value is max allowed - 200 OK" searchProperties="true" id="5546fc61-6e47-48e0-90a6-349d41bc478e"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="91440f4b-58a9-438f-bcde-cebf7e53b0df"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8085315c-9059-4c37-912b-9e091f9bbbfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="939a9313-a7d2-42c5-aaea-efb8fabf3784" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a5c435ce-8a64-4ba2-a000-b96034c1ad29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of 64 character nicknames" id="260aabbe-0944-42fb-8d69-d3aa70af26f1"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxx&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxxxx&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">123456789012345678901234567890123456789012345678901234567890yyyy&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a2b3c4d5eiiii&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiI&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Nickname" id="d680c756-c24e-4773-b5c0-3a909a84032f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of 64 character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9151670e-ea01-4e99-9cbc-18239896be37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="ecad0372-9f1f-4013-af3f-6f456a729314"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="62c8c12a-46db-4609-b590-f05bde12275c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a85ad9b0-bdac-4f36-9ad6-219a1b28092c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3b355083-7f2d-4d82-8dd1-fd323371c6f1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="5bfaecf0-d753-4695-b07e-0466955e34b9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="b0be13d2-d41e-4f41-bafc-51805dee19a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="e8ab7977-7d85-472e-8e6c-f2aa6833aacd"><con:settings/><con:config><dataSourceStep>Data grid of 64 character nicknames</dataSourceStep><targetStep>Property Transfer Nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_120347</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiI</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:088E1598DC004EA3B0F4CC0E89257287</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D257F6CAE3720E05305991F0AC58B</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D0DC71DDF6C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I6EP0rKPuxCnnwjgoSJcuSlna7hXbbfqmMMwGXxA6xA7S//toBUkJpL/dKSMiT8ZkzDx/7nKMotJ0u55AIwmhpHYWUO5m1raUJdRjihDsURcAdgZ1R93ro2GXTQbstWslz29oLblXsmtVs6aiGK3q1Vsd6s+FPdLsBdgBNaNatqnTlPAWPcoGoaGu2adV0U/6aY7PuVGuO1SybFetZKz1AwiW2dCmb2pbUmre1mRCxYxir1aq8qpRZMjVs07SMx+vhCM8gQlrnfJNRFijpbP1x2QcMYYjLmEXGuVHwOfe5MyJTikSawDaW/1Us0zBbhvTxOZn+0PK94Hs0YNmyhyijBKOQvCNVn2sQM+aXuuGUJUTMoi+TsEwFrMMa69iq0h+aUaR2IlCBYcKRzmfI2mLdQQAJUAyl+zuvrf04rWvZ1nGCKA9YEvHi8r/xAbqEkMXg63yX1pba6YBHKtU5B+x4FIcpJ0u4UcMaIwx8203Ap0OVbhMIyHpIuBzQNVfsjH16B8tNNVwyBS7+T4P2mrMBeUBhCp3kcR722NANWeXXYtS/7L8+RQP3z2Kc4nZGYN85M+St3SwPhjIfos2Oq7OwNcbePcETuJg1zl5nffF34t3MV1Nrsnjvvp9dtuyz6Kpy310ub38F1/1BgFBI+5fDuI6T8ePy9eZp0IPVut79/Wa/z9nQi9dvhC/H3R53/3qI4HBW6b/+geCp0Xt8GtjDqyCa3124T4Ph8yQJ1k8WvvzpTdHPRfycvNfd+e2vi4fB39k9w1a3Fj28WmTwsEhYO09nj3/Rtjvzo3TyCljslmoMPLfUl11C4nsxUxbi60Hm6sRKfLgAKrSO2qW0w0ml3BHfkT3crK1a07Vb9WbLvrAabq3+06xVzFqrZfXNbsWtV3cis2FxQLHHaEBULCW5m7H5niCOHA7Uh0RfslQqHde+QXSRQCWP3slDwCiHMZPy3JhjkrbWlbQR1ppBwmLfNMNJINX7honf9HfSDQQkRUluFST5DjCJCSjdVmPN5VxzIUuxQMtUhFZ5icoUUqnsiRJZx642awYnURyCImpEzE9DKMezOCuMwTf/to4wz6zusDu6femNXrLzYHyZ3eG3XSGkj0+UA1cpXYBsJhy5YsxdPp/yrh+9inbw3dQn6njJqoqE4A2T4qePYVFTkk/KR2I75vmGQ0MB3DjMK4/nLwnOpz6/u6WkSxHo7JqzQFZ5UU6XyzTrR7VaMRIJb6iKGKZtjACnUqbexmwO1MhRjJPuhJz4QfDcXqSYihkdCSQgkvNTypYnPAJGwNUjwJNzvz71hVEIKUsnYC2O2XqhfMAoxt++cbCDlZ8038q/FUv8j44dwdqLI/OUbwBB6FSt1H3w9sV4YCZhiVQyluyDHwM4FrxozIuccxFyoCapgK+/lJREtTWEMUup8FwtM+zLZsZTvMXgfDh9gsmUOX+qkX9/q+kkGwEM8oHHSYavblxHHQE63ZPebdDj6tvtf6e+RXadT+bPlr06Hc545x8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D296892B17D56E05305991F0A3D64</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D296892B17D56E05305991F0A3D64</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D296892AF7D56E05305991F0A3D64</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D257F6CB53720E05305991F0AC58B</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D296892AF7D56E05305991F0A3D64</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D148DCA1534B3E05307991F0A24CE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D148DCA1534B3E05307991F0A24CE</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>088E1598DC004EA3B0F4CC0E89257287</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D257F6CB53720E05305991F0AC58B</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>088E1598DC004EA3B0F4CC0E89257287</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:088E1598DC004EA3B0F4CC0E89257287</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D241A02F64ACFE05307991F0A8863</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75153 - StreamView - PORTAL - StreamClientNickname verification when value contains special characters - 200 OK" searchProperties="true" id="a4c0e390-96fa-492c-8c68-203e47bb076e"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1dfd5c3d-a276-41b9-932d-d097838beaa9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e0dac9ff-5661-4f94-9392-3d08437805e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="22d709e8-6068-49d7-a18a-0e280cf1c613" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="66fe448e-78d2-4831-8a6a-ee3403be1ce1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of special character nicknames" id="fdfd273b-acd4-47b9-8044-6fdeee4864f1"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!---100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">abc-299!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1|2|3|3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1000-(aaa3)&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">34%a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1@@@@@@1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">400*&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">?&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">800#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">[34]&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Nickname" id="93f9eb5b-e13c-4c62-9d09-8221e89bc3e8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of special character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f66e6e38-2fe0-4b99-9628-fd73c4efa457"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="9c1d2b8f-22b2-46e8-8cc3-78b28dfa6dbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f8e09733-e37b-4f84-81d7-8c814146ecfc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="2384065a-993f-49ab-88c6-25b46468ea6b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f9bea284-905f-4c6f-a867-193910b4713b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="63433de8-78e9-494c-b6eb-c573bdb91553"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="b735220b-0948-4db8-b125-6481156f1421"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="81ad0a9d-d6eb-4109-bd58-5f1c22891b43"><con:settings/><con:config><dataSourceStep>Data grid of special character nicknames</dataSourceStep><targetStep>Property Transfer Nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_121554</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">[34]</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B2102823037D4D5E90E0C02A4E344506</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D2967FBB27D5CE05305991F0ADD5A</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D35F527007D64E05305991F0A2485</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbb/I4EP0rKH2sIAkkXKKCRKFoaYH2Ky3a9qVynQmYJg74EqC/fu0AKaG0y66EhDwZnzlz8bGvOIrCstfmHJggMS2so5ByL7U2DcmoFyNOuEdRBNwT2Bu3hwOvXLI8tN9iFPrdpvEWgGvXgsApBpbtFp2qg4sNVLOKDceGRrmGgwquKlfOJfQpF4iKplHWrpb61Z+squdWvbJdsivOq1GYAOMKW7mULGNHas2bxkyIhWeaq9WqtKqUYjY1y5Zlm38PB2M8gwgZrattRmkg1tr545IPGMIQl3AcmVdmzufK596YTCkSksEulv9TLMu0Gqby8TmZXhjZXvD7NIjTZQfRmBKMQvKJdH2GIGaxX2iH05gRMYt+TMK2NHAR1riIbYdeGGae2plAOYaMoyKfIXuH9QgBMKAYCs+P/aZxcV7X0q1PDFEexCzi+eV/4wM0gTBegF/k+7R21M4HPFGp1hVgr09xKDlJYKSHdYEw8F03AZ8PVXhgEJD1gHA1oGuu2ZmH9I6W22p0yRS4+D8NOmjOFmSCQgmtwWT0MU74exTVhy+XPKjWPsMxHQzd52EzJXDonBqy1m6XR0OZDdF2x3QyH3GXVKPbKnGGIdwFn6zBTFm73Dw9vNfc1+V1UkeVUei4q/tk+jz12e1rcheici95mc8bfybVYTtGy8nny7u8ddcsrHwmfyX9pIJk726wDLtCUuuyMyrfPtyYZC4WaNLuun6lccP8+cC5e3C6wWuwmdMe/3h5ceXzYnH/+qdtXw+WwUxY8bizQT0zeVz1m1k6B/zztv2ZH8v3OWCxX+ox6HcLPdUlJH4XM20hfjFIXb2FFh8ugAqjpXdp7fCkkjvie6qH27Xt1rvlRrVWq1Vval23fWO5FcttNOye1XZ6bmcvMlsWRxQ7MQ2IjqUldzs2vxPEkceB+sCKSSyV0nHjF8QuEqjQp4/qEMSUw1Os5HlWT9azWW1lL2UUYek6zvsHW3PfKIxicU/vWTsQwPKS3MhJ8iNgsiCgdVuPNVdzzYUqxRIlUoR2KUElClIpO9Mi65WdumtyEi1C0ETNKPZlCKXFbJEWxuTb/3IRYZ5au4P2+OGtM35Lz4P5Y3bH3/aFUD4+0Q5cp3QNqplw4oqx9/l8y7t68iraw7elT/TxUlUVjOAtk/ynr2HRU5JNyldie+bZhmNDDtw8ziuL5ycEZ1Of3d1K0pUItPbNWSK7tCzJJJFpPxynYjIFb+qKmFbZHAOWSqY2T/EHUDNDMc+6EzLiR8Eze56iFDM6FkhApOankC7PeASMgetHQF/N/frcF0YupCqdgLU4ZeuE6gGjGf/6xsEe1n7K/KD+VjHzvzp2AusgjspTvQEEoVO90vfB5ofxwLGCJUrJYnYIfgrgVPC8MStyxkWogXqXAn7+UtAS1TQQxrGkot81UsOhbKY8xWYB3pfTN5hUmbOnGvn3t1qRpCOAQT3wOEnx9Y3r6SNApwfSuwv6g/p2flPfPLvWN/N3y0Gdjme89Q8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D2967776E7D5AE05305991F0A4F5C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D2967776E7D5AE05305991F0A4F5C</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D2967776C7D5AE05305991F0A4F5C</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D2967FBB97D5CE05305991F0ADD5A</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D2967776C7D5AE05305991F0A4F5C</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D257F78293720E05305991F0AC58B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D257F78293720E05305991F0AC58B</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>B2102823037D4D5E90E0C02A4E344506</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D2967FBB97D5CE05305991F0ADD5A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>B2102823037D4D5E90E0C02A4E344506</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:B2102823037D4D5E90E0C02A4E344506</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D0DC71DDF6C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D0DC71DDF6C5EE05305991F0AF5E3</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_75154 - StreamView - PORTAL - StreamClientNickname verification of escaping of &amp;, &lt;, and > - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="34c2c022-d12f-411b-85aa-4939e9b6fbcf"><con:description>This test case verifies the proper XML escaping is performed on the STREAM_CLIENT_NICKNAME. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1529c4a7-c003-4602-b215-db64829eeefd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="1bedbbf5-f685-4282-9ad7-a6cf58f1bb2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5dd525a8-cd82-4b7b-a1da-1f6defeca1b3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="10e4fecc-312a-4063-a0fc-f970eed2e908"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of special character nicknames" id="ce6fd47e-849e-428e-a7d1-7e44118e0024"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Testing&amp;amp;&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">&amp;amp;testing&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">test&amp;amp;ing&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">100#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1000#2000&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">###&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Tom &amp;amp; Jerry&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">This is less than &amp;lt;&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">This is greater than >&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">&amp;lt;time of day>&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Store newly selected nickname" id="de480c7a-a137-4d63-b306-d31bb1b6b65c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of special character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Escape the special characters the nickname string" id="16149ef6-1278-4e5b-93ce-5df226ec1611"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();

def datarowcntBefore = testCase.getPropertyValue( "nickname" );

testCase.setPropertyValue("nicknameBefore",datarowcntBefore);

//this.log.info "datarowcntBefore is " + datarowcntBefore;

datarowcntBefore = datarowcntBefore.replaceAll("&", "&amp;");
datarowcntBefore = datarowcntBefore.replaceAll("<", "&lt;");
datarowcntBefore = datarowcntBefore.replaceAll(">", "&gt;");
//datarowcntBefore = datarowcntBefore.replaceAll("'", "&apos;");
datarowcntBefore = datarowcntBefore.replaceAll("\"", "&quot;");
//this.log.info "datarowcntBefore is after" + datarowcntBefore;

testCase.setPropertyValue( "nickname", datarowcntBefore );

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="994db2aa-c5b5-47da-b6ec-2a34f682c5ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Restore the Nickname for StreamView Body Validation" id="4481451f-50e8-43cc-b584-24e569cc9526"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();

testCase.setPropertyValue("nickname",testCase.getPropertyValue("nicknameBefore"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="186d9681-6f99-4400-bae8-413d23ab3191"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b7b96dcd-9d4b-4e81-bef2-5d681e97221e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="06f97bd4-4958-409c-9e5a-f0f974079b22" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0b0a241a-e9d3-4fca-80ef-1efb1fb1df10" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="56318aed-7a38-456b-905f-ecb8b4ff543f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="deed9520-b0ba-4ae4-9508-83c60934625d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="2283bba7-1a57-4498-83d2-bc06f2b63711"><con:settings/><con:config><dataSourceStep>Data grid of special character nicknames</dataSourceStep><targetStep>Store newly selected nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_122652</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;time of day></con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AD77F3BCE3CD42108E97F015D380EB1E</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I6EP0rKPtxFeIEaJqoIPFou2mhQOljt19WxpmAu4kTYgfY/vprB0gJpb3cKyEhT8Znzjx87AuOo9By25xDKmjMKusoZNzNrU0tS5kbY065y3AE3BXEnbQHfdeqIhfvtmgVr9fUftdwA1mBY+tnthnodVRDugOopgdTVLds0nBQ4EtXzjPwGBeYiaZmIbOhI/k7f0C2K3+NWtVunL1olSdIucSWLlWkbUmteVObC5G4hrFaraqrWjVOZ4aFkGn8HPQnZA4R1loXm4zyQGlr60+qPhAIQ1IlcWRcGCWfC5+7EzpjWGQpbGP5n8VCBnIM6eNzOvumFXvB91gQ58suZjGjBIf0Dav6DEDMY7/SDmdxSsU8+jQJEylgHdZEJ2adfdOMMrUTgUoMU451PsfmFuseAkiBEag83ntN7dtpXcu3PqSY8SBOI15e/jc+wJYQxgn4Ot+ltaV2OuCRSrUugLgeI2HG6RLu1LAmmADfdhPI6VCVUQoBXfcplwO65oqdsU/vYLmpRo/OgIv/06C95mxAnnCYQSvE3bY3erys3Xu38/h2tBp1Yuvp57BuPjZzAvvOuaFo7WZ5MJTFEG12iF/miJnYH3S7nSv+fZWNDAfsddJ4Hth4HPBxh3vjP9fT/uv1eNxLnm4eFvzG+nF1Pv9RP7euO5ftN4cvVz6wP1NsJbfThvX0Gs5e3hZ0TQdZtv6OLM++eRnA883Z3Gf4/ukO9YP6dTQO7MkwSS8n80aY3Hr9H6T2kj4u+OXz+O7l2lm262+d0Hfa3+3n2+FwyH41i3T2+JdtuzM/yaavQMRuqcbA61WuZJew+FrMlIX6epC7uokSHy6ACa2ldintcDMpd9R3ZQ83a7Nx3rMd+8rstM9N1EGXqFFDtuOYV6iNHKu3E5kNiwOK3ZgFVMVSkrsZm68JksjlwHxI9WWcSaXj2heIPSxwxWP38hDEjMNDLOU5mBLrVSxEJPy1KeIwE0tmTpHlaJW7WAzZMG0HAtKSJpuopMn3QGhCQQm3mmsuB5sLWYsFXmYiNKtLXGWQSWlPlcq6Vv28YXAaJSEopkYU+1kI1WSe5JUx+Obf0jHhubXXb09Gv7uT3/mBMD5N7/DbrhLSx6fKgauUOiC7CUfumPounw95nx29i3bw7cyn6nzJsoqUkg2T8qf3aVFjUozKe2I75sWGQ0MJ3DjMq4jnLykpxr64vKWmSxVo7ZqzwGZ1Uc2WyyzvR71eM1IJb6iKGMgyJkAyqVN/H+I/wIwCxTjpUiiIHwQv7GWKmZizicACIjk/lXx5witgAly9Ajw5+OtTnxilkLJ0AtbimK0byheMYvzlI4e4RPlJ80j+reL0PfFjWHtxZJ7yESAom6mVuhD+fjIeJJawVEpZnO6DHwM4FrxsLIpccBFyoKaZgM+/VJRGNTVMSJwx4fW03LCvmzlP8TcB993pA0wuzcVbjf77Y02n+QgQkC88TnN8deW66giw2Z72boN+Ir9nX8lvmV3rg/mjZa9OhzPe+gc=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D797F1BA810B0E05307991F0A092D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D797F1BA810B0E05307991F0A092D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D797F1BA610B0E05307991F0A092D</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D797F1BA610B0E05307991F0A092D</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D2646011D6857E05305991F0A6B91</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D2646011D6857E05305991F0A6B91</con:value></con:property><con:property><con:name>nicknameBefore</con:name><con:value>&lt;time of day></con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>AD77F3BCE3CD42108E97F015D380EB1E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>AD77F3BCE3CD42108E97F015D380EB1E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:AD77F3BCE3CD42108E97F015D380EB1E</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D35F527007D64E05305991F0A2485</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D35F527007D64E05305991F0A2485</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76010 - StreamView - PORTAL - Stream view for account with single stream handle present - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2b02b2f1-58a9-4cbb-8e4c-d0bce74a7ab4"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="99a8600a-c71b-4015-b67a-7808e0bbe57b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="269f58a8-f27b-423c-8148-5620ba5bb97e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="60b3020b-7185-4be8-8576-8f4ec59c3b05" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cf2bdde3-437a-4a10-ad8d-85ce4b082b74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="51a454f4-23d1-425e-aed2-99e93d7db226"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="b6c8006e-0b95-4df0-99aa-bb2f901d7a9a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="8c50d5ed-e9d4-4651-b3be-9663be61ba0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ff89989e-7e58-4726-a453-707db186b248" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5bdfbab4-f325-4be6-9fb6-4b0ab22f6002" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="596b6248-c3f9-4804-a6d6-7c5dd3849baa" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123832</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:39E2D4E2DB514E2DA83A113CD913ED33</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFeKEhCZRQaLQBzultDxmZvtlZZwbcEmcNHaA8uvHDpACpV1mJSTkm+tzz3342Jccx5HltziHTNCEVVZxxLhfWBtanjE/wZxyn+EYuC+IP2z17n2riny826JVup2G9i8BhKzapK57F6iu2yS0dVwLXN3zQq8e2EFYCwPpynkOXcYFZqKhWch0dCR/7ghd+Kjum07Vq9vPWuUHZFxiS5cq0rakVryhzYRIfcNYLpfVZa2aZFPDQsg0fvXuh2QGMdaal5uMikBZc+tPqgEQiCJSJUlsXBoHPpcB94d0yrDIM9jGCj6LhQzkGdIn4HT6TSv3QtBlYVIs25gljBIc0TVW9emBmCVBpRVNk4yKWfxpEiZSwDqsiE5Mm33TjENqZwIdMMw41vkMm1usAYSQASNQGQ+6De3beV0rto4yzHiYZDE/XP4ZH2ALiJIUAp3v0tpSOx/wRKWal0D8LiNRzukCHtSwppgA33YTyPlQlccMQrq6p1wO6IordsY+vaPlphodOgUu/k+D9pqzAfmBoxyaljFv30EvtOLo2otv3MnD1fyh/Qvfj7uNgsC+c2EoW7tZHg1lOUSbHVeumcbG+o737OvIFquXde+pv1j288zJxfPLavIS3V1PpvnDYysJBzOZGb8djMYzF792au0b3vlen73emreTUfp3+/twkY9FLXheze9IHwj96b7cxujlodNf9u/GY29oRE/LNe2it978tePOnwc/u9/TUV5rofg5+vX4z1/u08+LN3e+Hjksfhx1nh7Hb/fDFUzWa94o09njf2jbnflhPnkBInZLNQbdTuVGdgmLr8VMWWigh4Wrnyrx4QKY0Jpql9IOP5dyRwNf9nCzNh23U7eQ00L1a8u+9q6RU0MXnmfeoJbtWPZOZDYsjii2ExZSFUtJ7mZsviZIYp8DCyDTF0kulY5rXyB2sMCVLhvIQ5AwDqNEyrO7XoWzENYWjx3Tm83TiLgirzta5SERfdbPWqGA7ECSTXQgyQPZ2ZSC0m011lzONReyFK94kYvIrC5wlUEulT1TIutbtusYnMZpBIqoESdBHkE1naVFYQy++bd0THhhpZykSSZwVJwH49Psjr/tCiF9AqocuErpCmQz4cQVg3b5fMi7fvIq2sG38oCq4yWrKjJKNkwOP70Pi5qSclLeE9sxLzf8IQDhJyCML/gZx6UpIwYLuhd/d5fLW0HqSHPX31dsVl+r+WKRFy217ZqRSXhDFdVAljEEkkulexslc2BGiWKcda2UxI+Cl/ZDirmYsaHAAmI5gpViecY7YghcvSO68uiszn2kHISUpROwEqds7Ui+gRTjL59JxCfKT5of5d8yyd4TP4W1F0fmKZ8RgrKpWqkr5e2TASGJhKVSDJNsH/wUwKngh8ayyCUXIQdqkgv4/EtFqVxDw4QkORPdjlYY9pW34CneUvDfnT7AFOJevvbofz/3dFqMAAH5RuS0wFeXtq+OAJvuqfc26LGAuzdXlodaTs11LvYF3Lpy3LIoB+yaH8wfLXt1Op7x5m8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D8B90599D384DE05307991F0ACB78</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D8B90599D384DE05307991F0ACB78</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>39E2D4E2DB514E2DA83A113CD913ED33</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>39E2D4E2DB514E2DA83A113CD913ED33</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:39E2D4E2DB514E2DA83A113CD913ED33</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76015 - StreamView - PORTAL - Stream view for account with two streams present - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b8017a24-42e2-4d26-afc6-24736209d609"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3b207d4d-307a-4d04-9df2-f3e08d4f06a3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="e4f2eb27-cd05-45d2-bf37-2474a0a1207b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3d25f916-1ed7-4bdd-9e23-9068c27717c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="f1df0b10-d89d-4de6-bfaa-435dda133f40"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="35577b20-3278-48d2-8934-248b203bf942"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="37d6dc33-3fac-4204-a966-09236656898c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create another Stream if Required" id="02583fd1-0d85-41d5-a68b-0d5059bc0962"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Establish User Context");
} else {
	testCase.setPropertyValue("counter","1");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="c543fbbf-9aae-4cfb-8aa0-bb0b56ba38ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="1ac1f601-efe2-4aae-9074-598cb9c4c602"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Execute StreamView on the Next Stream Handle" id="6627818c-bc50-42ba-bde6-fdf1b60caf6c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Call StreamView");
} 



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7b58d583-cda9-4809-9a07-7dc94d9eda1a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6d1e2c84-d886-440f-8b1f-1c9eb1cc4ee0" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FB8A95F13D22499D9B5FDB78545F2A9E</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D620617BF2CDAE05305991F0AD4DF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FB8A95F13D22499D9B5FDB78545F2A9E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158D620617BF2CDAE05305991F0AD4DF</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKPfjVbCTECBRQaIFVNjSlke7Xb6sfJ0B3CYOxE6g++vXDpACpV3uSkjIk/GZMw8f+0qQKLT9lhCQSBbz0iYKufBza8NIE+7HRDDhcxKB8CX1x63BnW+XsU/2W4xSr90w/rZmwSyoVWwTArtmVuwZNeuk5pm1GrECIBWrjm3lKkQKPS4k4bJh2NhyTax+9Qmu+bjqO07ZqVtTo/QMiVDYyqWMjR2pjWgYCymXPkLr9bq8dspxMkc2xhZ6GdyN6QIiYjSvthnlgZLmzp+WA6AQhrRM4whdoSOfq0D4YzbnRKYJ7GIFX8XCCHtI+QSCzX8YxV4IenwW58sbwmPOKAnZP0TXZwByEQelVjiPEyYX0ZdJWFgDm7ChJrUq/IeBjqldCHTEMBHEFAti7bBGMIMEOIXS06jXMH5c1rV86yQhXMziJBLHy9/jAzyDMF5CYIp9WjtqlwOeqVTzCqjf4zRMBcvgXg/rklAQu24CvRyq9JjAjG3umFADuhGaHTqkd7LcVqPN5iDk/2nQQXO2IM8kTKE5qrYpehmvvNGo5WXB5M/bCh85T3c46zRyAofOuaFo7XZ5MpTFEG133DrXwyofWHj4c0ID+dqeIpjak344cKLr2hvq434W1Sodp2ItO2+d15EzTZ7tn9Xn9eP9ZuitkDMcyQfPG/b77Ye3h+6UDXHcpmP7rmMLD6tjNR1MgxlezPrjsTUYZ+4tvL/XLEK7/WxyH92L+tDZpF42uekse31YvLwMn3qSi7+my9Wo9Yc9eevF0RNJH54aRToH/I9t+zM/Tn+9ApX7pR6DXrvUVV0i8nsx0xYWmLPc1V9q8RESuDSaepfWDj9VcscCX/Vwu7bcertqY7eLO9f2Tbvawa6DXc+zurjVdXF1LzJbFicUb2I+YzqWltzt2HxPkEa+AB5AYmZxqpROGN8gtokkpR4fqUMQcwGTWMvzyq3yUGT1hbUKLTz3VIgEr9y1Z5TuY/nAH5LWTEJyJMoWPhLlEVC2ZKCVWw+2UJMtpCrGimSpDK1yRsocUqXtiZZZ367UXSRYtAxBU0VRHKQhlJeLZV4aJLb/tkmoyK1M0GWcSBLmJwJ9md/pt30plE/AtIPQKV2DaiecuWTsfT6f8q6evYz28K00YPqAqbrKhNEtk+NPH+Oi56SYlY/E9syLDb8JQMUZCPQNP3RamiJikLGD+PvbXN0LSkma+/6uiFVeldMsS/OWVioOShQ80kVF2EZjoKnSuvdJ/AYcFSjoooulIH4SvLAfU0zlgo8lkRCpESzlywteEmMQ+iXRU4dnc+kz5SikKp2EjTxnuwnVK0gz/vahRH2q/ZT5Uf2t4yT46NgZrIM4Kk/1kJCMz/VKXyrvXwwIjRUsU3IYJ4fg5wDOBT82FkUuuEg1UL9SCV9/KWmdaxiE0jjlstc2csOh9uY85fsS/A+nTzC5vBfvPfbfDz6T5SNAQb0SBcvx9bXt6yPA5wf6vQt6KuH17rXt4Zbr1N1aLuG1rYTb1269KMoRu+Yn82fLQZ1OZ7z5Lw==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>2</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123833</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205F0EB2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205F0EB2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1i+l1bCSUSsTaqGgwQjKIjHOxxGQBGQg6C//hswuiab3Xff7yJlpunDM93P9PT8SO1DQPdBmqIk86OwqUovra3dRRtI80+IdJynTo8hn3hEU08M3+OYHt1hEc22mmqa5kgN08wOs5cWTVLUE8k8UV2L5Ptsr89SzzTLrFvNOUpS7BmrPJOtZnkIwrRfR31p5UnYj+zUT/uhfUBpP4P9KdBGfazZt2+QWq8/riDrgMmrl2VxnyDgs4MgCgL4DKMD8YP4pPPDSftT3w3tLE/QR0wnfWl92BZF8Vwwz1HiEjRJkgTJE1jHSX33n9Zr42aMHDXcRte1aIdR6EM78C92BUpDmRc5TRC4UeJn3uE3rimCIivXT6iET5DqhP+0iJ8BanR/6ekTyCS1n1LPpm7OTLRFCQohas5M9aX1z18V8GpqJXaYbqPkkH5Z/zdEKDyhIIqR85TeNnYD9/cev8nW6w8E+2oIgzz1T0ivWBLbEKXNSYK2fjnyU8w9J23W1W+W6Y1gCP6XivwgHnFi2MQ3mZF8F6XZ/1Oux1JdvcztIEev7LgsQGdidss2sYP0fK1lOsrnvZOuvdQQHpWvoO6V/lh/5emdVh9GznDjMu+TnHGmC2vDdZJ2aJYWNJK3cbFaoyS/ZO0jF6zbDC/Ml/neg/poPqfH55nOoYJzHR/KQbYYcyPbaqxpfuOTsUGHu9NZkmekfpIjl8kgN4oxrRQ6KKYCGaZnl5XbcoJsQxxBarALu0c2RTTJe/HwIPg74TyKGmqsQ8paLocHbit1g7bnGy8/9/S4h2pf7+hcb7L6f8mSvGRn9n0hVo1ii09nhl41VZXyiyiC89QFhSoAF//tgC64+6O39xW+IAVgGAMgiUKwk0ca2CuAmsmCp4nzuVaKFzAUXH2ODa0GCNaCZsqFVKykuWG8yYVnOcr8vFGCfH2RdQ2ktbHoabIpzyXTkjUNRFdZqUkbpdxpU61QjZXUwA4kuYwvjsJnSCl9SKusNmXp1ZTN18s5lg/Oo4N+2lhyoImaIk6PylTdMJIhD4G5WkB6kGPby+gQR43VTHgwGsZoB9CgIHFMcNGsfaFZM1qXTLuWWZ9lmqoMNSMtRKPeldKQi+F8dvmZC1HQROcgl7IFJtdcQEsc6OR6OUztBRtqJigktzZ+lwtnfAOiGWTREK+5GsmFKZszfaCZaiGDWibJRZBuaN3bKN4JMkY5tMDusTCiIS8GIf4emid4Zo8NWxmAzWFOQcb0oM/69jIq3HWvkIzV8D1aq9iNDgxZEAyAAZGg2hrOvwBGwpwdxz5P+2i0HUQH5CUNjYre96dLSfZ8ZuxO9AUrbffcRPEnjO14hBpAesfsgaoi553yDNsxV4Qphf6lO36fLZGfrC6ZzhpU1++xDXORz5ZSFHDO23I1e2+XK2hY48l0tphcylI/7nqXIHsbC2/JdKhJ7lhHaJLCNkHaA8HqSay4etthPm1NErEN4GoCAMrOdWUfE1h4211J+GZqMiYv0MRCEReiMgWK0pZVQTKM7cCjJlCZ5zNK11TZCXCazqulGTTWoiDhSpH2Yh2v6AG5toBTOzM68sA1Zmx7uERrQw+seQaKeL4NKYpUYuNtqxUu1CoGOCo+yPgUCY1cBTN7HA/J8n3eJamj4QTDKQ9mTDml9+XYc9fnvbve46KsHo7OygLB3HrgmIoptmgYlmxqoHc9b6WmzhgzgIcy3hxgKVm4ZrVxZAmyOTDIWSlJ4P0qSy1Al+nqIu80Ua7tG6DUbEyL02bppatQ98eWnGPS5g902W1o8l85VlGs8ZljRxEY4CvH5CvHZLA9ttWeRKVsV4zTReEKinw0uPloyMeksRztG0J7QLiZH3TGYa+w3tsL6lxw3s5YLHhV8sR2uF15zCYTSPsCDTTcc4pv7qWw2wnO2kgz2JlPBGdyh45FOmroKhXKTHYZEHySt4XD2j9cLkyHnh0m0/ykzuz3lDp7m+OCL3aTty5BJMqZvXDrkzFYRnB1vUe+Nsm78NpGiccG+6kD30avab7ZIZjdltU9rErNAb4c7ezPY1wl8Z2nba3aj6tZMM1QmLVeK6tqhOvneNDznT6+Oa9rXu6JJCt2OZIDjCx3ZbJDUgMSkBzPU1x3cJv1rii+QBSjcOtXsaph9npZ/xkgPPQ3yE5Q0vqDpypPTTU08fQRhSmyIjzNDhhRonmJG/AyCQSaIRmGE1gOdGmhJ9FUq6lH2TgcJ2CboeRhQOa+Dsgmgn7so2qK/pgl0gwn4mif8iygnk/2c4hyPGYn1aTbpzs9tk4A4eSHGOIPuLslcZRmz7EX18PMb7fx9dttx1jH8SuFtAItIFwt9M1I37kh/mVn9Lej/809yB2/mllw+rLEh1cknz/9ZENFgzsVSJ7q3DDfVf/OlKeo7q+mxB8QEV+TcY/knPyHuLeHCZ618ThWv0dSXLSj/Xx8zk+nvC4TR5I0kWD3BEWQxBTBHI+LZyvao5C4eyD+ZlC/Y/4S9y7/jC7PvHCa4VN+wIxq1st/f6R9ssYJyFCZfScTA/wsq4L/8eUG+7DSw+IJ/imixPmZ9298PcTBkKsO5Ydutaom7PPn8n6chD6MsFcfN6koefT9nf13sT8L7+m6Q8kwKzZ5hn7/pVl1n5eWDWGUh5kqtWrBY0esMWfnGPV/Kv3iph5xP94sZfrbN8tSG02hhw52667r/7vyk18XHiJslfo1lpdWiV/fOHjoPnTgD4BfmjAnstygA2iakzudexNmeZ4WSOaewE87ef1F/KvkIadfmf36Pw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:158D620617BF2CDAE05305991F0AD4DF</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>8E856001FFE44EF1812F602AFC5522AA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:8E856001FFE44EF1812F602AFC5522AA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value>FB8A95F13D22499D9B5FDB78545F2A9E</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8A95F13D22499D9B5FDB78545F2A9E</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>nickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>158D620617BF2CDAE05305991F0AD4DF</con:value></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value>urn:dece:rightstokenid:org:dece:158D620617BF2CDAE05305991F0AD4DF</con:value></con:property><con:property><con:name>rightstokenid_2</con:name><con:value>158D620617BF2CDAE05305991F0AD4DF</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76016 - StreamView - PORTAL - Stream view for account with three streams present - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8a795a0d-5b11-4def-bd0a-23d3fe4c887d"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="aaceb80d-c394-4c21-9dd2-917f52bd8c30"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="1db1ebef-6eca-4f9b-b20b-bf73bf88e50b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="1435bfea-0bbb-4804-8943-fb66d7bfa3c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="3d03c0a5-0a27-4d2d-843c-696f7a3b15b4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="360c0b98-3e0a-45ae-add8-4e2ad1bb1cf4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="289a90b2-0eca-4db3-bb40-17d101bcaa7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create another Stream if Required" id="835484ca-ca4c-49f2-beb7-8685409948bd"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Establish User Context");
} else {
	testCase.setPropertyValue("counter","1");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="5f164d76-b4dd-4f1b-9864-fc829d54b2df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3ee8513a-60bc-4d49-9d90-39547b8bd08f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Execute StreamView on the Next Stream Handle" id="ee2c8568-b6bb-41f6-a539-c2ccaa401ce4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Call StreamView");
} 



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c5dd50e8-be90-4378-a0a0-793570a113b1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8f3ababb-7d69-46d9-8f37-b9ab4a936269" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKP1YhSSEQBIVJChdqLpCH12+PBlnAqaJHWKHpb/+2gFSoLSP+yQk5Mn4zJnFxz7jKI4qfotzSAVhtLSII8r93NrQspT6DHHCfYpi4L7Afr91d+tXyqaPNlu0UrfT0P51HScEz0K65bqeXgXb0ZE3DHUbwrCGLbduD2vSlfMMupQLREVDq5iWo5vy5z6bdd+s+VWv7NTsd600gJRLbOlSNrU1qQVvaGMhEt8w5vN5eW6XWToyKqZpGa93t308hhhpzbNVRnmgtLn2x+UAMEQRLmMWG2fGjs9ZwP0+GVEkshTWsYKfYpmG6RnSJ+BkdKIVeyHo0pDly3NEGSUYReQTqfrcgRizoNSKRiwlYhz/mIRlKmAdFljHVpWeaMYutSOBdhimHOl8jKw1Vg9CSIFiKP3T6za0k+O6lm99ThHlIUtjvrv8Oz5AZxCxBAKdb9JaUzse8EClmmeA/S7FUcbJDO7VsCYIA193E/DxUKXHFEKyuCVcDuiCK3bGNr295aoaHTICLv5Pg7aaswIZoCiDZojrz9PhoyXqcevUEn3r9M2bn3uYeqyRE9h2zg1Fa1fLvaEshmi14+WmN3hw3bfB5D3JovCRsRhc7NTJ+83DrNP27u3s5vSqv3x6HFxe9LwnMasFT6OaAVdtOgfxGo6qZPDQHX/eXXvJ4Pb6sR1G1emdZd/Er08LQWmcDNuZ4915bnWSRZMnnH0sXq5IfGq332Lavb3pDOKPenXSurJrL/cTzl5mT8akV1lWbi4+lnTWDs3rJbkekW6jSGeL/65tc+b72XACWGyWagy6ndKl7BISv4uZspBAD3NXP1HiwwVQoTXVLqUdfibljgS+7OFqbTlux217plO9qNtutXNhOrZZ9zzr0mydt+vuRmRWLPYonjMaEhVLSe5qbH4niGOfAw0g1Wcsk0rHtV8QO0igUpf25CFglMMzk/KcTUNn+VkR4iN1LCdMzOnUssRkSLTSPRMP9CFthQLSHU22zB1N7gEmCQEl3GquuRxsLmQtpmiWicgqz1CZQialPVUq61eqrmNwEicRKKZGzIIsgnIyTvLKGHz1X9ER5rmVcJywVKAoPxDGj+ntf9tUQvoERDlwlVIbZDfhwB1jb/L5lnft4F20gW9lAVHnS5ZVpASvmOx++poWNSbFqHwltmFebPhLAMwPQBi/8DP2S1NEDGZkK/7mMpfXghSS5qa/U2SVp+VsNsvyllartpFKeEMV1TArRh9wJqVu+cw+gBoFinHUvVIQ3wte2HcpZmJM+wIJiOUIlvLlEQ+JPnD1kOjKs7M49pWyE1KWTsBCHLKdR/IRpBj/+k7CPlZ+0vwo/+YsDb46dgBrK47MU74jBKEjtVJ3yvKHAcFMwhKphizdBj8EcCj4rrEocsFFyIEaZgJ+/lJSMtfQEMYso6Lb0XLDtvTmPMUyAf/L6RtMru7Fc4/893tPJ/kIYJCPRE5yfHVr++oI0NGWfK+DflPwy3bFM1uO7Tr1bQWvtJ1CwXfZNb+Zv1u26rQ/480/</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8B9054E7384DE05307991F0ACB78</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D8B9054E7384DE05307991F0ACB78</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>3</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nicknamebase</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightstokenFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value>urn:dece:rightstokenid:org:dece:158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenidFULL_3</con:name><con:value>urn:dece:rightstokenid:org:dece:158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenid_2</con:name><con:value>158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightstokenid_3</con:name><con:value>158D6205ADF924E9E05307991F0A4524</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BBCAE27D482C4B2EB34A7B071B4CD108</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BBCAE27D482C4B2EB34A7B071B4CD108</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:552D7A488A6C4214879D2EF2144F319F</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:E23CC1AB02324DA4BF1A76E1061A4CF9</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value>urn:dece:streamhandleid:org:dece:BBCAE27D482C4B2EB34A7B071B4CD108</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>552D7A488A6C4214879D2EF2144F319F</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>E23CC1AB02324DA4BF1A76E1061A4CF9</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>BBCAE27D482C4B2EB34A7B071B4CD108</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>3</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123835</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8B9054E8384DE05307991F0ACB78</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D8B9054E8384DE05307991F0ACB78</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectDBCreateUser_3</con:name><con:value>158D8B9054E8384DE05307991F0ACB78</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76100 - StreamView - PORTAL - API invocation following StreamRenew - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6dd64f51-dbff-4a10-aade-17dc021be728" disabled="true"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0a508ef3-6cdb-45af-bde8-0e5dfb2dd2f7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="149656c3-38c5-4acd-9fb9-157506a7be34"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="58697989-791c-4f27-bc75-7c36501ad528"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="25e77975-270b-41d6-982b-9f9f437de396"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="818c7bea-c419-4744-bfeb-ecf19fc00b0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="1bba043f-2caf-4c33-b9e0-76d44886e4d2"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="47692296-a20b-4bd5-ba03-ea32f4b687ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="f08fc2fa-cdee-4416-b0d9-983ad5cb3e50"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="ea65e92d-efc3-456c-9dd1-e7ba6aa653d6"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9603e856-e270-47dc-8c45-14d773d73da2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="86cea961-0e52-4f34-9290-c22cbc6270c8"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="63e4aa55-1408-4161-802f-cc3cb93859b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="43bccc89-99cd-4c0a-9256-23e72321ccbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a0280a98-8450-49e5-95b6-c6a77010ad4b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0bf3dea0-a436-4803-a105-92bad880ca43" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADFE5112F074E0401F0A059941F7</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC6CADFE5112F074E0401F0A059941F7</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADEA4095A200E0401F0A059941D9</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADEA4095A200E0401F0A059941D9</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76101 - StreamView - PORTAL - API invocation following two StreamRenews - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8e9e29c0-589a-4a4a-b15b-e1c77d9fb38f" disabled="true"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a0a7259e-db10-4787-9fba-7d710951f31a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="0baecd63-c430-4ced-9608-cfc9a31dccef"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="045d02fd-aa69-416b-bc0b-ca2d2c57ae96"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="b77a9b42-603b-4936-a721-ebda0b9c56cc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2a56fd92-4c88-406d-bade-c78027dfa6fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="52866de1-da90-4f7c-b39b-e2e225724c29"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7076b612-b399-483e-a7e8-b6109c23a07a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="f476e7e3-1cde-486d-a592-96bec44946e9"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="54b8ea53-7596-4f45-be2f-1e7b1d08070e"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d15271af-a051-4eba-8f5e-2e43ae1e53fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="d990bae3-3905-41b3-8709-2a1c74766607"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal again" id="1e4e415d-9e47-4a0c-a772-3536fa7fb6c1"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+10800000);
	}
else
	{
d=new Date(new Date().getTime()+54000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew II" id="bb2c4d02-0fff-47d5-be9b-2e13409be5ab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="ea432520-8e97-4cc8-bcba-cec885bef63f"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="766e20ba-e1eb-4004-948c-28c199e3e160"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d4e5a2d5-dc4b-4975-8844-1093844c6822"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="34eb8054-703a-40d8-828d-18d3f9a86903" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0fae1f1d-bea4-4d23-adc4-0d0e5c868b98" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADEA40BBA200E0401F0A059941D9</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC6CADEA40BBA200E0401F0A059941D9</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADFE5170F074E0401F0A059941F7</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADFE5170F074E0401F0A059941F7</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1e4e415d-9e47-4a0c-a772-3536fa7fb6c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76104 - StreamView - PORTAL - StreamOwnerMismatch - API invocation following StreamDelete by DLPCS - 403 Forbidden" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e0c1ddf3-ff47-4f2d-96db-cb4243be1263"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="db22f22e-3a38-4479-b259-2c04fc5ba337"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="0c86849d-e1c7-44ca-b272-e75831819a19"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="29b41847-1b43-4da9-baf0-266b81b3d336"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="e7f95f60-763c-486c-b37d-77658a6efe0b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="725bee9a-877a-4120-b5b0-48723737241d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="392fb8a9-28ca-47cb-9b29-f204618d8521"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="97a89613-7ca3-43c5-b123-f6b31b256128" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="99a376aa-6645-4d5f-8d4b-d7b37aae5c9a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="46896d80-2d23-4461-a231-99ca6cd83409"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f88e1cf9-8de3-46e6-ba1b-cb3c4229de27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0c426c15-97d9-44af-a167-a0d46d40c29e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c + 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f20f9928-52c4-4950-bdec-c564a31466b5" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">756283B106C54D8E845A30B41439C8E3</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB29C603857E05307991F0A2B58</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:756283B106C54D8E845A30B41439C8E3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158D8FB29C603857E05307991F0A2B58</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFeKEhCZRQaLQBzultDxmZvtlZZwbcEmcNHaA8uvHDpACpV1mJSTkm+tzz3342Jccx5HltziHTNCEVVZxxLhfWBtanjE/wZxyn+EYuC+IP2z17n2riny826JVup2G9i8BhKzapK57F6iu2yS0dVwLXN3zQq8e2EFYCwPpynkOXcYFZqKhWch0dCR/7ghd+Kjum07Vq9vPWuUHZFxiS5cq0rakVryhzYRIfcNYLpfVZa2aZFPDQsg0fvXuh2QGMdaal5uMikBZc+tPqgEQiCJSJUlsXBoHPpcB94d0yrDIM9jGCj6LhQzkGdIn4HT6TSv3QtBlYVIs25gljBIc0TVW9emBmCVBpRVNk4yKWfxpEiZSwDqsiE5Mm33TjENqZwIdMMw41vkMm1usAYSQASNQGQ+6De3beV0rto4yzHiYZDE/XP4ZH2ALiJIUAp3v0tpSOx/wRKWal0D8LiNRzukCHtSwppgA33YTyPlQlccMQrq6p1wO6IordsY+vaPlphodOgUu/k+D9pqzAfmBoxyaljFv30EvtOLo2otv3MnD1fyh/Qvfj7uNgsC+c2EoW7tZHg1lOUSbHVeumcbG+o737OvIFquXde+pv1j288zJxfPLavIS3V1PpvnDYysJBzOZGb8djMYzF792au0b3vlen73emreTUfp3+/twkY9FLXheze9IHwj96b7cxujlodNf9u/GY29oRE/LNe2it978tePOnwc/u9/TUV5rofg5+vX4z1/u08+LN3e+Hjksfhx1nh7Hb/fDFUzWa94o09njf2jbnflhPnkBInZLNQbdTuVGdgmLr8VMWWigh4Wrnyrx4QKY0Jpql9IOP5dyRwNf9nCzNh23U7eQ00L1a8u+9q6RU0MXnmfeoJbtWPZOZDYsjii2ExZSFUtJ7mZsviZIYp8DCyDTF0kulY5rXyB2sMCVLhvIQ5AwDqNEyrO7XoWzENYWjx3Tm83TiLgirzta5SERfdbPWqGA7ECSTXQgyQPZ2ZSC0m011lzONReyFK94kYvIrC5wlUEulT1TIutbtusYnMZpBIqoESdBHkE1naVFYQy++bd0THhhpZykSSZwVJwH49Psjr/tCiF9AqocuErpCmQz4cQVg3b5fMi7fvIq2sG38oCq4yWrKjJKNkwOP70Pi5qSclLeE9sxLzf8IQDhJyCML/gZx6UpIwYLuhd/d5fLW0HqSHPX31dsVl+r+WKRFy217ZqRSXhDFdVAljEEkkulexslc2BGiWKcda2UxI+Cl/ZDirmYsaHAAmI5gpViecY7YghcvSO68uiszn2kHISUpROwEqds7Ui+gRTjL59JxCfKT5of5d8yyd4TP4W1F0fmKZ8RgrKpWqkr5e2TASGJhKVSDJNsH/wUwKngh8ayyCUXIQdqkgv4/EtFqVxDw4QkORPdjlYY9pW34CneUvDfnT7AFOJevvbofz/3dFqMAAH5RuS0wFeXtq+OAJvuqfc26LGAuzdXlodaTs11LvYF3Lpy3LIoB+yaH8wfLXt1Op7x5m8=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123832</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>756283B106C54D8E845A30B41439C8E3</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:756283B106C54D8E845A30B41439C8E3</con:value></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:158D8FB29C603857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>158D8FB29C603857E05307991F0A2B58</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76120 - StreamView - PORTAL - API invocation following two StreamRenews by dlpcs - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e13f6ae9-be6b-43fd-86fb-fde547571a1b" disabled="true"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6a737fb9-31a1-48c9-8205-72bf1029c257"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="05a10cba-96be-442e-8fb2-661906f727f3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="bd89c212-4156-4d10-8368-0fd0f3141b1b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="1c7a276a-cbd7-49d7-92b6-eb9a45366fbc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="563f2fce-ed5b-4b50-94f4-f67c2a2d25c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="60c46b26-8f4a-46e9-b704-b882e58aa4a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="8319db37-9b42-4270-a331-d83669376676"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5fb2dc5f-4123-4153-8bc7-7c4ad9a01142"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal again" id="373edc52-da76-4c07-9439-63050b07877a"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew II" id="c0588db5-ec8c-4557-acd4-30036dd3f4f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="ec731634-989e-4ee8-aa2d-adf72131f2fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="18f4e391-00a0-4081-8067-836bbfd29cc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a7e3aecd-7862-4f68-b2e6-310b65cc792c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2fc63b84-4340-4fd2-8f11-c4e6a1595143" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADF13577958DE0401F0A059941F3</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC6CADF13577958DE0401F0A059941F3</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADF7C4AD62EFE0401F0A059941DD</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADF7C4AD62EFE0401F0A059941DD</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>373edc52-da76-4c07-9439-63050b07877a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76200 - StreamView - PORTAL - Full user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f6b0361f-42f9-408c-bab2-3f49b737a439"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a43b5dc1-e094-4b06-b463-9ed4b57a72e9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreatedByDB",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedByDB",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5a0ae527-c206-4e8f-b6cb-37892b34224f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="e6b6f0bc-ecae-4fee-a988-4baa05da6a42" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="38f7add4-dd05-4c3b-9b9e-21d673a735a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9fe86de0-9637-461a-b2f9-1ee40ea9cd63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="ae4901d7-afe5-4734-b038-ffebb4f127f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="ee552d7b-bf7f-40b9-a3b8-f79fde69c958"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f99678ca-49dd-4788-98a3-01977cec0be6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c076741f-0e45-4bb8-8a2c-d839414f5579" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="85c647ac-0444-46ca-ad14-4c385e93d8ac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123832</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:BE5BDC89A49D42048C5897987C0BBFEE</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFeKEhCZRQaLQBzultDxmZvtlZZwbcEmcNHaA8uvHDpACpV1mJSTkm+tzz3342Jccx5HltziHTNCEVVZxxLhfWBtanjE/wZxyn+EYuC+IP2z17n2riny826JVup2G9i8BhKzapK57F6iu2yS0dVwLXN3zQq8e2EFYCwPpynkOXcYFZqKhWch0dCR/7ghd+Kjum07Vq9vPWuUHZFxiS5cq0rakVryhzYRIfcNYLpfVZa2aZFPDQsg0fvXuh2QGMdaal5uMikBZc+tPqgEQiCJSJUlsXBoHPpcB94d0yrDIM9jGCj6LhQzkGdIn4HT6TSv3QtBlYVIs25gljBIc0TVW9emBmCVBpRVNk4yKWfxpEiZSwDqsiE5Mm33TjENqZwIdMMw41vkMm1usAYSQASNQGQ+6De3beV0rto4yzHiYZDE/XP4ZH2ALiJIUAp3v0tpSOx/wRKWal0D8LiNRzukCHtSwppgA33YTyPlQlccMQrq6p1wO6IordsY+vaPlphodOgUu/k+D9pqzAfmBoxyaljFv30EvtOLo2otv3MnD1fyh/Qvfj7uNgsC+c2EoW7tZHg1lOUSbHVeumcbG+o737OvIFquXde+pv1j288zJxfPLavIS3V1PpvnDYysJBzOZGb8djMYzF792au0b3vlen73emreTUfp3+/twkY9FLXheze9IHwj96b7cxujlodNf9u/GY29oRE/LNe2it978tePOnwc/u9/TUV5rofg5+vX4z1/u08+LN3e+Hjksfhx1nh7Hb/fDFUzWa94o09njf2jbnflhPnkBInZLNQbdTuVGdgmLr8VMWWigh4Wrnyrx4QKY0Jpql9IOP5dyRwNf9nCzNh23U7eQ00L1a8u+9q6RU0MXnmfeoJbtWPZOZDYsjii2ExZSFUtJ7mZsviZIYp8DCyDTF0kulY5rXyB2sMCVLhvIQ5AwDqNEyrO7XoWzENYWjx3Tm83TiLgirzta5SERfdbPWqGA7ECSTXQgyQPZ2ZSC0m011lzONReyFK94kYvIrC5wlUEulT1TIutbtusYnMZpBIqoESdBHkE1naVFYQy++bd0THhhpZykSSZwVJwH49Psjr/tCiF9AqocuErpCmQz4cQVg3b5fMi7fvIq2sG38oCq4yWrKjJKNkwOP70Pi5qSclLeE9sxLzf8IQDhJyCML/gZx6UpIwYLuhd/d5fLW0HqSHPX31dsVl+r+WKRFy217ZqRSXhDFdVAljEEkkulexslc2BGiWKcda2UxI+Cl/ZDirmYsaHAAmI5gpViecY7YghcvSO68uiszn2kHISUpROwEqds7Ui+gRTjL59JxCfKT5of5d8yyd4TP4W1F0fmKZ8RgrKpWqkr5e2TASGJhKVSDJNsH/wUwKngh8ayyCUXIQdqkgv4/EtFqVxDw4QkORPdjlYY9pW34CneUvDfnT7AFOJevvbofz/3dFqMAAH5RuS0wFeXtq+OAJvuqfc26LGAuzdXlodaTs11LvYF3Lpy3LIoB+yaH8wfLXt1Op7x5m8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DC37272B37AE2E05307991F0A1E24</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DC37272B37AE2E05307991F0A1E24</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>BE5BDC89A49D42048C5897987C0BBFEE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>BE5BDC89A49D42048C5897987C0BBFEE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:BE5BDC89A49D42048C5897987C0BBFEE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreatedByDB</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedByDB</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76201 - StreamView - PORTAL - Standard user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fa8d46f9-4450-49d4-a771-1b3816f41f0e"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a5272f44-087a-4281-bf84-5d05bedc7ed4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3812b762-9c47-4563-a18d-bae3fea62675"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2357f539-8cfd-44de-acb7-c8cf60346cfa" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e7cd99cf-b99b-4ddf-b359-6f47e3d562e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7bbf6e47-fdc9-4eb0-910e-acf033b144d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Security Context as Standard User" id="2ee1764e-c5c2-4a73-aa38-53fc21360c1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="4f946625-9384-48f7-94fc-4203015efa2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="54579c5a-491c-4377-b916-b143426be5ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="19ddf2cd-9317-4818-b810-8b91f196fbae" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3587ca7b-34f3-49c8-ba68-fa911c44db35" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="4093ab08-d230-4d43-b6df-1e6110c0b19b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123833</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8514A5B2F6834F31ADC8EC09C62F953D</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKPfjVbCTECBRQaIFVNjSlke7Xb6sfJ0B3CYOxE6g++vXDpACpV3uSkjIk/GZMw8f+0qQKLT9lhCQSBbz0iYKufBza8NIE+7HRDDhcxKB8CX1x63BnW+XsU/2W4xSr90w/rZmwSyoVWwTArtmVuwZNeuk5pm1GrECIBWrjm3lKkQKPS4k4bJh2NhyTax+9Qmu+bjqO07ZqVtTo/QMiVDYyqWMjR2pjWgYCymXPkLr9bq8dspxMkc2xhZ6GdyN6QIiYjSvthnlgZLmzp+WA6AQhrRM4whdoSOfq0D4YzbnRKYJ7GIFX8XCCHtI+QSCzX8YxV4IenwW58sbwmPOKAnZP0TXZwByEQelVjiPEyYX0ZdJWFgDm7ChJrUq/IeBjqldCHTEMBHEFAti7bBGMIMEOIXS06jXMH5c1rV86yQhXMziJBLHy9/jAzyDMF5CYIp9WjtqlwOeqVTzCqjf4zRMBcvgXg/rklAQu24CvRyq9JjAjG3umFADuhGaHTqkd7LcVqPN5iDk/2nQQXO2IM8kTKE5qrYpehmvvNGo5WXB5M/bCh85T3c46zRyAofOuaFo7XZ5MpTFEG133DrXwyofWHj4c0ID+dqeIpjak344cKLr2hvq434W1Sodp2ItO2+d15EzTZ7tn9Xn9eP9ZuitkDMcyQfPG/b77Ye3h+6UDXHcpmP7rmMLD6tjNR1MgxlezPrjsTUYZ+4tvL/XLEK7/WxyH92L+tDZpF42uekse31YvLwMn3qSi7+my9Wo9Yc9eevF0RNJH54aRToH/I9t+zM/Tn+9ApX7pR6DXrvUVV0i8nsx0xYWmLPc1V9q8RESuDSaepfWDj9VcscCX/Vwu7bcertqY7eLO9f2Tbvawa6DXc+zurjVdXF1LzJbFicUb2I+YzqWltzt2HxPkEa+AB5AYmZxqpROGN8gtokkpR4fqUMQcwGTWMvzyq3yUGT1hbUKLTz3VIgEr9y1Z5TuY/nAH5LWTEJyJMoWPhLlEVC2ZKCVWw+2UJMtpCrGimSpDK1yRsocUqXtiZZZ367UXSRYtAxBU0VRHKQhlJeLZV4aJLb/tkmoyK1M0GWcSBLmJwJ9md/pt30plE/AtIPQKV2DaiecuWTsfT6f8q6evYz28K00YPqAqbrKhNEtk+NPH+Oi56SYlY/E9syLDb8JQMUZCPQNP3RamiJikLGD+PvbXN0LSkma+/6uiFVeldMsS/OWVioOShQ80kVF2EZjoKnSuvdJ/AYcFSjoooulIH4SvLAfU0zlgo8lkRCpESzlywteEmMQ+iXRU4dnc+kz5SikKp2EjTxnuwnVK0gz/vahRH2q/ZT5Uf2t4yT46NgZrIM4Kk/1kJCMz/VKXyrvXwwIjRUsU3IYJ4fg5wDOBT82FkUuuEg1UL9SCV9/KWmdaxiE0jjlstc2csOh9uY85fsS/A+nTzC5vBfvPfbfDz6T5SNAQb0SBcvx9bXt6yPA5wf6vQt6KuH17rXt4Zbr1N1aLuG1rYTb1269KMoRu+Yn82fLQZ1OZ7z5Lw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205F0EB2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205F0EB2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D8E3EBA5D3855E05307991F0ABED9</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D8E3EBA5D3855E05307991F0ABED9</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>8514A5B2F6834F31ADC8EC09C62F953D</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>8514A5B2F6834F31ADC8EC09C62F953D</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:8514A5B2F6834F31ADC8EC09C62F953D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76210 - StreamView - PORTAL - Full user can StreamView Stream created by Standard user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="75429c1f-d4b8-4759-81ae-77f47c4db99e"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f4efd98b-01c9-4be7-a6c8-230c809e0496"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7beeabb7-e1d0-4e2c-8b9e-53f8858596e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="eea08440-8119-41bc-b6fa-ac85458f457f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="14ae89c2-a871-4517-94de-95bd5972b6a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="19ef8d95-bd78-4668-9706-77b24f7d2899"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Security Context as Full User" id="71f87b98-7979-401d-b3ac-e78d9beffdac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="539efff2-70e9-4d4d-8f51-ed1375f4770f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="16d5757f-bdae-420c-8d6a-d38dfafba439"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="32b41258-b4f7-483d-98ff-cced19c16637" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2fde403e-97d6-433b-9d22-81744985d286" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2e7b0d21-8649-4f7d-82b8-5010b5af73b9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123832</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A3FF3BEC55344278AE3FE5A27A6F11B8</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06F24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFeKEhCZRQaLQBzultDxmZvtlZZwbcEmcNHaA8uvHDpACpV1mJSTkm+tzz3342Jccx5HltziHTNCEVVZxxLhfWBtanjE/wZxyn+EYuC+IP2z17n2riny826JVup2G9i8BhKzapK57F6iu2yS0dVwLXN3zQq8e2EFYCwPpynkOXcYFZqKhWch0dCR/7ghd+Kjum07Vq9vPWuUHZFxiS5cq0rakVryhzYRIfcNYLpfVZa2aZFPDQsg0fvXuh2QGMdaal5uMikBZc+tPqgEQiCJSJUlsXBoHPpcB94d0yrDIM9jGCj6LhQzkGdIn4HT6TSv3QtBlYVIs25gljBIc0TVW9emBmCVBpRVNk4yKWfxpEiZSwDqsiE5Mm33TjENqZwIdMMw41vkMm1usAYSQASNQGQ+6De3beV0rto4yzHiYZDE/XP4ZH2ALiJIUAp3v0tpSOx/wRKWal0D8LiNRzukCHtSwppgA33YTyPlQlccMQrq6p1wO6IordsY+vaPlphodOgUu/k+D9pqzAfmBoxyaljFv30EvtOLo2otv3MnD1fyh/Qvfj7uNgsC+c2EoW7tZHg1lOUSbHVeumcbG+o737OvIFquXde+pv1j288zJxfPLavIS3V1PpvnDYysJBzOZGb8djMYzF792au0b3vlen73emreTUfp3+/twkY9FLXheze9IHwj96b7cxujlodNf9u/GY29oRE/LNe2it978tePOnwc/u9/TUV5rofg5+vX4z1/u08+LN3e+Hjksfhx1nh7Hb/fDFUzWa94o09njf2jbnflhPnkBInZLNQbdTuVGdgmLr8VMWWigh4Wrnyrx4QKY0Jpql9IOP5dyRwNf9nCzNh23U7eQ00L1a8u+9q6RU0MXnmfeoJbtWPZOZDYsjii2ExZSFUtJ7mZsviZIYp8DCyDTF0kulY5rXyB2sMCVLhvIQ5AwDqNEyrO7XoWzENYWjx3Tm83TiLgirzta5SERfdbPWqGA7ECSTXQgyQPZ2ZSC0m011lzONReyFK94kYvIrC5wlUEulT1TIutbtusYnMZpBIqoESdBHkE1naVFYQy++bd0THhhpZykSSZwVJwH49Psjr/tCiF9AqocuErpCmQz4cQVg3b5fMi7fvIq2sG38oCq4yWrKjJKNkwOP70Pi5qSclLeE9sxLzf8IQDhJyCML/gZx6UpIwYLuhd/d5fLW0HqSHPX31dsVl+r+WKRFy217ZqRSXhDFdVAljEEkkulexslc2BGiWKcda2UxI+Cl/ZDirmYsaHAAmI5gpViecY7YghcvSO68uiszn2kHISUpROwEqds7Ui+gRTjL59JxCfKT5of5d8yyd4TP4W1F0fmKZ8RgrKpWqkr5e2TASGJhKVSDJNsH/wUwKngh8ayyCUXIQdqkgv4/EtFqVxDw4QkORPdjlYY9pW34CneUvDfnT7AFOJevvbofz/3dFqMAAH5RuS0wFeXtq+OAJvuqfc26LGAuzdXlodaTs11LvYF3Lpy3LIoB+yaH8wfLXt1Op7x5m8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205A06E24E9E05307991F0A4524</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D9468B21C2A71E05305991F0A9031</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D9468B21C2A71E05305991F0A9031</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A3FF3BEC55344278AE3FE5A27A6F11B8</con:value></con:property><con:property><con:name>saveduseroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>A3FF3BEC55344278AE3FE5A27A6F11B8</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:A3FF3BEC55344278AE3FE5A27A6F11B8</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_76211 - StreamView - PORTAL - Standard user can StreamView Stream created by Standard user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f848cd93-43bf-4f07-9f27-1fea927c7b0d"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ce0c5f5d-2e2a-43ce-9ab5-fcaa0169ef01"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d5b5bd61-f719-4d65-885b-8623e0c4e0ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="e50d2310-56b6-4492-b2cc-5e0d238c2714" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="13a2474e-0967-4a05-987a-0f4fab0fc2e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="238ca3d5-d88c-4c82-af96-bce756148b21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="d6e4846f-65f9-40e8-a345-0741f7a03fbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="6858efe7-5463-4efc-95f6-7dae6eec3bc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="63f11ccd-a702-40bc-82dc-e0f10abe48a5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dec57b68-56fa-4f76-a0e9-5bb8b07559ae" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="13a138f3-7c66-4513-a102-75168efa7ad6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_123833</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:7EDBB297011542F7B1D75D6A9800ADE9</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A63857E05307991F0A2B58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKPfjVbCTECBRQaIFVNjSlke7Xb6sfJ0B3CYOxE6g++vXDpACpV3uSkjIk/GZMw8f+0qQKLT9lhCQSBbz0iYKufBza8NIE+7HRDDhcxKB8CX1x63BnW+XsU/2W4xSr90w/rZmwSyoVWwTArtmVuwZNeuk5pm1GrECIBWrjm3lKkQKPS4k4bJh2NhyTax+9Qmu+bjqO07ZqVtTo/QMiVDYyqWMjR2pjWgYCymXPkLr9bq8dspxMkc2xhZ6GdyN6QIiYjSvthnlgZLmzp+WA6AQhrRM4whdoSOfq0D4YzbnRKYJ7GIFX8XCCHtI+QSCzX8YxV4IenwW58sbwmPOKAnZP0TXZwByEQelVjiPEyYX0ZdJWFgDm7ChJrUq/IeBjqldCHTEMBHEFAti7bBGMIMEOIXS06jXMH5c1rV86yQhXMziJBLHy9/jAzyDMF5CYIp9WjtqlwOeqVTzCqjf4zRMBcvgXg/rklAQu24CvRyq9JjAjG3umFADuhGaHTqkd7LcVqPN5iDk/2nQQXO2IM8kTKE5qrYpehmvvNGo5WXB5M/bCh85T3c46zRyAofOuaFo7XZ5MpTFEG133DrXwyofWHj4c0ID+dqeIpjak344cKLr2hvq434W1Sodp2ItO2+d15EzTZ7tn9Xn9eP9ZuitkDMcyQfPG/b77Ye3h+6UDXHcpmP7rmMLD6tjNR1MgxlezPrjsTUYZ+4tvL/XLEK7/WxyH92L+tDZpF42uekse31YvLwMn3qSi7+my9Wo9Yc9eevF0RNJH54aRToH/I9t+zM/Tn+9ApX7pR6DXrvUVV0i8nsx0xYWmLPc1V9q8RESuDSaepfWDj9VcscCX/Vwu7bcertqY7eLO9f2Tbvawa6DXc+zurjVdXF1LzJbFicUb2I+YzqWltzt2HxPkEa+AB5AYmZxqpROGN8gtokkpR4fqUMQcwGTWMvzyq3yUGT1hbUKLTz3VIgEr9y1Z5TuY/nAH5LWTEJyJMoWPhLlEVC2ZKCVWw+2UJMtpCrGimSpDK1yRsocUqXtiZZZ367UXSRYtAxBU0VRHKQhlJeLZV4aJLb/tkmoyK1M0GWcSBLmJwJ9md/pt30plE/AtIPQKV2DaiecuWTsfT6f8q6evYz28K00YPqAqbrKhNEtk+NPH+Oi56SYlY/E9syLDb8JQMUZCPQNP3RamiJikLGD+PvbXN0LSkma+/6uiFVeldMsS/OWVioOShQ80kVF2EZjoKnSuvdJ/AYcFSjoooulIH4SvLAfU0zlgo8lkRCpESzlywteEmMQ+iXRU4dnc+kz5SikKp2EjTxnuwnVK0gz/vahRH2q/ZT5Uf2t4yT46NgZrIM4Kk/1kJCMz/VKXyrvXwwIjRUsU3IYJ4fg5wDOBT82FkUuuEg1UL9SCV9/KWmdaxiE0jjlstc2csOh9uY85fsS/A+nTzC5vBfvPfbfDz6T5SNAQb0SBcvx9bXt6yPA5wf6vQt6KuH17rXt4Zbr1N1aLuG1rYTb1269KMoRu+Yn82fLQZ1OZ7z5Lw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158D6205F0EB2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D6205F0EB2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D8FB290A53857E05307991F0A2B58</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D950A85232A73E05305991F0AD1E6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D950A85232A73E05305991F0AD1E6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>7EDBB297011542F7B1D75D6A9800ADE9</con:value></con:property><con:property><con:name>saveduseroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D8FB290AD3857E05307991F0A2B58</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>7EDBB297011542F7B1D75D6A9800ADE9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:7EDBB297011542F7B1D75D6A9800ADE9</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158D6205F0EC2CD6E05305991F0AF506</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_79000 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2d8a8747-a923-495c-845f-a8465aa17ac1"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a168af1f-7d48-45b8-a061-f244f67207a7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f982277c-9380-4178-821d-0a7cee83794c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="3a41d497-54ee-4d85-a152-960c516e654f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="1cbbd2cb-ffdc-47e6-bd58-f937ee692646"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="08ba78fd-ccf8-4582-b39e-bfad05720e1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="2010f9b4-0755-4050-89e0-b47ecf329f42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="7b747837-8af8-4df3-933f-781ecd4ce66b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="016e9f61-4a5b-4c2e-a2c6-30c9b57c38dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="3416c759-0bc8-4d71-b063-6f693e5c6c29"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81829</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_79001 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of deleted - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a8109fa1-60a1-44d9-bbff-a51a907a6b49" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d9e91077-ff9f-4aea-8c6b-b11777fcf951"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="06989346-afe2-436d-a420-12e90dbe5d17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="7e8befcc-884a-468f-a4b8-5ef18e2a36e6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="ba577000-279a-4f3a-94ae-ddffe1349082"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="1e8be074-7062-4cb8-bf94-2ac4a712cd17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="f6b4c80f-7fac-405b-b9cd-02863b947178"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="603bd1d7-cdb1-4351-b249-fe28663adaed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="4952f763-c9dd-4edc-9823-34ae5019b677"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="193f106a-93d9-4eb9-9140-aff1321b2757"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADF8E59876CFE0401F0A059941ED</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADE76E034208E0401F0A059941C9</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81830</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADE76E034208E0401F0A059941C9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADE76E034208E0401F0A059941C9</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_79006 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of blocked:tou - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d8646cc3-6094-4163-8fc0-65a57d3857cf" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="445ca53a-5a33-4acb-84b0-a62fe630a496"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a8e64bcf-4109-4d4b-9db8-a48eb01afb07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="512adca3-8f49-4a71-bad5-96579c8f5aa7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="b61e7bd4-0cef-43e5-9d0d-8339b1690e45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="3e300880-bda0-4e50-a00c-e4f5bb7628ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="935ca670-49b5-4003-b006-72a1499346eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="31d13ccc-e2b0-4dd9-88b6-8e7e3e0f28ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d8d24095-86aa-4f13-9396-5f363c5ba548"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="a6bfb3e9-8a6c-4621-a2fd-577abdea3e16"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADFE5FC2F074E0401F0A059941F7</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADEB3C3D8F76E0401F0A059941D5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADEB3C3D8F76E0401F0A059941D5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADEB3C3D8F76E0401F0A059941D5</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_79050 - StreamView - PORTAL - UserNotActive - ACCOUNT_USER.STATUS of pending - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cb1d5329-e74b-4152-9f9f-7a69f21d196f" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8dc108cb-42bd-461b-91a2-2d45fd7896ea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="91568a47-b6f0-44f7-808d-e215aada5a7a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="a22a98d9-f8ee-4c01-ad06-4501feeb0415" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="cbb6ecac-57b3-4d4e-a60a-b9e1e8af0ffa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="78a0fdc2-6286-44c2-8dc5-239039e1c4bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to pending" id="0ff25682-86e3-4703-ac79-e7042eb3eb6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="ebdad42e-a6e5-43df-bcea-0cb3dbdbf3d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d9e6cc6a-8060-4433-a461-63b49b6cd3ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="6841c410-1f12-43d7-b399-28d59d1acdd1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ba397ed0-8526-409c-a6d2-71385bc2a6f6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADF93296C12BE0401F0A05994205</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADEB3C528F76E0401F0A059941D5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADEB3C528F76E0401F0A059941D5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADEB3C528F76E0401F0A059941D5</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81837</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_79051 - StreamView - PORTAL - UserNotActive - ACCOUNT_USER.STATUS of deleted - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="714fa41d-d229-41ad-b129-a880de9880f4"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1276a393-19f8-460a-ab66-6ca40fd843d9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="187a939b-aaf7-441a-bd42-c067ba406ac4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="c6ac83dd-2c92-4eef-9a79-716178de7ad2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="6086362c-fffb-412d-85d8-64fcf66fedc4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="59a34004-6704-406e-903b-81fec0d86ab2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="5d403b34-65f4-4bc4-9900-5e069de75d48"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="850433ed-6163-40b8-a0ad-d87276fd2fc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="78a969ab-21ed-4748-8dd6-0a1a58609931"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="2cdf7aad-e0b2-46da-9211-9f0a8142fdc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d448ca4a-c9fa-41e0-aefe-e7f004366bb6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_125116</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B70A2A71E05305991F0A9031</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtc6I6FP4rDvtxBxMQamGqMyq1tdu31W7v3n65k4YAaSFBEnzpr78JKlVre937icnh5DnPecmTnAmUpbbfE4IUknLWWGQpE35l7RhlwXyOBBU+QxkRvsT+pHdz7dtN6KPNFqMxCjrGP+1W+OydQteMrMg2HdtyTC/EJ2Y7OrFaMGzb7barXIUoyYgJiZjsGDa0XFNtgacPsO1bp77rNW3XfTIaj6QQClu5NKGxJrUQHSORMvcBmM/nzXmryYsY2BBa4PfN9QQnJENG92yVURWo6K79cTMkmKQpbmKegTOw43MWCn9CY4ZkWZB1rPCzWBBADyifUND4m1HvJeGIRbxaDhDjjGKU0jek63NDZMLDRi+NeUFlkn2ahAU1sEkW2MSWw74ZYJfakUA7DAuBTJEga401JhEpCMOk8Ws86hjfjutatfWhQExEvMjE7vLP+BA2IynPSWiKTVprascDHqhU94xgf8RwWgo6I7d6WHOEiVh3k+DjoRr3BYno4poKNaALodmBbXp7y1U1AhoTIf9Pg7aaswJ5RGlJurEXPzwl9DKRS7iY/oDD7zdXcZ6UFxR2KgLbzpWhbu1quTeU9RCtdpwLTrnsxZc3T7Tl8Hxozy6fh3f3F8nvuHczaDOr73znQQj65y8vg8B+HJy4yeXrxY+ZNeb3YeoEL2Lx9uoAu99O6fBSLIdl+27KR48Xi9s8nIP0r6vbq2jxlKXeGF7//E0GqlbkvBDR+eM4wHQGfs6jiL59X2YDOJw/uZfnVy/YGcS/7Gw8CFt9Nnn9u3UlJO7U6Wzx37VtzvykfH4hWG6WegxGQWOoIiP5tZhpCw3NqHL1cy0+QhImja7epbXDL5Xc0dBXPVytLfc06A2hOxzAoO313XPotmDb86wh7AX9k2AjMisWexQHnEVUx9KSuxqbrwnizBeEhaQwZ7xUSieMLxADJFFjxMbqEHAmyANX8uy8WdNiGj+/esXScpxpskA2kvLNMxq3XN6xu6IXSVLsaLIFdzR5TDDNKdHCredaqMEWUtViimalTK3mDDUZKZW0F1plfds5dYGgWZ4SzRRkPCxT0syTvKoMEKuvbSIsKisVOOeFRGl1IMCn6e3/21RC+YRUOwidUp+obpIDd4yzyedD3icH76INfK8MqT5fqqyyoHjFZPfX+7ToMalH5T2xDfN6wx8CYHEAAnzBD+yXpo4YzuhW/M1lrq4FJSTdTX+nyGpOm+VsVlYtdZwWKBQ80EUF0AYTgksldcsH/koYqFHAUfdKTXwveG3fpVjKhE0kkiRTI9iolkc8JCZE6IfESJ2dxbGvlJ2QqnSSLOQh2yBVjyDN+Mt3Evax9lPme/WZ8yJ879gBrK04Kk/1jpCUxXql75TlJwOCuYKlSg15sQ1+COBQ8F1jXeSai1QD9VxK8vmfhpa5joEw5iWTo8CoDNvSW/GUy5z4704fYCp1r5979L/feyatRgAT9UgUtMLXt7avjwCLt+R7HXRfwT3n5LTfhp7da1uVgrsrBfdg6/2k7bDrfjB/tGzVaX/Gu/8C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">50373A95457844E6B3C29A1FCE4DF39B</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF06019979B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DAF06019979B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:50373A95457844E6B3C29A1FCE4DF39B</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>50373A95457844E6B3C29A1FCE4DF39B</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:50373A95457844E6B3C29A1FCE4DF39B</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81838</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_79056 - StreamView - PORTAL - UserNotActive - ACCOUNT_USER.STATUS of blocked:tou - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b1903ec7-20fa-437d-ba49-b48ba93634be" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f845634e-7ce6-4367-83fe-035288f8961e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0ae4a92d-85ca-4a22-b6b7-566489fff00a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="7e50e54d-91f0-48fc-aa7e-ff99fd7d80bd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="1c8d8024-44d8-4202-99bb-7c6f40ed74b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="1fa03581-a5a4-489e-94b6-0567d6bf860c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked:tou" id="80652a8a-0eac-4920-b27d-830c7cea340f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="f29fc0b4-c53c-4370-86c7-e556522fe5da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="ac3688cc-492b-4ddc-8b5f-ab9c82cf8ba4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="75f3c20f-7d4c-497a-a22a-b9a51e2f0283"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="03370db7-fe69-456e-80fa-e5786752ffb3" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADEA7C1B4E91E0401F0A059941E5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADF8E7BB76CFE0401F0A059941ED</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADF8E7BB76CFE0401F0A059941ED</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADF8E7BB76CFE0401F0A059941ED</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59103 - StreamView - PORTAL - Stream view by Portal_ManageAccountConsentNotPresent_DifferentOrg_ActiveStream - 200 OK_MIGRATED" searchProperties="true" id="74c94380-80de-47d9-9ea5-b25387d98f92"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="98df5e5e-052a-4be6-9a1b-f391b7082df1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="de9df215-06ef-413f-9835-f4a090d4e69f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3956bc38-eb27-42f5-92ad-5f6d1ed0d1cd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove manage account consent" id="1e5e8612-91a3-4119-a6cc-c1af74eb5202"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="e6ce5ed4-5057-415b-81a7-fb83ba170b8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a343b468-c384-45a6-be72-ae19d62bd592"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="fc1489f1-3a54-4b09-aab9-8c330bfd5a51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" disabled="true" id="6b7cc317-2d07-41f4-ac08-b95e00e0a789"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="da6d988b-8852-4daa-8387-c298629ea661"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" disabled="true" id="b023074c-9353-4169-ba79-5ccc5ea93b06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="1196d9ba-3337-4429-b72e-e55733402638"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ac575f0b-37f4-481e-9324-3dae3bd27f18" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e6d4f325-390b-4982-9dec-4cd9f719a09f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d6b58bd7-a6b2-426e-ac95-59fe2a04a09e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_125116</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C84FE7909B2045438DD18D4C72D6E1CE</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B70A2A71E05305991F0A9031</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtc6I6FP4rDvtxBxMQamGqMyq1tdu31W7v3n65k4YAaSFBEnzpr78JKlVre937icnh5DnPecmTnAmUpbbfE4IUknLWWGQpE35l7RhlwXyOBBU+QxkRvsT+pHdz7dtN6KPNFqMxCjrGP+1W+OydQteMrMg2HdtyTC/EJ2Y7OrFaMGzb7barXIUoyYgJiZjsGDa0XFNtgacPsO1bp77rNW3XfTIaj6QQClu5NKGxJrUQHSORMvcBmM/nzXmryYsY2BBa4PfN9QQnJENG92yVURWo6K79cTMkmKQpbmKegTOw43MWCn9CY4ZkWZB1rPCzWBBADyifUND4m1HvJeGIRbxaDhDjjGKU0jek63NDZMLDRi+NeUFlkn2ahAU1sEkW2MSWw74ZYJfakUA7DAuBTJEga401JhEpCMOk8Ws86hjfjutatfWhQExEvMjE7vLP+BA2IynPSWiKTVprascDHqhU94xgf8RwWgo6I7d6WHOEiVh3k+DjoRr3BYno4poKNaALodmBbXp7y1U1AhoTIf9Pg7aaswJ5RGlJurEXPzwl9DKRS7iY/oDD7zdXcZ6UFxR2KgLbzpWhbu1quTeU9RCtdpwLTrnsxZc3T7Tl8Hxozy6fh3f3F8nvuHczaDOr73znQQj65y8vg8B+HJy4yeXrxY+ZNeb3YeoEL2Lx9uoAu99O6fBSLIdl+27KR48Xi9s8nIP0r6vbq2jxlKXeGF7//E0GqlbkvBDR+eM4wHQGfs6jiL59X2YDOJw/uZfnVy/YGcS/7Gw8CFt9Nnn9u3UlJO7U6Wzx37VtzvykfH4hWG6WegxGQWOoIiP5tZhpCw3NqHL1cy0+QhImja7epbXDL5Xc0dBXPVytLfc06A2hOxzAoO313XPotmDb86wh7AX9k2AjMisWexQHnEVUx9KSuxqbrwnizBeEhaQwZ7xUSieMLxADJFFjxMbqEHAmyANX8uy8WdNiGj+/esXScpxpskA2kvLNMxq3XN6xu6IXSVLsaLIFdzR5TDDNKdHCredaqMEWUtViimalTK3mDDUZKZW0F1plfds5dYGgWZ4SzRRkPCxT0syTvKoMEKuvbSIsKisVOOeFRGl1IMCn6e3/21RC+YRUOwidUp+obpIDd4yzyedD3icH76INfK8MqT5fqqyyoHjFZPfX+7ToMalH5T2xDfN6wx8CYHEAAnzBD+yXpo4YzuhW/M1lrq4FJSTdTX+nyGpOm+VsVlYtdZwWKBQ80EUF0AYTgksldcsH/koYqFHAUfdKTXwveG3fpVjKhE0kkiRTI9iolkc8JCZE6IfESJ2dxbGvlJ2QqnSSLOQh2yBVjyDN+Mt3Evax9lPme/WZ8yJ879gBrK04Kk/1jpCUxXql75TlJwOCuYKlSg15sQ1+COBQ8F1jXeSai1QD9VxK8vmfhpa5joEw5iWTo8CoDNvSW/GUy5z4704fYCp1r5979L/feyatRgAT9UgUtMLXt7avjwCLt+R7HXRfwT3n5LTfhp7da1uVgrsrBfdg6/2k7bDrfjB/tGzVaX/Gu/8C</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DD5BD09AB4811E05307991F0A0C34</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DD5BD09AB4811E05307991F0A0C34</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>C84FE7909B2045438DD18D4C72D6E1CE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>C84FE7909B2045438DD18D4C72D6E1CE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:C84FE7909B2045438DD18D4C72D6E1CE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5916bc4-b589-4b8d-a3af-f9b61208a113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59103 - StreamView - PORTAL - StreamOwnerMismatch - Stream view by Portal_ManageAccountConsentNotPresent_DifferentOrg_DeletedStream - 403 Forbidden_MIGRATED" searchProperties="true" id="c76739e1-6508-4441-81b2-bbf53c2d27bf"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2d5230de-6ae4-4e98-998d-6abf570fc17a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="75658bf5-ba29-4ed4-bb51-fc7fcefec987"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="64c3662a-db00-44a1-ba70-d537abd92d5b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove manage account consent" id="c80f7334-57c6-40f4-8167-a786a236e74f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="8b809d5c-6e4b-4b8f-b919-8b53ea18da07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="be7e920f-fada-4485-9bee-4201cea5a5f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="12f5eea7-2e2d-42ee-88c6-7c70af6c79e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="b13b7bd7-ad8e-40db-a0f5-f441ff18f053"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="344f3fb9-247f-4d22-9e93-5140f7d07547"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" disabled="true" id="d3bddfcd-a7dd-4f13-b37e-aed1a2442a4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="efb80178-d157-47f8-94ec-446e72ac8c1d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="120f3e8d-5195-43f8-bf8c-d9591440303e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b8d3eed7-c1f8-4567-88af-8d39617cbfc9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7a18e94c-ce42-4575-bb12-44a858421709" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_125116</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2BC77F41E8994412A81AC94A20690804</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B70A2A71E05305991F0A9031</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtc6I6FP4rDvtxBxMQamGqMyq1tdu31W7v3n65k4YAaSFBEnzpr78JKlVre937icnh5DnPecmTnAmUpbbfE4IUknLWWGQpE35l7RhlwXyOBBU+QxkRvsT+pHdz7dtN6KPNFqMxCjrGP+1W+OydQteMrMg2HdtyTC/EJ2Y7OrFaMGzb7barXIUoyYgJiZjsGDa0XFNtgacPsO1bp77rNW3XfTIaj6QQClu5NKGxJrUQHSORMvcBmM/nzXmryYsY2BBa4PfN9QQnJENG92yVURWo6K79cTMkmKQpbmKegTOw43MWCn9CY4ZkWZB1rPCzWBBADyifUND4m1HvJeGIRbxaDhDjjGKU0jek63NDZMLDRi+NeUFlkn2ahAU1sEkW2MSWw74ZYJfakUA7DAuBTJEga401JhEpCMOk8Ws86hjfjutatfWhQExEvMjE7vLP+BA2IynPSWiKTVprascDHqhU94xgf8RwWgo6I7d6WHOEiVh3k+DjoRr3BYno4poKNaALodmBbXp7y1U1AhoTIf9Pg7aaswJ5RGlJurEXPzwl9DKRS7iY/oDD7zdXcZ6UFxR2KgLbzpWhbu1quTeU9RCtdpwLTrnsxZc3T7Tl8Hxozy6fh3f3F8nvuHczaDOr73znQQj65y8vg8B+HJy4yeXrxY+ZNeb3YeoEL2Lx9uoAu99O6fBSLIdl+27KR48Xi9s8nIP0r6vbq2jxlKXeGF7//E0GqlbkvBDR+eM4wHQGfs6jiL59X2YDOJw/uZfnVy/YGcS/7Gw8CFt9Nnn9u3UlJO7U6Wzx37VtzvykfH4hWG6WegxGQWOoIiP5tZhpCw3NqHL1cy0+QhImja7epbXDL5Xc0dBXPVytLfc06A2hOxzAoO313XPotmDb86wh7AX9k2AjMisWexQHnEVUx9KSuxqbrwnizBeEhaQwZ7xUSieMLxADJFFjxMbqEHAmyANX8uy8WdNiGj+/esXScpxpskA2kvLNMxq3XN6xu6IXSVLsaLIFdzR5TDDNKdHCredaqMEWUtViimalTK3mDDUZKZW0F1plfds5dYGgWZ4SzRRkPCxT0syTvKoMEKuvbSIsKisVOOeFRGl1IMCn6e3/21RC+YRUOwidUp+obpIDd4yzyedD3icH76INfK8MqT5fqqyyoHjFZPfX+7ToMalH5T2xDfN6wx8CYHEAAnzBD+yXpo4YzuhW/M1lrq4FJSTdTX+nyGpOm+VsVlYtdZwWKBQ80EUF0AYTgksldcsH/koYqFHAUfdKTXwveG3fpVjKhE0kkiRTI9iolkc8JCZE6IfESJ2dxbGvlJ2QqnSSLOQh2yBVjyDN+Mt3Evax9lPme/WZ8yJ879gBrK04Kk/1jpCUxXql75TlJwOCuYKlSg15sQ1+COBQ8F1jXeSai1QD9VxK8vmfhpa5joEw5iWTo8CoDNvSW/GUy5z4704fYCp1r5979L/feyatRgAT9UgUtMLXt7avjwCLt+R7HXRfwT3n5LTfhp7da1uVgrsrBfdg6/2k7bDrfjB/tGzVaX/Gu/8C</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D94A163C00FEDE05307991F0A9FEC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D94A163C00FEDE05307991F0A9FEC</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2BC77F41E8994412A81AC94A20690804</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>2BC77F41E8994412A81AC94A20690804</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:2BC77F41E8994412A81AC94A20690804</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5916bc4-b589-4b8d-a3af-f9b61208a113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59102 - StreamView - PORTAL - Stream view by Portal_ManageAccountConsentPresent_DifferentOrg_ActiveStream - 200 OK_MIGRATED" searchProperties="true" id="61ee0fef-7acd-4f3e-a8b3-06e4eb0bf6d5"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="929e7fc9-ffbe-4859-94d9-944790efa19d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="394008e6-7163-41fd-85c6-6a7c01981414"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1cbbeea5-faa9-4bf5-9bba-7d062ffb7a73" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="dba95972-ffa5-4537-95f8-eaf545521e50"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b980fdb3-1727-43ba-91cb-92cf15757e18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4041c480-26fb-414e-938b-3caea6f20cd1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" disabled="true" id="62f00a20-789e-47d3-a29d-51baf561567e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="54ab94a0-bb2a-446c-b66e-6e957027c9ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="4f73ef57-9bbf-450e-8041-735776804504"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" id="2bffe28c-4d74-4a69-b918-f94ad1ce3c61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="41210d24-e004-4b10-87be-e36ea69165e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="af09c7c8-06a1-4f19-b635-c22dc6cb7370" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1d8d73d0-c836-4dee-8acb-508845c6c1a8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e002bc9c-3d1c-4245-9bf4-f196c49341b2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_125116</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:70ADD81B04EF4E148739C38E17184C86</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B70A2A71E05305991F0A9031</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtc6I6FP4rDvtxBxMQamGqMyq1tdu31W7v3n65k4YAaSFBEnzpr78JKlVre937icnh5DnPecmTnAmUpbbfE4IUknLWWGQpE35l7RhlwXyOBBU+QxkRvsT+pHdz7dtN6KPNFqMxCjrGP+1W+OydQteMrMg2HdtyTC/EJ2Y7OrFaMGzb7barXIUoyYgJiZjsGDa0XFNtgacPsO1bp77rNW3XfTIaj6QQClu5NKGxJrUQHSORMvcBmM/nzXmryYsY2BBa4PfN9QQnJENG92yVURWo6K79cTMkmKQpbmKegTOw43MWCn9CY4ZkWZB1rPCzWBBADyifUND4m1HvJeGIRbxaDhDjjGKU0jek63NDZMLDRi+NeUFlkn2ahAU1sEkW2MSWw74ZYJfakUA7DAuBTJEga401JhEpCMOk8Ws86hjfjutatfWhQExEvMjE7vLP+BA2IynPSWiKTVprascDHqhU94xgf8RwWgo6I7d6WHOEiVh3k+DjoRr3BYno4poKNaALodmBbXp7y1U1AhoTIf9Pg7aaswJ5RGlJurEXPzwl9DKRS7iY/oDD7zdXcZ6UFxR2KgLbzpWhbu1quTeU9RCtdpwLTrnsxZc3T7Tl8Hxozy6fh3f3F8nvuHczaDOr73znQQj65y8vg8B+HJy4yeXrxY+ZNeb3YeoEL2Lx9uoAu99O6fBSLIdl+27KR48Xi9s8nIP0r6vbq2jxlKXeGF7//E0GqlbkvBDR+eM4wHQGfs6jiL59X2YDOJw/uZfnVy/YGcS/7Gw8CFt9Nnn9u3UlJO7U6Wzx37VtzvykfH4hWG6WegxGQWOoIiP5tZhpCw3NqHL1cy0+QhImja7epbXDL5Xc0dBXPVytLfc06A2hOxzAoO313XPotmDb86wh7AX9k2AjMisWexQHnEVUx9KSuxqbrwnizBeEhaQwZ7xUSieMLxADJFFjxMbqEHAmyANX8uy8WdNiGj+/esXScpxpskA2kvLNMxq3XN6xu6IXSVLsaLIFdzR5TDDNKdHCredaqMEWUtViimalTK3mDDUZKZW0F1plfds5dYGgWZ4SzRRkPCxT0syTvKoMEKuvbSIsKisVOOeFRGl1IMCn6e3/21RC+YRUOwidUp+obpIDd4yzyedD3icH76INfK8MqT5fqqyyoHjFZPfX+7ToMalH5T2xDfN6wx8CYHEAAnzBD+yXpo4YzuhW/M1lrq4FJSTdTX+nyGpOm+VsVlYtdZwWKBQ80EUF0AYTgksldcsH/koYqFHAUfdKTXwveG3fpVjKhE0kkiRTI9iolkc8JCZE6IfESJ2dxbGvlJ2QqnSSLOQh2yBVjyDN+Mt3Evax9lPme/WZ8yJ879gBrK04Kk/1jpCUxXql75TlJwOCuYKlSg15sQ1+COBQ8F1jXeSai1QD9VxK8vmfhpa5joEw5iWTo8CoDNvSW/GUy5z4704fYCp1r5979L/feyatRgAT9UgUtMLXt7avjwCLt+R7HXRfwT3n5LTfhp7da1uVgrsrBfdg6/2k7bDrfjB/tGzVaX/Gu/8C</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158D950A99922A73E05305991F0AD1E6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158D950A99922A73E05305991F0AD1E6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>70ADD81B04EF4E148739C38E17184C86</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>70ADD81B04EF4E148739C38E17184C86</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:70ADD81B04EF4E148739C38E17184C86</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f73ef57-9bbf-450e-8041-735776804504</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59102 - StreamView - PORTAL - StreamOwnerMismatch - Stream view by Portal_ManageAccountConsentPresent_DifferentOrg_DeletedStream - 403 Forbidden_MIGRATED" searchProperties="true" id="c74f5231-992b-466e-9cd3-40d7966d7495"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="781d0fd7-8ca2-455d-89fb-4b609c375cec"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4ea1406b-232c-4af5-979a-60ede30dd5bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4778d99d-711e-4d49-9b59-3299bd865b37" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="4db76297-c148-44aa-bec3-a323624efb6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3067127b-5a8d-4462-b4e7-250fa2961a2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5237eb08-dd82-4b98-b642-1b95ca114835"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="8b0e4c0e-9632-4329-81b9-1f13f86639f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTAL" id="a099f14c-196f-4365-8544-15ddf21e8f1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portal");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="4f56dae6-83d8-4980-a6f9-c8e6fa3a7b29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" id="912a08ef-02f6-4ade-a720-13b4503f15e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="07f20605-81c5-4c78-83c1-9e99214959c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6d9d4529-bff7-4067-ba1a-6f4d7f77f882" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="601d97d0-43f7-4acf-9e36-2b4e1111ae31" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fc062575-e35c-4a90-bd89-d16375aa6f8b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_125116</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:4020C8D79F4249889F38C55331BA5329</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B70A2A71E05305991F0A9031</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtc6I6FP4rDvtxBxMQamGqMyq1tdu31W7v3n65k4YAaSFBEnzpr78JKlVre937icnh5DnPecmTnAmUpbbfE4IUknLWWGQpE35l7RhlwXyOBBU+QxkRvsT+pHdz7dtN6KPNFqMxCjrGP+1W+OydQteMrMg2HdtyTC/EJ2Y7OrFaMGzb7barXIUoyYgJiZjsGDa0XFNtgacPsO1bp77rNW3XfTIaj6QQClu5NKGxJrUQHSORMvcBmM/nzXmryYsY2BBa4PfN9QQnJENG92yVURWo6K79cTMkmKQpbmKegTOw43MWCn9CY4ZkWZB1rPCzWBBADyifUND4m1HvJeGIRbxaDhDjjGKU0jek63NDZMLDRi+NeUFlkn2ahAU1sEkW2MSWw74ZYJfakUA7DAuBTJEga401JhEpCMOk8Ws86hjfjutatfWhQExEvMjE7vLP+BA2IynPSWiKTVprascDHqhU94xgf8RwWgo6I7d6WHOEiVh3k+DjoRr3BYno4poKNaALodmBbXp7y1U1AhoTIf9Pg7aaswJ5RGlJurEXPzwl9DKRS7iY/oDD7zdXcZ6UFxR2KgLbzpWhbu1quTeU9RCtdpwLTrnsxZc3T7Tl8Hxozy6fh3f3F8nvuHczaDOr73znQQj65y8vg8B+HJy4yeXrxY+ZNeb3YeoEL2Lx9uoAu99O6fBSLIdl+27KR48Xi9s8nIP0r6vbq2jxlKXeGF7//E0GqlbkvBDR+eM4wHQGfs6jiL59X2YDOJw/uZfnVy/YGcS/7Gw8CFt9Nnn9u3UlJO7U6Wzx37VtzvykfH4hWG6WegxGQWOoIiP5tZhpCw3NqHL1cy0+QhImja7epbXDL5Xc0dBXPVytLfc06A2hOxzAoO313XPotmDb86wh7AX9k2AjMisWexQHnEVUx9KSuxqbrwnizBeEhaQwZ7xUSieMLxADJFFjxMbqEHAmyANX8uy8WdNiGj+/esXScpxpskA2kvLNMxq3XN6xu6IXSVLsaLIFdzR5TDDNKdHCredaqMEWUtViimalTK3mDDUZKZW0F1plfds5dYGgWZ4SzRRkPCxT0syTvKoMEKuvbSIsKisVOOeFRGl1IMCn6e3/21RC+YRUOwidUp+obpIDd4yzyedD3icH76INfK8MqT5fqqyyoHjFZPfX+7ToMalH5T2xDfN6wx8CYHEAAnzBD+yXpo4YzuhW/M1lrq4FJSTdTX+nyGpOm+VsVlYtdZwWKBQ80EUF0AYTgksldcsH/koYqFHAUfdKTXwveG3fpVjKhE0kkiRTI9iolkc8JCZE6IfESJ2dxbGvlJ2QqnSSLOQh2yBVjyDN+Mt3Evax9lPme/WZ8yJ879gBrK04Kk/1jpCUxXql75TlJwOCuYKlSg15sQ1+COBQ8F1jXeSai1QD9VxK8vmfhpa5joEw5iWTo8CoDNvSW/GUy5z4704fYCp1r5979L/feyatRgAT9UgUtMLXt7avjwCLt+R7HXRfwT3n5LTfhp7da1uVgrsrBfdg6/2k7bDrfjB/tGzVaX/Gu/8C</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DAF05FC0D79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158D9468B7092A71E05305991F0A9031</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DCC25EF7533B2E05305991F0AEA3E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DCC25EF7533B2E05305991F0AEA3E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>4020C8D79F4249889F38C55331BA5329</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158D9468B7112A71E05305991F0A9031</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>4020C8D79F4249889F38C55331BA5329</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:4020C8D79F4249889F38C55331BA5329</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158DAF05FC0E79B5E05307991F0ADB6D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f56dae6-83d8-4980-a6f9-c8e6fa3a7b29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Portal Customer Support Test Cases" id="0727a943-17c5-41d9-93cf-0c13f39db60a"><con:description/><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">D:\Stream reports R3\stream view</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_80000 - StreamView - PORTALCS - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f92f4f9d-dd8b-4f0e-be45-84153bb1d009"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Create Account,Users and STS" id="2a853833-b6e2-4885-85f3-5a19344df48a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="3412f6e4-b2ff-43f2-b3e2-a639fceb7d9d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="368371d2-9017-4af8-8b09-e1288d6d721c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="443792aa-6c81-4ae8-a0c5-562933e22ce0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="16ce162c-a02d-4e77-8744-1fba204bc4b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="12f44b29-90e2-4a70-9240-2bc3c9d99009"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="e2a2093a-ba4e-4885-961d-6fe59d427560"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="05b6b887-a8db-4cdf-8329-e8c7140d6103" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP14BXESnlFBClC2tKWlhLZ7+6UyzgC+BCfEDo/++rUDpIRCl10JCXkyPnPm4WNfczz3TdvhHCJBA5Zbz33G7cRa1+KI2QHmlNsMz4Hbgtiu03uwzQKy8X6Lluu269pHsTYaVYlRyntjKOWLngX5WpWU8giNy7hSIeYYVaQr5zF0GReYibpmIumP5K86RBW7iOxSrVApV9613CtEXGJLlwLSdqTWvK5NhQhtXV+tVoWVVQiiiW4iZOh/9x5cMoU51hrX24ySQFFj508KHhDwfVIgwVy/1jM+1x63XTphWMQR7GJ552IhHdV06eNxOrnS0r3gddk4SJYtzAJGCfbpJ1b16YGYBl7O8SdBRMV0fjYJAyngPKxJnhhFdqXpWWoXAmUYRhzn+RQbO6wBjCECRiD3MujWtavLupZsHUaY8XEQzXl2+d/4AFuCH4Tg5fk+rR21ywFPVKpxDcTuMuLHnC7hUQ1riAnwXTeBXA6V60cwpusHyuWArrlipx/SO1puq9GmE+Di/zTooDlbkFfsx9AgY8O9f++WmLMSldfitBW2HM80/fs3p54QOHRODGlrt8ujoUyHaLvj/eY97LWfTbIwuy6zRn7v+elGOPiR/uGdyICmgcIxWH7Q3gw7v9Fd8+5XZ8Zb5Sb13c3q5rb9uLLuujPR/3QeNsvW7LM0xDMBftu6jd8ea0wvU/9uKja/o9lsOV322mzdhNakSIJmWFr89YneYnwfVfxR33vpDaxJ30Ls1n0JB5Xq86z2Npo2N6j/S2z0+Us9TeeAf9a2P/NuPPoDROyXagy67VxHdgmLn8VMWaiXHyeudqjEhwtgQmuoXUo77FjKHfVs2cPt2ihV262bJuqUrVK5ZVRvUMlCpVrN6CCnaBjlvchsWRxRbAVsTFUsJbnbsfmZIJnbHJgHUX4ZxFLpuPYDYhsLnOuygTwEAeMwDKQ8G0SES8yqjOFPiy/88ghWm6i2MrXcYyCe2FPkjAVEGU02UEaTB0BoSEEJt5prLgebC1mLBV7GwjcKS1xgEEtpj5TK2maxWtI5nYc+KKb6PPBiHwrhNEwqo/Ptv5nHhCfW9oPj9j9a7kdyIPSz6R1/21dC+nhUOXCVUhNkN+HEHVPc5/Mt7/LJu2gP78QeVedLllVElGyZZD99TYsak3RUvhLbM083HBsy4PpxXmk8b0lJOvbp5S01XapAY9+cBTYKi0K8XMZJP4pFS48kvK4qoiNTd4HEUqc2w2AGTE9R9IsuhZT4UfDUnqUYiylzBRYwl/OTS5YXvAJc4OoV0JWDv770iZEJKUsnYC1O2Vq+fMEoxj8+cohNlJ809+XfKoi8r46dwDqII/OUjwBB2USt1IWwOTMeJJCwVEpZEB2CnwI4FTxrTIucchFyoEaxgPNfckqj6homJIiZ6La1xHComwlPsQnB/nL6BpNIc/pWo//+WMvTZAQIyBcepwm+unJtdQTY5EB7d0HPyK/1k/xm2TW+mb9bDup0POONfwA=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DCEB0F6356C18E05305991F0A4116</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2a853833-b6e2-4885-85f3-5a19344df48a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_80050 - StreamView - PORTALCS - AccountIdUnmatched - Node AccountID in URL is null - 403 Forbidden_MIGRATED" searchProperties="true" id="5cd5c6fd-68db-452d-a90a-9b6362c43c64"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4013e08d-328e-4f0a-b128-a18b4690a705"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_ACCOUNTID_MISMATCH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5ff86610-0028-4c39-96e7-a62c50972ba5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3ea5519e-1d8e-49e0-915f-e73aaaf54d11" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Change URL in account to another account" id="4be2e89b-1b78-4486-9c67-5879916a4701"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("assertionAccountIdFULL");

a += "A32";

tC.setPropertyValue("assertionAccountIdFULL", a);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="3a2b74d5-e830-4043-a042-ee79277fa11b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set URL node accountId null" id="8630169b-54f6-4115-922a-e7a6ed0ccd36"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionAccountIdFULL",tP.getPropertyValue("urnaccount"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="003e86b3-d9d3-4d6f-90e5-bbd5f7c21919"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2db10744-8df4-4e56-8909-7f6e6259a309" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_80052 - StreamView - PORTALCS - AccountIdUnmatched - nodeaccountid and URL accountId mismatch - 403 Forbidden" searchProperties="true" id="61afed71-8e02-4e20-b0c6-32417b8570b9" disabled="true"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9f17c1c6-5461-4374-9c7b-4369aa4645a3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_ACCOUNTID_MISMATCH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8eb58c43-5695-4754-9139-780c6ec4d5ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="02e5f0cf-efce-46a7-b440-1454247f13fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="218ff4bd-2215-4596-b58f-9549f8ce7ff4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Change URL in account to another account" id="e0ecad3f-b3e6-4368-9da3-52abfffd7879"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("assertionAccountIdFULL");

a += "A32";

tC.setPropertyValue("assertionAccountIdFULL", a);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f683873a-f71b-4c62-8512-94859ad5458d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="554b56ac-f18b-4b19-8bed-4817411c4325"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85000 - StreamView - PORTALCS - StreamNotFound - Stream supplied does not exist - 404 Not Found_MIGRATED" searchProperties="true" id="ce130fa1-97ba-40ec-90b8-762b1873d771"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has no active nor deleted streams associated with it.  The stream handle will be properly formed, yet, nonexistent. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5b4e6072-fceb-46c1-bc77-5ae76d908bb9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","35");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d06ba3e3-5e60-4ab7-a405-2386025bfe7f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="06b7e4bd-e6a7-4450-a25e-1a7a6da14112" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="54262e59-d9a8-4b12-941f-152a48e26e15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Get nonexistent Stream Handle value" id="03a7d28a-fa24-4797-9a5c-d0c0f341e39c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String urn  = tP.getPropertyValue("urnstream");
String hexy = a.randomHexString(40);

this.log.info "urn[$urn] - hexy[$hexy]";

tC.setPropertyValue("streamhandleFULL",urn + hexy);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e8e06bc9-d53e-419f-ae8f-5d9eff1c69a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="431d960f-87dd-442b-9e17-8b9955eedbcb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="48ae5509-13eb-476e-9e06-404d6ee26a4c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName( "Get nonexistent Stream Handle value");
}





</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:43AF3448149D5D3EC683CE176E5B693114193CB9</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>35</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>35</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85001 - StreamView - PORTALCS - StreamOwnerMismatch - Stream supplied is in deleted status yet not expired - 403 Forbidden_MIGRATED" searchProperties="true" id="b390d2f9-6771-4366-82bf-8328d2b8009f"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="16be5755-cb09-44c1-b843-38d02a1f541f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3747dfb2-8045-46ea-b258-62ec8340a509"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6dfcfce0-e1f0-47c5-85b1-54cd9413cfe3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f9dc0e55-9536-4927-bbc9-c8780b666496"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4d31a41c-548d-4949-898a-062858f12152"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="64fdd602-cc51-4b06-a4ed-cf8fd28e6572"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="cb506439-20b4-4227-8097-09985bf32c65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b2314f79-38c0-4ead-9a99-f5d9fbdcf2df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d53ff3e2-cd8c-45c4-819c-297b8105ec75" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="21f199be-3aa3-485e-94cf-e3e0fa69c346" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:BB8237BE625F4F28AAFD934EF4867B57</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DFBE3813D3ABEE05305991F0A2A42</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DFBE3813D3ABEE05305991F0A2A42</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>BB8237BE625F4F28AAFD934EF4867B57</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>BB8237BE625F4F28AAFD934EF4867B57</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:BB8237BE625F4F28AAFD934EF4867B57</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85003 - StreamView - PORTALCS - Stream supplied is in active status and expired - 200 OK" searchProperties="true" id="1b8f8a47-1f77-4d23-ac57-eefe84475c09"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e0382c6e-ef9f-42f3-bf66-62fbdf884574"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="1e2a648e-2433-44aa-b9be-fce71550f581"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5f71d044-e89e-4ad7-bc68-225417aa1401" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="89ba0ed4-7c86-45f5-835a-bc658ff670c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6a45f3e3-edbc-41bd-b0b6-cef4e6d43a01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Expire the Stream" id="bfeb0f1b-5728-4da1-b631-c3170de68e2a"><con:settings/><con:config><script> def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

//tC.setPropertyValue("expectDBDeletedBy","1");
//tC.setPropertyValue("expectDBDeletedBy_" + cnt,"1");
//tC.setPropertyValue("expectDBStatus","deleted");
//tC.setPropertyValue("expectDBStatus_" + cnt,"deleted");

tC.setPropertyValue("expectDBDeletedBy","0");
tC.setPropertyValue("expectDBDeletedBy_" + cnt,"0");
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBStatus_" + cnt,"active");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamExpireYears(tC.getPropertyValue("streamhandle"),1);

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="2e42ff4b-9eb3-4ed4-926e-5eb42f146395"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="569eb656-555f-465b-aa80-78792f177b31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a6ba57e3-fb2f-4048-a8d7-5c8be77ad00b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8a72f0cb-9aa4-41f9-b51e-b389f4b00c55" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8c82e847-b7ef-4251-b425-051eb8914d86" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5ACC6F6044C043CB92287D35E113972F</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158E0606002C3AC4E05305991F0AADD5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158E0606002C3AC4E05305991F0AADD5</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>5ACC6F6044C043CB92287D35E113972F</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>0</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>5ACC6F6044C043CB92287D35E113972F</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:5ACC6F6044C043CB92287D35E113972F</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85007 - StreamView - PORTALCS - StreamOwnerMismatch - Single StreamView following StreamDelete - 403 Forbidden" searchProperties="true" id="efba8ef9-639f-4a38-bcf1-8114f1f3b467"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f0ff20e7-e43c-4464-8a80-a6fe1760db6f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3da44369-49f4-4688-99f3-590901819000"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="816d3888-39eb-40e8-9b2d-935a73d8b4d5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="80ab11dd-5219-46bf-9233-862363c657b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4acfc1c2-0b55-4d46-beb5-53f1f11fd453"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="33bbff71-f960-4696-8d82-2dab6ebe959f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="36b7c1c6-2819-47f3-91ea-322c6c732a86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e2ca0d24-4c87-4569-8771-bb538fcf249d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="fc342641-8d32-4396-b514-b04adb84d6cb" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4b475e6c-774b-4a0f-990a-a788cff363cd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d37de4cb-c261-4e72-8b4b-4a84065a681c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:24E232592CC54CCD9B2FC25AC07CA5D7</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DEEBE0FCE4554E05305991F0AB810</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DEEBE0FCE4554E05305991F0AB810</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>24E232592CC54CCD9B2FC25AC07CA5D7</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>24E232592CC54CCD9B2FC25AC07CA5D7</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:24E232592CC54CCD9B2FC25AC07CA5D7</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85114 - StreamView - PORTALCS - Stream handle that is 29 days post CREATED_DATE is displayed - 200 OK_MIGRATED" searchProperties="true" id="1f4e7fa2-08a6-470e-ac50-bc8cf7a3a228"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fdc99fd7-ce32-480c-a350-7eed655be29a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","100");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
tC.setPropertyValue("streamViewIgnoreDateDiff","true");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamViewIgnoreCreateDateDiff","true");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2669c139-77f6-49be-b848-836ad414468a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="18166375-6b43-4702-a429-6413319621f2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6087229c-7aaf-4424-841a-d3511b1e0993"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="49b6b95f-3423-47d8-8170-7349064ab92c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.CREATED_DATE in the past" id="a145ab6a-1547-48ae-9d92-324c012bbe5c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamSetCreatedDate(tC.getPropertyValue("streamhandle"),-29);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="66258283-3673-4fdd-ba78-b68e90bdb2fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d565a0e6-9664-4f3c-8856-d2495a308fbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e60fde40-4db8-4385-ab07-675bfc9c0234" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct  = tC.getPropertyValue("accountoid");
def count = tC.getPropertyValue("counter").toInteger();  

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2415CC5B60ED4CA0AFA18F3D3E9A61DA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>100</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DFBD5D44C3AB8E05305991F0AD200</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DFBD5D44C3AB8E05305991F0AD200</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2415CC5B60ED4CA0AFA18F3D3E9A61DA</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>2415CC5B60ED4CA0AFA18F3D3E9A61DA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:2415CC5B60ED4CA0AFA18F3D3E9A61DA</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85121 - StreamView - PORTALCS - StreamHandleIDNotValid - Stream handle supplied is malformed - 400 Bad Request_MIGRATED" searchProperties="true" id="914ce8b4-a319-4209-88d7-a77a3b05351e"><con:description>This test case will verify proper response with the supplied stream handle malformed.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ac52c5f3-63c6-4954-8a4a-6e40727a5150"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_HANDLE_ID_NOT_VALID");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="75e228e4-0f01-49f1-8861-270b1a6c18f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="686315a2-8f0b-41bf-b353-581a36d2610c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="6df485f4-fbd3-477c-aa8f-97309d12f3ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of malformed stream handles" id="d6bd9244-fefd-4262-95f1-ccd39c550a9c"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">b&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">C&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">D&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">ee&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FF&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">gG&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AAAAaaaBBBBBccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">13332a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a322212&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">332232a3232&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2232-232-111&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhndleid:org:dece:3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:streamhandleid:org:dece:3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece::streamhandleid:org:dece:33&lt;/con:entry></row></con:configuration></con:dataSource><con:property>sh</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="918cf22b-e0ee-4523-a327-4614f198afca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>sh</con:sourceType><con:sourceStep>Data grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d36d4b82-0535-4f3e-98e2-669b2d195fb8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get the next malformed stream handle" id="fd18a151-2b35-45c6-84cd-61d74ebab624"><con:settings/><con:config><dataSourceStep>Data grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece::streamhandleid:org:dece:33</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_HANDLE_ID_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85122 - StreamView - PORTALCS - StreamHandleIDNotValid - Stream handle supplied is malformed with special characters - 400 Bad Request_MIGRATED" searchProperties="true" id="0d7fc80d-bc4b-4888-9571-e9a974e18e0b"><con:description>This test case will verify proper response when the StreamView API is invoked with a malformed stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ebcd5efa-7fa0-4043-9044-b3fab13437ee"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_HANDLE_ID_NOT_VALID");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="03077ed8-5599-4923-9d8e-b59cd3b2df40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="631baf01-b0ad-41dd-931d-34eae74b13a0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="b429403d-6e70-448f-a11f-a0435186ebc1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of malformed stream handles" id="1d4ef34d-53f4-4c3b-865c-1bd66f973a80"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">@&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">(&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">)&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">_&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">_&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">=&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:=&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:......&lt;/con:entry></row></con:configuration></con:dataSource><con:property>sh</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="cf629e46-9c76-4338-b274-b75ec91c6b11"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>sh</con:sourceType><con:sourceStep>Data grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="5718db27-fa05-4c60-a27f-af81bc077917"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get the next malformed stream handle" id="25dfb259-4507-4661-8798-72c3c1c85a61"><con:settings/><con:config><dataSourceStep>Data grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:......</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_HANDLE_ID_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85135 - StreamView - PORTALCS - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'deleted' displayed - 200 OK" searchProperties="true" id="6fdcbeb9-be02-4f9c-ad52-1eac81505f71"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of deleted will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="70441489-013e-4847-a163-9bbf8e233f57"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="cf46305a-2b5a-4f01-9dfc-d693d734620b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="72209343-22cc-4288-b09f-cf81f6301dcd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="9b66cc6d-e658-4ca1-99f3-5b8730c12d5f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ae0b24ce-dd6e-40d8-b909-2f000cd07ad4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="1eec0603-cf9f-41b5-9471-37e01c3807cd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusDeleted(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="8620eef8-e9d7-4d94-986d-4927f1d3d172"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="4c3ab107-f0fd-4ac6-97ac-19af3ec0f5c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="143d7111-2af6-40e5-a679-fd2aafe3c465" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7855aa23-1b17-4046-9076-8dd10f15360b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f2c14155-7c20-437d-be34-2f9a265b8238" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6747CD99A218436BB7EFFA0F9CB00DBF</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DFBAB183716CAE05305991F0A842D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DFBAB183716CAE05305991F0A842D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>6747CD99A218436BB7EFFA0F9CB00DBF</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>6747CD99A218436BB7EFFA0F9CB00DBF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:6747CD99A218436BB7EFFA0F9CB00DBF</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85136 - StreamView - PORTALCS - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'suspended' displayed - 200 OK" searchProperties="true" id="4052f039-2ca3-4c7f-a94d-e8fd6b9dea60" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of suspended will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cdeeca6d-6ca5-49ef-9cdd-b7a7a12394b6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8a3aa52f-3740-4949-a1ce-44de1be0083f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f2520455-2e89-42a4-bd1b-fb040b1787b9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="486acb35-7958-4a3e-a94e-176f4730eb9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a2a69279-68a9-4c55-83b7-0f41c7ed365b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="aad61a4f-366a-439b-9c1a-28096adf4a75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusSuspended(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="c511c71d-2e04-44a0-a66b-908b46173711"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="06d1c368-52e9-48c0-a5cf-4ac9dcc23cd5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="86efdaa3-6b11-40e0-a1cf-5ae1f1eb2253" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="70d6543e-5979-47ef-8bef-a85c414831c1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9ade548d-dee3-44aa-b795-b6963ccc0500" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D1966A527E395E0401F0A059949BA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D1966A527E395E0401F0A059949BA</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D19632CEC7C60E0401F0A059949AE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D19632CEC7C60E0401F0A059949AE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D19632CEC7C60E0401F0A059949AE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85137 - StreamView - PORTALCS - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'other' displayed - 200 OK" searchProperties="true" id="d90d0f56-e8a3-4992-9204-7b90c6356668" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1d7ef4ff-ccf1-4d15-b91a-6d6f82355d39"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="bb0cef60-b155-46a2-9d7a-022f4cd30d5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bcc266b7-d3f0-4613-931f-062c51a325a3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4e0e7eb2-0075-41cc-9bc3-c5b1f87685e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="815350ed-ac1e-426a-ae95-2c7c2598a918"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="de99eff6-b9be-4ef5-9b3b-e88ddc2a433b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="8ab54c32-c924-4c2d-aa97-9b8b2c731af4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d05106d9-d2f2-45f8-9a47-9ccc5f022d71"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e6b9f7d4-e64e-488f-a9f8-fe2a1b8ba780" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3fa4fa2c-0fcd-419a-8f81-249bba406ffd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c0a49791-e0d4-4e3f-94a1-ef38c47693a7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D194E77728F1FE0401F0A059949B6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D194E77728F1FE0401F0A059949B6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D194E77838F1FE0401F0A059949B6</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D194E77838F1FE0401F0A059949B6</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D194E77838F1FE0401F0A059949B6</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85138 - StreamView - PORTALCS - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'pending' displayed - 200 OK" searchProperties="true" id="378c2b5c-b090-4e6a-b837-1d352d58898a" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of pending will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b795d454-85c6-4eff-b8d3-d74ea7a7ab52"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="494e130a-8c37-492c-879e-18e3b687e510"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f2eea659-9965-4c99-9094-931b32e9692e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a3c3c46e-a387-485e-80b0-d00b39fa3002"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="09f91880-b29f-44bb-a062-3af21a7b1ec3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="e00cf036-fe53-4087-a714-9bd575a5e427"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusPending(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="56d5ebc8-0a18-46d6-af3f-18eb72411d95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b8d6b280-2241-4ee5-9dee-8eaf30d27e9a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5dd64f9f-2c32-4a8e-a962-d948e375e23d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="541f5f27-e6f5-4e82-8ba2-75c157169f7e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0520a767-dffa-4466-8604-ada66970f8b5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D1941876C5EC7E0401F0A0799496A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D1941876C5EC7E0401F0A0799496A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D194474D34DB5E0401F0A07994978</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D194474D34DB5E0401F0A07994978</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D194474D34DB5E0401F0A07994978</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85139 - StreamView - PORTALCS - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'other' displayed - 200 OK" searchProperties="true" id="135886a1-38a9-4768-a34b-4559c25b6875" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3df841-27e5-46fe-80c3-8cbd6c5cb0b8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ef050cb8-650e-4611-aa5e-b4df4f723c8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="62bb77d3-fd10-445d-ad5d-e8c1669584d7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6ef47a66-8a21-44a9-8275-c4f55670389b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="577caafa-f910-497d-8037-87dc892a7972"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="86bfb046-b0c3-4604-8e35-fb64d88a2a1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="bfc2faf4-f369-4658-a6b7-cbfe26e1013a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e71f192f-7eb4-4de9-936b-4a0a843b8d73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6877ce70-5155-41ab-aaae-45a720b4c351" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a352b734-515f-4106-8287-3f3acaec2c8a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7e13ed0a-8ba6-47b4-b69e-bd3dae114c6b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D194EF4C0720AE0401F0A059949B8</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D194EF4C0720AE0401F0A059949B8</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D1966A598E395E0401F0A059949BA</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D1966A598E395E0401F0A059949BA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D1966A598E395E0401F0A059949BA</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85141 - StreamView - PORTALCS - Stream with RightsToken PURCHASE_PROFILE.STREAM of  'N' displayed - 200 OK" searchProperties="true" id="111bae28-6225-4951-a2f7-4f7e83f8477c"><con:description> This test case will verify that an active stream associated with a RightsToken that has PURCHASE_PROFILE.STREAM of  'N' displayed</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5c012c1b-521d-4638-bbf5-23ea40597eaa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ccabb88f-466f-4c22-88d0-06f7abf4565f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="175554c4-a96a-487c-8e8e-0db89e1dc0e5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4f78c28b-ea67-43c9-9e8b-55663ef4f6f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="534efad2-f71f-455d-bd98-c471e9229b63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightToken's PURCHASE_PROFILE.STREAM to 'N'" id="538e4835-738a-4ce8-a600-e1609998e2c3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="56951c1b-8a70-4341-8c45-ffdab87d6a12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0e875bd1-2820-4cd5-b906-bc3a8119c1c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c9d91e7e-85b1-4159-b67e-7fc70d214625" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="bc416395-9474-41df-9902-9a694b1a41bd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="823b857e-2c17-4bb8-9bef-044d2ab661f8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EB3EB5E45D024DDFADA692C18850B91A</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341733213AE05307991F0A1873</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZpb+o6EP0rKPdjBXEWIIkKEoUuaelKN/XLk3Em4HsTm8YOS3/9swOkQGkf90lIyJPxmTOLj30scJrYQUcIyCTlrDJPEyaCwtoy8owFHAsqAoZTEIEkwaBz3Q/sGgrweotRCXst45+6F0W2ZTerQ3Ccqhsju4obXlx1YGgN6xFCNmooVyFyCJmQmMmWYSOrXkXq5z2iZuD4ge3UXN96MyrPkAmFrVxqyFiRmouWMZZyEpjmbDarzZwaz0amjZBlvl73B2QMKTbax8uMikBZe+VPahEQSBJSIzw1j80tn+NIBAM6YljmGaxiRd/FQibyTeUTCTr6ZZR7IQpZzItlFzPOKMEJ/cC6PtcgxzyqdJIRz6gcp98mYSENXIU5qRLLZb8Mc5vagUBbDDOBq2KMrRXWA8SQASNQeXoIW8avw7pWbH3MMBMxz1Kxvfw7PsCmkPAJRFWxTmtF7XDAPZVqHwMJQkaSXNAp3OhhnWACYtVNIIdDVe4yiOm8T4Ua0LnQ7MxNejvLZTV6dARC/p8GbTRnCfKMkxza4/P7l+SJv6DuSFxF0Qu9+7g6jZvvvVu3VRDYdC4MZWuXy52hLIdouSOMj+bnthef+PHDeYPSh+cx781u+kfN+PRocXlkvh/lb5fMe4uvL7O8L8di7jy9eMMT+VJ/vegx8v7c95pX3od8ndknjyF57d6fTa/d/DWuN+6JLaeLBjt/mdXTwRsOh6lw7Eu3KaF73x3KKPSuO/z3if/Hci5P4LkzH1w0OovRxYz0ByCe/at6wnu9e/nhJ4nXKtPZ4L9tW5/5QT78DUSul3oMwl7lTHUJy5/FTFtoVI0L12CixUdIYNJo611aO4JcyR2NAtXD5dqqe6eo2eyizumpbbnoFNUd1PR96wx1fMfvrEVmyWKHYpezmOpYWnKXY/MzQZIGAlgEWXXKc6V0wvgBsYclroTsQR0CzgQ8ciXPc0/OfOo0xmMXER99oGiySFwxMSo3XN6y26wTS8i2JNlCW5L8AIROKGjd1mMt1FwLqUrxjqe5TKzaFNcY5ErZMy2yge16dVPQdJKAJmqmPMoTqE3Gk6Iwplj+K70horBSQSY8kzgpzoP5bXa739aFUD4R1Q5Cp3QCqpmw54qx1vl8ybux9ypaw3fyiOrjpaoqM0qWTLY/fQ6LnpJyUj4TWzMvN/wlABF7IMwf+Jm7pSkjRlO6EX99l6tbQelIe93fd2zV3mv5dJoXLXVdx8wUvKmLaiLbHADJldItHvkfYGaJYh50rZTEd4KX9m2KuRyzgcQSUjWClWJ5wDtC6Yl+R4Tq6MwPfaRshVSlkzCX+2zdRL2BNOMfn0kkINpPme/U34xn0WfH9mBtxFF5qmeEpGykV/pKWXwzIIQrWKrEkGeb4PsA9gXfNpZFLrlINVDDXML3Xypa5VoGJoTnTIY9ozBsKm/BUy4mEHw6fYEpxL187dH/fu5VaTECBNQbUdACX1/agT4CbLSh3qugXwS84bhW07Fty+lsCrjlNZ2yKFvs2l/MXy0bddqd8fa/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E077C0AEE2140E05307991F0A939A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E06341732213AE05307991F0A1873</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158DFBD408FB283EE05305991F0AE513</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158DFBD408FB283EE05305991F0AE513</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EB3EB5E45D024DDFADA692C18850B91A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E0634173A213AE05307991F0A1873</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>EB3EB5E45D024DDFADA692C18850B91A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:EB3EB5E45D024DDFADA692C18850B91A</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85142 - StreamView - PORTALCS - Stream with RightsToken whos RENTAL_ABSOLUTE_EXPIRATION has expired - 200 OK" searchProperties="true" id="90ba6cb4-44ec-4cef-a80e-18a2b97d1782"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c840e963-9687-4db4-b0c8-140e15bc4889"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f2e43f85-c3ef-4fca-b646-21d53737fb56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="13a85025-f206-4e2c-a30f-fa729cd2404c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="7733d7c4-a9a2-4872-8a43-0d1e5e2a7586"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="3c65a3a6-998a-423c-a3a8-26c4f868094e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightToken's RENTAL_ABSOLUTE_EXPIRATION to past" id="e5cf1208-c3b9-485c-868a-02e7ee35d8b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenExpireYears(rt,1) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="ed36feae-c8d1-4132-adb9-b469a6273f60"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="28b0c680-b7d1-4bf4-9fce-743f913d03fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6d133677-6e8a-4577-9e6b-5f0b91fcd02e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="457406a0-5893-48cd-82c2-5b33282dd82b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9050af41-5e9d-4cf6-ab8a-877483a9877a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_011140</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5239D44A88374C249AE16059FCF80B9A</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D12E212BE05307991F0A6731</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKP24Ck7COypIUOg0LbQs0HZ2vqyMcwG3wQ6xQ6C/fuykpEBpl1kJCfnm+txzHz72pcDLwHHbQkAkKWeFzTJgwk2tTSOOmMuxoMJleAnClcQdtwd91ylaLt5tMQpet2n8a9kEavWqZULNsc1yzffNaWlaMaHqY3AqNR83LOUqRAweExIz2TQcy66YlvrVJ1bNrVTdklVslBq/jMITREJhK5ei2pWR2oimsZAydBFKkqSYlIo8miPHsmz0c9AfkwUssdG6zDJKA0Wtd39S9IFAEJAi4Ut0iQ58Ln3hjumcYRlH8B7L/yqWhawGUj6+oPMLI98LvsdmPF1eYcYZJTigb1jXZwBywf1CO5jziMrF8sskbEsDm7AhJrHL7MJAh9TOBDpgGAlsigW237FGMIMIGIHC48hrGhfndS3dOokwEzMeLcXh8s/4AFtDwEPwTbFL653a+YAnKtW6BOJ6jASxoGu418MaYgLivZtAzocqDCOY0U2fCjWgG6HZoX16R8usGl06ByH/T4P2mpOBPOEghtbw149H0lnF0Xp7jTie0B+4NrVuh/fPg2ZKYN85NeStzZZHQ5kPUbbjsTtl9l/z7nQBYj7Bw0ln1bsLkkZ55D31X5375Mqex+Gm7L35YigDltxOnl97pdFD3MbVRcJ6NzZb3HQf3kg4enh7nXjhxosWKxiEnbtOb3mDk7+fK4Onfzo/H6fPpMP7tdvFy2rMiT9L2vGUz7fPSQetez1Jy8PxNpzcVhBBAAK91gd2e+xt7+o29MtUJM08nT3+h7bdmR/H0xcgcrfUY+B1C9eqS1h+L2baQn1zlrq6oRYfIYFJo6V3ae1wYyV31HdVD7O1Xan3yp2eVaq3ryodu9ezKiWr0mjY11a7a/dKO5HJWBxRvOJsRnUsLbnZ2HxPkCxdAcyHyFzzWCmdML5B7GKJCx4bqUPAmYAJV/I8k47zJmozJsqRXeU0eKlubWnZZaNwz+UDe4jaMwnRgSbb1oEmj4DQkIIWbj3XQg22kKoWK7yOZWAX17jIIFbSHmmVdZ1yvYIEXYYBaKZoyf04gGK4CNPKIJH9OyYmIrVSQUIeSRykBwJ9md7xt10llI9PtYPQKXVAdRNO3DHOLp9PeVdP3kU7+HbsU32+VFllREnG5PDTx7ToMclH5SOxHfN8wx8CEHECAn3DDx2XJo/or+le/N1lrq4FJSStXX9X2C6uivF6HactLZdLKFLwSBcVWQ4aA4mV1G0n/BUYylHQWfdKTvwoeG4/pBjLBRtLLGGpRrCQLs94SIxB6IeEp87O5txXykFIVToJG3nKdhWoR5Bm/O07ibhE+ynzUP0lPPI/OnYCay+OylO9IyRlc73Sd8r2iwEhXMFSpYY82gc/BXAq+KExL3LORaqBmsYSvv5S0DLXNDAhPGbS6xqpYV96U55yG4L74fQJJlX3/LlH//u9Z9J0BAioR6KgKb6+tV19BNh8T77fgx4pePe603O6ttN1bKeTKngtU/BqrfRx0g7YtT6ZP1v26nQ8463f</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E4BE038AC5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE038AC5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D12D212BE05307991F0A6731</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D135212BE05307991F0A6731</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158DFBE2D12D212BE05307991F0A6731</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158E4BE0380C5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158E4BE0380C5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>5239D44A88374C249AE16059FCF80B9A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158DFBE2D135212BE05307991F0A6731</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>5239D44A88374C249AE16059FCF80B9A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:5239D44A88374C249AE16059FCF80B9A</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E077C0AEF2140E05307991F0A939A</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85150 - StreamView - PORTALCS - StreamClientNickname verification when value is NULL - 200 OK_MIGRATED" searchProperties="true" id="a653a194-e296-4284-b91e-fa9abe25ca79"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f2a91d4d-59ca-4757-af99-b8b1faf00591"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="324fa58f-3935-449d-a6c2-bee47f264379"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3b9c67e3-8d77-47e3-b935-0afe34671e2e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f2302d73-ec7e-4e8a-a7d4-76e9a46f900f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4fa536ca-ae07-41c9-ad8c-ee137f14561a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="27888a36-e1bf-467b-a74b-212d9bfaf51a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="86abd24a-c52a-4e66-a4c6-079f7a464da6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="876afb26-8b69-484a-9c86-103fd7904ee6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e5ca8a81-9a83-4fd3-8cb1-576013e6acac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3970432f-e43c-4889-9600-26fbf807af66" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_012848</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B9FDD1735A614E479BFD06D1DE0F59F2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D12E212BE05307991F0A6731</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKP24Ck7COypIUOg0LbQs0HZ2vqyMcwG3wQ6xQ6C/fuykpEBpl1kJCfnm+txzHz72pcDLwHHbQkAkKWeFzTJgwk2tTSOOmMuxoMJleAnClcQdtwd91ylaLt5tMQpet2n8a9kEavWqZULNsc1yzffNaWlaMaHqY3AqNR83LOUqRAweExIz2TQcy66YlvrVJ1bNrVTdklVslBq/jMITREJhK5ei2pWR2oimsZAydBFKkqSYlIo8miPHsmz0c9AfkwUssdG6zDJKA0Wtd39S9IFAEJAi4Ut0iQ58Ln3hjumcYRlH8B7L/yqWhawGUj6+oPMLI98LvsdmPF1eYcYZJTigb1jXZwBywf1CO5jziMrF8sskbEsDm7AhJrHL7MJAh9TOBDpgGAlsigW237FGMIMIGIHC48hrGhfndS3dOokwEzMeLcXh8s/4AFtDwEPwTbFL653a+YAnKtW6BOJ6jASxoGu418MaYgLivZtAzocqDCOY0U2fCjWgG6HZoX16R8usGl06ByH/T4P2mpOBPOEghtbw149H0lnF0Xp7jTie0B+4NrVuh/fPg2ZKYN85NeStzZZHQ5kPUbbjsTtl9l/z7nQBYj7Bw0ln1bsLkkZ55D31X5375Mqex+Gm7L35YigDltxOnl97pdFD3MbVRcJ6NzZb3HQf3kg4enh7nXjhxosWKxiEnbtOb3mDk7+fK4Onfzo/H6fPpMP7tdvFy2rMiT9L2vGUz7fPSQetez1Jy8PxNpzcVhBBAAK91gd2e+xt7+o29MtUJM08nT3+h7bdmR/H0xcgcrfUY+B1C9eqS1h+L2baQn1zlrq6oRYfIYFJo6V3ae1wYyV31HdVD7O1Xan3yp2eVaq3ryodu9ezKiWr0mjY11a7a/dKO5HJWBxRvOJsRnUsLbnZ2HxPkCxdAcyHyFzzWCmdML5B7GKJCx4bqUPAmYAJV/I8k47zJmozJsqRXeU0eKlubWnZZaNwz+UDe4jaMwnRgSbb1oEmj4DQkIIWbj3XQg22kKoWK7yOZWAX17jIIFbSHmmVdZ1yvYIEXYYBaKZoyf04gGK4CNPKIJH9OyYmIrVSQUIeSRykBwJ9md7xt10llI9PtYPQKXVAdRNO3DHOLp9PeVdP3kU7+HbsU32+VFllREnG5PDTx7ToMclH5SOxHfN8wx8CEHECAn3DDx2XJo/or+le/N1lrq4FJSStXX9X2C6uivF6HactLZdLKFLwSBcVWQ4aA4mV1G0n/BUYylHQWfdKTvwoeG4/pBjLBRtLLGGpRrCQLs94SIxB6IeEp87O5txXykFIVToJG3nKdhWoR5Bm/O07ibhE+ynzUP0lPPI/OnYCay+OylO9IyRlc73Sd8r2iwEhXMFSpYY82gc/BXAq+KExL3LORaqBmsYSvv5S0DLXNDAhPGbS6xqpYV96U55yG4L74fQJJlX3/LlH//u9Z9J0BAioR6KgKb6+tV19BNh8T77fgx4pePe603O6ttN1bKeTKngtU/BqrfRx0g7YtT6ZP1v26nQ8463f</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E4BE038AC5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE038AC5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D12D212BE05307991F0A6731</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D135212BE05307991F0A6731</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158DFBE2D12D212BE05307991F0A6731</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158E4E6238082310E05307991F0AD503</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158E4E6238082310E05307991F0AD503</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>B9FDD1735A614E479BFD06D1DE0F59F2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158DFBE2D135212BE05307991F0A6731</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>B9FDD1735A614E479BFD06D1DE0F59F2</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:B9FDD1735A614E479BFD06D1DE0F59F2</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85151 - StreamView - PORTALCS - StreamClientNickname verification when value is single character - 200 OK" searchProperties="true" id="d5dc79fc-2533-4b42-b2a5-8dd9d604104b"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3d16107e-5c8c-46a1-bc9e-76fb18af7a71"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8516cffa-9845-4959-a999-c0dbabb407e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="afdf63d3-4fa5-44b2-b3df-64cc9fc494ad" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3f6b6e61-a3dc-4422-a130-8f504aa0fa81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of Nicknames" id="aa1ba3ef-b0d0-4475-abf7-3c2bce08a03b"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">B&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">-&lt;/con:entry></row></con:configuration></con:dataSource><con:property>a</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer of NickName" id="c658737a-a3ef-466d-a242-810607dbba6a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>a</con:name><con:sourceType>a</con:sourceType><con:sourceStep>Grid of Nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9ea4e330-075e-4080-8cbf-bb358efdaf2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="0756f8c7-160f-47c6-baf3-12d0085d0f51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e8856872-b74a-4783-b96d-bff60c24d6cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="104a763d-7f90-48b2-bd90-ff7f842a5cd9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="69ecbe8f-074a-41b2-93f0-e44a81285d9f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="b5ab0053-b5fb-4382-bde0-1d05ac9ac461"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="70aab96a-6ebb-495f-a1bb-c583296606e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next Nickname" id="d29c58d1-04d6-4ead-b4fa-e2f588439e3f"><con:settings/><con:config><dataSourceStep>Grid of Nicknames</dataSourceStep><targetStep>Property Transfer of NickName</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_012848</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">-</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:9ED64C51CC44433D88E59AF1C8768525</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D12E212BE05307991F0A6731</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbbuo6EP0VlP14lCuBQlSQKJeWKm3ZhNLLS2WcIXg3OBA7BPr12w6QEkp7OEdCQp6MZ9bMLC/7kqF5aDktxiDmJKKl9TykzMmsDSWJqRMhRphD0RyYw7Hjte5cx9IMB+23KKV+p6G84bJRrprVsorqdk2162CqEyhXVHNSr8AE1SamhYUrYwn0KeOI8oZiGWZFNcSvNjIunErNMU3NNoxXpTSGmInYwkUzlB2oNWsoM84Xjq6naaqlZS2KA90yDFN/vnM9PIM5UpqX24qyRHFz5481HzCEIdZwNNcv9YLPpc8cjwQU8SSGXS7/u1yGbtR14eMzEvxS8r3g9+k0ypZtRCNKMArJB5L9uQM+i/xSKwyimPDZ/NsiTEMGVmGNVWza9JeiF6GdGaiAMGZIZTNk7mINYQoxUAylx2G/ofw6b2rZ1lGMKJtG8ZwVl/8ND9AVhNECfJXty9pBOz/giU41LwE7fYrDhJEV3EuyLhAGtpsm4PNDlQYxTMnaJUwQdM0kOv0Q3tFy240OCYDx/zOgg+Fsg4xRmEDzySXjZfXCM1Ftumy3un1S/0C1DWuNu40MwKFzZshHu10ekTIn0XbHdf2+513bm6fhc1C5WXwEtzp9eBmVk4lredXNuPzb5S+Mtwe2S5fTW4oN1E3b157J/3Gf36u36Y37hFD3Kg3W9tNs9uAtHia0dXPj1VfW5PERhstXffw4mkyM10F5OmZRMB4vulP0Muj+flqaGA3vzPsWrKfpJGVh76LrW3/siHjtbuX13b1Hhs0u2ix13at+Iy/nAH/Rtj/zXjL5A5jvl5IG/U6pJ6aE+M9iJi3EV6eZq7OQ4sM4UK405S6pHU4i5I74jpjhdm1Wap3eVcdud+tmuXVld41K2ajU62bPEKt2Zy8yWxRHENsRnRKZS0ruljY/A8RzhwH1IVZXUSKUjik/ROwgjkp9OhSHIKIMRpGQZzO88D9SEHQL5rMoZjQ1kMGteqqU7iP+QB/i1pRDXNBk0yho8hAwWRCQwi15zQSxGRe9WKJVwkNTWyGNQiKkPZYq61h2raIzMl+EIJHq88hPQtAWs0XWGZ1t/y0VYZZZO27LG7y1vbfsQOjflnf8bd8J4eMT6cBkSVcgpgkn7hhjX8+Xuqsn76J9+FbiE3m+RFt5TPAWSfHTJ1skTXKqfBa2R55vODYUguvHdeX5/BXBOe3zy1toulCB5n44S2RqSy1ZrZJsHrZd1mMRXpcd0Q1L9wAnQqc2o+gdqJ5H0c+6FHLgR8lzexFiwmfU44jDXPCnlC3PeAV4wOQroC+Ivz73iVFIKVrHYc1P2dqheMFIxD8+crCDpZ8wD8RfGsX+58ROxDrII+oUjwBOaCBX8kLYfEMPHImwREhZFB8GPxXgVPKiMW9yjoULQk0SDt9/KUmNaigI4yihvN9RMsOhbmY4+WYBzqfTlzCZNOdvNfLvjzWVZBTAIF54jGTx5ZXryCNAgwPt3SU9Lb+13k/yW0TX/GL+ajno0zHHm38B</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DFBD4CE913AB4E05305991F0AB4CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBD4CE913AB4E05305991F0AB4CD</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBD4CE8F3AB4E05305991F0AB4CD</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DFBE2D135212BE05307991F0A6731</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158DFBD4CE8F3AB4E05305991F0AB4CD</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158E673853DA380AE05305991F0A5EF9</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158E673853DA380AE05305991F0A5EF9</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>9ED64C51CC44433D88E59AF1C8768525</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158DFBE2D135212BE05307991F0A6731</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>9ED64C51CC44433D88E59AF1C8768525</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:9ED64C51CC44433D88E59AF1C8768525</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85152 - StreamView - PORTALCS - StreamClientNickname verification when value is max allowed - 200 OK" searchProperties="true" id="c5ed8728-e32c-469f-89cc-a6e90c839f3c"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="180b3e8a-93e9-4b5c-aeda-68c4a87c21d9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="93811019-d38b-4214-923d-16eb776e62c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="fe1fe13c-f543-4444-afc9-99fb5088488a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="87d447f7-89f0-48f9-b0b1-930f814417e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of 64 character nicknames" id="ca348cda-162d-493e-837b-96ec1099923d"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxx&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxxxx&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">123456789012345678901234567890123456789012345678901234567890yyyy&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a2b3c4d5eiiii&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiI&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Nickname" id="4967dadb-9b39-4502-94eb-c774d8c00606"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of 64 character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="47e21f84-cc24-4e03-b48f-151999da48d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="7b0ab904-b9ee-4709-8455-d527bf9929db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="cd586904-aeb6-4e40-a8a6-ea0f4eff3830"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e429a3ab-0dc4-47b4-bad7-98eca25a746c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="da667179-18d2-48de-b250-f3586df471a9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="89b2df01-9d07-4ddb-9756-94c64b37294d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="908b0529-c947-4ac4-af5d-3b29884fc07a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="09d005d1-8bf7-49cd-ab62-4133be37539a"><con:settings/><con:config><dataSourceStep>Data grid of 64 character nicknames</dataSourceStep><targetStep>Property Transfer Nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_012848</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiIiOBiIiIiIiI</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AA1BE27412184578BD99443F5778954C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE061D45B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E673946223810E05305991F0A355D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtU+o6EP4rTM/HO6UtFC0dYYY3vaigAno5fHFCukC0TUuSFvDXn6RIpQhe7p1xBrPd7D67++RJrjgK/JLb4ByYICEtrAOfcje11rSYUTdEnHCXogC4K7A7bPTu3VLRdNFui1botmvaq2d55RlCM90CB+n2tOLozvQC9Kn8DypTbzrDpnTlPIYu5QJRUdNKplXRTfnnjEzHNatu2SleVKsTrfACjMvY0qUod21BrXlNWwgRuYaxWq2Kq3IxZHOjZJqWMe7dD/ECAqTVr7YVpYlY/dMfFz3A4Pu4iMPAuDJyPlced4dkTpGIGXzm8k7lMg2zakgfj5P5Ly3bC16XzsJ02UI0pAQjn3wg1Z8eiEXoFRr+PGRELIKTRVimCqzDGuvYsukvzchDOzNQDiHjSOcLZH3GGsAMGFAMhedBt6b9Om9q6dYRQ5TPQhbw/PK/4QGagB9G4Ol8V9YntPMDHulU/Qqw26XYjzlJoK/IGiEM/HOagM8PVXhkMCPre8IlQddcoTP24R0st91okzlw8X8GtDecbZAX5MdQr47ag7/azVvnzSmTu0FX/PaCWbsbTMqNWgpg3zk1ZKPdLg9ImZFou+PhwuSk/4zWfw+HN5fXS9xJKtOyNR/HEZ08NqPJgM77Y+r9fghIa3NTfm6Mvea1naweZr3R/K0ddeYseY+Xo4pgk487G48X1XfCP5wnGJqbwLq9j/HTCMVe9N56CBqD1lNnwaO3jXXDWqhy+9LoG9TvbRyMJ/8Mmpf96TgcGBe3TlhqJ93xR+fjvbp4uvPtfg/XsnL28OdtuzM/jKdvgMVuqWjQbReu5ZSQ+FnMlIV4+ix1dSMlPlwAFVpd7VLa4cZS7ojnyhlu11bF6diti0apbduVZsnsmJWyWalWrWuzUalelncis0VxALEV0hlRuZTkbmnzM0AcuByoB0xPwlgqHdd+iNhGAhW6dCAPQUg5jEIpzwT5b/Z8bV3SJQNIvCWFANsB0wr9UDzQB9aYCWA5SbasnCQPAJOIgNJtRWsuec2FbMUSJbHwrWKCihRiqexMiaxbsp2KwUkQ+aCAGkHoxT4Uo0WUNsbg29+SjjBPre37xvDxtTV8Tc+DcbK6w2+7RkgfjygHrkpqghwmHLliSrt6vtV9cfQq2oVvxB5Rx0t2VTCCt0jyn77IoliSMeWrsB3ybMOhIRfcOKwry+clBGesz+5uKelSBOq74SyRVVwW4ySJ03nYdtlgMryhOmKYJWMIOJYytRmF70CNLIpx1p2QAT9IntnzEGOxoEOBBASSP4V0ecYjYAhcPQK6kvfrc18YuZSydQLW4pit5csHjEL84xsHu1j5SfOj/FmFzPua2JFYe3lknfINIAidq5W6DzYn6IFDGZZIJQvZfvBjAY4lzxuzJmdYhCTUNBZw+ktBSVRNQxiHMRXdtpYa9mUzxSk2EbhfTt/CpMqcPdXIv7/VdJJSAIN84HGSxlc3rquOAJ3vSe9n0hPqW/pJffPo6t/M3y17fTrkeP0P</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E4C6A2D445B20E05305991F0A5973</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4C6A2D445B20E05305991F0A5973</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4C6A2D425B20E05305991F0A5973</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4BE061DB5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E4C6A2D425B20E05305991F0A5973</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158E6936161A3822E05305991F0A2117</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158E6936161A3822E05305991F0A2117</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>AA1BE27412184578BD99443F5778954C</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E4BE061DB5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>AA1BE27412184578BD99443F5778954C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:AA1BE27412184578BD99443F5778954C</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E4BE038AD5B1EE05305991F0AD1E3</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85153 - StreamView - PORTALCS - StreamClientNickname verification when value contains special characters - 200 OK" searchProperties="true" id="14e5a630-107c-4ce3-9279-93028c65644b"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ef055f4d-b004-4697-a3df-06aaf7de6565"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d18ba708-3ae6-4529-a7da-1a6f5a84d3b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ea0be8ab-8679-44f1-ad72-a34ff80eaec0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="7fa5bd5e-269b-4c1e-8a60-21c50e195a37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of special character nicknames" id="32ae8b88-78a9-422f-bece-76ff4e2d16e6"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!---100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">abc-299!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1|2|3|3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1000-(aaa3)&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">34%a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1@@@@@@1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">400*&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">?&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">800#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">[34]&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Nickname" id="317c8364-7540-49c6-845c-0c062012b52c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of special character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a4ac6fb0-9923-474a-933b-1b951c30d465"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="fa734c2b-3fbb-4cd5-ad92-4dde91634fb3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e5022b73-ecc7-46e4-8e2f-2a0e571a307b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="4ae308ec-d110-487a-b8ee-558ca8de4994" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="fc7e02c3-b1e8-4d8b-aed4-6ad04cb12283" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="4d1e7f39-c7e2-40df-b34d-ddf5048804c2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="9259c42e-28db-4ddb-8812-a06c34e0a666"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="741e5f1a-7a58-49a1-9c79-ce771f3a0836"><con:settings/><con:config><dataSourceStep>Data grid of special character nicknames</dataSourceStep><targetStep>Property Transfer Nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_014016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">[34]</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A84BA87DAD494A3BAD2FED2204097D81</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4E11DDCF2308E05307991F0ABEA8</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4E5A17A8230CE05307991F0AB976</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbvU+I8EP5XmN7HG0hbqLYdYQZFPBBFhVc8v9zEdAu5a5PapPzwr7+kQKWIvrzvjCOT7Wb32d0nT3ImcBzZflsISCXlrLKMIyb83No0spT5HAsqfIZjEL4k/qh9M/Dtmunj7Raj0us0jV9W4LguOKdVbLuk2qhbTvUlPCFVsO0XE0zPDTxbuQqRQY8JiZlsGrapvEz1545N17ct3/Zqtus+G5VHSIWKrVxqprEBtRRNYyZl4iO0WCxqi3qNp1Nkm6aFnm4GIzKDGButs3VFeaK0tfEntQAIRBGpER6jM1TyOQuEP6JThmWWwiZX8FkuE5keUj6BoNNvRrEXgh4Leb68wIwzSnBE37Duzw3IGQ8q7WjKUypn8adFWKYOXIUlqRKrwb4ZqAztyEAlhKnAVTHD1ibWA4SQAiNQ+eeh1zS+HTe1fOs4xUyEPI1Fefnf8ACbQ8QTCKpiW9YG2vEBD3SqdQbE7zESZYLO4VaTNcEExGaaQI4PVblLIaTLARWKoEuh0aFdeHvLdTc6dApC/p8B7QxnHeQRRxm0yKR75zw5l91h9P2H3XmsP1wtML+JEFk0cwC7zrmhGO16uUfKgkTrHf1XtloFQ3vy8370A4Ung87k4mralayOTjw2eh73n/tInuCniS3J1SBx8eRxUn8Zov79cOF4OPSe+al8E7djch4s+t/73uQ6sa/v757CwMqer0V8dT5ZyP7b5Y386XWeut9Pb7Pzh6xr1YP4z6KxHOKe6N6r/2gcXy694TTlqUheh8mzZb6mwp5P5k/zwXX/dlPuHv6ybXvmR9nLbyByu9Q06HUqXTUlLL8WM22hQTXMXf1Ei4+QwKTR0ru0dviZkjsa+GqG67XluJcnp27H6zY6dddqX5pO3XQ8z+qa7a5pOluRWaPYg3jBWUh1Li25a9p8DZDEvgAWQFqd80wpnTC+iNjBEld67EEdAs4EjLmW5z+rlbcKnd+ecBb892kYUw7WdDUzKrdcDtkwbYcS0pImW1ZJkx+A0ISCFm7Na6GILaTqxSueZzKyanNcY5ApaU+1yvp2w3WQoHESgUaKYh5kEdSSWZJ3Bon1r13FROTWzqA9uvt1MfqVHwj0aXn737adUD4B1Q5Cl3QOappw4I6xtvV8qPvk4F20Dd/OAqrPl2qrTClZIyl/emeLpklBlffCtsiLDfuGUnC0X1eRL5hTUtC+uLyVpisVaG2H84qt2mstm8+zfB6NRh2lKjzSHUGmjUZAMqVTqzH/AwwVUdBRl0IBfC95YS9DzOSMjSSWECv+VPLlEa+AEQj9Cugp4i+PfWKUUqrWSVjKQ7aLSL1gNOIvHznEJ9pPme/Uz4KnwfvEDsTayaPqVI8ASdlUr/SFsPqEHoSrsFRJGU93gx8KcCh52Vg0ucAiFaFeMgmff6lojWoamBCeMdnrGLlhVzdznHKVgP/u9CFMLs3FW43++2OtSnMKEFAvPEHz+PrK9fURYNMd7d0k/UR+z7+S3zK61gfzR8tOn/Y53voL</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158E678D9F4D381AE05305991F0AF005</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E678D9F4D381AE05305991F0AF005</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E678D9F4B381AE05305991F0AF005</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158E4E11DDD62308E05307991F0ABEA8</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158E678D9F4B381AE05305991F0AF005</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158E4C6A36E75B20E05305991F0A5973</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158E4C6A36E75B20E05305991F0A5973</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A84BA87DAD494A3BAD2FED2204097D81</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158E4E11DDD62308E05307991F0ABEA8</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>A84BA87DAD494A3BAD2FED2204097D81</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:A84BA87DAD494A3BAD2FED2204097D81</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E673946223810E05305991F0A355D</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E673946223810E05305991F0A355D</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_85154 - StreamView - PORTALCS - StreamClientNickname verification of escaping of &amp;, &lt;, and > - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6954aee8-58ba-4460-8851-8fdb268341c2"><con:description>This test case verifies the proper XML escaping is performed on the STREAM_CLIENT_NICKNAME. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="01613a4b-6aca-4fd6-bb20-1d90759904e7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ecf7bc58-c2b2-4a35-9e38-45ba5f6edc03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="eddba8c2-5cf5-4991-866e-a4bf572efa05" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3a0fa2da-a249-4944-b5e7-23a7ab3a0ac2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of special character nicknames" id="196cfb12-fd40-4186-94a0-b5ce94eeb3d6"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">&amp;amp;testing&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">&amp;lt;time of day>&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Store newly selected nickname" id="db8a793b-d9df-4365-bb9c-e45caf04fc86"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of special character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Escape the special characters the nickname string" id="510bad24-6d5e-40bb-9e8b-1739a4a6b77b"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();

def datarowcntBefore = testCase.getPropertyValue( "nickname" );

testCase.setPropertyValue("nicknameBefore",datarowcntBefore);

//this.log.info "datarowcntBefore is " + datarowcntBefore;

datarowcntBefore = datarowcntBefore.replaceAll("&", "&amp;");
datarowcntBefore = datarowcntBefore.replaceAll("<", "&lt;");
datarowcntBefore = datarowcntBefore.replaceAll(">", "&gt;");
//datarowcntBefore = datarowcntBefore.replaceAll("'", "&apos;");
datarowcntBefore = datarowcntBefore.replaceAll("\"", "&quot;");
//this.log.info "datarowcntBefore is after" + datarowcntBefore;

testCase.setPropertyValue( "nickname", datarowcntBefore );

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="662772fa-fd26-46be-b0c9-73b0807e48aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Restore the Nickname for StreamView Body Validation" id="448a3503-5570-447e-852d-a37538888fbd"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();

testCase.setPropertyValue("nickname",testCase.getPropertyValue("nicknameBefore"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="9cc362ed-4916-47af-977c-0f33256ed451"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0606ac0a-f594-4d53-bda3-1079132ce970"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="78c0cd60-720a-4e3a-8f9f-88edfc63a5b4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dc120a79-0e20-4566-ad5f-c69d7787c860" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="06c3667e-ee15-4a84-90b5-edb48d1b1b7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLP" id="b0e11972-4aee-4e71-9459-33a5d9bcd7b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="8a91eda1-0411-47d5-8361-25acadf1fd8c"><con:settings/><con:config><dataSourceStep>Data grid of special character nicknames</dataSourceStep><targetStep>Store newly selected nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;time of day></con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EC0F3695381647ADB52376B61DE97AEE</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc9o6EP0rjPsxA37y8gRmCIQb2qRNMSlpv3SEvAYlRjKSDE5/fSUDDiYkl3tnmGG0Xp09+9CRLgVaxo7fEwK4JIxWsmVMhZ9bO0bKqc+QIMKnaAnCl9gPene3vlOzfLTfYlRGg47x23UajoOtqGrZ0Kh6ba9enbXsetWduZHVxghBY6ZchUhhRIVEVHYMx1IOlvq1Jlbbt9u+Z9daTeuXUfkBXChs5VKzjB2pTHSMhZSJb5qbzaa2cWuMz03Hsmzz8e42wAtYIqN7uc0oD8S7O39cCwFDHOMaZkvz0iz5XIbCD8icIply2MUK34tlmVbbVD6hIPNPRrEXwhGNWL7sI8oowSgmf5Cuzx3IBQsrvXjOOJGL5btJ2JYGrkKGq9j26CfDLFM7E6jEkAtUFQtk77DGEAEHiqHyMB51jE/ndS3fOuGIiojxpSgv/xsfoGuIWQJhVezT2lE7H/BEpbqXgP0RxXEqyBq+6mFNEAax6ybg86Eq9xwikt0SoQY0E5qdeUjvaLmtxoDMQcj/06CD5mxBfqA4he5TO7h33H7zid/agKdf11Hcn4gsaK1/dnICh865oWjtdnk0lMUQbXcsv9z1WD1qfH94aE2e4eHzLwtW9Z9eizWd65vmFbsaDDPUd7MghFSi2+fvo4eXm4dHZC4kvWg27x2UTm+QfOyF05touOFT0bgJGlfuGO7G0z9f/jzD1efhS3QdDNjsInEfe98aLzDj0x9eFhKeuL1kcbEaPV/0o7tV5H6eXKdTJQHiZvHPpm65Eyvzfj3xi4Y9xp0inQP+Zdv+zAfp7Amw3C/1GIwGlaHqEpIfi5m2kLAa5a5+osVHSKDS6OpdWjv8VMkdCX3Vw+3arreG3vXAux5eeZbjDq6tums12217aPWsRr29F5ktiyOKfUYjomNpyd2OzccE8dIXQEPg1TVLldIJ4wPEAZKoMqJjdQgYFTBhSp5tmWYrm9Xd9WyVNqWFExdn7oq0jMpXJr/Rb7wXSeAlTbadkiaPAZOEgBZuPddCDbaQqhYrtE5lbNfWqEYhVdLOtcr6jteqm4Iskxg0U3PJwjSGWrJI8sqYYvvvVBEWuXVw2wvuf/eD3/mBMN9N7/jbvhLKJyTaQeiUrkB1E07cMe4+nzd5N07eRXv4XhoSfb5UWSUneMuk/Ol1WvSYFKPymtieebHh2FACN4/zKuKFa4KLsS8ub6XpSgW6++askF1b1dL1Os374XmuyRW8qStiWo4ZAE6VTr1M2DNQs0Axz7oUCuJHwQt7mWIqFzSQSMJSzU8lX57xCghA6FfASA1+du4ToxRSlU5CJk/Z+rF6wWjGHz5ysI+1nzLfq78N4+Frx05gHcRReapHgCR0rlf6Qnh5ZzwwU7BESRnjh+CnAE4FLxuLIhdcpBqoWSrh/S8VrVEdA2HMUipHAyM3HOpmzlO+JOC/Or2ByaW5eKuRf3+sVUk+AhjUC0+QHF9fub4+AnR+oL27oO/Ir/OR/JbZdd+Y31oO6nQ8492/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F785ABC1D3BB7E05307991F0A9B55</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F785ABC1D3BB7E05307991F0A9B55</con:value></con:property><con:property><con:name>nicknameBefore</con:name><con:value>&lt;time of day></con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EC0F3695381647ADB52376B61DE97AEE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>EC0F3695381647ADB52376B61DE97AEE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:EC0F3695381647ADB52376B61DE97AEE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86010 - StreamView - PORTALCS - Stream view for account with single stream handle present - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eac00f08-0208-463a-ac4c-cb1ff86289bc"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="831ce575-70df-423b-b3ba-965ca6d2c0f7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="123dc299-e7a8-44d6-a4fd-b6d557c5ab93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5e359ccd-77b4-41b8-9fee-b5b592d3b286" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c9279311-b548-4aa0-965a-141504a7cc0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a3f422ae-dd9e-46dc-8626-e02dc12ece1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="a6b7cfa0-0f29-449e-8210-85dad342a6df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3af46d68-b8d5-498e-8761-120eada8d7e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d7ee2a77-332c-41a2-9ae3-8cb92885d0a3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="39996a94-d607-4aa8-a335-06974fd117c1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="a65280af-220a-47c2-bb2c-72a77b6892d4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_015148</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EE7A431343194732B4998AADF90CE1D1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP24Ck7CoyQqSFwo3WzfQEvbLyvjTMBtYofYAdpff+0AKVDa5a6EhDwZnznz8LHPBI4jx2sLAamknJWWccSEl1ubRpYyj2NBhcdwDMKTxBu0r688p2x5eLPFKPndpvEvtmpB0BiHpmsHDbNaI2C6lWrNxKHljsfEqYfkVLkKkYHPhMRMNg3HsmumpX6NoeV6Vs1z7LJ72ngxSo+QCoWtXMqWsSa1FE1jKmXiIbRYLMqLSpmnE+RYlo2erq8GZAoxNlpnq4zyQGlr7U/KARCIIlImPEZnaMfnLBDegE4YllkK61jBd7EsZLlI+QSCTk6MYi8EPgt5vuxgxhklOKIfWNfnGuSUB6V2NOEpldP42yRsSwObsCQmsavsxEC71I4E2mGYCmyKKbbXWH0IIQVGoPTQ95vGyXFdy7cOU8xEyNNY7C7/jA+wOUQ8gcAUm7TW1I4HPFCp1hkQz2ckygSdw40e1gQTEOtuAjkeqnSXQkiXV1SoAV0KzQ5t09tbrqrRpRMQ8v80aKs5K5BHHGXQuozbd2J5f3Hz/lafPjb8p+cKuroZvlex1cwJbDvnhqK1q+XeUBZDtNoxu3xtWFeLqX9J/SW6YK/JX8Hs5dWdo9M+ekSh81C7nQ4693Ignybcfw+fHVobLKUzunte/OO3h4msv0yz6+Ci8lD5aHT67Zs+faizkTV7EvTvbuV8LoLh7UT2GxejOf64ebwIaTp5lhRdgMsHoxG971VmkZ09dV/Dme1kD8OXZb/j80a0JG9Je3SXOfejcTI8bxbpbPHftW3O/CAbvwKRm6UeA79b6qkuYfmzmGkLDcwwd/USLT5CApNGS+/S2uFlSu5o4KkertZ2rdGzK7226/zqOV33/NyqVaxT17V7Vtuxup2NyKxY7FHscKbqEef6UFqNzc8ESewJYAGk5pxnSumE8QNiF0tc8llfHQLOBAy5kmdbLF5jZ1F/O61zHIgQGhPGxiqcUbrh8pbdpu1QQrqjybazo8l9IDShoIVbz7VQgy2kqsUMzzMZ2eU5LjPIlLSnWmU9p9qoIUHjJALNFMU8yCIoJ9MkrwwSq3/HxETkVipIwlOJo/xAoG/T2/+2qYTyCah2EDqlX6C6CQfuGHuTz5e86wfvog18OwuoPl+qrDKlZMVk99PntOgxKUblM7EN82LDHwIQcQAC/cAP7ZemiBjM6Vb8zWWurgUlJK1Nf2fYLs/K2Xye5S2tVisoVfBIFxVZDhoAyZTUvQ/5GzBUoKCj7pWC+F7wwr5LMZNTNpBYQqxGsJQvj3hIDEDoh4Svzs7y2FfKTkhVOglLecjWidQjSDP+8Z1EPKL9lPlO/S14Gnx27ADWVhyVp3pHSMomeqXvlPdvBoRwBUuVGvJ0G/wQwKHgu8aiyAUXqQZqnEn4/ktJy1zTwITwjEm/a+SGbenNecr3BLxPpy8wuboXzz363+89k+YjQEA9EgXN8fWt7ekjwCZb8r0Ouq/g1fNutds7rVtOpbut4Fa95hZF2WHX+mL+atmq0/6Mt34D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158EF3C32F1D0C55E05307991F0AF1DA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158EF3C32F1D0C55E05307991F0AF1DA</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EE7A431343194732B4998AADF90CE1D1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>EE7A431343194732B4998AADF90CE1D1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:EE7A431343194732B4998AADF90CE1D1</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158E4E5A17A8230CE05307991F0AB976</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158E4E5A17A8230CE05307991F0AB976</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86015 - StreamView - PORTALCS - Stream view for account with two streams present - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c7425f9d-9c5f-404f-b625-d3bf45f11eab"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1637526c-fa47-4b5c-b9fd-e93e3c2c59ea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="af3c5abf-3b64-4b87-9e30-6146818bb477"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ed93d0ce-879f-4602-a07e-67c3fe27b1d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="d4d8b506-a0c0-4f2d-8c5b-8948ba38679f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e0cb38cb-f0ec-4494-a669-b1f0420e49ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7f373ef2-548e-4b07-91af-f1755778467b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create another Stream if Required" id="ccaa7ce5-7a25-4a81-bc47-e5094a583eb2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Establish User Context");
} else {
	testCase.setPropertyValue("counter","1");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="93d0a03a-74a8-4e98-85d2-02d42f45c0fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d28ae405-7974-411a-9553-299f607eda5e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Execute StreamView on the Next Stream Handle" id="b5965075-5066-44ef-b02b-73fee7bf7db9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Call StreamView");
} 



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c18accba-9f20-43b0-9f6d-7d35dec5d47a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f01fd286-a3fc-43cf-8a71-9cd90fb11426" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1A764421EAE84733AAF73B43D60AF1B6</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13198C0666E3E05305991F0A5E71</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:1A764421EAE84733AAF73B43D60AF1B6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158F13198C0666E3E05305991F0A5E71</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKP24Ck5CeCQqSBToTjpAW2DoTL+sjOOAO4mdxk4I/fVrB0iB0i6zEhLyzfW55z587GsOo9Byu5zjRBBGK3kUUu4W1raWJtRlkBPuUhhh7grkTrujoWtVDRfut2gVr9/W/mk2/Rb2YaDbTaOl23XL0h2r1dCRjewABkbdr1vSlfMUe5QLSEVbswyzrhvy15oZjmvU3VqrarecZ60yxwmX2NKlamg7UjlvayshYheA9XpdXdeqLFkCyzBM8HM0nKIVjqDWud5mVARKOjt/VPUxwmGIqohF4Boc+Vz73J2SJYUiTfAulv9ZLAMYDpA+PifLK63ci32PBqxY9iBllCAYkjeo6jPCYsX8SjdcsoSIVfRpEqahgHWcIx2ZNr3SwDG1C4GOGCYc6nwFzR3WBAc4wRThyo+J19auLutasXWWQMoDlkT8ePlnfDDNcMhi7Ot8n9aO2uWAZyrVucbI9SgKU04yPFbDGkOE+a6bGF0OVXlIcEDyIeFyQHOu2IFDeifLbTX6ZIm5+D8NOmjOFmQOwxR37N4CbFgXPKfk17fB2luN7XzpPE26N3a7IHDoXBjK1m6XJ0NZDtF2x5oOR6PeQ3Tz+KP3EqYDpzVM3ywyv+v1n+PpCxzez51HmC9D8iLuGuL1e245MDYX8eY+G2Y3aNbN6Ir0Z89zLwsfDDKe3jYffD+332JiNAfgGxyzJzOJIg89p8P0EcHJ3Zz83JhLGi5mqcBw8DRx1pNwnPl2j0yaPOe58VdLePPlZExfvSdk/27c//1rxNplOgf8j237Mz9NFy8Yif1SjYHXr9zKLkHxtZgpC/H1oHB1YyU+XGAqtI7apbTDTaXcEd+VPdyuzXrr1qyZTqvR6DYag9rAqNeMuuOYt0a3Pmiae5HZsjih2GM0ICqWktzt2HxNEEUux9THiZ6xVCod175A7EMBKx6dyEPAKMczJuXZjEMrsBBjdSegpk/sBVzESRoFuVYZM3FP75NuIHByJMqmdSTKE4xITLBSbjXYXE42F7IYrzBLRWhWM1ilOJXaniiZdS27VQecRHGIFVUQMT8NcTVexUVpAN/+WzpEvLASjmKWCBgWJwJ8mt/pt30ppI9PlANXKd1g2U585pKx9vl8yLtx9jLaw3dTn6gDJusqEoK2TI4/vY+LmpNyVt4T2zMvN/whAOJnIMAX/MBpacqIfkYO4u9vc3kvSCXp7Pv7Cs3qazXNsrRoqW3XQCLhgSoqMCwwxSiVWreZsd+YghIFXHSxlMRPgpf2Y4qpWNGpgAJHcgQrxfKCl8QUc/WS8OThyS99phyFlKUTOBfnbL1QvoIU4y8fSshFyk+aH+TfmiX+e8fOYB3EkXnKh4QgdKlW6lLZfDIg8mAnPpFyyJJD8HMA54IfG8sil1yEHKiFlO3Pv1SUzrU1iBBLqfD6WmE41N6Cp9jE2H13+gBTyHv53iP//eDTSTECCMtXIicFvrq2XXUE6PJAv3dBTyXcHvTt/m2zYVi1fiHhza2EG426UxbliF3ng/mj5aBOpzPe+Rc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>2</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023740</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F1319866A66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F1319866A66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:158F13198C0666E3E05305991F0A5E71</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>C4F453D443BD456F8FD754A71AD52F38</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:C4F453D443BD456F8FD754A71AD52F38</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_2</con:name><con:value>1A764421EAE84733AAF73B43D60AF1B6</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:1A764421EAE84733AAF73B43D60AF1B6</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>nickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>158F13198C0666E3E05305991F0A5E71</con:value></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value>urn:dece:rightstokenid:org:dece:158F13198C0666E3E05305991F0A5E71</con:value></con:property><con:property><con:name>rightstokenid_2</con:name><con:value>158F13198C0666E3E05305991F0A5E71</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86016 - StreamView - PORTALCS - Stream view for account with three streams present - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b88821e1-fdf4-4e67-8bcd-50a15e55102f"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9f55508d-7baf-4041-b712-a58041db1c09"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="19290f2c-1849-474e-8e3e-fa79afebca3e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b4280aec-54a1-4316-ba45-3de5fa293616"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="59d2f1e2-4e6b-43d6-8428-7d0cb443fcc1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b9a572b3-69d9-4353-952d-7f71b022a0c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="527c84c8-bce8-4b22-b991-1e52f93ac53f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create another Stream if Required" id="9cd7192a-0125-43da-b722-8758635b76b6"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Establish User Context");
} else {
	testCase.setPropertyValue("counter","1");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="d145200c-0b5f-485b-93c7-53655a39cefb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="75d78099-32aa-4349-b146-0f61cf280a86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Execute StreamView on the Next Stream Handle" id="080c57d2-f4b7-4843-a2e9-5d598b8b712f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Call StreamView");
} 



</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5679d4c8-b882-4b2e-bc81-015d20aaa80b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e8304240-c6a0-4d03-aca2-e03a9a133633" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxBU5CAiQqSLShU2baaXlMmZ0vK9e5gCGxQ+zw6K9fO0AKlHaZlZCQb67PPffhY18JHEe23xYCUkk5K63jiAk/tzaNLGU+x4IKn+EYhC+JP2g/3Pt2xfTxfotR6gZN459awwKrAaTsgDUuO6ZXK2MrhHIVg1e1Xpy651WVqxAZdJmQmMmmYZuWWzbVrzE0Pd90fdepNMzab6P0DKlQ2MqlYho7UmvRNKZSJj5Cq9WqsqpWeDpBtmla6NfD/YBMIcZG62qbUR4obe38SSUEAlFEKoTH6Aod+VyFwh/QCcMyS2EXK/wololMDymfUNDJF6PYC2GXjXm+vMGMM0pwRF+xrs8DyCkPS+1owlMqp/GHSVimBi7DmpSJ5bAvBjqmdiHQEcNU4LKYYmuH1YcxpMAIlH72u03jy2Vdy7cOU8zEmKexOF7+GR9gS4h4AmFZ7NPaUbsc8EylWldA/C4jUSboEn7oYU0wAbHrJpDLoUpPKYzp+p4KNaBrodmhQ3ony201AjoBIf9Pgw6aswV5xlEGrcW8N/o1j77HnVsrHo7Y5i67W79yK+akmRM4dM4NRWu3y5OhLIZou+O2OurNNjZ6eOn1loMg/JqMvjvu8Kb/V9BpDF5nC8mevrlD7n67h74n2ow9Pv2sjlDjQT481mn7ae3Wx+2kXq1mNx1Rg/BX9nvJFtfzoH+/WI3Mx27v+mlVS5/t8awbIFm9Y3fVduz05td80Y1mq1FEYDV9xbNQBHgi+p1n4MiM/x6nCyxuGl9nndc7gqKfPadZpHPA/9i2P/OD7GUGRO6Xegy6QelWdQnLz8VMW2hYHueufqLFR0hg0mjpXVo7/EzJHQ191cPt2nIbt2bNDcya5zmWXe+YbtV0Pc+6NdueXXf3IrNlcULxhrMx1bG05G7H5nOCJPYFsBDS8pJnSumE8QligCUudVlfHQLOBAy5kmdrAvNNZjsbTF5eX2xnFo7nMy9hSpN/cPnIHtP2WEJ6pMmWfaTJfSA0oaCFW8+1UIMtpKrFAi8zGVmVJa4wyJS0p1plfdtpuEjQOIlAM0UxD7MIKsk0ySuDxPbfLmMicisVJOGpxFF+INCH6Z1+21dC+YRUOwid0jWobsKZO8bZ5/Mu79rZu2gP385Cqs+XKqtMKdkyOf70Ni16TIpReUtsz7zY8IcARJyBQJ/wQ6elKSKGS3oQf3+Zq2tBCUlr398FtiqLSrZcZnlLHaeKUgWPdFGRaaMBkExJ3WbI58BQgYIuulcK4ifBC/sxxUxO2UBiCbEawVK+vOAhMQChHxJddXbWl75SjkKq0klYy3O2m0g9gjTjT99JxCfaT5mf1N+Kp+Fbx85gHcRReap3hKRsolf6Ttl8MCCEK1iq1JCnh+DnAM4FPzYWRS64SDVQL5mEj7+UtMw1DUwIz5jsBkZuOJTenKfcJOC/Ob2DydW9eO7R/37vlWk+AgTUI1HQHF/f2r4+AmxyIN+7oKcK7nQCJ7it10y7GuQKXt8quFJ2ryjKEbvWO/N7y0GdTme89S8=</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F065D06994127E05305991F0A9275</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F065D06994127E05305991F0A9275</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>3</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nicknamebase</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightstokenFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenidFULL_2</con:name><con:value>urn:dece:rightstokenid:org:dece:158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenidFULL_3</con:name><con:value>urn:dece:rightstokenid:org:dece:158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenid_2</con:name><con:value>158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>rightstokenid_3</con:name><con:value>158F0B88E33148FCE05305991F0A4C31</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EF735512B43A4097965D98E6DFB344F1</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:EF735512B43A4097965D98E6DFB344F1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:88AAC4C2667B432297E1EB009943775E</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:0F90BFA0AA254B2292014791771E1F4F</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value>urn:dece:streamhandleid:org:dece:EF735512B43A4097965D98E6DFB344F1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>88AAC4C2667B432297E1EB009943775E</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>0F90BFA0AA254B2292014791771E1F4F</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>EF735512B43A4097965D98E6DFB344F1</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>3</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023742</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F065D069A4127E05305991F0A9275</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F065D069A4127E05305991F0A9275</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectDBCreateUser_3</con:name><con:value>158F065D069A4127E05305991F0A9275</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86100 - StreamView - PORTALCS - API invocation following StreamRenew - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7117580a-b08e-464a-9411-101eb96dff2a" disabled="true"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0170d12f-2272-47b7-80f0-205530e16bde"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="18f30abb-7713-4a57-a405-e712f5c893e6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="fe5f28f2-e93b-46aa-b9ba-0f032d6589ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="b394a451-315c-4c24-9ee0-2e456b937430"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="70ea3dad-def0-4c5a-99f8-f94b31a90dd0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="dc4cacd7-4f35-4bae-9762-76f0d92d13ea"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="1f64646d-e28c-4c03-b52f-1bc8e7ef7be6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="1e0dd5e1-44d1-42bb-ac17-7a44656dcb29"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="2546a6c2-704d-45a9-9fad-1b2656d36608"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b162dbf8-cdf7-4466-97c4-6c4c533b2f56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="00f89559-86e1-48c6-b72a-d23ce8cfb468"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="896b987f-c11d-431e-82aa-beb7aed3581e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="059af383-d22b-4474-894e-87012599221a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c7b643e6-9752-4262-a17a-61a92e357fa7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3027f941-16e1-476c-96b0-bbabc01d382b" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A5499C6573300CE05307991F0A5E38</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtc6I6FP4rDvuxg4D4BlOdQa2uXW27Yrvd/bKThoNmFxJLAtr++pugUrG213s/MTmcPOc5L3mSS47iqOZ6nEMiCKOVTRxR7ubWjpYm1GWIE+5SFAN3BXZ9bzpxa1XTRfstWmU86Gi/HbNlWg0r1AE1Wnq98WTp7cB29KcGDp0mNG0H29KV8xTGlAtERUeryR26aeuWM7ds1267dbvatJu/tMoDJFxiS5eqqe1IbXhHWwqxcg1jvV5X13aVJQujZpqW8Tid+HgJMdK6l9uM8kBJd+ePqwFgiCJcxSw2Lo2Sz2XAXZ8sKBJpArtYwUexTMN0DOkTcLL4ohV7IRjTkOXLPqKMEowi8opUfaYgliyoeNGCJUQs4w+TsEwFrMMG69iq0y+aUaZ2JlCJYcKRzpfI2mHNIIQEKIbK/Wzc0b6c17V86zxBlIcsiXl5+d/4AM0gYisIdL5Pa0ftfMATlepeAnbHFEcpJxncqGFdIQx8103A50NV7hIIyWZCuBzQDVfsjEN6R8ttNQZkAVz8nwYdNGcL8oCiFLqrX/EipJtvkPZfHtdfb4zJ7WZybZgXN14nJ3DonBuK1m6XR0NZDNF2x8PowRnMftXJ8LHZf5omz62J+VOg0avfH77ESxFNHeM+zjKPB4MJ8ZcjWF3F9mjaF8kVvZ3Omo3M/PGNwB9y//o6+9EejuYte0oaV42L1V3Lt9ejOXP8h4tru/0zgo35k9GLbNa7/jof9r/3wu/Wt/mdc/34eHvRi0chZ01n1hhPnl8R670gn7ZHIend14O7YdTuFOkc8C/b9mfeT5/+ABb7pRqD8aAylF1C4nMxUxYS6GHu6q6U+HABVGhdtUtph5tKuSOBK3u4XVuW16h7XtvutT3btPtXZsM2W45jDU2vPez19iKzZXFEsc9oSFQsJbnbsfmcII5dDjSARM9YKpWOa58gDpBAlTGdyUPAKIc5k/IcW61W0Go3/ibRwsJm21wm9WwTNNda5YaJW3qbeKGApKzJzZImzwCTFQEl3GquuRxsLmQtnlGWisiqZqhKIZXSniiVdWv1dsPgJF5FoJgaMQvSCKqr5SqvjMG335qOMM+tg4nn3/3u+7/zA2F8mN7xv30lpE9AlANXKfVAdhNO3DH2Pp93eTdP3kV7eC8NiDpfsqwiIXjLpPzrbVrUmBSj8pbYnnmx4dhQAjeO8yriBRnBxdgXl7fUdKkC3X1znlH1uZpmWZq3o6XULpHwhqqIYdYMH3Aqdeplzv4CNQoU46xLoSB+FLywlymmYkl9gQTEcn4q+fKMV4APXL0CxnLwN+c+MUohZekEbMQpWz+SLxjF+NNHDnax8pPmO/lZsyR469gJrIM4Mk/5CBCELtRKXQgvH4wHZhKWSCljySH4KYBTwcvGosgFFyEH6ikV8PGfitKojoYwZikV44GWGw51M+cpXlbgvjm9g8mluXirkX9/rOkkHwEM8oXHSY6vrlxXHQG6ONDeXdBT8us1azUpv1eH8luzrH5RlBK77jvze8tBnY5nvPsP</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A54AA8A622303EE05307991F0A211C</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A54AA8A622303EE05307991F0A211C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A54AA83B8A303CE05307991F0A8FBB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A54AA83B8A303CE05307991F0A8FBB</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A5499C657A300CE05307991F0A5E38</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A5601640286A10E05307991F0AC81D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:11A5601640286A10E05307991F0AC81D</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:11A5601640286A10E05307991F0AC81D</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>11A5601640286A10E05307991F0AC81D</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07C623BFC23F4658A940BA326B7A87C1</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:07C623BFC23F4658A940BA326B7A87C1</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:07C623BFC23F4658A940BA326B7A87C1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>07C623BFC23F4658A940BA326B7A87C1</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_070925</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A54A272CB805BBE05305991F0AFCEE</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11A5499C657A300CE05307991F0A5E38</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>11A54A272CB805BBE05305991F0AFCEE</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>11A54A272CB805BBE05305991F0AFCEE</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86101 - StreamView - PORTALCS - API invocation following two StreamRenews - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e8ab140c-7a1a-4a83-8a0a-b3cbebb41ae0" disabled="true"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e2d71cd3-6e41-43c6-b47d-457ca14dfe79"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="0da0de4d-fb77-42c7-97db-299aa179cf18"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="49e45c4a-7742-40d4-8950-ee28d6eb6b43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="58a9cede-a4f8-4202-9858-fa0c170a7f91"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="978cb76e-1e42-4be5-ae18-96d44d57e07d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="74a38129-cf14-4d4c-9567-8f94077cbd02"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c6291202-9958-4f2a-abda-f2a48e5d027b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="c1b91eda-e2f8-47ea-9588-e18278f18d54"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="7fd6df7e-1dc7-4ed7-8074-f52130dca617"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="cbff3bdd-d55b-49fb-90e9-ed1cd9155809"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="770056c2-7cf7-4faa-8112-f369a1341423"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal again" id="ea095916-7f39-4fe8-9ab8-7c7f20256335"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+10800000);
	}
else
	{
d=new Date(new Date().getTime()+54000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew II" id="a863dd2b-331a-4265-8440-e5bb86b1cd61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBUpdatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy_" + count, tC.getPropertyValue("expectDBUpdatedBy"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="0930cc22-6222-4649-b840-4d7166ceeb7f"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="b1f7dd5a-6bba-4582-8135-bf1ae353d7bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9e98d3b4-0eb6-432f-808e-f3985a7b4f9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_" + count));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_" + count));
tC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL_" + count));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_" + count));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_" + count));
tC.setPropertyValue("nickname",tC.getPropertyValue("nickname_" + count));
tC.setPropertyValue("transactionid",tC.getPropertyValue("transactionid_" + count));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d9b3c771-5f27-4404-8137-19609c6a865d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="452e2439-bc21-485c-86d5-b97874b81984" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D19682B2A60D3E0401F0A0799497A</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>FC6D19682B2A60D3E0401F0A0799497A</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D1940B7B0712BE0401F0A059949B0</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D1940B7B0712BE0401F0A059949B0</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ea095916-7f39-4fe8-9ab8-7c7f20256335</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86104 - StreamView - PORTALCS - StreamOwnerMismatch - API invocation following StreamDelete by DLPCS - 403 Forbidden" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d766cf5c-6298-44c7-be67-3474bf41e3c9"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c74187e0-d304-472f-a6a2-13092ed270c0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="e08cfffa-7e1f-4d80-ad13-b5e70f334314"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2a08562e-2cad-40bd-a980-f29130ea8841"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="6c2b6479-13b4-458f-9c70-640d910de20a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="09aad5c8-cf19-4b21-95a8-ddeabdd6a64f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="088bd1fe-8978-4156-aa24-36d34eeb2166"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus", tC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("streamhandle_" + count, tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + count, tC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectDBCreatedBy_" + count, tC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBStatus_" + count, tC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("nickname_" + count, tC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid_" + count, tC.getPropertyValue("transactionid"));
tC.setPropertyValue("rightstokenidFULL_" + count, tC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid_" + count, tC.getPropertyValue("rightstokenid"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="e96a480f-7f74-4b9f-b77c-ec837d4b4873" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="8d5ff47d-67e9-4e71-9942-d2761cd8322b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="daf7e99d-04c8-42e3-b1fb-972e1b3fea66"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9d716b27-170a-47cd-a03e-860b17b3108a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9a0d580a-e9e3-4681-85d9-1f7d367d97f8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c + 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8b855fa8-1e38-447a-b724-40d7a16cdf4e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AC237299A3A7482194D27D8813458C49</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F065D18E04127E05305991F0A9275</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AC237299A3A7482194D27D8813458C49</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158F065D18E04127E05305991F0A9275</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP24Ck7CoyQqSFwo3WzfQEvbLyvjTMBtYofYAdpff+0AKVDa5a6EhDwZnznz8LHPBI4jx2sLAamknJWWccSEl1ubRpYyj2NBhcdwDMKTxBu0r688p2x5eLPFKPndpvEvtmpB0BiHpmsHDbNaI2C6lWrNxKHljsfEqYfkVLkKkYHPhMRMNg3HsmumpX6NoeV6Vs1z7LJ72ngxSo+QCoWtXMqWsSa1FE1jKmXiIbRYLMqLSpmnE+RYlo2erq8GZAoxNlpnq4zyQGlr7U/KARCIIlImPEZnaMfnLBDegE4YllkK61jBd7EsZLlI+QSCTk6MYi8EPgt5vuxgxhklOKIfWNfnGuSUB6V2NOEpldP42yRsSwObsCQmsavsxEC71I4E2mGYCmyKKbbXWH0IIQVGoPTQ95vGyXFdy7cOU8xEyNNY7C7/jA+wOUQ8gcAUm7TW1I4HPFCp1hkQz2ckygSdw40e1gQTEOtuAjkeqnSXQkiXV1SoAV0KzQ5t09tbrqrRpRMQ8v80aKs5K5BHHGXQuozbd2J5f3Hz/lafPjb8p+cKuroZvlex1cwJbDvnhqK1q+XeUBZDtNoxu3xtWFeLqX9J/SW6YK/JX8Hs5dWdo9M+ekSh81C7nQ4693Ignybcfw+fHVobLKUzunte/OO3h4msv0yz6+Ci8lD5aHT67Zs+faizkTV7EvTvbuV8LoLh7UT2GxejOf64ebwIaTp5lhRdgMsHoxG971VmkZ09dV/Dme1kD8OXZb/j80a0JG9Je3SXOfejcTI8bxbpbPHftW3O/CAbvwKRm6UeA79b6qkuYfmzmGkLDcwwd/USLT5CApNGS+/S2uFlSu5o4KkertZ2rdGzK7226/zqOV33/NyqVaxT17V7Vtuxup2NyKxY7FHscKbqEef6UFqNzc8ESewJYAGk5pxnSumE8QNiF0tc8llfHQLOBAy5kmdbLF5jZ1F/O61zHIgQGhPGxiqcUbrh8pbdpu1QQrqjybazo8l9IDShoIVbz7VQgy2kqsUMzzMZ2eU5LjPIlLSnWmU9p9qoIUHjJALNFMU8yCIoJ9MkrwwSq3/HxETkVipIwlOJo/xAoG/T2/+2qYTyCah2EDqlX6C6CQfuGHuTz5e86wfvog18OwuoPl+qrDKlZMVk99PntOgxKUblM7EN82LDHwIQcQAC/cAP7ZemiBjM6Vb8zWWurgUlJK1Nf2fYLs/K2Xye5S2tVisoVfBIFxVZDhoAyZTUvQ/5GzBUoKCj7pWC+F7wwr5LMZNTNpBYQqxGsJQvj3hIDEDoh4Svzs7y2FfKTkhVOglLecjWidQjSDP+8Z1EPKL9lPlO/S14Gnx27ADWVhyVp3pHSMomeqXvlPdvBoRwBUuVGvJ0G/wQwKHgu8aiyAUXqQZqnEn4/ktJy1zTwITwjEm/a+SGbenNecr3BLxPpy8wuboXzz363+89k+YjQEA9EgXN8fWt7ekjwCZb8r0Ouq/g1fNutds7rVtOpbut4Fa95hZF2WHX+mL+atmq0/6Mt34D</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023739</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>AC237299A3A7482194D27D8813458C49</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:AC237299A3A7482194D27D8813458C49</con:value></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:158F065D18E04127E05305991F0A9275</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>158F065D18E04127E05305991F0A9275</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86200 - StreamView - PORTALCS - Full user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="136b6db3-8bfd-4117-b45c-b27afe8ab833"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7fb67252-c796-4d7a-a50d-ed91484a4653"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a87277d3-8445-4542-a2bc-978f8a32481a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="fe69b2b9-136f-41ad-9ddc-9be834beba22" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="01d34d70-02e5-490f-83df-c626c7284751"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e5369205-52ad-4e36-a256-b55afa14420c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="de398fd1-d5e6-4da2-b52c-28bca87e55f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="8811f47c-0a13-4b50-af95-f153ef650a3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="009b24b0-8669-482c-b926-1eae95d4a433" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5b944b69-118e-430f-ad68-86303ac0dfa3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="da3a9229-df67-4851-8941-e0b19e97f913" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023739</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:80AE10837C32452AB469F6687D2FFFFF</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP24Ck7CoyQqSFwo3WzfQEvbLyvjTMBtYofYAdpff+0AKVDa5a6EhDwZnznz8LHPBI4jx2sLAamknJWWccSEl1ubRpYyj2NBhcdwDMKTxBu0r688p2x5eLPFKPndpvEvtmpB0BiHpmsHDbNaI2C6lWrNxKHljsfEqYfkVLkKkYHPhMRMNg3HsmumpX6NoeV6Vs1z7LJ72ngxSo+QCoWtXMqWsSa1FE1jKmXiIbRYLMqLSpmnE+RYlo2erq8GZAoxNlpnq4zyQGlr7U/KARCIIlImPEZnaMfnLBDegE4YllkK61jBd7EsZLlI+QSCTk6MYi8EPgt5vuxgxhklOKIfWNfnGuSUB6V2NOEpldP42yRsSwObsCQmsavsxEC71I4E2mGYCmyKKbbXWH0IIQVGoPTQ95vGyXFdy7cOU8xEyNNY7C7/jA+wOUQ8gcAUm7TW1I4HPFCp1hkQz2ckygSdw40e1gQTEOtuAjkeqnSXQkiXV1SoAV0KzQ5t09tbrqrRpRMQ8v80aKs5K5BHHGXQuozbd2J5f3Hz/lafPjb8p+cKuroZvlex1cwJbDvnhqK1q+XeUBZDtNoxu3xtWFeLqX9J/SW6YK/JX8Hs5dWdo9M+ekSh81C7nQ4693Ignybcfw+fHVobLKUzunte/OO3h4msv0yz6+Ci8lD5aHT67Zs+faizkTV7EvTvbuV8LoLh7UT2GxejOf64ebwIaTp5lhRdgMsHoxG971VmkZ09dV/Dme1kD8OXZb/j80a0JG9Je3SXOfejcTI8bxbpbPHftW3O/CAbvwKRm6UeA79b6qkuYfmzmGkLDcwwd/USLT5CApNGS+/S2uFlSu5o4KkertZ2rdGzK7226/zqOV33/NyqVaxT17V7Vtuxup2NyKxY7FHscKbqEef6UFqNzc8ESewJYAGk5pxnSumE8QNiF0tc8llfHQLOBAy5kmdbLF5jZ1F/O61zHIgQGhPGxiqcUbrh8pbdpu1QQrqjybazo8l9IDShoIVbz7VQgy2kqsUMzzMZ2eU5LjPIlLSnWmU9p9qoIUHjJALNFMU8yCIoJ9MkrwwSq3/HxETkVipIwlOJo/xAoG/T2/+2qYTyCah2EDqlX6C6CQfuGHuTz5e86wfvog18OwuoPl+qrDKlZMVk99PntOgxKUblM7EN82LDHwIQcQAC/cAP7ZemiBjM6Vb8zWWurgUlJK1Nf2fYLs/K2Xye5S2tVisoVfBIFxVZDhoAyZTUvQ/5GzBUoKCj7pWC+F7wwr5LMZNTNpBYQqxGsJQvj3hIDEDoh4Svzs7y2FfKTkhVOglLecjWidQjSDP+8Z1EPKL9lPlO/S14Gnx27ADWVhyVp3pHSMomeqXvlPdvBoRwBUuVGvJ0G/wQwKHgu8aiyAUXqQZqnEn4/ktJy1zTwITwjEm/a+SGbenNecr3BLxPpy8wuboXzz363+89k+YjQEA9EgXN8fWt7ekjwCZb8r0Ouq/g1fNutds7rVtOpbut4Fa95hZF2WHX+mL+atmq0/6Mt34D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F13FA9D772D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F13FA9D772D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>80AE10837C32452AB469F6687D2FFFFF</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>80AE10837C32452AB469F6687D2FFFFF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:80AE10837C32452AB469F6687D2FFFFF</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86201 - StreamView - PORTALCS - Standard user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bced957f-ed31-4401-898a-ae1f9b15aed3"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="96d65fd2-333e-411d-b18d-662fe9a49d4e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="47dfe597-3807-4e3c-a8d0-d73bcfba8e14"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="dfbafed5-13b9-4ba1-a972-d73aea6a6409" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="aecc66a7-0ac2-4f09-a902-25fde9031abd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="90f0bde4-5223-46f2-b2c8-f4cf468611b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Security Context as Standard User" id="97f9460e-3605-4e38-a59a-937967f0ee78"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="6cea2d89-078b-4a41-921e-4d63303565cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e6f418cb-9ff1-4eb8-a56f-a218ae027352"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6e2a07d5-98ad-462b-ac31-604439fe4c60" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="fb706d5c-2e0c-4f01-8190-31ea075ae8b8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c968eac0-0ee4-47bf-88c7-a24517ed03b4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023740</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8953CC24540349D984061BDF5A8F5CB5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKP24Ck5CeCQqSBToTjpAW2DoTL+sjOOAO4mdxk4I/fVrB0iB0i6zEhLyzfW55z587GsOo9Byu5zjRBBGK3kUUu4W1raWJtRlkBPuUhhh7grkTrujoWtVDRfut2gVr9/W/mk2/Rb2YaDbTaOl23XL0h2r1dCRjewABkbdr1vSlfMUe5QLSEVbswyzrhvy15oZjmvU3VqrarecZ60yxwmX2NKlamg7UjlvayshYheA9XpdXdeqLFkCyzBM8HM0nKIVjqDWud5mVARKOjt/VPUxwmGIqohF4Boc+Vz73J2SJYUiTfAulv9ZLAMYDpA+PifLK63ci32PBqxY9iBllCAYkjeo6jPCYsX8SjdcsoSIVfRpEqahgHWcIx2ZNr3SwDG1C4GOGCYc6nwFzR3WBAc4wRThyo+J19auLutasXWWQMoDlkT8ePlnfDDNcMhi7Ot8n9aO2uWAZyrVucbI9SgKU04yPFbDGkOE+a6bGF0OVXlIcEDyIeFyQHOu2IFDeifLbTX6ZIm5+D8NOmjOFmQOwxR37N4CbFgXPKfk17fB2luN7XzpPE26N3a7IHDoXBjK1m6XJ0NZDtF2x5oOR6PeQ3Tz+KP3EqYDpzVM3ywyv+v1n+PpCxzez51HmC9D8iLuGuL1e245MDYX8eY+G2Y3aNbN6Ir0Z89zLwsfDDKe3jYffD+332JiNAfgGxyzJzOJIg89p8P0EcHJ3Zz83JhLGi5mqcBw8DRx1pNwnPl2j0yaPOe58VdLePPlZExfvSdk/27c//1rxNplOgf8j237Mz9NFy8Yif1SjYHXr9zKLkHxtZgpC/H1oHB1YyU+XGAqtI7apbTDTaXcEd+VPdyuzXrr1qyZTqvR6DYag9rAqNeMuuOYt0a3Pmiae5HZsjih2GM0ICqWktzt2HxNEEUux9THiZ6xVCod175A7EMBKx6dyEPAKMczJuXZjEMrsBBjdSegpk/sBVzESRoFuVYZM3FP75NuIHByJMqmdSTKE4xITLBSbjXYXE42F7IYrzBLRWhWM1ilOJXaniiZdS27VQecRHGIFVUQMT8NcTVexUVpAN/+WzpEvLASjmKWCBgWJwJ8mt/pt30ppI9PlANXKd1g2U585pKx9vl8yLtx9jLaw3dTn6gDJusqEoK2TI4/vY+LmpNyVt4T2zMvN/whAOJnIMAX/MBpacqIfkYO4u9vc3kvSCXp7Pv7Cs3qazXNsrRoqW3XQCLhgSoqMCwwxSiVWreZsd+YghIFXHSxlMRPgpf2Y4qpWNGpgAJHcgQrxfKCl8QUc/WS8OThyS99phyFlKUTOBfnbL1QvoIU4y8fSshFyk+aH+TfmiX+e8fOYB3EkXnKh4QgdKlW6lLZfDIg8mAnPpFyyJJD8HMA54IfG8sil1yEHKiFlO3Pv1SUzrU1iBBLqfD6WmE41N6Cp9jE2H13+gBTyHv53iP//eDTSTECCMtXIicFvrq2XXUE6PJAv3dBTyXcHvTt/m2zYVi1fiHhza2EG426UxbliF3ng/mj5aBOpzPe+Rc=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F1319866A66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F1319866A66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F13FA9F402D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F13FA9F402D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>8953CC24540349D984061BDF5A8F5CB5</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>8953CC24540349D984061BDF5A8F5CB5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:8953CC24540349D984061BDF5A8F5CB5</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86210 - StreamView - PORTALCS - Full user can StreamView Stream created by Standard user - 200 Ok" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="76adb6f7-2dac-4889-a50f-c7cb406153d4"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3b798e3f-0ffa-4526-90dd-5d6030c8e6e6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="54e960cc-2548-48d0-a68e-4d91171a47ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b54015a2-47a5-495e-89bf-5238a3380437" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1c3966cf-9957-454d-80f5-14af7fe7f784"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="56d20b07-2e07-41cc-ae67-f1207d474ce6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Security Context as Full User" id="41bce632-f14a-4290-a6df-5d2f91fda529"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="b8152a78-0f95-4431-ae08-2d75876ec30c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f47dfcf1-1829-4d6d-a4af-1956674d7aa0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="14fae33c-5219-4f69-bef6-48511ad2b21a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d2b9ac11-9dbe-48ec-acbd-d7f82826d128" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="100671f1-5946-4c33-9284-5a169d898fd3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023739</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D07B42E307E1432A980D84C677C6EFDF</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP24Ck7CoyQqSFwo3WzfQEvbLyvjTMBtYofYAdpff+0AKVDa5a6EhDwZnznz8LHPBI4jx2sLAamknJWWccSEl1ubRpYyj2NBhcdwDMKTxBu0r688p2x5eLPFKPndpvEvtmpB0BiHpmsHDbNaI2C6lWrNxKHljsfEqYfkVLkKkYHPhMRMNg3HsmumpX6NoeV6Vs1z7LJ72ngxSo+QCoWtXMqWsSa1FE1jKmXiIbRYLMqLSpmnE+RYlo2erq8GZAoxNlpnq4zyQGlr7U/KARCIIlImPEZnaMfnLBDegE4YllkK61jBd7EsZLlI+QSCTk6MYi8EPgt5vuxgxhklOKIfWNfnGuSUB6V2NOEpldP42yRsSwObsCQmsavsxEC71I4E2mGYCmyKKbbXWH0IIQVGoPTQ95vGyXFdy7cOU8xEyNNY7C7/jA+wOUQ8gcAUm7TW1I4HPFCp1hkQz2ckygSdw40e1gQTEOtuAjkeqnSXQkiXV1SoAV0KzQ5t09tbrqrRpRMQ8v80aKs5K5BHHGXQuozbd2J5f3Hz/lafPjb8p+cKuroZvlex1cwJbDvnhqK1q+XeUBZDtNoxu3xtWFeLqX9J/SW6YK/JX8Hs5dWdo9M+ekSh81C7nQ4693Ignybcfw+fHVobLKUzunte/OO3h4msv0yz6+Ci8lD5aHT67Zs+faizkTV7EvTvbuV8LoLh7UT2GxejOf64ebwIaTp5lhRdgMsHoxG971VmkZ09dV/Dme1kD8OXZb/j80a0JG9Je3SXOfejcTI8bxbpbPHftW3O/CAbvwKRm6UeA79b6qkuYfmzmGkLDcwwd/USLT5CApNGS+/S2uFlSu5o4KkertZ2rdGzK7226/zqOV33/NyqVaxT17V7Vtuxup2NyKxY7FHscKbqEef6UFqNzc8ESewJYAGk5pxnSumE8QNiF0tc8llfHQLOBAy5kmdbLF5jZ1F/O61zHIgQGhPGxiqcUbrh8pbdpu1QQrqjybazo8l9IDShoIVbz7VQgy2kqsUMzzMZ2eU5LjPIlLSnWmU9p9qoIUHjJALNFMU8yCIoJ9MkrwwSq3/HxETkVipIwlOJo/xAoG/T2/+2qYTyCah2EDqlX6C6CQfuGHuTz5e86wfvog18OwuoPl+qrDKlZMVk99PntOgxKUblM7EN82LDHwIQcQAC/cAP7ZemiBjM6Vb8zWWurgUlJK1Nf2fYLs/K2Xye5S2tVisoVfBIFxVZDhoAyZTUvQ/5GzBUoKCj7pWC+F7wwr5LMZNTNpBYQqxGsJQvj3hIDEDoh4Svzs7y2FfKTkhVOglLecjWidQjSDP+8Z1EPKL9lPlO/S14Gnx27ADWVhyVp3pHSMomeqXvlPdvBoRwBUuVGvJ0G/wQwKHgu8aiyAUXqQZqnEn4/ktJy1zTwITwjEm/a+SGbenNecr3BLxPpy8wuboXzz363+89k+YjQEA9EgXN8fWt7ekjwCZb8r0Ouq/g1fNutds7rVtOpbut4Fa95hZF2WHX+mL+atmq0/6Mt34D</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F4EF7B8CF022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F4EF7B8CF022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>D07B42E307E1432A980D84C677C6EFDF</con:value></con:property><con:property><con:name>saveduseroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D07B42E307E1432A980D84C677C6EFDF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D07B42E307E1432A980D84C677C6EFDF</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_86211 - StreamView - PORTALCS - Standard user can StreamView Stream created by Standard user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="32ebb284-4f84-4b70-9634-100013f2be89"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bdd9d77e-d707-4ca9-912d-ad0fb0459697"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="83071d20-f70b-4b8e-b26e-3c2d584a26ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4a693e5b-8ba4-4ef4-9f67-8663d40f0928" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="73c443dc-84e7-413e-aa6e-be5dd3cd684f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a103b320-b683-4a91-82a5-21cb0473110f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="24a9096e-2943-4329-beb4-7c79cdef0ed8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="8078d0af-720a-44c0-8e69-ddd8ec1abe38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f73a8b59-5b73-4ee7-9b50-234677bb6909" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="84a373b8-2c83-4a53-ac9f-052dbd8d33be" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d38a1aa5-6038-4d37-bca2-14a5e4d522c5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023740</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:25284C630D0D43B4ACB0F3EE95C3B36E</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKP24Ck5CeCQqSBToTjpAW2DoTL+sjOOAO4mdxk4I/fVrB0iB0i6zEhLyzfW55z587GsOo9Byu5zjRBBGK3kUUu4W1raWJtRlkBPuUhhh7grkTrujoWtVDRfut2gVr9/W/mk2/Rb2YaDbTaOl23XL0h2r1dCRjewABkbdr1vSlfMUe5QLSEVbswyzrhvy15oZjmvU3VqrarecZ60yxwmX2NKlamg7UjlvayshYheA9XpdXdeqLFkCyzBM8HM0nKIVjqDWud5mVARKOjt/VPUxwmGIqohF4Boc+Vz73J2SJYUiTfAulv9ZLAMYDpA+PifLK63ci32PBqxY9iBllCAYkjeo6jPCYsX8SjdcsoSIVfRpEqahgHWcIx2ZNr3SwDG1C4GOGCYc6nwFzR3WBAc4wRThyo+J19auLutasXWWQMoDlkT8ePlnfDDNcMhi7Ot8n9aO2uWAZyrVucbI9SgKU04yPFbDGkOE+a6bGF0OVXlIcEDyIeFyQHOu2IFDeifLbTX6ZIm5+D8NOmjOFmQOwxR37N4CbFgXPKfk17fB2luN7XzpPE26N3a7IHDoXBjK1m6XJ0NZDtF2x5oOR6PeQ3Tz+KP3EqYDpzVM3ywyv+v1n+PpCxzez51HmC9D8iLuGuL1e245MDYX8eY+G2Y3aNbN6Ir0Z89zLwsfDDKe3jYffD+332JiNAfgGxyzJzOJIg89p8P0EcHJ3Zz83JhLGi5mqcBw8DRx1pNwnPl2j0yaPOe58VdLePPlZExfvSdk/27c//1rxNplOgf8j237Mz9NFy8Yif1SjYHXr9zKLkHxtZgpC/H1oHB1YyU+XGAqtI7apbTDTaXcEd+VPdyuzXrr1qyZTqvR6DYag9rAqNeMuuOYt0a3Pmiae5HZsjih2GM0ICqWktzt2HxNEEUux9THiZ6xVCod175A7EMBKx6dyEPAKMczJuXZjEMrsBBjdSegpk/sBVzESRoFuVYZM3FP75NuIHByJMqmdSTKE4xITLBSbjXYXE42F7IYrzBLRWhWM1ilOJXaniiZdS27VQecRHGIFVUQMT8NcTVexUVpAN/+WzpEvLASjmKWCBgWJwJ8mt/pt30ppI9PlANXKd1g2U585pKx9vl8yLtx9jLaw3dTn6gDJusqEoK2TI4/vY+LmpNyVt4T2zMvN/whAOJnIMAX/MBpacqIfkYO4u9vc3kvSCXp7Pv7Cs3qazXNsrRoqW3XQCLhgSoqMCwwxSiVWreZsd+YghIFXHSxlMRPgpf2Y4qpWNGpgAJHcgQrxfKCl8QUc/WS8OThyS99phyFlKUTOBfnbL1QvoIU4y8fSshFyk+aH+TfmiX+e8fOYB3EkXnKh4QgdKlW6lLZfDIg8mAnPpFyyJJD8HMA54IfG8sil1yEHKiFlO3Pv1SUzrU1iBBLqfD6WmE41N6Cp9jE2H13+gBTyHv53iP//eDTSTECCMtXIicFvrq2XXUE6PJAv3dBTyXcHvTt/m2zYVi1fiHhza2EG426UxbliF3ng/mj5aBOpzPe+Rc=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F1319866A66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F1319866A66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey5RhExXrJFXDGlRUFtc7hBFQNlkE/fXfgNGYnJzl/S5SZppenul+pqfnZ2oGPjkAaQqTzIvCpsy/tHCTIHZUl26b0Ny1Oz3GbDM70mpDymYYi+j3yI7ZasppmkM5TDMzzF5aJE4QbZxqE10DZwY0MyA6z51+Z9NqLmCSIs9I5RlvNcvAD9NBHfWllSfhIDJTLx2EZgDTQWYNdKCMB0hzYN4gtV5/XkHWAZNXN8viAYZZzza0oO9bz1YUYD+xTzo/7XSge05oZnkC32Pa6Uvr3bYoiueCeo4SByNxHMdwBkM6duo5P1qvjZsxtOVwF13XnBlGoWeZvncxK1AKzNzIbgLfiRIvc4PfuCYwAq9ct2FptS2iE/5oYR8BanT/6OkTyCQ126lrEjdnGtzBBIYWbM41+aX1458KeDU1EjNMd1ESpF/W/w0RDE/Qj2Jot9Pbxm7g/t3jN9l6/QmtgRxafp56JzipWBKbFkybswTuvHLspYh7dtqsq98s0xvBoPVfKvITe8SJYGPfZIb3HJhm/0+5Hkt19bIw/Ry+lrPzQoYrQeOTxJv19PM4X+ojsJ7ih5cawqPyFdS90u/rrzy90+rdSL+YVrhPYzsTVpLJ5cHacKfayu3hoSkmPd3z4KU7H51X3GgYTHlGp4ZSp88JCyK0N7pb6KJByb2eSbn6vPH0Nt4Vs9WblJGZ2gOreJ0SFL4iHULLmdNK4SLseOx391kQsG4wz87ToyzrgQxZOhCPWA83t/4WpqR8ZJ2GYBAzXtaduGvFW7B1ZFC8fOzpcQ/VvkbwXG+y+n9F4wxvZuZ9wVWNYodOZwZfFVnm8wvHgbPugEJmgYP+9mDCOoeje/AkpsBZoKoi4DnW3wtjBRwkQMwF1lW4xUIpuQsYss5kgQyNBvA3rKIJBV+s+YWqvgmFa9jS4ryV/HxzESYKSGtjzlUETVjwmiEoCoiuslLht1K5V3SlkNU130AOeKGML7bEZFAqPYuUaUWnybVO55vVAsnF8ziYnLaG4CucInH6UdLlLcWrwhBo66VFijmyvYyDOGqs5+yD0TCGewDFAkcxwUUxDoVizMkJr5m1zPgsU2RpqKhpwan1rqSGUAwX88tHLjhW4exAKAUDzK65sAxOnOCb1TA1l3SoaKDgndp4JBT29AZEUfGiwV1zNRYKTdDmE1HR5EIAtYwXCj/dkhN3K7kni1LLoQH2j4XhVGEphuh7qJ2sM31smJIItsGCsCjNtTzaM1dR4Wz6Ba+uh6NoIyM3E6AKLKsCBAgH1dZQ/lkwZhf0NPYY0oPjnRgF0E0aChGNDqdLifc9aurMJkua3x16M8mbUabtYrJvkXvqAGQZ2iPCVU1bW2MaH3qX7nQ0X0EvWV+yCa0SXa9PN7RlPl/xkd+z31br+eipXFuqMZ3p8+XsUpaT475/8bO3KfuW6EOFd6YTCGep9YThpsgafZ7m1m97xKedhkO6ARyFBUDaO47gIQKzb/srCd80RUDkBQpXSNySk3QgSU+CzPKquhNdYmZJi3xOTBRZsH2UpvN6pfmNDcfyqFK4udzEa1LENwawa2dqRxAddU4/DVdwo058Y5GBIl7sQoLApVh92ymFYykVA2y50Fl0ithGLoO5OY2HeDladHHiqNr+UGfAnCp18lBOXWdzPjibAyrK+uHorA3gL4wHjsmIYsuGagiaAvrX81Yq8pzSfCso421glbyBalYbRwYraKKKz0ueB6OrLDUAWabri7BXOKG2b4BSMREtTtuVm67DiTc1hByRNn+gy35L4n/lWEWxxmeOHTmggq8cE64cE8Du+CT3eSKlu1ycLguHlYSj2luMh0yMq6vxocE+iZiTeX5nGvYLY/S0JM5Fz92ryyUj8y73FO7WLrXNWNy8WCocHnqSpx34sNvxz8pYUem5h/lnfA+PRTpuTGQiFKjsImJMkj+xwcYLLheqQ86DmZ6f5Lk5Somzuz0umWI/e+tiWCKd6Utvc1LFVWStr/fI1yZ5F17bKPbYYD914NvopefbPbSy27K6h2W+KaLL0cz+PMZVEs9u72rVQVzNgmkGw6z1WllVI9wgR4OeZw/QzXldM0Kf5XiRJTmR75AdSsA7OCHiAO8xTI/vkrdZ74riC0QuCndeFasaZq+X9Z8BWsFgC80EJq0/eKry1JRDDU0fUZhCI3pp0ZTAAwA4mhLxLsX0+zxDdnt9kcNZigGk2GpOomwaThOwy2DyMCD3vg7IGrS82IPVFP0+S6QZSsTRPOWZTzyfzOcQ5mjMTqpJd0B2+nSdAMzOg9hCH1B3S+IozZ5jN66Hmd9u4+u3246Rju1VCmkFmoWoWvCbkR6/If5lZ+S3o//NPchtr5pZUPqyxLOuSD5/+mBDRYM7FXCG6Nww31X/zZQhiO6vptgfEGFfk3GPZJ+8h7i3hwmatdE4Vr9HUlS0o/l8fM5Pp7wuUw/HSSxB7jECwzEdWjkaF89GdIAhdveA/cugfsf8Je5d/hldnrmhnqFTHiBGNevl3x9pn6xRAjJYZt/JOB89y6rgf3y5WQOr0kPiGfoposT+yPs3vh7iIMhVh/JCp1pVE/b5c3nfT8LAipBXDzWpKHn0/Z39d7E/C+/pukPJECu2eQZ//6VZdZ+XlmlZUR5mMt+qBY8dscacnWM4+FD6xU094r6/Wcr0t2+WlTLWLRcGZuuu6/1due3Vhbcgskq9GstLq0SvbxQ8dB468DvAL024x9E9sQNIsid0OvcmTDMMyeLUPYGfdvL6i/hXyUNOvzL79X8=</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F169BA56766EBE05305991F0AB6A4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F169BA56766EBE05305991F0AB6A4</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>25284C630D0D43B4ACB0F3EE95C3B36E</con:value></con:property><con:property><con:name>saveduseroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>25284C630D0D43B4ACB0F3EE95C3B36E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:25284C630D0D43B4ACB0F3EE95C3B36E</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F1319866B66E3E05305991F0A5E71</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_89000 - StreamView - PORTALCS - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d8355251-5589-4313-ab02-efce80b07691" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="88b34c3d-4e37-4948-a372-8774c2da9972"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4405174f-160c-409c-9bb8-920c58d2e0c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="6dde08e8-e6db-4075-90f8-af00096637c7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="8d8922d9-afb3-479d-97ba-7c8e1737d289"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="b39a3065-236d-4ebb-976d-0bdb01577f06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="abbc1a35-9814-427b-9fb1-adaceb4ccc8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="10fc9a20-3253-41a3-abcf-5420765cea00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="bbe68297-42a4-4ec5-9481-e9c9f39b4bcb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="cd2e62ff-d5a7-4d3a-86a6-4087e2bbbe6e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D65DBECAAB867E0401F0A07994A0F</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D194DBE0ABB03E0401F0A0799497E</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81859</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D194DBE0ABB03E0401F0A0799497E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D194DBE0ABB03E0401F0A0799497E</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_89001 - StreamView - PORTALCS - AccountNotActive - ACCOUNT.STATUS of deleted - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d2932c73-9d54-47a8-ba50-dc9c798a2ab3"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ccc1dd5c-244e-4e4d-8aff-0e26c578867e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0a229781-981d-4e34-a7d5-b04ae18345d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="c5e8ab7f-4989-415f-a0df-50bcff91cb91" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="efab3501-5e94-445a-9162-a509c0a57ad7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="79a897f2-06f5-43c6-a542-835935de68b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="cd97f068-6b63-4630-b3a9-120d0bca18c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="f63b0d50-9158-4543-96f2-3d51974248db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="4ac871c1-859f-43d2-9b17-aa6e23c13286"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="0db7e4b5-4c40-43cc-899c-cbff2da74e06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_023739</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF77023DE05307991F0A0659</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP24Ck7CoyQqSFwo3WzfQEvbLyvjTMBtYofYAdpff+0AKVDa5a6EhDwZnznz8LHPBI4jx2sLAamknJWWccSEl1ubRpYyj2NBhcdwDMKTxBu0r688p2x5eLPFKPndpvEvtmpB0BiHpmsHDbNaI2C6lWrNxKHljsfEqYfkVLkKkYHPhMRMNg3HsmumpX6NoeV6Vs1z7LJ72ngxSo+QCoWtXMqWsSa1FE1jKmXiIbRYLMqLSpmnE+RYlo2erq8GZAoxNlpnq4zyQGlr7U/KARCIIlImPEZnaMfnLBDegE4YllkK61jBd7EsZLlI+QSCTk6MYi8EPgt5vuxgxhklOKIfWNfnGuSUB6V2NOEpldP42yRsSwObsCQmsavsxEC71I4E2mGYCmyKKbbXWH0IIQVGoPTQ95vGyXFdy7cOU8xEyNNY7C7/jA+wOUQ8gcAUm7TW1I4HPFCp1hkQz2ckygSdw40e1gQTEOtuAjkeqnSXQkiXV1SoAV0KzQ5t09tbrqrRpRMQ8v80aKs5K5BHHGXQuozbd2J5f3Hz/lafPjb8p+cKuroZvlex1cwJbDvnhqK1q+XeUBZDtNoxu3xtWFeLqX9J/SW6YK/JX8Hs5dWdo9M+ekSh81C7nQ4693Ignybcfw+fHVobLKUzunte/OO3h4msv0yz6+Ci8lD5aHT67Zs+faizkTV7EvTvbuV8LoLh7UT2GxejOf64ebwIaTp5lhRdgMsHoxG971VmkZ09dV/Dme1kD8OXZb/j80a0JG9Je3SXOfejcTI8bxbpbPHftW3O/CAbvwKRm6UeA79b6qkuYfmzmGkLDcwwd/USLT5CApNGS+/S2uFlSu5o4KkertZ2rdGzK7226/zqOV33/NyqVaxT17V7Vtuxup2NyKxY7FHscKbqEef6UFqNzc8ESewJYAGk5pxnSumE8QNiF0tc8llfHQLOBAy5kmdbLF5jZ1F/O61zHIgQGhPGxiqcUbrh8pbdpu1QQrqjybazo8l9IDShoIVbz7VQgy2kqsUMzzMZ2eU5LjPIlLSnWmU9p9qoIUHjJALNFMU8yCIoJ9MkrwwSq3/HxETkVipIwlOJo/xAoG/T2/+2qYTyCah2EDqlX6C6CQfuGHuTz5e86wfvog18OwuoPl+qrDKlZMVk99PntOgxKUblM7EN82LDHwIQcQAC/cAP7ZemiBjM6Vb8zWWurgUlJK1Nf2fYLs/K2Xye5S2tVisoVfBIFxVZDhoAyZTUvQ/5GzBUoKCj7pWC+F7wwr5LMZNTNpBYQqxGsJQvj3hIDEDoh4Svzs7y2FfKTkhVOglLecjWidQjSDP+8Z1EPKL9lPlO/S14Gnx27ADWVhyVp3pHSMomeqXvlPdvBoRwBUuVGvJ0G/wQwKHgu8aiyAUXqQZqnEn4/ktJy1zTwITwjEm/a+SGbenNecr3BLxPpy8wuboXzz363+89k+YjQEA9EgXN8fWt7ekjwCZb8r0Ouq/g1fNutds7rVtOpbut4Fa95hZF2WHX+mL+atmq0/6Mt34D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1DA9B2D2936A4C8DA1C8DC3FFBD2A3CE</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4E7AF023DE05307991F0A0659</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF76023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F13FA92BF2D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4ED4DF7E023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F4ED4E7AF023DE05307991F0A0659</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:1DA9B2D2936A4C8DA1C8DC3FFBD2A3CE</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81860</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>1DA9B2D2936A4C8DA1C8DC3FFBD2A3CE</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:1DA9B2D2936A4C8DA1C8DC3FFBD2A3CE</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F13FA92C02D9EE05307991F0A20DC</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_89006 - StreamView - PORTALCS - AccountNotActive - ACCOUNT.STATUS of blocked:tou - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0c0c7ae8-43cf-481d-a7c3-e67367212593" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9053bef7-e44b-412e-93fc-a2f7f93d8796"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7c84cf04-9189-4eba-ae99-5ed98e71d296"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="af25f7ce-8f08-47b4-b0af-93c1f70867eb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="ceb4dd09-b1ac-40b6-9360-4a66e71ea64a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="5dae85b9-fccd-42c3-ae18-ada6c8aa40b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="13197633-07bf-4c57-8a4a-9a3ff802f082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="1058d9fb-6349-434d-9105-40c95de9661b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e6ea53e4-8ea2-461d-9a5f-a73087704c66"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="22b7ee2b-fa55-4027-90cb-d73fba90f4c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D194126DFD281E0401F0A07994972</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D194F0614720AE0401F0A059949B8</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D194F0614720AE0401F0A059949B8</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D194F0614720AE0401F0A059949B8</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_89050 - StreamView - PORTALCS - UserNotActive - ACCOUNT_USER.STATUS of pending - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b1416aef-f68f-49be-b41f-cd7bf9676f26"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="eecdda48-f2ac-4998-984b-96fd6ee5f351"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6f2cf5ba-cf12-450e-9a86-7f500e000ab7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="342d5e8e-34b6-43b3-90c4-235c3d56c2aa" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="6b763eab-c7de-4f48-ad59-17a3b4574c42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="e868355f-4ddf-4fd6-a8e1-e1ce74e4d2c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to pending" id="766d48ca-e439-448f-9e59-1b0f02e2c214"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="1e4aa565-04c4-44a4-8619-e7afb898acbc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="81ea66a1-54af-461c-a510-6780da8ff2e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="4d4d17f0-9f66-4c57-bc9f-b96a6e47aa23"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7bba5b96-79e5-4f75-a68c-6fa842d4c7d4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0EEF74F994AF4EB2B3F4603D08D74B54</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F78AF95CB0C00E05305991F0A2221</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F78AF95CB0C00E05305991F0A2221</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0EEF74F994AF4EB2B3F4603D08D74B54</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0EEF74F994AF4EB2B3F4603D08D74B54</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0EEF74F994AF4EB2B3F4603D08D74B54</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81867</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59103 - StreamView - PORTALCS - Stream view by Portalcs_ManageAccountConsentNotPresent_DifferentOrg_ActiveStream - 200 OK_MIGRATED" searchProperties="true" id="07f53a5c-ca82-461c-b3af-a6bc6f89b18e"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a6ba4c9e-28a6-4049-9bec-f7ecc5387ef7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7d519bee-dd5a-4812-b8b0-ea2855dfe5ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="efe9f1f3-0dc9-4214-a0a8-bbd9e997fb7b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove manage account consent" id="8521ef42-1f86-4dbc-8c22-dbba182d7ddd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="1c9dd1fc-a5a0-4bd9-bdfe-efcdd09ad919"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c6a2e3c6-4b0c-4220-8f8e-bfab4df34167"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4ff45185-a125-4f2c-ae55-3b186cef85c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" disabled="true" id="7ea56c20-ebb5-48e4-a8f7-dfb3c6caabf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="352c833d-aed8-44ba-a7be-6d35b238c2cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" disabled="true" id="48b32cce-fa44-4c86-8880-bb20738441de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="5b23c3af-75b3-45aa-a545-d8758fbfd205"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c6204b56-d8d8-4adf-a46c-8d0a5bf1a4a2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="952c3af1-628a-43a9-bc34-a6164e70a0da" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="13fe5a68-1312-440d-893f-29f36c784952" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:09C30EFA27E74E75AA507E1A3D7CCD56</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F785AAE1B3BB7E05307991F0A9B55</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F785AAE1B3BB7E05307991F0A9B55</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>09C30EFA27E74E75AA507E1A3D7CCD56</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>09C30EFA27E74E75AA507E1A3D7CCD56</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:09C30EFA27E74E75AA507E1A3D7CCD56</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5916bc4-b589-4b8d-a3af-f9b61208a113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59103 - StreamView - PORTALCS - StreamOwnerMismatch - Stream view by Portalcs_ManageAccountConsentNotPresent_DifferentOrg_DeletedStream - 403 Forbidden_MIGRATED" searchProperties="true" id="b16f2cae-226d-4e06-8383-761c156b385c"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ad5c4f85-e8c8-4355-b786-bb5d69d2102a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a71a6c7d-e3af-4510-ab6b-c532ece4f7d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="491049ae-51fd-44c8-9a70-b8ec7fb422b7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove manage account consent" id="79e690c9-e399-4dd2-bc3b-ed95dda427d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="bbf5808d-34a6-4d48-9bd9-e1f8442dc1b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="489866d6-281f-4eee-8c9b-3c2d208a93fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2abe5ab1-01cd-4840-9110-f2fef146a991"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="e5eabb6d-0512-4464-bf30-335430ce3b33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="b32d6677-7ab1-491a-ba07-bf45985f70ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" disabled="true" id="5d79c72b-c1ac-4cf5-a39b-96265da51747"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="565ad7e1-48a0-4734-8e88-eb3969c47f11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c9bfd41b-0818-484d-a8d8-82ad3b146e4d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5f9d7ff7-33bb-4078-a4ec-419a9c402625" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5b95f68a-aa81-4594-af88-88cbc932dc99" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F912BCD5BC8C4D4DBA920DF226C788F8</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F4ED500BD023DE05307991F0A0659</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F4ED500BD023DE05307991F0A0659</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F912BCD5BC8C4D4DBA920DF226C788F8</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>F912BCD5BC8C4D4DBA920DF226C788F8</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:F912BCD5BC8C4D4DBA920DF226C788F8</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5916bc4-b589-4b8d-a3af-f9b61208a113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59102 - StreamView - PORTALCS - Stream view by Portalcs_ManageAccountConsentPresent_DifferentOrg_ActiveStream - 200 Ok_MIGRATED" searchProperties="true" id="94518813-91e9-477a-8d2e-900be7124743"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="90c55821-1a85-46ce-b67d-df907669f4da"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="847c75e2-1675-4b4d-a165-7968c32ef0d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="8720d97e-fcd2-4a66-8c5b-8b1dfb3b944f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="dea712cc-a5a5-4872-85a9-cfb28a2e2bc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="bf4b8bca-4df6-4b1e-9dfa-caf27d755743"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="12104ac8-0a4f-43ac-98d4-f485ffa75607"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" disabled="true" id="d42bb578-450c-474f-ae87-3894be77a11b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="dd39b0aa-6bdb-4385-825d-b21a912eb74d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" id="526a6b37-df35-4747-9547-e723b431bdfb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b24ed9a1-6318-4e92-b7f9-9eeac3f9b9ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="98bf15b1-be34-4a83-8315-583926a1904a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f36fe1ef-1bce-4a3e-8f29-3d5d1f83e3b6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2e0634d7-4fc4-4bcd-b626-c67d8d3f7acf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5B936CF1D49E4455BB42039E86B84DC9</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>158F4EF7D109022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F4EF7D109022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>5B936CF1D49E4455BB42039E86B84DC9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>5B936CF1D49E4455BB42039E86B84DC9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:5B936CF1D49E4455BB42039E86B84DC9</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_59102 - StreamView - PORTALCS - StreamOwnerMismatch - Stream view by Portalcs_ManageAccountConsentPresent_DifferentOrg_DeletedStream - 403 Forbidden" searchProperties="true" id="4a3ad263-735b-4b7e-803f-598f321dcfe8" disabled="true"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="38c74a8c-6e5a-4d21-a828-923c74da8857"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4c20be74-9534-4b0c-a09e-38a063aa2979"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="891e1b93-4a61-4635-805b-076502abf75e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" disabled="true" id="4ea35c13-36f3-442a-afae-fb265cd01219"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a616dc3a-d0ab-4646-8131-7b9b99bfa124"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c22fbc07-4209-448c-b02d-9f08381c8b0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="a8157f00-652b-4652-8c19-06faef550d22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as PORTALCS" id="7da10f9b-69af-43e3-9474-bf0d334320c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent 1" disabled="true" id="261fae34-b06e-4499-90ed-4544c7d76ab9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="86fed46c-9a58-4ce7-b06a-2f08cdde94dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c796c84b-9b2f-43dc-8a50-a831ce6d7aaf" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="804300d6-7386-476c-af32-a56cb03bfc3c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="070f1599-e1bd-419f-a408-3ad7b0079282" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_100143</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D194D2C64E9E2E0401F0A07994968</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6D194D2C64E9E2E0401F0A07994968</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D1966BA21E395E0401F0A059949BA</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6D1966BA21E395E0401F0A059949BA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6D1966BA21E395E0401F0A059949BA</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6C42C0987D1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlpcs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a7ca3846-5ad3-4627-aa07-8c5f55784a24</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6688bab2-559a-4b02-abac-9bf12945c2ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Setup" disabled="true" id="ba0bcaef-3721-4c20-a13e-4f84b4589f20"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="708a0bbb-b739-4409-b041-49a551684a9e"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="4dcfc122-d0e9-474d-8820-6f8d91ff394b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>${#Project#NodeValueRetailer}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="160aaf4d-490b-4800-95f7-4bf17fcf6bfa"><con:settings/><con:testStep type="datagen" name="AccName" id="76548248-984e-4375-ab41-c509b90d216b"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="eb7e1775-e20d-4672-b179-a95de292222d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="b576ade0-b4f8-4de1-a27e-30ee24faeb65"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="23d21add-4db9-42c2-a565-57c63b76d25a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="f974a2c3-990c-419f-be31-09721576ece4"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="fdedb0a8-e9bd-4dda-92a6-64da0d66646d"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="2efc83e3-91cc-4689-a85c-84e9288aed2c"><con:settings/><con:testStep type="datagen" name="UserName" id="be6ea06f-e771-422c-bdf6-6e07746ef991"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "stream_view_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="02013601-b0e5-4541-8c7d-2e25c3cdf5cf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="a7028dba-b7f2-4a03-b3e2-9c0be6f1913a"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="4c9b5307-bad4-4c51-a5ec-c99aa9453829"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="8abb9e5e-1f60-42b9-921b-4afa8d560e5d"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="0dc5561e-f204-46ea-a7b6-3f279cb82f1a"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup for streams" searchProperties="true" id="789da26f-1af1-4a35-b865-7d03d68518bc"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="244d80ad-6cbd-474a-9583-b9e36e4eb771"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C381F9C22E4A41E6E0401F0A0599030B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e9ea2bdf-6ccf-4d02-9ec6-81187467dcc4"><con:settings/><con:testStep type="groovy" name="Data Setup when Stream Count Greater then 12 for Stream Service ON" id="6652d03b-9d54-48c4-866a-6487e2141eae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

int StreamCreateCount = Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info "Stream Count from Project level......:" + StreamCreateCount;
log.info "Not required to create test data...."

def temp_username = callTC.getPropertyValue("username");

log.info "temp_username ... " + temp_username;

                if (temp_username == tP.getPropertyValue("UserName_FAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_FAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU2");
                }

log.info "UserName property from Test Case ... " + tP.getPropertyValue(tC.getPropertyValue("UserName_Property"));

//run E2E when Stream count reached to 12 in the Account

if(StreamCreateCount>=12)
{     

                StreamCreateCount = 0;

                //update StreamCreateCount to Zero at project level.
                tP.setPropertyValue("StreamCreateCount",StreamCreateCount.toString())
                                
                def myTS = tP.getTestSuiteByName("E_2_E");
                
                def runnerTS = myTS.run( null , false )
                
                assert runnerTS.status == Status.FINISHED;
}

//Setting the desired user from the testcase
tC.setPropertyValue("username",tP.getPropertyValue(tC.getPropertyValue("UserName_Property")));

log.info tC.getPropertyValue("username");

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
//tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
def nodeID = tC.getPropertyValue("nodeid");
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

log.info "---- PROCESSING nodeID[$nodeID] userID[$userID]";

	switch (nodeID) {
		case tP.getPropertyValue("nodeoid10"):  // Retailer node
		case tP.getPropertyValue("nodeoid11"):  //Linked LASP CS
		case tP.getPropertyValue("nodeoid12"):  //Dynamic LASP
		case tP.getPropertyValue("nodeoid13"):	//Dynamic LASP CS	
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_1").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

          case tP.getPropertyValue("nodeoid30"): // Coordinator CS		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_3").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid20"):  // dece cs		
          if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_2").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		case tP.getPropertyValue("nodeoid40"):
                                                   // Dynamic lasp and his/her customer service node		
		     if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_4").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid50"):
          case tP.getPropertyValue("nodeoid51"):
                                                 // Linked lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_5").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}

log.info "---- PROCESSING COMPLETE";
/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
	}
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
lastColon = assertionAccountIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 3));
lastColon = assertionUserIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 3));
}
else
{
lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish other account/user related data" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctoid = tC.getPropertyValue("accountoid").toString();
String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String rightslocker = "";
String useroid = "";
String accountoid = "";

assert acctoid.length() > 0;

/*
*  useroid
*/
try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

try {
	def a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	rightslocker = a.accountGetRightsLockerId(acctoid);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
finally {
	callTC.setPropertyValue("rightslocker",null);
	callTC.setPropertyValue("rightslockerFULL",null);
	
	log.info "rightslocker[$rightslocker]";

	callTC.setPropertyValue("rightslocker",rightslocker);
	callTC.setPropertyValue("rightslockerFULL",tP.getPropertyValue("urnRightsLocker").toString() + rightslocker);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_79000 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81597</con:value></con:property><con:property><con:name>UserName_Property</con:name><con:value>UserName_FAU1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6652d03b-9d54-48c4-866a-6487e2141eae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("userrowoid",null);
tC.setPropertyValue("accountrowoid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish whether login is necessary for node/user combo"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node      = tC.getPropertyValue("nodeid");
String user      = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser       = node + "_" + user;
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid    = node + "_" + user + "_accountoid";
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";
String prop      = tC.getPropertyValue(propUser);
String asstuuid  = tC.getPropertyValue(propAssertUUID);
String assbinary = tC.getPropertyValue(propAssertion);
String assAccountId = tC.getPropertyValue(propAssertion);
String assUserId = tC.getPropertyValue(propassertionUserId);
String assAccountIdFULL = tC.getPropertyValue(propassertionAccountIdFULL);
String assUserIdFULL = tC.getPropertyValue(propassertionUserIdFULL);
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asstuuid[$asstuuid] - assbinary[$assbinary]";
this.log.info "propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID] - propUser[$propUser]";

if (prop == null) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	} else if (prop != tday) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	tC.setPropertyValue("nodeuserid",null);
} else {
	// Check the UUID property
	if (asstuuid == null || asstuuid == "") {
		log.info "assertionUUID is null/empty";
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	// Check the assertion binary property
	} else if (assbinary == null || assbinary == "") {
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	} else {
		int lastSlash = assUserIdFULL.lastIndexOf(':');
		
		tC.setPropertyValue("doSTS","false");
		tC.setPropertyValue("assertionUUID",asstuuid);
		tC.setPropertyValue("assert",assbinary);
		tC.setPropertyValue("accountoid",propAccountoid);
		tC.setPropertyValue("useroid", propUseroid);
		tC.setPropertyValue("assertionAccountId",assAccountId);
		tC.setPropertyValue("assertionUserId",assUserId);
		tC.setPropertyValue("assertionAccountIdFULL",assAccountIdFULL);
		tC.setPropertyValue("assertionUserIdFULL",assUserIdFULL);
		tC.setPropertyValue("nodeuserid",assUserIdFULL.substring(lastSlash + 1));
	}
}
log.info "doSTS is " + tC.getPropertyValue("doSTS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser = node + "_" + user;

log.info "propUser[$propUser] - propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID]";

def doSTS = tC.getPropertyValue("doSTS");

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	if (runnerTC.status != Status.FINISHED) {
		tC.setPropertyValue(propUser,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAssertion,null);
	} 

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def doSTS = tC.getPropertyValue("doSTS");

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
	
	tC.setPropertyValue(propassertionAccountId,tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue(propassertionAccountIdFULL,tC.getPropertyValue("assertionAccountIdFULL"));
	tC.setPropertyValue(propassertionUserId,tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue(propassertionUserIdFULL,tC.getPropertyValue("assertionUserIdFULL"));
} 


</script></con:config></con:testStep><con:testStep type="groovy" name="Store assertionUID for the node/user"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String prop = tC.getPropertyValue(node + "_" + user);
String asst = tC.getPropertyValue(node + "_" + user + "_assertUUID");
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asst[$asst]";

if (prop == tday) {
	tC.setPropertyValue(node + "_" + user + "_assertUUID", tC.getPropertyValue("assertionUUID"));
	tC.setPropertyValue(node + "_" + user + "_assertion", tC.getPropertyValue("assert"));
} else {
	tC.setPropertyValue(node + "_" + user,null)
	tC.setPropertyValue(node + "_" + user + "_assertUUID",null);
	tC.setPropertyValue(node + "_" + user + "_assertion",null);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract OID level User/Account Information"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());


String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID, to_char(rawtohex(a.USER_OID)) USER_OID, 
to_char(rawtohex(b.NODE_USER_ID)) NODE_USER_ID, to_char(rawtohex(c.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID, 
to_char(rawtohex(b.ROW_OID)) ROW_OID, to_char(rawtohex(c.ROW_OID)) ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = '$uname'
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = '$nodeid'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);

	accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();
	useroid = myXML.ResultSet.Row[0].USER_OID.text();
	nodeUser = myXML.ResultSet.Row[0].NODE_USER_ID.text();
	nodeAccount = myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text();
	userRowId = myXML.ResultSet.Row[0].ROW_OID[0].text();
	acctRowId = myXML.ResultSet.Row[0].ROW_OID[1].text();
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	log.info "accountoid[$accountoid]";
	log.info "useroid[$useroid]";
	log.info "nodeUser[$nodeUser]";
	log.info "nodeAccount[$nodeAccount]";
	log.info "userRowId[$userRowId]";
	log.info "acctRowId[$acctRowId]";

	tC.setPropertyValue("accountoid", accountoid);
	tC.setPropertyValue("useroid", useroid);
	tC.setPropertyValue("userrowid", userRowId);
	tC.setPropertyValue("accountrowid", acctRowId);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store the ACCOUNT.ACCOUNT_OID lockerId"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid = node + "_" + user + "_useroid";

tC.setPropertyValue(propAccountoid,tC.getPropertyValue("accountoid"));
tC.setPropertyValue(propUseroid,tC.getPropertyValue("useroid"));

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

def x = a.accountGetRightsLockerId(tC.getPropertyValue("accountoid"));

this.log.info "x[$x]";

tC.setPropertyValue("rightslocker",tP.getPropertyValue("urnLocker") + x);


</script></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String usernodeConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username");
String usernodeUUIDConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username") +	"_assertUUID";

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "assert":
			case "assertionAccountId":
			case "assertionAccountIdFULL":
			case "assertionUserId":
			case "assertionUserIdFULL":
			case "assertionUUID":
			case "cid":
			case "deceorgid":
			case "rightslocker":
			case "targetURL":
			case "useroid":
			case "accountoid":
			case "nodeaccountid":
			case "nodeuserid":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:properties><con:property><con:name>0910_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9E87C57F4A237E44E0401F0A05992B03</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_24.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_24.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>true</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>urn:dece:rightslockerid:org:dece:9E7171CFE6FC3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic Test Cases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_36210 - StreamView - DLP - Full user can StreamView Stream created by Standard user</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9E87C57F4A257E44E0401F0A05992B03</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertUUID</con:name><con:value>b029afa8-ae5c-442b-bfc8-5425a33d1793</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionAccountId</con:name><con:value>990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionUserId</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0910_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertUUID</con:name><con:value>96fcd296-05f7-46cd-94a7-424fa059b403</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionUserId</con:name><con:value>9E87C57F3C667E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E87C57F3C667E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertUUID</con:name><con:value>bd31a621-99de-45b8-bd3d-da482edad8c9</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionUserId</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>20_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertUUID</con:name><con:value>6ef3bd26-e62b-4433-a8db-845f39dd7130</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>20_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionAccountId</con:name><con:value>9E883D73823AAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionUserId</con:name><con:value>9E883D73823CAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E883D73823AAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E883D73823CAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertUUID</con:name><con:value>fa6ebc29-e0dd-4830-9e21-398738245e25</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionUserId</con:name><con:value>9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>0914_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertUUID</con:name><con:value>0a11f365-aeaf-479a-9f2c-e3d99c18724a</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionUserId</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertUUID</con:name><con:value>2f9e0cce-ace5-42d2-b50a-aab314454e53</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>25_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionUserId</con:name><con:value>9E8E512ABEF313DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8E512ABEF313DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertUUID</con:name><con:value>7adce797-930e-4d5f-8258-0e8f5bc7e248</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>25_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionUserId</con:name><con:value>9E977EBCADC4E996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E977EBCADC4E996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertUUID</con:name><con:value>df65844c-c946-47e2-9c5e-e7d9ca59753a</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>25_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionUserId</con:name><con:value>9E977EBCADCAE996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E977EBCADCAE996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertUUID</con:name><con:value>56b6c12d-d7d1-42f5-ab00-6cbdaad9ba92</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>10_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionUserId</con:name><con:value>9E9CDFB384CE6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9CDFB384CE6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertUUID</con:name><con:value>41fac975-cec2-404e-b436-9ad6f4eda488</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionUserId</con:name><con:value>9E9D128D12A933F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D128D12A933F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertUUID</con:name><con:value>3f0f3465-dd16-4299-abfe-b8c5eb9598e8</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionUserId</con:name><con:value>9E9D7D79540C90CBE0401F0A0799570C</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D7D79540C90CBE0401F0A0799570C</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertUUID</con:name><con:value>41a640ba-1796-4064-8ad2-7ed0a78d5093</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionUserId</con:name><con:value>9E9D128D12E833F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D128D12E833F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertUUID</con:name><con:value>fd997d8c-88a1-466a-aba3-7913aba3ca31</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>10_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionUserId</con:name><con:value>9E9E90EFC560E713E0401F0A05995E0A</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9E90EFC560E713E0401F0A05995E0A</con:value></con:property><con:property><con:name>10_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertUUID</con:name><con:value>3b22e769-151c-46bf-8ae0-c50c68ba53b9</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertion</con:name><con:value>nVdZc6pME773V1ieS8uwKCpWkqphDSoqiAveIYwwioAsgv76b9BozHKW96tKKpmml2e6n+npeU6svU/3QJLAOEVhUFWEl1pzTdOw02YbFEPZjVZ7vWl0LUg2bIa02921xTTXbK2qJEkGlSBJrSB9qdEkRTXIZoNqG1S3R+Of5hPbJFe16hzGCfaMVZ7IWrXY+0HSu0R9qWVx0AutBCW9wNrDpJfavSlQhz2s2bNukGqvz1eQl4Dxq5emUY8g7CcH2tD37Sc73BPPxCedZyfpTZEbWGkWw/eYTvJSe7fN8/wpbz6FsUvQJEkSJEtgHSdB7q/aa+VmDB0l2ITXNW8FYYBsy0dnqwSlwtQLnSrw3TBGqbf/jWuKoMjSdQMWdsOmWsGvGvER4ILuHz19AhknViPxLOrmTIcbGMPAhtWZrrzUfv1TAa+mRmwFySaM98mX9X9DBIMj9MMIOo3ktrEbuH/3+EO2Xp+h3VMC288SdISjkiWRZcOkOonhBhVDlGDuOUn1Uv1qkdwIBu3/UpFn4hEnhk38kBkBuTBJ/59yPZbq6mVu+Rl8ZYqs2Y+lRBkSOYP47ny1ao8OkOuOzZcLhEflK6h7pd/XX3l6p9W7kcPwbusIQT1vSuYhE81C1VaukWIGxwfC60pcP+oSYmoMU8FVd4fY3USFkdTryJL6raPiFeY43VHSSiCNCj5bsUxHmeyI405drjuCIE5SdZsd8QkU1OjQ1sIwr5vegiUXhIez4K1aAz4/R3V9QE7fhvP+4NRCkrmYtCr9FI5HuR0VI0M6GCp7MrWXjz097qHc1wCeLpss/18yJCtYqXVf8GWj2ODTmcJXVVGE7Mzz4DR1Qa5wwMW/WzDi3N3B2yGZzUkOaJoEBJ7zt+JQBTsZUDOR81R+PlcL/gz6nDuaY0OjAvwVp+piLuSmMNe0NzH3DEeen9ayn63O4kgFycWY91RRF+eCboiqCsKrrFCFtVxs1amaK5opVLADQSyisyOzKZQLZNMKo04Z2pwy2Wo5x3LpNNyPjmtD9FVelfnpQZ4q66agiX2gmwubljJsex7uo7BizrgHo34EtwBKOYljgrNq7HLVmNEjQbcuMuOzTFXkvqolOa9ddiVXxLw/n50/csFzKu/sxUI0wOSaC9vgpRG5WvYTa8EEqg5ywb0YD8TcGd+AqBqZV/hrroZirov6bCSpupKL4CITxNxP1vTIW8ve0W5qRd8A28fC8Jq4kAL8PdCP9ok5VCxZAuv9nLKbumcjBlnLMHdX3VzQzP4gXCnYzQhoIsdpAAMiQbk1nH8ODLk5M44QSyM43EjhHnpxRaXCwe54Lsguao7dyWjBCJtdZyKjSdNyPELxbXrb3AFFgc6A8jTL0U1CFwJ0bo8HsyVEsXlOR4xGtVGXqeiLbLYUQr/jvC3N2aBemLZmjCfT2WJyLorRYds9++nbmHuLp31VcMcjCCeJXSdIS+KMrsDw5tsW82mjk5CpAFflAJC3risiTGDubXsl4Zuuipi8QOVzmV/w8hTIcl1UOEHTNpJHTWx5ns2okaqIjo/TdDKXul9Z8ZyAK0Vai1Vk0hK5MoBzcaa1RMnVZky9v4QrbeQb8xTk0XwTUBQpR9rbRs1dWy0Z4Cj5lMOniKtkCphZ46hPFoN5m6QOmuP3pyyYNYspvSvGnrs67dzVDhfFfDg6pgH8ufHAMQVTbFHRDFFXQfd63gpVmTV1394X0XpvF4KBa3YxDg1O1CWNnBWCAAZXWWIAukjMs7hVefFiXwGFamFaHNdLLzGDERobYoZJmz3QZbumyb9yrKRY5TPHDjzQwFeOiVeOiWBzqCtdgUqYNh8li9zlZPGgdebDPhuR2nK4q3B1iXBT5LfGQTc3BvUFdco73lZbLFhF8Ph6sDG95jrlSOtsa7C/68hI3wlBu+Wf1KGqMTNE+CdyCw95MqyMFCoQm+lZItg4q3P7Fdqfz80WPdtPptlRmVmDhDp568OCzbeTtzZBxPKJOXdWR01ahvb7PfK1Sd6F1zZKPDbYTx34NnpNs/UW2ultWd7DilCV8OVopX8e40oJchqbi2ovKmfBJIVBWnstrcoRrpfhQQ85PXxzXtesyIpcC3Q4sk12Wy1JJFskJZGA7LAsDdjmbda7ovgCkQ+DDSpjlcPs9bL+M0B731tDK4Zx7Q+eyjxVlUDH00cYJNAIX2pA5CmKlTq80O5QlMg0JVECbJtusQLLUBxdq47CdByMY7BJYfwwIHe+Dsg6tFGEYDlFl7NEgoeJEsgTLKx95MPLSOGHLgqIyXhqXMaV3wL9+u22J6zjoFIhKWFxENcD/jC0UzdM37DTPw73N/cgc1A5leAEpTGyr0g+f/qod1noe7Ep8ob4rviPhtR3Q+IPaIivibjHcY7oIert2YEnaTxsvd4qcrCeDk/Z8ZiVz41ehyRpIsbuCYogiSm0MzwMnoxwBwPi7oH4lzH8jvlL3Lv8M7os9YJpis/wHvOleln+/Qn2yRonIIVF+pOM9/Gjqwz+x3eZ3bNLPSye4D95GDsfef/B10McDLnsPyhwy1U5P58+FzeAGd5L3LND7BXhFhTGj75/sv8p9mfhPV13KClmxTpL4e+/VMve8lKzbDvMglQRahfBY7+7YE5PEex9KH1zcxlg318kRfLbF8lSHU5tD+6t2l0X/V25gS6FtyG2StAFy0utwG9rHDxwH/rrO8AvLZYXJK7ZbfF8u0tS9xbLsGxbbNP3BH7ayes38XfJQ06/Mvv1fw==</con:value></con:property><con:property><con:name>10_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionUserId</con:name><con:value>9E9EB4A7B060844FE0401F0A07992A93</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EB4A7B060844FE0401F0A07992A93</con:value></con:property><con:property><con:name>10_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertUUID</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>10_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionUserId</con:name><con:value>9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>10_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55795</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d506703d-e0a8-40a1-a539-9d540fc21cc3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBRenewedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectDBRenewedBy",callTC.getPropertyValue("expectDBRenewedBy"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBRenewedBy") == "" || tC.getPropertyValue("expectDBRenewedBy") == null) {
		tC.setPropertyValue("expectDBRenewedBy","");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert difference between EXPIRATION_DATE and CREATED_DATE not greater 24 hours" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def streamhandle = tC.getPropertyValue("streamhandle");

a = new dbUtils.dbStreams(log);

assert a.streamHandleVerifyExpiration(streamhandle) &lt;= 24;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA row"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA a where STREAM_HANDLE_OID =hextoraw('$sh')""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody              = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle   = tC.getPropertyValue("streamhandle");
String expectAccountOID     = tC.getPropertyValue("accountoid");
String expectRightsToken    = tC.getPropertyValue("rightstokenid");
String expectUserOID        = tC.getPropertyValue("expectDBCreateUser");

String expectStatus         = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy = "null";
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
String expectDBUpdatedBy = tC.getPropertyValue("expectDBRenewedBy");

if (tC.getPropertyValue("expectDBDeletedBy") != null) {
	tC.setPropertyValue("expectDBClosedBy",urnnode + tC.getPropertyValue("expectDBDeletedBy"));
	
} 
expectDBClosedBy = tC.getPropertyValue("expectDBClosedBy");

String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
a = new dbUtils.dbNode(log);
String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log);
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);
if (expectDBUpdatedBy == "" || expectDBUpdatedBy == null) {
	expectDBUpdatedBy = "null";
}
expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_BY.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	String dbUpdatedDate  = myXML.ResultSet.Row.UPDATED_DATE.text();
	String dbUpdatedBy    = myXML.ResultSet.Row.UPDATED_BY.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
     
     if(tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp")
     {
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID] - streamCreateNodeType[$streamCreateNodeType]";
	assert dbUserOid == expectUserOID;
     }
	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		log.info "Asserting dbClosedDate is null";
		assert dbClosedDate == "null";
	} else {
		log.info "Asserting dbClosedDate is length()";
		assert dbClosedDate.length() > 0;
	}

	//UPDATED_DATE
	this.log.info "Asserting dbUpdatedDate is null ";
	if (expectErrTypeStreamRenew == "SUCCESS") {
		assert dbUpdatedDate == "null";
	}

	//UPDATED_BY
	this.log.info "dbUpdatedBy[$dbUpdatedBy] expectDBUpdatedBy[$expectDBUpdatedBy]";
	assert dbUpdatedBy == expectDBUpdatedBy;
	
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_76200 - StreamView - PORTAL - Full user can StreamView Stream created by Full user - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_StreamView_ISCPortal_ISCPortalCS</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DCAA781EE06D8E05305991F0AE649</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DCB24A21C06D6E05305991F0AF5F1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>ac33170925c0460b897714a891e4f174</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>AC33170925C0460B897714A891E4F174</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>0B1DCAA8E0A306DCE05305991F0A45E0</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0B1DCAA781EE06D8E05305991F0AE649</ACCOUNT_OID>
      <USER_OID>0B1DCB24A21C06D6E05305991F0AF5F1</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2014-12-26 17:30:01.029</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2014-12-26 11:30:01.029</CREATED_DATE>
      <CREATED_BY>CCE44AF42FD2063BE0401F0A07991776</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0B1DCAA8E0A306DCE05305991F0A45E0</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>CCE44AF42FD2063BE0401F0A07991776</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0B1DCB24A21C06D6E05305991F0AF5F1</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DCB24A21C06D6E05305991F0AF5F1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>55796</con:value></con:property><con:property><con:name>expectDBClosedBy</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBUpdatedBy") == "" || tC.getPropertyValue("expectDBUpdatedBy") == null) {
		tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status ORDER BY UPDATED_DATE
</con:query><con:properties><con:property><con:name>sh</con:name><con:value>${#TestCase#streamhandle}</con:value></con:property><con:property><con:name>status</con:name><con:value>${#TestCase#expectDBStatus}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false"><con:name>a</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep><con:targetType>dbxmlresponse</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String status = tC.getPropertyValue("expectDBStatus");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw('$sh') 
 and STATUS = '$status'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;


try {
	def myXML = new XmlSlurper().parseText(results);
	log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
	assert myXML.ResultSet.Row.size() >= 1;
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBUpdatedBy  = tC.getPropertyValue("expectDBUpdatedBy");
String expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType     = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
int    counter = tC.getPropertyValue("counter").toInteger();

if (expectErrTypeStreamRenew == "SUCCESS") {
	counter++;
} else {
	expectDBUpdatedBy = "";
}

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	this.log.info "Row size is " + myXML.ResultSet.Row.size() + " counter[$counter]";
	assert myXML.ResultSet.Row.size() == counter;
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == counter;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == counter;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == counter;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == counter;
	assert myXML.ResultSet.Row.STATUS.size() == counter;
	assert myXML.ResultSet.Row.CREATED_BY.size() == counter;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == counter;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == counter;

	for (int i = 0; i &lt; counter; i++) {
		this.log.info "----ROW [$i] ----";
		String dbStreamHandle = myXML.ResultSet.Row[i].STREAM_HANDLE_OID.text();
		String dbAccountOid   = myXML.ResultSet.Row[i].ACCOUNT_OID.text();
		String dbRightsToken  = myXML.ResultSet.Row[i].RIGHTS_TOKEN_OID.text();
		String dbUserOid      = myXML.ResultSet.Row[i].USER_OID.text();
		String dbStatus       = myXML.ResultSet.Row[i].STATUS.text();
		String dbCreatedBy    = myXML.ResultSet.Row[i].CREATED_BY.text();
		String dbClosedBy     = myXML.ResultSet.Row[i].CLOSED_BY_ORG_ID.text();
		String dbClosedDate   = myXML.ResultSet.Row[i].CLOSED_DATE.text();
		String dbUpdatedBy    = myXML.ResultSet.Row[i].UPDATED_BY.text();
		String dbUpdatedDate  = myXML.ResultSet.Row[i].UPDATED_DATE.text();
	
		//STREAM_HANDLE_OID
		this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
		assert expectStreamHandle.toUpperCase() == dbStreamHandle;

		//ACCOUNT_OID
		this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
		assert expectAccountOID == dbAccountOid;

		//RIGHTS_TOKEN_OID
		this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
		assert dbRightsToken == expectRightsToken;

		//USER_OID
		this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
		if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
			assert dbUserOid == "";
		} else {
			assert dbUserOid == expectUserOID;
		}

		//STATUS
		this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
		assert dbStatus == expectStatus;

		//CREATED_BY
		this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
		assert dbCreatedBy == expectDBCreatedBy;

		//CLOSED_BY
		this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
		if (expectStatus == "active") {
			assert dbClosedBy == "";
		} else {
			assert dbClosedBy == expectDBClosedBy;
		}

		//CLOSED_DATE
		this.log.info "dbClosedDate [$dbClosedDate]";
		if (expectStatus == "active") {
			assert dbClosedBy == "";
		} else {
			assert dbClosedBy.length() > 0;
		}

		//UPDATED_BY and UPDATED_DATE
		/*
		*  The last row returned will always be the history row that 
		*  StreamCreate made.  Thus, the UPDATED_BY should always be
		*  NULL
		*/
		this.log.info "i[$i] - dbUpdatedDate length [" + dbUpdatedDate.length() + "]";
		if (i == counter - 1) {
			expectDBUpdatedBy = "";
			assert dbUpdatedDate.length() == 0;			
		} else {
			expectDBUpdatedBy = tC.getPropertyValue("expectDBUpdatedBy");
			assert dbUpdatedDate.length() > 0;			
		}
		this.log.info "dbUpdatedDate[$dbUpdatedDate]";
		this.log.info "dbUpdatedBy[$dbUpdatedBy] - expectDBUpdatedBy[$expectDBUpdatedBy]";
		assert dbUpdatedBy == expectDBUpdatedBy;
	}
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_02010 - StreamRenew - DLPCS - Two stream renewals allowed for a stream</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLPCS) Customer Service Test Cases</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>9904BDD1BD5DCB6DE0401F0A0599071B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>9116</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9116</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>9904BDD1BD63CB6DE0401F0A0599071B</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>9904BDD1BD5DCB6DE0401F0A0599071B</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>9904BDD1BD4CCB6DE0401F0A0599071B</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>active</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2011-01-05 06:59:37</EXPIRATION_DATE>
            <CLOSED_DATE/>
            <CLOSED_BY_ORG_ID/>
            <CREATED_DATE>2011-01-04 13:05:33.241</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY>9116</UPDATED_BY>
            <UPDATED_DATE>2011-01-04 13:05:39.87</UPDATED_DATE>
        </Row>
        <Row rowNumber="2">
            <STREAM_HISTORY_OID>9904BDD1BD5ECB6DE0401F0A0599071B</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>9904BDD1BD5DCB6DE0401F0A0599071B</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>9904BDD1BD4CCB6DE0401F0A0599071B</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>active</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2011-01-05 13:05:33.242</EXPIRATION_DATE>
            <CLOSED_DATE/>
            <CLOSED_BY_ORG_ID/>
            <CREATED_DATE>2011-01-04 13:05:33.241</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>9904BDD1BD4CCB6DE0401F0A0599071B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0600</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0600</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>9116</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55797</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Rename Test Cases"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Linked LASP Customer Support Test Cases";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace(" LLP ", " LLPCS ");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Set a Property"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Portal (PORTAL) Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName != "aaaaaa";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Authentication and Authorization"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());""";
def newString = """tC.setPropertyValue("nodeid","5440");""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Requesting Entity Environment") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					
					stepScript = testStepList[j].getScript();
				
					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					stepScript = """import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
""";
					targetTestStep.setScript(stepScript);		

					/*
					*  Replace a part of the script
					*/
					//stepScript = stepScript.replace(oldString, newString);
					//targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="change test case script"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
//def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Coordinator Customer Support Test Cases"; 

def oldString = """tC.setPropertyValue("nodetype","portalcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid50").toString());
""";
def newString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Requesting Entity Environment as COORDINATORCS") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);
					targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					//targetTestStep.setScript(stepScript);		
				}

			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Property" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Remove a Property"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Portal Customer Support Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	

	for( prop in targetTestCase.properties) {
		/*
		*  This will remove all test case properties
		*/
   		//targetTestCase.removeProperty( prop.value.name )
   		log.info "prop.value.name is " + prop.value.name;
   		if (prop.value.name == "cid" || prop.value.name == "alid") {
   			log.info "Removing " + prop.value.name;
   			targetTestCase.removeProperty( prop.value.name )
   		}
   	}
}
/*	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			/*
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}
*/
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Portal (PORTAL) Test Cases"; 
def stepName  = "Change context to DECE";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Coordinator Customer Support Test Cases"; 
def stepName  = "Establish Requesting Entity Environment as ACCESSPORTALCS";
def stepNewName  = "Establish Requesting Entity Environment as COORDINATORCS";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove script for all test cases in a suite"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Link LASP Customer Service Test Cases_P2"; 
def stepName  = "Delay 2";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Allow Adult Policy" searchProperties="true" id="3236b778-871b-4f61-950a-3154ec09f2bc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:FC6CADFE5C6FF074E0401F0A059941F7">
      <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2014-06-22T12:28:17.000Z" CreatedBy="urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_88125 - StreamView - PORTALCS - Policy - AllowAdult - US - MMPA - Can view stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6CADFE5C6FF074E0401F0A059941F7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6C42989A265FEFE0401F0A059962BA</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Allow Adult Policy Establishment" searchProperties="true" id="54f32efa-bc98-4f0f-ae2d-363cc6e484b2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_88125 - StreamView - PORTALCS - Policy - AllowAdult - US - MMPA - Can view stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6CADFE5C6FF074E0401F0A059941F7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="1aeff068-6795-41f0-8d15-9b6c45fd14d7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20019 - StreamView - PORTALCS - Policy - Verification ParentalControl:RatingPolicy - CH - FSK -FSK:16 rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:DLASP_CS_1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6CADE9E3B7C421E0401F0A059941E1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="175d808c-e4ec-4e38-92b6-4a7a0a4a25f5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP14BXESnlFBClC2tKWlhLZ7+6UyzgC+BCfEDo/++rUDpIRCl10JCXkyPnPm4WNfczz3TdvhHCJBA5Zbz33G7cRa1+KI2QHmlNsMz4Hbgtiu03uwzQKy8X6Lluu269pHsTYaVYlRyntjKOWLngX5WpWU8giNy7hSIeYYVaQr5zF0GReYibpmIumP5K86RBW7iOxSrVApV9613CtEXGJLlwLSdqTWvK5NhQhtXV+tVoWVVQiiiW4iZOh/9x5cMoU51hrX24ySQFFj508KHhDwfVIgwVy/1jM+1x63XTphWMQR7GJ552IhHdV06eNxOrnS0r3gddk4SJYtzAJGCfbpJ1b16YGYBl7O8SdBRMV0fjYJAyngPKxJnhhFdqXpWWoXAmUYRhzn+RQbO6wBjCECRiD3MujWtavLupZsHUaY8XEQzXl2+d/4AFuCH4Tg5fk+rR21ywFPVKpxDcTuMuLHnC7hUQ1riAnwXTeBXA6V60cwpusHyuWArrlipx/SO1puq9GmE+Di/zTooDlbkFfsx9AgY8O9f++WmLMSldfitBW2HM80/fs3p54QOHRODGlrt8ujoUyHaLvj/eY97LWfTbIwuy6zRn7v+elGOPiR/uGdyICmgcIxWH7Q3gw7v9Fd8+5XZ8Zb5Sb13c3q5rb9uLLuujPR/3QeNsvW7LM0xDMBftu6jd8ea0wvU/9uKja/o9lsOV322mzdhNakSIJmWFr89YneYnwfVfxR33vpDaxJ30Ls1n0JB5Xq86z2Npo2N6j/S2z0+Us9TeeAf9a2P/NuPPoDROyXagy67VxHdgmLn8VMWaiXHyeudqjEhwtgQmuoXUo77FjKHfVs2cPt2ihV262bJuqUrVK5ZVRvUMlCpVrN6CCnaBjlvchsWRxRbAVsTFUsJbnbsfmZIJnbHJgHUX4ZxFLpuPYDYhsLnOuygTwEAeMwDKQ8G0SES8yqjOFPiy/88ghWm6i2MrXcYyCe2FPkjAVEGU02UEaTB0BoSEEJt5prLgebC1mLBV7GwjcKS1xgEEtpj5TK2maxWtI5nYc+KKb6PPBiHwrhNEwqo/Ptv5nHhCfW9oPj9j9a7kdyIPSz6R1/21dC+nhUOXCVUhNkN+HEHVPc5/Mt7/LJu2gP78QeVedLllVElGyZZD99TYsak3RUvhLbM083HBsy4PpxXmk8b0lJOvbp5S01XapAY9+cBTYKi0K8XMZJP4pFS48kvK4qoiNTd4HEUqc2w2AGTE9R9IsuhZT4UfDUnqUYiylzBRYwl/OTS5YXvAJc4OoV0JWDv770iZEJKUsnYC1O2Vq+fMEoxj8+cohNlJ809+XfKoi8r46dwDqII/OUjwBB2USt1IWwOTMeJJCwVEpZEB2CnwI4FTxrTIucchFyoEaxgPNfckqj6homJIiZ6La1xHComwlPsQnB/nL6BpNIc/pWo//+WMvTZAQIyBcepwm+unJtdQTY5EB7d0HPyK/1k/xm2TW+mb9bDup0POONfwA=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116/User/urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_80000 - StreamView - PORTALCS - StreamHandleInvalid - Test Suite Staging</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D1952779CE3B5E0401F0A059949B4</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158DCEB0F6356C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DCEB0F6336C18E05305991F0A4116</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="f44fa1f8-81aa-4e7e-a9a4-0cb39d9c4268"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:CH:FSK:18</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20020 - StreamView - PORTALCS - Policy - Verification ParentalControl:RatingPolicy - CH - FSK -FSK:18 rating - Full User</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77797</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D658271DD89FCE0401F0A07994A13</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="520c4afc-df34-454e-8c79-4da00e5ad4b2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_88084 - StreamView - PORTALCS - Policy - BlockUnratedContent - US - MMPA - NC-17 - Verification unrated/unknown content not blocked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D656EEBA6C734E0401F0A059964F4</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Manage account consent policy" searchProperties="true" id="04a83af3-a039-4bee-8a28-06c357cfbec6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("username",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Manage Account Consent" id="a8148c54-e54c-4e4d-b53b-03be608ed17e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def responseXML = tC.getPropertyValue("policyGetXML");
def policyOid=null;

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));

def myXML = null;
if(responseXML != null)
{
                try
                {
                                myXML = new XmlSlurper().parseText(responseXML);
                }
                catch(Throwable e)
                {
                                log.info e;                                                                            
                }
}

// Assert that policyListSize is 2 (EMUC and MAC)

log.info myXML.Policy.size()
for(i = 0; i &lt; myXML.Policy.size(); i++)
{        
	policyOid = myXML.Policy[i].@PolicyID.toString().split(':')[5]; 
log.info policyOid;

a.policySetDeleted(policyOid)
//a.sqlPolicyStatus(policyOid,'deleted')
               
}</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc9o6EP0rjPsxA37y8gRmCIQb2qRNMSlpv3SEvAYlRjKSDE5/fSUDDiYkl3tnmGG0Xp09+9CRLgVaxo7fEwK4JIxWsmVMhZ9bO0bKqc+QIMKnaAnCl9gPene3vlOzfLTfYlRGg47x23UajoOtqGrZ0Kh6ba9enbXsetWduZHVxghBY6ZchUhhRIVEVHYMx1IOlvq1Jlbbt9u+Z9daTeuXUfkBXChs5VKzjB2pTHSMhZSJb5qbzaa2cWuMz03Hsmzz8e42wAtYIqN7uc0oD8S7O39cCwFDHOMaZkvz0iz5XIbCD8icIply2MUK34tlmVbbVD6hIPNPRrEXwhGNWL7sI8oowSgmf5Cuzx3IBQsrvXjOOJGL5btJ2JYGrkKGq9j26CfDLFM7E6jEkAtUFQtk77DGEAEHiqHyMB51jE/ndS3fOuGIiojxpSgv/xsfoGuIWQJhVezT2lE7H/BEpbqXgP0RxXEqyBq+6mFNEAax6ybg86Eq9xwikt0SoQY0E5qdeUjvaLmtxoDMQcj/06CD5mxBfqA4he5TO7h33H7zid/agKdf11Hcn4gsaK1/dnICh865oWjtdnk0lMUQbXcsv9z1WD1qfH94aE2e4eHzLwtW9Z9eizWd65vmFbsaDDPUd7MghFSi2+fvo4eXm4dHZC4kvWg27x2UTm+QfOyF05touOFT0bgJGlfuGO7G0z9f/jzD1efhS3QdDNjsInEfe98aLzDj0x9eFhKeuL1kcbEaPV/0o7tV5H6eXKdTJQHiZvHPpm65Eyvzfj3xi4Y9xp0inQP+Zdv+zAfp7Amw3C/1GIwGlaHqEpIfi5m2kLAa5a5+osVHSKDS6OpdWjv8VMkdCX3Vw+3arreG3vXAux5eeZbjDq6tums12217aPWsRr29F5ktiyOKfUYjomNpyd2OzccE8dIXQEPg1TVLldIJ4wPEAZKoMqJjdQgYFTBhSp5tmWYrm9Xd9WyVNqWFExdn7oq0jMpXJr/Rb7wXSeAlTbadkiaPAZOEgBZuPddCDbaQqhYrtE5lbNfWqEYhVdLOtcr6jteqm4Iskxg0U3PJwjSGWrJI8sqYYvvvVBEWuXVw2wvuf/eD3/mBMN9N7/jbvhLKJyTaQeiUrkB1E07cMe4+nzd5N07eRXv4XhoSfb5UWSUneMuk/Ol1WvSYFKPymtieebHh2FACN4/zKuKFa4KLsS8ub6XpSgW6++askF1b1dL1Os374XmuyRW8qStiWo4ZAE6VTr1M2DNQs0Axz7oUCuJHwQt7mWIqFzSQSMJSzU8lX57xCghA6FfASA1+du4ToxRSlU5CJk/Z+rF6wWjGHz5ysI+1nzLfq78N4+Frx05gHcRReapHgCR0rlf6Qnh5ZzwwU7BESRnjh+CnAE4FLxuLIhdcpBqoWSrh/S8VrVEdA2HMUipHAyM3HOpmzlO+JOC/Or2ByaW5eKuRf3+sVUk+AhjUC0+QHF9fub4+AnR+oL27oO/Ir/OR/JbZdd+Y31oO6nQ8492/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_59103 - StreamView - PORTALCS - StreamOwnerMismatch - Stream view by Portalcs_ManageAccountConsentNotPresent_DifferentOrg_DeletedStream - 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e49350ab-f189-4e52-ba89-4c768adb0cf7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8148c54-e54c-4e4d-b53b-03be608ed17e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Manage account consent policy" searchProperties="true" id="39b872e0-9934-46e6-a2ce-c1fdd6754654"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageAccountConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "ManageAccountConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:accountid:org:dece:"+tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_59102 - StreamView - PORTALCS - Stream view by Portalcs_ManageAccountConsentPresent_DifferentOrg_ActiveStream - 200 Ok</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:iscportalcs1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value>158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="914_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('POST - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTS");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>0912_assertion_date</con:name><con:value>2/2/11</con:value></con:property><con:property><con:name>0914_assertion_date</con:name><con:value>1/4/11</con:value></con:property><con:property><con:name>25_assertion_date</con:name><con:value>1/6/11</con:value></con:property><con:property><con:name>26_assertion_date</con:name><con:value>1/7/11</con:value></con:property><con:property><con:name>80080010_assertion_date</con:name><con:value>1/5/11</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>431</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2011/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>0910_assertion_date</con:name><con:value>2/2/11</con:value></con:property><con:property><con:name>10_assertion_date</con:name><con:value>2/10/11</con:value></con:property><con:property><con:name>20_assertion_date</con:name><con:value>2/11/11</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55785</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - GET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - GET"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="10_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
		 	status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();

			/*
			assert myXML."saml2:Assertion".size() == 1;
			assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
			*/
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size() == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;

			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;

			// ErrorLink
			this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";

			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserId",userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>4244</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a" IssueInstant="2011-03-16T18:29:48.129Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>cUBmcLsHvMfQbsz8wyCcVA3FgQU=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
grCNJOvpGhUDbf+We2ulWMum9oWEFG5Zssif+KTJ/XwXZRX75AG0EbqqMqMjRY9uA/WvDCo9HxPd
36UWGPQHA8RwNWEau0hMCG+8GMwG40Rddz5UoQUhN2p6hnYUMgjTvo+W7KaAz6xEv0vyZZlUxw1x
9sZ0acFRAU+oDHC3eqE=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="7DECB57F5AC79ED4A3AE5E4093C0B07E" NotOnOrAfter="2011-03-17T18:29:48.129Z" Recipient="https://saml.example.org/login/POST"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-03-16T18:29:38.129Z" NotOnOrAfter="2012-03-16T18:29:48.129Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:10</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:11</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-03-16T18:29:48.129Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55786</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="042a57ff-8660-46a7-861d-2647b109491e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
tC.setPropertyValue("expectDBModifiedBy",null)
tC.setPropertyValue("username",null)
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBModifiedBy",callTC.getPropertyValue("expectDBModifiedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID = hextoraw('$sh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="iscportal1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		errId = "policy:ManageAccountConsentRequired";
		break;
	case "STREAM_HANDLE_ID_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
def expectSH        = "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length

////assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def RequestingUserID = myXML.RequestingUserID;
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

          //RequestingUserID
		if(tC.getPropertyValue("nodetype") == "llpcs" || tC.getPropertyValue("nodetype") == "dlpcs" || tC.getPropertyValue("nodetype") == "dececs")
		{
			tC.setPropertyValue("assertionUserIdFULL","");
		}
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		if(tC.getPropertyValue("nodetype") == "dlp"){
		assert RequestingUserID == "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
		}

		
		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + tC.getPropertyValue("expectDBModifiedBy");
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_79000 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>158F96859AF0367CE05307991F0A7634</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>EC0F3695381647ADB52376B61DE97AEE</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>158F785ABC1D3BB7E05307991F0A9B55</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>158F4EF7C136022CE05307991F0A4EA1</ACCOUNT_OID>
      <CREATED_BY_USER_OID>158F51D879204737E05305991F0AF9FB</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>&lt;time of day&gt;</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-05-08 15:33:52.923</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-05-08 09:33:52.923</CREATED_DATE>
      <CREATED_BY_NODE_OID>CCE44AF42FD2063BE0401F0A07991776</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotActive">
      <Reason Language="en">The account is not active.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1/Stream/urn:dece:streamhandleid:org:dece:5E650C298AE740C09EF12849323B84B5</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The account is not active.</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AccountNotActive</con:value></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE7AD2AAA523855C3E0401F0A05993AC4</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportal1_concat.pem</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="6b7d6807-b38d-4e48-9382-1d8b954e3fe5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));

if (tC.getPropertyValue("expectErrTypeStreamDelete") == null || tC.getPropertyValue("expectErrTypeStreamDelete") == "null") {
	tC.setPropertyValue("expectErrTypeStreamDelete", "SUCCESS");
}
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter", "SUCCESS");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - StreamDelete"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - StreamDelete" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;



this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return StreamDelete Attributes"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

log.info "expectErrTypeStreamDelete is " + tC.getPropertyValue("expectErrTypeStreamDelete");

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	log.info "cnt [$cnt]";
	def callTSname = tC.getPropertyValue("sName");
	def callTCname = tC.getPropertyValue("tName");
	def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

	callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBStatus","deleted");
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBStatus_" + cnt,"deleted");
}
	</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZrc9o6EP0rjPsxA37y8gRmCIQb2qRNMSlpv3SEvAYlRjKSDE5/fSUDDiYkl3tnmGG0Xp09+9CRLgVaxo7fEwK4JIxWsmVMhZ9bO0bKqc+QIMKnaAnCl9gPene3vlOzfLTfYlRGg47x23UajoOtqGrZ0Kh6ba9enbXsetWduZHVxghBY6ZchUhhRIVEVHYMx1IOlvq1Jlbbt9u+Z9daTeuXUfkBXChs5VKzjB2pTHSMhZSJb5qbzaa2cWuMz03Hsmzz8e42wAtYIqN7uc0oD8S7O39cCwFDHOMaZkvz0iz5XIbCD8icIply2MUK34tlmVbbVD6hIPNPRrEXwhGNWL7sI8oowSgmf5Cuzx3IBQsrvXjOOJGL5btJ2JYGrkKGq9j26CfDLFM7E6jEkAtUFQtk77DGEAEHiqHyMB51jE/ndS3fOuGIiojxpSgv/xsfoGuIWQJhVezT2lE7H/BEpbqXgP0RxXEqyBq+6mFNEAax6ybg86Eq9xwikt0SoQY0E5qdeUjvaLmtxoDMQcj/06CD5mxBfqA4he5TO7h33H7zid/agKdf11Hcn4gsaK1/dnICh865oWjtdnk0lMUQbXcsv9z1WD1qfH94aE2e4eHzLwtW9Z9eizWd65vmFbsaDDPUd7MghFSi2+fvo4eXm4dHZC4kvWg27x2UTm+QfOyF05touOFT0bgJGlfuGO7G0z9f/jzD1efhS3QdDNjsInEfe98aLzDj0x9eFhKeuL1kcbEaPV/0o7tV5H6eXKdTJQHiZvHPpm65Eyvzfj3xi4Y9xp0inQP+Zdv+zAfp7Amw3C/1GIwGlaHqEpIfi5m2kLAa5a5+osVHSKDS6OpdWjv8VMkdCX3Vw+3arreG3vXAux5eeZbjDq6tums12217aPWsRr29F5ktiyOKfUYjomNpyd2OzccE8dIXQEPg1TVLldIJ4wPEAZKoMqJjdQgYFTBhSp5tmWYrm9Xd9WyVNqWFExdn7oq0jMpXJr/Rb7wXSeAlTbadkiaPAZOEgBZuPddCDbaQqhYrtE5lbNfWqEYhVdLOtcr6jteqm4Iskxg0U3PJwjSGWrJI8sqYYvvvVBEWuXVw2wvuf/eD3/mBMN9N7/jbvhLKJyTaQeiUrkB1E07cMe4+nzd5N07eRXv4XhoSfb5UWSUneMuk/Ol1WvSYFKPymtieebHh2FACN4/zKuKFa4KLsS8ub6XpSgW6++askF1b1dL1Os374XmuyRW8qStiWo4ZAE6VTr1M2DNQs0Axz7oUCuJHwQt7mWIqFzSQSMJSzU8lX57xCghA6FfASA1+du4ToxRSlU5CJk/Z+rF6wWjGHz5ysI+1nzLfq78N4+Frx05gHcRReapHgCR0rlf6Qnh5ZzwwU7BESRnjh+CnAE4FLxuLIhdcpBqoWSrh/S8VrVEdA2HMUipHAyM3HOpmzlO+JOC/Or2ByaW5eKuRf3+sVUk+AhjUC0+QHF9fub4+AnR+oL27oO/Ir/OR/JbZdd+Y31oO6nQ8492/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:158F4ED500BD023DE05307991F0A0659</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F912BCD5BC8C4D4DBA920DF226C788F8</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_59103 - StreamView - PORTALCS - StreamOwnerMismatch - Stream view by Portalcs_ManageAccountConsentNotPresent_DifferentOrg_DeletedStream - 403 Forbidden</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>55789</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE7A963E9CAFF796FE0401F0A05993AED</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158F4ED4EFB4023DE05307991F0A0659</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
//tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == null || tC.getPropertyValue("expectErrTypeStreamRenew") == "null") {
	tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">       
<StreamClientNickname>Release 4</StreamClientNickname>        
<RequestingUserID>${#TestCase#assertionUserIdFULL}</RequestingUserID>       
<RightsTokenID>${#TestCase#rightstokenidFULL}</RightsTokenID>        
<TransactionID>Sprint 4.1</TransactionID>         
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;


switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == tC.getPropertyValue("streamhandleFULL");
		//RequestingUserID
		if(tC.getPropertyValue("nodetype") == "llpcs" || tC.getPropertyValue("nodetype") == "dlpcs")
		{
			tC.setPropertyValue("assertionUserIdFULL","");
		}
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBUpdatedBy") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("expectDBUpdatedBy");

		/*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + tC.getPropertyValue("nodeid");
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return Attributes"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cnt = tC.getPropertyValue("counter");
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} else {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBUpdatedBy",null);
}
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVdZk6LKEn73VxjOo2EDgiBGd0cUm6LiBm68TLCUgLLJIuKvP4W2Tm8zd865/WJXkmR+uZD51XNqBH67B9IUJpkXhXVZeGn8NCma6pi7dqtjdOwWRZp0i4UdumUwpr2DJGGYLGzU5TTNoRymmRFmL402TpAtnG21KQ1nem28R1JPdJvUG/UVTFJkGqk84Y36OfDDtHd1+9LIk7AXGamX9kIjgGkvs3oqUMY9pNkz7pgar883lFeHyaubZXEPw6wnG1rQ960nKwqwZ+yDzrOd9lTPCY0sT+CbTzt9aby9WxTFU0E+RYmDtXEcx3AWQzp26jk/Gq+1+8vQlsNddDvzRhiFnmX43sWoQCkwcyO7DnwnSrzMDX5jmsAIvDLdgmerZRFU+KOB/XJwRfeXlj6ATFKjlboGcTe2gDuYwNCC9eVCfmn8+LsK3t7VEiNMd1ESpJ/O/w4SDE/Qj2Jot9J7ZHd0f2/xm3S9PkOrJ4eWn6feCU6qNokNC6b1WQJ33nnspaj57LR+LX/9nN47DFr/piTP2HucCDb2TWYEz4Fp9l/q9b5WNysrw8/ha39wuZQMLha5Px0c+sQuC5ZtNcclQ3m5QnivfAP1KPXb+XOjPvrq7aWNuBzPMyZjTUs5rpsxMetYQ0B1gq60VWJrpueyOC5GsD0ufH2x3GI5o5HxBkOZVo0zv+DYzNYzBgNt51hj913bZMpJ6Ouu6Q5gPmNPpUIcDi7NXMQTZU78vWlfuspsMkmy1Dngmw3DdKVy64bSZr3O5MwclPoKCxdGrUzWzWU8mXXKUhvSR/G0wl9+xfQ+hiquESyvQVb/bzo4KxiZ8Tjw1aTYoc8zg6+KLPNNgecB5B1QyBxwZG58ARPOORzdg9dnC5wD86UEBFAqC1AIzlZYzecjsbBXK19fyZLEKQuqGICtUEMPBPG8EvTNEDfWerxtS7iucpy9WUQmOYztwaEYuNZE0ZRiosmlshfPE03E11eZc0bni7JXiKm2JGvrPccqC7EQiqtHQSzcib5exNslW1gXca4Aqg+Ipci7ykALVoRFLlxrL44VcLjKOVfhVyvlLGpgVuOcyQrFpvGSHluBHZuB774zPkDGNbu/Ks2+n+sXca/wYp9Xj31VNklhLg7BYrs016uDsZZONWswAebdo9fxjE1UOHq3EObb4SjSZfdkTcBc5Lg5QOnCgSL3hyDqc0ChgHe+8HuOjnhbKrBhO601Wb9Pb0rvuEmNPu4bRLdLbMdrenakBTFs6qPc3LuKu5GmzZFqn5Zsxl626al5og2PsM7xbr4RB9novBvM1Zo5E84ba9C0nSHmX1gpUZghSC6l6yvOIlvT07Q0vd1uzW2mlM/sfIVcxDt/F5dpU4vmhwSnOUi2sW15GmU14CgcAP39cs/NFa5bJdWWi/lW4QwgiVkOLvt2NmqvjsPBybe2JIjOo/V0f3grjC0UIocVcxG1lVjrCsCuijBQl6K0B0vOcRLOESVubglgvpVHxRblazlAyp/zKF3z6IgcEEkd0OygRi5xNptmKkWBMuSWocS6yvG8tukAZ45QHKuTmCqUdLIL9XV0UAIvWSa5uhyNJuOzqeX9wx7Nqh2ujk6kXhNPhxh4k5HmHoRIMGbxdpvFzdBKrEyOA0U+X6Z6uu96ZoAPmx2Cm+GCxbSXgVks+4aojxJHJUaDRTgjGbaW5rtyEDT33WLd1FQ6Zmw+3AllienJCo9AJLGLztE+t9sHd1mM6WI3BAfTaE/OPsuVrDjSNatYzEdrNWh2ap3TeBzgFw2jJvG0UPsFJc7nTdLmtIGWxom3zbvOOZmGdntrZPRJx1e0F/sHtp0fNComV06AijU72TGjzGpzamPpgcPE1hBbYCcgMrux3C/Ni3GJg6l1G6Cfp8NDeJsf2PvJ8mH03EmHiroVWtn9WC0gWahLaCsY2Z8JTCXx7NbuqtqLKxaUZjDMGq/VWxV56eWI4nh2D62M21lkCF4iuS4lkrxIU7yIUzgh4QBnWJZG7XJnOTcUnyDyUbjzKl8Vj7ttqT8DtIJeCkMbJq1TlFsuTBt/sFjlqy6HC7R+ozCFWoR4IkGzPN+huhwPGArnJPQHaJJnhK4k8YIkNuqTKJuG0wTsMph84IgE/oEjLqDlxR6siGS1TVO0TtMMpeRonPLMJ55OxlMIc0Q1k4rt9dpUt4OlXhD7sAKMBZGd+/ApduNrgrD09ttuGVZ6lS5E7aes8tdN/9sQPz+7ZwPp2F6lkFbxcBBVFH5DeNv3YL4ETX1LjO/mQW571UJHqc0Sz7oh+fjoV8dUrfJoF2EM1Nkd9EP3X7z7k1d/Ev/RwPj/NYBq8vVN7A85wT6X4+HIPnnv3N4vDogLI7b0em+oo/F0fMpPp/zaQkzFBBNkHiMwnMFUaOWIzpVadIAh9jCB/RWTfqD+5Pkh/4gvz9xQzdA0ClDD16/Hv7hGqTCtrlEy+mDPf3tH++AS5S2D5+w7Ge+j21aF+I8XMqtnVXpIPEM/RZTYv8r1ja13flCc1fj1Qqc6Vby5/E1TWBEy66ERHCXvjX9n4DvnH4WPJD+wZKibzDyDv39Sr2brS8OwrCgPM1loXAXv5/0VZ1bGsPdL6YuZK3N9u4qc099eRTbKWEWTNzAaD13vfyu3vGu7WOgSjvSvWF4aZ3SrRs5D591+eQP4dcWQNEWREiF12E8rhn8k8EMkr1/EXyXvcvr5e3j9Bw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1592</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:E7A94DE933FB4690E0401F0A0799387C</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Customer Support Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>E7ABA0ADD7C4D6B2E0401F0A07993839</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:E7ABA0ADD7C4D6B2E0401F0A07993839</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_16121 - StreamView - LLPCS - API invocation following Two StreamRenews by LLPCS - 200 OK</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130924_124953</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:E7ABA0ADD7C4D6B2E0401F0A07993839" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:E7A94DE933FB4690E0401F0A0799387C</RightsTokenID>
   <TransactionID>1.0.3.1.S</TransactionID>
   <ExpirationDateTime>2013-10-02T06:22:15.000Z</ExpirationDateTime>
   <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2013-10-01T11:21:54.757Z" CreatedBy="urn:dece:org:org:dece:LLASP_CS_1" ModificationDate="2013-10-01T11:23:06.036Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2013-10-01T11:21:54.757Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
         <Prior ModificationDate="2013-10-01T11:21:54.757Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>E7ABA0ADD7C5D6B2E0401F0A07993839</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>E7ABA0ADD7C4D6B2E0401F0A07993839</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>E7A94DE933FB4690E0401F0A0799387C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E71CF33644401F59E0401F0A07996EBC</ACCOUNT_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-10-01 17:21:54.757</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-10-01 11:21:54.757</CREATED_DATE>
      <CREATED_BY_NODE_OID>CCE44AF42FCD063BE0401F0A07991776</CREATED_BY_NODE_OID>
    </Row>
    <Row rowNumber='2'>
      <STREAM_HISTORY_OID>E7A60952344EB3FCE0401F0A07993846</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>E7ABA0ADD7C4D6B2E0401F0A07993839</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>E7A94DE933FB4690E0401F0A0799387C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E71CF33644401F59E0401F0A07996EBC</ACCOUNT_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-10-02 00:22:15.0</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-10-01 11:21:54.757</CREATED_DATE>
      <CREATED_BY_NODE_OID>CCE44AF42FCD063BE0401F0A07991776</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-10-01T11:21:54.757Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-10-02T06:22:15.000Z</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55791</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE7ABA0ADD7C4D6B2E0401F0A07993839</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HEAD - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="HEAD - StreamView"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="HEAD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="HEAD - StreamView" mediaType="application/xml" sslKeystore="0910_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19100 - StreamView - LLP - Stream view using HEAD method for account with single stream handle present</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CFBAAC5E52F8A728E0401F0A07993E68</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CFBAAC5E52F8A728E0401F0A07993E68</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CFBAAC5E52ECA728E0401F0A07993E68</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b0e4c57e-5526-49b3-9b24-4d0252a5c891</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-08-08T08:22:47.787Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-08-09T04:23:01.000Z</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>CFBAAC5E52F9A728E0401F0A07993E68</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>CFBAAC5E52F8A728E0401F0A07993E68</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>CFBAAC5E52ECA728E0401F0A07993E68</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2012-11-30 23:24:40.404</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2012-11-30 17:24:40.404</CREATED_DATE>
      <CREATED_BY_NODE_OID>0910</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:C6BDD053D2DF2C29E0401F0A07990628" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:C6BDD053D2D32C29E0401F0A07990628</RightsTokenID>
   <ExpirationDateTime>2012-08-09T04:23:01.000Z</ExpirationDateTime>
   <SubDividedGeolocation ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0910" CreationDate="2012-08-08T08:22:47.787Z" ModifiedBy="urn:dece:org:org:dece:0910" ModificationDate="2012-08-08T08:23:18.577Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:0910" ModificationDate="2012-08-08T08:22:47.787Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1243</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamViewQHost" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="0910_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19101 - StreamView - LLP - Stream view using q host</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CFBAAC5E5308A728E0401F0A07993E68</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CFBAAC5E5308A728E0401F0A07993E68</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CFBAAC5E52FCA728E0401F0A07993E68</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b0e4c57e-5526-49b3-9b24-4d0252a5c891</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-11-30T17:25:25.236Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-11-30T23:25:25.236Z</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>CFBAAC5E5309A728E0401F0A07993E68</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>CFBAAC5E5308A728E0401F0A07993E68</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>CFBAAC5E52FCA728E0401F0A07993E68</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2012-11-30 23:25:25.236</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2012-11-30 17:25:25.236</CREATED_DATE>
      <CREATED_BY_NODE_OID>0910</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:CFBAAC5E5308A728E0401F0A07993E68" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:CFBAAC5E52FCA728E0401F0A07993E68</RightsTokenID>
   <TransactionID>1.0.3.1.S</TransactionID>
   <ExpirationDateTime>2012-11-30T23:25:25.236Z</ExpirationDateTime>
   <SubDividedGeolocation ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0910" CreationDate="2012-11-30T17:25:25.236Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1031</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamViewInvalidDST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("SetDST",callTC.getPropertyValue("SetDST"));
tC.setPropertyValue("StreamCreateAssertion",callTC.getPropertyValue("StreamCreateAssertion"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="SetAuthorization"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import CacheTestManager.CacheTestManager;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.WsdlProject;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def CommonLib = "Test Cases Containing APIs";
def TcName = "StreamViewInvalidDST"
def TpName =  testSuite.getProject().getName();  

def Stream = "GET - StreamView";

def cc = new CacheTestManager(TpName, CommonLib, TcName, Stream) 



if(testCase.getPropertyValue("SetDST") == "YES"){	
log.info cc.setReqHeaders("Authorization","SAML2 assertion="+ testCase.getPropertyValue("StreamCreateAssertion"));
}

else if(testCase.getPropertyValue("SetDST") == "INVALID")
{
	log.info cc.setReqHeaders("Authorization","SAML2 assertion=");
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="5480_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		errId = "ManageAccountConsentRequired";
		break;
	case "STREAM_HANDLE_ID_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_76010 - StreamView - PORTAL - Stream view for account with single stream handle present with invalid DST</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5480</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DA6704DC84BFDA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DA6704DC84BFDA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:DA6704DC84B2DA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_47ce2b6d-3d24-4246-aa3c-cf8402f09feb</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A8A874EEB246D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>DA6704DC84C0DA84E0401F0A07997B3C</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>DA6704DC84BFDA84E0401F0A07997B3C</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>DA6704DC84B2DA84E0401F0A07997B3C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-04-15 19:13:38.233</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-04-15 13:13:38.233</CREATED_DATE>
      <CREATED_BY_NODE_OID>0914</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1122">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA6704DC84BFDA84E0401F0A07997B3C</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>766</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA6704DC84BFDA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>SetDST</con:name><con:value>INVALID</con:value></con:property><con:property><con:name>StreamCreateAssertion</con:name><con:value>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</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>adb9804f-1831-4ee5-abc7-850b9b034361</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamViewWithoutDST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("SetDST",callTC.getPropertyValue("SetDST"));
tC.setPropertyValue("StreamCreateAssertion",callTC.getPropertyValue("StreamCreateAssertion"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="5480_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		errId = "ManageAccountConsentRequired";
		break;
	case "STREAM_HANDLE_ID_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_76010 - StreamView - PORTAL - Stream view for account with single stream handle present with null DST</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5480</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DA66F1A9FBD418ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DA66F1A9FBD418ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:DA66F1A9FBC718ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_47ce2b6d-3d24-4246-aa3c-cf8402f09feb</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A8A874EEB246D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>DA66F1A9FBD518ACE0401F0A07994AD2</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>DA66F1A9FBD418ACE0401F0A07994AD2</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>DA66F1A9FBC718ACE0401F0A07994AD2</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-04-15 19:11:57.955</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-04-15 13:11:57.955</CREATED_DATE>
      <CREATED_BY_NODE_OID>0914</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1122">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA66F1A9FBD418ACE0401F0A07994AD2</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>766</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA66F1A9FBD418ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>SetDST</con:name><con:value>NO</con:value></con:property><con:property><con:name>StreamCreateAssertion</con:name><con:value>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</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>adb9804f-1831-4ee5-abc7-850b9b034361</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="94d69e7a-17bb-42e7-9e11-74a4abed61eb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7",/*"us:tvpg:tv-y7-fv",*/"us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT= ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH= ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

           //case "${urnRating}ca:chvrs:e":
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
         case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:CH:FSK:18</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value><![CDATA[<dece:Resource>urn:dece:type:rating:CH:FSK:0</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:6</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:12</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:16</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:18</dece:Resource>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6C42992C46A678E0401F0A059962BE</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalConrolRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="cf912251-5070-43c3-bd3f-c57e59fa3b5c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" ) {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	
} else {
	log.info "ERROR!";
	assert 1 == 2;
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP14BXESnlFBClC2tKWlhLZ7+6UyzgC+BCfEDo/++rUDpIRCl10JCXkyPnPm4WNfczz3TdvhHCJBA5Zbz33G7cRa1+KI2QHmlNsMz4Hbgtiu03uwzQKy8X6Lluu269pHsTYaVYlRyntjKOWLngX5WpWU8giNy7hSIeYYVaQr5zF0GReYibpmIumP5K86RBW7iOxSrVApV9613CtEXGJLlwLSdqTWvK5NhQhtXV+tVoWVVQiiiW4iZOh/9x5cMoU51hrX24ySQFFj508KHhDwfVIgwVy/1jM+1x63XTphWMQR7GJ552IhHdV06eNxOrnS0r3gddk4SJYtzAJGCfbpJ1b16YGYBl7O8SdBRMV0fjYJAyngPKxJnhhFdqXpWWoXAmUYRhzn+RQbO6wBjCECRiD3MujWtavLupZsHUaY8XEQzXl2+d/4AFuCH4Tg5fk+rR21ywFPVKpxDcTuMuLHnC7hUQ1riAnwXTeBXA6V60cwpusHyuWArrlipx/SO1puq9GmE+Di/zTooDlbkFfsx9AgY8O9f++WmLMSldfitBW2HM80/fs3p54QOHRODGlrt8ujoUyHaLvj/eY97LWfTbIwuy6zRn7v+elGOPiR/uGdyICmgcIxWH7Q3gw7v9Fd8+5XZ8Zb5Sb13c3q5rb9uLLuujPR/3QeNsvW7LM0xDMBftu6jd8ea0wvU/9uKja/o9lsOV322mzdhNakSIJmWFr89YneYnwfVfxR33vpDaxJ30Ls1n0JB5Xq86z2Npo2N6j/S2z0+Us9TeeAf9a2P/NuPPoDROyXagy67VxHdgmLn8VMWaiXHyeudqjEhwtgQmuoXUo77FjKHfVs2cPt2ihV262bJuqUrVK5ZVRvUMlCpVrN6CCnaBjlvchsWRxRbAVsTFUsJbnbsfmZIJnbHJgHUX4ZxFLpuPYDYhsLnOuygTwEAeMwDKQ8G0SES8yqjOFPiy/88ghWm6i2MrXcYyCe2FPkjAVEGU02UEaTB0BoSEEJt5prLgebC1mLBV7GwjcKS1xgEEtpj5TK2maxWtI5nYc+KKb6PPBiHwrhNEwqo/Ptv5nHhCfW9oPj9j9a7kdyIPSz6R1/21dC+nhUOXCVUhNkN+HEHVPc5/Mt7/LJu2gP78QeVedLllVElGyZZD99TYsak3RUvhLbM083HBsy4PpxXmk8b0lJOvbp5S01XapAY9+cBTYKi0K8XMZJP4pFS48kvK4qoiNTd4HEUqc2w2AGTE9R9IsuhZT4UfDUnqUYiylzBRYwl/OTS5YXvAJc4OoV0JWDv770iZEJKUsnYC1O2Vq+fMEoxj8+cohNlJ809+XfKoi8r46dwDqII/OUjwBB2USt1IWwOTMeJJCwVEpZEB2CnwI4FTxrTIucchFyoEaxgPNfckqj6homJIiZ6La1xHComwlPsQnB/nL6BpNIc/pWo//+WMvTZAQIyBcepwm+unJtdQTY5EB7d0HPyK/1k/xm2TW+mb9bDup0POONfwA=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116/User/urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D658271DD89FCE0401F0A07994A13</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158DCEB0F6356C18E05305991F0A4116</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="da2c8098-fe05-4977-9427-62f273cb56e2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D658271DD89FCE0401F0A07994A13</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="c6d7bdd9-443f-495e-998f-0a15163493ef"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="4aa2278d-4dc9-429a-a783-bc94ed75f038"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+o4EP0rKP14BXESnlFBClC2tKWlhLZ7+6UyzgC+BCfEDo/++rUDpIRCl10JCXkyPnPm4WNfczz3TdvhHCJBA5Zbz33G7cRa1+KI2QHmlNsMz4Hbgtiu03uwzQKy8X6Lluu269pHsTYaVYlRyntjKOWLngX5WpWU8giNy7hSIeYYVaQr5zF0GReYibpmIumP5K86RBW7iOxSrVApV9613CtEXGJLlwLSdqTWvK5NhQhtXV+tVoWVVQiiiW4iZOh/9x5cMoU51hrX24ySQFFj508KHhDwfVIgwVy/1jM+1x63XTphWMQR7GJ552IhHdV06eNxOrnS0r3gddk4SJYtzAJGCfbpJ1b16YGYBl7O8SdBRMV0fjYJAyngPKxJnhhFdqXpWWoXAmUYRhzn+RQbO6wBjCECRiD3MujWtavLupZsHUaY8XEQzXl2+d/4AFuCH4Tg5fk+rR21ywFPVKpxDcTuMuLHnC7hUQ1riAnwXTeBXA6V60cwpusHyuWArrlipx/SO1puq9GmE+Di/zTooDlbkFfsx9AgY8O9f++WmLMSldfitBW2HM80/fs3p54QOHRODGlrt8ujoUyHaLvj/eY97LWfTbIwuy6zRn7v+elGOPiR/uGdyICmgcIxWH7Q3gw7v9Fd8+5XZ8Zb5Sb13c3q5rb9uLLuujPR/3QeNsvW7LM0xDMBftu6jd8ea0wvU/9uKja/o9lsOV322mzdhNakSIJmWFr89YneYnwfVfxR33vpDaxJ30Ls1n0JB5Xq86z2Npo2N6j/S2z0+Us9TeeAf9a2P/NuPPoDROyXagy67VxHdgmLn8VMWaiXHyeudqjEhwtgQmuoXUo77FjKHfVs2cPt2ihV262bJuqUrVK5ZVRvUMlCpVrN6CCnaBjlvchsWRxRbAVsTFUsJbnbsfmZIJnbHJgHUX4ZxFLpuPYDYhsLnOuygTwEAeMwDKQ8G0SES8yqjOFPiy/88ghWm6i2MrXcYyCe2FPkjAVEGU02UEaTB0BoSEEJt5prLgebC1mLBV7GwjcKS1xgEEtpj5TK2maxWtI5nYc+KKb6PPBiHwrhNEwqo/Ptv5nHhCfW9oPj9j9a7kdyIPSz6R1/21dC+nhUOXCVUhNkN+HEHVPc5/Mt7/LJu2gP78QeVedLllVElGyZZD99TYsak3RUvhLbM083HBsy4PpxXmk8b0lJOvbp5S01XapAY9+cBTYKi0K8XMZJP4pFS48kvK4qoiNTd4HEUqc2w2AGTE9R9IsuhZT4UfDUnqUYiylzBRYwl/OTS5YXvAJc4OoV0JWDv770iZEJKUsnYC1O2Vq+fMEoxj8+cohNlJ809+XfKoi8r46dwDqII/OUjwBB2USt1IWwOTMeJJCwVEpZEB2CnwI4FTxrTIucchFyoEaxgPNfckqj6homJIiZ6La1xHComwlPsQnB/nL6BpNIc/pWo//+WMvTZAQIyBcepwm+unJtdQTY5EB7d0HPyK/1k/xm2TW+mb9bDup0POONfwA=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158DCEB0F6336C18E05305991F0A4116/User/urn:dece:userid:org:dece:158DCEB0F6356C18E05305991F0A4116/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D1952779CE3B5E0401F0A059949B4</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158DCEB0F6336C18E05305991F0A4116</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158DCEB0F6356C18E05305991F0A4116</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="58ccf674-b5c4-4b9a-879d-7823261c2f1c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="iscportalcs1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVbZbuo6FH0/XxGlj0fBSUiARAWJqb3pfICOL1euswG3iZ3GDkO//jihoUBpb3slJOSd7bXXHrzsQ4HjyPbbQkAqKWda0Gvq/1bN+thqWK5BsDs2HOy4hletqeWjGYJJGphUQdcCITIImJCYyaZum5ZjmDXDtkeW7ZuWX3Urjus96NoNpEJBK5eKqWuLOGLCL8I29SxlPseCCp/hGIQviT9sn5/5ytPHJSe9dbhiWQRMW1MpEx8hUgmBQBSRCuExOkRbPoeh8Id0wrDMUniLGYqm/rZ3Pp9X5tUKTyfINk0TmR5SPqGgkwO99avcDGHAxny17mLGGSU4oq84J3UOcspDrR1NeErlNP4E2kKWmUMbsCAGsRx2oKP3AAW7byJtkUwFNsQUWyXYAMaQAiOgXQ+Cpn7wvQ6u9o5SzMSYp7HYWf+MErAZRDyB0BBlZiW77yPuKVfrEIgfMBJlgs7gIh+TBBMQ2lUKY7o4o0INXyi0ov3aQqgfLacMyE/acog2uSrqaE91enQCQv6fnm32a4Vyg6MMWvdddAIN0WZoVJ+fIPS7c2PP7+ad62feLChsOq9Irdv9tt4d1vVsvW1KG2NnOe1i+7bRfXyuLifBUjzehPf9Ycfi7vx+/nQ7ODbrvxdmvU1OHFO6pB+fD7y6c3oqksH19W12hV6SwIovzn69hPezi+Eoyib9hntzdE97rvPcfp0eTzpnd53XYPBw+k92CdFTFY6eXs6D4KhnPqJYkNHgT+hU7ej4Ia3W/5yOjvn8F3Pq157dtx5Gtc7D5VUap43me06bOWwbS0kYZo9PQGS5zMcj6GlHql9Yfi0vuYWGxrhw9ZNco4QEJvVWviuXFj9TAkRDXzVztT7q1rqO3TW9Rr1rdZx633RM68hsm67n1exurdSgFYsdil3OxjSPlavsan6+JkhiXwALITVmPCNTEPoXiD0ssRawgTocnAkYcaXi4MESmFdPYvvVyrhd9aLZq23PLF274PKSXabtsYR0W7rdLekeAKEJhVzf8wEXasKFVLV4wbNMRlZlhisMMnUDpLkI+7bTcJGgcRJBzhTFPMwiqCTTpKgMEqt/28BEFFYqSMJTiSOrOH+fprf7rayE8glp7iDylDqgugl7riK7zOdD3u7eK6uEb2chzY+ZKqtMKVkx2f70Pi35mKxH5T2xkvl6ww8BiNgDgb7gh3ZLs44YzuhG/PJ6VTeG0pNW2d8XXHmpZLNZVnS0nmtlquCRkkwLDYFkSvCWI/4MDK0h0LfumzXrnchr+za/TE7ZUGIJsZo/rVh+47ExBJE/NgJ1cBbffclshVR1k7CQ+2zdSL1JcsZfPluIT3I/Zb5Sf3Oehu/t2oO1EUflqV4YkrJJvspvluUn00G4gqVKCnm6Cb4PYF/wbeO6yGsuUk3TYybh8y9arnFNHRPCMyaDnl4YNnW34CmXCfjvTh9gCm1/u6wX4tPL+u78bKgUMMb62pf+t7NBi3Eh6qmq/AsuTX2h3p4qOJts6PwbwY9S73l2u99v1+qNbanv9NcF3Mqk9cH80bJR093z0PoL</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42992AEEA678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42C0987C1B47E0401F0A059962C6</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D1952779CE3B5E0401F0A059949B4</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42992AEEA678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42C0987C1B47E0401F0A059962C6</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="7761d978-a03d-44f1-a441-00c2c0c6ec6c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="e9fe5c01-72b9-4766-bbe8-271e9438ce36"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA/User/urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>816</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6CADFE5C6FF074E0401F0A059941F7</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="bf1ddade-f68a-4b5f-9094-921737410d51"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove Allow Adult Policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6CADFE5C6FF074E0401F0A059941F7</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3b4a5e22-ef4c-454c-8f08-a76e1bb60da7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());
tC.setPropertyValue("rtrnodeid",tP.getPropertyValue("nodeoid20").toString());
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#Project#alid}" ContentID="${#Project#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
				<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">   
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">    
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc>

                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>urn:dece:accountid:org:dece:${#TestCase#assertionAccountId}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result"><con:settings/><con:config><script>import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation;
//def urlStr = b.getPath();
def urlStr = b;
//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");


//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
int lastColon = urlStr.lastIndexOf('%');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 3);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}
else
{
int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 1);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C136022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbbuo6EP0VlD5WkAuBQlSQKLeyW3Ypt7a8VMYZwCWxIXaA9uuPHSAlFHo4R0JCnozXrLl42bcc+Z7lVDiHQBBGUxvfo9yJrCUtDKjDECfcocgH7gjs9CrtR8fKGA7ab9FSrVpJe7eQWRi7rpGGm3EhbRfGdhph204XYJzHeaOYMw0sXTkPoUW5QFSUNMswc2lD/gp9o+iYRcewM1n7ZqSlhhBwiS1dMoa2I7XhJW0mxMLR9fV6nVlnMyyY6pZhmPpr+7GHZ+AjrXy7zSgKFJR3/jjjAgbPwxnMfP1WT/jcutzpkSlFIgxgF8s9F8vQjaIufVxOpldavBfcFp2waFlFlFGCkUe+kKpPG8SMuamKN2UBETP/bBKmoYDTsMFpbNr0StOT1C4ESjAMOErzGTJ3WF2YQAAUQ2rQbZW0q8u6Fm3tB4jyCQt8nlz+Nz5AV+CxBbhpvk9rR+1ywBOVKt8CdloUeyEnK/irhnWBMPBdNwFfDpXqBDAhm0fC5YBuuGKnH9I7Wm6rUSNT4OL/NOigOVuQIfJCKC+rry+sWa9+TKrixetYo6HeWdzR2Vu+XooIHDpHhri12+XRUMZDtN3Bw84f3f/oXU+zz426QYr+LPjs6M3XdhXa7ZcGuW+hCprDW2NSs/JzE7fRMj9ocPLWIc1hXXju17rwte4/rJqvI9IX8ya5u38Y0N7omQyHf8jj4CN4qxaeR5V+P1trdvqj+9ZyZU/Hxf5g0eSzfteaT3od422D756eJ9eQfbVn8xxZ1r3XazQt2CPReBisguy0VYrTOeCftO3PfC8cfwAW+6Uag1Yt1ZBdQuJ3MVMW4qYnkauzUOLDBVChldUupR1OKOWOuI7s4XZt5goNu16z640727CytbqRyxo3xaLZMCpGPlfci8yWxRHFKqMTomIpyd2Oze8Ese9woC4E6RULpdJx7RfEGhIo1aJdeQgY5dBnUp6xXfz6nKOb7GJjLNdszcxVUUzYh5b6y8QTfQoqEwFBQpJNKyHJXcBkQUDpthprLueaC1mKJVqFwjMzK5ShEEplD5TIOpZdyOmc+AsPFFHdZ27oQWYxW0SF0fn235J6wyNrt95/r/beo9Ogn83t+Nu+DNLHJcqBq4TuQLYSflwwBSe3z+ZH1vmTF9EevhK6RB0uWVMRELxlkvz0PSpqRuI52ae15x27HxsS0PpxVnE0d0VwPPHxvS3lXApAed+YJTIzy0y4WoVRL2w7qwcSXlf10A1L7wEOpUR99tkcqB6j6BfdBzHxo+CxPUkxFDPaE0iAL2cnFS0veAD0gKsHQEvO/ObS10UipCydgI04Zat68vGiGP/6vsEOVn7S3JF/axa43x07gXUQR+Yp739B6FSt1F3weWY4MJOwRKoYCw7BTwGcCp40xkWOuQg5UONQwPkvKSVPJQ1hzEIqWjUtMhxKZsRTfC7A+Xb6AROpcvxMI//+TkuTaAQwyMcdJxG+um0ddQTo9EB2d0HPKK/1m/Im2ZV/mH9aDup0POPlfwA=</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77773</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:158F4EF7C13D022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_79000 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="a44d13be-c0c8-42c8-a5c5-bf02c4fc2ee3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");


if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":   
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

         
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
        //case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>507</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77778</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>32598a14-7c38-48bd-b70b-d0c6e925a714</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="647a76cf-2e0f-4736-9288-e5587a872425"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGET"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGET" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass[0].text();
}

		
if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdU+JKEH33V6Syj1bIBxAgJVRFEDerqJf4sfqyNU4aGE0mMTNJkF9/Z4KJgOh1bxVFajo93ae7T87MEUNRaDkuY5ByElPFG/XVP7b1iG3omVoHmk2tZZlN7bEZdLWg3TGtlvHY7FhIVTzGMvAo44jyvmoZZkszbM2yrk3LMZqOZTS6Ru9BVW4hZSK0cGkYqrKMQsqcMm1fzVLqxIgR5lAUAXM4dnx3cu4ITwdVmNTB0RplmTAdLDhPHF3HjQAwhCFu4DjSj/Qtn6OAOT6ZU8SzFN5yBqyvvu0tiqJRNBtxOtctwzB0o6cLn4CR+Q91cFBthsCjs3i9HiIaU4JRSFZIgpoAX8SB4obzOCV8EX0S2tRNQ4bWYIk1bLboD1V/T1Ci+2akLZApQxpbILMKNoUZpEAxKDdTr6/++N4E13uvU0TZLE4jtrP+O0hAcwjjBAKNVZVV6L4fcU+7BkeAHY/iMGMkhwtJkwRhYMpVCjOyPCdMkC9gSjl+ZcnEj1QsA/w3YznSN7EK6Pqe7ozIHBj/PzPbnNc6yi0KMxicXp7w2bH7az4Op+1oMoxILxJ/i5/Tbr+EsOm8BlWP+229S9aaW2+bnq+5PXngN8/T+S8emTeFH7LOeHWIhr3uPLhv09vJKWcvk6dmfnZnzxdu0k1+ufBwdjhbGvHNI346vO35l6fPZ8bZwdPCX14WzTajpnc4nU7471XCLvPru9Y5FJjR+9E0WjxNT1f3NPePm6Y9fsZ3yL2nhr28urgvvGR+nif8WH9K4MAbrYqLnD/8fLDtyT/MW3pF/72mzRq2jZUk+NnjE2BeLSU9vJEyFvNC/Gt5kRYSaLPS1UmkRjEOlKsDuUtKi5MJASKBI4a5Xo+H9rBl9XrWsGW7dqd7YrQMc2y4RrvXs63jk0qD1ih2IA5jOiMyl1TZNX++BogjhwENINXyOMMLYOoXEUeII8WjU/FxxJTBdSxUfJXwotlZscJ+7eFVBs8ktlqrrKMqFzG/pJepO+OQbit3e0u5p4BJQkDKu+Q3EwRnXLTiBeUZD81GjhoUMnEApFKDHavVbeuMREkIEqgexUEWQiNZJGVjdLZ+WhrCrLSOzl3/6s/Q/2OWn9+n1e2+qxohfAIiHZgs6RjEMGHPSWRW9Xyou733xKrCu1lA5FcmuspTgtdItl+9k0WypGbKe2EV8nrDrmEruL5bV50vyAmuWV8f10LthRYMquG8oMZLI8vzrBxHR+pcKsLrQu5M3QecCbF6vY6fgep1CP1bZ0WNeidzbd/Gl/EF9TniEAnyKOXyGxcFH5i8KHiC9Mvv3kK2Uoq+cVjyfbZhKO4TEvGXVw7sYOknzFfiUcRp8D6uPbE28og6xe2AEzqXK3kqvH7CDRyLsETIWJxuBt8XYF/ybWPd5BoLF2x6zDh8/kaR+tRXEcZxRrk3UkvDpmaWOPlrAs6704cwpS6/HbRL9ulB+3ty7gv1ipBa+5L/dtZISRcMqjzPSyx9dSnujSI5nW9o9BvAPTLd7bmW3R6fjHdk2q0buFXJ4IP5o2Wjp7vfw+Bf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>507</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77779</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:InvalidAssertion">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6CADE9E3B7C421E0401F0A059941E1</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6C42989A265FEFE0401F0A059962BA</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6C42992C46A678E0401F0A059962BE</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="3710_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3710</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77780</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="7e4449c8-ac59-468e-92a3-1aae743456c1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:iscportalcs1</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1&lt;/dece:Resource></con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77781</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085B86D7AAED6B1E0401F0A07993148</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportalcs1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="dac3483d-25f2-42c5-a8e9-e6e83d39381b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet Account"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet Account" mediaType="application/xml" sslKeystore="iscportalcs1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}

tC.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists setting is " + tC.getPropertyValue("policyExists");</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

//if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77782</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085B86D7AAED6B1E0401F0A07993148</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportalcs1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete Account"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete Account" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_08001 - StreamDelete - DLASP-CS - Policy - LockerViewAll - Nonenforcement of Policy Verification when policy NOT present</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Customer Service Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">299374d0-9ca0-4e88-9743-bccf7ec38c71</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVdZc6pME773V1iey1TCorhVkqphETGigojLHQ4joAjIgKC//hswGrOc5f0uUmaaXp7pfqan5xlbe5/tAoxRnHhhUFXElxrb6dRbDZt+7ECLfmygdvux02rUH9cQbloI1tuwxdSqCsYpUgKcWEFCbGiGeaTZR5YzmEaXZrp084lj26ta1UQxJp6JyhNdq+Z7P8DdMupLLY2DbmhhD3cDa49wN4HdKVCHXaLZta6Qaq/PF5BlwPjVTZKoS1HwyUYQ+T58guGeeqY+6TzbuDv1nMBK0hi9x7TxS+3dNsuyp6z+FMYOxdI0TdEdiujY2HN+1V4rV2NkK8EmvKwFKwgDD1q+d7YKUCpK3NCuAt8JYy9x979xzVAMXbh+RDl8hEwj+FWjPgKU6P7R0yeQMbYesWsxV2c62qAYBRBVZ7ryUvv1TwW8mBqxFeBNGO/xl/V/Q4SCI/LDCNmP+LqxK7h/9/hDtl6fEewqAfRT7B3RqGBJZEGEq5MYbbx86GHCPRtXy+pXc3wlGIL/pSLP1D1OApv6ITOi5yCc/D/lui/VxYtp+Sl6jeqN1uwA9+uBSa0XptyaHoTw0KPbGn4pIdwrX0DdKv2+/srTG63ejVbmBo9WiT47x7o63g7H50VvscmZxO/Z4GTnfH3RNrcWNGUcNvsN3xfpYX9npjt5tGlHPXrVVDIHh3IfNdLKop3JXN+xTbPfWk/71tpaWMd12Gfzvefj+mJVl3E74qd1NjpOTvQqxmq9kfaV7Znl4xQmvu+qCyoczgbMthJGZ0aS6Zg/HUZWKzmtz9rLx57u91Ds6w2dyk0W/y84uiNaiXVbCEWj2JDTmaBXVVHE9CwI4DR1QKbwwCF/WzDind3B3XlyJ6N5oGk9IAq8v5WGKtjJgJlJvKsKpqnmwhkMeGdkEkOjAvwVr+pSJmZL0dS0vpS5hi2bp7Xsp6uzNFIBLo0FV5V0yRR1Q1JVEF5kuSqu5XyrTtVM0ZZihTgQpTw623InQXLuQVbh1CnHLqdculqYRN47Dfej49qQfFVQZWF6kKfKui5q0gDoyzlkeymxPQ/3UVhZzvg7o0GEtgD1MprEBGfV2GWqMWNHom6VMuOzTFXkgarhTNDKXckVKRuYs/NHLgReFey9lEsGmFxyAQ2hN6JXiwG25lyg6iATndL4Tcrs8RWIqtFZRbjkaihluqTPRj1VVzIJlDJRyny8ZkfuWnaPsK7lAwNs7wsjaNK8F5DvgX6EJ+5QseQeWO9NBtZ1F3qcZy3CzFm1M1FbDt7ClULcjIAm8bwGCCAaFFsj+efBkDe5ceR1WA8NN71wj9y4ojLh2+54zum2Vx87k9GcEze71kT2JnXLdinFh+y2vgOKguw3xtUsW19Suhh45+b4bbZAXrw8JyNOY5pem6vo83S2EEO/ZfcXy9nbQ76EmjGeTGfzyTnPR4dt++wn/THfj6cDVXTGI4QmGD5QtNXjjbbICcv+lvBpo9OIqwBH5QGQt44jeYTAfH97IWFfVyVCXqAKmSzMBXkKZPlBUnhR0zY9l5lA2UxnzEhVJNsnaTotF7pfWQm8SCpFW/NVtGTJETaAXTrTGlLP0Wbcw2CBVtrIN8wEZJG5CRiGliOtv1EzB6oFA2wlm/LkFPGVVAEzaxwN6PzNbNLMQbP9wbQDZvV8yu7yseusTjtntSNFWd4dnaUBfNO445hCKDavaIakq6B9OW+5qszqug/3ebTew1w0SM1K49DgJb2n0bNcFMHbRYYNwOZ4eZa2qiCV9hWQqxahxXG9cPEyGHljQ0oJadM7umzXLP1XjhUUq3zm2EEAGvjKMenCMQlsDg9KW2Qw1xQiPM8cXpYOWsscDjoRrS2Guwr/0KOcxPMb46CdGW8Pc+aUtdytNp93FNEVHoLN0q2vE562zlBDg11L9vSdGDQb/kkdqho38yj/RG/RIcPDykhhAqmenHtUJ04f+P3K25/P9QY720+m6VGZWW+YObnrw7yTbSf9JkXF8ok7t1ZHrbcI4fJyj3xtkjfhpY1S9w32Uwe+jl7TdL1FMLkui3tYEas9cjlayZ/HuELi2Y+bUrUbFbMgTlCQ1F4Lq2KE66Zk0PPsLrk5L+sO32xyLMeDXrNFMxwv0Q2a6dGA5jqdBiuA66x3QfEFohAGG6+IVQyzl8v6zwDhvrtGVozi2h88FXmqKoFOpo8wwMgIX2qtXoth25LENlutVqchdVoFXImm66zU6tTrteooTMbBOAabBMV3A3Lz64CsI+hFHiqm6PdZAickEQfrmCY+83S0ngKUkjE7LibdLttoc2UCKDvdR5B8IN0tjkKcPEVuVA4zv93G12/XHRMd2ysUcAGaR6Ra6NtIT3e5K+JvO2N/HP2v7kFqe8XMQtKXxB68IPn86YMNBQ1uVKA7TOOK+ab6b6Ydhml+N6X+gIj6moxbJPvo3cW9PkzIrE3GsfI9gknRDtbT4Sk9HtOyTC2aZqmYuKcYiqamCKZkXDwZ4Q4F1M0D9S+D+g3zl7g3+Wd0aeIG04Sc8j1hVLVc/v2R9smaJCBBefKTTPDJs6wI/seXG+zCQo+IJ+QnC2P7I+8/+LqLQyAXHcoLnGJVTNinz+V9PwldGBKvHmlSYXzv+yf7n2J/Ft7SdYOSEFas0wT9/ku16D4vNQvCMA0SRayVgvuOWGJOThHqfih9c1OOuO9vlhz/9s2yUIdT6KK9Vbvpen9XfvTKwkNErLBXYnmp5eT1TYIHzl0Hfgf4mybM/akJf97J6zfxd8ldTr8y+/V/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ShareMediaHistory</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77783</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="017d2881-b017-466d-87ae-58821b0f1a7e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));

if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String b = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String SchemaNameSpace = tP.getPropertyValue("SchemaNameSpace").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");

if (transactionid == "null") {
	log.info "yes";
	log.info transactionid.length();
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%%REQUESTINGUSER%%%
      <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID> 
      <TransactionID>$transactionid</TransactionID>
</Stream>""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "<RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "<RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

xmlBody = xmlBody.replaceAll("%%%REQUESTINGUSER%%%", b);

log.info xmlBody;
tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#TestCase#requestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Log" disabled="true"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\Temp\\RightsTClogFile.txt");
def RightsTCLogs;

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
                   def rawRequest = new String( r.rawRequestData );                                      

                    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
                "TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
                " ###################" + "\n\n" ;
   }
    else
   {           
                 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
                  " ###################" + "\n\n";   
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
RightsTClogFile << RightsTCLogs;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

if(status=="HTTP/1.1 201 Created")
  {  int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));
   log.info "StreamCreateCount : "+StreamCreateCount;
   StreamCreateCount++;
    log.info "StreamCreateCount : "+StreamCreateCount;
     tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  }</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
		
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
	callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
	callTC.setPropertyValue("expectStatus","active");
	callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBDeletedBy",null);
	callTC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
		
	callTC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
	callTC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));
	callTC.setPropertyValue("expectStatus_" + cnt,"active");
	callTC.setPropertyValue("expectDBCreatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBCreateUser_" + cnt,tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("expectDBCreatedByNodeType_" + cnt,tC.getPropertyValue("nodetype"));
} </script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F51D879204737E05305991F0AF9FB</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_79000 - StreamView - PORTAL - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158FB4AB69F019D9E05307991F0ABF29</con:value></con:property><con:property><con:name>requestBody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname></StreamClientNickname> 
      <RequestingUserID>urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:158FB4AB69F019D9E05307991F0ABF29</RightsTokenID> 
      <TransactionID></TransactionID>
</Stream>]]></con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659/Stream/urn:dece:streamhandleid:org:dece:5E650C298AE740C09EF12849323B84B5</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc9o6EP0rjPsxA37y8gRmCIQb2qRNMSlpv3SEvAYlRjKSDE5/fSUDDiYkl3tnmGG0Xp09+9CRLgVaxo7fEwK4JIxWsmVMhZ9bO0bKqc+QIMKnaAnCl9gPene3vlOzfLTfYlRGg47x23UajoOtqGrZ0Kh6ba9enbXsetWduZHVxghBY6ZchUhhRIVEVHYMx1IOlvq1Jlbbt9u+Z9daTeuXUfkBXChs5VKzjB2pTHSMhZSJb5qbzaa2cWuMz03Hsmzz8e42wAtYIqN7uc0oD8S7O39cCwFDHOMaZkvz0iz5XIbCD8icIply2MUK34tlmVbbVD6hIPNPRrEXwhGNWL7sI8oowSgmf5Cuzx3IBQsrvXjOOJGL5btJ2JYGrkKGq9j26CfDLFM7E6jEkAtUFQtk77DGEAEHiqHyMB51jE/ndS3fOuGIiojxpSgv/xsfoGuIWQJhVezT2lE7H/BEpbqXgP0RxXEqyBq+6mFNEAax6ybg86Eq9xwikt0SoQY0E5qdeUjvaLmtxoDMQcj/06CD5mxBfqA4he5TO7h33H7zid/agKdf11Hcn4gsaK1/dnICh865oWjtdnk0lMUQbXcsv9z1WD1qfH94aE2e4eHzLwtW9Z9eizWd65vmFbsaDDPUd7MghFSi2+fvo4eXm4dHZC4kvWg27x2UTm+QfOyF05touOFT0bgJGlfuGO7G0z9f/jzD1efhS3QdDNjsInEfe98aLzDj0x9eFhKeuL1kcbEaPV/0o7tV5H6eXKdTJQHiZvHPpm65Eyvzfj3xi4Y9xp0inQP+Zdv+zAfp7Amw3C/1GIwGlaHqEpIfi5m2kLAa5a5+osVHSKDS6OpdWjv8VMkdCX3Vw+3arreG3vXAux5eeZbjDq6tums12217aPWsRr29F5ktiyOKfUYjomNpyd2OzccE8dIXQEPg1TVLldIJ4wPEAZKoMqJjdQgYFTBhSp5tmWYrm9Xd9WyVNqWFExdn7oq0jMpXJr/Rb7wXSeAlTbadkiaPAZOEgBZuPddCDbaQqhYrtE5lbNfWqEYhVdLOtcr6jteqm4Iskxg0U3PJwjSGWrJI8sqYYvvvVBEWuXVw2wvuf/eD3/mBMN9N7/jbvhLKJyTaQeiUrkB1E07cMe4+nzd5N07eRXv4XhoSfb5UWSUneMuk/Ol1WvSYFKPymtieebHh2FACN4/zKuKFa4KLsS8ub6XpSgW6++askF1b1dL1Os374XmuyRW8qStiWo4ZAE6VTr1M2DNQs0Axz7oUCuJHwQt7mWIqFzSQSMJSzU8lX57xCghA6FfASA1+du4ToxRSlU5CJk/Z+rF6wWjGHz5ysI+1nzLfq78N4+Frx05gHcRReapHgCR0rlf6Qnh5ZzwwU7BESRnjh+CnAE4FLxuLIhdcpBqoWSrh/S8VrVEdA2HMUipHAyM3HOpmzlO+JOC/Or2ByaW5eKuRf3+sVUk+AhjUC0+QHF9fub4+AnR+oL27oO/Ir/OR/JbZdd+Y31oO6nQ8492/</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77774</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="29cd6694-8767-4d22-b4a1-7b8ae55520f5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = true;
}
else
{
	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = true;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
//tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == null || tC.getPropertyValue("expectErrTypeStreamRenew") == "null") {
	tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID = hextoraw('$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULL}">              
<RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>       
<RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>        
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for PUT"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" disabled="true"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="STREAM" value="${#TestCase#streamhandleFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for GET" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;


switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
		//RequestingUserID
		if(tC.getPropertyValue("nodetype") == "llpcs" || tC.getPropertyValue("nodetype") == "dlpcs")
		{
			tC.setPropertyValue("assertionUserIdFULL","");
		}
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		if(tC.getPropertyValue("nodetype") == "dlp"){
		assert RequestingUserID == "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
		}
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBUpdatedBy") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("expectDBUpdatedBy");

		/*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + tC.getPropertyValue("nodeid");
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return Attributes"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cnt = tC.getPropertyValue("counter");
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} else {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBUpdatedBy",null);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>nVZtc6I6FP4rDvuxg4D4BlOdQa2uXW27Yrvd/bKThoNmFxJLAtr++pugUrG213s/MTmcPOc5L3mSS47iqOZ6nEMiCKOVTRxR7ubWjpYm1GWIE+5SFAN3BXZ9bzpxa1XTRfstWmU86Gi/HbNlWg0r1AE1Wnq98WTp7cB29KcGDp0mNG0H29KV8xTGlAtERUeryR26aeuWM7ds1267dbvatJu/tMoDJFxiS5eqqe1IbXhHWwqxcg1jvV5X13aVJQujZpqW8Tid+HgJMdK6l9uM8kBJd+ePqwFgiCJcxSw2Lo2Sz2XAXZ8sKBJpArtYwUexTMN0DOkTcLL4ohV7IRjTkOXLPqKMEowi8opUfaYgliyoeNGCJUQs4w+TsEwFrMMG69iq0y+aUaZ2JlCJYcKRzpfI2mHNIIQEKIbK/Wzc0b6c17V86zxBlIcsiXl5+d/4AM0gYisIdL5Pa0ftfMATlepeAnbHFEcpJxncqGFdIQx8103A50NV7hIIyWZCuBzQDVfsjEN6R8ttNQZkAVz8nwYdNGcL8oCiFLqrX/EipJtvkPZfHtdfb4zJ7WZybZgXN14nJ3DonBuK1m6XR0NZDNF2x8PowRnMftXJ8LHZf5omz62J+VOg0avfH77ESxFNHeM+zjKPB4MJ8ZcjWF3F9mjaF8kVvZ3Omo3M/PGNwB9y//o6+9EejuYte0oaV42L1V3Lt9ejOXP8h4tru/0zgo35k9GLbNa7/jof9r/3wu/Wt/mdc/34eHvRi0chZ01n1hhPnl8R670gn7ZHIend14O7YdTuFOkc8C/b9mfeT5/+ABb7pRqD8aAylF1C4nMxUxYS6GHu6q6U+HABVGhdtUtph5tKuSOBK3u4XVuW16h7XtvutT3btPtXZsM2W45jDU2vPez19iKzZXFEsc9oSFQsJbnbsfmcII5dDjSARM9YKpWOa58gDpBAlTGdyUPAKIc5k/IcW61W0Go3/ibRwsJm21wm9WwTNNda5YaJW3qbeKGApKzJzZImzwCTFQEl3GquuRxsLmQtnlGWisiqZqhKIZXSniiVdWv1dsPgJF5FoJgaMQvSCKqr5SqvjMG335qOMM+tg4nn3/3u+7/zA2F8mN7xv30lpE9AlANXKfVAdhNO3DH2Pp93eTdP3kV7eC8NiDpfsqwiIXjLpPzrbVrUmBSj8pbYnnmx4dhQAjeO8yriBRnBxdgXl7fUdKkC3X1znlH1uZpmWZq3o6XULpHwhqqIYdYMH3Aqdeplzv4CNQoU46xLoSB+FLywlymmYkl9gQTEcn4q+fKMV4APXL0CxnLwN+c+MUohZekEbMQpWz+SLxjF+NNHDnax8pPmO/lZsyR469gJrIM4Mk/5CBCELtRKXQgvH4wHZhKWSCljySH4KYBTwcvGosgFFyEH6ikV8PGfitKojoYwZikV44GWGw51M+cpXlbgvjm9g8mluXirkX9/rOkkHwEM8oXHSY6vrlxXHQG6ONDeXdBT8us1azUpv1eH8luzrH5RlBK77jvze8tBnY5nvPsP</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:11A54AA8A622303EE05307991F0A211C</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1150</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A5601640286A10E05307991F0AC81D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11A5601640286A10E05307991F0AC81D</con:value></con:property><con:property><con:name>sName</con:name><con:value>Portal Customer Support Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>07C623BFC23F4658A940BA326B7A87C1</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:07C623BFC23F4658A940BA326B7A87C1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_86100 - StreamView - PORTALCS - API invocation following StreamRenew - 200 OK</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_070925</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:07C623BFC23F4658A940BA326B7A87C1" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:11A54AA83B8A303CE05307991F0A8FBB</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:11A5601640286A10E05307991F0AC81D</RightsTokenID>
   <ExpirationDateTime>2015-03-19T21:18:25.734Z</ExpirationDateTime>
   <SubDividedGeolocation Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2015-03-19T13:45:24.488Z" CreatedBy="urn:dece:org:org:dece:DLASP_CS_1" ModificationDate="2015-03-19T13:46:22.616Z" ModifiedBy="urn:dece:org:org:dece:DLASP_CS_1">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>77777</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AC9E419060152889CE0401F0A05994440</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADDF10E5C8980679DE0401F0A059924F5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>11A54AA8A622303EE05307991F0A211C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>11A54AA83B8A303CE05307991F0A8FBB</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-03-19T13:45:24.488Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2015-03-19T21:18:25.734Z</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>11A55F87CB5F6725E05307991F0AE41C</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>07C623BFC23F4658A940BA326B7A87C1</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>11A5601640286A10E05307991F0AC81D</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>11A5499C6573300CE05307991F0A5E38</ACCOUNT_OID>
      <CREATED_BY_USER_OID>11A54A272CB805BBE05305991F0AFCEE</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-03-19 19:45:24.544</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-03-19 13:45:24.544</CREATED_DATE>
      <CREATED_BY_NODE_OID>CCE44AF42FD2063BE0401F0A07991776</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b9d9c47a-56ef-4686-a252-fd612cbc36ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89baa875-8ac6-4b39-9081-2fcdf4818869</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>02adf52b-9a3b-418b-aa0e-6dd6b0fcde2a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="AccName"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>160aaf4d-490b-4800-95f7-4bf17fcf6bfa</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="035ff48d-5ef1-4042-b7ee-a65b30a8f157"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode"))
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 3);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
     else
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 1);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportal1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="05a67acd-ce84-4e73-8739-40f3a23409cd"><con:settings/><con:testStep type="groovy" name="SetCounter"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>2efc83e3-91cc-4689-a85c-84e9288aed2c</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="8c175744-f4f0-4f3c-b712-0463ee11e171"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>fau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#primaryemail}</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();


     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
    	tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
    	tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1/User/urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportal1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="c1908779-fb23-4684-983f-205bbf9935ea"><con:settings/><con:testStep type="groovy" name="Set properties for User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->      <LegalGuardian>${#TestCase#NODEUSERIDDecoded}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1/User/urn:dece:userid:org:dece:158F7EFC4BF0595CE05307991F0AEE84</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20150508_025021</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E036CFC2B860B78EE0401F0A07993FD1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportal1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="baa56cbf-4498-4aa7-978e-985bc5a65d43"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="17275fed-d86c-4f9b-a93e-2424d8953a0f"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D77DD7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="23dd4870-d0e7-416c-9449-5d5fbc033bda" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));


if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
	def audienceList = URLEncoder.encode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLEncoder.encode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}
else
{
	def audienceList = URLDecoder.decode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLDecoder.decode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - POST");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fa7995e8-03c8-4191-840e-4453f03b89e4"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Rerun STS Post"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep = testCase.getTestStepByName("STS - POST");

log.info "#########################IN RERUN ######################" + tStep.getName();
String status = tStep.httpRequest.response.responseHeaders["#status#"]; 


if(!status.contains("201 Created"))
{
	log.info "STS Post not Sucessful Retrying...!";
	testRunner.runTestStepByName(tStep.getName());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def major = tP.getPropertyValue("VersionMajor");
def minor = tP.getPropertyValue("VersionMinor");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

if(tP.getPropertyValue("count") != "1"){
if (expectErrType == "" || expectErrType == "SUCCESS") {
                if (XMLbody.length() > 0) {
                                def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

                                                // Verify response sizes...
                                                assert myXML.size() == 1;

                                                /*
                                                String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
                                                */
                                                String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Subject"."saml2:NameID";
                                                
                                                this.log.info "accountId [$accountId]";
                                                this.log.info "userId [$userId]";

                                                tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
                                                tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
                                                tC.setPropertyValue("assertionAccountIdFULL",accountId);
                                                tC.setPropertyValue("assertionUserIdFULL",userId);
                                                tP.setPropertyValue("NODEACCOUNTID",accountId);
                                                tP.setPropertyValue("NODEUSERID",userId);
                                                def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID"); 
                                                int lastColon = nodeaccountid.lastIndexOf(':');
                                                def accountid = nodeaccountid.substring(lastColon + 1);
                                                tP.setPropertyValue("ACCOUNTID",accountid);
                                                def nodeuserid = tP.getPropertyValue("NODEUSERID"); 
                                                int lastSlash = nodeuserid.lastIndexOf(':');
                                                def userid = nodeuserid.substring(lastSlash + 1);
                                                tP.setPropertyValue("USERID",userid);
									     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
										{
											def nodeacctid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
										     tP.setPropertyValue("NODEACCOUNTID",nodeacctid);
										     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
										else
										{
											def nodeaccid = tP.getPropertyValue("NODEACCOUNTID");
										     tP.setPropertyValue("NODEACCOUNTID",nodeaccid);
										     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
                                                this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
                                                this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
                } else {
                                return false;
                }
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc6o6FP0rDudjBwmICkx1hmr12NrH0dY+vnTSsNG0ECwJas+vvwkqFfu43jvjjJPNztprP7KSY47jyPJ8ziEVNGGVVRwx7uXWlpalzEswp9xjOAbuCeKN/YuhZ1WRh7dbtMqg29KewHRJA0JXt90A67Zju7pjgaWHAamFDdSsI6cmXTnPYMC4wEy0NAuZdR3Jn3ODXM9CHnKrDcd+1CoTSLnEli5VpG1IrXhLmwkx9wxjuVxWl7Vqkk4NCyHTuL8YjskMYqy1j9cZ5YHS9safVAMgEEWkSpLYODZKPscB98Z0yrDIUtjECr6LhQzkGtIn4HT6Syv2QjBgYZIvO5gljBIc0b9Y1ecCxCwJKn40TVIqZvG3SZhIAeuwIjoxbfZLM8rUDgQqMUw51vkMmxusEYSQAiNQuR0NWtqvw7qWb71JMeNhksa8vPxvfIAtIErmEOh8m9aG2uGAX1SqfQzEGzASZZwu4FIN6xwT4JtuAjkcqnKdQkhXQ8rlgK64Ymfs0ttbrqvRpVPg4v80aKc5a5AJjjJo05XfzOjz5dEb3Ar3khwNJ48Jv3LFHWrlBHadc0PR2vVybyiLIVrvwJbdubMmV6vLCXl/nYxewiywzkK/K/rod398N+30+tPJ9XmWDmZnjftXtIrp3Xlz+YeHC/f8WWQNc7B4eQib/ZP7s1t70sP+7dJNO9ZZ4+49QfdH9ZOHB8ThnM5RH0Zw5Z9aYlSf2+L2Nao9d32fpn2nUfvbZfco/T18uW/eiH5MrtznGX0cN5p/hmdnj8Hdw2+nVaSzw79s2575cfb8AkRsl2oMBt1KT3YJi5/FTFlooIe5qzdX4sMFMKG11S6lHV4m5Y4Gnuzhem3WnV7T8XuO7ddQB6FTVK+huuuaPeRblmVuRWbNYo9iJ2EhVbGU5K7H5meCJPY4sABSfZFkUum49gNiFwtcGbCRPAQJ43CTSHk2HRK5ZE7f07eoblpTLFzuOHb4AlrlMhFX7Cr1QwFpSZRNqyTKIyB0TkEptxpsLiebC1mMN7zIRGRWF7jKIJPaniqZ9SzbqRucxvMIFFUjToIsgup8Ns9LY/D1v6VjwnNrd+iPr58646f8RBjf5rf/bVsK6RNQ5cBVSicg2wn7l4zpevVtPp/ybnx5GW3h/Syg6oDJuoqUkjWT8qePcVFzUszKR2Jb5sWGfUMJ3NjPq4gXLCgp5r64vaWoSxlob5vzhs3qWzVbLLK8H7ZdM1IJb6iKGMgyxkAyKVTvN8krMKNAMQ66FQrie8ELe5liJmZsLLCAWM5PJV8e8AwYA1fPgIGc/NWhb4xSSFk6ASvxla0TySeMYvzjK4d4RPlJ87X8WyZp8NGxL7B24sg85StAUDZVK3UjvH8zHiSRsFRqWZLugn8F8FXwsrEocsFFyIF6zgR8/6WiRKqlYUKSjIlBV8sNu8KZ8xTvc/A+nD7B5NpcPNbov7/WdJqPAJEaJP1zfHXneuoIsOmO+G6C7uuvfdq1T3snFrJq3Vx/m2v9RY26WxSlxK79yfzZslOn/Rlv/wM=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_e19c6ef9-49da-4849-82e2-fdc3f6075083</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e19c6ef9-49da-4849-82e2-fdc3f6075083</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150508_025021</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_e19c6ef9-49da-4849-82e2-fdc3f6075083</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_e19c6ef9-49da-4849-82e2-fdc3f6075083" IssueInstant="2015-05-08T09:20:09.684Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_e19c6ef9-49da-4849-82e2-fdc3f6075083"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>ixA7uibN+qeUt9Nc+LVZosO9tW0=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>a24CW2VOxNVcykVRjfud2JfADtG0HGSWgCFGgVPKurIhJ6Xk0xmiWK7wQsfv9Kbtu61IvjYf7GBXJU4VFaAUw9rC2J6Wyo0X+5BYY0seKip0GeReOAE2tR5p4tUkl3bDAAirG863zDnX0rHLjX7TtGmcO9bhiZS67QLJJZdWYH8=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:158F78AF84A30C00E05305991F0A2221</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_18cl9cpiyrql512gat9s884fje" NotOnOrAfter="2015-05-08T12:20:09.684Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/DLASP_CS_1"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-05-08T09:19:59.684Z" NotOnOrAfter="2016-05-08T09:20:09.684Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_e19c6ef9-49da-4849-82e2-fdc3f6075083</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-05-08T09:20:09.684Z" SessionIndex="_e19c6ef9-49da-4849-82e2-fdc3f6075083"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>158F78AF84A30C00E05305991F0A2221</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:158F78AF84A30C00E05305991F0A2221</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="0170e15b-e5de-4c92-a353-24850e8b6e6c"><con:settings/><con:testStep type="groovy" name="Set properties for user"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <!--<DisplayImage>
        <DisplayImageData>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
ral9qbL/2Q==</DisplayImageData>-->
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    <!--</DisplayImage>-->
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <LegalGuardian>urn:dece:userid:org:dece:${#Project#USERIDFULL}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
	else
	{
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6C42992AEEA678E0401F0A059962BE/User/urn:dece:userid:org:dece:FC6C23E0376958F7E0401F0A07992078</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20140622_080122</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E036CFC2B860B78EE0401F0A07993FD1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/iscportal1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="40e20ab9-5d91-4902-8fca-6f3272434578"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
if( testStep1.disabled )
  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
	
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = false;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D789E7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="084ed337-5e7c-4945-8db9-b4bcf5122fda"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">iscportal1</con:value></con:property><con:property><con:name>tName</con:name><con:value>StreamView</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/iscportal1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="682d3474-c6c2-4c3d-a2c9-7ead4bf37d20"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdportal"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdportalCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdportal")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdportalCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdRTLCS"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
if(tP.getPropertyValue("count") == "4")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid40"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist4"));
}
if(tP.getPropertyValue("count") == "5")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid50"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist5"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth","1997-07-01");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
def useridstandard = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDSAU1_"+tP.getPropertyValue("count"),useridstandard);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
     {
     def nodeuseridstandard = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
     }
     else
     {
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
     }
     
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlstandard = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLSAU1_"+tP.getPropertyValue("count"),samlstandard);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_BAU1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
def useridbasic = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDBAU1_"+tP.getPropertyValue("count"),useridbasic);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_BAU1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridbasic = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
	else
	{
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_BAU1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_BAU1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlbasic = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLBAU1_"+tP.getPropertyValue("count"),samlbasic);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");
tC.setPropertyValue("MeetsAgeOfMajority","true");
tC.setPropertyValue("DateOfBirth","1986-02-25");
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");



myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU2_"+tP.getPropertyValue("count"),useridfull);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLFAU2_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_SAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth","1997-01-07");
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");



myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
def useridstandard = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDSAU2_"+tP.getPropertyValue("count"),useridstandard);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridstandard = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
	}
	else
	{
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlstandard = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLSAU2_"+tP.getPropertyValue("count"),samlstandard);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_BAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
def useridbasic = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDBAU2_"+tP.getPropertyValue("count"),useridbasic);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridbasic = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
	else
	{
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def samlbasic = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLBAU2_"+tP.getPropertyValue("count"),samlbasic);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>stream_view_20150508_025021</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value>Ashwin_Acc_Create_20150508_025015</con:value></con:property><con:property><con:name>ACCOUNTID</con:name><con:value>158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>ACCOUNTID_1</con:name><con:value>158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>apid</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:534576800</con:value></con:property><con:property><con:name>APItestSuite</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_1</con:value></con:property><con:property><con:name>audiencelist1</con:name><con:value>urn:dece:org:org:dece:iscportal1;urn:dece:org:org:dece:iscportalcs1;</con:value></con:property><con:property><con:name>audiencelist2</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>audiencelist3</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_1</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certspath</con:name><con:value>C:\certificates\</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>count</con:name><con:value>3</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>expectDBCreatedByDB</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedByDB</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectHTTPcontenttype</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2015-03-19T21:18:25.734Z</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>without_flaky</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property><con:property><con:name>idempotentdelaymillisecs</con:name><con:value>60000</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>loop</con:name><con:value>3</con:value></con:property><con:property><con:name>microService</con:name><con:value>ON</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>NODEACCOUNTID_1</con:name><con:value>urn:dece:accountid:org:dece:158F4EF7C135022CE05307991F0A4EA1</con:value></con:property><con:property><con:name>NODEACCOUNTID_2</con:name><con:value>urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>NODEACCOUNTID_3</con:name><con:value>urn:dece:accountid:org:dece:158F4ED4EFB2023DE05307991F0A0659</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeoid10</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeoid11</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeoid20</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeoid21</con:name><con:value>C0CEF8E08CDCC7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>nodeoid30</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid31</con:name><con:value>3711</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:158F78AF84A30C00E05305991F0A2221</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_1</con:name><con:value>urn:dece:userid:org:dece:FC6C23DD33B839A0E0401F0A05994C50</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_2</con:name><con:value>urn:dece:userid:org:dece:FC6C23DF5F510A02E0401F0A05994C56</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_3</con:name><con:value>urn:dece:userid:org:dece:FC6C23DF5F510A02E0401F0A05994C56</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_1</con:name><con:value>urn:dece:userid:org:dece:FC6C23E0376958F7E0401F0A07992078</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_2</con:name><con:value>urn:dece:userid:org:dece:FC6C42BB80EA3FBBE0401F0A059962B6</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_3</con:name><con:value>urn:dece:userid:org:dece:FC6C42BB80EA3FBBE0401F0A059962B6</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_1</con:name><con:value>urn:dece:userid:org:dece:158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_2</con:name><con:value>urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_3</con:name><con:value>urn:dece:userid:org:dece:158F4ED4EFB4023DE05307991F0A0659</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_1</con:name><con:value>urn:dece:userid:org:dece:158F78AF815C0C00E05305991F0A2221</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_2</con:name><con:value>urn:dece:userid:org:dece:158F4ED4F1E7023DE05307991F0A0659</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_3</con:name><con:value>urn:dece:userid:org:dece:158F4ED4F1E7023DE05307991F0A0659</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE036CFC2B860B78EE0401F0A07993FD1</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_1</con:name><con:value>urn:dece:userid:org:dece:158F78D532C80C08E05305991F0A37BC</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_2</con:name><con:value>urn:dece:userid:org:dece:158F78D533AE0C08E05305991F0A37BC</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_3</con:name><con:value>urn:dece:userid:org:dece:158F78D533AE0C08E05305991F0A37BC</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_1</con:name><con:value>urn:dece:userid:org:dece:158F7EFC4BF0595CE05307991F0AEE84</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_2</con:name><con:value>urn:dece:userid:org:dece:158F78AF84A30C00E05305991F0A2221</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_3</con:name><con:value>urn:dece:userid:org:dece:158F78AF84A30C00E05305991F0A2221</con:value></con:property><con:property><con:name>Node_ID</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>primaryemail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>ProvisionHostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>off</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_7.8.2</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\StreamView</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>StreamView</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>pgentry</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>SAML</con:name><con:value>nVZrc6o6FP0rDudjBwmICkx1hmr12NrH0dY+vnTSsNG0ECwJas+vvwkqFfu43jvjjJPNztprP7KSY47jyPJ8ziEVNGGVVRwx7uXWlpalzEswp9xjOAbuCeKN/YuhZ1WRh7dbtMqg29KewHRJA0JXt90A67Zju7pjgaWHAamFDdSsI6cmXTnPYMC4wEy0NAuZdR3Jn3ODXM9CHnKrDcd+1CoTSLnEli5VpG1IrXhLmwkx9wxjuVxWl7Vqkk4NCyHTuL8YjskMYqy1j9cZ5YHS9safVAMgEEWkSpLYODZKPscB98Z0yrDIUtjECr6LhQzkGtIn4HT6Syv2QjBgYZIvO5gljBIc0b9Y1ecCxCwJKn40TVIqZvG3SZhIAeuwIjoxbfZLM8rUDgQqMUw51vkMmxusEYSQAiNQuR0NWtqvw7qWb71JMeNhksa8vPxvfIAtIErmEOh8m9aG2uGAX1SqfQzEGzASZZwu4FIN6xwT4JtuAjkcqnKdQkhXQ8rlgK64Ymfs0ttbrqvRpVPg4v80aKc5a5AJjjJo05XfzOjz5dEb3Ar3khwNJ48Jv3LFHWrlBHadc0PR2vVybyiLIVrvwJbdubMmV6vLCXl/nYxewiywzkK/K/rod398N+30+tPJ9XmWDmZnjftXtIrp3Xlz+YeHC/f8WWQNc7B4eQib/ZP7s1t70sP+7dJNO9ZZ4+49QfdH9ZOHB8ThnM5RH0Zw5Z9aYlSf2+L2Nao9d32fpn2nUfvbZfco/T18uW/eiH5MrtznGX0cN5p/hmdnj8Hdw2+nVaSzw79s2575cfb8AkRsl2oMBt1KT3YJi5/FTFlooIe5qzdX4sMFMKG11S6lHV4m5Y4Gnuzhem3WnV7T8XuO7ddQB6FTVK+huuuaPeRblmVuRWbNYo9iJ2EhVbGU5K7H5meCJPY4sABSfZFkUum49gNiFwtcGbCRPAQJ43CTSHk2HRK5ZE7f07eoblpTLFzuOHb4AlrlMhFX7Cr1QwFpSZRNqyTKIyB0TkEptxpsLiebC1mMN7zIRGRWF7jKIJPaniqZ9SzbqRucxvMIFFUjToIsgup8Ns9LY/D1v6VjwnNrd+iPr58646f8RBjf5rf/bVsK6RNQ5cBVSicg2wn7l4zpevVtPp/ybnx5GW3h/Syg6oDJuoqUkjWT8qePcVFzUszKR2Jb5sWGfUMJ3NjPq4gXLCgp5r64vaWoSxlob5vzhs3qWzVbLLK8H7ZdM1IJb6iKGMgyxkAyKVTvN8krMKNAMQ66FQrie8ELe5liJmZsLLCAWM5PJV8e8AwYA1fPgIGc/NWhb4xSSFk6ASvxla0TySeMYvzjK4d4RPlJ87X8WyZp8NGxL7B24sg85StAUDZVK3UjvH8zHiSRsFRqWZLugn8F8FXwsrEocsFFyIF6zgR8/6WiRKqlYUKSjIlBV8sNu8KZ8xTvc/A+nD7B5NpcPNbov7/WdJqPAJEaJP1zfHXneuoIsOmO+G6C7uuvfdq1T3snFrJq3Vx/m2v9RY26WxSlxK79yfzZslOn/Rlv/wM=</con:value></con:property><con:property><con:name>SAMLBAU1_1</con:name><con:value>nVZdb+I4FH2fXxFlHkchH5AWooIUCNmmW9pO0+109mVlnAu4JE6InZD2168dGgqUdtuVkJBvrs8998PHPmMoiS3HZQxyTlKqBF5f/cfu9rq9mQmaAdOp1kHY1BDqdrXprG2YFmrjrjVVlYCxAgLKOKK8r1qG2dGME82y7kzLMeSv1Tvp/a0q95AzAS1cWoaqVElMmVOH7atFTp0UMcIcihJgDsdO6E4uHeHpoIaTOjjbsKwD5oMF55mj67gVAYY4xi2cJvqZvudzFjEnJHOKeJHDS8yI9dWXvev1urVut9J8rluGYehGTxc+ESPz7+rgW7MZooDO0s16hGhKCUYxeUaS1AT4Io0UN56nOeGL5B1oUzcNCa1BhTVsduh3VX8NULP7JNIeyZwhjS2Q2YDdwgxyoBiUv26Dvvr9cx3c7L3LEWWzNE/YwfprlICWEKcZRBprMmvYfR7xSLkGZ4CdgOK4YKSEKzkmGcLAlJscZqS6JEwMX8SUuv1KxcSPNFMG+CttOdN3uQrq+pHqeGQOjP+fnu32a4Nyj+ICBucFzMf2KrkIn3H7OhmeDukos3/fr5frfk1h13lDatvul/XhsG5n62XTavTs+/GVXbqouvjdC137Z+BNzYviJLg8/5Hc+OR+5rGr+6rjj6fzzPL+uL2e+qOs/HmRPbT99c0P/ms6DiZP4XL5bdmb3BTlpDKrU+qxYdENz8MLv+Muu3e/zWV482jGZcf07OjHNZrqq8nlaPhUrH/9OfKL7Dw3Hiw6HfvoOkNX7uW3chThiK1sm3q6r/9kOlv2X3PazWHf2EhCWEwfAfNmKccj8BRf9Avxj+VFWkikzWpXJ5MaxThQrg7kLiktTiEEiESOaOZm7Y9ORlbb89rtYbfdc42x0TFM33ANu9frjGyj0aANiwOKo5TOiIwlVXYzPx8TxInDgEaQa2Va4AUw9QNED3GkBPRWHI6UMrhLhYqbs6dFnpodXJUxNy36CPPHTmQ8I6QqVym/pte5O+OQ72u3vafdt4BJRkAKvJxwJkaccVGMFSoLHputErUoFOIKyKUKO1ana+uMJFkMkqqepFERQytbZHVpdLb5tzSEWW0lDGdpzlFs1gfw3fwOvzWlED4RkQ5MpjQE0U54cxeZjt3k8yZv++id1cC7RUTkORN15TnBGyb7n17HRc7JdlZeE2uYbzd8EQCzIxD6B/z0w9JsI0Yl2Ynf3K/iyhCCMmj6u0KtVasoy6Lu6KkUy1zA60IzTT0EXAjFe7pLl0D1LYT+qQtny/og8ta+z6/gCxpyxCER86fUy0+8NkJg8rURiJNTffYpsxdS1I1DxY/ZRrF4lEjGH75bsIOlnzDfiL91mkev7TqCtRNH5CmeGJzQuVzJq+XpnenAqYAlQgvTfBf8GMCx4PvGbZG3XLiYpmnB4f0vihS5voowTgvKA0+tDbvCW/PkTxk4r05vYGpxf7mtK/bubf0wuQyFBCZI3fqS/3bWSD0uGFT5KKi59NVKPD5FcDrfEfoXgoda37F6Pcsdj92T0+6u1p9Yw/G2gHuZDN6Y31p2anp4Hgb/Ag==</con:value></con:property><con:property><con:name>SAMLBAU1_2</con:name><con:value>nVZdU+o8EL73V3TqpVPSlhZpR5hBEE9VFMUvvDkT0hSiJYEmLXB+/UmKrYDo63lnmCnZbnaf3X36JCccTmPbb3GOE0EY1YJOQ/9tRbgKa2ZoVK3IM5xavW6Mwio2at4IIXPkVJHp6VrAeYoDygWkoqHbpuUYZs2w7XvL9k3bd+sV2z5+0bVHnHAZWrpUTF1bTmPK/TxtQ08T6jPICfcpnGLuC+QPWr0rX3r6sMCkN0/WKPOESXMixMwHAFVCjHAcowpiU3ACtnxOQu4PyJhCkSb4PWfIG/r73sViUVlUKywZA9s0TWB6QPqEnIwP9eZBsRmHAY3Yet2GlFGCYEz+QAWqh8WEhVorHrOEiMn0i9AWsEwV2sBLZCDLoYc6+EiQo/thpC2QCYcGn0CrCHaHI5xgirD2cBc09MOfTXC99z6BlEcsmfKd9b9BwjTDMZvh0OBFZQW6n0fc067mCUZ+QFGccpLha0WTGUSYa/0ER2R5RbgkX8i1fPzakssfKViG0b+M5QRsYpXQwZ7udMgYc/F/ZrY5r3WURxinuFlrnS/Di46L3ZZtdTse6rqvL5f9y37AGjmETec1qHLc7+tdspbcet+0EtnxIgbOJDsOr7P57Ojq+OjGWwQwel2t6NMRBeeXvX71ggAWdxfjJzcanA6FB1747RAts97xQ/fXw+Utmqeif0CenaNh//xx8faU1c7IzS8246ehx246jt3vZ6k3Gv6xh+BteA5aUfI8Gs7GVWY/rIbiyLxIWEpQx22n56fRNQQH19Zt4AZv0GW3MO5F86tWr/FR02YN28ZCEgbp6BUjUSwVPYKO1pXzguJ7eVEWEhpR7urPlEZxganQm2qXkhY/lQJEQl8Oc73utmttu9rpul3XMlumfWY6ptWV/1zPc9purdCgNYodiG1GI6JyKZVd8+d7gGjqc0xDnBgZS9EEc/2biB0ooBbQO/lxMMrxPVMqbk1ea6P6ZBGhmm1N7HBOTWce1e2Rrl0zcUNvklYkcLKt3e6Wdt9hRGYEK4FXDOeS4lzIZsxhlorYqmSwQnEqj4BEqbBvO3UXcDKdxVhBBVMWpjGuzCazvDWAr5+2ARHPrXdn97/bg99W/vl9Wd3uu6IR0ickyoGrgk6xHCbecxI5RTWfqnb3nlhF+FYaEvWVya6KhKA1ku1XH2RRLCmZUpRV4C7ddw1bocFuVWW2MCOo5Hx5WEutl0rQLAYzh5V5Jc2yNB/FsVK5RIYHUuwsMMAolVK1umdvmIIyBPjRSVGi3slc2rfxpWJCBwIKPJXE0fLlD64JA8zVNSGQlF/+9A6ylVL2TeCl2Gdrx/I2oRB/e+FAPlJ+0tyXjwVLwo9x7Ym1kUfWKe8GgtCxWqkzYfUFMxCTYYkUMZZsBt8XYF/ybWPZ5BKLkGwapQJ//UZT6tTQIUIspSLo6LlhUzFznGI1w/6H06cwuSq/H7NL/uUx+9y7GkjtmkK99CX/7WyQnC4I6+o0z7E09KW8NcrkdLyh0O8Ad0Xasb2617JrbvesuynSNfu0VTZwq5LmJ/Nny0ZPd7+H5l8=</con:value></con:property><con:property><con:name>SAMLBAU1_3</con:name><con:value>nVZbT+s4EH7nV0Th8SjNnbYRrVR6WWUFHJb0wIEXZJxpY5o4re30wq9fOyWhLYXlrFQp9WQ8883Ml88+5yhLnaDHOTBBcqqFg47+1PRdH7fiptHCLTC85sQ22h5CBnaeXdeNkdX0sK6FnBcQUi4QFR3dsWzPsM4MxxnbTmC5gWs1vLb9qGt3wLgMLV0alq6ts5TyoEzb0QtGgxxxwgOKMuCBwEHUu7oMpGeAKkx693yLskzIuokQ88A0cSMGDGmKGzjPzHNzz+c85kFEphSJgsFbzph39Le9q9WqsXIbOZuajmVZptU2pU/MyfRU755UmyEO6STfrvuI5pRglJJXpEBdgUjyWOul05wRkWSfhLZN21KhDVhjA9sePdXN9wQlum9G2gPJODJ4guwq2C1MgAHFoP26DTv66fcmuN07ZojySc4yfrD+M0hAl5Dmc4gNXlVWoft+xCPt6p4DDkKK04KTJVwrmswRBq7dMJiQ9SXhknwx18rxa2suf6RiGeA/Gcu5uYtVQjePdGdApsDF/5nZ7ry2Ue5QWkB39cu+7z/4JNvMNj96zgT+biYX7susbbY6JYRd5y2oetxv60Oy1tx62zTO09Fjb4buU/dhaN3cYjOax374iPP4Ci4ilE6nOEpY1H5+HTaH7XBxOXDb4yGbsWg52sRRkrxkzw5jHru+PGFWyqdF7/Uf/Fj4JIrvxjQRD26zcFN7MXtewO1Z5F24lpeOm7ZfjJbW3XrRpM79y2zh+r/pjzCkrD8YE3sxPXm44sV6GLbabHN3dY3Xf21w572m3Rr2jZUkRMXzC2BRLRU9woE2kvNC4mt5URYSG5PSNZgrjeICqNC7apeSlqCQAkTiQA5zux71z/qOOxj5I9+2epYztDzLHsl/frvt9f2zSoO2KA4g9nM6ISqXUtktf74GiLOAA42BGcu8wAlw/YuIAySQFtJb+XHklMM4lypup692a5W8UsLcws78nM1eeNFcIkfXrnPxk/5kvYkAtq/d/p523wImcwJK4BXDuaQ4F7IZC7QsRGo3lqhBoZBHAFMqHDheyzc5yeYpKKhmlsdFCo15Mi9bY/Lt0zEQ5qV1cNmLbp760ZNdfoCf1nf4rmqF9ImJcuCqpAuQ44QjZ5FT1fOhbv/omVWF7xUxUd+Z7KtgBG+R7L96p4viSc2V98Iq5PWGQ8NecPOwrjpfvCS45n19YEu9l2rQrYazQI1Fo1gui3IcTaV0TIY3peDZZgS4kHK1GeczoGYdwvzWaVGjPshc2/fxFSKhkUACMkkerVx+46oQAVdXhVDSfv3de8heStk3AWtxzNZP5Y1CIf7y0oEDrPyk+UY+VjmL38d1JNZOHlmnvB8IQqdqpc6FzSfcwLkMS6SQ5Ww3+LEAx5LvG+sm11iEZNNzIeDzN5pSqI6OMM4LKsKBXhp2VbPEKTZzCN6dPoQplfntqF3zT4/a31eXkdSvDOm1L/lvZ4OUdMGgqxO9xNLR1/LmKJPT6Y5KvwE8FGrPabfaPefMHw1Hu0J95lz06gbuVdL9YP5o2enp4ffQ/Rc=</con:value></con:property><con:property><con:name>SAMLBAU2_1</con:name><con:value>nVZdc9o6EH3vr/C4jx0j28E29gRmKF91Cg0NaZvm5Y4qL6DElkGSwcmvv7KJHSAkN70zzDBar86e/dCRzgVOYjvoCgFc0pRpYb+t/+Ob7hwc3DK8JgGj2bTA8G1sG2C5tktcIMRxdC0UIoOQCYmZbOu2aTUN0zVs+9qyA9MOmnbDcexbXfsJXCho5dIwdS1PYiaCMmxbzzgLUiyoCBhOQASSBLPuZBwozwBXnPTO+Y5lGZB3llKuAoRIIwICcUwaJE3QOTrwOY9EMKMLhmXG4SlmJNr6097tdtvYnjVSvkC2aZrI9JHyiQRdfNQ7H6rNEIVsnu7WPcxSRgmO6SMuSE1ALtNI68aLlFO5TF6BtpBlFtAG5MQgVpN91NFzgJLdO5EOSHKBDbHEVgV2BXPgwAhoP67Ctv7xfR3c7b3mmIl5yhNxtP47SsA2EKcriAxRZVaxez/iiXJ1zoEEISNxJugGvhVjssIEhDblMKf5mAo1fJHQyvZruVA/Wk0ZkL9pyzna56qooxPV6dMFCPl/erbfrx3KTxxn0EFfyDy3zcm9Hw3RaIZHy8Wc9D/n3weTdklh33lHqm730/p4WOvZetrEBzzafH10Wjdzf/GrOTrjo8e7m3E4bV2Pv7izEfJmZv86+Wp7IzeZLnAfDZB3f4HE5cTZTt3sy5m9ze/6vemEDj98D/EnuLpYo2n2OJMX2x9JDyZT/5Za8dCntzL8/Sv86jvLbozZ7/lvn3vdH8NJdzq5SAlZPOQPNzZfu2Q88+7DD38e16Ppt7W4HV/2x8lquvz0vf2c034Oh8ZKEmbZnzsgsloW4xH2taHqF5Zvy0thoZExL12DVaFRQgKTeqfYVUhLkCkBolGgmrlbD3tuzz4bmGee6zutoTcwm6Y1NLum5/u26bUqDdqxOKLYS9mcFrEKld3Nz9sESRIIYBFwY5NmZAlCfwOxjyXWQnalDkfKBFynSsWtfBMRz8zMBfDUejAZ8ZJWIkl0p2vfUnnJLnl3LoEfardzoN1XQOiKQiHwxYQLNeJCqmKs8SaTsdXY4AaDTF0BvFDhwG62HCRosoqhoIqSNMpiaKyWq7I0SOz+bQMTUVqpIKuUSxxb5QF8Nb/jb1UplE9ECwdRpPQZVDvhxF10VuXzIm/n5J1VwXeziBbnTNVVckp2TA4/PY9LMSf1rDwnVjGvN/wlABEnINAb/NBxaeqI0Ybuxa/uV3VlKEHpVP1d48a6kW02WdlRrxBLruCR0kwLzYBkSvEertN7YKiGQO+6cGrWR5Fr+yG/TC7ZTGIJiZo/rVy+47UxA1G8NkJ1cvL3PmUOQqq6ScjlKVsvVo+SgvGb7xYSkMJPmafqb5vy6LldJ7D24qg81RNDUrYoVsXV8vDKdJBUwVKlhSnfBz8FcCr4obEucs1Fqmn6k0l4/YtWiFxbx4SkGZNhXy8N+8Jb8pQPKwienV7AlOL+dFvn4tXb+mYynikJTLBe+9L/djZoOS4E9OJRUHJp67l6fKrgbLEn9E8Ej7W+aStd7w4GXddr1Vrv+L5rfx7UBTzIpPPC/NKyV9Pj89D5Fw==</con:value></con:property><con:property><con:name>SAMLBAU2_2</con:name><con:value>nVZdb+I6EH3vr4jSxyrkkwBRQeJzN7uldAvttn1ZGccBt4kdYgcov37tQFKgtLd7JSTkyXjmzMzxsS8ZiCPLazOGUo4pUfxeU/1TtwwXuEGohfUw0JyGbWmNEEy1ac2y60bDDe2aoSo+YxnyCeOA8KZqGaajGa5mWRPT8gzbM+2KXWs8qco9SpkILVwqYtc6jgjz8rRNNUuJRwHDzCMgRszj0Bu3h1ee8PRAgUltXW5R5gnT1pzzxNN1WAkQRFEEK5DG+qV+4HMZMG+MZwTwLEW7nAFrqru9q9WqsrIrNJ3plmEYutHQhU/A8OxcbZ0Vm1Hgk5Bu111AKMEQRHgDJKgh4nMaKO1oRlPM5/EHoU3dNGRoDa2hBk2HnKv6W4Ic3RcjHYBMGdDYHJhFsFsUohQRiJS7W7+pnn9tgtu9kxQQFtI0Zkfrf4OEyBJFNEGBxorKCnRfj3iiXa1LBD2fwChjeImuJU0SABFTblIU4vUVZoJ8AVPy8StrJn64YBmC/zKWS30fq4Cun+hOD88Q4/9nZvvz2ka5B1GGWhadPZHeUxQ+dPWL/uZer077T5Nh3UZOM4ew77wFVY57tz4ma8mt3Sb/vtv9PnncxC/RKHH65moz7L4kyaj7SOuLb6+L8Yba1SHyf9e5iRftlJL548Dpd0d2vK49j6xV8sMd9e9/IWOxPPtefbnoTJ9mq9nm+hpgwNfpYzIFg2+9sP17XG1Mf9UJ2kzul2QxWDz/HN49+8b4qj7znbuYO2ktebB/Dnj7pnPx4/rs4s6d8xl13elD33bXTuw6zbea9ms4NBaSMM6mzwjyYinp4feUgZgX4J/Li7TgQAtzVy+RGsU4IlxtyV1SWrxMCBAOPDHM7XrQdbuO1enUjX7bHnQ6fcMxzIHRNqqNhmt13EKDtiiOIHYpCbHMJVV2y5/PAcLYY4gEKNWWNINzxNRPIvYAB4pPbsXhoIShCRUqbr7Q8DWzgqixWa7MhZW4SbjiEU1V5ZryERml7ZCj9FC6qwfSfYsgTjCS+i4JzgTDGRe9WIBlxiOzsgQVgjJxA6RShD3LqVd1huMkQhKpHtMgi1AlmSd5Z3S2/bc0AFluve1P/nTHf8z89H1Y3PG3og/CJ8DSgcmCOkjMEp24iIyimndVV09eWEX4dhZgechEU3mK4RbJ4ac3rkiSlEQpyipwl+7HhoPQ+nFVZbZgiWFJ+fKuFlIvhKBVDGYBKotKtlxm+ShqUuRSEV4XWmfqYwQzoVSvE/qCiF6G0L90UZSojzKX9kN8GZ+TMQccxYI4Sr78withjJh8JfiC8euvPkEOUoq+cbTmp2zdSDwmJOJP3xvQg9JPmG/E34qmwdu4TsTayyPqFE8DjslMruSV8PoBMyAVYbHQMJruBz8V4FTyQ2PZ5BILF2yaZhx9/EWR4tRUAYQ0I9zvqblhXzBznPw1Qd6b07swuSjvbtk1+/CWfRhejYV0xUAtffF/O2s4pwtEqrzMcyxNdS0ejSI5me0J9A7ge41u1Btty60O+oMjjW6XDTyopPXO/N6y19Pj89D6Cw==</con:value></con:property><con:property><con:name>SAMLBAU2_3</con:name><con:value>nVZbb+I6EH7fXxFlH49CLiQUooIUoHTZloUSetm+rIwzAbeJA7HDpb/+2KFJgdKe7pGQkCfjmW9mPn/2OUNxZLkeY5ByklCl322qf1ADHKjaoYYa9ZpmTw1bm9arNQ2fnSHbCWuWbZiq0mcsgz5lHFHeVC3DtDWjplnWxLRco+raTqVqOI+qcgcpE6GFS8VQlU0cUebmaZtqllI3QYwwl6IYmMux63uDa1d4uqjApLbOdyjzhGlrzvnC1XVcCQBDFOEKTmL9XD/wOQ+Y65MZRTxL4TVnwJrq6971el1ZVytJOtMtwzB0o6ELn4CR2Xe19a3YDEGfhslu3UE0oQSjiLwgCWoAfJ4EihfNkpTwefxBaFM3DRlagw3WsGnT76r+liBH98VIByBThjQ2R2YRbAwhpEAxKLfjflP9/rUJ7vZOUkRZmKQxO1r/HSSgK4iSBQQaKyor0H094ol2tc4Bu32Ko4yRFfySNFkgDEwZpRCSzTVhgnwBU/LxKxsmfqRgGeC/Gcu5vo9VQNdPdKdLZsD4/5nZ/rx2Ue5QlEFrODImg+nvIMK9+bzN7UnigTl4eXi8vWjmEPadd6DKcb+uj8lacut1E73y74fT4TTr+asbfJeu12E06GwbN5374TJpN7ynerfqdcMxe2TV5/H9w5Bc6j9+X417xsS/W59F+HrpmaOL/ku8+fZ8G9avxk/65RUN4u3I/Gdxad8HUKX1vtPpjm/b5O7mcknmD3ZnbmZ2ENz6bPS71vCdF8tYp6PNqMd/3jjsx7KHvz0aG//l+uXuh73sGYMp9bes+VbTfg2HxkIS/Gz6BJgXS0mPflfpiXkh/rm8SAsJtDB3dRdSoxgHytWW3CWlxc2EAJHAFcPcrXudWse22u26ceFVe+32hSFOUc/wDKfRqFntWqFBOxRHEDsJDYnMJVV2x5/PAeLYZUADSLVVkuE5MPWTiF3EkdKnY3E4EspgkggVN7NtOIvrbJmaz5bpWHYQndl8aT4xVfmV8CEdpl7IIT3UbudAu8eAyYKAFHjJcCYozrhoxhKtMh6ZlRWqUMjEFZBKFXYtu+7ojMSLCCRUPU6CLILKYr7IW6Oz3b+lIcxya/fa80d/Ov4fMz+AH9Z3/K1ohfAJiHRgsqQ2iHHCibuoWtTzrm7n5J1VhPeygMhzJvrKU4J3SA4/vdFF8qTkylthBfJyw7HhILh+XFeZL1gRXPK+vLCF3gs1aBXDWaLKspKtVlk+jjOpdKkIrwvBM3UfcCbkajtJnoHqZQj9S7dFifooc2k/xJfxOfU54hAL8ij58gtPBR+YfCr0Be03X32HHKQUfeOw4adsnUi8KCTiTx8d2MXST5hH4m+dpMHbuE7E2ssj6hTvA07oTK7kvbD9gBs4EWGJELIk3Q9+KsCp5IfGssklFi7YNM04fPxFkQrVVBHGSUZ5v6vmhn3VzHHy7QLcN6d3YXJlfr1qN+zDq/ZhcO0L/YqRWvqS/3bWSE4XDKq80XMsTXUjXo4iOZ3tqfQrwPdC3ag3PKvm9C56R0LtlQ08qKT1zvzestfT4/PQ+hc=</con:value></con:property><con:property><con:name>SAMLFAU1_1</con:name><con:value>nVZrb+I4FP0rKPNxFPIgKSEqSDxKh52Wdnl0ln5Zuc4NuE3sEDuQ9tePHSAFSrvMSkjIN9fnnvvwsS85iiPbb3MOqSCMVvI4otwvrE0tS6nPECfcpygG7gvsj9u3N75dNX2026JVBr2m9q/r2qZlm0g3vYu67oS1ht4IGrYeWtjzUCN06g6WrpxnMKBcICqamtzh6qb8eROz4Vueb5rVC+/iUas8QMoltnSpmtqWVM6b2kKIxDeM9XpdXdeqLJ0btmlaxj+3N2O8gBhprctNRkWgtLX1x9UAMEQRrmIWG5fGgc9lwP0xmVMkshS2sYLPYpmG2TCkT8DJ/JtW7oVgQENWLLuIMkowisgbUvW5BbFgQaUdzVlKxCL+NAnLVMA65FjHlkO/acYhtTOBDhimHOl8gawt1ghCSIFiqExHg6b27byuFVsnKaI8ZGnMD5d/xgfoCiKWQKDzXVpbaucDnqhU6xKwP6A4yjhZwVANa4Iw8G03AZ8PVblPIST5DeFyQHOu2Bn79I6Wm2r0yBy4+D8N2mvOBuQBRRm0UHfdi6b3d2v0lP64o+yn44rOMoRpPm8WBPadC0PZ2s3yaCjLIdrseBoMIROL5+Vkliy9TsCdn4vxgxmHeDobi+HrS/6QOxd//bp5dK/b5o/n6boWvI3m3eHfszT/Ps1ufsXmvD+xbs00xtPJPfYGaJ3B7DG6WT7/sBZuOsphOp25b2Qa1GbXw2ViBn1B3e+P5jXcA+s6C5lM9siuX6Kr4TyKeTgbva0t8uuKdUZh53nSGTI79C5um2U6e/wPbbszP86engGL3VKNwaBX6csuIfG1mCkLCfSwcPUTJT5cABVaS+1S2uFnUu5I4MsebtaW6/Vdq+fVG1bfqdfqV6ZbM92GXJntfqPf2YnMhsURxS6jIVGxlORuxuZrgjj2OdAAUn3FMql0XPsCsYcEqgzoSB4CRjlMmJTnZT1xvRxb8cvKdp/CzCXmi6g1Qq0yZOKO3qXtUEB6IMmWfSDJI8AkIaB0W401l3PNhSzFEq0yEVnVFapSyKSyp0pkfdvxXIOTOIlAETViFmQRVJNFUhTG4Jt/W0eYF1bCccJSgaLiPBifZnf8bVcI6RMQ5cBVSh2QzYQPV0zdd3f5fMj74uRVtINvZwFRx0tWVaQEb5gcfnofFjUl5aS8J7ZjXm74QwDMT0AYX/AzjktTRgxWZC/+7i6Xt4LUkdauv0tkVZfVbLXKipY6Ts1IJbyhimqYtjEGnEmle52wF6BGiWKcda2UxI+Cl/ZDilKu6FggAbEcwUqxPOMdMQau3hEDeXTycx8pByFl6QTk4pStG8k3kGL85TMJ+1j5SfO9/FuzNHjv2AmsvTgyT/mMEITO1UpdKa+fDAhmEpZIMWTpPvgpgFPBD41lkUsuQg7UUybg8y8VpXJNDWHMMioGPa0w7CtvwVO8JuC/O32AKcS9fO2R/37u6aQYAQzyjchJga8ubV8dATrfU+9t0GMBd6769a5Vc03b7hYCXt8IuHPVfj9pB+xaH8wfLXt1Op7x1m8=</con:value></con:property><con:property><con:name>SAMLFAU1_2</con:name><con:value>nVbbbuo6EP0VlD5WkAuBQlSQKLeyW3Ypt7a8VMYZwCWxIXaA9uuPHSAlFHo4R0JCnozXrLl42bcc+Z7lVDiHQBBGUxvfo9yJrCUtDKjDECfcocgH7gjs9CrtR8fKGA7ab9FSrVpJe7eQWRi7rpGGm3EhbRfGdhph204XYJzHeaOYMw0sXTkPoUW5QFSUNMswc2lD/gp9o+iYRcewM1n7ZqSlhhBwiS1dMoa2I7XhJW0mxMLR9fV6nVlnMyyY6pZhmPpr+7GHZ+AjrXy7zSgKFJR3/jjjAgbPwxnMfP1WT/jcutzpkSlFIgxgF8s9F8vQjaIufVxOpldavBfcFp2waFlFlFGCkUe+kKpPG8SMuamKN2UBETP/bBKmoYDTsMFpbNr0StOT1C4ESjAMOErzGTJ3WF2YQAAUQ2rQbZW0q8u6Fm3tB4jyCQt8nlz+Nz5AV+CxBbhpvk9rR+1ywBOVKt8CdloUeyEnK/irhnWBMPBdNwFfDpXqBDAhm0fC5YBuuGKnH9I7Wm6rUSNT4OL/NOigOVuQIfJCKC+rry+sWa9+TKrixetYo6HeWdzR2Vu+XooIHDpHhri12+XRUMZDtN3Bw84f3f/oXU+zz426QYr+LPjs6M3XdhXa7ZcGuW+hCprDW2NSs/JzE7fRMj9ocPLWIc1hXXju17rwte4/rJqvI9IX8ya5u38Y0N7omQyHf8jj4CN4qxaeR5V+P1trdvqj+9ZyZU/Hxf5g0eSzfteaT3od422D756eJ9eQfbVn8xxZ1r3XazQt2CPReBisguy0VYrTOeCftO3PfC8cfwAW+6Uag1Yt1ZBdQuJ3MVMW4qYnkauzUOLDBVChldUupR1OKOWOuI7s4XZt5goNu16z640727CytbqRyxo3xaLZMCpGPlfci8yWxRHFKqMTomIpyd2Oze8Ese9woC4E6RULpdJx7RfEGhIo1aJdeQgY5dBnUp6xXfz6nKOb7GJjLNdszcxVUUzYh5b6y8QTfQoqEwFBQpJNKyHJXcBkQUDpthprLueaC1mKJVqFwjMzK5ShEEplD5TIOpZdyOmc+AsPFFHdZ27oQWYxW0SF0fn235J6wyNrt95/r/beo9Ogn83t+Nu+DNLHJcqBq4TuQLYSflwwBSe3z+ZH1vmTF9EevhK6RB0uWVMRELxlkvz0PSpqRuI52ae15x27HxsS0PpxVnE0d0VwPPHxvS3lXApAed+YJTIzy0y4WoVRL2w7qwcSXlf10A1L7wEOpUR99tkcqB6j6BfdBzHxo+CxPUkxFDPaE0iAL2cnFS0veAD0gKsHQEvO/ObS10UipCydgI04Zat68vGiGP/6vsEOVn7S3JF/axa43x07gXUQR+Yp739B6FSt1F3weWY4MJOwRKoYCw7BTwGcCp40xkWOuQg5UONQwPkvKSVPJQ1hzEIqWjUtMhxKZsRTfC7A+Xb6AROpcvxMI//+TkuTaAQwyMcdJxG+um0ddQTo9EB2d0HPKK/1m/Im2ZV/mH9aDup0POPlfwA=</con:value></con:property><con:property><con:name>SAMLFAU1_3</con:name><con:value>nVZrc9o6EP0rjPsxA37y8gRmCIQb2qRNMSlpv3SEvAYlRjKSDE5/fSUDDiYkl3tnmGG0Xp09+9CRLgVaxo7fEwK4JIxWsmVMhZ9bO0bKqc+QIMKnaAnCl9gPene3vlOzfLTfYlRGg47x23UajoOtqGrZ0Kh6ba9enbXsetWduZHVxghBY6ZchUhhRIVEVHYMx1IOlvq1Jlbbt9u+Z9daTeuXUfkBXChs5VKzjB2pTHSMhZSJb5qbzaa2cWuMz03Hsmzz8e42wAtYIqN7uc0oD8S7O39cCwFDHOMaZkvz0iz5XIbCD8icIply2MUK34tlmVbbVD6hIPNPRrEXwhGNWL7sI8oowSgmf5Cuzx3IBQsrvXjOOJGL5btJ2JYGrkKGq9j26CfDLFM7E6jEkAtUFQtk77DGEAEHiqHyMB51jE/ndS3fOuGIiojxpSgv/xsfoGuIWQJhVezT2lE7H/BEpbqXgP0RxXEqyBq+6mFNEAax6ybg86Eq9xwikt0SoQY0E5qdeUjvaLmtxoDMQcj/06CD5mxBfqA4he5TO7h33H7zid/agKdf11Hcn4gsaK1/dnICh865oWjtdnk0lMUQbXcsv9z1WD1qfH94aE2e4eHzLwtW9Z9eizWd65vmFbsaDDPUd7MghFSi2+fvo4eXm4dHZC4kvWg27x2UTm+QfOyF05touOFT0bgJGlfuGO7G0z9f/jzD1efhS3QdDNjsInEfe98aLzDj0x9eFhKeuL1kcbEaPV/0o7tV5H6eXKdTJQHiZvHPpm65Eyvzfj3xi4Y9xp0inQP+Zdv+zAfp7Amw3C/1GIwGlaHqEpIfi5m2kLAa5a5+osVHSKDS6OpdWjv8VMkdCX3Vw+3arreG3vXAux5eeZbjDq6tums12217aPWsRr29F5ktiyOKfUYjomNpyd2OzccE8dIXQEPg1TVLldIJ4wPEAZKoMqJjdQgYFTBhSp5tmWYrm9Xd9WyVNqWFExdn7oq0jMpXJr/Rb7wXSeAlTbadkiaPAZOEgBZuPddCDbaQqhYrtE5lbNfWqEYhVdLOtcr6jteqm4Iskxg0U3PJwjSGWrJI8sqYYvvvVBEWuXVw2wvuf/eD3/mBMN9N7/jbvhLKJyTaQeiUrkB1E07cMe4+nzd5N07eRXv4XhoSfb5UWSUneMuk/Ol1WvSYFKPymtieebHh2FACN4/zKuKFa4KLsS8ub6XpSgW6++askF1b1dL1Os374XmuyRW8qStiWo4ZAE6VTr1M2DNQs0Axz7oUCuJHwQt7mWIqFzSQSMJSzU8lX57xCghA6FfASA1+du4ToxRSlU5CJk/Z+rF6wWjGHz5ysI+1nzLfq78N4+Frx05gHcRReapHgCR0rlf6Qnh5ZzwwU7BESRnjh+CnAE4FLxuLIhdcpBqoWSrh/S8VrVEdA2HMUipHAyM3HOpmzlO+JOC/Or2ByaW5eKuRf3+sVUk+AhjUC0+QHF9fub4+AnR+oL27oO/Ir/OR/JbZdd+Y31oO6nQ8492/</con:value></con:property><con:property><con:name>SAMLFAU2_1</con:name><con:value>nVbZcuo4EP0VynlMGclbAq5AlWNgLhMIYblZeJkSsgwiRnYsGUi+fiQDDhCS4c6TS+3W6dOLjnTD0SIyXY9zkgoas9J6ETHu5taalqXMjRGn3GVoQbgrsDv0uh3XLEMX7bZopXajpv1jOWhyVYWOjm2EdfvKcnRk2xPduZ7AquNch5PQlq6cZ6TNuEBM1DQTGo4ut8DKCFZdo+Ja12XbccZa6ZGkXGJLlzLUtqTWvKbNhEhcAFarVXllleN0CkwIDfDc7QzxjCyQVr/ZZJQHSutbf1wOCCZRhMs4XoAbcOBzE3B3SKcMiSwl21jBd7EggFUgfQJOpxdasZcEbRbG+dJHLGYUo4h+IFWfLhGzOCh50TROqZgtvk3CgApYJ2usY8NmFxo4pHYm0AHDlCOdz5CxxRqQkKSEYVL6PWjXtIvzupZvHaWI8TBOF/xw+Wd8CFuSKE5IoPNdWltq5wOeqFT9hmC3zXCUcbok92pYE4QJ33aT4POhSg8pCem6Q7kc0DVX7MA+vaPlphoNOiVc/J8G7TVnA/KIoozUx53+PF7dzWYraUJg2n+5+yuorvywi2s5gX3n3FC0drM8GspiiDY7EtEW80HFS94bIz/sp32r+ffy9xCFz88J8ubLOUwb6/v4JfCnd81mYwwAb/mdV6vvVWwryvz3aXPk9W5nGNJVMP6A/i//8a36YFhGuwtnidFxRnA6n8PMGN/20mrjzZlYAZhjvryzVv3Hjv3Sg9nsEjx2+0+PvdZq3Hsd9wZP1uV8Gb7I/Y3L8dNTu9L4tfJqRTp7/A9tuzM/zCZzgsVuqcag3Si1ZJeQ+FnMlIUGepi7uokSHy4IE1pd7VLa4WZS7mjgyh5u1oZTaV1XvFbFcHzoQ9iEjgWdatVoQc80TWMnMhsWRxT9mIVUxVKSuxmbnwnihcsJC0iqL+NMKh3XfkBsIIFKbTaQhyBmnIxiKc8GR/Or6rw6r0wqzMgSA8mfH69RMtFK97HosV7qhYKkB6JsmAeiPCCYJpQo5VaDzeVkcyGL8YaWmYiM8hKVGcnkvKZKZl3TrjiA00USEUUVLOIgi0g5mSV5aQDffE0dYZ5bKcdJnAoU5ScCfJvf8b9dKaRPQJUDVyndEtlOcuKSMXf5fMn76uRltIP3soCqAybrKlKKN0wOf32Oi5qTYlY+E9sxLzb8IQDmJyDAD/zAcWmKiMGS7sXf3ebyXpBKUt/19w0Z5bdytlxmeUtt2wKphAeqqACaYEhwJrXufRS/EgYKFHDWxVIQPwpe2A8pZmLGhgIJspAjWMqXZ7wkhoSrl0RbHp71uc+Ug5CydIKsxSmbH8lXkGL840MJu1j5SfOD/KziNPjs2AmsvTgyT/mQEJRN1UpdKu/fDAiOJSyVchin++CnAE4FPzQWRS64CDlQk0yQ7/+UlM7VNIRxnDHRbmi5YV97c57iPSHup9MXmFzei/ce/e8Hn07zEcBEvhI5zfHVte2qI8Cme/q9DXos4Xazde0blgNN088l/Hoj4XbT+zxpB+zqX8xfLXt1Op7x+r8=</con:value></con:property><con:property><con:name>SAMLFAU2_2</con:name><con:value>nVZpb+o6EP0rKPdjFbLSQlSQKEsvvaUL0PVLZZwJuE3sEDss99c/O0BKKO3jPQkJeTI+c2bxsc85ikLba3IOiSCMlpZRSLmXWetamlCPIU64R1EE3BPYGzb7155dNj203aKVeu269hZUqvj0zPZ1xwFXdyFw9GqlhnTLNF2zWjNty7ekK+cp9CgXiIq6ZptWRTflrzoya55V82y77DrOq1Z6hIRLbOlSNrUNqSWva1MhYs8wFotFeeGUWTIxbNO0jOf+9RBPIUJa43ydURYoaWz8cdkHDGGIy5hFxrlR8Dn3uTckE4pEmsAmlv9dLNMwa4b08TmZ/NLyveD3aMCyZQtRRglGIfmLVH36IKbMLzXDCUuImEbfJmGZCliHJdax5dJfmlGkdiRQgWHCkc6nyNpgDSCABCiG0sOgV9d+Hde1bOsoQZQHLIl4cfnf+ACdQ8hi8HW+TWtD7XjAA5VqnAP2ehSHKSdzuFHDGiMMfNNNwMdDle4SCMjymnA5oEuu2Bm79PaW62q0yQS4+D8N2mnOGuQRhSk0en8/wlWEmje+U3VaidEOLh8HrdrVMqjWMwK7zpkhb+16uTeU+RCtd9wPbu+Gr/7vTu3pcewj2npxL/znj14HtSe3Lxac3Bnvg/ZsSbp4aFJRnbCzu7vxNXv/DU9tVvHfiXE1fbLdh5skHvvz/ur14+HklUbB/fPNki0YVCon7cvQ6KO0359dXZ5d3Z89OFMU04q46T93RvOZGPceTkcum8HLdDEJk5VTnV7Fr0s7/fNMni5++93Rs5nErJ6ns8O/aNue+WE6fgcstks1Br12qSu7hMTPYqYsxNeDzNWLlfhwAVRoDbVLaYeXSrkjvid7uF5blWrX7bTdrtU5M22n3TErjnlWq1lds2meVmpbkVmz2KPYYjQgKpaS3PXY/EwQRx4H6kOiz1kqlY5rPyC2kUClHh3IQ8AohxGT8hyRRY2Zq49gHnxY1RmNxjixFssZ1ko3TNzS26QZCEgKmmzZBU0eACYxASXcaq65HGwuZC1maJ6K0CrPUZlCKqU9USrr2W61YnASxSEopkbE/DSEcjyNs8oYfP1v6wjzzDrojN5aw7fsOBjfJrf/bVsH6eMT5cBVQhcgewkHbhhrm82XrE8P3kRb+GbqE3W6ZFFFQvCaSfHT56yoIckHZZvWlnfuvm8oQBv7WeXR/DnB+cjnF7fUc6kAjW1jZsgqz8rpfJ5mvXBdx0gkvKHqYZi2MQScSo1ajdgHUCNHMY66EHLie8Fze5FiKqZ0KJCASM5OKVse8QIYAlcvgJ4c+uWxz4tCSFk6AUtxyNYK5etFMf7xgYM9rPyk+U7+LVjif3bsANZOHJmnfAAIQidqpS6D1TfDgZmEJVLGWLILfgjgUPCiMS9yzkXIgRqnAr7/UlL6VNcQxiylotfWMsOuZmY8xSoG79PpC0wmy/k7jfz7Q00n2QhgkK87TjJ8dd166gjQyY7uboIekt5O98L+SXqL7BpfzF8tO3Xan/HGPw==</con:value></con:property><con:property><con:name>SAMLFAU2_3</con:name><con:value>nVZdb+I6EP0rKPu4CnFCUkhUkCiUlqVdWqCrbl8q1xnANHHAdoD21187QEoo7eVeCQl5Mj5z5sPHPhc4jpygKQRwSRNWWscRE0FmrRspZ0GCBRUBwzGIQJJg2Ly9CZwyCvBui1HqtuvGc7Xm2/6ZA6YbkorpuhiZNbBd04dalRAyrthkrFyFSKHLhMRM1g0H2Z6J1K82Qn7goAChsnfmPBmlP8CFwlYuZWRsSa1F3ZhKOQ8sa7ValVeVcsInloOQbT3e3gzJFGJsNM43GWWBeGPrT8ohEIgiUiZJbJ1bBZ/zUARDOmFYphy2scKvYiEL+ZbyCQWd/DDyvRB22TjJli3MEkYJjug71vW5BTlNwlIzmiScymn8ZRI20sAmrIlJbJf9MKwitROBCgy5wKaYYnuLNYAxcGAESg+Dbt34cVrXsq0jjpkYJzwWxeV/4wNsCVEyh9AUu7S21E4HPFKpxjmQoMtIlAq6hN96WOeYgNh2E8jpUKU7DmO6vqFCDehaaHbWPr2D5aYabToBIf9Pg/aaswH5g6MUGi2RPPJOrbWOH9f0Vd48vOE1Z7/EnfhbzwjsO2eGvLWb5cFQ5kO02UFe+P1siGuLqy5N6dRvrvoPLRR6vXdSWZPQm7grsFZW366GbZZ0Ud/5+eJXJzPXeeo9ylEH392//BrEg6c0vebXHu6TkRdOVhFxO8PJxetsdt2h8D67Wnqr3s9L1OvdD73p3xHIl1mzN1g8XVvp8gmwj7xl532OHt2+N1hcyVpUDR9Ik7uh7M0WXsWOaw/1PJ09/kXb7swP05cZELlb6jHotksd1SUsvxczbaGhOc5cg7kWHyGBSaOhd2ntCFIldzQMVA83a9urddzLttuxL6vIqbQvkVdBVd+3O6iJzjx/JzIbFgcUWwkbUx1LS+5mbL4nSOJAAAuBm8skVUonjG8Q21jiUpcN1CFImIBRouTZXi3FGk+kE1Ze399nvrBr0hWvPDFKvxPZZ33eHEvgBU22nYImD4DQOQUt3HquhRpsIVUtFniZysguL3GZQaqknWuVDRy35lmCxvMINFMrTsI0gvJ8Os8qY4nNv2NiIjJr+6Y5vHtuDZ+zA2F9md7ht10llE9ItYPQKV2A6iYc3jG2H3i7fD7lfXb0LtrBN9OQ6vOlyio5JRsmxU8f06LHJB+Vj8R2zPMNh4YCuHWYVx4vXFKSj31+eStNVyrQ2DVnge3yopwul2nWD9etWFzBW7oiFnKsIZBU6dTbKHkFZuUo1kmXQk78IHhuL1JM5ZQNJZYQq/kpZcsTXgFDEPoV0FWDvz71iVEIqUonYS2P2VqResFoxt8+ckhAtJ8y36m/VcLDj44dwdqLo/JUjwBJ2USv9IXw9sV4kETBUiVlCd8HPwZwLHjRmBc55yLVQL2kEr7+UtIaVTcwIUnKZLdtZIZ93cx4yrc5BB9On2Ayac7favTfH2smzUaAgHrhCZrh6ys30EeATfa0dxv0mPxedi6c7+S3yK7xyfzZslenwxlv/AM=</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>nVZrc9o6EP0rjPsxA37y8gRmCIQb2qRNMSlpv3SEvAYlRjKSDE5/fSUDDiYkl3tnmGG0Xp09+9CRLgVaxo7fEwK4JIxWsmVMhZ9bO0bKqc+QIMKnaAnCl9gPene3vlOzfLTfYlRGg47x23UajoOtqGrZ0Kh6ba9enbXsetWduZHVxghBY6ZchUhhRIVEVHYMx1IOlvq1Jlbbt9u+Z9daTeuXUfkBXChs5VKzjB2pTHSMhZSJb5qbzaa2cWuMz03Hsmzz8e42wAtYIqN7uc0oD8S7O39cCwFDHOMaZkvz0iz5XIbCD8icIply2MUK34tlmVbbVD6hIPNPRrEXwhGNWL7sI8oowSgmf5Cuzx3IBQsrvXjOOJGL5btJ2JYGrkKGq9j26CfDLFM7E6jEkAtUFQtk77DGEAEHiqHyMB51jE/ndS3fOuGIiojxpSgv/xsfoGuIWQJhVezT2lE7H/BEpbqXgP0RxXEqyBq+6mFNEAax6ybg86Eq9xwikt0SoQY0E5qdeUjvaLmtxoDMQcj/06CD5mxBfqA4he5TO7h33H7zid/agKdf11Hcn4gsaK1/dnICh865oWjtdnk0lMUQbXcsv9z1WD1qfH94aE2e4eHzLwtW9Z9eizWd65vmFbsaDDPUd7MghFSi2+fvo4eXm4dHZC4kvWg27x2UTm+QfOyF05touOFT0bgJGlfuGO7G0z9f/jzD1efhS3QdDNjsInEfe98aLzDj0x9eFhKeuL1kcbEaPV/0o7tV5H6eXKdTJQHiZvHPpm65Eyvzfj3xi4Y9xp0inQP+Zdv+zAfp7Amw3C/1GIwGlaHqEpIfi5m2kLAa5a5+osVHSKDS6OpdWjv8VMkdCX3Vw+3arreG3vXAux5eeZbjDq6tums12217aPWsRr29F5ktiyOKfUYjomNpyd2OzccE8dIXQEPg1TVLldIJ4wPEAZKoMqJjdQgYFTBhSp5tmWYrm9Xd9WyVNqWFExdn7oq0jMpXJr/Rb7wXSeAlTbadkiaPAZOEgBZuPddCDbaQqhYrtE5lbNfWqEYhVdLOtcr6jteqm4Iskxg0U3PJwjSGWrJI8sqYYvvvVBEWuXVw2wvuf/eD3/mBMN9N7/jbvhLKJyTaQeiUrkB1E07cMe4+nzd5N07eRXv4XhoSfb5UWSUneMuk/Ol1WvSYFKPymtieebHh2FACN4/zKuKFa4KLsS8ub6XpSgW6++askF1b1dL1Os374XmuyRW8qStiWo4ZAE6VTr1M2DNQs0Axz7oUCuJHwQt7mWIqFzSQSMJSzU8lX57xCghA6FfASA1+du4ToxRSlU5CJk/Z+rF6wWjGHz5ysI+1nzLfq78N4+Frx05gHcRReapHgCR0rlf6Qnh5ZzwwU7BESRnjh+CnAE4FLxuLIhdcpBqoWSrh/S8VrVEdA2HMUipHAyM3HOpmzlO+JOC/Or2ByaW5eKuRf3+sVUk+AhjUC0+QHF9fub4+AnR+oL27oO/Ir/OR/JbZdd+Y31oO6nQ8492/</con:value></con:property><con:property><con:name>SAMLSAU1_1</con:name><con:value>nVZrb+o4EP0rKP14BXYCNCEqSBTabarSdgsUtl9WxhnANHFC7PDor792gBQo7XJXQkKejM+cefjYV4KEgeU2hYBEsogXVmHAhZtZ60aacDciggmXkxCEK6nbbXYeXKuEXbLbYhS8dt34FwipYMchRbjEVrFi2qNiDTuXRfBt26kSYtZ8W7kKkYLHhSRc1g0Lm9UiVj+nh2uu6bhmrVSxnDej8AqJUNjKpYSNLamVqBtTKWMXoeVyWVqWS1EyQRbGJhp2Hrp0CiExGlebjLJASWPrT0s+UAgCWqJRiK7Qgc+VL9wum3Ai0wS2sfzvYmGEa0j5+IJNLox8L/geH0fZskV4xBklAfsguj4dkNPILzSDSZQwOQ2/TcLEGrgIK1qkZoVfGOiQ2plABwwTQYpiSswt1guMIQFOodB/8erGxXldy7b2EsLFOEpCcbj8Mz7AFxBEMfhFsUtrS+18wBOValwBdT1Og1SwBTzqYY0JBbHtJtDzoQrPCYzZ6oEJNaArodmhfXpHy0012mwCQv6fBu01ZwPySoIUGoNaNBxzD/fa1qDrL/F6cc976+u0M6rUMwL7zpkhb+1meTSU+RBtdnzcDVh/DM24+zexh8NyyB5mrZHNhPML7odPXvet+hevjGb+R+2ODB7ntDXHtbkzl/34soOu/QfWDWs3wXD5uHx+79nXE7vZt5M7K4XbZqe/6jPhrR8wJ+juPRAfr4twYI7K62cbef/chavL2fj2V9+0ZwP2OJ4OnJa4GVaaHX/yxpvOG9zzLrpD99XXJmKz93qezh7/Q9vuzHfT0Qyo3C31GHjtwq3qEpE/i5m2ML84zlzdWIuPkMCl0dC7tHa4qZI75ruqh5u1WXVubaddLVstB7ewc4OrZVyt1cxb3Czb162dyGxYHFFsRXzMdCwtuZux+ZkgDV0B3IekuIhSpXTC+AGxTSQpePxFHYKIC+hFSp65ZHi6jJkz4nG5iuXHx8TH4UyJ62Mkn/hT0hxLSA4k2bQOJPkFKIsZaN3WYy3UXAupSjEni1QGZmlBShxSpeyJFlnXqjhVJFgYB6CJojDy0wBK8TTOCoPE5t8qEioyKxM0jhJJguw8oG+zO/62K4Ty8Zl2EDqla1DNhBNXDN7l8yXvy5NX0Q6+mfpMHy9VVZkwumFy+OlzWPSU5JPymdiOeb7hDwGoOAGBfuCHjkuTR/QXbC/+7i5Xt4LSkcauv3NilualdLFIs5ZWKmWUKHiki4qwhbpAU6V06170DhzlKOisayUnfhQ8tx9STOWUdyWREKoRLGTLM94RXRD6HeGpo7M695FyEFKVTsJKnrK1AvUG0ox/fCZRl2o/ZX5Wf8so8T87dgJrL47KUz0jJOMTvdJXyvqbAaGRgmVKDKNkH/wUwKngh8a8yDkXqQZqlEr4/ktBq1zdIJRGKZde28gM+8qb8ZTrGNxPpy8wmbjnrz3238+9IstGgIJ6IwqW4etL29VHgE/21Hsb9FjAKze3dstUemhZrUzA7Y2AV26anyftgF3ji/mrZa9OxzPe+A0=</con:value></con:property><con:property><con:name>SAMLSAU1_2</con:name><con:value>nVZrc9o6EP0rjPsxA5YfJNgTmOHZ+iZpU0wevV86sryAUlumlmRIfv2VTHAxIbncO8MMo/Vq9+zu0ZEuOU4T2+9zDrmgGWts0oRxv7R2DZkzP8Occp/hFLgviB/2b659u4V8vNtiNIJR1/h5YTt4HnXazRjO203XQZ1mh9hRE5PYIxGaX8QuUq6cSwgYF5iJrmEjq91E6teZIc+31M9p2cj+22jcQ85VbOXSUru2oDa8ayyFWPmmuV6vW2unleUL00bIMh9vrkOyhBQbvcttRWWivPfqT1oxEEgS0iJZal6aNZ/LmPshXTAsZA6vueL3ciETeabyiTldfDKqvRAHbJ6VyyFmGaMEJ/QF6/7cgFhmcaOfLLKcimX6bhEW0oGbsCFNYrnsk2HWoZ0YqIYw57jJl9h6jTWFOeTACDTupkHX+HTa1MqtsxwzPs/ylNeX/w0PsAKSbAVxk+/KeoV2esAjnepdAvEDRhLJaQFfNVlXmAB/nSaQ00M1bnOY08015YqgG67RmfvwDpbbbozoArj4PwPaG842yD1OJPScM4mz6/ld4A1G01svLJaPi9vzzY9i+b1bAth3Lg3VaLfLA1JWJNruGBfor/ApSIO7OHo0H9qd+5uXx/QpSm9e0MTdrCaDl/ShOJs8zeRnenVFvp8998eFOfHw7PqLdf58to5evEnYCdeCWRAV2bB/dTuFAX0I0E3/6Sp/+HHXJl9n8UP0pX83tuPCC++H3mi9SVz7Rzr/7DrXD+ivzvoxnHq/XJCT76Nvxe3dYzuig2UUi9AS0r0IvF9BtypnD3/dtjvzoYyegIjdUtMgGDUmakpYfCxm2kLj5rx09VdafLgAJoye3qW1w5dK7mjsqxlu11a7M7nojNqO0x+jIeqMUdtBbc+zJqjvXAyGO5HZojiAOMzYnOpcWnK3tPkYIEl9DiyGvFlkUikdNz6IOMICNwI2VYcgYxxmmZbnJyQRW1EJK7kkHK2LPMLnjmM0vmbiG/uW9+cC8pokW3ZNkqdA6IqC1m1Na654zYVqxW9cSJFYrQK3GEil7LkWWd92O22T03SVgAZqplksE2itlquyMSbf/ttKanhpnY5nP4fhz/I0mO/Wdvht1wblE1PtwHVBA1CjhCMXDNpV86bq86MX0S58X8ZUHy7VU5FTskVS//SHKpojFU92Ze1wV+6Hhlpo87CqKltcUFIxvrq3lZwrAejtBvMbW63fLVkUspyF6zpmrsKbuh8mss0QiFQS9TzLfgEzqyjmSfdBBfwgeWWvQ5RiyUKBBaSKO41yecIDIASuHwCB4vzm1NdFLaVqnYCNOGYbJurxohF/+L4hPtF+ynyr/tZZHv+Z2JFYe3lUner+F5Qt9ErfBc/vkINkKixVKpbl+8GPBTiWvG6smlxhEYpQkRTw/peGlqeugQnJJBPByCgN+5JZ4hTPK/D/OL0JU6py9Uyj//5Oa9KSAgTU447TMr6+bX19BNhiT3Zfkx4qrzseuePJQHHFGZXKe7FVXnTe9qqm1ND13pjfWvb6dMjx3j8=</con:value></con:property><con:property><con:name>SAMLSAU1_3</con:name><con:value>nVZrb+I4FP0rKPNxFfIiPKKCxLONSlu2MJ0ZvlTGMcE0sVPbgbS/fu0AKaG0y66EhHxzfe65Dx/7ioM4sr0u54gJTEkliyPCvdza1lJGPAo45h4BMeKegN60ezf27KrpgcMWreIP2tozWNTtpW2Zur1Y2noNujUdBK26bgLQgLAFwMJ0pCvnKfIJF4CItmablqub8tecmS3PanmuVa3VG3Ot8oQYl9jSpWpqe1IZb2srIRLPMLbbbXXrVCkLDds0LeP33XgKVygGWudql1EeiHX2/rAaIIiiCFYhjY0ro+RzFXBvikMCRMrQPlbwVSzTMFuG9Ak4Dn9oxV4U+GRJ82UfEEowBBF+B6o+d0isaFDpRiFlWKziL5OwTAWsowzq0KqRH5pRpnYhUIkh40DnK2DtsR7REjFEIKr8fPTb2o/LupZvnTFA+JKymJeX/40PIhsU0QQFOj+ktad2OeCZSnWuEPR8AqOU4w26V8OaAIj4vpsIXg5VmTC0xNkYczmgGVfsjGN6J8tdNQY4RFz8nwYdNWcH8gSiFHWy9E8yX9fveuEknIfmr5vRCGTm5H5+G7ZzAsfOuaFo7W55MpTFEO12sNbA6PnNMbJv6O249Zc/vK4789Wt9bi6DaPe3yl3epvGHE7j6/S9NWnO7hfvBpxs+My3nl6dl2YciYWfTV1J4ucwRGS1ZtfoDxXXEXznv1/WsUvnzrg5HxiD/iZh7Mash6z/gLu/YGNr8Xro1pPsps9w03Wp8EfX815r1O2vkNF9GFLnsb+uZyZJtre0XaRzxL9sO5z5abpYIygOSzUG/qAykl0C4nsxUxYc6Mvc1UuU+HCBiNA6apfSDi+VcocDT/Zwt7bc5qjRHLiO0x2afbM5NF3HdFsta2R2nUavfxCZHYsTin1KlljFUpK7G5vvCcLY44gEiOkbmkql49o3iAMgQMUnj/IQUMLRjEp5zuBb7QVEzHrljVXjdZ0EoP6ycBKtck/FA3lg3aVArCTJll2S5EcEcYKR0m011lzONReyFK9gk4rIqm5AlaBUKjtTIuvZtaZrcBwnEVJEjZgGaYSqySrJC2Pw3b+tA8hz62DcnU6e+9Pn/DwYX2Z3+u1QCOkTYOXAVUo9JJuJzlwxtUM+n/Kun72KDvDdNMDqeMmqCobhjkn508ewqCkpJuUjsQPzYsOpoQRunOZVxAs2GBZTX9zdUtKlCHQOzXkFVvW1mm42ad6PWs0xmIQ3VEUM0zamCKZSpt5m9AURo0AxLroTCuInwQt7mWIqVmQqgECxnJ9KvrzgETBFXD0CfDn32aUvjFJIWTqBMnHO1o/kA0Yx/vaNAz2o/KR5Iv+2lAUfHTuDdRRH5infAAKTUK3UffD2xXhAKmGxVDLKjsHPAZwLXjYWRS64CDlQi1Sgr79UlES1NQAhTYnwB1puOJbNnKd4S5D34fQJJlfm4qmG//2tpuN8BCCSDzyOc3x143rqCJDwSHr3QU/VtzYc1Iajnm3aziBX38ZOfc262yqKUmLX+WT+bDmq0+mMd/4B</con:value></con:property><con:property><con:name>SAMLSAU2_1</con:name><con:value>nVZrc6o6FP0rDv3YgQCCD6Y6Y32celttj9pW++VODFFiISAJav31J0GlYm2v584442Szs/baj6zkhsHAN50GYzjmJKSFTeBT5qTWmpLE1AkhI8yhMMDM4cgZNnoPjqnpDjxsUQrdVk35Vy+XLehOq6puTU3VMosVdWoZuqqXS8gyZxWomyXhyliCu5RxSHlNMXXDVnXxq4z0qmNUHNvS7KL5phRecMwEtnDRdGVPasNqisd55ACwXq+1dVEL4zkwdd0A497DEHk4gEr9ZpdRGiiu7/2R5mKEfR9pKAzADcj53LjMGZI5hTyJ8T6W+10sHehVIHxcRuZXSrYXu106C9NlE9KQEgR9soWyPj3MvdAtNPx5GBPuBd8mYegSWMUbpCLDolcKyFO7ECjHMGZQZR409lgDPMMxpggXngfdmnJ1WdfSraMYUjYL44Dll3/HB9MV9sMIuyo7pLWndjngmUrVbzByuhT5CSMr3JfDGkGE2b6bGF0OVXiK8YxsHggTA7phkh04pney3FWjReaY8f/ToKPm7EBeoJ/ger816jarj9tBwxvG263tmmYfrFbP1mtYSwkcO6eGrLW75clQZkO02/FgP83tVvvt1QuKq/Wr8fpItsvr939e7u4ms6QabXmpvJiwcc/dDvxxqVq6DcwhBEvOyqT5MqnO4H2rPzDY4Pd1a9xqvPfvmmgyg8HvSfHXIn4fV/rX/cVTb0HJ5q1V7Bvt8O32zsJBv/nLXYz6zecE3F2P3YHeiXubbSmxJr22AavPi/trc/hRue9Np24Zv9zNvV4tS+eIf952OPPDZLrAiB+Wcgy6rUJHdAnyn8VMWoirzlJXJ5LiwzimXKnLXVI7nETIHXEd0cPd2rArnXK707RuO7pdtZtt3S7q5WrV6OiNdrtiHURmx+KEYjOkMyJjScndjc3PBFHgMExdHKurMBFKx5QfEFuQw0KXDsQhCCnDo1DIs8HfvWWlTLfTsk+NaEOXU4t7a+5NlUI/5I/0MW7MOI5zomyYOVEeYEQigqVyy8FmYrIZF8VYwlXCfUNbQY3iRGh7LGXWMa2KDRgJIh9LqiAI3cTHWuRFaWkA2/2bKkQstRKGojDm0E9PBPg2v9Nvh1IIH5dIByZTusWinfjMJWMd8vmSd+nsZXSAbyQukQdM1JXHBO2Y5D99jouck2xWPhM7MM82/CUAYmcgwA/8wGlpsojuihzFP9zm4l4QSlI/9HcJDW2pJatVkrbUsoogFvBAFhXoJhhilAit+xiF75iCDAVcdLFkxE+CZ/Y8xYR7dMghx4EYwUK6vOAlMcRMviS64vBsLn2m5EKK0nG84edsTV+8giTjHx9KyEHST5ifxN86jN3Pjp3BOooj8hQPCU7oXK7kpfLxzYCgUMASIYdhfAx+DuBc8LwxK3LGhYuBmiYcf/+lIHWupkCEwoTybktJDcfam/LkHxF2Pp2+wKTynr33yH8/+FSSjgDC4pXISIovr21HHgE6P9LvfdBTCbfanXLTKNq6aeYk3Go3Pk9ajl39i/mr5ahOpzNe/wM=</con:value></con:property><con:property><con:name>SAMLSAU2_2</con:name><con:value>nVZrb+I6EP0rKPuxCnkRClFBYnncpu22XaDdar+sjDMB08QOsRPo/vq1A2QJpb3cKyEhT8Znzjx87CuO4sj2epxDKgijtU0cUe4V1o6WpdRjiBPuURQD9wT2Jr1vd55dNz2036LV/EFH+xXO3CC07KbeDFqgN/BlU0dW29RR03TaqDVDLQdLV84z8CkXiIqOZpuWq5vy15qabc9qe45dbzitn1rtGVIusaVL3dR2pDa8oy2ESDzDWK/X9bVTZ+ncsE3TMl6+3U3wAmKkda+2GRWB0u7OH9cDwBBFuI5ZbFwZFZ+rgHsTMqdIZCnsYgUfxTINs21In4CT+Ret3AuBT0NWLPuIMkowishvpOrzDcSCBbVeNGcpEYv4wyQsUwHrsME6thr0i2ZUqZ0JVGGYcqTzBbJ2WGMIIQWKofY09jval/O6VmydpojykKUxry7/Gx+gOUQsgUDn+7R21M4HPFGp7hVgz6c4yjjJ4V4Na4Iw8F03AZ8PVXtMISSbO8LlgG64Ymcc0jtabqsxIHPg4v806KA5W5BnFGXQfW4ks3SwAWe1fAnzZG7EX9Hz7Wp2/dboFAQOnQtD2drt8mgoyyHa7rgVq2hl3V7fPl8k7J/vYWv54/VH0w3Tm7vf/lPg9ug9v72Y9p8Gq9f4pTduUWY47PtLaNguG0/ozSN7mH6351myyvsvjUm7dXFzvxmNxtfTyHbp0LHm8ky+pBfW5jVdD300Wrpja05G6eAxHk7NmxWshs934+XSz/2RvWjbi2XeZORuwKdPi/bs8tp8+EkfJzk8dcp0DvhXbfszP8lmS8Biv1Rj4A9qI9klJD4XM2UhgR4Wrl6ixIcLoELrql1KO7xMyh0JPNnD7dpyW6PLVm/UavQcs2+aQ9N1TLfdtkZmz7Ztay8yWxZHFPuMhkTFUpK7HZvPCeLY40ADSPWcZVLpuPYJ4gAJVPPpWB4CRjlMmZTntdl01/PXwF26TSuYUbaYOWsaLVZa7Z6JB/qQ9kIBaUWTLbuiyWPAJCGghFvNNZeDzYWsxQrlmYiseo7qFDIp7alSWc9utFyDkziJQDE1YhZkEdSTRVJUxuDbf1tHmBfW8XD6qz/5VRwH48Pkjr/t6yB9AqIcuEroK8hewokbxt5n8y7r5smbaA/fywKiTpcsqkgJ3jKpfvo7K2pIykHZp7XnXbofGyrQxnFWZbQgJ7gc+fLilnouFaC7b8wKWfVVPcvzrOhFo+EYqYQ3VD0M0zYmgDOpUW9T9grUKFGMsy6EkvhR8NJepZiJBZ0IJCCWs1Mrlme8ACbA1QvAl0O/Ofd5UQkpSydgI07Z+pF8vSjGnz5wsIeVnzQ/yr81S4O/HTuBdRBH5ikfAILQuVqpy+Dtg+HATMISKWMsPQQ/BXAqeNVYFrnkIuRAzTIBH3+pKX3qaAhjllHhD7TCcKiZBU/xloD31+kdTCHL5TuN/PtDTSfFCGCQrztOCnx13XrqCND5ge7ugh5Lb2M4aAxHX23TdgaF9F5upVfKXLssSoVd9535veWgTscz3v0D</con:value></con:property><con:property><con:name>SAMLSAU2_3</con:name><con:value>nVZrc6o6FP0rDudjBwmICkx1hmr12NrH0dY+vnTSsNG0ECwJas+vvwkqFfu43jvjjJPNztprP7KSY47jyPJ8ziEVNGGVVRwx7uXWlpalzEswp9xjOAbuCeKN/YuhZ1WRh7dbtMqg29KewHRJA0JXt90A67Zju7pjgaWHAamFDdSsI6cmXTnPYMC4wEy0NAuZdR3Jn3ODXM9CHnKrDcd+1CoTSLnEli5VpG1IrXhLmwkx9wxjuVxWl7Vqkk4NCyHTuL8YjskMYqy1j9cZ5YHS9safVAMgEEWkSpLYODZKPscB98Z0yrDIUtjECr6LhQzkGtIn4HT6Syv2QjBgYZIvO5gljBIc0b9Y1ecCxCwJKn40TVIqZvG3SZhIAeuwIjoxbfZLM8rUDgQqMUw51vkMmxusEYSQAiNQuR0NWtqvw7qWb71JMeNhksa8vPxvfIAtIErmEOh8m9aG2uGAX1SqfQzEGzASZZwu4FIN6xwT4JtuAjkcqnKdQkhXQ8rlgK64Ymfs0ttbrqvRpVPg4v80aKc5a5AJjjJo05XfzOjz5dEb3Ar3khwNJ48Jv3LFHWrlBHadc0PR2vVybyiLIVrvwJbdubMmV6vLCXl/nYxewiywzkK/K/rod398N+30+tPJ9XmWDmZnjftXtIrp3Xlz+YeHC/f8WWQNc7B4eQib/ZP7s1t70sP+7dJNO9ZZ4+49QfdH9ZOHB8ThnM5RH0Zw5Z9aYlSf2+L2Nao9d32fpn2nUfvbZfco/T18uW/eiH5MrtznGX0cN5p/hmdnj8Hdw2+nVaSzw79s2575cfb8AkRsl2oMBt1KT3YJi5/FTFlooIe5qzdX4sMFMKG11S6lHV4m5Y4Gnuzhem3WnV7T8XuO7ddQB6FTVK+huuuaPeRblmVuRWbNYo9iJ2EhVbGU5K7H5meCJPY4sABSfZFkUum49gNiFwtcGbCRPAQJ43CTSHk2HRK5ZE7f07eoblpTLFzuOHb4AlrlMhFX7Cr1QwFpSZRNqyTKIyB0TkEptxpsLiebC1mMN7zIRGRWF7jKIJPaniqZ9SzbqRucxvMIFFUjToIsgup8Ns9LY/D1v6VjwnNrd+iPr58646f8RBjf5rf/bVsK6RNQ5cBVSicg2wn7l4zpevVtPp/ybnx5GW3h/Syg6oDJuoqUkjWT8qePcVFzUszKR2Jb5sWGfUMJ3NjPq4gXLCgp5r64vaWoSxlob5vzhs3qWzVbLLK8H7ZdM1IJb6iKGMgyxkAyKVTvN8krMKNAMQ66FQrie8ELe5liJmZsLLCAWM5PJV8e8AwYA1fPgIGc/NWhb4xSSFk6ASvxla0TySeMYvzjK4d4RPlJ87X8WyZp8NGxL7B24sg85StAUDZVK3UjvH8zHiSRsFRqWZLugn8F8FXwsrEocsFFyIF6zgR8/6WiRKqlYUKSjIlBV8sNu8KZ8xTvc/A+nD7B5NpcPNbov7/WdJqPAJEaJP1zfHXneuoIsOmO+G6C7uuvfdq1T3snFrJq3Vx/m2v9RY26WxSlxK79yfzZslOn/Rlv/wM=</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>StreamCreateCount</con:name><con:value>9</con:value></con:property><con:property><con:name>streamlimit</con:name><con:value>12</con:value></con:property><con:property><con:name>streamMaxCreateExpireTimeDiffhours</con:name><con:value>24</con:value></con:property><con:property><con:name>streamRenewTimeHours</con:name><con:value>6</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>tester</con:name><con:value>pjg</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>TOU</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnGenericRightsToken</con:name><con:value>urn:dece:stream:generic</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnParentalControlAllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>urnParentalControlBlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>urnParentalControlRating</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>urnPolicy</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>urnPolicyID</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urnRightsLocker</con:name><con:value>urn:dece:rightslockerid:org:dece:</con:value></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>userBasic1Org1Name</con:name><con:value>pjgOrg1Basic1</con:value></con:property><con:property><con:name>userBasic1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>USERID</con:name><con:value>158F78AF84A30C00E05305991F0A2221</con:value></con:property><con:property><con:name>USERIDBAU1_1</con:name><con:value>FC6C23DD33B839A0E0401F0A05994C50</con:value></con:property><con:property><con:name>USERIDBAU2_1</con:name><con:value>FC6C23E0376958F7E0401F0A07992078</con:value></con:property><con:property><con:name>USERIDFAU1_1</con:name><con:value>158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>USERIDFAU2_1</con:name><con:value>158F78AF815C0C00E05305991F0A2221</con:value></con:property><con:property><con:name>USERIDFULL</con:name><con:value>158F51D8791F4737E05305991F0AF9FB</con:value></con:property><con:property><con:name>USERIDSAU1_1</con:name><con:value>158F78D532C80C08E05305991F0A37BC</con:value></con:property><con:property><con:name>USERIDSAU2_1</con:name><con:value>158F7EFC4BF0595CE05307991F0AEE84</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20150508_025022</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>stream_view_20150508_025019</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>stream_view_20150508_025022</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>stream_view_20150508_025016</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>stream_view_20150508_025020</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>stream_view_20150508_025017</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>stream_view_20150508_025021</con:value></con:property><con:property><con:name>userPropertyNameArray</con:name><con:value>UserName_FAU1,UserName_SAU1,UserName_FAU2,UserName_SAU2,UserName_BAU1,UserName_BAU2</con:value></con:property><con:property><con:name>userStandard1Org1Name</con:name><con:value>pjgOrg1Standard1</con:value></con:property><con:property><con:name>userStandard1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard2Org1Name</con:name><con:value>pjgorg1standard2</con:value></con:property><con:property><con:name>userStandard2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>V1</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>