<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="UserGet_API_Portal" resourceRoot="${projectDir}" soapui-version="4.5.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="E:\DECE API\STS\Builds\R3\106.2.3\Reports106\STSAPI_Payload_NodeOId_TCs_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Multiple Pages</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#V1}/${#Project#V2}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#V1}/${#Project#V2}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUVSsnVQNFwlGNCBeX77CYQSUizIg6K8/A26NZif77PM9pMw00z2ruxfNmp/YCny2BzBGceJFYVWVnmv/23Sam9a6YzWasAUbLR7BRpffWOS/Lt1imSYNrU2tqmKcIjXEiRUmzzWWZpoNutlgeJNu91psj2s9sXR3VavOUIxJaLLlia5V88APca889rmWxmEvsrCHe6EVINxLYG8CtGGP7OxZV0y1l58XlOWB8YubJPseRcEnG0Hk+/AJRgH1k3rY89PGvYnnhFaSxujXmTZ+rv3yzbLsKWs+RbFDsTRNUzRPkT029pwftZfK1RnZariJLmvRCqPQg5bvna0ClIYSN7KrwHei2Evc4JvQDMXQRegGymEDMq3wR436OKBE95eRHkDG2Gpg12KuwQy0QTEKIapODfW59uPvOnjxNWMrxJsoDvCn9X+DhMIj8qM9shv4mtkV3d9H/KJcLz8R7Kkh9FPsHdGooMnegghX32O08fKhhwn5bFwt21/N8ZVhCP6Xlvyk7nES2NQXlZE8B+Hk/+nXfa8uUWaWn6KXXI2d8M2SxtrQmeTjlQnoLZx0ZnLmPJcQ7jdfQN1a/Wv9mag3Xv1y0jZd+lCfxpvhCEFXOq60bmBxC44fs4o/PATjZTte8trIkUzROvLteYtdjsRkNqGwzw0RPzeNFd1nopVOwQpKjrtOyAz4oLudniXVW2AtXEfZajaM11x/O2VSHDj1MUoWM+s4YrtuwmC3Xp/X1abHRqyhHzkNrKEB17OKQYtma7v1vZYKzJXbByl4/sjpPocirzd0KpMs/l9wNC9ZiXVbiMWk2JDXM0EvmqpK6VkUwWnigEwVgEP+tmAkOLuDu/MUPqMFoOt9IImCv5WHGtgpgJnKgquJs5mWi2cwEJzRjDiaFeCvBM2QMylbSjNdf5Uz17SV2Wmt+OnqLI80gEtn0dVkQ55JhilrGogutlyT1kq+1SZapupLqUICSHK+P9sKnyAl9yCrctqEY5cTLl0tZsTePw2D0XFtyr4maoo4OSgTdd2UdHkAjOUcsv2U+J6HwT6qLKfCndNgj7YA9TOanAnOmrnLNHPKjiTDKm3mo01TlYGm40zUy6yUipwNZtPzRy1EQRPtQM5lE7xfagFNsT+iV4sBtuZcqBkgk5zS+U3O7PEViKbTWUW81GooZ4ZsTEd9zVAzGZQ2Sc58vGZH7lpxj7Cp5wMTbO8bI+ryvB+S56FxhCfuULGUPlgHMwY2DRd6nGctosxZdTNJXw7eopVKwoyALguCDgggGhSpkfoLYCjMuPHe41kPDTf9KEBuXNGY6G13POd012uOnffRnJM2u8674r03LdulVB+y2+YOqCqy3xhXt2xjSRlS6J3b47fpAnnx8pyMOJ1pe12uYszT6UKK/I79ulhO3+r5Eurm+H0ynb+f83x02HbPfvI6Fl7jyUCTnPEIoXcM6xRt9QWzK3Hi8nVL+LQxaMRVgKMJAChbx5E9QmDhdXsh4auhyYS8QBMzRZyLygQoSl1WBUnXN32XeYfKLJ0yI02VbZ+U6bRcGH5lJQoS6RRtzVf7JdunyVixy2B6S+47+pSrDxZopY98c5aAbD/bhAxDK3v9daNlDtQKBthqNhHIWyRUUhVMrfF+QOdvszbNHHTbH0x4MG3mE3aXj11nddo5qx1pyvLu1VmawJ+ZdxxTCcXmFd2UDQ10L+9brqnTpuHDIN+vA5hLJulZ6RyZgmz0dXqaSxJ4u9iwCdgcL8/yVhPl0r8Ccs0itDiuFy5ehiNvbMopIW16R5ftmqX/lWMFxSqPHDuIQAefOSZfOCaDzaGudiUGc21xj+eZIyjyQe/MhgN+T+uL4a4i1PuUk3h+axx2M/OtPmdOWcfd6vM5r0quWA83S7e5TgTaOkMdDXYdxTN2Uthu+SdtqOnc1KP8E71FhwwPKyOVCeVmcu5TfJzWhWDlBedzs8VOg/dJelSn1htmTu76MOez7ftrm6Ji5cSdO6uj3l9EcHn5jnwekjfjZYxS9wP2YQJftdckXW8RTK7L4jusStU++ThayZ91XGHx7Mam3NrbF2IQJyhMai+FV6HheilRep7dI1/Oy1rqttg2x8gCw3dlwLZkukUzfRrQHZ5vcm3uKvYuKD5BFKNw4xVnFXL28rH+M0AY9DAKbRQ3jlEKXYRrf4hY1KuqhgZRIVGIkRkRudzuCu12h5VZmZY7Qr9NS0QLyy0R8C2O4UW+Vh1FyTgcx2CToPhRKvMPUtlA0Nt7qNDThajARFXghJTkYB3TxGeejtZTiFKiuONC9PbYVpejsBfsfVQApoLITn30tHf3ZYEofPllGxbEpbXTpulS7Xyb3+dn11KQPbZXbMBFMgIi7URfiP7WNZNvM2bY+4yv4UFqe4WoIXVNYg9ekDw++qBLwZMbV4qUrphvWz8bHsJSnzO6nWQfPXhj/O1ORCQ1EV0v14YcrKfDU3o8pmULOoWgjEl4iqHoNjVBMCWq8GRGOxRStxDUXwnyG+pPJ9/sj/jSxA0nCXmbA0KYarn8i9vYBOHiNqYSwud/e9V7OJLULUF58pVN9MmlrUD8x3sd7MFiHzG/k58siu2Pdn0R6+4ckmcxvrzQKVaF/D59wwoYkbAeGWFRfB/8qwBfHf5ovBX5hiUhbFqnCfr+SbWYTc81C8IoDRNVqpWG+3lZ4kxOe9T72PRbmFIA/7rR5PjbG81CG07I5Aqs2m2v9++bG15JF4iIF/ZKLM+1nFzOyeGhczeffwH8ekR3/ziiHzN5+c38u+Wupp/fh5d/AA=="/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXrxBGQBGQAUF//RkwGs1O9tnne0iZaaZ7VncvmjWvyDh4dBcgBKPYDfyyzL9V/mcxDNmuG62a0aq3aw0S1msdkyFrcEM2yLphkpZBVcoyQgmUfRQbfvxWoUmqXiPrNaqjk81uo9UlqZdOg1lXynMYIRwab3khK+Xs4PmoWxz7VkkivxsYyEVd3zhA1I3N7hQowy7e2TVumCrvr1eUxYHRuxPHYZcgzBcLmtDzzBczOBCvxNOeVwt1p67tG3ESwY8zLfRW+fBN0/Qlrb8EkU3QJEkSZIfAeyzk2r8q76WbM7Rkfxtc15zhB75rGp57MXJQCoydwCoDzw4iN3YOP4SmCIrMQ9dgZtZMquH/qhCfBxTo/jLSE8gIGTXk4CZ8BNPgFkbQN2F5pslvlV9/18Grrx4ZPtoG0QF9Wf83SNA/QS8IoVVDt8xu6P4+4jflen+FZlf2TS9B7gmOcpqEhglReRLBrZsNXYTJZ6Fy0f5yhm4Mg+Z/ackr8YgTwya+qQzv2hDF/0+/Hnt1jTI3vAS+E+LO8wZue+P0U6XPu5zTm874yXaBuVpAeNx8BXVv9cf6K1HvvPpw0mxHlY2YllqTem9z1vn2xmukVRZcQMsm6bS9jjsWN5A3l3GgR0q23ynygW5yQ1hN5mGk9IdNi/ZW8upgqSXTQWF/GEI/JAVlOgonhNpL25BYDw9xXal6kqbOm5Pjxc/801gC88H5aFFeqrfQuLpTdmF6Jlc7bxbF9Hxbaqh9jWH98dbaj+utrXsh0NtnTo855HkN4LlIMv9/yZAd3oiN+4LLJ8UWv54xfFdkmU8uHAfOUxukMgts/LcDI9beH529K3VSkgWqKgKeY72dMFTAXgLUTGAdhZvPlYy7gD5rj+bYUS8Bb80qmpDy6Yqfq2pPSB3dkubnjeQl64swUgAqnDlHETRhzmu6oCgguNoyhd9I2U6ZKqmsrvgSDsALWXixpE4Mpcw1aZlRpgy9mjLJejnHdvE8PIxOG13wFE6RuOlRmsqbOq8KfaCtFiYtJtj3MjyEQWk1Yx+c+iHcASimJD4TXBR9nyr6jB7xmlHY9GebIkt9RUUppxZZSSUh7c9nl89acKzCWQchE3QwudbC1DlxRK6XfWQsGF/RQMrbhfNASK3xDYiikmmJu9ZqKKSaoM1GoqLJqQAKGy+kHtrQI2cjOSezrmZ9HeweG8OpwkL08XNfO5ln5lgyJBFsDnPKrGuO6TKusQxSe91OeXXVHwRrGYcZAVVgWRVgQCTIU8P1Z8GQnTPj0O3QLhxuxeAAnaikUMFgf7pkZNutj+3JaMHw231rIrmTumE5hOyZ9K6+B7IMrQHlqIalrQiN991LczyYLaEbrS7xiFGppttmStoimS35wGtZveVqNqhmK1PVx5PpbDG5ZNnouGtfvLg3ZnvRtK/w9ngE4QSZVYI0RFZv8wy36u0wn7YaCZkSsBUWAGln24KLCcz2dlcS9jRFwOQFCpdK3IKTpkCSqoLM8qq6FR1qYkrzZEaNFFmwPFym82qpeaU1x/K4U6SxWIcrWiTXOrCKYGpDEG11xlT7S7hWR54+j0Eazrc+RZFSqPa2SmqbSs4AS06nLH6L2FIig5kxDvtkNpg3SeqoWl5/2gGzejal99nYsdfnvb3e46asHl6dlQ68uf7AMRlTbFFSdUFTQPv6vmWKPKtrnnnIws3BzHgd96xwDnRW0ESVnGU8DwZXG9IBnaHVRdgpnFD4l0CmGJgWp83SQSt/5I51IcGkTR7ostvQ5L9yLKdY6ZljRw6o4CvHhCvHBLA9VuU2TyGmyYVokdqsJBzV1nzY74SkuhzuS2xVJOzY9Rpjv53qg+qCOqctZ6cuFh2Zd7iqv1059U3MksbFVGF/35Jcbc/7zYZ3VoaKysxcwjuTO3hM0bA0kilfqMcXkehESZU9rN3D5VJv0LPDZJqc5JkxQNTZ2RwXnXQ36TUJIpLOzKW1PqniMjBX1+/I1yF5N17HKPE4YJ8m8E17TZPNDprxbZl/h2W+LOKPoxH/WcflFteqbYut3TAXgyiGflx5z71yDddNsNJzrS7+cl7XfLtBt9oUAKABKKEpCli0UCIJyFanwzQ74Cb2rii+QOQCf+vmZ+Vy9vqx/jNA89BF0LdgVDsFielAVPlDxLxeZdnXsAoJfAT1AMtljmRYQHIt/E43WiLbFltNsQMYkRE4ssPUhUp5FMRjfxyBbQyjZ6nceZLKGjTd0IW5ns5FBcKqAsW4JEfjlMQe9XIyXnyYYMUd5aK3SzfaDIHcQ+jBHDBxCKzEgy+hExYFItD1l64ZJiqsrSZJFmrnx/y+PruVAu+x3HwDypNhIW4n/E30N7vMLZMfM6box4xv4UFiubmowXWNI9e8Inl+9EmXnCd3ruQp3TDft341PIUlvmZ0P8k6uead8fc7EZbUWHS93xpyNF6OL8nplBQtaOWCMsLhCYogm8QUmglWhWc92EOfuIcg/kqQ31F/Ofluf8aXxI4/jfHbfMCEKRfLv7iNTSHKb2MyJnz2t1e9pyNx3WKYxd/ZOA9f2nLEf7zXmV0z34fNE/yTBpH12a5vYj2cg/PMx5fr2/kql9/nH1hhBjisi0dYED0G/y7Ad4c/G+9FvmOJMZs2SQx/flLOZ9NbxTDNIPFjma8Uhsd5WeCMzyHsfm76LUwhgD9uNBn68UazVIZTPLkORuW+1/33zTW3oIsJsRdyCyxvlQxfzvHhvv0wnz8Afj+i6+yfRvRzJu+/mX+3PNT06/vw/g8="/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2013/10/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="3c0ff9bd-188e-4595-ac97-ec945cbf1b34" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="a72ea2ab-ce4e-47cc-b28d-787420d41eae"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="bae01694-be77-463a-bcef-02134d4e45fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ResourceStatus</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d9791dad-3957-43a7-9916-acc98d6cfcfe"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="d2b48757-d9d7-48b6-99e2-5ffaec2a0276" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/ResourceStatus/Current/Update" id="087a86a9-8ddc-4222-aa5e-8ea5f58f3b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT" id="a3720389-3d1d-49ca-8d11-1e6c7977a6b6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c5de7daa-09fc-46a7-9439-7290f79b45c1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="2b399c77-329a-43cb-9c65-b90e43e27bf5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" id="c9f3de54-1283-4f02-b8ea-7030652e5a47"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="dd8dec87-e935-415f-91f4-ef072cb2b292"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8eccae92-53c1-462c-ad88-7bb2ab6bc7a9"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" id="f7ffc3a2-890e-4d43-8f2a-582eb82ffd58"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="5edddbc8-bc7c-4b0d-9fa5-394b1f0932ed"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="198a8863-08df-42da-87ef-91fde7f4ac06"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Head" method="HEAD"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Options" method="OPTIONS"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy_Create" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="Policy_Create_User" path="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>NodeUserId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeUserId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Policy_Create_User" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:PolicyList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="Policy_Create_Account" path="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Policy_Create_Account" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="6deffdf6-8888-4ac0-bba9-62ac3f5a0a8b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate API" searchProperties="true" id="11a715f3-fabc-4fee-900a-f24ebd6d9c5a"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set Environment Properties" id="dbd205af-6a2e-447d-a1c5-eb49c82ff6e4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def env = context.expand( '${#Project#ENV}' )
log.info 'Env == '+env

if (env == 'QALP1')
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7001");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
tP.setPropertyValue("Batch_HostName","https://qa.b.uvvu.com:7001");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7001");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7001");
tP.setPropertyValue("targetPortq","7001");
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7001");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tP.setPropertyValue("TOUUrl","qa.c.uvvu.com");
}
else
{
	tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}

}
else if (env == "QALP2")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7002");
tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","LP2_RET");
tP.setPropertyValue("nodeIdRTLCS","LP2_RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7002");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7002");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7002");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7002");
tP.setPropertyValue("targetPortq","7002");
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7002");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7002");
tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}
else if (env == "QALP3")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7003");
tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","loadtest_retailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7003");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7003");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7003");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7003");
tP.setPropertyValue("targetPortq","7003");
tP.setPropertyValue("targetSystem","LP3");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7003");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7003");
tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}
else if (env == "DEV")
{
tP.setPropertyValue("Device_HostName","https://lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("nodeIdDECECS","truststore-dece-cs");
tP.setPropertyValue("nodeIdRTL","sriniretailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("Query_HostName","https://lp2.dev.q.uvvu.com:8443");
tP.setPropertyValue("targerHostd","lp2.dev.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("targetHost","lp2.dev.p.uvvu.com");
tP.setPropertyValue("targetHostq","lp2.dev.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","8443");
tP.setPropertyValue("targetPortq","8443");
tP.setPropertyValue("targetSystem","DEV");
tP.setPropertyValue("targetURL","lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("targetUrlSHost","lp2.dev.s.uvvu.com:8443");
tP.setPropertyValue("TOUUrl","lp3.dev.uvvu.com");
}





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="9ce61892-9d8a-4055-b161-e19938292410"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4dc8aec7-2e8e-4eef-9a55-46dedaad9403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName" id="b8ba87db-df08-4f36-8c88-c580bb3ec25b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1671024d-d72f-4387-92d2-ba0ce6079396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="63a3307b-6106-4786-9cd4-e176efd0bf16"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="23303af8-41d1-41dc-8fef-fb959f9c4a2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="bd82d430-2a93-49e7-b2a1-7b84f0809636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      //def a = context.expand( '${#TestCase#httpLocation}');
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case" id="35d38137-3ff3-47da-9602-9bed11652bbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">iscportal1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20140223_120461393175046103</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20130923</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dbd205af-6a2e-447d-a1c5-eb49c82ff6e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="51ed92e6-c568-4115-881a-88771404b0de" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2842594e-4ff8-47cb-afd9-7d9447bd34b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1c828cc6-c718-4458-8285-8f3412120ef1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="aec46fe2-046b-4208-9b99-b3f8610a7a8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="e434e6ab-627f-454e-a457-6101a23db2bf"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bef51ec6-85bf-456b-9ec3-670fd87002cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="518795a7-9465-4ca9-aaa5-d30618461158"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1juR8twUxQrSdUgoKh4A68vp2AYEOUmA4L++jOY6EqyknXWPi/iND3dX1/o+eYZm4HPdgHGKEm9KKyq0kvtP4KFOLbV5hqCzTuNpsWihmXxfKPVsRjIMBxtW0ytqmKcITXEqRmmLzWWZrgGzTdY3qD5LkN3Oe6JbQm7WnWFEkxME5UnulYtAj/E3Zvbl1qWhN3IxB7uhmaAcDeFXR1o4y7R7Jp3TLXX5zeUN4fJ6z5N4y5FwScbQeT78AlGAfVMfdJ5tnFX99zQTLMEvfu08UvtfW+e50859xQlLsXSNE3RAkV0bOy5/9ReK/fNyFZDJ3pb98wwCj1o+t7VLEFpKN1HdhX4bpR46T74wTRDMXRpuoEK2IBMM/ynRv1ycEP3l5Y+gUyw2cB7k7kbWyAHJSiEqLpcqC+1f/6ugm97jcQMsRMlAf6y/neQUHhGfhQju4Hvkd3R/b3Fb9L1+oxgVw2hn2HvjCZlm8QmRLg6S5DjFWMPk+azcfVW/mqB7x2G4L8pyTP1ESeBTX2TGclzEU7/n3p9rNWblZXpZ+h1tEGzc09SVoMITuGRNi5nvdhFvenh+HKD8FH5DdSj1O/rr4366Kv3TTBQ+tv6QKRaOdd3lmzfadWHQ784jK9+PwgKxvLb2mIWnXnR2iS2MMuRqjgzwwg3Np+dFOfoZs2Ddxz5/KASnizqNDD6So+eJkW+TXNJaXHHUNmitAiGkj4YnCYnOhDxfGLNZzo1MqOJdCkGzUiQfaUFZgatHZPdHoyjiiPPj+tkwTS13WmZCnqyd19+xfQxhjKuEbrcgiz/b1q0IJmp+Vj0yknhkM8zRa+aqvbqUq8HUM8FuSoCVxXHVzAR3eNpf/T6Qk6LYL5UgAQu2gLkkruVVvP5SM7t1crfrVRFEbVFMx+ArVQhLyS5WEm7zZA217t4yyr0ThdFe7OILG4Y24NjPtjDiWZo+cRQL9pBLiaGTK9vMrcg66t20JipseQq64MoaAs5l/KbR0nO95PdehFvl0IOr/JcA80+YJZyb68NjGDFQG6xhwd5rIHjTS7utd5qpRWyAWYV0Z2sSGxGT9nFMLBjK/D3H4wPiHHD7q8uVt/Pdlf5oPXkfk8/9XXV4qS5PASL7dJar47mWjlX4GACrLtHr+WZmyh3d51cmm+Ho2in7s9wAuayKM4BSRcNNLU/BFFfBFoTeMW1dxD5qGcrOTVkcaUu+H1+c/FOG2z2ad9kOh1mO17zsxMvyWF9N8qsw17bb5RpfaTb56WQCtctPtfPvOkxsIid+UYepKPCGcz1ijWTig0c1G13SPlXQUm09hAk18ve19xFuuan+GJ5jrMWN9Om33Z8jVvEju/EF1w3ovkxoXmRTEJqezmP0gpwNRGA/mF5EOea2CmTaqv5fKuJJlDkNAPXA5uO2NVpODj7cMuBqBitybf4XhhbymWRyucyaSu50pGAXRZhoC9l5QCWousmoisr4hxKYL5VR/mW5Gs5IMpf86jc8ujKIpC5HeCFQYVb0kI6TfVmE1xCcRkqwl47FWubD+j2CcljfRI3cw1PnHC3jo5a4CXLJNOXo9FkXFhG1j8eyKxyaH105nYV+XyMgTcZGfujFEnmLN5u07gewgSmahxoanGd7vCh41kBPay3GHFGS7DNLgMrX/ZNeTdKXJ0ZDRbhjGsLFZw5l0FQP3Tydd3Q+bht90JHulyoXbKiIxApwqJ1sguWPe6X+ZjPnSE4WiY7KXxBvAjyaGfAfDEfrfWg3qq0zuNxQF8NqjmJp7nez5vyfF7nbNEYGDhOvG3WcYtkGtrs1kz5845e8V7sHwU2OxrNmFu5ASnW7GzHbW1WmTc3cBe47RgOqQV1BnLbGav9i3U1r3EwhW8D9Ot0eAjf5gf1cbJ8Gj130qGTbkUwvS/LA0iVqgo5Fcz0zwSmlHh2w7mpduOSBeEUhWnttdxVkpduRiiOZ3fJkfG2lmlaaHd6rKAApsPIkkw3aUahAd0SBLbN8XeW84biC8ReFDpe6avkcW+n1J8BwqCLUWijpHGOMrhHuPYHi2W+qmq4IMdvFGJkRIQnttgWEAEDOL7VYsgPL3O8rLAcxypKS2L4WnUSpdNwmgAnRclnjih84ogLBL3YQyWRLE9TTI5TnJKUnMxzlvrM09l8ClFGqGZSsr0u2+y0KOwFsY9KwFQQ2ZmPnuJ9fEsQhd+ebMOE+CYtswvx7aD/McKv7+7JIDq2VyrgMhwRkYKib/gue4/lx5gZ9mPMd/Mgs73yPCeZTRMPviH5/OpXw5Sd8uiW2w/Ed9gP7a+CT5apr0E9nNlnDz7a/nEjIISSUI7Xe1VO5tPpKTufs1sd2iWdSoh5iqFontIRzAgnuhjREYXUwwT1V3T0gfqL54f8M74s3Yd6Sj7pgHRN9bb8i7uIjnB5F1FJ1xd/e9H55JLkLUVF+p2s55MrS4n4j7ca2IWlHhHPyCOPEvtXub6x9cEPibOcYV7olquSfF5+aAwYEbMemWNR8tH4dwa+c/5Z+EjyA0tKusnKUvTzm2o5oF5qJoRRFqaqVLsJPg7NG870EqPuL6XfzNzo3zufL/CPfH6jjXUyvgKz9tD1/rdyw7u1C0RkF/ZuWF5qBbmaEueh+2FIvwP8bU4LLC01m5LcJMf4pznNyo8Efork9Tfx75IPOf36Pbz+Fw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="32279977-861a-426e-81a7-71cea06f5005"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		////assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8YMCmklTJExgwk834csrI8gCe8IANX39kCOwkO9k35z6B2q3u1YNaS8+J4Xt0FyQJilM3DKqK+FL7Z9eyOgzsmI32rtlqMDTHNrgWQzaQ1WQY2GQsps3WqkqSZEgJktQI0pcaTVLNBsk2qLZOsl261aXZJ6rNbWvVJYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuBtRRF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0tVcOzDSLEZvPs3kpfa2N8/zp7z5FMY2QZMkSZAcgXXMxLV/1V4r983IVAIrvK0FIwgDFxqeezFKUCpKndCsAs8OYzd1/G9MUwRFlqYbqIANSDHBrxrx28EV3Q8tfQAZJ0YjcQzqbmyOLBSjAKLqYq681H79rIK3vXpsBIkVxn7yaf3fIKHghLwwQmYjuUd2R/dzi1+k6/UZwa4SQC9L3BMal20SGRAl1WmMLLcYuQluPjOpXstfLZJ7hyH4X0ryTLzHiWETX2RGdG2UpP9Pvd7X6mZlaXgZemWjzhCq4+mOnCC2SfaPUtPTIsPqWYeXK4T3yjdQj1K/rT836qOv3jZ5gxMrpAdLFk6UU8wtskhXG2FLG5dLDlnHWmiiTnnDneaZIeTSlRppNtnq+EMJjSaivrWV0bA1PNvkHLEVZ7/RWSdb0bvj7qixeS84K/OWIcHxcdKr99cpNQWjQpYtj++srI0rprM1IthIydtyX1+CsZA241lzQs21rLKf7UfGqDUYsfVeKLLT+pZ5+R3T+xjKuIbofA2y/L9ukZxopMZjIZSTwsLHM0WvqqIIdVEQABJskCs8sBV+dAFj3j4cnYPb43KSB7OFDERwVucgF+2NuJzNhlJuLpfedqnIMq/OmbwPNmIFfxClYilu1wPSWG2jDS2TW43nzfU83DUHkdk/5H0HjlVdzce6clb3UjHWJXJ1ldkFXl/UvUpN9EWzstrznDqXcjG/ehSl3BlvV/Nos+ByeJFmKmB6gFpIgqP2dX9JwebcgXtppILDVc47qrBcqoWkg2mFt8dLHJsuyNsI+ma08z3nnfE+Nq6bveV51/Oy7UXaq4LUE7RjT1N2TXEmDcB8s9itlgdjJZ8qsD8Gu7tHt+Ua6zC3t2wuzjaDYbhVnBMcg5nE8zOA00UCVekNQNjjgcoAt7gIe74dCqacEwM6qdQ5r9den93jOjF6pGdQLEttRqv29NgWpaC+HWa7vaM6a3lSH2rmacGl3GWTnOqntuFSsIis2Vrqp8PC6s+0ym4qFmvYr5v2gPAunByrnQGIL2fHU+15umpPkvPOtawVv54wXsfy1OY8sjwrOid1PZwdYrLNoyZNbM6nYVoBtsoD0Nsv9vxM5dkyqaaSzzYqbwBZSjNw2dPpkF4eB/2TBzdNEBbD1WR/eCuMKeYST+QzCbeVVGFFYJZF6GsLSd6DBW/bMW9LMj+DIphtlGG+wfla9LHy5zzK1zzaEg+k5ha0uX6luSC5dJJqDAPOAb8IZM5Rj8XKbPtk54ikkTaOmFxNxlawXYUH1XfjRZxpi+FwPCp2etY77PGsskhteGpuK9LpEAF3PNSdgxiKxjTabNKoHsAYpkrkq0pxmWyTPevufHJQb1H8lBRhh174u3zRM6TtMLY1atifB9Nmh6skmXXu+/U9m6/qutaOOqYQWOL5TGzjJRmCUObmraNZ0PTBWeSjdm4NwGFn0OPC4/gzJw23Oszns+FK8+utSus0GvnkRSeYcTTJtV7OSLNZvWnyel9PotjdZKxdxJPApDdG2j5tyWXbjbwDR2cHnYmaS9vHxZqezKijTiszZg23vt2J4ICYEycgdayR0jvvLsYl8ifwNkA/T4eH8DY/iPeT5cPouZMODXcrgul9WV5AiliV8a1gpH8nMKXENRvWVbUblSwoSVGQ1l7LXSV56WaY4rhmF18Zt7XEkGILXx4cRzcFgeUkkiEpmQRkh+NICkh3lnND8QmiEAaWW/oqedztlvo7QOh3ExSYKG6cwgw6KKn9xWKZr6oSzPH1GwYJ0kPME2mKavMSJQGWJYWWKLUkQMuUyJMi3+YFjq5Vx2E6CSYxsFIUf+CIFPWBI84RdCMXlUSyvE0TfJ0mKU7J0ThlqUc9nYynAGWYasYl2+vSDNsiEtePPFQCJvzQzDz0FDnRNUFEcvulGwZMrlKBFCSZlUhWwDdDR2w/EtviOIom+SsF+Db2z9/uacI6plsqJGWgPMKlRl8wYeoe5ffZYN5n424eZKZb3vQ452nswhuSj59+t1LZQ48+mkv6P4L2D3XH/VD/LPhgmvgc1cObeXLh40Q8HguYa2I28nov2NF4Oj5lp1N2LVGnZFoxNk9QBNkhNAQzTJfOenhAAfEwQfyIqT5Qf/L8kH/El6VOoKX4tPu4oarX5Q+eKRpKymeKgg9E8dM30AeXOG8pKtKvZIKHXzMl4r8+eGAXlnpYPMU/eRibv8v1ha13fnCc5XhzA7tclbz0/E1nwBCbdfGIC+P3xr8y8JXzj8JHkh9YUtxNuyxF33+plrPrpWZAGGZBqoi1q+D9PL3iTM8R6v5W+sPMlRm+Uf0i+Zbqr9WRhiebb9Qeuu7/Vm6413aBCO9K3CuWl1qBX63YeWC/m99vAL8c4Swn/22Ef4zk9Q/xn5J3Of18Hl7/BQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_DB_Validations" searchProperties="true" id="1cc8c7f1-8717-461e-801a-f31149324c32"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="43c5dbf9-3574-4373-9d3f-f1b49a7247c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("user_oid",null);
tC.setPropertyValue("account_oid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("IsMinor","");

def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

def BirthDate = null;
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

Result = b.userGetRow(userID);

myXML1 = new XmlSlurper().parseText(Result);

log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
 if(context.expand( '${#TestCase#ResponseType}')=='SUCCESS')
     {
        assert  myXML1.ResultSet.Row.size() == 1;
       	
       // assert myXML1.ResultSet.Row.STATUS == 'pending';
        assert myXML1.ResultSet.Row.PRIVILEGE == context.expand( '${#TestCase#Privilege}' );
        assert myXML1.ResultSet.Row.USERNAME == context.expand( '${#TestCase#UserName}' ) ;
        assert myXML1.ResultSet.Row.GIVEN_NAME == context.expand( '${#TestCase#GivenName}' ) ;
        assert myXML1.ResultSet.Row.SURNAME == context.expand( '${#TestCase#SurName}' ) ;
        assert myXML1.ResultSet.Row.PRIMARY_EMAIL == context.expand( '${#TestCase#PrimaryEmail}' ) ;
        assert myXML1.ResultSet.Row.TELEPHONE == context.expand( '${#TestCase#TelephoneNumber}' ) ;
        assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == context.expand( '${#TestCase#MobileTelephoneNumber}' ) ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#CHILD_DOB_XML}' ))
        {

        	 log.info "I am CHILD";
        	 
           BirthDate = context.expand( '${#Project#CHILD_DOB_XML}' );
           assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';

           tC.setPropertyValue("IsMinor","true");
           
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
       
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#YOUTH_DOB_XML}' ))
        {
        	log.info "I am YOUTH";
        	
          BirthDate = context.expand( '${#Project#YOUTH_DOB_XML}' );
          assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';

          tC.setPropertyValue("IsMinor","true");

                    
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;

         } 
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#ADULT_DOB_XML}' ))
        {

        	log.info "I am ADULT";
        	
          BirthDate = context.expand( '${#Project#ADULT_DOB_XML}' );
          
          assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';

          tC.setPropertyValue("IsMinor","false");
          
        /* if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
          */ 
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}' );

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User Validations Passed";
               
   }// end if for success response check
  else
  {
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  }
  

   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );
def nodeid =context.expand('${#TestCase#nodeid}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c=  new dbUtils.dbNode(log,dbHost);
//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = '$userID'""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

log.info results;

/*
*  If zero length, no need to continue;
*/
 assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (context.expand( '${#TestCase#ResponseType}' ) == 'SUCCESS')
{
	assert myXML.ResultSet.Row.size() > 0;


	if(nodeid=="dece:cs"|| nodeid=="coord:cs" || nodeid=="portal" || nodeid=="portal:cs")
     {  
       assert myXML.ResultSet.Row.size() == 4;  
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";     
     }
     else
     { 
       assert myXML.ResultSet.Row.size() == 5;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' );    
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID ='$userID'""";
  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select POLICY_CLASS,STATUS from POLICY P, POLICY_RELATIONSHIP PR where PR.POLICY_ACTOR = '"""+b.userGetfromNodeUserId(userID)+"""'
  and P.POLICY_OID = PR.POLICY_OID""";

  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>IsMinor</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00004_UserUpdate_FUNC_CLG_Update_CHILD_DOB_TO_YOUTH_AGE</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>Username</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>DOB_NOT_EDITABLE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value>E2A349A2ABBCCB1DE0401F0A059926E1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E3CF68DF2A8DD783E0401F0A07994C97</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3CF692D5BE44697E0401F0A05993AD3</con:value></con:property><con:property><con:name>attested</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountDelete API" searchProperties="true" id="50689f7a-271a-48af-ac58-51a00dcf25e1" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3b865a-29ea-477d-b95b-c43f031f13b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="7bed7b31-f1e7-4d93-a26b-7c4f3fd4364f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="b5272ae6-82f1-4167-a218-91364f720ae1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("SecondUserName","username_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="efdeccdb-6452-4757-8742-168412fcf27b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="7dfbf775-9a67-431b-bdda-786ea95cc0e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e33b673a-0ef4-4681-bc6f-abfbbf10e33c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="aa74adfe-6f1a-4eb3-8891-56556b47f6c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.8. Account Delete [Your UltraViolet account has been closed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1iuR8twEUGsJFWDgKKiInh92YXDiCg3GRD11+/BRJfJStbJPk86TU/315fp+eYZ24HPtgDGKEm9KCxr8kvlH5ut2yLNsLXmRlzXOF6s10ROsGs0BzmO5aCDHFgpaxhnSAtxaofpS4WlmXqN5mtM02K4VkNoMcITL/CrSnmGEkxME5UnulI+BX6IW1e3L5UsCVuRjT3cCu0A4VYKWybQBy2i2bJvmCqvz28orw6T122axi2Kgk8Ogsj34ROMAuqZ+qDz7OCW6bmhnWYJevfp4JfK+948z5/y+lOUuBRL0zRFixTRcbDn/qq8lm6bkaOFm+ht3bbDKPSg7XsXuwClo3QbOWXgu1HipdvgG9MMxdCF6Ro6wRpkuPBXhfrt4Iruh5Y+gEywXcNbm7kZm6ANSlAIUXk60V4qv35Wwbe9VmKHeBMlAf60/m+QUHhEfhQjp4Zvkd3Q/dziF+l6fUawpYXQz7B3RMOiTWIbIlweJ2jjnQYeJs3n4PK1/OUTvnUYgv+lJM/UI04Cm/oiM7LnIpz+P/V6rNWblZntZ+g1Zg6mNj4GI5NXE90Nqrg3YbuKHAjGyxXCo/IbqHup39efG/XeV++bho2ZoHZ0O2CD0LfBSjybGuftw3M/GNeX81GYjinLQns47VXnybJBeRTkwOjA+z41mLMNiQ53Trw0Qn5hlKbNg63KvJRjZzrXBEvb6ZOxRQdDq3kZdNXlsguGdt3pqdOF0pkYcu+gUybcjwNOX/gz2ZhmsuDNoubAlvUSSzHGsRkdeueYW+adPLG4l98xPcZQxNVH52uQxf9FgxZlO7Xvi3YxKTbkeKboVde0dlVutwFquyDXJOBq0uAChpK7P2z3XkfMaQkYUxXI4KxPQC67S3lmGH0ld2YzfzXTVFXSJ1zeBUu5RD7IymkmrxY92p6v4iWr0itTkpzFJFrXe7HT3efdLRzqlp4PLe2s75TT0FLo+VXmnsj6ou90ZmRN66X5ThL1iZLL+dWjrOTb4Wo+iZdTMYcXxdAB1wHMVGlv9a4VzBhYn2zhThnoYH+VS1u9PZvpJ8UC45LkDmckNqutrmIYOPE68LcPxrvEuOV0Zud1x89WF2Wnt5VO2zx0TG1dlw2lBybL6Xo+29tz9ViC3SFY3zx6Dc9eRLm7auaysez1o5W2PcIhMBRJMgBJFw10rdMDUUcCOge806W9k/io7ag51WNxqSr6HX5x9g4LbHdo32aaTWY5mPPjAy8rYXXVz9a7rb5dqKNq33SOUzEVL0t8rB5522PgKd4YC6Wb9k+brmGW1mP5tIDdquP2KP8iklMi9EByOW993Z2kc36Ez2tvs5lLixHnCxtfr0/ijb+Jz7hqRcY+oXkJ1VlqeT720xJwdQmAzm66kwxdahZJdbTcWOqSDVQlzcBlx6Z9dnbodY8+XNZBdOrPR7v9e2EcOVckKjcU0lZKqSkDpyhC15wq6g5MJddNJFdRJQPKwFhq/XxJ8jXtEuXPeVSveXQVCSj1FeDFbqk+pcV0lJocB86hNA1VcasfTnOHD2jhgJSBOYy5XMfDTbiaR3s98JJpkpnTfn84OK2trLPfkVm1oc3+sb4qKcd9DLxh39ru5Ui2x/FymcbVECYw1eJA106X0Qrvmt46oHvVBiONaRkK7DRY59OOraz6iWsy/e4kHNcFsYSzzbkbVHfNfF61TD4WnHa4kc9napXM6AhEqjhpHJwTy+6303zA55se2K9tdnjyReksKv2VBfOJ0Z+bQbVRahwHg4C+WBQ3jEe52ck5xTCqdUeyuhaOE2+ZNd1TMgoddmmn/HFFz3gv9vcim+0tLq7P3IAUa3x0YkEflwxuAVeBK8SwR02oI1CEzUDrnNcX+xIHI/g2QD9Ph7vwbX5Qj5Plw+i5kQ6TdCuC6W1ZXECaXFbJrWCnfycwhcRzapuraisuWBBOUZhWXotdBXlpZYTieE6LXBlva1nlVUVoKqrA1zmpISk0RzMqDeiGKHJ0g76xnDcUnyC2o3DjFb4KHvd2S/0dIAxaGIUOSmrHKINbhCt/sVjkq6yFE3L9RiFGVkR4IgskRqCbgsJw7booygwncw1F5AAvNNtik7C9YZSOwlECNilKPnJE4QNHnCDoxR4qiGRxm2JyneKUpORgH7PUZ56O9lOIMkI1k4LttViu2aCwF8Q+KgBTQeRkPnqKt/E1QRR++2VrNsRXaZtuK2pToZttcjMIMv+YWIalpSsF+Db2z99uaSI6jlco4CJQCZFSoy+YMH2L8ttssPRjNm7mQeZ4xU1Pcp4mHnxD8vHT71YqeujeRxPF+qdt/sPccN/VPws+mKY+R3X35hw9eD8R98cC4ZqEjbzeCnawnw5P2fGYXUskFEwrIeYphqJ5ykQwI3TpbEV7FFJ3E9SPmOod9SfPd/lHfFm6Dc2UnPaANFT5uvzBM8VEuHimaORAnH76BvrgkuQtRaf0K1nbJ6+ZAvFfHzywBQs9Ih6TnzxKnN/l+sLWgx8SZzHevNAtVgUvPX/TGTAiZj0y4qLk0fhXBr5y/lF4T/IdS0q6aZ2l6Psv5WJ2vVRsCKMsTDW5chU8ztMrzvQco9ZvpT/MXJnhO9U/4W+p/kIfmGSyBXblruv9b+Wad20XiMgu7F2xvFRO5NVKnIfuw/x+B/j1CG80/jbCP0by+of4T8lDTj+fh9d/AQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate API" searchProperties="true" id="0559683a-89a8-4543-9672-06581fc3aece"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" id="6afcd2ee-d125-48d3-86d9-0b8f90dcad31" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
	xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {

         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

        tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
       }
      }
                                

else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1995-01-02</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">en</con:value></con:property><con:property><con:name>Locality</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1650</con:value></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>userType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADULT</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>3FA5D4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>8EA5E5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true" id="30aefa36-5265-4855-8432-a953e41b8771"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cc7ab515-dee1-4301-a271-69c0066d67df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="815bff3b-842a-4070-86bb-cece5b19c7a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="f23d9bb0-0bd1-4723-928b-a9c1d99c147f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		log.info curYear;
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay); 
		log.info now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		log.info curYear1;
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		log.info now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="5aec259f-6efc-4047-958a-f404549b66a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="bdbb05a4-3195-40a4-a273-e98edb919cda"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}
</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bc996057-be4c-4bee-a9ac-43bd22a866c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Test Case Name with Expected Result" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def httpStatus = context.expand( '${#TestCase#httpStatus}' )

logFile.append("${callTCname}"+"\t"+"$httpStatus" +"\n");</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b31e8838-e244-4a70-b23e-27ecedeb39ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="95f3189f-715e-4cef-bc91-14a1b4138b68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 //assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                //tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="419e9428-03d9-4db9-8ef2-4eaee630ffe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
<!--	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>-->
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlAo7QgzVWTtLq4OBVf8ciekB4i0aW1SXu6vv0mxCIiu3hlnMKcnz3nOS57knKEktjyfMcg5SakSdNvqP2gCDdc2TA01HVOzJ25DQ2ZzorkOYNQAZIFRV5WAsQICyjiivK1ahlnXTEuzWkOz7llNz3BrpuM+qso95ExAC5eaoSrrJKbMK8O21SKnXooYYR5FCTCPYy/0b/qe8PRQxUntnG9ZlgHzzpzzzNN1XIsAQxzjGk4T/Vw/8DmPmBeSGUW8yOElZsTa6sve1WpVW9VraT7TLcMwdMPVhU/EyOy72vlWbYYooNN0u75ENKUEo5j8iySpG+DzNFL8eJbmhM+Td6BN3TQktAZrrGHTpt9V/TVAye6TSAckc4Y0NkdmBTaAKeRAMSijQdBWv3+ug9u9wxxRNk3zhB2tv0YJ6BLiNINIY1VmFbvPI54oV+ccsBdQHBeMLOG3HJMMYWDKXQ5Tsu4TJoYvYkrZfmXNxB+ppgzwV9pyru9zFdT1E9Xpkhkw/n96tt+vLco9igvooE1/PCWO9atXt80VGt9PRgYa0/sHfdwuKew7b0nt2v2yPh7W3Wy9bMLO9ZO/jjdZmC6N2yf9mi3DswFes2K6uEtnTz+nmz6JBz8u8B/y1P99NryenQ2bVw/+j+hu8rOLlws0aobJ4qrp33+zVouZE64XrdXw+sFpuGejOs6b9cU09Btje3KTOclFsHiKJ9n4bHTj9u1gObIdS58tDEzibLziP1puLzVubx/db4+DaDNqBZvEZq0ijP+AiduvOe3ncGisJCEsJk+AebWU4xF0lZ7oF+Ify4u0kEiblq5eJjWKcaBc7chdUlq8QggQiTzRzO3a6vkN374yraZbF70yLi9c3xL/uXbL7Ll+q9KgLYsjipcpnRIZS6rsdn4+JogTjwGNINeWaYHnwNQPELuIIyWgA3E4UspgmAoV7/ndpnl14duW3eq5DevKdg2n7ro956LesxxXVX6n/Jbe5v6UQ36o4M0DBR8AJhkBKfNyzpkYdMZFSZ7RsuCxWVuiGoVCXAS51GJPxGvojCRZDJKwnqRREUMtm2dlgXS2/bU0hFlpJQxnac5RbJbH8N0sj79VBRE+EZEOTKZ0AaKp8OZGaniNKp/383b3867g/SIi8rSJ6vKc4C2Tw0+vQyOnZTcxu8QwMyvuuy1fhDgBoH/ATz8uzS5etCR70atbVlwcQlY6VX+fUe25ViyXRdlRR0pmLuB1oZymHgIuhO5thukCqL6D0D917exYH0Xe2Q/5FXxOQ444JGL+lHL5iTdHCEy+OQJxftaffdAchBR147Dmp2yXsXiaSMYfvl6wh6WfMN+Jn1WaR6/tOoG1F0fkKR4anNCZXMkLZvPObOBUwBKhiGm+D34K4FTwQ+OuyDsuXEzTpODw/hdFSl1bRRinBeVBVy0N+/Jb8uSbDLxXpzcwpcS/3Nlr9u6d/XDTD4UQJkjd+ZK/O2ukHBcMqnwalFza6lo8QUVwOtuT+xeC+4rvXPmNbuPyr4p/mEnnjfmtZa+mx+eh8x8=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>93B5CA3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E6078B27BD7C72E6E0401F0A059976B6</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true" id="590b402e-4d94-4c2b-a26d-a4d3267a4ef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

//callTC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//callTC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL2"));
//callTC.setPropertyValue("UserName2",tC.getPropertyValue("UserName"));
//callTC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42/User/urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwimIlqRo2RcUNXG/eQhgQZZMBQX/9O5joMTnJ+fJ+VzpNT/fTy/Q884zMwKc7ACGYpF4UVlXppfaPzbEm6fBcg7J4ssG2zHbD5KxWw3Z4ewsZyLCkWauqCGVQDVFqhulLjSYppkHyDbJpUGSHbnVY+qnNUJtadQEThE1jlSeyVi0CP0Sdq9uXWpaEnchEHuqEZgBRJ7U6OtCGHazZMW+Yaq/PbyivDpPXXZrGHYKwnmxoQd+3nqwoIJ6JDzrPNuronhuaaZbAd582eqm9783z/ClnnqLEJWiSJAmSJ7COjTz3V+21ctsMbTV0ore1aIZR6Fmm713MEpQG011kV4HvRomX7oJvTFMERZamG7CwGhbFhr9qxG8HV3Q/tPQBZILMBtqZ1M3YDDowgaEFq/OZ+lL79bMKvu01EjNETpQE6NP6v0GC4Qn6UQztBrpFdkP3c4tfpOv1GVodNbT8DHknOCrbJDYtiKqTBDpeMfQQbj4bVa/lrxbo1mHQ+i8leSYecWLYxBeZkTwXovT/qddjrd6sLEw/g6+9aBnyXBOJdA5WS4WZ5mRkMmvZmoCXK4RH5TdQ91K/rz836r2v3jelTLaeDODZ5PuTurmwHGFJ6kVr7K72MfDycW+w34otwXDEqaxd6sJx6abSQWW7vRXX22ah4BVrsIhHg6Z+rHDk7MBdLnSyTVYtokeiJiGcJmOZmJi9ppRPt8wyWpK+fbRnI0XhocHQJuuPE9frOoIi7JpFN3VITmVT1qksjIw6ToJYHC0WxbgvG+vo5XdMjzGUceEQrkGW/1dNkpfM1LwvxHJSOPh4pvBVU1WxLokigKILclUArioML2AkuIfj7uB1+ZwUwHSuAAmctRnIJXctLabTgZzbi4W/WaiKImgzNu+BtVTBHyS5WEibVZ80l5t4TSvkRhcEezWLtkw/tnuHvLezRpqh5SNDPWt7uRgZMrm8ytwCry/aXqPGxpypLPcCr83kXMqvHiU53402y1m8nvO5dZGnGmC7gJrL4k7rGcGCspjZztrLQw0crnJhp4mLhVbIBphUBHe0wLEZorKJrcCOt4G/ezDew8YNu7s4b7t+trnIe02Uu6J+7OrqlpGmch/M1vPtcnEwl8qpYvVGYHvz6DU9cxXl7qadS9N1fxBt1N3JGoGpLAhTgNNFAk3t9kHUFYDGAq+4iHuBi0RbyYk+jSp13u9yq7N3XCGzS/om1W5T6+GSmxw5SQ7rm0G23e+03UoZ1we6fZrzKX9Zo1P9xJkeZRWxM13JvXRQOL2pXtlOpGJl9eq22yf8C68kWqsPkst552vuLF1yY3Teeo6zFFZj1m85vsbMYsd34jOqG9H0kJCcABmaWJ9Pg7QCXE0AoLuf74WpJrTLpNpqPl1rggkUOc3AZU+nA3px7PdOvrVmQFQMluP94b0wtpTLApFPZdxWcqUtAbssQk+fy8oezAXXTQRXVoSpJYHpWh3ka5yveQ8rf86jcs2jKwtAZjaA43sVZk7y6TjVWRacQ2EeKvxOOxZLmwvI1hHKQ30Us7mGRk64WUYHLfCSeZLp88FgNCy2RtY97PGsckh9cGI2Ffl0wEd7NDB2BymSzEm8XqdxPbQSK1XjQFOLy3iD9m1vG5D9epMSJqRkteh5sM3nXVPeDBJXpwa9WThhWnwFZc65F9T37XxZN3Qubtli6EjnM7FJFmQEIoWfNY92QdOH3TwfcrnTB4etSY8KnxfOvDzYGFY+mw6WelBvVpqn4TAgLwbBjuJxrndzVp5O64wtGD0DxYm3ztpukYxDm16bKXfakAvOi/0DT2cHg42ZhRvgYk1OdtzSJpUpu7I2gduKrT4xI05AbjlDtXveXsxLHIyttwH6eTrchW/zg3icLB9Gz4106LhboZXeluUFpEpVBd8KZvp3AlNKPLvhXFU7ccmCUArDtPZa7irJSyfDFMezO/jKeFvLTUA123JbAbLU4hlSJlmSUkhANnkeHyPhxnLeUHyCKEah45W+Sh73dkv9HaAVdBAMbZg0TlFm7SCq/cVima+qGs7w9RuFCBoR5om0QMlNrimxLKU0KRKILaUNRJ5TpCYvkKxSq46idByOE+CkMPnIEZkPHHEGLS/2YEkky9sU4esUpTglR/OUpT71dDKfQphhqpmUbK9Ds+0mgbwg9mEJmAgiO/PhU7yLrwki0Nsv3TAtdJXOZOMfVRevN/23IX7+dssG1rG9UgGV8QgQVxR+QXiZWzDfB809Bn0zDzLbKy90nNo08aw3JB8//e6YslXu7VJGJer/UDfcd/Ufb/9zJ/EXUMTnfNwd2Sfvwe2NuWMyiunK662iR/Pp+JSdTtm1hq2SiiXYPEERZIvQoZVhPnU2ogMMibsJ4kdU9o76k+e7/CO+LN2FeorHQYA7rnpd/uAdo0NUvmNUfGKKnz6SPrjEeUthkX4lE3383CkR//VFZHWsUg+LJ/gnjxL7d7m+sPXgB8dZzj8vdMtVSVzP3zSFFWGzHp6BUfJo/CsDXzn/KLwn+Y4lxd20zVL4/ZdqOdxeaqZlRVmYqlLtKngcuFec6TmGnd9Kf5i5Usf3t0CBvn0LrLShjkdfYNbuut7/Vm5413axIN6FvCuWl1qBn7XYeeg+DPh3gH/OeEGRFZoiuVbzPuNbPE9LLH1P4IdIXv8Q/yl5yOnn8/D6Lw==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00033_UserCreate_AUTH_Creator_ADULT_Full_New_CHILD_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5A158BFF59D0675E0401F0A07992D42</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="18d6dbdf-5594-4023-8f59-664e83628798" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40b51506-e7ed-484f-9cef-144c355c10b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0e921030-fc0e-4088-8519-d2ea05acede9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="8dac2685-8684-45a7-9383-18906924bc23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="9edfc5bd-e710-4adb-a343-f24a81968540"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5be437dd-519a-4ddb-9991-82608accc06d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a34e05a2-007f-4659-9d23-4e5f076e5223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="19cc486a-a16d-4ec8-86ef-9f451f07ebed" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46e67ffd-7362-4e1c-a502-21e353b9227c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="277c6a80-14fb-4da5-bd51-3f2ccc23180d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="11565952-3245-4993-9a90-b45b77daa42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="aa2ec204-f680-47ad-98fb-51d2d96fbf59"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="367744f1-376f-4646-9264-0e788eced0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e8904455-2076-49b1-9371-9836b5d0c1cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8sAgihWkqphU1TcwPXmLRwGRNlk11//DiZ6TE5yvrxf5cJM09P99DI9zzzHhuc2uyCOUZQ4gV9VxJfaPxzTJBkWNRt00zIbDLczG0aT6uBlh2pRBkVZDFerKnGcIsWPE8NPXmpNkqIbJNugOJ1sdelOl+k8sSyzrVWXKIqxaazyRNaqhef6cffq9qWWRn43MGIn7vqGh+JuArsaUEddrNk1bphqr89vKK8Oo9d9koRdgoBPJoLIdeETDDzimfig82zGXc2xfSNJI/Tu04xfau978zx/yumnILKJJkmSBMkRWMeMHftX7bVy24xMxbeCt7Vg+IHvQMN1LkYJSkXJPjCrwLWDyEn23jemKYIiS9MNVMAGpBj/V4347eCK7oeWPoCMYqMR7w3qZmyOLBQhH6LqYq681H79rIJve/XI8GMriLz40/q/QUJ+htwgRGYjvkV2Q/dzi1+k6/UZwa7iQzeNnQyNyzYJDYji6jRCllOMnBg3nxlXr+WvFvGtwxD8LyV5Jh5xYtjEF5kRHRvFyf9Tr8davVlZGm6KXgGVdJC/9rRR1qunMuNpHH8O80vnQL5cITwqv4G6l/p9/blR7331vmkizeSkl02UHWImJKhPLrBlSqucXmx1rW+QuUJL9mAEt9qw3TZMYw6glp6QSazSvdXL8mBdEELCd5RLqFdcuJ0o7eKkjdzW+UgeXd8VNDSVpuqRS0HeonkhPE5mobsMZcsMBQseTO7ILkfncM+yxakN/Nhklwf2rO8qy0l4CS7H1B4yUXDOaWO9efkd02MMZVxDdL4GWf6/bpGcaCTGfSGUk8LCxzNBr6qiCHVREAASbJArPLAVfnQBY94+nvZHp8flJA9mCxmI4KzOQS7aG3E5mw2l3Fwu3e1SkWVenTN5H2zECv4gSsVS3K4HpLHahpumTG41njfX82BHD0Kzf8z7ezhWdTUf68pZPUjFWJfI1VVmF3h9UQ8qNdEXdGV14Dl1LuVifvUoSvl+vF3Nw82Cy+FFmqmA6QFqIQl7ta97SwrS8z08SCMVHK9yfq8Ky6VaSDqYVnh7vMSx6YK8DaFnhjvP3T8Y72Pjutlbnnc9N91epIMqSD1BO/U0ZUeLM2kA5pvFbrU8Gis5q8D+GOxuHp2WY6yD3N52cnG2GQyDrbLP4BjMJJ6fAZwuEqhKbwCCHg9UBjjFRTjwbCCYck4MmnGlzrk9dn12TuvY6JGuQXU61Ga0YqcnVpT8+naY7g57db+WJ/WhZmYLLuEumzirZ6zhULAIrdla6ifDwurPtMpuKhZr2K+b9oBwL5wcqe0BiC7nvava82TFTuLzzrGsFb+eMG7bclV6HlquFZ7juh7MjhHJ8ohuEptzNkwqwFZ5AHqHxYGfqXynTKqp5LONyhtAlpIUXA7NZNhcngb9zIUbGgTFcDU5HN8LY4q5xBP5TMJtJVU6IjDLIvS1hSQfwIK37Yi3JZmfQRHMNsow3+B8LfpY+XMe5WsebYkHEr0FLNev0AuSSyaJxjDg7PMLX+b26qlYmaxHtk9IGmnjkMnVeGz521VwVD0nWkSpthgOx6Nip6e94wHPKovUhhm9rUjZMQTOeKjvj2IgGtNws0nCug8jmCihpyrFZbKNDx1n55GDeovip6QI282Ft8sXPUPaDiNbo4b9uT+l21wlTq1z36sfOvmqrmts2DYF3xLPZ2IbLckABDI3b53Motk87hf5iM2tATjujOa4cPEo46ThVof5fDZcaV69VWllo5FHXnSCGYeTXOvljDSb1WmT1/t6HEbOJu3YRTTxzebGSNhsSy5ZJ3SPXDM96kxIL20PF2uamWFbnVZmzBpuPbsdwgExJzIgta2R0jvvLsYl9CbwbYB+ng534dv8IB4ny4fRcyMdGu5WBJPbsryAFLEq41vBSP5OYEqJYzasq2o3LFlQnCA/qb2Wu0ry0k0xxXHMLr4y3tai3BZoieFEQRY6UouUSIakZBKQLY5ryXTnxnLeUHyCKAS+5ZS+Sh73dkv9HSD0ujHyTRQ1siCFexTX/mKxzFdV8ef4+g38GOkB5okMIGmB4QX8x9ACxTG8SLdFSQJcu0UJfKdWHQfJxJ9EwEpQ9JEjdj5wxDmCTuigkkiWt2mMr9M4wSk5GVmauNRTZjz5KMVUMyrZXrfJdFpE7Hihi0rAhBeYqYuewn14TRARv/02GwaMr1KBFCS5I5EdAd8MbZF9TCzVJPkrBfg29s/fbmnCOqZTKsRloDzCpUZfMGH6FuW32aCox2zczIPUdMqbHuc8iRz4huTjp9+tVPbQvY/mkv6PoP1D3XDf1T8LPpgmPkd192ZmDryfiPtjAXNNzEZebwU7GU+npzTL0muJ2iXTirB5giJIltAQTDFdOuvBEfnE3QTxI6Z6R/3J813+EV+a7H0twafdww1VvS5/8EzRUFw+UxR8IIqfvoE+uMR5S1CRfCUTXPyaKRH/9cEDu7DUw+Ip/smDyPxdri9sPfjBcZbjzfHtclXy0vM3nQEDbNbBIy6IHo1/ZeAr5x+F9yTfsSS4m3Zpgr7/Ui1n10vNgDBI/UQRa1fB4zy94kzOIer+VvrDzJUZvlP9Iv6W6q/VkYYnm2fU7rrO/1ZuONd2gQjvip0rlpdagV+t2LlvP8zvd4B/jHCBEzhGaso0Jd0nTZvjmhzVvifwQySvf4j/lDzk9PN5eP0X</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="3ad94f34-6a5c-418b-b8f8-a203cab10bc0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a41d2cef-51b0-46b7-b40c-1d6923e3263d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e0e1fe9a-79d7-42ce-8931-9ee2304fe307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="dc69f304-d0b1-4059-89ba-47e13860aae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="f64f1781-9c0e-4af0-98c4-96319bba32ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="1e9ae371-1bd0-4759-940c-81391e47aabd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="fc5935eb-e5d0-495a-bb33-6346b3b9fdb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" id="7862a908-a45a-4b81-bc0e-801e8e24856e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8e7711f-eb52-4a17-984b-8a6a0236e395"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="fc0f6904-5506-463b-adf0-9309f4db6c7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="15098d07-3e28-4bd9-8ce6-eddc712c561b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="02239d7c-1ce6-4d58-9ae0-6470a8e1e472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="a1716223-f6c8-4dc3-856d-e8679a537744"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3af7e03a-0317-48f5-92bd-e35a465a120e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5d887a92-965a-45ab-ab45-7daaea74c225"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBUFHRgLjevIXDgCibDJv++nfQ6DE5yfnyflc6PT3dTy/0PPOMDc9lOwBjFMVO4Jdl8aXyT7PFcg2Th7WGVedqnNFu1Np0m6+xvGnVG3R7uzWYSlnGOEGyj2PDj18qLM3Ua3SzxvA6U+806E69+USz3KZSXqAIE9NE5YmulHPP9XHn4valkkR+JzCwgzu+4SHciWFnBpRxh2h2jBumyuvzFeXFYfS6i+OwQ1HwyUQQuS58goFHPVMfdJ5N3Jk5tm/ESYTefZr4pfJ+Nsuyp6z+FEQ2xdI0TdE8RXRM7Ni/Kq+l22Fkyr4VXNddww98BxquczYKUAqKd4FZBq4dRE68874xzVAMXZiuoRzWIMP5vyrUbwcXdD+09AFkhI0a3pEivBvTkIUi5ENUnmvyS+XXzyp4PatHho+tIPLwp/V/g4T8FLlBiMwavkV2Q/dzi1+k6/UZwY7sQzfBToomRZuEBkS4/BYhy8nHDibNZ+LypfzlHN86DMH/UpJn6hEngU19kRnRsRGO/596PdbqamVhuAl6bc4Ye7D3+oln7yJRsFdmQ+NWIuqGwcsFwqPyFdS91O/rz41676v3Q9aSsua+vTwziatnYX7O1S7XPMxTS287OQgHbhuej/l5U9dVaz3Ydkchv6H9pDoc5Nvxymc0zemP9y0eSNtSg6/i5bq614ataj5fRlqaCNXT0lw38154ipqWeaB8VU0MwVjM1UzdU6c8dLhwoEtWjH1/82ZQPSMVFG0pl05QYbdiHhyEQ+jUe8yEll5+x/QYQxHXCJ0uQRb/Vw2aF43YuC+6xaSwyOcZo1dFlrtVsdsFqGuDTBaALQvjM5gI9uG4Ozh9PqMFoM57QAQnRQOZaK/FhaqOpMxcLNzNQu71CD4uG4C1WCIbopQvxM1qSBvLTbhme/RmJgjmSgu29WFoDg7ZYAcniq5kE10+KXspn+gSvbzI7Jysz8peYab6vF5a7gVe0aRMzC4eRSnbTTZLLVzP+QyeJVUBXB8wc6m7Uwa6t2BgXdvBvTRWwOEiF3ZKd7FQckkHbyXBnixIbHq3twmhZ4Zbz909GB8Q47rZX5y2fTfZnKW90pX63dmxP5O3dVGVhkBbz7fLxcFY9tISHEzA9ubRaTjGKsjsTTsT1fVwFGzkXQonQJUEQQUkXTRQ5P4QBH0BKBxw8nN3LzSDrtnLqCGLS1Xe7TdXJ+e4wkafdg2m3WbW42Xz7dgUJb+6GSXb/U7ZrXrT6mhmpnM+5s9rnFbTpuEwMA8tdSUN4lFuDdRZafsm5is4qJr2kHLPfC9SWkMQnU87V7G1eNmc4tPWsaylsJpybstylboWWq4VnnBVD9RDRDcFVGep9SkdxSVgKwIA/f18L6iK0C6SasqZulYEA/SkOAHnPRuP2MVxOEhduK6DIB8tp/vDe2FMMZMEKlMl0lZSqS0CsyjCYDaXenswF2w7EmypJ6hQBOpaHmVrkq/5gCh/zmPvkkdbEoBU34AmPyjV5zQfT+MZx4GTL8z9Hr9TjvnSbHp064ik8WwScpmCJ5a/WQYHxXOieZTM5qPRZJxv9aR/2JNZZdGzUVrflKT0EAJnMtJ3BzEQjbdwvY7Dqg8jGMuhp8j5ebrB+7az9ehhtcEIb7QIW+zc22bzviFtRpE9Y0YDzX+rt/gSTqzTwKvu29myqs+aYcvs+pZ4OlGbaEEHIOjxWuNo5ix72M2zcTOzhuCwNdhJ7vLCiZdGGx1mmjpazrxqo9RIx2OPPusUNwmn2ayfcZKqVuumoA90HEbOOmnbeTT1TXZtxM10Qy+aTugeeDY56FxYX9geKdZbaoYt5a2kciu48exWCIeURqVAalljuX/ano1z6E3hdYB+ng534XV+UI+T5cPouZGOGelWBOPbsriAZLHcI7eCEf+dwBQSx6xZF9VOWLAgHCM/rrwWpwry0kkIxXHMDrkyrmux164zXFvoMQ2eEeotieZopkcDusXzLbYBbizniuITxG7gW07hq+Bx11vq7wCh18HIN1FUS4ME7hCu/MVika+y7Gvk+g18jPSA8MSWxDFCQxJbvNBmWbbREOgGgS5227TYZFhQKU+CeOpPI2DFKPrIEZsfOKKGoBM6qCCSxW2KyXWKY5KSo5Emscs8pcaTjxJCNaOC7XVYrt2gsOOFLioAU15gJi56CnfhJUEUvv6yNQPii1ST9H/kWfdy038b4ue9WzaIjukUCriIR0CkougLwsvegvk+aP4x6Jt5kJhOcaGT1MaRA69IPm797piiVe7tQqK6Qb5rfhZ8sEp9DujuyEwdeO/5+3OAsEnCN15vJTkaT8enJE2TSxFaBZeKiHmKoegmNUMwIYTopAcH5FN3E9SPuOgd9SfPd/lHfEm882cx+Z490jLly/IHD5EZwsVDRCYtn//0lfPBJclbjPL4K1nXJe+VAvFfnzSwAws9In4jP1kQmb/L9YWtBz8kzmKAOb5drArmefqmKWBAzDpkiAXRo/GvDHzl/KPwnuQ7lph00zaJ0fc75WI6vVQMCIPEj2WxchE8TswLzvgUos5vpT/MXLjfO5nP8bdkfqWMZ2R2eUblruv8b+Wac2kXiMgp7FywvFRy8i4lzn37YUK/A/x6SHPgb0P6YySvf4j/lDzk9PP38Pov</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" id="9d562b4c-2b21-4e4b-9dee-ea86ba8721ce" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b6c59ddd-f128-45cc-acc1-fcb9c7601c10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d2122245-f595-48c8-b54c-ea78d0db3f52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="7060fe95-13b3-41ca-a150-3f0edc3adc54"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="20e9cc33-a9bd-4521-aef3-430d62debf4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer" id="f04ef3e0-3f34-4fd7-b08e-576d088813e1"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2479ab41-1198-444b-88a0-f69cfd793c9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5db4b6fe-99bc-4dbd-b846-0fe097588a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziANGd0cUgoqKIzi93MCiGJRJikm//hbauu3e3fvuc1/ESrIyVw5krXrFuueyHYAximIn8Muy+Fb5D982aNjQ27V9q8nUOJ5u1PZGE9ZgnWk1aYZrtPZ8pSxjnCDZx7Hux28VlmbqNbpZY3iVYTsc36HZlwbd2lXKKxRhYpqovNCVcu65Pu5c3b5VksjvBDp2cMfXPYQ7MewsgTLuEM2OfsdUeX+9obw6jN7tOA47FAVfDASR68IXGHjUK/VJ59XAnaVj+XqcROjDp4HfKh97syx7yeovQWRRLE3TFM1TRMfAjvVP5b1034wM2TeD27qr+4HvQN11LnoBSkGxHRhl4FpB5MS294NphmLownQN5SR9DOf/U6F+Obii+0tLn0BGWK9hW2fuxhbIRBHyISprC/mt8s/fVfC2V410H5tB5OEv638HCfkpcoMQGTV8j+yO7u8tfpOu91cEO7IP3QQ7KZoUbRLqEOHyLEKmk48dTJrPwOVr+cs5vncYgv+mJK/UM04Cm/omM6JjIRz/P/V6rtXNykp3E/TuyUIGD9To4Kz6m0G+mqqebMHQTBfa2xXCs/IN1KPUH+uvjfroq49Nvom2vBb6zqSrVJdSHc0uDNI0rX5m3KQXKs4md7e0H3PrFhsf061Nj05NdcP1VtrQmgB5jf3LxN/3N6JrlpSumc+r9TNX5UO6MWvSeDWecOP2KbCs4WXsJXbT32/8wclh2E2uL0/Was7tq+yskWvnoRtjmZ1Jl53tO5RZUvdOmrZlLrT9qDU1jzjevv2K6TmGIq4ROl+DLP5vGjQv6rH+WHSLSWGSzzNG74osd6titwtQ1wKZLABLFsYXMBGs48k+On0+owUw13pABGdlATLR2oqr+XwkZcZq5e5Wcq8nKAsuG4CtWCIvRClfibvNkNbXu3DL9ujdUhCMzSLY14ehMThmAxtOFFXJJqp8Vg5SPlElen2VWTlZX5SDwkxVrV5aHwReWUiZmF09ilJmT3brRbjV+AxepLkCuD5gNKlrKwPVWzGwvrDhQRor4HiVC7bSXa2UXFLBrCRYkxWJTe32diH0jHDvufaT8QExrhr91Xnfd5PdRTooXanfXZ76S3lfF+fSECy22n69OurrXlqCgwnY3z06DUffBJm1a2fifDscBTvZTuEEzCVBmAOSLhoocn8Igr4AFA44+aV7EJpB1+hl1JDFpSrv9pubs3PaYL1PuzrTbjPb8bo5OzVFya/uRsn+YCv2pjetjpZGqvExf9nitJo2dYeBeWjON9IgHuXmYL4s7WdivoGDqmENKffC9yKlNQTR5Wy7irWI180pPu8d01wLmynntkxXqS9C0zXDM66qwfwY0U0B1Vlqe05HcQlYigBA/6AdhLkitIukGnI23yqCDnpSnIDLgY1H7Oo0HKQu3NZBkI/W08PxozCGmEkClc0l0lZSqS0CoyjCYKlJvQPQBMuKBEvqCXMogvlWHmVbki9tQJS/5rF3zaMlCUCq70CTH5TqGs3H03jJceDsC5rf423llK+Npke3TkgaLychlyl4Yvq7dXBUPCfSomSpjUaTcb5Xk/7xQGaVSS9HaX1XktJjCJzJSLWPYiDqs3C7jcOqDyMYy6GnyPllusOHtrP36GG1wQgzWoQtVvP2mdbXpd0ospbMaLDwZ/UWX8KJeR541UM7W1fVZTNsGV3fFM9nahet6AAEPX7ROBk5yx5tLRs3M3MIjnudneQuL5x5abRTYbaYj9ZLr9ooNdLx2KMvKsVNwmm27GecNCfzxBDUgYrDyNkmbSuPpr7BbvW4me7oVdMJ3SPPJkeVC+sryyPFmqVG2FJmpTm3gTvPaoVwSC2oFEgtcyz3z/uLfgm9KbwN0K/T4SG8zQ/qebJ8Gj130rEk3YpgfF8WB5AslnvkVNDjPxOYQuIYNfOq2gkLFoRj5MeV92JXQV46CaE4jtEhR8ZtLfbaLEcLosSKTbHLSxLN0UyPBnSD51tCu3FnOTcUXyB2A990Cl8Fj7udUn8GCL0ORr6BoloaJNBGuPIHi0W+yrK/IMdv4GOkBoQnggYjtQHgu5LQYKVGlxPaXIsWabrBsW0SS6U8CeKpP42AGaPoM0dsfOKICwSd0EEFkSxOU0yOUxyTlJz0NIld5iXVX3yUEKoZFWyvw3LtBoUdL3RRAZjyAiNx0Utoh9cEUfj2ZGs6xFdpkV2Irwf9jxF+fXdPBtExnEIBF+EIiBQU/cZ3253GPZafY24/x3w3DxLDKc5zktk4cuANyedXvxqm6JRHt1x/IL7Dfmh/FXyyTH0N6uHMSB34aPvHjYAQSkI53u9VOekvp5ckTZNrHVoFnYqIeYqh6Ca1RDAhnOisBkfkUw8T1F/R0QfqL54f8s/4ktj2lzH5pD3SNeXr8i/uIkuEi7uITLo+/9uLzieXJG8xyuPvZF2XXFkKxH+81cAOLPSIeEYeWRAZv8r1ja0nPyTOYoY5vlWsCvJ5/qExYEDMOmSOBdGz8e8MfOf8s/CR5AeWmHTTPonRz2/KxYB6q+gQBokfy2LlKngemlec8TlEnV9Kv5m50r8PPp/jH/n8Rhkvyfjy9MpD1/nfyjXn2i4QkV3YuWJ5q+Tkakqc+9bTkP4A+P2c7vJ/mtOfI3n/Tfy75CmnX7+H9/8C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="16c677b6-f520-424c-859c-233d39f17e8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="a39d18c3-f30f-4ca8-8df7-05a2e7fcc476"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Create_TOU"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Create_TOU" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Policy_Create_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxwwYX/BtAjMGSuuENA2QHKYvZxR5A0ptCSwZSL7+SCYmQEianBkG0PbW2mtfvKRzjrLUCiPOIReEUS3utfR/sRtM0TTwa44Lifxy/dp9YPs11/fw1GxiEyWersWcFxBTLhAVLd1qmHbNtGqWPzbt0HJD06k3A+e3rt1BziW0dKk3dG2TpZSHZdiWXuQ0ZIgTHlKUAQ8FDkfR1SCUniGqOOnt8y3LMmDenguxCA0D1xPAkKa4jllmnBsHPucJD0dkRpEocniOmfCW/rx3vV7X13ad5TPDajQaRiMwpE/Cyeyr3v5SbYYkplO2XXcRZZRglJInpEhdgZizRIvSGcuJmGdvQJuG2VDQNdjgGjYd+lU3XgKU7D6IdEAy56jG58iswIYwhRwoBu12GLf0rx/r4HbvOEeUT1me8aP15ygBXUHKFjIarzKr2H0c8US52ueAw5jitOBkBT/VmCwQBq79ymFKNgPC5fAlXCvbr224/JBqygB/pi3nxj5XSd04UZ0emQEX/6dn+/3aotyhtIB25zK4YPQMnH7cte+dW+PubOAO7wZL47ZVUth33pLatft5fTysu9l63jQsvkHx/WnTXaVksoyKq9XD94vZ3Xz+cH85QTQFz/MfI0OY49/JxPyRJTfd/i08GZ5Yigdw3IWHcs+DZgea/3zxcTI3u9Hg+sl1ztDkYvh7bNysmtn6x/piFnR/3Tg/RpG9jHDzdj0FemOtr7w/y8ETQ/l6nPjX9Gb5/RrFnmevoy8LjDeXk9FZzzu7YLf5hP2JWy857edwaKwkYVTcPwAW1VKNR9zT+rJfSLwvL8pCktq0dA0XSqO4ACr0ttqlpCUspACRJJTN3K59u9M0I9u23MC2HbPR7QSRJf8Fjm/2g8ivNGjL4ohil9EpUbGUym7n532COAs50ATy2ooVeA5cfwexhwTSYjqULwejHMZMqngUdTzX7vuO17f7lm+ZTi9yO71+z++6jSDo6tpPJq7pdR5NBeSHCu4eKPgQMFkQUDKv5pzLQedClmSJVoVIzfoK1SkU8iDIlRaHluM3DU6yRQqKsJGxpEihvpgvygIZfPtr1RDmpZVwvGC5QKlZvoZvZnn8rCqI9EmIcuAqpQ7IpsKJE6lR5fN23sF+3hV8VCREvW2yuiIneMvk8NHL0Khp2U3MLjHMzYr7bssnIU4AGO/wM45Ls4uXrMhe9OqUlQeHlJV21d8lqi/rxWpVlB31lGTmEt6QymkaI8CF1L3HMfsD1NhBGB86dnasjyLv7If8CjGnI4EEZHL+tHL5gTvHCLi6c8Ty/dl89EJzEFLWTcBGnLJ1U3k1UYzfvb3gECs/af4lf9YsT17adQJrL47MU140BKEztVIHzOMbs4GZhCVSEVm+D34K4FTwQ+OuyDsuQk7TfSHg7SeakrqWjjBmBRVxTy8N+/Jb8hSPCwhfnF7BlBL/fGZv+Jtn9uRqMJJCmCF950v+7lwj5bhg0NXVoOTS0jfyCiqD09me3D8T3Fd871vU7DW75t8U/zCT9ivza8teTY/fh/Z/</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>83B51A3326933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a39d18c3-f30f-4ca8-8df7-05a2e7fcc476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true" id="69fd4170-842f-452d-b5ba-2a3dcb222763"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6f62f720-8990-433e-b87f-e5bfb4b7fa27" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreate_CLGAttestation"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreate_CLGAttestation" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreate_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyo4NyCJClKA9hTROzDT6cuR62zA02CnsQN0vv7YoaFAaadzJKTgne21175k2ScCz1M3ioWAXFLOjH6vZf47cRsQOLZtea7btPym71hBYD+qf4lNbCChR0LT6AtRQJ8JiZlsma7teJbjWm4wcrzIrUdOUPND78E0vkMuFLRyqdmmsZqnTERl2JZZ5CziWFARMTwHEUkSDePLi0h5RrjiZLZP1izLgHl7JmUWIURqCRBIU1IjfI5O0I7PSSKiIZ0yLIscXmMmomW+7l0ul7WlV+P5FLm2bSM7RMonEXR6ZLa/VZsh6bMJX6+7mHFGCU7pb6xJXYKc8cSI0ynPqZzNP4B2kGNraAtWxCKOz45M9BagZPdFpB2SucCWmGGnAruDCeTACBjju37LPPpaB9d7RzlmYsLzudhb/x0lYAtIeQaJJarMKnZfRzxQrvYJkKjPSFoIuoArPSYZJiCMmxwmdHVBhRq+RBhl+42VUD9aTRmQv2nLCdrmqqijA9Xp0SkI+X96tt2vNcp3nBbQrp/NkmF2iY79lwDOJ/FsdDzqwj/HwXDaKilsO69Jbdr9ut4f1s1svW4a3+bdJ1sOUH3gNkf+6fk0OH7oXfg346fCv+2Mn+PHCbiIXeax9xBmWXHT9cnPzs8rx3N7zz2Uh4OXzmDxeIXDi2/HQ+zCj/748TKWD5P75cgPYcDul905Qd0lOm0OBj9vb9hiRa9/wR3mjWFGr475y4/xzbJ+dpvcd8Z85ufnjY7vfTv9vsLZkNn4/sJejE6RSMett5y2c9g1VpIwLB5/AZHVUo9Hv2ecqX5h+bm8aAtNrEnpGmVao4QEJs223qWlJSqUANEkUs1cr2M3qHtnzbrTCD3Pd+xuJ4xd9S/0A+csjINKg9Ys9ih2OZtQHUur7Hp+PidI5pEAlkBuLXhBZiDMTxB7WGKjz+7Ux8GZgBFXKu7EttcL644fN9xePazbzZ5tNwLfcbqnDds7NY0rLq/ZdR5PJOS7Ct7YUfA7IDSjoGVez7lQgy6kKskzXhQydWoLXGNQqIMg11ocuX5QR4LOsxQ0YTTnSZFCLZtlZYGQWD9dCxNRWqkgGc8lTp3yM/wwy/13VUGUT0K1g9ApdUA1FQ6cSHaVz8d5h9t5V/BxkVD9tanqypySNZPdV29Do6dlMzGbxIhwKu6bLX8JcQAAfcIP7ZdmEy9Z0K3o1SmrDg4lK+2qv8+49lwrFoui7GhTS2au4JFSTgcNgRRK915G/AkY2kCgLx07G9Z7kTf2XX6FnLGhxBLmav6McvmFO8cQhL5z9NX3s/rqhWYnpKqbhJU8ZOum6mqiGX96eyER0X7KfKMeS54nb+06gLUVR+WpLhqSsqle6QPm5YPZIFzBUqWIPN8GPwRwKPiucVPkDReppumxkPDxG0NLXcvEhPCCyX7PLA3b8lvylC8ZRG9O72BKiX89s1fiwzP7/vJiqIRwjs2NL/2zs0XLcSFg6qtByaVlrtQVVAVn0y25fyW4rfhnTlB33fofFX83k/Y783vLVk33v4f2fw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>Child_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Child_User_Create_API</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:078517F616933410CB9A23349481F9A8/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A2853F7516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>078517F616933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="7d85ebf5-2378-47de-9c73-bcc3be05c78c" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d4371971-21ff-4a90-a0e0-37d68d88fa6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1de7ab16-bf7b-4512-ae11-1599f01163bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4285855e-3060-462c-b83f-1d458ec03956"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bf51df31-427c-436d-aab8-95c2f091660b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9df4ad07-5eae-44d6-bbbf-fa0607afb8ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxjOo2Gzucd0RxSLNCoqiOvLCSxKQFmUAkF//S1wtLWne86c+9BhV5KZ9WXmV1lZP7Hpe2wXYIyi2A2DsiK+Vv5pNqFFWyxd27Ibq1Y30bbWaba4GsNxrdamSbe2zU2lrGCcICXAsRnErxWWZrga3ajRHYOud+tct954aTCddaU8RxEmronKC10pZ74X4G6x7WsliYJuaGIXdwPTR7gbw+4UqMMu0eyaN0yVt59XlMWG0ZsTx4cuRcEXC0HkefAFhj71k3rS+Wnh7tS1AzNOIvRrTwu/Vn7Zpmn6knIvYWRTLE3TFN2hiI6FXftH5a10M0aWEmzD61owgzBwoem5FzMHpaLYCa0y8OwwcmPH/8Y1QzF07rqGMliDTD34UaE+NijQ/aWnJ5ARNmvYMZmbMx1tUYQCiMozXXmt/Pi7Cl5tjcgM8DaMfPxp/d8goeCEvPCArBq+RXZD9/cev0jX208Eu0oAvQS7JzTKaXIwIcLlSYS2bjZ0MSGfhctF+csZvjEMwf9Skp/UI04Cm/oiM6JrIxz/P/V6rNXVy9z0EvQmWzvFn2yGBhOttYx6X66rBu11BCiFrwWER+UrqHupf60/E/XOq19G+xnsUdVLMuZ6ekpN14O9M9FAf9hsj0M8mZ4YD67aR6AKy4HV8O3jfBcyozZoR3rUV7lRc6gtk1Bp6aw98UtH2bEW+hG5lqDu7SMftweXfmZG65geuoiTW1bnwDQ3K5n32WS5wLjVwkrHXzPNkQa5o4J3avss6Lu2s4alZDXEVHVYx02r2qr3L4wRvn7E9BhDHtcAnYsg8/+XDbojmrF5Xwh5p9iS4xmjN1VRxOQiCOA8tUGq8MAmfzsw4u390dm7cieleaBpPSAKvLeThirYy4CZSbyjCvO5mgkX0Oft0ZwYGiXgrXlVl1IxXYlzTXuXUsew5Pl5I3vJ+iKNVIALY8FRJV2ai7ohqSoIr7JMFTdytlOnaqpoK7FEHIhSdrhYcidGcuZCVmmo0wa7mjaS9XJO5L3z0B+dNobkqYIqC9OjPFU2nKhJfaCvFpDtJcT2MvQPYWk14x+M+ge0A6iX0mRPcFGNfaoaM3Yk6mYhM55lqiL3VQ2nglZEJZektD+fXT5yIfCqYPlSJhlgcs0FNITeiF4v+9hcNAJVB6loF8YDKbXGNyCqRqcl4ZqroZTqkj4b9VRdSSVQyEQp9fCGHTkb2TlBTsv6Btg9FkbQpEUvIN8D/QTPjWPJlHtg488ZyOkOdBuuuQxTe91ORW3VH4RrhbgZAU3ieQ0QQDTIQyP558GQnzfGB7fDumi47YU+cqKSyoSD/emS0W2XG9uT0aIhbvetiexOONNyKMWD7I7bA0VB1oBxNNPSV5QuBu6lOR7MlsiNVpd41NCYpttulPRFMluKodey3per2aCaraBmjCfT2WJyybLRcde+ePH7mH+Ppn1VtMcjhCYYVina7PFGW2wIq/cd4dNWp1GjBGyVB0De2bbkEgLz77srCd91VSLkJcczlYWFIE+BLFclhRc1bdtzmAmU58mMGamKZHkkTefVUvdKa4EXSaVoc7E+rNgevTaAVTjT6lLP1maNan+J1trIM+YxSA/zbcAwtHzQ3rdqakM1Z4ClpFOenCK+lChgZo4PfTobzJs0c9Qsrz/tgBmXTdl9Nnbs9Xlvr/ekKKuHo7MygDc3HjimEIotSpoh6SpoX89bpiozTvegnx02PsxEg9SsMA4NXtJ7Gj3LRBEMrjJsADbDq4u0UwWpsC+BTDUJLU6bpYNXwcgdG1JCSJs80GW3Yel/5VhOsdIzx44C0MBnjklXjklge6wqbZHBjaZwwIvU5mXpqLXmw37nQGvL4b7EV3uUHbtefRy0U2NQXTDntOXstMWio4iOUA22K4fbxDxtXqCG+vuW7Op7MWjWvbM6VLXGzKW8M71DxxQPSyOFCSQuvvSoTpRUeX/t+pcLV2dn/mSanJSZOcDM2dkcF510N3lvUlQknxuX1vqk9ZYhXF3vkc9N8i68tlHqscE+deDb7DVNNjsE49syv4cVsdwjl6MZ/3mOyyWuVdsWqt1DPgziGAVx5S23yme4bkImPdfqkpvzuhaFOtvm221W4Jge3xYkuk4zPRrQrU6nKTa427B3RfEJohAGWzffKx9nr5f1nwFCv4tRYKGodgoT6CBc+YPHPF9lJdDJFBIGGJErq/JPi+FEscHyHCtxLbrdoJudVhO06Z5IxHQTVMqjMB4H4whsYxQ9j8qtp1FZR9A9uCifp/OhApOpAsckJUfzlMQe83IyXwKUkIk7yofeLltvNyjs+gcP5YApP7QSD70cnEORIApff9maCXEhbTVpuph2vo3v87dbKoiO5eYKOA+GR6Sc6Iuhn7tF8m3EDP0Y8c09SCw3H2pIXuPIhVckz58+6JLz5M6VPKQb5rvqZ8GTW+pzRPedrJML74y/v4nISE2GrrdbQY7my/ElOZ2SogStfKCMiHuKoegmNUUwIVPh2Qj3KKDuLqi/GsjvqD/tfJc/40tiJ5jG5DT7hDDlYvkXr7EpwvlrTCGEz/72qfe0JclbjLL4K5ngkUdbjviP7zrYhbkeEU/ITxpG1ke5vvD1sA+JM29fbmDnq3z8Pn/DChgSty5pYWH06PwrB19t/iy8J/mOJSZs2iQx+v5LOe9NrxUTwjAJYkWsFILHflngjM8H1P1Q+s1NMQD/etFk+NsXzVIdTknn8s3KXdf9d+WaW9AFImKF3QLLayUjj3OyeWA/9OdfAL9u0Sz3pxb9HMnbb+LfJQ85/Xwe3v4H</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1ed1186f-c5dd-457e-8f01-8a0cc98d07bb"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="e55544f2-194d-400f-9b20-0f2f08c38bf1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API" id="ff916405-df6f-46b9-a011-a6689d00989e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="ed28c5b3-0007-40cc-849a-38beaea556d6"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="26183098-d0ae-4f26-b4bb-e416676cf6a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8f0ba87-2757-4ec7-ac6d-427210632ea1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="23d09377-9e3c-47e0-92cd-8d7e2ed8d6fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f9a5121-1ba4-4ce7-9098-b2a7278fb180"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="21cf2586-d1ed-4fdc-832a-472a816d6528"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
			
			
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="eaa96ed5-3cca-4156-8a09-c54bea8b60f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Get"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Get" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3764bed9-292d-4b3e-8638-5dd84e1225de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3bb99271-32ca-4459-9ddc-4ca05ee135c6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2013/10/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="db2d7a86-6720-4405-a764-6b8d396ae082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333V1jux5ThoqhYO6kaLhKMqFy8vnyFw4gogjIgyK8/A26NZif77PM9pMw0PT2ruxfNmp/Y3vtsF2CMotgLg6oqvdT+10A0z3HtRp1r20y9ybf5+qrRseuw1aLXbMu2uRaqVVWME6QGOLaD+KXG0kyjTjfqDG/RXJdpdDn6mW63lrXqFEWYhCYuz3Stmu39AHfLY19qSRR0Qxt7uBvYe4S7MeyaQBt0iWfXvmKqvf68oCwPjF43cXzoUhR8dhBEvg+fYbinflIPPj8d3DU9N7DjJEK/znTwS+3X3jRNn9PGcxi5FEvTNEXzFPFxsOf+qL1WrpuRowbr8LIW7SAMPGj7Xm4XoDQUb0KnCnw3jLx4s/8mNEMxdBG6jjJYh0wz+FGjPg4o0f1lpAeQEbbreGMz12AGWqMIBRBVJ4b6Uvvxdx287LUiO8DrMNrjT+v/BgkFJ+SHB+TU8TWzK7q/j/hFuV5/IthVA+gn2DuhYUGTgw0Rro4jtPaygYcJ+RxcLdtfzfCVYQj+l5b8pO5xEtjUF5WRPBfh+P/p132vLlGmtp+gV9sMBHfXbPPnBuwvcl7XLKfZMuwx33wpIdw7X0DdWv1r/ZmoN1792rSd77DPOD3JT89j+riF4WIXQR3kST4Yj9KhstrzDS7ghe0CurTpjxWVbaKDcE4Yhl/uUqHVlyQ3cHuC9F5Zb8eJZybaiUmpPdSDzrH/JMFjzO5yzo4P5lv/CZ3W6ZA/SUKeqcF+8AYGa6+PBAuu7SdHbqkKd4zdviKCyiydthlT5xNjn6s9Lj5R+OUjp/scirze0blMsvh/ztG8ZMf2bSEWk2JNXs8YvWqqKiW5KIKz6YJUFYBL/rZgSAp93Ow8hU9pAeh6D0ii4G/lgQZ2CmAmsrDRxOlUy8Qc9AV3OCUbrQrwl4JmyKmULqSprr/J6cZylOl5pfjJMpeHGsDlZnGjyYY8lQxL1jQQXmyZJq2UbKuZWqrqC6lCAkhydsgdhY+RknmQVTnN5NiFySXL+ZTYe+fBfnhaWbKviZoimkfFVFcNSZf7wFjMINtLyN58sD+ElcVEuNvUP6AtQL2UJmeCXLN2qWZN2KFk2KXNerRpqtLXdJyKepmVUpHT/nSSf9RCFDTR2cuZbIHxpRbQEntDejnvY3vGBZoBUsktN7/LqTO6AtF0Oq2Il1oN5NSQjcmwpxlqKoPSJsmpj1fscLNSNifY0LO+Bbb3jRF1edYLyPPAOMEzd6zYSg+s9lMGNowN9DjPnoepu+ykkr7ov4dLlYQZAl0WBB0QQDQoUiP1F8BAmHKjg8ezHhqse+EebaKKxoTvu1Oe0R2vMXLHwxknrXftseKNG7azoVQfstvGDqgqct6ZjW47xoIypMDLW6P3yRx50SKPh5zOtLwOVzFmyWQuhX7beZsvJu9P2QLq1mhsTmbjPMuGx20n9+O3kfAWmX1NckdDhMYYPlG03ROsjsSJi7ct4dPaoBFXAa4mAKBsXVf2CIGFt+2FhG+GJhPyAk1MFXEmKiZQlCdZFSRdX/c2zBgq02TCDDVVdnxSpvNibviVpShIpFO0PVseFmyPXlrAKYPpTbnn6hPuqT9HS33oW9MYpIfpOmAYWjnob2stdaFWMMBRU1Mgb5FQSVQwsUeHPp29T1s0c9Qdv2/yYNLITHaXjTbu8rxzyZxwl4u7V2dhAX9q3XFMJRSbVXRLNjTQubxvmaZOGoYP99lhtYeZZJGelZtDS5CNnk5PMkkC7xcbtgCb4UUubzVRLvdXQKbZhBan1XyDF8HQG1lyQkib3NFlu2Lpf+VYQbHKI8eOItDBZ47JF47JYH18UjsSg7mWeMCz1BUU+ai3p4M+f6D1+WBXEZ56lBt7fnMUdFLr/WnGnNP2ZqvPZrwqbcSnYL3YNFaxQNs51FF/11Y8YycFraZ/1gaazk08yj/TW3RM8aAyVJlAbsR5j+Kj5EnYL719njea7GQ/NpOTOrHfMXPerI4zPt2O31oUFSlnLm8vT3pvHsLF5TvyeUjejJcxSt0P2IcJfNVeZrLaIhhfl8V3WJWqPfJxtOM/67jC4jn1denaPRRiEMcoiGuvxa5Cw3UTovQ8p0u+nJe11GkybLvR4UC7DQS+J9NNmunRgG7zfLvNS1exd0HxCaIYBmuvOKuQs5eP9Z8Bwn0Xo8BBUf0UJnCDcO0PEYt6VdXAICokDDCyQiKXW1yD7Ygdpg1anAQIYNDmANdpsoIosqDH1KrDMB4FowisYxQ9SuXOg1Q2EPQOHir0dCEqMFEVOCYlOdqnJPaZ55P9HKCEKO6oEL1dttnhKOztDz4qAFP70El89HzYHMoCUfjyy9ZtiEtru0XTpdr5Nr/Pz66lID6OVzjgIhkBkXaiL0R/85rJtxkzzH3G1/AgcbxC1JC6xpEHL0geH33QpeDJjStFSlfMN9fPhoew1OeMbic5Jw/eGH+7ExFJTUTX67UhR/v5+JycTknZgnYhKCMSnmIoukWZCCZEFZ6tcIcC6haC+itBfkP96eSb/RFfEm8CMyZv854Qplou/+I2ZiJc3MZUQvjsb696D0eSusUoi7+yiT65tBWI/3ivg11Y+BHzmPykYeR8tOuLWHfnkDyL8eUFbrEq5Pf5G1bAkIT1yAgLo/vgXwX46vBH463INywxYdMqidH3T6rFbHqp2RCGSRCrUq003M/LEmd8PqDuh9NvYUoB/OtGk+FvbzRzbWCSybW3azdf79+d615JF0ju8sS/xPJSy8jlnBweuHfz+RfA30Z0gxNotsXToNW+jWiO5zmW4W8FfMjk9Tfz75a7mn5+H17/AQ==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="16f91eb6-d036-4044-a104-3416700f4139" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ecbac18-bd7a-4df2-b9d2-c9fb4bc9817c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="dc3fbb0f-7f56-43ad-b37a-35c38bae3724"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="98cfc05d-90a4-4012-b47d-f1f449632e22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="fb4ef185-64fb-4374-8300-43409b18034e"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>testing_+428@uvvutesting.biz</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1990-07-01</DateOfBirth>
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b23cb4e2-2bd7-421f-91f3-9470fd51d912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="cd84f76e-b48f-43aa-8526-34731eaf10da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="c3f3c863-6773-4ad7-883e-f4966c2bcb43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="853b66b1-2855-4d93-8f16-0c0514cd932e"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6a0df690-63bf-4b9c-ae59-c6c2ff9420bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="17df3acf-9f74-4983-9c2c-7ca80c9272ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="3d442766-d852-4dda-8d00-1ca77ae70830">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwumAlqQIBRcUVN27ewmFAlE2G1V//Dho9SU5yvrzflU5PT/fTCz3PPCPDc+kujxCMYifwq4r4UvvHoKy9CcG+0TQBaLCsBRv7NttqdGALdEwDAthhalUFoQQqPooNP36p0STFNEiuQVEa2eo2mW6Te2pzjF6rrmGEsGms8kTWqrnn+qh7dftSSyK/GxjIQV3f8CDqxqC75NVxF2t2jTum2uvzDeXVYfR6iOOwSxDgCUOErgueQOARz8QHnWcTdZeO7RtxEsE3nyZ6qb2dzbLsKWOegsgmaJIkCZIjsI6JHPtX7bVyPwxNxbeC27pn+IHvAMN1LkYJSoXxITCrvGsHkRMfvG9MUwRFlqYbMAcNQLH+rxrx28EV3Q8tfQAZIaOBDgZ1N7aAFoygD2B1tVBear9+VsHbWS0yfGQFkYc+rf8bJOin0A1CaDbQPbI7up9b/CJdr88QdBUfuAlyUjgp2yQ0AETVWQQtJx87CDefiarX8ldzdO8wCP5LSZ6J9zgxbOKLzIiODVH8/9Trfa1uVtaGm8DXqekHKGkfizgNqPF6z9X3vKzavpWfXq4Q3ivfQD1K/bb+3KiPvno7BNZHitWms71eX+68MI20Y1CMW/GMiPXD+tQppsLFzTfaTs9D5rjT2dYYHXpyT2H7WfNopfFE7Aj0eLSxNLbSPPUnyW7qDDpN3XAhKcoztXCbCpCbEVswCtPMT6K8BmhEZGZSH+lpwLnNgOrslYCONuOF5F2SYt1eC/KqMqGzrT1hhgtCO7Oqv2VN8uV3TO9jKOMaweIaZPl/2yQ50YiNx6JXTgoLf54xfFUVpVcXez0e9mw+UwTeVoTxhZ8I9ul8ODl9LiMFfr6SeZEv1AWfifZOXM/nIykz12tXXyuyLKgLNhvwO7GCN0QpX4v6dkgaGz3c0TKpLwXB3C6CPTMMzcEpGxzARNXUbKIphXqU8okmkZurzM7x+qIeVWqqrZjK5ihw6kLKxOzqUZSyw0TfLMLdisvARZqrPNvnqZXUO6gDzVtTgFkcwFEaq/zpKhcOam+9VnNJ42cVwZ6scWxaT9ZD4Jnh3nMP74wPsHHN7K+Lfd9N9It0VHtSv7c895fKnhHn0pBf7Fb7zfpkbOS0AgYTfn/36DQdYxtktt7JxPluOAp05ZCCCT+XBGHO43SRvKr0h3zQF3iV5Z380jsKraBnyhkxpFGlzrn91rZwzltk9EnXoDodajfetGbnlij5dX2U7I8H9bCVp/XR0kxXXMxddiitpy3DoUAeWvOtNIhHuTWYLyv7mZhvwaBu2kPCvXBypLaHfHQpDq5qL+JNa4qKvWNZG2E7Zd225arMIrRcKyxQXQvmp4hsCZChiV2RjuIKb6sCz/ePq6MwV4VOmVRTyeY7VTB4WYoT/nKk4xG9Pg8HqQt2DB/ko830eHorjClmkkBkcwm3lVTpiLxZFmGwXEnykV8Jth0JtiQLcyDy850yynY4X6sBVv6cR/maR1sSeInR+RY3qDArkoun8ZJl+cIXVr7MHdRzvjFbHtk+Q2m8nIRspqKJ5eub4KR6TrSKkuVqNJqM872W9E9HPKsscjlKGb0ipaeQdyYj7XASA9GYhbtdHNZ9EIFYCT1VyS9THR07zt4jh/UmJcxIEbTplbfPVn1D0keRvaRGg4U/Y9pcBSVWMfDqx062qWvLVtg2e74lFgWhR2sy4AOZWzTPZk7Tp8MqG7cya8if9gY9yV1OKDhppGsgW8xHm6VXb1aa6XjskReNYCfhNFv2M1aaz+uMKWgDDYWRs0s6dh5NfZPeGXEr1cl1ywndE0cnJ40NmbXt4WLNUjNsq7PKnN0C3bPbIRgSCyLlpbY1VvrF/mJcQm8KbgP083R4CG/zg3g/WT6MnjvpWOJuhSC+L8sLSBGrMr4VjPjvBKaUOGbDuqp2w5IFoRj6ce21PFWSl26CKY5jdvGVcVtLLapNSpLcYiSalmlSIlmSkkmebHIcKzHcneXcUHyC2At8yyl9lTzudkv9HSDwugj6JowaaZCAA0S1v1gs81VV/AW+fgMfQS3APFGUqU6z3RFbFCtSJNOUmk2J69C8JJJNkWnRteokiKf+NOKtGEYfOSL3gSMuIHBCB5ZEsrxNEb5OUYxTcjbSJHapp9R48mGCqWZUsr0uzXaaBHK80IUlYMILzMSFT+EhvCaIQLdfumEAdJUuJO0fZdm73vTfhvh5754NrGM6pQIq4xEgrij8gvCy92C+DZqi3wd9N88nplNe6Di1ceSAG5KPW787pmyVR7vgqO6QH5qfBR+sEp8DejgyUwc8ev7xHMBsEvON13tJzsbT+SlJ0+RahHbJpSJsnqAIsk0sIUgwISq04AR94mGC+BEXfaD+5Pkh/4gviQ/+Msbfs4dbpnpd/uAhsoSofIgouOXzn75yPrjEeYthHn8l67n4vVIi/uuTBnRBqYfFM/yTBZH5u1xf2HrnB8dZDjDHt8tVyTyLb5oCBNisg4dYEL03/pWBr5x/FD6S/MAS427aJzH8fqdaTqeXmgFAkPixItaugvcT84ozLkLY/a30h5kr93sj8zn6lsxv1fESzy7PqD10nf+t3HCu7QIgPoWcK5aXWo7fpdi5b7+b0G8Avx7SPfFvQ/pjJK9/iP+UvMvp5+/h9V8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00011_US_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Get_GeoProfile</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>765</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
        <Reason Language="en">The policy was not found.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39/Policy/urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="9eefa1a9-efcc-493d-a73f-76683cebfde6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6512c4b0-42ef-4467-b104-ffa33eace57b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		certPath = testProject.getPropertyValue("certsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		certPath = testProject.getPropertyValue("certsPath_Linux");
	}

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
//String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">iscportal1</con:value></con:property><con:property><con:name>tName</con:name><con:value>AccountCreate API</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="e2c4e4ac-425a-4711-bf15-1e0925e0b8a1"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="bf86a2d2-4144-4811-a43f-1013547ebc99"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="4380f443-dbba-469e-a609-36e3fa51657a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="789968d3-8176-4b31-8f47-431e3011758b"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="80d70818-b5a8-4794-8ce0-8d82f461f03e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API" id="476e4efc-f319-4609-aa59-39cb705eb97a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge" id="5112a73a-602e-4296-8f8b-3bf52b94d139"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2013/10/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8b0dbffb-cde9-43ff-b2ab-4d8ab9a34c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1d6adba7-5667-4993-a3d5-c0da8990549f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8uwuWElqRoEFRU3cOPmLRyGRdlkQNBf/w4aPUlOcr6835VOT0/30ws9zzxjw/fYDsAYxYkbBmVZfKn80zR52uI4prbjjXat3uKMWrvO1GscbEKWqUOaa9CVsoxxiuQAJ0aQvFRYmuFqdLPG8Brd6nBch6k/MTyjV8orFGNimqg8kVO57wW4c3X7UknjoBMa2MWdwPAR7iSwowJl3CGaHeOOqfL6fEN5dRi/OkkSdSgKPpkIIs+DTzD0qWfqg86ziTuqawdGksbozaeJXypvZ7Mse8q4pzC2KZamaYrmKaJjYtf+VXkt3Q8jUw6s8LbuGkEYuNDw3ItRgFJQ4oRmGXh2GLuJ439jmqEYujBdQzmsQaYe/KpQvx1c0f3Q0geQMTZq2DGYu7EFslCMAojKy4X8Uvn1swrezmqxEWArjH38af3fIKHghLwwQmYN3yO7o/u5xS/S9fqMYEcOoJdi94QmRZtEBkS4PIuR5eZjF5PmM3H5Wv5yju8dhuB/Kckz9R4ngU19kRnRtRFO/p96va/VzcrK8FL0enaCfr81lePJOdHTlF0sj8amsRifMHi5QnivfAP1KPXb+nOjPvrq7VC0GjI6rM9ZCTsLlV16Q6clyJm/dy6UfzY1MXNlzeSkw7CvGkm0STWKEqeZprfj4Xrh2pvNyZ6sPcqUp7MS3ZIOl8CXdtXqaioOR64UNIbe1K5uq3LspOcmSgMutvoNDfGj8cAK3BaeJBultdHOvfZRrdaXE7Mpy3SoiyViq79pu9NVtT1O5BmdNw8vv2N6H0MR1widr0EW/zcNmheNxHgsusWksMjnmaBXRZa7VbHbBahrg0wWgC0L4wuYCPbh6BzcPp/RApgve0AEZ2UBMtHeiqv5fCRl5mrl6Su51xOURT0bgK1YIhuilK9EfTOkjbUebdkerauCYG4W4Y4bRubgkA0cOFE0JZto8lnZS/lEk+j1VWbnZH1R9goz1ZZcab0XeGUhZWJ29ShKmTPR14tou+QzeJHmCqj3AbOUuo4y0PwVA7mFA/fSWAGHq1xwlO5qpeSSBmYlwZ6sSGxat6dH0Dejne8574wPiHHN7K/Ou76X6hdpr3Slflc99lV5x4lzaQgW2+VuvToY696pBAcTsLt7dBuusQkzW29n4nw7HIW67JzgBMwlQZgDki4aKHJ/CMK+AJQ6cPNLdy80w67Zy6ghi0tV3us3N2f3uMFGn/YMpt1mtuN1c3ZsilJQ1Ufpbu8ozqY3rY5U87TkE/6yxafqqWm4DMwja76RBskotwZztbSbifkGDqqmPaS8C9+LldYQxJez4yn2Ilk3p/i8cy1rLWymda9leQq3iCzPis64qoXzQ0w3BcSx1PZ8GiUlYCsCAP39ci/MFaFdJNWUs/lWEQzQk5IUXPZsMmJXx+Hg5MEtB8J8tJ7uD2+FMcVMEqhsLpG2kkptEZhFEQbqUurtwVKw7ViwpZ4whyKYb+VRtiX5Wg6I8uc89q55tCUBSJwOmvygxC1pPpkmar0OzoGwDHq8oxzztdn06dYRSWN1EtUzBU+sQF+HB8V342WcqsvRaDLOd1raP+zJrLJodXTi9JJ0OkTAnYw05yCGojGLttskqgYwhokc+YqcX6Y63rfdnU8Pqw1GmNEibLFLf5ct+4akj2JbZUaDRTDjWnwJp9Z54Ff37Wxd1dRm1DK7gSWez5Qer+gQhD1+0TiaOcsenGU2bmbWEBx2BjvJPV4489JI12C2mI/Wql9tlBqn8dinLxpVn0TTTO1ndWk+r3KmoA00HMXuNm3beTwNTHZrJM2TTq+abuQdeDY9aPWIW9k+KdbsZEYtZVaa1zdQ9+1WBIfUgjoBqWWN5f55dzEukT+FtwH6eTo8hLf5Qb2fLB9Gz510qKRbEUzuy+ICksVyj9wKRvJ3AlNIXLNmXVU7UcGCcIKCpPJanCrISyclFMc1O+TKuK3FXksUW2xbbLNtiamLEl2nmR4N6AbPt8RG985ybig+QeyGgeUWvgoed7ul/g4Q+h2MAhPFtVOYQgfhyl8sFvkqy8GCXL9hgJEWEp7ICSzL0IDpNntsj23U2zxNSz2elqQG3aIZUClPwmQaTGNgJSj+wBEZ+gNHXCDoRi4qiGRxm2JyneKEpORonNLEY55OxlOAUkI144Ltddh6u0Fh1488VACm/NBMPfQUOdE1QRS+/bI1A+KrdCFp/8hq93rTfxvi5717NoiO6RYKuIhHQKSi6AvCS9+D+T5o7n3Qd/MgNd3iQiepTWIX3pB83PrdMUWrPNqFRHWH/ND8LPhglfoc0MOReXLho+cfzwHCJgnfeL2X5Gg8HZ/S0ym9FqFVcKmYmKcYim5SKoIpIURnLTyggHqYoH7ERR+oP3l+yD/iSxMnUBPyPfukZcrX5Q8eIirCxUNEJi2f//SV88ElyVuC8uQrWdcj75UC8V+fNLADCz0inpGfLIzN3+X6wtY7PyTOYoC5gV2sCuZ5/qYpYEjMumSIhfF7418Z+Mr5R+EjyQ8sCemmXZqg73fKxXR6qRgQhmmQyGLlKng/Ma84k3OEOr+V/jBz5X5vZD7H35L5jTJWyezyjcpD1/3fyjX32i4QkVPYvWJ5qeTkXUqcB/a7Cf0G8Oshzfx1SH+M5PUP8Z+Sdzn9/D28/gs=</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8sAggtWkio2FRWN4MrNWzgMi7LJsOmvfweNHpOTnC/vd6XT09P99ELPM8/I8L1mj0MIxokbBlVZfKn9s6ObVKezazVIyFINhmyDRrfFMA2GYRlmZ+1Yq8XWqjJCKZQDlBhB8lJrkhTdINsNil2QnR5N95jmE9Ol9Vp1BWOETWOVJ7JWLXwvQL2L25daGge90EAu6gWGD1EvAT2NUyY9rNkzbphqr89XlBeH8auTJFGPIMCTCQH0PPAEQp94Jj7oPJuop7l2YCRpDN99muil9n42z/OnnH4KY5tokiRJkCyBdUzk2r9qr5XbYWjKgRVe14IRhIELDM89GyUoBSZOaFY5zw5jN3H8b0xTBEWWphuwAA1AMcGvGvHbwQXdDy19ABkjo4Ecg7oZU6EFYxgAWF2q8kvt188qeD27iI0AWWHso0/r/wYJBhn0wgiaDXSL7Ibu5xa/SNfrMwQ9OQBeitwMTss2iQwAUfUthpZbTFyEm89E1Uv5qwW6dRgE/6Ukz8QjTgyb+CIzomtDlPw/9Xqs1dXKyvBS+EquYqe+ynZTYspNDGE8L4w1suP8uLdfLhAela+g7qV+X39u1HtfvR9S+fNYP+/71hkO9vT2kOh+2NlClW4XzHQy49k34yREwmmmuXKsJ/N2fGzyszFxXLfDeVPlVWuxnSYsE9sgqbiSeETUUY9zyG6GEU2Qe6E/G0yCtXtaa3Hbm4yccHfWgLskO0OVifaplq11lZkBKtjb0flEtDyTbCNnZFROZ1/S9CSjQZ3huakyy5cvv2N6jKGMawxPlyDL/5sWyYpGYtwXQjkpLPx5JvBVkWWhLgoCBwWby2Wes2V+cuamvH04Ogd3wOYkz82XfU7kTorK5aK9FVfz+VjKzdXK01dyv88rKpMPua1YwRuiVKxEfTMijbUebZt9Utd43tyo4Y4eRebwkA8dMFUWSj5dyCdlLxXThUSuLzK7wOuzsleo2WJJV9Z7nlVUKRfzi0dRyp2pvlaj7ZLNwVmaKxwz4KilJDjKcOGvKECrDthLE4U7XOS8owirlVJIC+6twtvTFY5tIfT1CPhmtPM958H4EBtfmIPVaTfwUv0s7RVBGgjacaDJO1qcSyNO3S5369XBWPezChhOud3No9tyjU2Y23o3F+fb0TjUZScDU24u8fycw+kiOUUejLhwwHMKw7nFWdjz7VAw+zkxaqJKnfUG7c3JPW6QMSA9g+p2qe1k3X47tkUpqOvjdLd3FGfTn9XHmpkt2YQ9b1FWz9qGS4EisuYbaZiMC2s41yq7N7HYgGHdtEeEd2b7sdIZcfH55HiKrSbr9gyddq5lrfnNjPE6lqfQamR5VnRC9UU4P8Rkm4d0k9iesnFS4WyF57jBfrnn5wrfLZNqyvl8q/AG15eSlDvvm8m4uTqOhpkHtjQXFuP1bH94L4wp5hJP5HMJt5VU6YqcWRZhqC2l/p5b8rYd87bU5+dA5OZbeZxvcb6WQ6z8OY/9Sx5tieckWufa7LBCL0k2mSUaw3CngF8GfdZRjsXabPtk5wiliTaNmFxBUyvQ1+FB8d14GafacjyeTordIh0c9nhWWaQ2zmi9ImWHiHOn44VzEEPReIu22ySqByAGiRz5ilycZzrad92dT47qLYp/I0XQaS79Xb4cGJI+jm2NGg/V4I3usBWUWqehX99383V9obWjjikElng6EXq8IkMu7LNq62gWzebBWeaTdm6NuMPOaE4Lj+VPrDTWFyBX5+O15tdblVY2mfjkeUEw02iWa4OckebzOm3yi+ECRbG7Tbt2Ec8Cs7k1knamk6u2G3kHtpkeFkxEr2wfF+stM6OO8laZMxug+3YnAiNCJTJO6lgTeXDanY1z5M/AdYB+ng534XV+EI+T5cPouZEODXcrBMltWV5Asljt41vBSP5OYEqJazasi2ovKlkQSmCQ1F7LUyV56aWY4rhmD18Z17XY74hip9kVu11OohhRIhmS6pMc2WLZjtgSbizniuITRCEMLLf0VfK46y31d4DA7yEYmDBuZGEKHIhqf7FY5qsqByq+fsMAwUWIeSJFdlu0yIptVqCojtBvMgLVpwVRovoU3e4Lteo0TGbBLOasBMYfOCJFfuCIKgRu5MKSSJa3KcLXKUpwSo5GliYe9ZQZTwFMMdWMS7bXazLdFoFcP/JgCZjwQzP14FPkRJcEEej622wYAF2kqrT4R9aEy03/bYif927ZwDqmWyqgMh4e4orCLwgvfQvm+6Dpx6Bv5rnUdMsLHac2iV1wRfJx63fHlK1ybxcc1Q3yXfOz4INV4nNAd0dm5oJ7z9+fA5hNYr7xeivJ0Xg6PqVZll6K0Cm5VIzNExRBtgkNghQTotMiPMCAuJsgfsRF76g/eb7LP+JLEyfQEvw9+7hlqpflDx4iGkTlQ0TGLV/89JXzwSXOWwKL5CuZ4OH3Son4r08a0AOlHha/4Z88jM3f5frC1oMfHGc5wNzALlcl8zx90xQgxGZdPMTC+NH4Vwa+cv5ReE/yHUuCu2mXJvD7nWo5nV5qBgBhGiSyWLsIHifmBWdyimDvt9IfZi7c753MF+hbMr9RJhqeXb5Ru+u6/1u54V7aBUB8CrkXLC+1Ar9LsfPAfpjQ7wC/HtId4W9D+mMkr3+I/5Q85PTz9/D6Lw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="bb7e7d8b-e8e3-4dc9-9073-6b2a9c8ac469"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="979f1903-1ef6-4a21-b7ed-3c829bec85dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API" id="9d27ef5d-226b-4710-91da-6a452b364641">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="ff86e280-8efc-438f-a0f8-c455f69b9e1e"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="355f30c0-6988-4a19-b98d-00eb17001332"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7b43b087-c6b1-41fa-9958-b3af8215ddd8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="3217055c-57f5-4f6b-8986-5c97d330161d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b00abc6-17e9-4793-8beb-c38a75a236da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a0a81299-e499-4d96-8fe3-ee9125bfe1ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afad6394-18c1-41f0-834e-d5fd2a0de724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4ed4c6fb-f157-4d76-90cf-c2111034e717">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7065e381-9693-46c0-afa3-f3f540ed93ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="02e196fd-6a33-458f-a779-20bdcb8f65f6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a1fa38b-4b5a-43bc-b4ac-c8b2cd422c62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="78a51972-e97c-4fcc-a444-ae8c86a62bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="45db53d0-e287-4b60-a809-f9e6735e4f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="517a95b3-ce83-437a-827d-5e49fdb10fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6a93b9aa-b6dc-4adf-983f-0d78466e7a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="96fdea5e-3165-42ad-86cd-31f66cb06840">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tP.setPropertyValue("audience",URLEncoder.encode(callTS.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="94b59c95-ff72-47e3-9fd0-fd8d7afd897f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="iscportal1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="iscportal1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			//tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
			
			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
	} 
	else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>audience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>3004</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c69faf98-46ed-4668-b938-687cf15c1ad7</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_c69faf98-46ed-4668-b938-687cf15c1ad7" IssueInstant="2013-12-28T13:26:14.594Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_c69faf98-46ed-4668-b938-687cf15c1ad7">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>BK9Jon+e4FIC3b4U/V+L6RVLq/U=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
RuEeuGzxCvliXqAuMvjGJgVhhjbKXanle778yA/t1TZdX1HmdQCFUez/7tqtje46p7ar77e5Be5W
8cdh1CALOz64+aXJRZT/Qv5mwHwJg9CPQ4HSA3qAc5UwfenQ2wM7kqLzoarwTd8OnQqGOaI773wA
pccxKXS+D7+JoUrXokI=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_AAB763F847F3F28214DA6BDFD8C6099C" NotOnOrAfter="2013-12-28T16:26:14.594Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/iscportal1"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-12-28T13:26:04.594Z" NotOnOrAfter="2013-12-28T19:26:14.594Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:iscportalcs1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:iscportal1</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_c69faf98-46ed-4668-b938-687cf15c1ad7</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-12-28T13:26:14.594Z" SessionIndex="_c69faf98-46ed-4668-b938-687cf15c1ad7"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVbbcto6FH3vV3jcxwwYX/BtAjMGSuuENA2QHKYvZxR5A0ptCSwZSL7+SCYmQEianBkG0PbW2mtfvKRzjrLUCiPOIReEUS3utfR/sRtM0TTwa44Lifxy/dp9YPs11/fw1GxiEyWersWcFxBTLhAVLd1qmHbNtGqWPzbt0HJD06k3A+e3rt1BziW0dKk3dG2TpZSHZdiWXuQ0ZIgTHlKUAQ8FDkfR1SCUniGqOOnt8y3LMmDenguxCA0D1xPAkKa4jllmnBsHPucJD0dkRpEocniOmfCW/rx3vV7X13ad5TPDajQaRiMwpE/Cyeyr3v5SbYYkplO2XXcRZZRglJInpEhdgZizRIvSGcuJmGdvQJuG2VDQNdjgGjYd+lU3XgKU7D6IdEAy56jG58iswIYwhRwoBu12GLf0rx/r4HbvOEeUT1me8aP15ygBXUHKFjIarzKr2H0c8US52ueAw5jitOBkBT/VmCwQBq79ymFKNgPC5fAlXCvbr224/JBqygB/pi3nxj5XSd04UZ0emQEX/6dn+/3aotyhtIB25zK4YPQMnH7cte+dW+PubOAO7wZL47ZVUth33pLatft5fTysu9l63jQsvkHx/WnTXaVksoyKq9XD94vZ3Xz+cH85QTQFz/MfI0OY49/JxPyRJTfd/i08GZ5Yigdw3IWHcs+DZgea/3zxcTI3u9Hg+sl1ztDkYvh7bNysmtn6x/piFnR/3Tg/RpG9jHDzdj0FemOtr7w/y8ETQ/l6nPjX9Gb5/RrFnmevoy8LjDeXk9FZzzu7YLf5hP2JWy857edwaKwkYVTcPwAW1VKNR9zT+rJfSLwvL8pCktq0dA0XSqO4ACr0ttqlpCUspACRJJTN3K59u9M0I9u23MC2HbPR7QSRJf8Fjm/2g8ivNGjL4ohil9EpUbGUym7n532COAs50ATy2ooVeA5cfwexhwTSYjqULwejHMZMqngUdTzX7vuO17f7lm+ZTi9yO71+z++6jSDo6tpPJq7pdR5NBeSHCu4eKPgQMFkQUDKv5pzLQedClmSJVoVIzfoK1SkU8iDIlRaHluM3DU6yRQqKsJGxpEihvpgvygIZfPtr1RDmpZVwvGC5QKlZvoZvZnn8rCqI9EmIcuAqpQ7IpsKJE6lR5fN23sF+3hV8VCREvW2yuiIneMvk8NHL0Khp2U3MLjHMzYr7bssnIU4AGO/wM45Ls4uXrMhe9OqUlQeHlJV21d8lqi/rxWpVlB31lGTmEt6QymkaI8CF1L3HMfsD1NhBGB86dnasjyLv7If8CjGnI4EEZHL+tHL5gTvHCLi6c8Ty/dl89EJzEFLWTcBGnLJ1U3k1UYzfvb3gECs/af4lf9YsT17adQJrL47MU140BKEztVIHzOMbs4GZhCVSEVm+D34K4FTwQ+OuyDsuQk7TfSHg7SeakrqWjjBmBRVxTy8N+/Jb8hSPCwhfnF7BlBL/fGZv+Jtn9uRqMJJCmCF950v+7lwj5bhg0NXVoOTS0jfyCiqD09me3D8T3Fd871vU7DW75t8U/zCT9ivza8teTY/fh/Z/</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2013-12-28T13:26:04.594Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2013-12-28T19:26:14.594Z</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2013-12-28T13:26:04.594Z</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_c69faf98-46ed-4668-b938-687cf15c1ad7</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true" id="e6d93400-ec29-487d-845d-0269783271b0"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation" id="36a03322-c94f-4c44-9b0d-8ed3193a4a59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("UserName").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true" id="a9371951-a0d7-4374-b477-39820ba727c5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34eab9ef-094b-4ea5-b816-16bad8f3019a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="ab184205-d3f8-4833-a390-e2590f4dff15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get"><con:settings/><con:config service="Users" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" sslKeystore="iscportalcs1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3475aa35-aee4-44f3-bc56-b7358d0abca8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="621e6c79-25ba-4fc8-86b5-0fa7a2e3401f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeUserGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
		expectHTTPconnection = "close";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
		expectHTTPconnection = "close";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS")|| (RequestorType == "SPLCS"))
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
            
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
  /*      
         def a = myXML.DisplayImage.DisplayImageURL;
         log.info a ;
		//def b = a.toURL();
		//log.info b;
		 log.info "Response_DisplayImageURL: "+a.getPath();
         assert  a.matches("https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=[0-9,A-F]*");
        log.info "here";
*/
        
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if ((RequestorType == "CS")|| (RequestorType == "SPLCS"))
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if ((RequestorType == "CS")|| (RequestorType == "SPLCS"))
          {
             this.log.info "Getting CHILD CLG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self")|| (RequestorType == "SPLCS")|| (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E58B8BA0CE0401F0A05991749:27024A17"</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>3004</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>81B5DB8226933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:81B5DB8226933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>SAU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>ResponseTypeUserGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxwwYX/BtAjMGSuuENA2QHKYvZxR5A0ptCSwZSL7+SCYmQEianBkG0PbW2mtfvKRzjrLUCiPOIReEUS3utfR/sRtM0TTwa44Lifxy/dp9YPs11/fw1GxiEyWersWcFxBTLhAVLd1qmHbNtGqWPzbt0HJD06k3A+e3rt1BziW0dKk3dG2TpZSHZdiWXuQ0ZIgTHlKUAQ8FDkfR1SCUniGqOOnt8y3LMmDenguxCA0D1xPAkKa4jllmnBsHPucJD0dkRpEocniOmfCW/rx3vV7X13ad5TPDajQaRiMwpE/Cyeyr3v5SbYYkplO2XXcRZZRglJInpEhdgZizRIvSGcuJmGdvQJuG2VDQNdjgGjYd+lU3XgKU7D6IdEAy56jG58iswIYwhRwoBu12GLf0rx/r4HbvOEeUT1me8aP15ygBXUHKFjIarzKr2H0c8US52ueAw5jitOBkBT/VmCwQBq79ymFKNgPC5fAlXCvbr224/JBqygB/pi3nxj5XSd04UZ0emQEX/6dn+/3aotyhtIB25zK4YPQMnH7cte+dW+PubOAO7wZL47ZVUth33pLatft5fTysu9l63jQsvkHx/WnTXaVksoyKq9XD94vZ3Xz+cH85QTQFz/MfI0OY49/JxPyRJTfd/i08GZ5Yigdw3IWHcs+DZgea/3zxcTI3u9Hg+sl1ztDkYvh7bNysmtn6x/piFnR/3Tg/RpG9jHDzdj0FemOtr7w/y8ETQ/l6nPjX9Gb5/RrFnmevoy8LjDeXk9FZzzu7YLf5hP2JWy857edwaKwkYVTcPwAW1VKNR9zT+rJfSLwvL8pCktq0dA0XSqO4ACr0ttqlpCUspACRJJTN3K59u9M0I9u23MC2HbPR7QSRJf8Fjm/2g8ivNGjL4ohil9EpUbGUym7n532COAs50ATy2ooVeA5cfwexhwTSYjqULwejHMZMqngUdTzX7vuO17f7lm+ZTi9yO71+z++6jSDo6tpPJq7pdR5NBeSHCu4eKPgQMFkQUDKv5pzLQedClmSJVoVIzfoK1SkU8iDIlRaHluM3DU6yRQqKsJGxpEihvpgvygIZfPtr1RDmpZVwvGC5QKlZvoZvZnn8rCqI9EmIcuAqpQ7IpsKJE6lR5fN23sF+3hV8VCREvW2yuiIneMvk8NHL0Khp2U3MLjHMzYr7bssnIU4AGO/wM45Ls4uXrMhe9OqUlQeHlJV21d8lqi/rxWpVlB31lGTmEt6QymkaI8CF1L3HMfsD1NhBGB86dnasjyLv7If8CjGnI4EEZHL+tHL5gTvHCLi6c8Ty/dl89EJzEFLWTcBGnLJ1U3k1UYzfvb3gECs/af4lf9YsT17adQJrL47MU140BKEztVIHzOMbs4GZhCVSEVm+D34K4FTwQ+OuyDsuQk7TfSHg7SeakrqWjjBmBRVxTy8N+/Jb8hSPCwhfnF7BlBL/fGZv+Jtn9uRqMJJCmCF950v+7lwj5bhg0NXVoOTS0jfyCiqD09me3D8T3Fd871vU7DW75t8U/zCT9ivza8teTY/fh/Z/</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E603BD56DDEEF0CEE0401F0A07990E43</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F850C559FACD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:standard" UserID="urn:dece:userid:org:dece:81B5DB8226933410CB9A23349481F9A8" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>usercreate20131228_0826101388237170571</GivenName>
      <SurName>usercreate20131228_0826101388237170571</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=91B5EB8226933410CB9A23349481F9A8</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>CH</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">de-CH</Language>
      <Language primary="false">en</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">1995-01-02</DateOfBirth>
   <Credentials>
      <Username>usercreate20131228_0826101388237170571</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:iscportal1" ModificationDate="2013-12-28T13:26:12.721Z" CreatedBy="urn:dece:org:org:dece:iscportal1" CreationDate="2013-12-28T13:26:10.873Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:iscportal1" ModificationDate="2013-12-28T13:26:10.878Z">
            <Value>urn:dece:type:status:blocked:tou</Value>
            <Description>User Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</User>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="b842e70d-a8b1-44af-91c2-44516599f032"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Create_MUC"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Create_MUC" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Policy_Create_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxwwYX/BtAjMGSuuENA2QHKYvZxR5A0ptCSwZSL7+SCYmQEianBkG0PbW2mtfvKRzjrLUCiPOIReEUS3utfR/sRtM0TTwa44Lifxy/dp9YPs11/fw1GxiEyWersWcFxBTLhAVLd1qmHbNtGqWPzbt0HJD06k3A+e3rt1BziW0dKk3dG2TpZSHZdiWXuQ0ZIgTHlKUAQ8FDkfR1SCUniGqOOnt8y3LMmDenguxCA0D1xPAkKa4jllmnBsHPucJD0dkRpEocniOmfCW/rx3vV7X13ad5TPDajQaRiMwpE/Cyeyr3v5SbYYkplO2XXcRZZRglJInpEhdgZizRIvSGcuJmGdvQJuG2VDQNdjgGjYd+lU3XgKU7D6IdEAy56jG58iswIYwhRwoBu12GLf0rx/r4HbvOEeUT1me8aP15ygBXUHKFjIarzKr2H0c8US52ueAw5jitOBkBT/VmCwQBq79ymFKNgPC5fAlXCvbr224/JBqygB/pi3nxj5XSd04UZ0emQEX/6dn+/3aotyhtIB25zK4YPQMnH7cte+dW+PubOAO7wZL47ZVUth33pLatft5fTysu9l63jQsvkHx/WnTXaVksoyKq9XD94vZ3Xz+cH85QTQFz/MfI0OY49/JxPyRJTfd/i08GZ5Yigdw3IWHcs+DZgea/3zxcTI3u9Hg+sl1ztDkYvh7bNysmtn6x/piFnR/3Tg/RpG9jHDzdj0FemOtr7w/y8ETQ/l6nPjX9Gb5/RrFnmevoy8LjDeXk9FZzzu7YLf5hP2JWy857edwaKwkYVTcPwAW1VKNR9zT+rJfSLwvL8pCktq0dA0XSqO4ACr0ttqlpCUspACRJJTN3K59u9M0I9u23MC2HbPR7QSRJf8Fjm/2g8ivNGjL4ohil9EpUbGUym7n532COAs50ATy2ooVeA5cfwexhwTSYjqULwejHMZMqngUdTzX7vuO17f7lm+ZTi9yO71+z++6jSDo6tpPJq7pdR5NBeSHCu4eKPgQMFkQUDKv5pzLQedClmSJVoVIzfoK1SkU8iDIlRaHluM3DU6yRQqKsJGxpEihvpgvygIZfPtr1RDmpZVwvGC5QKlZvoZvZnn8rCqI9EmIcuAqpQ7IpsKJE6lR5fN23sF+3hV8VCREvW2yuiIneMvk8NHL0Khp2U3MLjHMzYr7bssnIU4AGO/wM45Ls4uXrMhe9OqUlQeHlJV21d8lqi/rxWpVlB31lGTmEt6QymkaI8CF1L3HMfsD1NhBGB86dnasjyLv7If8CjGnI4EEZHL+tHL5gTvHCLi6c8Ty/dl89EJzEFLWTcBGnLJ1U3k1UYzfvb3gECs/af4lf9YsT17adQJrL47MU140BKEztVIHzOMbs4GZhCVSEVm+D34K4FTwQ+OuyDsuQk7TfSHg7SeakrqWjjBmBRVxTy8N+/Jb8hSPCwhfnF7BlBL/fGZv+Jtn9uRqMJJCmCF950v+7lwj5bhg0NXVoOTS0jfyCiqD09me3D8T3Fd871vU7DW75t8U/zCT9ivza8teTY/fh/Z/</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>83B51A3326933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreate_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreate_ULC"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreate_ULC" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreate_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzOmB0d0QhoKioDI4vJxBKRJmkQNCvP4W2bu3dvW+f+6SVlZW5ciBr1SsyfY9uA4RgnLhhUJaFt8o/LRquOabeqrVY2KyxNM3VOBtaNYtpbWjKXrNNq1kpywilUA5QYgbJW4UmKaZGNmt0w6DoNs21SfqFbFCrSnkGY4RNY5UXslLOfS9A7Yvbt0oaB+3QRC5qB6YPUTux2jpQhm2s2TZvmCrvr1eUF4fx+zZJojZBWC8YEvQ868UKfeKVeNJ5tVFbd53ATNIYfvi00Vvl42yWZS8Z8xLGDkGTJEmQHIF1bOQ6vyrvpdthaMvBJryuO2YQBq5leu7ZLEApMNmGdhl4Thi7ydb/xjRFUGRhugZznD6KDX5ViN8OLuh+aOkJZIzMGtqa1M2YBjcwhoEFy1NNfqv8+lkFr2eN2AzQJox99Gn93yDB4Ai9MIJ2Dd0iu6H7ucUv0vX+Cq22HFheitwjHBVtEpkWROVJDDduPnQRbj4blS/lL+fo1mHQ+i8leSUecWLYxBeZEVwHouT/qddjra5WZqaXwnc1FrhcZSxU1xxDyHtLoaUp41jP5su3C4RH5Suoe6k/1p8b9d5XH4e6LqsPIzmlFcI5S1yLGXDOStq3Zrpf7fEJT/fH+czprrSlRpGMv/Z6+aRbDXV90pUMjVn1grlsJvN0vHazUpOOBYXhlRgIBn0YZEgd+QfeHs+0eViNXGU8t4j0vDn3TXkYLB0tCNXG2WT0+mgvOZOtK9H9wzRTpozUlUotKdO0/ihr5Q3KhJE485Zvv2N6jKGIawBPlyCL/4s6yQlmYt4XnWJSbPDnmcB3RZY7VaHTAbDjgEzmgSPzwzMY8c7+sN27XS4jeaBOJSCAk6KBTHCWwkxVB2Jmz2beaiZLEq9obNYDS6GENwQxnwmrRZ8056toSUvkSud5e6GFa6Yf2b191ttaI8VQspEhn5SdmI8MkZxfZE6O12dlp1BjY8qU5jueUzQxE7KLR0HMtqPVXIuWUy6zzqKqALYLqKnY2So9w59RFqNtrZ04VMD+Iue3Smc2U3LRAJMS74xmODajI60iy7ejte9tH4z3sHHD7s5O666Xrs7iTumI3Y5+6OrymhFUsQ+05XQ9n+3NuXQsWb0RWN88unXXXISZs2plgrrsD8KVvD1aI6CKPK8CnC4SKHK3D8IuDxQWuPm5s+MbYceWMqJPo1KV87qNxck9LJDZJT2TarWo5XDemBwaghhUV4N0vdsq24U0rg50+zjlEu68RMfqsWG6lJVHG3Uh9pJBvumpemk9EfKF1avaTp/wzpwUK80+iM+nrac4WjJvjNFp7W42c34xZr3mxlMYLdp4m+iEqkao7mOywUOGJpan4yApAUfhAejupjteVfhWkVRbztSlwptAEpMUnHd0MqBnh37v6FlLBoT5YD7e7T8KYwuZyBOZKuK2EkstAdhFEXr6VJR2YMo7Tsw7osSrlgDUpTzIljhf0x5W/pxH6ZJHR+SByKxAg+uVmCnJJeNEZ1lwCvhpIHFb5ZDP7YZPNg9QHOqjiM0UNNoEq3m4V3w3nsapPh0MRsN8baTd/Q7Pqg2pD47MqiQe9xFwRwNjuxdCwZxEy2USVQMrthI58hU5P49XaNdy1z7Zr9YpfkIKVpOe+uts2jXF1SB2dGrQ04IJ0+RKKN2cen5118rmVUNvRE27E2yE04lYxTMyBKHEafWDndP0fjvNho1s0wf7tUmPco/jT5w4WBlWpqmDOR439VL9OBz65Nkg2FE0zvRuxoqqWmVs3ugZKIrdZdpy8ngc2PTSTBrHFTlruJG35+h0b7ARM3N8XKzJ0Y6ayqSksgtr5TvNyOoTGnEEYnMzlLun9dk8R/7Yug7Qz9PhLrzOD+JxsjyNnhvp0HG3Qiu5LYsLSBbKEr4VzOTvBKaQuHZtc1FtRwULQgkMksp7caogL+0UUxzXbuMr47oW6QZgGyQrUvWCT3EiyZKURAKyznEkz/M3lnNF8QliJww2buGr4HHXW+rvAC2/jWBgw7h2DFNrC1HlLxaLfJXlQMPXbxggaISYJ1IdUaBovikAukmzAiuyDUkkKYHnmgILBLpSHoXJOBjHYJPA+Jkj1p84ogYtN3JhQSSL2xTh6xQlOCUH85gmHvVyNF8CmGKqGRdsr02zrTqBXD/yYAGY8EM79eBLtI0uCSLQ9ZeumRa6SDXR+EfWO5eb/tsQP+/dsoF1bLdQQEU8PMQVhX8Q3la7fgvm+6Bbj0HfzIPUdosLHac2iV3riuR563fHFK1ybxcc1Q3yXfOz4Mkq8TmguyP76Fr3nr8/BzCbxHzj/VaSg/lyeEmPx/RShGbBpWJsnqAIskno0EoxIToZ4R4GxN0E8SMuekf9yfNd/owvTbaBnuDv2cctU74sf/AQ0SEqHiIybvn8p6+cJ5c4bwnMk69kHQ+/VwrEf33SWG2r0MPiCf7Jwtj+Xa4vbD34wXEWA8wNnGJVMM/TN01hhdisi4dYGD8a/8rAV86fhfck37EkuJvWaQK/3ykX0+mtYlpWmAaJLFQugseJecGZnCLY/q30h5kL9/sg8zn6lswvlKGOZ5dvVu667v9WrrmXdrEgPoXcC5a3So7fpdh54DxM6A+AXw5pUuz8bUg/R/L+h/hPyUNOP38P7/8C</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true" id="1a42b403-fac9-4e9b-beba-08428b612d51"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyo4NyCJClKA9hTROzDT6cuR62zA02CnsQN0vv7YoaFAaadzJKTgne21175k2ScCz1M3ioWAXFLOjH6vZf47cRsQOLZtea7btPym71hBYD+qf4lNbCChR0LT6AtRQJ8JiZlsma7teJbjWm4wcrzIrUdOUPND78E0vkMuFLRyqdmmsZqnTERl2JZZ5CziWFARMTwHEUkSDePLi0h5RrjiZLZP1izLgHl7JmUWIURqCRBIU1IjfI5O0I7PSSKiIZ0yLIscXmMmomW+7l0ul7WlV+P5FLm2bSM7RMonEXR6ZLa/VZsh6bMJX6+7mHFGCU7pb6xJXYKc8cSI0ynPqZzNP4B2kGNraAtWxCKOz45M9BagZPdFpB2SucCWmGGnAruDCeTACBjju37LPPpaB9d7RzlmYsLzudhb/x0lYAtIeQaJJarMKnZfRzxQrvYJkKjPSFoIuoArPSYZJiCMmxwmdHVBhRq+RBhl+42VUD9aTRmQv2nLCdrmqqijA9Xp0SkI+X96tt2vNcp3nBbQrp/NkmF2iY79lwDOJ/FsdDzqwj/HwXDaKilsO69Jbdr9ut4f1s1svW4a3+bdJ1sOUH3gNkf+6fk0OH7oXfg346fCv+2Mn+PHCbiIXeax9xBmWXHT9cnPzs8rx3N7zz2Uh4OXzmDxeIXDi2/HQ+zCj/748TKWD5P75cgPYcDul905Qd0lOm0OBj9vb9hiRa9/wR3mjWFGr475y4/xzbJ+dpvcd8Z85ufnjY7vfTv9vsLZkNn4/sJejE6RSMett5y2c9g1VpIwLB5/AZHVUo9Hv2ecqX5h+bm8aAtNrEnpGmVao4QEJs223qWlJSqUANEkUs1cr2M3qHtnzbrTCD3Pd+xuJ4xd9S/0A+csjINKg9Ys9ih2OZtQHUur7Hp+PidI5pEAlkBuLXhBZiDMTxB7WGKjz+7Ux8GZgBFXKu7EttcL644fN9xePazbzZ5tNwLfcbqnDds7NY0rLq/ZdR5PJOS7Ct7YUfA7IDSjoGVez7lQgy6kKskzXhQydWoLXGNQqIMg11ocuX5QR4LOsxQ0YTTnSZFCLZtlZYGQWD9dCxNRWqkgGc8lTp3yM/wwy/13VUGUT0K1g9ApdUA1FQ6cSHaVz8d5h9t5V/BxkVD9tanqypySNZPdV29Do6dlMzGbxIhwKu6bLX8JcQAAfcIP7ZdmEy9Z0K3o1SmrDg4lK+2qv8+49lwrFoui7GhTS2au4JFSTgcNgRRK915G/AkY2kCgLx07G9Z7kTf2XX6FnLGhxBLmav6McvmFO8cQhL5z9NX3s/rqhWYnpKqbhJU8ZOum6mqiGX96eyER0X7KfKMeS54nb+06gLUVR+WpLhqSsqle6QPm5YPZIFzBUqWIPN8GPwRwKPiucVPkDReppumxkPDxG0NLXcvEhPCCyX7PLA3b8lvylC8ZRG9O72BKiX89s1fiwzP7/vJiqIRwjs2NL/2zs0XLcSFg6qtByaVlrtQVVAVn0y25fyW4rfhnTlB33fofFX83k/Y783vLVk33v4f2fw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8/User/urn:dece:userid:org:dece:078517F616933410CB9A23349481F9A8/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/opt/dece/certs//iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>A2853F7516933410CB9A23349481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true" id="8b84599f-9011-4a1a-a266-93bd146fbbc4"><con:settings/><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);

String sql = """update ACCOUNT_USER set STATUS = '$status' where USER_OID =  hextoraw('$userID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0715A2F6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130917_070832</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true" id="80487ede-aacb-4a03-9614-e48d276255d6"><con:settings/><con:testStep type="groovy" name="Update_AccStatus"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

a = new dbUtils.dbAccount(log,context.expand( '${#Project#targetSystem}' ));

assert a.accountSetStatus(accountID,status) == 1;

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>mergedeleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00040_UserGet_FUNC_SPLCS_Get_AccStatus_Mergedeleted_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>08.Functional_UserGet_SPLCS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true" id="0fe6ceb2-bf24-4dc3-a614-abc94dd19143"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def policyclass = context.expand( '${#TestCase#Policy}' )
def username = context.expand( '${#TestCase#Username}' )

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);


//String sql = """update POLICY set STATUS = '$status' where CREATED_BY = hextoraw('$userID') and POLICY_CLASS = '$Policy'""";


String sql = """update policy set status = '$status' where status = 'active' and policy_oid in (select policy_oid from policy_relationship where policy_actor in 
((select user_oid from account_user where lower(username) = lower('$username')),
(select account_oid from account_user where lower(username) = lower('$username')))) and policy_class='$policyclass'"""



log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);






</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E67B0B0EA6B4A35AE0401F0A059938AF</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00016_UserGet_FUNC_SPLCS_No_ManageUserConsent_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>08.Functional_UserGet_SPLCS</con:value></con:property><con:property><con:name>Policy</con:name><con:value>200</con:value></con:property><con:property><con:name>username</con:name><con:value>usercreate20131010_06322</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true" id="9dedc8c4-1bc7-4f3d-90f8-76fc1c3bb757"><con:settings/><con:testStep type="groovy" name="Rename"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "23.User_Get_CS_Geopolicy_Portal_US";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ralluri\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_Responses"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
      {
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
				{                                                                                         
                  	try {
                        		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
						def targetStep = targetTestCase.getTestStepByName(commonTestStep);
						log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                  		}
                  	catch(Throwable e) {
                        log.info "Exception : " + e;
                        }                                                                              
                   }                              
            }
      }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true" id="04c62a5f-b87c-4edf-81e6-67cf45583012"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true" id="d2b2d499-5c24-479e-9969-404560acf0db"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true" id="c4b23f47-43c5-4476-ac81-eaa1b66c5619"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d7765da1-c221-46a8-b0ee-4ada2ad4098a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("role",callTS.getPropertyValue("role"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName");
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

log.info "Role : --- " + role;

//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand(  '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

		String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
		and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


		this.log.info "Query is:  " + sql;
		results = a.SelectFromDB(sql,dbHost);
		
		log.info "Policies Results : " + results;
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;

		//if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

		if (context.expand( '${#TestCase#IsMinor}')=="true") 
			{
				if((geoProfile == "US")|| (geoProfile == "CA"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					}
				else if ((geoProfile == "GB") || (geoProfile == "AU") || (geoProfile == "NZ") || (geoProfile == "IE") || (geoProfile == "AT") || (geoProfile == "CH") || (geoProfile == "DE") || (geoProfile == "FR"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

						assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					} 
			} 
		else
			{
				assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
			}


log.info "Policy Validation Passed";	


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dbHost = context.expand(  '${#Project#targetSystem}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations" id="418d894c-0d5e-41ce-af71-087c1cf97b82"><con:settings/><con:config><script>

log.info "DB Validations Complete";</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-09-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E60068AEF0205738E0401F0A07990D3F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00021_UserCreate_AUTH_Creator_ADULT_Full_New_YOUTH_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E60068AEF0215738E0401F0A07990D3F</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-09-14</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="First_User_Create" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_Firsrt_User_Create_STS_Policies" searchProperties="true" id="bf6be7d4-9561-4c60-9314-ec69bcea736d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f05e0c99-e0d5-45df-a3a3-69bdd405b626"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tS.getPropertyValue("nodeid"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usergetr4_firstuser"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20131228_082671388237167302</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>3FA5D4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>8EA5E5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_abe59401-a671-4b95-a16b-97eca5ea2e03</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_abe59401-a671-4b95-a16b-97eca5ea2e03</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlAo7QgzVWTtLq4OBVf8ciekB4i0aW1SXu6vv0mxCIiu3hlnMKcnz3nOS57knKEktjyfMcg5SakSdNvqP2gCDdc2TA01HVOzJ25DQ2ZzorkOYNQAZIFRV5WAsQICyjiivK1ahlnXTEuzWkOz7llNz3BrpuM+qso95ExAC5eaoSrrJKbMK8O21SKnXooYYR5FCTCPYy/0b/qe8PRQxUntnG9ZlgHzzpzzzNN1XIsAQxzjGk4T/Vw/8DmPmBeSGUW8yOElZsTa6sve1WpVW9VraT7TLcMwdMPVhU/EyOy72vlWbYYooNN0u75ENKUEo5j8iySpG+DzNFL8eJbmhM+Td6BN3TQktAZrrGHTpt9V/TVAye6TSAckc4Y0NkdmBTaAKeRAMSijQdBWv3+ug9u9wxxRNk3zhB2tv0YJ6BLiNINIY1VmFbvPI54oV+ccsBdQHBeMLOG3HJMMYWDKXQ5Tsu4TJoYvYkrZfmXNxB+ppgzwV9pyru9zFdT1E9Xpkhkw/n96tt+vLco9igvooE1/PCWO9atXt80VGt9PRgYa0/sHfdwuKew7b0nt2v2yPh7W3Wy9bMLO9ZO/jjdZmC6N2yf9mi3DswFes2K6uEtnTz+nmz6JBz8u8B/y1P99NryenQ2bVw/+j+hu8rOLlws0aobJ4qrp33+zVouZE64XrdXw+sFpuGejOs6b9cU09Btje3KTOclFsHiKJ9n4bHTj9u1gObIdS58tDEzibLziP1puLzVubx/db4+DaDNqBZvEZq0ijP+AiduvOe3ncGisJCEsJk+AebWU4xF0lZ7oF+Ify4u0kEiblq5eJjWKcaBc7chdUlq8QggQiTzRzO3a6vkN374yraZbF70yLi9c3xL/uXbL7Ll+q9KgLYsjipcpnRIZS6rsdn4+JogTjwGNINeWaYHnwNQPELuIIyWgA3E4UspgmAoV7/ndpnl14duW3eq5DevKdg2n7ro956LesxxXVX6n/Jbe5v6UQ36o4M0DBR8AJhkBKfNyzpkYdMZFSZ7RsuCxWVuiGoVCXAS51GJPxGvojCRZDJKwnqRREUMtm2dlgXS2/bU0hFlpJQxnac5RbJbH8N0sj79VBRE+EZEOTKZ0AaKp8OZGaniNKp/383b3867g/SIi8rSJ6vKc4C2Tw0+vQyOnZTcxu8QwMyvuuy1fhDgBoH/ATz8uzS5etCR70atbVlwcQlY6VX+fUe25ViyXRdlRR0pmLuB1oZymHgIuhO5thukCqL6D0D917exYH0Xe2Q/5FXxOQ444JGL+lHL5iTdHCEy+OQJxftaffdAchBR147Dmp2yXsXiaSMYfvl6wh6WfMN+Jn1WaR6/tOoG1F0fkKR4anNCZXMkLZvPObOBUwBKhiGm+D34K4FTwQ+OuyDsuXEzTpODw/hdFSl1bRRinBeVBVy0N+/Jb8uSbDLxXpzcwpcS/3Nlr9u6d/XDTD4UQJkjd+ZK/O2ukHBcMqnwalFza6lo8QUVwOtuT+xeC+4rvXPmNbuPyr4p/mEnnjfmtZa+mx+eh8x8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlAo7QgzVWTtLq4OBVf8ciekB4i0aW1SXu6vv0mxCIiu3hlnMKcnz3nOS57knKEktjyfMcg5SakSdNvqP2gCDdc2TA01HVOzJ25DQ2ZzorkOYNQAZIFRV5WAsQICyjiivK1ahlnXTEuzWkOz7llNz3BrpuM+qso95ExAC5eaoSrrJKbMK8O21SKnXooYYR5FCTCPYy/0b/qe8PRQxUntnG9ZlgHzzpzzzNN1XIsAQxzjGk4T/Vw/8DmPmBeSGUW8yOElZsTa6sve1WpVW9VraT7TLcMwdMPVhU/EyOy72vlWbYYooNN0u75ENKUEo5j8iySpG+DzNFL8eJbmhM+Td6BN3TQktAZrrGHTpt9V/TVAye6TSAckc4Y0NkdmBTaAKeRAMSijQdBWv3+ug9u9wxxRNk3zhB2tv0YJ6BLiNINIY1VmFbvPI54oV+ccsBdQHBeMLOG3HJMMYWDKXQ5Tsu4TJoYvYkrZfmXNxB+ppgzwV9pyru9zFdT1E9Xpkhkw/n96tt+vLco9igvooE1/PCWO9atXt80VGt9PRgYa0/sHfdwuKew7b0nt2v2yPh7W3Wy9bMLO9ZO/jjdZmC6N2yf9mi3DswFes2K6uEtnTz+nmz6JBz8u8B/y1P99NryenQ2bVw/+j+hu8rOLlws0aobJ4qrp33+zVouZE64XrdXw+sFpuGejOs6b9cU09Btje3KTOclFsHiKJ9n4bHTj9u1gObIdS58tDEzibLziP1puLzVubx/db4+DaDNqBZvEZq0ijP+AiduvOe3ncGisJCEsJk+AebWU4xF0lZ7oF+Ify4u0kEiblq5eJjWKcaBc7chdUlq8QggQiTzRzO3a6vkN374yraZbF70yLi9c3xL/uXbL7Ll+q9KgLYsjipcpnRIZS6rsdn4+JogTjwGNINeWaYHnwNQPELuIIyWgA3E4UspgmAoV7/ndpnl14duW3eq5DevKdg2n7ro956LesxxXVX6n/Jbe5v6UQ36o4M0DBR8AJhkBKfNyzpkYdMZFSZ7RsuCxWVuiGoVCXAS51GJPxGvojCRZDJKwnqRREUMtm2dlgXS2/bU0hFlpJQxnac5RbJbH8N0sj79VBRE+EZEOTKZ0AaKp8OZGaniNKp/383b3867g/SIi8rSJ6vKc4C2Tw0+vQyOnZTcxu8QwMyvuuy1fhDgBoH/ATz8uzS5etCR70atbVlwcQlY6VX+fUe25ViyXRdlRR0pmLuB1oZymHgIuhO5thukCqL6D0D917exYH0Xe2Q/5FXxOQ444JGL+lHL5iTdHCEy+OQJxftaffdAchBR147Dmp2yXsXiaSMYfvl6wh6WfMN+Jn1WaR6/tOoG1F0fkKR4anNCZXMkLZvPObOBUwBKhiGm+D34K4FTwQ+OuyDsuXEzTpODw/hdFSl1bRRinBeVBVy0N+/Jb8uSbDLxXpzcwpcS/3Nlr9u6d/XDTD4UQJkjd+ZK/O2ukHBcMqnwalFza6lo8QUVwOtuT+xeC+4rvXPmNbuPyr4p/mEnnjfmtZa+mx+eh8x8=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8AAZTSapkbMCAATPDyykjywN4wvIEX39kCGzITvbNuU+gVqt79eDW0ivWXIdtAYxRGNm+V5TFt9I/1Z2x46pNpsLp9XqlVq3ylV2TNyqI5njIQq5hQK1UlDGOkezhSPOitxJLM9UKzVcYek5zrTrfqjEvPMdsS8UlCjExTVRe6FIxcx0Pty5u30px6LV8Ddu45Wkuwq0ItmZAGbaIZku7YSq9v15RXhyG71YUBS2Kgi86gshx4Av0XeqVetJ51XFrZpueFsUh+vCp47fSx9k0TV/S6osfmhRL0zRF8xTR0bFt/iq9F26HkS57hn9dtzXP92yoOfZZy0EpKLJ8vQgc0w/tyHK/Mc1QDJ2brqAMViBT836VqN8OLuh+aOkJZIi1CrY05mZsigwUIg+i4mIqv5V+/ayC17PzUPOw4Ycu/rT+b5CQlyDHD5BewbfIbuh+bvGLdL2/ItiSPejE2E7QKG+TQIMIFychMuxsaGPSfDouXspfzPCtwxD8LyV5pR5xEtjUF5kRbRPh6P+p12OtrlaWmhOjd04ZCAfbU/dh2jcbYwuKZnBuyo1OffF2gfCofAV1L/XH+nOj3vvq49A4MHWLbaJqd7VXzzjuiSnf1J14aXnU6dDGXWFprSbChufpbS+pdSh7HVOy16e5pl12OxPT3525xEwGCFAFah/1FlEj2gLUHu/OCVOfHqaTU+fsZv6i6+9Mvxw2Tg05LCfUcLG0rIYv+gdmPDpQS7WmT1ZZfcodzLOaWnphMpa9zbgmzI7hyVdN97jevP2O6TGGPK4BOl2CzP+v6zQvapF2X7TzSWGQzzNC74ost8tiu00gmiCVBWDKwvAMRoJ5OFoHu8untADURQeI4KRMQSqaG3GpqgMp1ZdLZ7uUOx1BmdbSHtiIBbIhStlS3K77tLbaBhu2Q29ngqCvp/6u2g/03iHtWXCkzJV0NJdPyl7KRnOJXl1kZkbWZ2WvMOP5olpY7QVemUqpmF48ilJqjbarabBZ8Ck8S6oCal3ALKS2pfTm7pKB1akF99JQAYeLXLCU9nKpZNIcTAqCOVqS2ObtzjaArh7sXMd6MN4jxud6d3nadZ14e5b2SlvqtmfH7kzeVUVV6oPpZrFbLQ/aqpMUYG8EdjePdt3W1n5qbpupqG76A38rWwkcAVUSBBWQdNFAkbt94HcFoNSAnZ3be4Hz23onpfosLpR5p8utT/ZxjbUu7WhMs8lshitucuREyStvB/FubynWujMuD2Z6suAj/rzBSTnhNJuBWWCoa6kXDTKjp84Ku4mYrWGvrJt9yjnznVBp9EF4PlmOYk6jFTfGp51tGCthPa45DcNRqtPAcIzghMtzXz2ENCegKkttTskgKgBTEQDo7hd7QVWEZp5UXU7VjSJooCNFMTjv2WjALo/9XuLATRX42WA13h8+CqOLqSRQqSqRtpIKTRHoeRF6s4XU2YOFYJqhYEodQYUiUDfyIN2QfC16RPlzHjuXPJqSAKTqFnB8r1Bd0Hw0jma1Gjh5wsLr8JZyzFY659KNI5KGs1FQSxU8Mrztyj8orh0uwni2GAxGw2w3j7uHPZlVBj0bJNVtQUoOAbBHg7l1EH1RmwSbTRSUPRjCSA5cRc7O4y3eN+2dS/fLdUaY0CJssAt3ly66mrQdhOaMGfSm3qTa4As4Nk49t7xvpqvyfMYFDb3tGeLpRG3DJe0Dv8NP60c9Y9mDtUiHXGr0wWGnsaPM4YUTLw22c5hO1cFq5pbrhXoyHLr0eU7VRsE4nXXTmqSq5aouzHtzHIT2Jm6aWTj2dHajRVyypZecHTgHno0P81pQXZouKdYk0YOGMimotTXcumYjgH1qSiVAahhDuXvanbVz4I7hdYB+ng534XV+UI+T5Wn03EjHjHQrgtFtmV9AsljskFtBi/5OYHKJrVeMi2oryFkQjpAXld7zUzl5acWE4th6i1wZ17XE0VVaaHIMXRdolpEkukYzHRrQDZ5nJV66sZwrik8Q275n2LmvnMddb6m/A4RuCyNPR2El8WNoIVz6i8U8X0XZm5Lr1/cwmvuEJ9brosSwHAeabUB3hIbQZGjQEQRQFSW6Dtql4siPxt44BEaEwmeOyD9xxCmCdmCjnEjmtykm1ymOSEqOWhJHDvOSaC8eignVDHO212JrzTqFbTdwUA6Ycn09dtBLYAWXBFH4+stWNIgv0qk0/0eetS83/bchft67ZYPo6HaugPN4BEQqir4gvNVbMN8GzbCPQd/Mg1i38wudpDYKbXhF8rz1u2PyVrm3C4nqBvmu+VnwZJX6HNDdkZ7Y8N7z9+cAYZOEb7zfSnLUXo4vcZLElyI0ci4VEvMUQ9ENaoZgTAjRae4fkEfdTVA/4qJ31J883+XP+OLI8mYR+Z5d0jLFy/IHD5EZwvlDRCYtn/30lfPkkuQtQln0laztkPdKjvivTxrYgrkeEU/IT+qH+u9yfWHrwQ+JMx9gtmfmq5x5nr5pCugTszYZYn74aPwrA185fxbek3zHEpFu2sUR+n6nmE+nt5IGoR97kSyWLoLHiXnBGZ0C1Pqt9IeZC/f7IPMZ/pbMr5XhjMwuVyvdde3/rVyxL+0CETmF7QuWt1JG3qXEuWc+TOgPgH8MaZ4RaIETJEaq3Yd0nefrHMveE/gUyfsf4j8lDzn9/D28/ws=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="User_Create_API" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_STS_Policies" searchProperties="true" id="d4a22e7e-29ae-4d26-b76c-def0e45086de"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="27d7ed5d-3471-474a-90b0-bd0d0ce61dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e4457366-ffe3-4c20-9707-5fb5d033e5ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
//tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c69faf98-46ed-4668-b938-687cf15c1ad7</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_c69faf98-46ed-4668-b938-687cf15c1ad7</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6078B27BD7C72E6E0401F0A059976B6</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1997-01-01</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxwwYX/BtAjMGSuuENA2QHKYvZxR5A0ptCSwZSL7+SCYmQEianBkG0PbW2mtfvKRzjrLUCiPOIReEUS3utfR/sRtM0TTwa44Lifxy/dp9YPs11/fw1GxiEyWersWcFxBTLhAVLd1qmHbNtGqWPzbt0HJD06k3A+e3rt1BziW0dKk3dG2TpZSHZdiWXuQ0ZIgTHlKUAQ8FDkfR1SCUniGqOOnt8y3LMmDenguxCA0D1xPAkKa4jllmnBsHPucJD0dkRpEocniOmfCW/rx3vV7X13ad5TPDajQaRiMwpE/Cyeyr3v5SbYYkplO2XXcRZZRglJInpEhdgZizRIvSGcuJmGdvQJuG2VDQNdjgGjYd+lU3XgKU7D6IdEAy56jG58iswIYwhRwoBu12GLf0rx/r4HbvOEeUT1me8aP15ygBXUHKFjIarzKr2H0c8US52ueAw5jitOBkBT/VmCwQBq79ymFKNgPC5fAlXCvbr224/JBqygB/pi3nxj5XSd04UZ0emQEX/6dn+/3aotyhtIB25zK4YPQMnH7cte+dW+PubOAO7wZL47ZVUth33pLatft5fTysu9l63jQsvkHx/WnTXaVksoyKq9XD94vZ3Xz+cH85QTQFz/MfI0OY49/JxPyRJTfd/i08GZ5Yigdw3IWHcs+DZgea/3zxcTI3u9Hg+sl1ztDkYvh7bNysmtn6x/piFnR/3Tg/RpG9jHDzdj0FemOtr7w/y8ETQ/l6nPjX9Gb5/RrFnmevoy8LjDeXk9FZzzu7YLf5hP2JWy857edwaKwkYVTcPwAW1VKNR9zT+rJfSLwvL8pCktq0dA0XSqO4ACr0ttqlpCUspACRJJTN3K59u9M0I9u23MC2HbPR7QSRJf8Fjm/2g8ivNGjL4ohil9EpUbGUym7n532COAs50ATy2ooVeA5cfwexhwTSYjqULwejHMZMqngUdTzX7vuO17f7lm+ZTi9yO71+z++6jSDo6tpPJq7pdR5NBeSHCu4eKPgQMFkQUDKv5pzLQedClmSJVoVIzfoK1SkU8iDIlRaHluM3DU6yRQqKsJGxpEihvpgvygIZfPtr1RDmpZVwvGC5QKlZvoZvZnn8rCqI9EmIcuAqpQ7IpsKJE6lR5fN23sF+3hV8VCREvW2yuiIneMvk8NHL0Khp2U3MLjHMzYr7bssnIU4AGO/wM45Ls4uXrMhe9OqUlQeHlJV21d8lqi/rxWpVlB31lGTmEt6QymkaI8CF1L3HMfsD1NhBGB86dnasjyLv7If8CjGnI4EEZHL+tHL5gTvHCLi6c8Ty/dl89EJzEFLWTcBGnLJ1U3k1UYzfvb3gECs/af4lf9YsT17adQJrL47MU140BKEztVIHzOMbs4GZhCVSEVm+D34K4FTwQ+OuyDsuQk7TfSHg7SeakrqWjjBmBRVxTy8N+/Jb8hSPCwhfnF7BlBL/fGZv+Jtn9uRqMJJCmCF950v+7lwj5bhg0NXVoOTS0jfyCiqD09me3D8T3Fd871vU7DW75t8U/zCT9ivza8teTY/fh/Z/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFQ0Ci745RYOA6JsMiDor7+DRo/Jycmb+1ZZhdP0dD+90PPMMzZ9j+0AjFGcuGFQVqSXyj8tdrOxbLZZa9Zpq1aHdb624Sy21m7V603YsK2N3a6UFYxTpAQ4MYPkpcLSDFejefLTmXaHa3Q4/olrsOtKeYFiTEwTlSe6Us59L8Cdi9uXShoHndDELu4Epo9wJ4EdDaijDtHsmDdMldfnK8qLw/h1myRRh6Lgk4Ug8jz4BEOfeqY+6DxbuKO5TmAmaYzefVr4pfK+N8uyp4x7CmOHYmmapmieIjoWdp1fldfSbTOylMAOr2vRDMLAhabnns0ClIqSbWiVgeeEsZts/b+YZiiGLkzXUA5rkKkHvyrUbwcXdD+09AFkjM0a3prMzdgM2ShGAUTl+Ux5qfz6WQWve/XYDLAdxj7+tP5vkFBwRF4YIauGb5Hd0P3c4hfpen1GsKME0Euxe0Tjok0iEyJcfouR7eYjF5Pms3D5Uv5yjm8dhuB/Kckz9YiTwKa+yIzkOggn/0+9Hmt1tbIwvRS9Ag6ON+ugTi9EhTmwSzzp9bZNenYUlZcLhEflK6h7qd/Xnxv13lfvm475xKCrvcHZaPQn8kCLm/1NbsSLbR+FAr1nTBnncQrF+WmS0nCUAGdXHXR7DS2o7jN7xfFyuNH93Kp6G780tTx+bMgwyVqWLslmMGxTjD8MrPF63RdpJs4X/nnmn2Z0Szb6PZTVR4YwXPSXs4bY0AR5vhrlGUttp0MMSv29L7BzBfYNyw0OLX/e3b/8jukxhiKuITpdgiz+rxo0L5mJeV+IxaSwyeeZoFdVUcSqJIoAiQ7IFAE4ijA6g7Hg7A/bvdvjM1oA03kXSOCkzkAmOYa0mE6HcmYtFt56oXS7gjqrZ31gSCXyQpLzhbReDWhzuY4MtkuvNUGwVrNwww0iq7/P+ls4VnU1G+vKSd3J+ViX6eVF5uRkfVZ3KjPR51xpuRN4dSZnUnbxKMnZdrxeziJjzmfwLE9VUO8BZi6LW7Wv+wsGcrMt3MkjFewvcmGriouFmss6eCsJznhBYtPF7jqCvhVtfG/7YLxPjOtWb3Ha9Lx0fZZ3qij3RO3Q05QNJ03lAZgZ881ysTeX3WMJ9sdgc/PoNlxzFWbOup1JU2MwDNfK9gjHYCoLwhSQdNFAVXoDEPYEoNaBm5/FndAMRaubUQMWl6q812uuTu5hhc0e7ZlMu80Yo2Xz7dCU5KC6Hqab3VbdrrqT6lCzjnM+4c8GPlaPTdNlYB7Z05XcT4a53Z9qpc2blK9gv2o5A8o7891YbQ1AfD5tPdWZJcvmBJ82rm0vhdWk7rVsT+Vmke3Z0QlX9XC6j+mmgDiWMk7HYVICjioA0NvNd8JUFdpFUi0lmxqqYIKunKTgvGOTIbs4DPpHDxocCPPhcrLbvxfGkjJZoLKpTNpKLrUlYBVF6GtzubsDc8FxYsGRu8IUSmBqKMPMIPma94ny5zx2L3l0ZAHI3Bo0+X6Jm9N8Mkm0eh2cAmEedPmtesiXVtOnWwckj7RxVM9UPLaD9TLcq74bz+NUmw+H41G+0dPefkdmlU1rwyO3LsnHfQTc8VDf7qVQMt8iw0iiagBjmCiRryr5ebLGu7a78elBtcEIb7QEW+zc32Tznimvh7GjMcP+LHjjWnwJp/ap71d37WxZ1bVm1LLEwJZOJ2odL+gQhF1+1jhYOcvut/Ns1MzsAdhvTHace7xw4uXhWofZbDpcan61UWocRyOfPutUfRxNMq2X1eXptMpZgt7XcRS7Rtp28ngSWKxhJs3jml403cjb82y61+sRt3B8Uqy3oxW11LfStL6Ca99pRXBAzagjkFv2SOmdNmfzHPkTeB2gn6fDXXidH9TjZPkwem6kQyPdimByWxYHkCKVu+RUMJPvCUwhca2afVHtRAULwgkKksprsasgL52UUBzX6pAj47qWG902DxiOFZtNtiG3ZLpOM10a0A2er8tC+8Zyrig+QRTDwHYLXwWPu55S3wOEfgejwEJx7RimcItw5RuLRb7KSjAjx28YYKSHhCdKPC1KDQDqtMixLE8DuS11G3W+LYBWl2aYSnkcJpNgEgM7QfEHjsgyHzjiDEE3clFBJIvTFJPjFCckJQfzmCYe83Q0nwKUEqoZF2yvw9bbDQq7fuShAjDlh1bqoadoG10SROHrk62ZEF+kM1n/R9HEy0n/1xA/v7tlg+hYbqGAi3gERCqKviC87C2Yr4NmaJ2mH4O+mQep5RYHOkltErvwiuTjq98dU7TKvV2KqETtH+aG+67+4+1/7qS+AUV9zsfdkXV0H9zemDsho4SuvN4qejCfDk/p8ZheatgqqFhMzFMMRbcoDcGU8KmTHu5RQN1NUD+isnfUnzzf5R/xpck20BIyDnzSceXL8gf3GA3h4h6jkC8m/+kl6YNLkrcE5clXMtEj150C8bc3ItiBhR4Rv5FHFsbW73J9YevBD4mzmH9u4BSrgrie/tIUMCRmXTIDw/jR+FcGvnL+UXhP8h1LQrppkybo72/KxXB7qZgQhmmQKFLlIngcuBecySlCnd9Kf5i5UMf3u0CO/3oXWKkjjYw+36zcdd3/rVxzL+0CEdmF3QuWl0pOrrXEeeA8DPh3gF/P+Ab33Yz/GMnrH+I/JQ85/fw9vP4L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8H62EzQ0rSdWwqKioCK5fbuEwIMomA4L++jto9JicnLy5b5WlTtPT/fRCzzMv2PQ9tg0wRnHihkFZkV4r/9A1zuabDeup2WjRT7VWvf5k0nSLfDUgzdW4eq1hVsoKxilSApyYQfJaYWmGe6J58jGYVptrtGn2mWly60p5jmJMTBOVZ7pSzn0vwO2L29dKGgft0MQubgemj3A7gW0dqMM20WybN0yVt5cryovD+G2bJFGbouCzhSDyPPgMQ596oT7ovFi4rbtOYCZpjN59Wvi18r43y7LnjHsOY4diaZqmaJ4iOhZ2nV+Vt9JtM7KUwA6va9EMwsCFpueezQKUipJtaJWB54Sxm2z9v5hmKIYuTD+hHD5Bphb8qlC/HVzQ/dDSB5AxNp/w1mRuxqbIRjEKICrPpspr5dfPKnjda8RmgO0w9vGn9X+DhIIj8sIIWU/4FtkN3c8tfpGutxcE20oAvRS7RzQq2iQyIcLlSYxsNx+6mDSfhcuX8pdzfOswBP9LSV6oR5wENvVFZiTXQTj5f+r1WKurlbnppegtlu3tYn+YwAFl9H0jm6pNrAf1rlRrvV4gPCpfQd1L/b7+3Kj3vnrfND2sxWpnwG3S6BCmtjSdg5zrn8edsScljDbyEteaBP0hO9w3++xczE6isbT2kY66rCeHrj4ODkk8GGK/hku1tCmy9r67OPXAqW/ySjo/UItw00tD+tyrG6ZMNTVPCxaTY+CtWSdcm07I9YfKZgyl8VzbBxbjNC3R902xFO4oYSaMFmig1aVdqs849fV3TI8xFHEN0OkSZPF/Wad5yUzM+0IsJoVNXs8EvamKIlYlUQRIdECmCMBRhOEZjARnf9ju3S6f0QLQZh0ggZM6BZnkrKS5pg3kzJrPvfVc6XQEdVrLemAllcgDSc7n0nrZp83FOlqxHXqtC4K1nIYbrh9ZvX3W28KRaqjZyFBO6k7OR4ZMLy4yJyfrs7pTmbEx40qLncCrUzmTsotHSc62o/ViGq1mfAbPsqaCWhcwM1ncqj3DnzOQm27hTh6qYH+RC1tVnM/VXDbApCQ4ozmJzRA76wj6VrTxve2D8R4xbljd+WnT9dL1Wd6potwV9UNXVzacpMl9MF3NNov53lx0jiXYG4HNzaNbd81lmDnrViZpq/4gXCvbIxwBTRYEDZB00UBVun0QdgWg1oCbn8Wd0AhFq5NRfRaXqrzXbSxP7mGJzS7tmUyrxayGi8bk0JDkoLoepJvdVt0uO+PqQLeOMz7hzyt8rB4bpsvAPLK1pdxLBrnd0/TSZiLlS9irWk6f8s58J1abfRCfT1tPdabJojHGp41r2wthOa55TdtTuWlke3Z0wlUj1PYx3RAQx1Kr03GQlICjCgB0d7OdoKlCq0iqpWTaShVM0JGTFJx3bDJg54d+7+jBFQfCfLAY7/bvhbGkTBaoTJNJW8mllgSsogg9fSZ3dmAmOE4sOHJH0KAEtJUyyFYkX7MeUf6cx84lj44sAJlbgwbfK3Ezmk/GiV6rgVMgzIIOv1UP+cJq+HTzgOShPopqmYpHdrBehHvVd+NZTN6YwWA0zDdG2t3vyKyyaX1w5NYl+biPgDsaGNu9FErmJFqtkqgawBgmSuSrSn4er/Gu5W58ul+tM8KElmCTnfmbbNY15fUgdnRm0JsGE67Jl3Bqn3p+ddfKFlVDb0Tk7Q1s6XSi1vGcDkHY4af1g5Wz7H47y4aNzO6D/cZkR7nHCydeHqwNmE21wUL3q/VS/Tgc+vTZoGqjaJzp3awma1qVswSjZ+Aodldpy8njcWCxKzNpHNf0vOFG3p5n071Ri7i545NiTY5W1FQnJa22hGvfaUawT02pI5Cb9lDpnjZn8xz5Y3gdoJ+nw114nR/U42T5MHpupEMn3YpgclsWB5AilTvkVDCT7wlMIXGtJ/ui2o4KFoQTFCSVt2JXQV7aKaE4rtUmR8Z1Ldc7LR4wHCt2Gmxdbsp0jWY6NKDrPF+ThdaN5VxRfIIohoHtFr4KHnc9pb4HCP02RoGF4qdjmMItwpVvLBb5KivBlBy/YYCRERKeKDZaHMM1mkILENQduiXKLC9KbIvmG3QDCJXyKEzGwTgGdoLiDxyRZT5wxCmCbuSigkgWpykmxylOSEoO5jFNPOb5aD4HKCVUMy7YXpsljIbCrh95qABM+aGVeug52kaXBFH4+ss+mRBfpFPZ+EfRxctJ/9cQPz+7ZYPoWG6hgIt4BEQqiv4gvPV2/RbM10EztEHTj0HfzIPUcosDnaQ2iV14RfLx0e+OKVrl3i5FVKL+D3PDfVf/8fY/d1LfgKI+5+PuyDq6D25vzJ2QUUJX3m4VPZjPh+f0eEwvNWwWVCwm5imGopuUjmBK+NTJCPcooO4mqB9R2TvqT57v8o/40mQb6AkZBz7puPJl+YN7jI5wcY9RyBuT//SS9MElyVuC8uQrmeiR606B+NsbEWzDQo+IJ+QnC2Prd7m+sPXgh8RZzD83cIpVQVxPf2kKGBKzLpmBYfxo/CsDXzn/KLwn+Y4lId20SRP09yflYri9VkwIwzRIFKlyETwO3AvO5BSh9m+lP8xcqOP7XSDHf70LLNWhTkafb1buuu7/Vn5yL+0CEdmF3QuW10pOrrXEeeA8DPh3gF/P+Dr33Yz/GMnbH+I/JQ85/fw+vP0L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieSythdcFKUjUsKioqiuvNWzgMi7LJgKi//h00ekxOcr683xVM09P99ELPMy/YDHy2BTBGSepFYVmVXyv/NGwa1liTfeKEJnziLfJm2gJ8YmybQxyyGa7OVcoqxhlSQ5yaYfpaYWmGe6KbT2zNYBotnm3x/HOz0VxXynOUYGKaqDzTlfIx8EPcurh9rWRJ2IpM7OFWaAYIt1LYmgJt0CKaLfOGqfL2ckV5cZi8uWkatygKPlsIIt+HzzAKqBfqg86LhVtTzwnNNEvQu08Lv1be9+Z5/pxzz1HiUCxN0xQtUETHwp7zq/JWum1Glhra0XUtmWEUetD0vbNZgNJQ6kZWGfhOlHipG3xjmqEYujD9hI7wCTJ8+KtC/XZwQfdDSx9AJth8wq7J3IxNkI0SFEJUnk3U18qvn1XwutdIzBDbURLgT+v/BgmFB+RHMbKe8C2yG7qfW/wiXW8vCLbUEPoZ9g5oWLRJbEKEy+ME2d5x4GHSfBYuX8pfPuJbhyH4X0ryQj3iJLCpLzIjew7C6f9Tr8daXa3MTT9Db3zeW4Ea3wSNfJFAu8+wjD/s84veUHm9QHhUvoK6l/p9/blR7331vulA2VLXGIxnQ2NWX43p1PW5Wb/aDV0RJwfYZIWaZpi7RBlhz1d2Sb4dro6GMQvHlmnwvdFwPmMlEwvd2XheigRKmDrV3paq6zG720oM3XQa48amx279hdDr6ubcDbqLZD5ZLLkTPxnm5mrXHujjtYqYLDS3frJVg2ENjbhSsPf7rKfj3anRtc+0sZ6sXn/H9BhDEVcfnS5BFu/LGi3IZmreF1IxKWzye6boTVNVqSpLEkCSA3JVBI4qDs5gKDq7vbvzOkJOi0CftYEMTtoE5LKzkue63ldyaz7313O13Ra1CZ93wUoukQ+ycpzL62WPNhfreMW26fVUFK3lJNpwvdjq7vKuC4eaoeVDQz1pW+U4NBR6cZE5R7I+a1uNGRkzrrTYioI2UXI5v3iUldwdrheTeDUTcnhWdA3wHcDMFMnVukYwZyA3ceFWGWhgd5GLribN59pRMcC4JDrDOYnNkNrrGAZWvAl898F4lxg3rM78tOn42fqsbDVJ6UjTfWeqbjhZV3pgspptFvOduWgfSrA7BJubR6/mmcsod9bNXNZXvX60Vt0DHAJdEUUdkHTRQFM7PRB1RKDxwDuepa1YjySrnVM9Fpeqgt+pL0/efonNDu2bTLPJrAaL+nhfl5Wwuu5nm62rucv2qNqfWoeZkArnFT5UD3XTY+AxtvWl0k37R7urT0ubsXxcwm7VcnqUfxbaidbogeR8cn3NmaSL+gifNp5tL8TliPcbtq9xk9j27fiEq0ak7xK6LiKOpVanQz8tAUcTAehsZ1tR18RmkVRLzfWVJpqgraQZOG/ZtM/O973uwYcrDkTH/mK03b0XxpJzRaRyXSFtpZSaMrCKInSnM6W9BTPRcRLRUdqiDmWgr9R+viL5mnWJ8uc8ti95dBQRKNwa1IVuiZvRQjpKpzwPTqE4C9uCq+2PC6se0I09UgbTYcznGh7a4XoR7bTAS2ZJNp31+8PBcWNknd2WzCqbnvYP3LqkHHYx8IZ9w93JkWyO49UqjashTGCqxoGmHs+jNd42vU1A96o1RhzTMmyws2CTzzqmsu4nzpTpdyfhmGsIJZzZp25Q3TbzRdWY1uOGJYW2fDpR62RORyBqC5Pa3jqy7M6d5YN6bvfAbmOyw6MviCdB6a8NmE/0/mIaVGul2mEwCOizQfHDeJRPOzmv6HqVs0Sja+A48VZZ0zkmo9BiV2ZaP6zped2L/Z3AZjuDj7m5E5BijQ9W3NDGJZ1fwnXgNGLYoybUASgNe6B2TpuzeY6DEbwO0M/T4S68zg/qcbJ8GD030jEl3YpgelsWB5Aql9vkVDDTvxOYQuJZT/ZFtRUXLAinKEwrb8Wugry0MkJxPKtFjozrWuElwLKgxgCuLXCSqNA8zbRpQDcEgW9wtRvLuaL4BFGKQtsrfBU87npK/R0gDFoYhRZKng5RBl2EK3+xWOSrrIYTcvxGIUZGRHgiD9rtGlcDktJmGwLDcEBmG01JatZrQGnKYqU8jNJROEqAnaLkA0dk6Q8ccYKgF3uoIJLFaYrJcYpTkpK9echSn3k+mM8hygjVTAq212L5Zo3CXhD7qABMBZGV+eg5duNLgih8fRLSA/FFOlGMf9SpdDnpvw3x87dbNoiO5RUKuIhHRKSi6AvCy92C+T5o7jHom3mQWV5xoJPUpokHr0g+fvrdMUWr3NuFRHWDfNf8LPhglfoc0N2RdfDgvefv1wHCJgnfeLuVZG8+75+zwyG7FKFRcKmEmKcYim5QUwQzQohORrRDIXU3Qf2Ii95Rf/J8l3/El6VuOE3J/xyQlilflj+4iEwRLi4iKmn5409vOR9ckryl6Jh+JZN8cl8pEP/1SgNbsNAj4jF55FFi/S7XF7Ye/JA4iwHmhU6xKpjn6ZumgBEx65EhFiWPxr8y8JXzj8J7ku9YUtJNmyxF338pF9PptWJCGGVhqsqVi+BxYl5wpqcYtX4r/WHmwv3eyfwRf0vml9pgSmZXYFbuut7/Vn7yLu0CEdmFvQuW18qR3EuJ89B5mNDvAL8c0kKz9rch/TGStz/Ef0oecvr5f3j7Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>93B5CA3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Child_User_Create_API" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_User_Create_STS_Policies" searchProperties="true" id="d28a0c5d-89e3-4133-8e7a-f724774172a5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);


tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("CLG_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - CLGAttestation for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateCLGAttestation")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("NODE_ACCOUNT_ID", tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("CLG_NODE_USER_ID", tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CHILD", tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("NODE_USER_ID_FULL", tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - GeoPrivacyAssent for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateGeoPrivacyAssent")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));



//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API" id="c5295d99-5448-463a-a7c7-16da5cdfeac0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-01-02</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_43f7745b-3a51-41c8-9889-251a02ea74a0</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_43f7745b-3a51-41c8-9889-251a02ea74a0</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2000-01-01</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A2853F7516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2000-01-01</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxzPGd2M8gRmurVNSUkhy0rycEfIGlNgySDIh/fpKJiZASJqeGWaMtrfWXvviJZ1xlKVO1OYcmCA51eJeU//Pc2f1uudPDRf5tuHZODQaYdgwHN9GlgOo7iFL12LOC4gpF4iKpu5YtmvYjuGEV7YbOb781bwwuNO1G2BcQkuXmty1yVLKozJsUy8YjXLECY8oyoBHAkeT9sUwkp4RqjjprbMtyzIgay2EWEamiWsJYEhTXMN5Zp6ZBz5nCY8mZE6RKBg8x0x4U3/e+/j4WHt0azmbm45lWabVMKVPwsn8s976VG2GJKazfLvuIppTglFKfiFF6gLEIk+0djrPGRGL7A1o27QtBW3ABhvY9uhn3XwJULL7INIBScaRwRfIrsDGMAMGFIN2PY6b+uePdXC794ohymc5y/jR+u8oAV1Dmi8hMXiVWcXu44gnytU6AxzFFKcFJ2v4rsZkiTBw7ZLBjGyGhMvhS7hWtl/bcPkj1ZQB/pu2nJn7XCV180R1emQOXPyfnu33a4tyg9ICWrOL+ab4NvDpXffin+W9e/8j2BROMgrSh2ZJYd95S2rX7uf18bDuZut5E/Rmlw/et9kowfHPIer7X/rDceCz+Oomu7qpf1011oEwA/eWNurBj3nav77L2fLpXkxHaejd+Zcrz+medx6s8/HTp4KtpyadXdwNry3Hjb9apAjwj8nm8td0SC+Hzmhsfs0235g/7ZhP/6J+/xaNbgcrPu85LumkHdFZLVz/ejxMH8ef7kTv/IH1Rt53sYCfXvGlnTdfctrP4dBYScKkmN4DFtVSjUfc0wayX0i8Ly/KQhJjVrpGS6VRXAAVekvtUtISFVKASBLJZm7XVj307fogsIOG63q21e002o781/BCe9Boh5UGbVkcUezmdEZULKWy2/l5nyDOIg40AWas8wIvgOvvIPaQQFpMx/LjyCmHq1yquD8IG0G9Y3tBvz2wBq7l9vthoxv27bbb8JyOrn3PxYiOWHsmgB0qeHCg4GPAZElAybyacy4HnQtZkhVaFyK1a2tUo1DIg4ApLY4cL/RNTrJlCoqwmeVJkUJtuViWBTL59ukYCPPSSjhe5kyg1C4/wzezPH5XFUT6JEQ5cJVSB2RT4cSJZFf5vMrbO3lyVfDtIiHqa5PVFYzgLZPDVy9Do6ZlNzG7xDC3K+67LX8JcQLAfIefeVyaXbxkTfaiV6esPDikrLSq/q5QbVUr1uui7GhdSSaT8KZUTtucAC6k7j1d5Q9AzR2E+aFjZ8f6KPLOfsivEAs6EUhAJudPK5cfuHNMgKs7Ryy/n81HLzQHIWXdBGzEKVs3lVcTxfjd2wuOsPKT5kv5eMxZ8tKuE1h7cWSe8qIhCJ2rlTpgnt6YDZxLWCIVMWf74KcATgU/NO6KvOMi5DRNCwFvv9GU1DV1hHFeUBH39NKwL78lT/G0hOjF6RVMKfHPZ/aGv3lm314MJ1IIM6TvfMmfnQ1SjgsGXV0NSi5NfSOvoDI4ne/J/TPBfcUf2KHvOL7/J8U/zKT1yvzaslfT4++h9Rs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFQ0Ci745RYOA6JsMiDor7+DRo/Jycmb+1ZZhdP0dD+90PPMMzZ9j+0AjFGcuGFQVqSXyj8tdrOxbLZZa9Zpq1aHdb624Sy21m7V603YsK2N3a6UFYxTpAQ4MYPkpcLSDFejefLTmXaHa3Q4/olrsOtKeYFiTEwTlSe6Us59L8Cdi9uXShoHndDELu4Epo9wJ4EdDaijDtHsmDdMldfnK8qLw/h1myRRh6Lgk4Ug8jz4BEOfeqY+6DxbuKO5TmAmaYzefVr4pfK+N8uyp4x7CmOHYmmapmieIjoWdp1fldfSbTOylMAOr2vRDMLAhabnns0ClIqSbWiVgeeEsZts/b+YZiiGLkzXUA5rkKkHvyrUbwcXdD+09AFkjM0a3prMzdgM2ShGAUTl+Ux5qfz6WQWve/XYDLAdxj7+tP5vkFBwRF4YIauGb5Hd0P3c4hfpen1GsKME0Euxe0Tjok0iEyJcfouR7eYjF5Pms3D5Uv5yjm8dhuB/Kckz9YiTwKa+yIzkOggn/0+9Hmt1tbIwvRS9Ag6ON+ugTi9EhTmwSzzp9bZNenYUlZcLhEflK6h7qd/Xnxv13lfvm475xKCrvcHZaPQn8kCLm/1NbsSLbR+FAr1nTBnncQrF+WmS0nCUAGdXHXR7DS2o7jN7xfFyuNH93Kp6G780tTx+bMgwyVqWLslmMGxTjD8MrPF63RdpJs4X/nnmn2Z0Szb6PZTVR4YwXPSXs4bY0AR5vhrlGUttp0MMSv29L7BzBfYNyw0OLX/e3b/8jukxhiKuITpdgiz+rxo0L5mJeV+IxaSwyeeZoFdVUcSqJIoAiQ7IFAE4ijA6g7Hg7A/bvdvjM1oA03kXSOCkzkAmOYa0mE6HcmYtFt56oXS7gjqrZ31gSCXyQpLzhbReDWhzuY4MtkuvNUGwVrNwww0iq7/P+ls4VnU1G+vKSd3J+ViX6eVF5uRkfVZ3KjPR51xpuRN4dSZnUnbxKMnZdrxeziJjzmfwLE9VUO8BZi6LW7Wv+wsGcrMt3MkjFewvcmGriouFmss6eCsJznhBYtPF7jqCvhVtfG/7YLxPjOtWb3Ha9Lx0fZZ3qij3RO3Q05QNJ03lAZgZ881ysTeX3WMJ9sdgc/PoNlxzFWbOup1JU2MwDNfK9gjHYCoLwhSQdNFAVXoDEPYEoNaBm5/FndAMRaubUQMWl6q812uuTu5hhc0e7ZlMu80Yo2Xz7dCU5KC6Hqab3VbdrrqT6lCzjnM+4c8GPlaPTdNlYB7Z05XcT4a53Z9qpc2blK9gv2o5A8o7891YbQ1AfD5tPdWZJcvmBJ82rm0vhdWk7rVsT+Vmke3Z0QlX9XC6j+mmgDiWMk7HYVICjioA0NvNd8JUFdpFUi0lmxqqYIKunKTgvGOTIbs4DPpHDxocCPPhcrLbvxfGkjJZoLKpTNpKLrUlYBVF6GtzubsDc8FxYsGRu8IUSmBqKMPMIPma94ny5zx2L3l0ZAHI3Bo0+X6Jm9N8Mkm0eh2cAmEedPmtesiXVtOnWwckj7RxVM9UPLaD9TLcq74bz+NUmw+H41G+0dPefkdmlU1rwyO3LsnHfQTc8VDf7qVQMt8iw0iiagBjmCiRryr5ebLGu7a78elBtcEIb7QEW+zc32Tznimvh7GjMcP+LHjjWnwJp/ap71d37WxZ1bVm1LLEwJZOJ2odL+gQhF1+1jhYOcvut/Ns1MzsAdhvTHace7xw4uXhWofZbDpcan61UWocRyOfPutUfRxNMq2X1eXptMpZgt7XcRS7Rtp28ngSWKxhJs3jml403cjb82y61+sRt3B8Uqy3oxW11LfStL6Ca99pRXBAzagjkFv2SOmdNmfzHPkTeB2gn6fDXXidH9TjZPkwem6kQyPdimByWxYHkCKVu+RUMJPvCUwhca2afVHtRAULwgkKksprsasgL52UUBzX6pAj47qWG902DxiOFZtNtiG3ZLpOM10a0A2er8tC+8Zyrig+QRTDwHYLXwWPu55S3wOEfgejwEJx7RimcItw5RuLRb7KSjAjx28YYKSHhCdKPC1KDQDqtMixLE8DuS11G3W+LYBWl2aYSnkcJpNgEgM7QfEHjsgyHzjiDEE3clFBJIvTFJPjFCckJQfzmCYe83Q0nwKUEqoZF2yvw9bbDQq7fuShAjDlh1bqoadoG10SROHrk62ZEF+kM1n/R9HEy0n/1xA/v7tlg+hYbqGAi3gERCqKviC87C2Yr4NmaJ2mH4O+mQep5RYHOkltErvwiuTjq98dU7TKvV2KqETtH+aG+67+4+1/7qS+AUV9zsfdkXV0H9zemDsho4SuvN4qejCfDk/p8ZheatgqqFhMzFMMRbcoDcGU8KmTHu5RQN1NUD+isnfUnzzf5R/xpck20BIyDnzSceXL8gf3GA3h4h6jkC8m/+kl6YNLkrcE5clXMtEj150C8bc3ItiBhR4Rv5FHFsbW73J9YevBD4mzmH9u4BSrgrie/tIUMCRmXTIDw/jR+FcGvnL+UXhP8h1LQrppkybo72/KxXB7qZgQhmmQKFLlIngcuBecySlCnd9Kf5i5UMf3u0CO/3oXWKkjjYw+36zcdd3/rVxzL+0CEdmF3QuWl0pOrrXEeeA8DPh3gF/P+Ab33Yz/GMnrH+I/JQ85/fw9vP4L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8H62EzQ0rSdWwqKioCK5fbuEwIMomA4L++jto9JicnLy5b5WlTtPT/fRCzzMv2PQ9tg0wRnHihkFZkV4r/9A1zuabDeup2WjRT7VWvf5k0nSLfDUgzdW4eq1hVsoKxilSApyYQfJaYWmGe6J58jGYVptrtGn2mWly60p5jmJMTBOVZ7pSzn0vwO2L29dKGgft0MQubgemj3A7gW0dqMM20WybN0yVt5cryovD+G2bJFGbouCzhSDyPPgMQ596oT7ovFi4rbtOYCZpjN59Wvi18r43y7LnjHsOY4diaZqmaJ4iOhZ2nV+Vt9JtM7KUwA6va9EMwsCFpueezQKUipJtaJWB54Sxm2z9v5hmKIYuTD+hHD5Bphb8qlC/HVzQ/dDSB5AxNp/w1mRuxqbIRjEKICrPpspr5dfPKnjda8RmgO0w9vGn9X+DhIIj8sIIWU/4FtkN3c8tfpGutxcE20oAvRS7RzQq2iQyIcLlSYxsNx+6mDSfhcuX8pdzfOswBP9LSV6oR5wENvVFZiTXQTj5f+r1WKurlbnppegtlu3tYn+YwAFl9H0jm6pNrAf1rlRrvV4gPCpfQd1L/b7+3Kj3vnrfND2sxWpnwG3S6BCmtjSdg5zrn8edsScljDbyEteaBP0hO9w3++xczE6isbT2kY66rCeHrj4ODkk8GGK/hku1tCmy9r67OPXAqW/ySjo/UItw00tD+tyrG6ZMNTVPCxaTY+CtWSdcm07I9YfKZgyl8VzbBxbjNC3R902xFO4oYSaMFmig1aVdqs849fV3TI8xFHEN0OkSZPF/Wad5yUzM+0IsJoVNXs8EvamKIlYlUQRIdECmCMBRhOEZjARnf9ju3S6f0QLQZh0ggZM6BZnkrKS5pg3kzJrPvfVc6XQEdVrLemAllcgDSc7n0nrZp83FOlqxHXqtC4K1nIYbrh9ZvX3W28KRaqjZyFBO6k7OR4ZMLy4yJyfrs7pTmbEx40qLncCrUzmTsotHSc62o/ViGq1mfAbPsqaCWhcwM1ncqj3DnzOQm27hTh6qYH+RC1tVnM/VXDbApCQ4ozmJzRA76wj6VrTxve2D8R4xbljd+WnT9dL1Wd6potwV9UNXVzacpMl9MF3NNov53lx0jiXYG4HNzaNbd81lmDnrViZpq/4gXCvbIxwBTRYEDZB00UBVun0QdgWg1oCbn8Wd0AhFq5NRfRaXqrzXbSxP7mGJzS7tmUyrxayGi8bk0JDkoLoepJvdVt0uO+PqQLeOMz7hzyt8rB4bpsvAPLK1pdxLBrnd0/TSZiLlS9irWk6f8s58J1abfRCfT1tPdabJojHGp41r2wthOa55TdtTuWlke3Z0wlUj1PYx3RAQx1Kr03GQlICjCgB0d7OdoKlCq0iqpWTaShVM0JGTFJx3bDJg54d+7+jBFQfCfLAY7/bvhbGkTBaoTJNJW8mllgSsogg9fSZ3dmAmOE4sOHJH0KAEtJUyyFYkX7MeUf6cx84lj44sAJlbgwbfK3Ezmk/GiV6rgVMgzIIOv1UP+cJq+HTzgOShPopqmYpHdrBehHvVd+NZTN6YwWA0zDdG2t3vyKyyaX1w5NYl+biPgDsaGNu9FErmJFqtkqgawBgmSuSrSn4er/Gu5W58ul+tM8KElmCTnfmbbNY15fUgdnRm0JsGE67Jl3Bqn3p+ddfKFlVDb0Tk7Q1s6XSi1vGcDkHY4af1g5Wz7H47y4aNzO6D/cZkR7nHCydeHqwNmE21wUL3q/VS/Tgc+vTZoGqjaJzp3awma1qVswSjZ+Aodldpy8njcWCxKzNpHNf0vOFG3p5n071Ri7i545NiTY5W1FQnJa22hGvfaUawT02pI5Cb9lDpnjZn8xz5Y3gdoJ+nw114nR/U42T5MHpupEMn3YpgclsWB5AilTvkVDCT7wlMIXGtJ/ui2o4KFoQTFCSVt2JXQV7aKaE4rtUmR8Z1Ldc7LR4wHCt2Gmxdbsp0jWY6NKDrPF+ThdaN5VxRfIIohoHtFr4KHnc9pb4HCP02RoGF4qdjmMItwpVvLBb5KivBlBy/YYCRERKeKDZaHMM1mkILENQduiXKLC9KbIvmG3QDCJXyKEzGwTgGdoLiDxyRZT5wxCmCbuSigkgWpykmxylOSEoO5jFNPOb5aD4HKCVUMy7YXpsljIbCrh95qABM+aGVeug52kaXBFH4+ss+mRBfpFPZ+EfRxctJ/9cQPz+7ZYPoWG6hgIt4BEQqiv4gvPV2/RbM10EztEHTj0HfzIPUcosDnaQ2iV14RfLx0e+OKVrl3i5FVKL+D3PDfVf/8fY/d1LfgKI+5+PuyDq6D25vzJ2QUUJX3m4VPZjPh+f0eEwvNWwWVCwm5imGopuUjmBK+NTJCPcooO4mqB9R2TvqT57v8o/40mQb6AkZBz7puPJl+YN7jI5wcY9RyBuT//SS9MElyVuC8uQrmeiR606B+NsbEWzDQo+IJ+QnC2Prd7m+sPXgh8RZzD83cIpVQVxPf2kKGBKzLpmBYfxo/CsDXzn/KLwn+Y4lId20SRP09yflYri9VkwIwzRIFKlyETwO3AvO5BSh9m+lP8xcqOP7XSDHf70LLNWhTkafb1buuu7/Vn5yL+0CEdmF3QuW10pOrrXEeeA8DPh3gF/P+Dr33Yz/GMnbH+I/JQ85/fw+vP0L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieSythdcFKUjUsKioqiuvNWzgMi7LJgKi//h00ekxOcr683xVM09P99ELPMy/YDHy2BTBGSepFYVmVXyv/NGwa1liTfeKEJnziLfJm2gJ8YmybQxyyGa7OVcoqxhlSQ5yaYfpaYWmGe6KbT2zNYBotnm3x/HOz0VxXynOUYGKaqDzTlfIx8EPcurh9rWRJ2IpM7OFWaAYIt1LYmgJt0CKaLfOGqfL2ckV5cZi8uWkatygKPlsIIt+HzzAKqBfqg86LhVtTzwnNNEvQu08Lv1be9+Z5/pxzz1HiUCxN0xQtUETHwp7zq/JWum1Glhra0XUtmWEUetD0vbNZgNJQ6kZWGfhOlHipG3xjmqEYujD9hI7wCTJ8+KtC/XZwQfdDSx9AJth8wq7J3IxNkI0SFEJUnk3U18qvn1XwutdIzBDbURLgT+v/BgmFB+RHMbKe8C2yG7qfW/wiXW8vCLbUEPoZ9g5oWLRJbEKEy+ME2d5x4GHSfBYuX8pfPuJbhyH4X0ryQj3iJLCpLzIjew7C6f9Tr8daXa3MTT9Db3zeW4Ea3wSNfJFAu8+wjD/s84veUHm9QHhUvoK6l/p9/blR7331vulA2VLXGIxnQ2NWX43p1PW5Wb/aDV0RJwfYZIWaZpi7RBlhz1d2Sb4dro6GMQvHlmnwvdFwPmMlEwvd2XheigRKmDrV3paq6zG720oM3XQa48amx279hdDr6ubcDbqLZD5ZLLkTPxnm5mrXHujjtYqYLDS3frJVg2ENjbhSsPf7rKfj3anRtc+0sZ6sXn/H9BhDEVcfnS5BFu/LGi3IZmreF1IxKWzye6boTVNVqSpLEkCSA3JVBI4qDs5gKDq7vbvzOkJOi0CftYEMTtoE5LKzkue63ldyaz7313O13Ra1CZ93wUoukQ+ycpzL62WPNhfreMW26fVUFK3lJNpwvdjq7vKuC4eaoeVDQz1pW+U4NBR6cZE5R7I+a1uNGRkzrrTYioI2UXI5v3iUldwdrheTeDUTcnhWdA3wHcDMFMnVukYwZyA3ceFWGWhgd5GLribN59pRMcC4JDrDOYnNkNrrGAZWvAl898F4lxg3rM78tOn42fqsbDVJ6UjTfWeqbjhZV3pgspptFvOduWgfSrA7BJubR6/mmcsod9bNXNZXvX60Vt0DHAJdEUUdkHTRQFM7PRB1RKDxwDuepa1YjySrnVM9Fpeqgt+pL0/efonNDu2bTLPJrAaL+nhfl5Wwuu5nm62rucv2qNqfWoeZkArnFT5UD3XTY+AxtvWl0k37R7urT0ubsXxcwm7VcnqUfxbaidbogeR8cn3NmaSL+gifNp5tL8TliPcbtq9xk9j27fiEq0ak7xK6LiKOpVanQz8tAUcTAehsZ1tR18RmkVRLzfWVJpqgraQZOG/ZtM/O973uwYcrDkTH/mK03b0XxpJzRaRyXSFtpZSaMrCKInSnM6W9BTPRcRLRUdqiDmWgr9R+viL5mnWJ8uc8ti95dBQRKNwa1IVuiZvRQjpKpzwPTqE4C9uCq+2PC6se0I09UgbTYcznGh7a4XoR7bTAS2ZJNp31+8PBcWNknd2WzCqbnvYP3LqkHHYx8IZ9w93JkWyO49UqjashTGCqxoGmHs+jNd42vU1A96o1RhzTMmyws2CTzzqmsu4nzpTpdyfhmGsIJZzZp25Q3TbzRdWY1uOGJYW2fDpR62RORyBqC5Pa3jqy7M6d5YN6bvfAbmOyw6MviCdB6a8NmE/0/mIaVGul2mEwCOizQfHDeJRPOzmv6HqVs0Sja+A48VZZ0zkmo9BiV2ZaP6zped2L/Z3AZjuDj7m5E5BijQ9W3NDGJZ1fwnXgNGLYoybUASgNe6B2TpuzeY6DEbwO0M/T4S68zg/qcbJ8GD030jEl3YpgelsWB5Aql9vkVDDTvxOYQuJZT/ZFtRUXLAinKEwrb8Wugry0MkJxPKtFjozrWuElwLKgxgCuLXCSqNA8zbRpQDcEgW9wtRvLuaL4BFGKQtsrfBU87npK/R0gDFoYhRZKng5RBl2EK3+xWOSrrIYTcvxGIUZGRHgiD9rtGlcDktJmGwLDcEBmG01JatZrQGnKYqU8jNJROEqAnaLkA0dk6Q8ccYKgF3uoIJLFaYrJcYpTkpK9echSn3k+mM8hygjVTAq212L5Zo3CXhD7qABMBZGV+eg5duNLgih8fRLSA/FFOlGMf9SpdDnpvw3x87dbNoiO5RUKuIhHRKSi6AvCy92C+T5o7jHom3mQWV5xoJPUpokHr0g+fvrdMUWr3NuFRHWDfNf8LPhglfoc0N2RdfDgvefv1wHCJgnfeLuVZG8+75+zwyG7FKFRcKmEmKcYim5QUwQzQohORrRDIXU3Qf2Ii95Rf/J8l3/El6VuOE3J/xyQlilflj+4iEwRLi4iKmn5409vOR9ckryl6Jh+JZN8cl8pEP/1SgNbsNAj4jF55FFi/S7XF7Ye/JA4iwHmhU6xKpjn6ZumgBEx65EhFiWPxr8y8JXzj8J7ku9YUtJNmyxF338pF9PptWJCGGVhqsqVi+BxYl5wpqcYtX4r/WHmwv3eyfwRf0vml9pgSmZXYFbuut7/Vn7yLu0CEdmFvQuW18qR3EuJ89B5mNDvAL8c0kKz9rch/TGStz/Ef0oecvr5f3j7Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>178527F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-01-01</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5295d99-5448-463a-a7c7-16da5cdfeac0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.User_Get_CS_GeoProfile</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("V2");

def v2 = context.expand( '${#Project#V2}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140218</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="01.User_Get_GeoProfile" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_FUNC_CHILD_BAU_Get_Self_200_OK_P1" searchProperties="true" id="b0c2e4dd-9005-4abe-9360-387a84fdfe06"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BD67208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155BDF9208CE0401F0A059926FE:57D14AFA"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BD54208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BD54208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BD54208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BD67208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BDAF208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BD67208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BDAF208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vgJBA+ooKUhrKbLbRboN22L1euMwHfTewQO0D769cJDQVKe7tXQkKejM+c+fCxTwVOYtv1hIBMUs60oN/V/6lbzTB6tNpGpx2FRiN8JEYbNx2jhdsRdLCDwXZ0LRAih4AJiZns6rZp1Q3LVL+pZbqNjms3a41650HXbiETClq51ExdWycxE24ZtqvnGXM5FlS4DCcgXEnciTcausrTxRUnvXe6YVkGzHpzKVMXIVILgUAckxrhCTpFez6noXAndMawzDN4iRmKrv6yd7Va1Vb1Gs9myDZNE5kdpHxCQWdf9d6XajOEAYv4Zu1jxhklOKbPuCA1AjnnoebFM55ROU/egbaQZRbQBqyJQawG+6qj1wAlu08i7ZHMBDbEHFsV2BgiyIAR0G7GQVf/+rkObvZOM8xExLNEHKz/jhKwJcQ8hdAQVWYVu88jHilX7xSIGzAS54Iu4bIYkxQTENrPDCK6HlKhhi8UWtl+bS2qCQPyNy05Rbs8FW10pDJ9OgMh/0+/dnu1QbnFcQ496PenPoTNqJPOvUly+ZuPk7OTYdOmvFtS2HXekNq2+mV9OKjbuXrZhOdohGT7+/PwxA8vonbis1EuLhsXM962Rh4Lfy0QunnGdsP0/cGws8BPXv3hAj+dB7dpdn/9Qz6ldj2KJtdR/iX17sY3J4vB3e0qvb/5dnE1XqHHe+/s8uf0YjCV+Nf1s+/X4+8PWY4C2fjxPJyHyzScDZbXns+d3G/c+s7D9fLxWzb6cv9koevF7cls+exdJYM4+OZ1X3PazWHfWMnBJH/8F4islsVoBH1toPqF5cfSUlhoaESlq5sW+iQkMKn3il2FrLi5Eh8auqqZm/V5u2n5luOc9Zst22z752bDtAamZzqdjt0cnFf6s2FxQNHnLKJFrEJhN/PzMUGSuAJYCJmx5DmZg9A/QOxjibWAjdXB4EzAlCsFN88Hjtk6871207Y9R5HvOL5XHzRaXuusU2/q2iWXV+wq8yIJ2b561/fUewyEphQKiS/mXKhBF1KVZIGXuYyt2hLXGOTqEsgKHXbtRttBgiZpDAVhlPAwj6GWztOyQEhs/m0DE1FaqSApzySOy1P4bpKH36p6KJ+QFg6iyOgMVE/hyGVkVem8n3ZzN+0K3stDWhw2VVyZUbJhsv/pdWaKYdkOzDYvIqyK+3bLX0IcAUAf8EOHpdnGC5d0J3p1wao7Q6lKr2rvAtcWtXy5zMuGtgrFzBQ8spDZQhMguZK9pyn/DQxtIdCnbpwt64PIW/s+v1zO2URiCYkaP61cfuK5MQFRPDcCdXzWn33L7IVUdZOwlsdsfqxeJQXjDx8uxCWFnzL/VH8rnoWv7TqCtRNH5aneGJKyWbEq7pend2aDcAVLlSDybBf8GMCx4PvGbZG3XKSapsdcwvtftELpujomhOdMBn29NOyqb8lT3R7gvjq9gSkV/uXKXot3r+y70XCidDDB+taX/rezQctxIaB2CVpy6epr9fpUwdlsR+1fCB4XfKfxkeDvZ9J7Y35r2anp4Xno/QE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vgJBA+ooKUhrKbLbRboN22L1euMwHfTewQO0D769cJDQVKe7tXQkKejM+c+fCxTwVOYtv1hIBMUs60oN/V/6lbzTB6tNpGpx2FRiN8JEYbNx2jhdsRdLCDwXZ0LRAih4AJiZns6rZp1Q3LVL+pZbqNjms3a41650HXbiETClq51ExdWycxE24ZtqvnGXM5FlS4DCcgXEnciTcausrTxRUnvXe6YVkGzHpzKVMXIVILgUAckxrhCTpFez6noXAndMawzDN4iRmKrv6yd7Va1Vb1Gs9myDZNE5kdpHxCQWdf9d6XajOEAYv4Zu1jxhklOKbPuCA1AjnnoebFM55ROU/egbaQZRbQBqyJQawG+6qj1wAlu08i7ZHMBDbEHFsV2BgiyIAR0G7GQVf/+rkObvZOM8xExLNEHKz/jhKwJcQ8hdAQVWYVu88jHilX7xSIGzAS54Iu4bIYkxQTENrPDCK6HlKhhi8UWtl+bS2qCQPyNy05Rbs8FW10pDJ9OgMh/0+/dnu1QbnFcQ496PenPoTNqJPOvUly+ZuPk7OTYdOmvFtS2HXekNq2+mV9OKjbuXrZhOdohGT7+/PwxA8vonbis1EuLhsXM962Rh4Lfy0QunnGdsP0/cGws8BPXv3hAj+dB7dpdn/9Qz6ldj2KJtdR/iX17sY3J4vB3e0qvb/5dnE1XqHHe+/s8uf0YjCV+Nf1s+/X4+8PWY4C2fjxPJyHyzScDZbXns+d3G/c+s7D9fLxWzb6cv9koevF7cls+exdJYM4+OZ1X3PazWHfWMnBJH/8F4islsVoBH1toPqF5cfSUlhoaESlq5sW+iQkMKn3il2FrLi5Eh8auqqZm/V5u2n5luOc9Zst22z752bDtAamZzqdjt0cnFf6s2FxQNHnLKJFrEJhN/PzMUGSuAJYCJmx5DmZg9A/QOxjibWAjdXB4EzAlCsFN88Hjtk6871207Y9R5HvOL5XHzRaXuusU2/q2iWXV+wq8yIJ2b561/fUewyEphQKiS/mXKhBF1KVZIGXuYyt2hLXGOTqEsgKHXbtRttBgiZpDAVhlPAwj6GWztOyQEhs/m0DE1FaqSApzySOy1P4bpKH36p6KJ+QFg6iyOgMVE/hyGVkVem8n3ZzN+0K3stDWhw2VVyZUbJhsv/pdWaKYdkOzDYvIqyK+3bLX0IcAUAf8EOHpdnGC5d0J3p1wao7Q6lKr2rvAtcWtXy5zMuGtgrFzBQ8spDZQhMguZK9pyn/DQxtIdCnbpwt64PIW/s+v1zO2URiCYkaP61cfuK5MQFRPDcCdXzWn33L7IVUdZOwlsdsfqxeJQXjDx8uxCWFnzL/VH8rnoWv7TqCtRNH5aneGJKyWbEq7pend2aDcAVLlSDybBf8GMCx4PvGbZG3XKSapsdcwvtftELpujomhOdMBn29NOyqb8lT3R7gvjq9gSkV/uXKXot3r+y70XCidDDB+taX/rezQctxIaB2CVpy6epr9fpUwdlsR+1fCB4XfKfxkeDvZ9J7Y35r2anp4Xno/QE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHquQCwmQqCBxSWfTlrZAO9vZl5VxDuA2sUPsUNpfP3ZoKFDa7ayEhHxy/J3vXPzZpxyliRN0OYdcEEa1aNDW//XcuO5AY2bgluUYru+3jNbU9gwfpo7fwACNuqdrEecFRJQLREVbdyy7btiW/N3aVuD6gePXXM/+R9d+Qs4ltHSpWbq2ThPKgzJsWy9yGjDECQ8oSoEHAgeT7vAykJ4BqjjpndMNyzJg3lkIkQWmiWsxYEgSXMMsNU/NPZ/TmAcTMqdIFDm8xox5W3/d+/T0VHuq11g+Nx3LskzLN6VPzMn8u975Vm2GOKIztln3EWWUYJSQF6RIDUEsWKx1kznLiVikH0Dbpm0paAPW2MC2S7/r5luAkt0XkfZI5hwZfIHsCmwMM8iBYtDuxlFb//61Dm723uaI8hnLU36w/jNKQFeQsAxig1eZVey+jnikXJ1TwEFEcVJwsoIrNSYZwsC1mxxmZH1JuBy+mGtl+7U1ryYM8J+05NTc5Slpm0cqMyBz4OL/9Gu3VxuUnygpoPPz18KekEE4JFm4fBG/2Nl1eO66zlNqtUsKu84bUttWv64PB3U7V6+bwvXw7uS+hy+74WV49fcNWzt33vl9NLMKF5LZCek9mmMaPTimN5q2BtYFwlN28ZhmLz9Go9Ca/Jo2k8XIXwmz4X9LHpb1MY1js3uX2w/9KTyEcUKXV425NXjs263R8ja5Tls/knCQn2TzMWG91PMWM6e4HKV0eHtCT/4aXeP+OelF3wb0fhg+vPTPu/Xz0eRiIsJR+y2n3Rz2jZUcTIrpA2BRLdVoRAPtTPYLic+lRVlIbMxK1yBT+sQFUKF31C4lK0EhxYfEgWzmZh22Gnbf9rzeoHvmWK1+aLmWfWZ1Lc/3ncZZWOnPhsUBxT6jM6JiKYXdzM/nBHEacKAx5MaKFXgBXP8EcYAE0iI6lgeDUQ63TCp4y673fK8RyoY23G6v3+uHA9v3/V7TPmu2mn1du2Liml7n3ZmAfF+963vqPQZMMgJK4tWccznoXMiSLNGqEIldW6EahUJeArnS4cBxW57JSZoloAibKYuLBGrZIisLZPLNv2MgzEsr4ThjuUBJeQo/TPLwW1UP6RMT5cBVRj2QPYUjl5FdpfMubffopVXBd4uYqMMmiytygjdM9j+9zYwalu3AbPPC3K64b7f8IcQRAPMTfuZhabbx4hXZiV5dsPLOkKrSqdq7RLVlrVitirKhTaWYuYQ3bdNqmhPAhZS951v2CNTcQphfunG2rA8ib+37/AqxoBOBBKRy/LRy+YXnxgS4em5E8visv/qW2Qsp6yZgLY7Z+ol8lSjGnz5ccICVnzTfyL8nlsdv7TqCtRNH5infGILQuVqp++X5g9nATMISKYgs3wU/BnAs+L5xW+QtFyGnaVoI+PiLppSurSOMWUFFNNBLw676ljzFcwbBm9M7mFLhX6/sNf/wyr4fXk6kDqZI3/qS/3Y2SDkuGOQuTkoubX0tX58yOJ3vqP0rweOC77mfCf5+Jp135veWnZoenofObw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064925</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064927</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BD68208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BDB0208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_FUNC_CHILD_SAU_Get_Self_200_OK_P1" searchProperties="true" id="406674fc-6523-4a9c-8f70-1f455a30afb6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BE15208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155BEA7208CE0401F0A059926FE:CFD8A6A0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BE03208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BE03208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BE03208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BE15208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BE5D208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BE15208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BE5D208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH52SXrh2hJnKRbu3F0ZQt76cCekCoiWBJi3orz9JsQiIHj0zzDBZXfnWty75khOBZ7HrB0JAIilnRthpmv+41ahq18fEqrhezSrjhmc1oqhiQZmQiJQboxpUTCMUIoWQCYmZbJqu7XiWY6vf0LH9csP3nJLnlR9N4w4SoaCVS8k2jdUsZsLPwzbNNGE+x4IKn+EZCF8SfxBcXvjK08cFJ7N1smaZB0xaUynnPkKkFAGBOCYlwmfoBO34nETCH9AJwzJN4C1mJJrm297lcllaeiWeTJBr2zayG0j5RIJOjszWr2IzRCEb8/W6jRlnlOCYvmJN6hLklEdGEE94QuV09gm0gxxbQ1uwIhZxyuzIRO8BcnbfRNohmQhsiSl2CrAbGEMCjIBxexM2zaPvdXC9d5hgJsY8mYm99c8oAcsg5nOILFFkVrD7PuKBcrVOgPghI3EqaAZXekzmmIAw+gmM6eqCCjV8kTDy9hsrUUwYkJ+05ARt81S00YHKdOgEhPw//dru1RrlDscptKKzfjDsP3oJiKvfi2R6f8VG9GVU66LnZk5h23lNatPqt/X+oG7m6m1TfH/snmfeqs3C+iJ4OP47uXzoSjKO6PI5eHpyjzswegx7kylyL88FR6Tj9odZb3Zzu5yz31kaTokXlMO44rg3v86WVdR46L5ePbaz6ut1rTblx5PT3h8Hjcmwn05qi4vY7VXH9242dY/dKHAfHAHL1FmIRS9tnwbp6PIcFtXb+/rdr0cn7JCl+xyNV6uztL/kLw/N95y2c9g1FnIwSEdPQGSx1KMRdoye6heWX0uLttDIGueu/lzrk5DApNnSu7Ss+KkSHxr5qpnrdbdeddpOpXLadSquXW937bLt9OzArjQabrXXLfRnzWKPYpuzMdWxtMKu5+drgmTmC2ARJFbGUzIFYX6B2MESGyG7UQeDMwFDrhTcs9u1erlcD7xGx7G7nV7ZrlSDRrdecbvuaU+p9xWX1+w6CcYSkl319nbU+wYInVPQEq/nXKhBF1KVZIGzVMZOKcMlBqm6BBKtw75brleQoLN5DJowmvEojaE0n87zAiGx/nctTERupYLMeSJxnJ/CT5Pc/1bUQ/lEVDsIndEpqJ7CgcvILdL5PO3qdtoFfJBGVB82VVyZULJmsvvpfWb0sGwGZpMXEU7BfbPlhxAHANAX/NB+aTbxooxuRS8uWHVnKFVpFe1d4NKilGZZmje0phVT6ZNEDrJraAAkVbL3MuTPwNAGAn3rxtmw3ou8se/yS+WUDSSWMFPjZ+TLbzw3BiD0cyNUx2f13bfMTkhVNwkrecjWjtWrRDP+8uFCfKL9lLmv/pY8id7bdQBrK47KU70xJGUTvdL3y8sns0G4gqVKEHmyDX4I4FDwXeOmyBsuUk3TKJXw+RdDK13TxITwlMmwY+aGbfXNecqXOfjvTh9gcoV/u7JX4tMr++/lxUDp4AybG1/6384WzceFgNolaM6laa7U61MFZ5MttX8jeFjwbe8rwd/NpPXB/NGyVdP989D6Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH52SXrh2hJnKRbu3F0ZQt76cCekCoiWBJi3orz9JsQiIHj0zzDBZXfnWty75khOBZ7HrB0JAIilnRthpmv+41ahq18fEqrhezSrjhmc1oqhiQZmQiJQboxpUTCMUIoWQCYmZbJqu7XiWY6vf0LH9csP3nJLnlR9N4w4SoaCVS8k2jdUsZsLPwzbNNGE+x4IKn+EZCF8SfxBcXvjK08cFJ7N1smaZB0xaUynnPkKkFAGBOCYlwmfoBO34nETCH9AJwzJN4C1mJJrm297lcllaeiWeTJBr2zayG0j5RIJOjszWr2IzRCEb8/W6jRlnlOCYvmJN6hLklEdGEE94QuV09gm0gxxbQ1uwIhZxyuzIRO8BcnbfRNohmQhsiSl2CrAbGEMCjIBxexM2zaPvdXC9d5hgJsY8mYm99c8oAcsg5nOILFFkVrD7PuKBcrVOgPghI3EqaAZXekzmmIAw+gmM6eqCCjV8kTDy9hsrUUwYkJ+05ARt81S00YHKdOgEhPw//dru1RrlDscptKKzfjDsP3oJiKvfi2R6f8VG9GVU66LnZk5h23lNatPqt/X+oG7m6m1TfH/snmfeqs3C+iJ4OP47uXzoSjKO6PI5eHpyjzswegx7kylyL88FR6Tj9odZb3Zzu5yz31kaTokXlMO44rg3v86WVdR46L5ePbaz6ut1rTblx5PT3h8Hjcmwn05qi4vY7VXH9242dY/dKHAfHAHL1FmIRS9tnwbp6PIcFtXb+/rdr0cn7JCl+xyNV6uztL/kLw/N95y2c9g1FnIwSEdPQGSx1KMRdoye6heWX0uLttDIGueu/lzrk5DApNnSu7Ss+KkSHxr5qpnrdbdeddpOpXLadSquXW937bLt9OzArjQabrXXLfRnzWKPYpuzMdWxtMKu5+drgmTmC2ARJFbGUzIFYX6B2MESGyG7UQeDMwFDrhTcs9u1erlcD7xGx7G7nV7ZrlSDRrdecbvuaU+p9xWX1+w6CcYSkl319nbU+wYInVPQEq/nXKhBF1KVZIGzVMZOKcMlBqm6BBKtw75brleQoLN5DJowmvEojaE0n87zAiGx/nctTERupYLMeSJxnJ/CT5Pc/1bUQ/lEVDsIndEpqJ7CgcvILdL5PO3qdtoFfJBGVB82VVyZULJmsvvpfWb0sGwGZpMXEU7BfbPlhxAHANAX/NB+aTbxooxuRS8uWHVnKFVpFe1d4NKilGZZmje0phVT6ZNEDrJraAAkVbL3MuTPwNAGAn3rxtmw3ou8se/yS+WUDSSWMFPjZ+TLbzw3BiD0cyNUx2f13bfMTkhVNwkrecjWjtWrRDP+8uFCfKL9lLmv/pY8id7bdQBrK47KU70xJGUTvdL3y8sns0G4gqVKEHmyDX4I4FDwXeOmyBsuUk3TKJXw+RdDK13TxITwlMmwY+aGbfXNecqXOfjvTh9gcoV/u7JX4tMr++/lxUDp4AybG1/6384WzceFgNolaM6laa7U61MFZ5MttX8jeFjwbe8rwd/NpPXB/NGyVdP989D6Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6RWhHmKmlaL2hwva4fTkT00CzbZPapAX99TspFgHRo2eGGSarK9/61iVfcsRAllqezxgqOKZEiQY99d8OME3XMbuaYXc7muNasQamhqsBu212ran9iOBUVSLGShQRxgHhPdUyTFszDfGbmIbnuJ7ttCzXfVCVO1QwAS1cWoaqLLKUMK8O21PLgngUMMw8AjLEPA69sX954QlPDzSc1P7RkmUdsOgnnOeersNWjCBKU9iCNNOP9A2fo5h5YzwjgJcFeosZs576tnc+n7fmdosWM90yDEM3XF34xAzP9tX+XrMZxRGZ0uU6AIQSDEGKX4EkdYl4QmPFT2e0wDzJPoE2ddOQ0BpaQA2aDtlX9fcANbtvIm2QLBjQWALMBuwWTVGBCETKr9uop+5/r4PLvZMCEDalRca21j+jhEiFUpqjWGNNZg277yPuKFf/CEEvIjAtGa7QlRyTHEDElOsCTfHiAjMxfDFT6vYrC9ZMGII/acmRvs5T0NZ3VGaAZ4jx/9Ov9V4tUe5AWqL+9dPpy8PZ4T8HlWtfBHfUOh7lsVGeDK+eejWFdeclqVWr39bbg7qaq7dNwenrsBOcHpAE+1eP+U0eRk/Dwp60D+Z2/PuKDQf0lDjtg4vscaRPU+fPKLAS+DTqnL+Cp7CdOIvccLLz2/jk/Hxv1EnPkZ9EJ7MH26/04/DqpLSeaTTv/MKAE7M6a18HxskjOLEuk05wUyF3cpu8GtfI0at73PZDzJ7vBi8PE3+xNxy6L9W99Ts+47FzM7R5Pu+957Sew6axkYNx+fgHQd4s5WhEA2Uo+gX419IiLTjWprWrl0t9YhwRrvblLikrXinEB8eeaOZyHXYPzcBst4/D9sAyukFoOIY5NHyj7brW4TBs9GfJYotiQMkUy1hSYZfz8zVBmHkMkRgVWkVLmCCmfoE4ABwoEbkVB4MShiZUKHh4aHY7rj08Hhza3eO2P/DdwAzDsGOZdhD6pqpcUT4io8KfclRsqre9od63COIcIynxcs6ZGHTGRUmeQVXy1GxVoEVQKS6BQuqwZzndts5wlqdIEtYzGpcpauVJXhdIZ8t/SwOQ1VbMYE4LDtL6FH6a5Pa3ph7CJ8bSgcmMjpHoKdpxGVlNOh/SdnZeWg28X8ZYHjZRXF5guGSy+el9ZuSwrAZmlRdkZsN9teWHEDsA9C/46dulWcWLK7wWvblgxZ0hVKXftPcZtJ5bZVWVdUM7UjELAa+butHRxwiWQvZeJvQJEX0FoX/rxlmx3oq8sm/yK3lCxhxwlInxU+rlN54bY8TkcyMSx2fx3bfMRkhRN44WfJctSMWrRDL+8uECPSj9hPla/M1pEb+3awfWWhyRp3hjcExmciXvl5dPZgNSAYuFINJiHXwXwK7gm8ZVkVdcuJimx5Kjz78oUul6KoCQloRHA7U2rKtvzZO/5Mh7d/oAUyv825W9YJ9e2feXF2OhgxlQV774v501XI8LRGIXwzWXnroQr08RnMzW1P6N4G7BN+yvBH8zk/4H80fLWk23z0P/Lw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064930</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064932</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BE16208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BE5E208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_FUNC_CLG_Get_CHILD_200_OK_P1" searchProperties="true" id="b60020f8-3a15-47de-a20d-c92699c3e3e6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BEC3208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155BF55208CE0401F0A059926FE:BC6A5638"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BEB1208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BEB1208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BEB1208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BEC3208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BF0B208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BEC3208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BF0B208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6vgOLwmKkgQwsbaQlfateqXK+McwFuwU9sBul9/ndBQYLS3uxIS8snxc57z4sc+V2SZeEFXKZCaCW4N+237nxqFmHq46RCfVJ2a784cnwJ2IG7MKK43ptj3bWuoVAZDrjThum17Lq462DW/W+wGNT+oNioedh9t6wdIZaCNS8W1rc0y4SoowrbtTPJAEMVUwMkSVKBpMOleXQbGMyAlJ7tzvmVZBJSdhdZpgBCtxEAhSWiFiiU6Rwc+57EKJmzOic4kvMSMVdt+2bteryvrakXIOfJc10Wuj4xPrNj8s935VG6GeMhnYrsOCRecUZKw3yQndQV6IWKrm8yFZHqxfAMaI+zm0A5sqENxjX+20WuAgt0HkQ5ISkUctSC4BLuBGUjgFKy7m2Hb/vyxDm733krC1UzIpTpa/x0l4CtIRAqxo8rMSnYfRzxRrs450GDIaZIptoJRPiYpoaCsawkztrlkygxfrKyi/dZGlRMG9G9aco72eRra6ERl+mwOSv+ffu33aovygyQZdL5F5P6KRbV4IZfJ2T3c9G78599Vfe+u2wWFfectqV2rX9bHg7qbq5dNhF0O5snPh8vvX5sMRURMm41ous4ezvrjNb2jCo+6Hsbi9ur7JFy3HsU3OhyN/X5UG4UZEpOL8a9584JFXpfIT2xc7V5cXc+j0R3etKLL63QeNmuT5pdBF6XDwVPW2PzEX+WTWw/5JJ2wtSYPcozORkhOHx57s4uG+32V4oir3/hTGNcf+4O41+NkkX65H083rfZrTvs5HBpLOZhk059AdbnMR2PYtwamX0S/Ly25hcXOrHAN0lyflAau7U6+K5eVIDPiw+LANHO7jloNHOJ6vReFVc9thZFbc/HA7bp13/cag6jUny2LI4qh4DOWx8oVdjs/7xOky0ABj0E6K5HRBSj7HcQ+0cQa8htzMARXcCuMguOwWQ39fqvq+t5g0Bj0+16z1mx5tVat0ei5ddsaCT3mY9mdaZCH6l09UO8boCxlkEt8PufKDLrSpiRPZJXpBFdWpMIhM5eAzHU4MBHqSLFlmkBOGC1FnCVQSRdpUSCktv+eQ6gqrEzRVEhNkuIUvpnk8beyHsYnZrmDyjPqgekpnLiMvDKdt9Nu7KddwnezmOWHzRRXS0a3TA4/vc5MPiy7gdnlZU5YyX235S8hTgCgd/ih49Ls4sUrthe9vGDNnWFUpVO294lUnirZapUVDW3miikNPMLIbaIJ0MzI3vOt+AUc7SDQh26cHeujyDv7Ib9ML/hEEw1LM35WsfzAc2MCKn9uDM3x2Xz0LXMQ0tRNw0afsoWJeZXkjN99uNCA5n7GfG3+1kLGr+06gbUXx+Rp3hia8Xm+yu+X5zdmgwoDy4wgCrkPfgrgVPBD467IOy7aTNM00/D2FytXurZNKBUZ18O+XRj21bfgqZ9TCF6d/oApFP7lyt6oN6/sh6vLidHBJbF3vuy/nR1WjAsFs0uxgkvb3pjXpwnO53tq/0LwtOD38HuCf5hJ5w/zn5a9mh6fh86/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6vgOLwmKkgQwsbaQlfateqXK+McwFuwU9sBul9/ndBQYLS3uxIS8snxc57z4sc+V2SZeEFXKZCaCW4N+237nxqFmHq46RCfVJ2a784cnwJ2IG7MKK43ptj3bWuoVAZDrjThum17Lq462DW/W+wGNT+oNioedh9t6wdIZaCNS8W1rc0y4SoowrbtTPJAEMVUwMkSVKBpMOleXQbGMyAlJ7tzvmVZBJSdhdZpgBCtxEAhSWiFiiU6Rwc+57EKJmzOic4kvMSMVdt+2bteryvrakXIOfJc10Wuj4xPrNj8s935VG6GeMhnYrsOCRecUZKw3yQndQV6IWKrm8yFZHqxfAMaI+zm0A5sqENxjX+20WuAgt0HkQ5ISkUctSC4BLuBGUjgFKy7m2Hb/vyxDm733krC1UzIpTpa/x0l4CtIRAqxo8rMSnYfRzxRrs450GDIaZIptoJRPiYpoaCsawkztrlkygxfrKyi/dZGlRMG9G9aco72eRra6ERl+mwOSv+ffu33aovygyQZdL5F5P6KRbV4IZfJ2T3c9G78599Vfe+u2wWFfectqV2rX9bHg7qbq5dNhF0O5snPh8vvX5sMRURMm41ous4ezvrjNb2jCo+6Hsbi9ur7JFy3HsU3OhyN/X5UG4UZEpOL8a9584JFXpfIT2xc7V5cXc+j0R3etKLL63QeNmuT5pdBF6XDwVPW2PzEX+WTWw/5JJ2wtSYPcozORkhOHx57s4uG+32V4oir3/hTGNcf+4O41+NkkX65H083rfZrTvs5HBpLOZhk059AdbnMR2PYtwamX0S/Ly25hcXOrHAN0lyflAau7U6+K5eVIDPiw+LANHO7jloNHOJ6vReFVc9thZFbc/HA7bp13/cag6jUny2LI4qh4DOWx8oVdjs/7xOky0ABj0E6K5HRBSj7HcQ+0cQa8htzMARXcCuMguOwWQ39fqvq+t5g0Bj0+16z1mx5tVat0ei5ddsaCT3mY9mdaZCH6l09UO8boCxlkEt8PufKDLrSpiRPZJXpBFdWpMIhM5eAzHU4MBHqSLFlmkBOGC1FnCVQSRdpUSCktv+eQ6gqrEzRVEhNkuIUvpnk8beyHsYnZrmDyjPqgekpnLiMvDKdt9Nu7KddwnezmOWHzRRXS0a3TA4/vc5MPiy7gdnlZU5YyX235S8hTgCgd/ih49Ls4sUrthe9vGDNnWFUpVO294lUnirZapUVDW3miikNPMLIbaIJ0MzI3vOt+AUc7SDQh26cHeujyDv7Ib9ML/hEEw1LM35WsfzAc2MCKn9uDM3x2Xz0LXMQ0tRNw0afsoWJeZXkjN99uNCA5n7GfG3+1kLGr+06gbUXx+Rp3hia8Xm+yu+X5zdmgwoDy4wgCrkPfgrgVPBD467IOy7aTNM00/D2FytXurZNKBUZ18O+XRj21bfgqZ9TCF6d/oApFP7lyt6oN6/sh6vLidHBJbF3vuy/nR1WjAsFs0uxgkvb3pjXpwnO53tq/0LwtOD38HuCf5hJ5w/zn5a9mh6fh86/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3S6H53StNzajjDDRY49oih1u/f25UxIFxBt09KkgP76kxSLgOjRM8MMk9WVb33rki854ziObK/DOWSCJkzz+y39H+Qgp+qGjoEIrhm1GmADN0nDmKKJXUN2s44mU13zOc/BZ1xgJlq6jayqYSH5u7OQV3O9qlupIutB1+4h4xJaulSQrq3jiHGvCNvS84x5CeaUewzHwD1BvKBzNfSkp4dLTnr7bMOyCJi150KknmmSSggEoohUSBKbZ+aez1nIvYDOGBZ5Bq8xQ97SX/euVqvKqlpJsplpI4RM5JrSJ+R09kNvn5SbIfTZNNmse5gljBIc0ResSF2BmCeh1olmSUbFPP4A2jItpKANWBODWDX2QzffAhTsvoi0RzLj2OBzbJVgY5hCBoyA9nPst/QfX+vgZu9dhhmfJlnMD9bfowRsCVGSQmjwMrOS3dcRj5SrfQbE8xmJck6XcK3GJMUEuHaTwZSuh5TL4Qu5VrRfW/NywoB8pyVn5i5PSds8Upk+nQEX/6dfu73aoNzjKIc2zh7N61+TjAuYLG7Y7YiF7uXzz3j+4rcKCrvOG1LbVr+uDwd1O1evm/rEbKzvr4a17qLhPGXpzI3gtB/XkVlv3L/8pM9Xt/yicdNZOPhpZt/QC/tPKJAbX9+y7sWoEbjW3TTETj47Jb9PevfiJl1ZjxfNLnYexqMV+tOM/bTXCXrny/G9P34S4cT+Ywf+y3j5OGQPT1dB4Ka/H9FL9MggoIu+Pboc/k0n1l8nT/UX/Ms5fRhedqqMjLrOxG+95bSbw76xlIMgnzwCEeVSjYbf1wayX1h8Li3KQkNjWrh6qdIn2QEm9LbapWTFy6X40NCTzdysz52G1bPq9e4AdW3k9M5RDVkD1EF117Ubg/NSfzYsDij2EjalKpZS2M38fE6QxB4HFkJmLJOczIHrnyD2scCaz8byYCSMw10iFbzRGCC733frqNd1m41urXvesQeDZtUduDUH9XXtOhEjNso6UwHZvnpX99R7DISmFJTEqznnctC5kCVZ4GUuIquyxBUGubwEMqXDnl1z6iancRqBImzGSZhHUEnnaVEgk2/+bQMTXlgpJ2mSCRwVp/DDJA+/lfWQPiFVDlxl1AXZUzhyGdllOu/Srh29tEr4Th5SddhkcUVGyYbJ/qe3mVHDsh2YbV6EWyX37ZZvQhwBMD/hZx6WZhsvXNKd6OUFK+8MqSrtsr0LXFlU8uUyLxraVIqZSXjTMlHTDIDkUvae75InYOYWwvzSjbNlfRB5a9/nl4s5CwQWEMvx04rlF54bAXD13PDl8Vl/9S2zF1LWTcBaHLP1IvkqUYw/fbgQjyg/ab6Rf6skC9/adQRrJ47MU74xBGUztVL3y/MHs0ESCUulICbZLvgxgGPB943bIm+5CDlNk1zAx180pXQtHROS5Ez4SlGkYVd9C57iOQXvzekdTKHwr1f2mn94Zf++GgZSB2Osb33pfzsbtBgXAnIXpwWXlr6Wr08ZnM121P6V4FHBP+9anwn+fibtd+b3lp2aHp6H9r8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064935</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064937</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BEC4208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BF0C208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_FUNC_NONCLG_FAU_Get_CHILD_200_OK_P1" searchProperties="true" id="d20dc8c6-7a74-469e-a131-52d7f28e36f7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155BF83208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832B82E190E0401F0A059926F9:3BFD47A8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155BF71208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155BF71208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155BF71208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155BF83208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155BFCB208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C155C005208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155BF83208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155BFCB208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C155C005208CE0401F0A059926FE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6eQNwIkKkhAYEs3uq7QtduXK2M74DWxwXaA8uuvHRoKlPZ2V0JCPjl+znNe/NgXAuSZF3WFwFwSRo0kbpv/OK106rRCz3Ia/tSq+/W6FWK/YQUQpAg1vKn6M41EiAInVEhAZdv0HNe3XEf9Jq4T1cOo7tZ8x/ttGj8xFwpaudQc09jkGRVRGbZtFpxGDAgiIgpyLCIJo3F39C1SnhGoOJmdix3LMiDvzKVcRLYNawhDnGWwBlluX9hHPhdIRGMyo0AWHD/FRKJtPu1dr9e1tV9jfGZ7juPYTmgrHyTI7KPZ+VBtxiihKdut+4AySiDIyBZoUiMs5wwZ3WzGOJHz/BVo13YdDW3hDbSgW6cfTfs5QMnunUhHJLkAlpgDtwK7wSnmmEJs3N4kbfPj+zq42zvhgIqU8VycrP+OEqYrnLEFRpaoMqvYvR/xTLk6FxhGCYVZIcgKX+kxWQCIhXHNcUo234hQw4eEUbbf2IhqwjD8m5Zc2Ic8FW37TGViMsNC/p9+HfZqh/ITZAXu4CS5vZvHP7x+Iuch743WPLj8c4cuk0G7pHDovCO1b/XT+nRQ93P1tKkXpNNuOvhyXwRD0bxfBFl3Ptn8zkaX8Kv3+4qjgfjVXSy7D+Ft3rymOVz2twnrjdAXzDx/wL4g9+rTY/AQ3/ufP1z/KR4mw182X7o303TNe1uUXd+Fdn8L7oehP2vcrrJlsoFXvYFw/M99uN4iiaaTaxCPUgQfw9aVey9+ZMXUoR+603zrge2nkDhei2fj4rHefs7pMIdjYyUH42L6B0NZLfVoJLExVP0C8m1p0RaCrLR0jRZan4TEVJodvUvLSlQo8SEoUs3crQethtt3g6A3bPme0+oPnLrjDp2uE4Sh1xgOKv3ZsTih2Gc0JTqWVtjd/LxNEOaRwBRhbq1YAedYmG8gxkACI6E36mAwKvCEKQV3vWaz4YWNsOV5ziCO4zAc9AM/HjqtYRD3AtO4YvI7/c67qcT8WL39I/W+wZAsCNYSr+dcqEEXUpVkCVaFzNzaCtQoLtQlwLUOR169FdiC5IsMa8J2zlCR4dpivigLZIvdv2cBKEorEXDBuARZeQpfTfL0W1UP5YOIdhA6ox5WPcVnLiO/Suf1tBuHaVfw3QIRfdhUcSUncMfk+NPzzOhh2Q/MPi8o3Ir7fstfQpwBsN/gZ5+WZh8PrchB9OqCVXeGUpVO1d4lqC1rxWpVlA1tasXkCt52badpjzEslOw9TtgDpvYewn7XjbNnfRJ5bz/mV8g5HUsgca7GzyiX73hujLHQz41EHZ/Ne98yRyFV3STeyHO2fqZeJZrxmw8XGEHtp8zX6m/N+HPi57AO4qg81RtDEjrTK32/PL4yG5ApWKIEkfFD8HMA54IfG/dF3nORapqmhcSvfzG00rVNACErqExiszQcqm/JUz4ucPTs9AKmVPinK3sjXr2y70ffxkoHc2Dufcl/O1ukHBeI1S5BSi5tc6Nenyo4nR2o/RPB84LfdN8S/ONMOi/MLy0HNT09D51/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6eQNwIkKkhAYEs3uq7QtduXK2M74DWxwXaA8uuvHRoKlPZ2V0JCPjl+znNe/NgXAuSZF3WFwFwSRo0kbpv/OK106rRCz3Ia/tSq+/W6FWK/YQUQpAg1vKn6M41EiAInVEhAZdv0HNe3XEf9Jq4T1cOo7tZ8x/ttGj8xFwpaudQc09jkGRVRGbZtFpxGDAgiIgpyLCIJo3F39C1SnhGoOJmdix3LMiDvzKVcRLYNawhDnGWwBlluX9hHPhdIRGMyo0AWHD/FRKJtPu1dr9e1tV9jfGZ7juPYTmgrHyTI7KPZ+VBtxiihKdut+4AySiDIyBZoUiMs5wwZ3WzGOJHz/BVo13YdDW3hDbSgW6cfTfs5QMnunUhHJLkAlpgDtwK7wSnmmEJs3N4kbfPj+zq42zvhgIqU8VycrP+OEqYrnLEFRpaoMqvYvR/xTLk6FxhGCYVZIcgKX+kxWQCIhXHNcUo234hQw4eEUbbf2IhqwjD8m5Zc2Ic8FW37TGViMsNC/p9+HfZqh/ITZAXu4CS5vZvHP7x+Iuch743WPLj8c4cuk0G7pHDovCO1b/XT+nRQ93P1tKkXpNNuOvhyXwRD0bxfBFl3Ptn8zkaX8Kv3+4qjgfjVXSy7D+Ft3rymOVz2twnrjdAXzDx/wL4g9+rTY/AQ3/ufP1z/KR4mw182X7o303TNe1uUXd+Fdn8L7oehP2vcrrJlsoFXvYFw/M99uN4iiaaTaxCPUgQfw9aVey9+ZMXUoR+603zrge2nkDhei2fj4rHefs7pMIdjYyUH42L6B0NZLfVoJLExVP0C8m1p0RaCrLR0jRZan4TEVJodvUvLSlQo8SEoUs3crQethtt3g6A3bPme0+oPnLrjDp2uE4Sh1xgOKv3ZsTih2Gc0JTqWVtjd/LxNEOaRwBRhbq1YAedYmG8gxkACI6E36mAwKvCEKQV3vWaz4YWNsOV5ziCO4zAc9AM/HjqtYRD3AtO4YvI7/c67qcT8WL39I/W+wZAsCNYSr+dcqEEXUpVkCVaFzNzaCtQoLtQlwLUOR169FdiC5IsMa8J2zlCR4dpivigLZIvdv2cBKEorEXDBuARZeQpfTfL0W1UP5YOIdhA6ox5WPcVnLiO/Suf1tBuHaVfw3QIRfdhUcSUncMfk+NPzzOhh2Q/MPi8o3Ir7fstfQpwBsN/gZ5+WZh8PrchB9OqCVXeGUpVO1d4lqC1rxWpVlA1tasXkCt52badpjzEslOw9TtgDpvYewn7XjbNnfRJ5bz/mV8g5HUsgca7GzyiX73hujLHQz41EHZ/Ne98yRyFV3STeyHO2fqZeJZrxmw8XGEHtp8zX6m/N+HPi57AO4qg81RtDEjrTK32/PL4yG5ApWKIEkfFD8HMA54IfG/dF3nORapqmhcSvfzG00rVNACErqExiszQcqm/JUz4ucPTs9AKmVPinK3sjXr2y70ffxkoHc2Dufcl/O1ukHBeI1S5BSi5tc6Nenyo4nR2o/RPB84LfdN8S/ONMOi/MLy0HNT09D51/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0SZxwqchHtUkLhO00JpC51Oz8uRcTbgabCp7QTo148dGgoM7ekcCQl5Z3vttS9e9oXEi8jzm1KCUJQzK+jU7X89UsGTGinmStWKlyuCW8hVS9VqDlzANa8yAWfq2lYgZQwBkwozVbc9R3u5jv6NXccv1vyil69Vav/Y1g8QUkNrl7xjW+tFxKSfhq3bsWA+x5JKn+EFSF8Rf9Qc9H3t6eOMk9242LJMA4rGXKmljxDJh0Agikie8AW6QAc+F6H0R3TGsIoFvMUMZd1+27tarfKrQp6LGfIcx0FODWmfUNLZN7txlm2GMGBTvl23MeOMEhzRV2xIDUDNeWg1oxkXVM0XH0C7yHUMdA7WJEfcIvtmo/cAKbsvIh2QFBLn5By7Gdg9TEEAI2A93Ad1+9vXOrjdOxaYySkXC3m0/jtKwBKI+BLCnMwyy9h9HfFEuRoXQPyAkSiWNIEbMyZLTEBatwKmdN2nUg9fKK20/dZaZhMG5G9acoH2eWra6ERlOnQGUv2ffu33aovyA0cxNJKRi+J7/HhFvl8O2ORlczVsX1eaV1ySekph33lLatfqt/XxoO7m6m3Tz5634OMubYkHNSgkjyXqzgr9B6HK/VJFdSfJzfPrOn7E3+8Yflo+gQh7dxM5rdLuLZp5Mng6rz3gYNVr3/eHZ49X1/x5NujPx1UUju76s+5Pp9h3xpdXJdebnz8PhnjmNs/Xpdqv4t26ExReNu3b3pD2bh3nDl+XlOLVWvIwJI+d8Gw0cskl6hdem/3mXLQ3q4TU33Paz+HQmMnBKJ78AqKypRmNoGP1dL+w+lxajIWGuWnq6i+NPkkFTNkNs8vIih9r8aGhr5u5XXerZbftlkqtXrvlOdV21yk6bs9pOqVazSv3upn+bFkcUWxzNqUmllHY7fx8TpAsfAksBJFLeEzmIO1PEDtYYStg9/pgcCZhzLWCV0rdas/rOYWWV6yV2+1WodrrFMsVV/+65ZbW4RuuhmwomlMF4lC9CwfqfQ+ELikYiTdzLvWgS6VL8oKTWEVuPsF5BrG+BITRYd8rVktI0sUyAkMYLXgYR5BfzpdpgZDc/ns5TGRqpZIsuVA4Sk/hh0kef8vqoX1CahykyagFuqdw4jIqZOl8nHZ5P+0MvhmH1Bw2XVwlKNkyOfz0PjNmWHYDs8uLSDfjvtvylxAnANAn/NBxaXbxwoTuRc8uWH1naFVpZO19wfmXfJwkcdrQilFMoeGRi5wKGgGJtextxvwZGNpBoC/dODvWR5F39kN+sZqzkcIKFnr8rHT5hefGCKR5bgT6+Ky/+pY5CKnrpmCtTtnakX6VGMafPlyIT4yfNt/qvxUX4Xu7TmDtxdF56jeGomxmVuZ+2XwwG4RrWKoFkYt98FMAp4IfGndF3nFRepomsYKPv1hG6eo2JoTHTAUdOzXsq2/KU22W4L87/QGTKvzblb2WH17ZPwf9kdbBBbZ3vvS/nXM0HRcCepekKZe6vdavTx2czfbU/o3gacGvuJ8J/mEmjT/Mf1r2anp8Hhq/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j4yxDDYfnsAMNaRxGiA3pLTJyx1FXoNaWwJLBpJfX8nEBAjJTe8MM4zWq7NnP3SkM4HTpOb3hIBMUs6MsN8x/203HZfUH1oWIo3YcqEeWbhdi61GI47cB9RqtlqxaYRC5BAyITGTHbOGnLrlIPW7dZDvtn3Xq7Zrzr1pTCETClq5VJFpbNKECb8I2zHzjPkcCyp8hlMQviT+pDe88pWnj0tOZvdsy7IImHXnUi582ybVCAgkCakSntpn9oHPWST8CZ0xLPMMnmNGomM+712v19V1vcqzmV1DCNmobSufSNDZZ7P7qdwMUchivl0HmHFGCU7oE9akhiDnPDJ6yYxnVM7TN6Ad20Ea2oINsYjjss+m/RKgYPdBpAOSmcCWmGOnBLuBGDJgBIzvN2HH/PyxDm733maYiZhnqTha/x0lYCtI+AIiS5SZlew+jniiXN0zIH7ISJILuoKRHpMFJiCM6wxiurmiQg1fJIyi/cZGlBMG5G9acmbv81S07ROV6dMZCPl/+rXfqy3KFCc5dC+WXvtrPI9Xdf5bXk4f+PA6Wt19mbr9XqegsO+8JbVr9fP6eFB3c/W8KWyJSrwZxNf4x+W4cv9jHdSDsOc9ZujreHDTuK+El3k0HcwxyjfDSri58lp9mNbHy2+pfRGTfxZ3OJ3RwbC9rvBP9+J35SkafXU3zfbTCI9j1F43mvdw0YLKcn03fXBzV7Zu7m8bwx+Po+b8cuksPRKF34OLUfNuNhLSTdGv5qI9DuBTPBzE/aAnVqEd/YzrlW/C7bzktJ/DobGUg0n+8AuILJd6NMK+ca76heX70qItNLLiwtVfaH0SEpg0u3qXlhU/V+JDI181c7setBpO4HhegJBXQ61ggFzknKMe8trtWuN8UOrPlsURxYCzmOpYWmG38/M+QZL6AlgEmbXiOZmDMN9B7GOJjZDdqIPBmYBbrhR80O/3Gm7guvWgjwYt1PA810Wo5w3OneAcBaYx4nLMxlkvlpAdqnf9QL1vgNAFBS3xes6FGnQhVUmWeJXLxKmucJVBri6BTOuwX3Nbni1oukhAE7ZTHuUJVBfzRVEgW2z/axYmorBSQRY8kzgpTuGbSR5/K+uhfCKqHYTO6AuonsKJy6hepvMqbffkpVXC9/KI6sOmiiszSrZMDj+9zIwelt3A7PIiwim577b8JcQJAPsdfvZxaXbxohXdi15esOrOUKrSLdu7xNVlNV+t8qKhTa2YmYK3HRs17QmQXMne4y3/DczeQdgfunF2rI8i7+yH/HI5ZxOJJaRq/Ixi+YHnxgSEfm6E6vhsPvqWOQip6iZhI0/ZgkS9SjTjdx8uxCfaT5mv1d+aZ9FLu05g7cVReao3hqRsplf6fnl8YzYIV7BUCSLP9sFPAZwKfmjcFXnHRappesglvP3F0ErXMTEhPGcy7JuFYV99C57ycQH+i9MrmELhn6/sjXjzyv45vJooHUyxufOl/+1s0WJcCKhdghZcOuZGvT5VcDbbU/tngqcE/8t503lP8A8z6b4yv7bs1fT4PHT/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064940</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064942</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_064943</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155BF84208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155BFCC208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C155C006208CE0401F0A059926FE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_FUNC_ADULT_SAU_Get_CHILD_200_OK_P1" searchProperties="true" id="8026e91e-425a-46cc-bef7-3e765835e988"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832B9EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832C6BE190E0401F0A059926F9:14B40CC8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832B8CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832B8CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832B8CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832B9EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832BE6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832C20E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832B9EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832BE6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832C20E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx46xbHOxPYEZh0tLCwkH0jbtyxlF3oBSWwJLBidfX8nEBCjJSc8MM4y2t9Ze+6IlXQicJm4YCQGZpJwZw17b/LcBjuf4HrHAm/tW3WuAdeffORZy59jBKPbnLd80hkLkMGRCYibbposcz3KQ+t04KKwHYd2vuV7w0zS+QSYUtHKpIdMo0oSJsAzbNvOMhRwLKkKGUxChJOEsGo9C5RniipPZudixLANmnaWUq9C2SS0GAklCaoSn9oV95HMRi3BGFwzLPIOnmLFom097t9ttbevVeLawXYSQjQJb+cSCLt6bnXfVZoiHbM536y5mnFGCE/qINakxyCWPjShZ8IzKZfoCtGM7SENbUBCLOHX23rSfA5Ts3oh0RDIT2BJL7FRgU5hDBoyA8XU6bJvv39bB3d6bDDMx51kqTtZ/RwnYBhK+gtgSVWYVu7cjnilX5wJIOGQkyQXdwJUekxUmIIxJBnNajKhQwxcLo2y/UYhqwoD8TUsu7EOeirZ9pjI9ugAh/0+/Dnu1Q/mGkxw6H5u2nd7eu//8/DbuJTe3Y3nzFU2ve2j2tV1SOHTekdq3+ml9Oqj7uXraJPJtq87Tq/v1w8x7WE1aCb0WA7SMGtAMmP0ZtqwxvfMnjx9+rrdjshKjbHKXfXQffi15I8eNFvKb37/cD5fFOHv3/Ttjn4Dcjn58kR8m60f4LIokjZrbIt/UC8cPloPNkhejRb3lAtj9wfaawrwxePQer/qf8pEzc2fFesu60WTxDrmNH1PWdT5+/kI5jYDck/ZzToc5HBsrOZjld/dAZLXUozHsGQPVLyxflxZtobE1L13DldYnIYFJs6N3aVkJcyU+NA5VM3frvt90uq7vuZdBv+8EqI/qyBmgCDWCwG0Ogkp/dixOKHY5m1MdSyvsbn5eJ0jSUACLIbM2PCdLEOYriD0ssTFkU3UwOBNww5WCB91uMwqibr9XR14fOU6zfzmIAtSKoktHkTeNKy6v2XUWzSVkx+rtHan3FAhdUdASr+dcqEEXUpVkjTe5TJzaBtcY5OoSyLQOh27db9iCpqsENGE75XGeQG21XJUFssXu37UwEaWVCrLimcRJeQpfTPL0W1UP5RNT7SB0RpegegpnLiOvSufltJuHaVfwUR5TfdhUcWVGyY7J8afnmdHDsh+YfV5EOBX3/Za/hDgDYL/Czz4tzT5evKEH0asLVt0ZSlU6VXvXuLau5ZtNXja0pRUzU/C2Y6OWPQOSK9l7uOG/gNl7CPtNN86e9Unkvf2YXy6XbCaxhFSNn1Eu3/DcmIHQz42hOj7FW98yRyFV3SQU8pytm6hXiWb86sOFhET7KfNE/W15Fj+36wzWQRyVp3pjSMoWeqXvl4cXZoNwBUuVIPLsEPwcwLngx8Z9kfdcpJqmu1zCy18MrXRtExPCcyaHPbM0HKpvyVM+rCB8dvoDplT4pyu7EC9e2bfj0UzpYIrNvS/9b2eLluNCQO0StOTSNgv1+lTB2eJA7Z8Inhd8v/ua4B9n0vnD/KfloKan56HzGw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx46xbHOxPYEZh0tLCwkH0jbtyxlF3oBSWwJLBidfX8nEBCjJSc8MM4y2t9Ze+6IlXQicJm4YCQGZpJwZw17b/LcBjuf4HrHAm/tW3WuAdeffORZy59jBKPbnLd80hkLkMGRCYibbposcz3KQ+t04KKwHYd2vuV7w0zS+QSYUtHKpIdMo0oSJsAzbNvOMhRwLKkKGUxChJOEsGo9C5RniipPZudixLANmnaWUq9C2SS0GAklCaoSn9oV95HMRi3BGFwzLPIOnmLFom097t9ttbevVeLawXYSQjQJb+cSCLt6bnXfVZoiHbM536y5mnFGCE/qINakxyCWPjShZ8IzKZfoCtGM7SENbUBCLOHX23rSfA5Ts3oh0RDIT2BJL7FRgU5hDBoyA8XU6bJvv39bB3d6bDDMx51kqTtZ/RwnYBhK+gtgSVWYVu7cjnilX5wJIOGQkyQXdwJUekxUmIIxJBnNajKhQwxcLo2y/UYhqwoD8TUsu7EOeirZ9pjI9ugAh/0+/Dnu1Q/mGkxw6H5u2nd7eu//8/DbuJTe3Y3nzFU2ve2j2tV1SOHTekdq3+ml9Oqj7uXraJPJtq87Tq/v1w8x7WE1aCb0WA7SMGtAMmP0ZtqwxvfMnjx9+rrdjshKjbHKXfXQffi15I8eNFvKb37/cD5fFOHv3/Ttjn4Dcjn58kR8m60f4LIokjZrbIt/UC8cPloPNkhejRb3lAtj9wfaawrwxePQer/qf8pEzc2fFesu60WTxDrmNH1PWdT5+/kI5jYDck/ZzToc5HBsrOZjld/dAZLXUozHsGQPVLyxflxZtobE1L13DldYnIYFJs6N3aVkJcyU+NA5VM3frvt90uq7vuZdBv+8EqI/qyBmgCDWCwG0Ogkp/dixOKHY5m1MdSyvsbn5eJ0jSUACLIbM2PCdLEOYriD0ssTFkU3UwOBNww5WCB91uMwqibr9XR14fOU6zfzmIAtSKoktHkTeNKy6v2XUWzSVkx+rtHan3FAhdUdASr+dcqEEXUpVkjTe5TJzaBtcY5OoSyLQOh27db9iCpqsENGE75XGeQG21XJUFssXu37UwEaWVCrLimcRJeQpfTPL0W1UP5RNT7SB0RpegegpnLiOvSufltJuHaVfwUR5TfdhUcWVGyY7J8afnmdHDsh+YfV5EOBX3/Za/hDgDYL/Czz4tzT5evKEH0asLVt0ZSlU6VXvXuLau5ZtNXja0pRUzU/C2Y6OWPQOSK9l7uOG/gNl7CPtNN86e9Unkvf2YXy6XbCaxhFSNn1Eu3/DcmIHQz42hOj7FW98yRyFV3SQU8pytm6hXiWb86sOFhET7KfNE/W15Fj+36wzWQRyVp3pjSMoWeqXvl4cXZoNwBUuVIPLsEPwcwLngx8Z9kfdcpJqmu1zCy18MrXRtExPCcyaHPbM0HKpvyVM+rCB8dvoDplT4pyu7EC9e2bfj0UzpYIrNvS/9b2eLluNCQO0StOTSNgv1+lTB2eJA7Z8Inhd8v/ua4B9n0vnD/KfloKan56HzGw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4yRzcVgT2CGW06dQi6QpqEvZxRpG5TasmvJXPL1lUxMgJKc9Mwww2h7a+21L1rSucBxVPW7QkAmWcKNYNA2/yV1p+E92rblejVq1e3Wo9Wq0dCyw6rreRRCu0ZMIxAih4ALiblsm1XbqVmOrX53ju3XPb9hVxzX/mEa95AJBa1cKrZprOOIC78I2zbzjPsJFkz4HMcgfEn8aXc88pWnj0tOZud8y7IImHUWUqY+QqRCgUAUkQpJYnSODnzOqfCnbM6xzDN4iUlF23zZu1qtKqtaJcnmqGrbNrI9pHyoYPPPZudTuRlowMNku+5jnnBGcMSesSY1BrlIqNGN5knG5CJ+A9pBjq2hLVgTizh1/tlErwEKdh9EOiCZCWyJBXZKsAmEkAEnYHybBG3z88c6uN17l2EuwiSLxdH67ygBX0KUpEAtUWZWsvs44olydc6B+AEnUS7YEq70mKSYgDBuMgjZesSEGj4qjKL9xlqUEwbkb1pyjvZ5KtroRGUGbA5C/p9+7fdqi3KPoxw6/dnjPF1fzm6/99A/Y3pPXX572UBfFvCzXVDYd96S2rX6ZX08qLu5etk0no9/bHosS0W3WVtOeP9s0qT9q/VT/4oHdyj0hjfJsNd0G+NVFn9fyIn9MPnq8sfuIu9lLndvmVPHM5Ti6P7h09cNX10+jxozGI3Orr6wG+qSAR+vW8G3AfS/zSfDmXhe3kYP9DrJ683Bj/geP59dt57Xs1H1NgjD4Hq4Oqt9oWP89AlPNtPNqHoTBPjpavIUzO677dec9nM4NJZyMM0fn4DIcqlHIxgYF6pfWL4vLdrCqBUWrn6q9UlI4NLs6F1aVvxciQ+jvmrmdj1suU6/2qpVe0N36Hj20K7bzoXdtRueV3UvvFJ/tiyOKPYTHjIdSyvsdn7eJ0hiXwCnkFnLJCcLEOY7iAMssRHwiToYCRdwlygFv7DdRrfRq3rd5qA2bHUbrucMnFa973qDZsNrmsZVIq/5ddYNJWSH6l07UO8JEJYy0BKv51yoQRdSleQXXuYycipLXOGQq0sg0zrsV+utBhIsTiPQhFGc0DyCSrpIiwIhsf2vWpiIwsoESZNM4qg4hW8mefytrIfyoUw7CJ1RD1RP4cRlVC/TeTttdz/tEr6bU6YPmyquzBjZMjn89Dozelh2A7PLiwin5L7b8pcQJwDQO/zQcWl28eiS7UUvL1h1ZyhV6ZTt/YUrvyr5cpkXDW1qxcwUPHKQ3URTILmSvc1d8hM42kGgD904O9ZHkXf2Q365XPCpxBJiNX5GsfzAc2MKQj83AnV81h99yxyEVHWTsJanbP1IvUo043cfLsQn2k+Zb9TfKsnoa7tOYO3FUXmqN4ZkfK5X+n7ZvDEbJFGwTAliku2DnwI4FfzQuCvyjotU0/SYS3j7i6GVrm1iQpKcy2BgFoZ99S14yk0K/qvTHzCFwr9c2Wvx5pX9MB5NlQ7G2Nz5sv92tlgxLgTULsEKLm1zrV6fKjif76n9C8HTgt/qvyf4h5l0/jD/admr6fF56PwG</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+jUj05pU4q1HWGmgKxdQRdBd/XLnZAeINqmJUmR3V9/02IREL3unWGGyenJc57zkic5FziJbT8QArikKdPCblP/B02ciLjYMxr1CTGcBokMPLEmxtR2XYApwXX3VNdCIXIImZCYyaZuW6huIEv9xsjyHc9v1Gs2sh917R64UNDKpWbp2iqJmfDLsE0958xPsaDCZzgB4Uvij4JB31eePq446a3zNcsyIG/Npcx80yS1CAjEMamRNDHPzR2f80j4IzpjWOYcXmNGoqm/7n15eam91Gspn5m2ZVmm5ZnKJxJ0dqy3jqrNEIVsmq7XHcxSRgmO6R9ckBqAnKeRFsSzlFM5Tz6ARiayCmgDVsQgyGHHuvkWoGT3RaQdklxgQ8wxqsBuYQocGAHt7jZs6sdf6+B675hjJqYpT8Te+u8oAVtCnGYQGaLKrGL3dcQD5WqdA/FDRuJc0CVcF2OSYQJC+8FhSld9KtTwRUIr26+tRDVhQP6mJefmNk9F2zxQmS6dgZD/p1/bvVqj3OM4h9bl4MfkSaLh/bI+5JOrFf2zunxKyXB8aTVLCtvOa1KbVr+u9wd1M1evmzrsG4quCZrcvAyW/em108/n4xP2ECzqo2dxt7p8vvXastOBbNr+tciul3WIfuZDAZPh8Ps8YKP7/jKp077V53A0zawehJ2re/7Mx1E+eBo9LNwz9CcL7y7uf1674dXc7bGbhYcS6/nnSbfdGLf77KoxeJTxgwjmK4S60bfBhffY5Uf2iZN9HwbjSXwSE8f6PhjOmm85beewa6zkYJRPnoDIalmMRtjVeqpfWH4uLYWFRsa0dPWzQp+EBCb1VrGrkBU/V+JDI181c72+ODtFHfusbnds6wJ51oXlWKhnBVbD8+zTnlfpz5rFHsVOyqa0iFUo7Hp+PidIEl8Ai4AbyzQncxD6J4hdLLEWslt1MFImYJwqBW/3uu2eW79wvQ5Cba/XaweBY6OG69k91w0cXbtO5Q274cFUAt9V7/qOet8CoRmFQuKLORdq0IVUJVngZS5jVFviGoNcXQK80GHfds4apqBJFkNB2EzSKI+hls2zskCmWP/bBiaitFJBspRLHJen8MMk979V9VA+ES0cRJFRG1RP4cBl5FTpvEvbOXhpVfBBHtHisKniSk7Jmsnup7eZKYZlMzCbvIhAFffNlr+EOABgfsLP3C/NJl60pFvRqwtW3RlKVVpVexe4tqjly2VeNtQtFJMreBOZlmuOgORK9n6P02dg5gbC/NKNs2G9F3lj3+WXyzkbSSwhUeOnlcsvPDdGIIrnRqiOz+qrb5mdkKpuElbykK0Tq1dJwfjThwvxSeGnzD/U30vKo7d2HcDaiqPyVG8MSdmsWBX3y+8PZoOkCpYqQUz5NvghgEPBd42bIm+4SDVNk1zCx1+0QumaOiYkzZkMu3pp2Fbfkqf8nYH/5vQOplT41yt7JT68sn8N+iOlgwnWN770v50NWo4LAbVL0JJLU1+p16cKzmZbav9K8KDgt886nwn+biatd+b3lq2a7p+H1r8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064947</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064949</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_064951</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832B9FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832BE7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832C21E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_FUNC_ADULT_BAU_Get_CHILD_200_OK_P1" searchProperties="true" id="107bef3e-c94c-4301-be01-6e23bfd6fb8b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832C87E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C155C0AC208CE0401F0A059926FE:71816F03"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832C75E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832C75E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832C75E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832C87E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832CCFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C155C061208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832C87E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832CCFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C155C061208CE0401F0A059926FE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZbsI4FH3vV0TpYxWyQhYVJMIyZaZ0IXR9GRnHgKeJk9oOUL5+7NBQoLTTjoSEfHN97rmLj33OQJpYQZsxRDnOiDLoNtW/bejaENpTzfEmUHPiyUTzvYmpuQ3HsuO679uWoyoDxgo0IIwDwpuqZZi2ZhriNzaNwPGDer1mOfVnVblHlAlo4VIzVGWVJoQFZdimWlASZIBhFhCQIhZwGETt4WUgPANQcVJb5xuWZUDamnOeB7oOazGCKElgDWapfq7v+ZzHLIjwjABeUPQeM2ZN9X3vcrmsLe1aRme6ZRiGbvi68IkZnp2qrZNqM4oHZJpt1h1AMoIhSPAaSFJDxOdZrLSTWUYxn6dfQJu6aUhoDa2gBk2HnKr6R4CS3Q+R9khSBjQ2B2YFNkJTRBGBSLkbDZrq6c86uNk7poCwaUZTdrD+HSVEFijJchRrrMqsYvdzxCPlap0jGAwITAqGF+hKjkkOIGLKDUVTvLrETAxfzJSy/cqKVROG4G9acq7v8hS09SOV6eIZYvz/9Gu3VxuUe5AUqAXfFqOUrrpr476nP4bhzB2C/hOd3/Bes6Sw67whtW31+/pwULdz9b7pmax8/Y6ePTysvbPe1P/r9TEuur2Od92dXbiwA5ZPL7qbPo9H6eL6an03eElWEbyut9Ga2HV/GkaT4ZVV2F6WP548TH0wfJvH4ygcv05uOn/Ob3Pn6XV0cTW8H8dR10ONO3/xR79v0dvk8e4M3DaGPWQVz2H0bMGz5by+zmjoDscjdnFyMwjxZGS/hWuQ5E9FhD2n+ZHTbg77xkoOomLyD4K8WsrRGHSVvugX4N9Li7TgWJuWrkEu9YlxRLjakrukrASFEB8cB6KZm3XPa5gdy7Otjuf2TN/oGY5h9o22Ic6S1ej7lf5sWBxQ7GRkimUsqbCb+fmeIEwDhkiMqLbICjhHTP0GsQs4UAZkJA5GRhgaZ0LBQ79uuo7t26HbCcO+HbZdu9PpeJ5r2H2j3lCVq4xfk2vannJE99Xb3lPvEYI4x0hKvJxzJgadcVGSV7AoeGLWFqBGUCEuASp1OLAcr64znOYJkoT1NIuLBNXyeV4WSGebf0sDkJVWzGCeUQ6S8hR+meTht6oewifG0oHJjEIkeoqOXEZOlc7XaTd2067g20WM5WETxeUUww2T/U8fMyOHZTsw27wgMyvu2y2/hDgCoH/DTz8szTZevMA70asLVtwZQlVaVXtfQe21ViwWRdlQVyomFfC6qRuuHiFYCNl7G2cviOhbCP1HN86W9UHkrX2fX8HnJOKAo1SMn1Iuf/DciBCTz42BOD6rn75l9kKKunG04sdsnUS8SiTjbx8uMIDST5hvxN8yo/FHu45g7cQReYo3BsdkJlfyfnn7YjZgJmCxEMSM7oIfAzgWfN+4LfKWCxfTNCk4+vqLIpWuqQIIs4LwQVctDbvqW/LkbzkKPpw+wZQK/35lr9iXV/bj8DISOpgCdeuL/9tZw+W4QCR2MVxyaaor8foUwclsR+3fCR4XfLf+neDvZ9L6ZP5s2anp4Xlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZbsI4FH3vV0TpYxWyQhYVJMIyZaZ0IXR9GRnHgKeJk9oOUL5+7NBQoLTTjoSEfHN97rmLj33OQJpYQZsxRDnOiDLoNtW/bejaENpTzfEmUHPiyUTzvYmpuQ3HsuO679uWoyoDxgo0IIwDwpuqZZi2ZhriNzaNwPGDer1mOfVnVblHlAlo4VIzVGWVJoQFZdimWlASZIBhFhCQIhZwGETt4WUgPANQcVJb5xuWZUDamnOeB7oOazGCKElgDWapfq7v+ZzHLIjwjABeUPQeM2ZN9X3vcrmsLe1aRme6ZRiGbvi68IkZnp2qrZNqM4oHZJpt1h1AMoIhSPAaSFJDxOdZrLSTWUYxn6dfQJu6aUhoDa2gBk2HnKr6R4CS3Q+R9khSBjQ2B2YFNkJTRBGBSLkbDZrq6c86uNk7poCwaUZTdrD+HSVEFijJchRrrMqsYvdzxCPlap0jGAwITAqGF+hKjkkOIGLKDUVTvLrETAxfzJSy/cqKVROG4G9acq7v8hS09SOV6eIZYvz/9Gu3VxuUe5AUqAXfFqOUrrpr476nP4bhzB2C/hOd3/Bes6Sw67whtW31+/pwULdz9b7pmax8/Y6ePTysvbPe1P/r9TEuur2Od92dXbiwA5ZPL7qbPo9H6eL6an03eElWEbyut9Ga2HV/GkaT4ZVV2F6WP548TH0wfJvH4ygcv05uOn/Ob3Pn6XV0cTW8H8dR10ONO3/xR79v0dvk8e4M3DaGPWQVz2H0bMGz5by+zmjoDscjdnFyMwjxZGS/hWuQ5E9FhD2n+ZHTbg77xkoOomLyD4K8WsrRGHSVvugX4N9Li7TgWJuWrkEu9YlxRLjakrukrASFEB8cB6KZm3XPa5gdy7Otjuf2TN/oGY5h9o22Ic6S1ej7lf5sWBxQ7GRkimUsqbCb+fmeIEwDhkiMqLbICjhHTP0GsQs4UAZkJA5GRhgaZ0LBQ79uuo7t26HbCcO+HbZdu9PpeJ5r2H2j3lCVq4xfk2vannJE99Xb3lPvEYI4x0hKvJxzJgadcVGSV7AoeGLWFqBGUCEuASp1OLAcr64znOYJkoT1NIuLBNXyeV4WSGebf0sDkJVWzGCeUQ6S8hR+meTht6oewifG0oHJjEIkeoqOXEZOlc7XaTd2067g20WM5WETxeUUww2T/U8fMyOHZTsw27wgMyvu2y2/hDgCoH/DTz8szTZevMA70asLVtwZQlVaVXtfQe21ViwWRdlQVyomFfC6qRuuHiFYCNl7G2cviOhbCP1HN86W9UHkrX2fX8HnJOKAo1SMn1Iuf/DciBCTz42BOD6rn75l9kKKunG04sdsnUS8SiTjbx8uMIDST5hvxN8yo/FHu45g7cQReYo3BsdkJlfyfnn7YjZgJmCxEMSM7oIfAzgWfN+4LfKWCxfTNCk4+vqLIpWuqQIIs4LwQVctDbvqW/LkbzkKPpw+wZQK/35lr9iXV/bj8DISOpgCdeuL/9tZw+W4QCR2MVxyaaor8foUwclsR+3fCR4XfLf+neDvZ9L6ZP5s2anp4Xlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyjyjkQggQFSSGy5QWWgq0p52XI9fZBA+JTWMn0H792KGhwNCe9khIyDvba6998bLPOIojx29zDokgjGqDblP/1/Kg4TmuZ9Rx1TPcSq1iNFxUN2qP9ce6BY5j16q6NuA8hQHlAlHR1B3Lrhi2JX8z2/Ldhl+tlSu2+0vX7iDhElq6lC1d28QR5X4etqmnCfUZ4oT7FMXAfYH9aXs09KWnjwpOeutsyzIPmLQWQqx808TlADBEES5jFptn5oHPWcD9KQkpEmkCrzED3tRf967X6/K6UmZJaDqWZZlWw5Q+ASfhd731rdgMwYDO2XbdQZRRglFEXpAiNQKxYIHWjkKWELGI34G2TdtS0AZssIFtl37XzbcAObtPIh2QTDgy+ALZBdgE5pAAxaDdTgZN/fvnOrjdO0sQ5XOWxPxo/TVKQDOI2AoCgxeZFew+j3iiXK0zwP6A4ijlJIMrNSYrhIFr4wTmZDMkXA5fwLW8/dqGFxMG+CstOTP3eUra5onKdEkIXPyffu33aotyh6IUWj/vLoOpubjI2o1/smk6KIXZw3nAV9OJ1cwp7DtvSe1a/bo+HtTdXL1uCifjezdMR7PSskRG4cstveD4iZ/HPVZZ3t4PN9fWeN1v98YE7ofTcUUsO8nNzQPcPVcvlpeiu3wQ65ldv/SevM03fLN4GmU/S8Pr51V/+evxgppL8/zXJG4Ifo4u2WWEXtDvYLog9bv7wSgtDTObL28bHK/GG3zljjul8PYyKT3esN63+o/hVen6amYvkjB+mSQZHzXfctrP4dBYyME0ffwNWBRLNRqDrtaX/ULiY2lRFhIY89zVXyl94gKo0Ftql5IVP5XiQwJfNnO77tU9u+PUK06n0+/ZDatnuZbdt9pWtdFwvH6j0J8tiyOKHUbnRMVSCrudn48J4tjnQANIjIyleAFc/wCxiwTSBnQiDwajHGZMKnin0+16jtVud7y21XWdWr/abVe9eu+H6zlVx9G1Kyau6XXSngtIDtW7cqDeE8BkRUBJvJpzLgedC1mSJ5SlIrLLGSpTSOUlkCgd9h23XjU5iVcRKMJmzII0gvJqscoLZPLtv2MgzHMrkbPBEoGi/BS+m+Txt6Ie0icgyoGrjH6A7CmcuIzcIp330/b20y7g22lA1GGTxRUJwVsmh5/eZkYNy25gdnlhbhfcd1u+CHECwPyAn3lcml28ICN70YsLVt4ZUlVaRXufUPmpnGZZmje0phQzkfCmbVo1cwo4lbL3PGNLoOYOwvzUjbNjfRR5Zz/kl4oFnQokIJbjp+XLTzw3psDVc2Mgj8/ms2+Zg5CybgI24pStE8lXiWL84cMF+1j5SfNY/q1ZEry16wTWXhyZp3xjCEJDtVL3y/M7s4GZhCVSEFmyD34K4FTwQ+OuyDsuQk7TYyrg/S+aUrqmjjBmKRWDrp4b9tU35ymeV+C/Of0Fkyv865W94e9e2fej4VTqYIz0nS/5b2eD5OOCQe7iJOfS1Dfy9SmD03BP7V8Jnhb8WvUjwT/MpPWX+W/LXk2Pz0PrDw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyjyjEuXBJVJBooGfSy5QpdHp5OTLOBjxNnBA7QPv14wSSAqU97ZGQkHe211774mWfcByFptvjHFJBY6b4/Y76b3timJNJYGvtRgCa7Zgtrd1EgUbaJm5aAJMJ2Kric56Bz7jATHRUExmWZiD5GxvIbSAXobptOY+q8htSLqGlSx2pyjoKGXeLsB01S5kbY065y3AE3BXEHfWuLl3p6eKSk9o92bAsAqbduRCJq+ukHgCBMCR1Ekf6ib7ncxJwd0RnDIsshW3MgHfU7d7ValVfWfU4nekmQkhHji59Ak5n39Xut3IzBD6bxpu1h1nMKMEhfcE5qSsQ8zhQeuEsTqmYR+9AG7qBcmgN1kQjhs2+q/prgILdJ5H2SKYca3yOjRLsBqaQAiOg3N74HfX75zq42TtOMePTOI34wfprlIAtIYwTCDReZlay+zzikXJ1T4C4PiNhxukSfuZjkmACXBmmMKXrS8rl8AVcKdqvrHk5YUC+0pITfZenpK0fqUyfzoCL/9Ov3V5tUH7jMINueIoheDTSi1kyHNhReAmPd+A0nZcX1Cko7DpvSFWt3q4PB7Waq+2mxcXp0BSstjq7JeeXi/QuQNZqel27rnnLxXAQBVdLc86W1oNhXsTQeqT8fvTUiH9OVvLzr8Wfh+fxg8VG1/3m6eDbyp9etMbBus8tPjDX62HvRwMW8M8P/S5ImvjOvGfmPYEH7DciuDGTX3bth/88u34aWpGoWcMnp1ZrD65ehrfO+Nto2qPTc/0iaU5YOsfIPm93XnPazWHfWMrBKJv8ASLKZT4afl85k/3C4mNpyS000KaFq5vk+sQFMKF28125rLiZFB8auLKZm/Wg3TQ8o9HwUNMwUdsbIBsZZ6iHGo5jNs8Gpf5sWBxQ9GI2pXmsXGE38/MxQRK5HFgAqbaMMzIHrn6A2McCKz67kQcjZhzGsVTwwVm7ZXmm6Xm203c8B3m9vtE2zVbD6Dt201OVn7G4Ztdpbyog3Vdva0+9b4DQhEIu8fmccznoXMiSLPAyE6FRX+I6g0xeAmmuw65ptxs6p1ESQk5Yj+IgC6GezJOiQDrf/JsaJrywUk6SOBU4LE7hu0kefivrIX0CmjvwPKNTkD2Fw8vIdmRG23TepG0fvbRK+F4W0PywyeKKlJINk/1PrzOTD0s1MFVehBsl92rLFyGOAOgf8NMPS1PFC5Z0J3p5wco7Q6pKt2zvAtcX9Wy5zIqGtnLFTCW8buiopY+AZFL2nsfxEzC9gtA/deNUrA8iV/Z9fpmYs5HAAiI5fkqx/MRzYwQ8f2748visP/uW2Qsp6yZgLY7ZvFC+SnLGHz5ciEtyP2keyr9VnAav7TqCtRNH5infGIKyWb7K75fnd2aDxBKWSkGM013wYwDHgu8bqyJXXIScpkkm4P0vSq50HRUTEmdM+H21MOyqb8FTPCfgvjq9gSkUfntlr/m7V/b91eVI6mCE1cqX/rezRotxISB3cVpw6ahr+fqUwdlsR+23BN8Ivtm2TK/VGBgOOhB8pyrgXibdN+a3lp2aHp6H7l8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_064954</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_064956</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_064958</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832C88E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832CD0E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C155C062208CE0401F0A059926FE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_FUNC_YOUTH_SAU_Get_CHILD_200_OK_P1" searchProperties="true" id="c2b4c368-fd35-46e1-bec1-228f6dd3f3f7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C155C0C9208CE0401F0A059926FE</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832D4AE190E0401F0A059926F9:C0639F4D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155C0B7208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155C0B7208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155C0B7208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C155C0C9208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C155C111208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832CFFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C155C0C9208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C155C111208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832CFFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH6uQBBIgUUFKQ7nKFtqKj6u2LytjT8DdYEPsAO2vXyc0FChl25WQkCfjM2c+fOwrgeZJ1Q+EgFRSzrSo09L/th3Lq7uobsSkMTEcx3aMSb1pG01UmzSdpgeW6+paJEQGERMSMdnSq5ZdM2xL/Ua25buWb1UrVs161rU/kAoFrVwqlq5t5gkTfhG2pWcp8zkSVPgMzUH4EvvDoN/zlaePSk56+2rLsgiYtmdSLnzTxBUCGJIEVzCfm1fmgc8VEf6QThmSWQrvMYlo6e971+t1ZV2r8HRqVi3LMi3PVD5E0OmF3v5VbgYSsZhv1yFinFGMEvqGclJ9kDNOtCCZ8pTK2fwLaNu0rRzagA02sO2wC938CFCw+ybSAclUIEPMkF2CDSCGFBgGbTyIWvrF9zq43TtKERMxT+fiaP0zSsBWkPAFEEOUmZXsvo94olztK8B+xHCSCbqCu3xMFgiD0B5SiOmmR4UaPiK0ov3aRpQTBvgnLbky93kq2uaJynToFIT8P/3a79UW5Q9KMmgvxzXsXPb6cTAdy/rz5RAi6/cw8czbqFVQ2Hfektq1+n19PKi7uXrfNIOnNXntv2RPYnz7dhmuXEoG4ThYuwNxN12Q2hJNxiscPJAs6g7J062scUc+1Z9rfwUD3oDJQ7UHb/E6JkH8q5v+lsM3FK6fH9/s6fL2usr7jN4+oEdntVp2aLKU94172xs/C+ZiZPOaacZJV7obYjbIQFijUZqtM2fc27z8Wm4ua3ePqfvS74mRJx5Jfdr6yGk/h0NjKQfDbPICWJbLfDSijtZV/ULyvLTkFkqMuHD1F7k+CQlM6u18Vy4rfqbEhxJfNXO7vmnW7dB23dAKvarVDG8sx7K7VmC5nletd29K/dmyOKIYchbTPFausNv5OU8Qz30BjEBqrHiGZyD0M4gdJJEWsYE6GJwJGHGl4GEQ1J2w3uw0a10vdLzwutrpBIq5F7huw27q2h2X9+w+DWIJ6aF61w7UewCYLijkEp/PuVCDLqQqyRKtMpnYlRWqMMjUJZDmOuxXnaZrCjpfJJATNuecZAlUFrNFUSBTbP+rBsKisFKBFzyVKClO4ZdJHn8r66F8CM0dRJ7RNaiewvFl5Hi+W6bzddr1/bRL+CAjND9sqrgypXjL5PDTx8zkw7IbmF1eWNgl992WH0KcADDP8DOPS7OLR1Z0L3p5wao7Q6lKu2zvElWWlWy1yoqGNnLFTBW8aZtWwxwCzpTsvY74P8DMHYT5rRtnx/oo8s5+yC+TMzaUSMJcjZ9WLL/x3BiCyJ8bkTo+m+++ZQ5CqrpJ2MhTtjBRr5Kc8dmHC/Zx7qfMD+pvzVPy0a4TWHtxVJ7qjSEpm+ar/H55/WI2MFewVAkiT/fBTwGcCn5o3BV5x0WqaZpkEr7+ouVK19IRxjxjMurohWFffQue8nUB/ofTJ5hC4d+v7I348sp+7PeGSgfnSN/50v92NmgxLhjULkELLi19o16fKjib7qn9O8HTgn/dOCf4h5m0P5k/W/Zqenwe2v8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH6uQBBIgUUFKQ7nKFtqKj6u2LytjT8DdYEPsAO2vXyc0FChl25WQkCfjM2c+fOwrgeZJ1Q+EgFRSzrSo09L/th3Lq7uobsSkMTEcx3aMSb1pG01UmzSdpgeW6+paJEQGERMSMdnSq5ZdM2xL/Ua25buWb1UrVs161rU/kAoFrVwqlq5t5gkTfhG2pWcp8zkSVPgMzUH4EvvDoN/zlaePSk56+2rLsgiYtmdSLnzTxBUCGJIEVzCfm1fmgc8VEf6QThmSWQrvMYlo6e971+t1ZV2r8HRqVi3LMi3PVD5E0OmF3v5VbgYSsZhv1yFinFGMEvqGclJ9kDNOtCCZ8pTK2fwLaNu0rRzagA02sO2wC938CFCw+ybSAclUIEPMkF2CDSCGFBgGbTyIWvrF9zq43TtKERMxT+fiaP0zSsBWkPAFEEOUmZXsvo94olztK8B+xHCSCbqCu3xMFgiD0B5SiOmmR4UaPiK0ov3aRpQTBvgnLbky93kq2uaJynToFIT8P/3a79UW5Q9KMmgvxzXsXPb6cTAdy/rz5RAi6/cw8czbqFVQ2Hfektq1+n19PKi7uXrfNIOnNXntv2RPYnz7dhmuXEoG4ThYuwNxN12Q2hJNxiscPJAs6g7J062scUc+1Z9rfwUD3oDJQ7UHb/E6JkH8q5v+lsM3FK6fH9/s6fL2usr7jN4+oEdntVp2aLKU94172xs/C+ZiZPOaacZJV7obYjbIQFijUZqtM2fc27z8Wm4ua3ePqfvS74mRJx5Jfdr6yGk/h0NjKQfDbPICWJbLfDSijtZV/ULyvLTkFkqMuHD1F7k+CQlM6u18Vy4rfqbEhxJfNXO7vmnW7dB23dAKvarVDG8sx7K7VmC5nletd29K/dmyOKIYchbTPFausNv5OU8Qz30BjEBqrHiGZyD0M4gdJJEWsYE6GJwJGHGl4GEQ1J2w3uw0a10vdLzwutrpBIq5F7huw27q2h2X9+w+DWIJ6aF61w7UewCYLijkEp/PuVCDLqQqyRKtMpnYlRWqMMjUJZDmOuxXnaZrCjpfJJATNuecZAlUFrNFUSBTbP+rBsKisFKBFzyVKClO4ZdJHn8r66F8CM0dRJ7RNaiewvFl5Hi+W6bzddr1/bRL+CAjND9sqrgypXjL5PDTx8zkw7IbmF1eWNgl992WH0KcADDP8DOPS7OLR1Z0L3p5wao7Q6lKu2zvElWWlWy1yoqGNnLFTBW8aZtWwxwCzpTsvY74P8DMHYT5rRtnx/oo8s5+yC+TMzaUSMJcjZ9WLL/x3BiCyJ8bkTo+m+++ZQ5CqrpJ2MhTtjBRr5Kc8dmHC/Zx7qfMD+pvzVPy0a4TWHtxVJ7qjSEpm+ar/H55/WI2MFewVAkiT/fBTwGcCn5o3BV5x0WqaZpkEr7+ouVK19IRxjxjMurohWFffQue8nUB/ofTJ5hC4d+v7I348sp+7PeGSgfnSN/50v92NmgxLhjULkELLi19o16fKjib7qn9O8HTgn/dOCf4h5m0P5k/W/Zqenwe2v8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53ShFIKHWEGubjrFsUiuvXlTEhTiLYpNCkXf/1JikVA9OiZYYbJ6sq3vnXJl5xxFEdlt8U5SQVNmOZ1Gvo/0LGcOhjbRtUpV42KVXWMcWjZRlCDZYAxrtXHlq55nGfEY1wgJhp6GUDLgED+7iBwbeACq2Tb9pOu3ZOUS2jpUgK6toojxt08bEPPUuYmiFPuMhQT7grsDlv9K1d6uqjgpDfPNizzgGlzKsTMNU1cCggmUYRLOInNM3PP5yzg7pBOGBJZSt5iBryhv+1dLpelpVVK0olZBgCYoG5Kn4DTyYne/FVsJoHHwmSzbiOWMIpRRF+RItUnYpoEWiuaJCkV0/gTaGhCoKANssIGhhV2opvvAXJ230TaI5lyZPApggWYT0KSEoaJNvK9hn7yvQ5u9t6liPEwSWN+sP4ZJcIWJEpmJDB4kVnB7vuIR8rVPCPY9RiOMk4X5FqNyQxhwrVBSkK6uqJcDl/Atbz92ooXE0bwT1pyZu7ylLTNI5Xp0Anh4v/0a7dXG5R7FGWkCeq9aa+3eHlqR+vl2J4vyCz17cuhOXhs5BR2nTektq1+Wx8O6nau3jY9BTd9P4N3970qmVcm/gPw2uMb5vUrpxcgiC+80dpfX3fGwor9+z4At6/l04vR7eV1QttLwE9hdDf0QvPiNh3Vf82G3qNoPa7K4d/R+OnSOr/IOuvLMPzdG/jT+mhU+bMGNTSov1rz2vJ2fmpCHz4/jAcvvx+g71fS/vnT6+S+jnn8x/n1OhAOfL5aOefACfsjEnZvG+857eawbyzkYJiNnwkWxVKNhtfRerJfSHwtLcpCAyPMXd2Z0icuCBN6U+1SsuJmUnxo4MpmbtbdWhW2oW23IZQnqNbuggqAPdACdr1erva6hf5sWBxQbCcspCqWUtjN/HxNEMcuJywgqbFIMjwlXP8CsYME0jzmy4ORME7uEqng570OqDpdx6r32rVKq1qt9CplWO7CrlUDltXWtetE3LCbtBUKku6rt7Wn3j7BdEaJkng151wOOheyJHO0yEQESwtUYiSTl0CqdNgtV2q2yWk8i4gibMZJkEWkNJvO8gKZfPNfNhDmuZVyPEtSgaL8FH6a5OG3oh7SJ6DKgauMzonsKTm8jCp11y7S+Tzt6m7aBXwrC6g6bLK4IqV4w2T/0/vMqGHZDsw2L8xhwX275YcQRwDML/iZh6XZxgsWdCd6ccHKO0OqSrNo7xyV5qVsscjyhjpKMVMJb0ITOOaQ4EzK3voueSHM3EKY37pxtqwPIm/t+/wyMWVDgQSJ5fhp+fIbz40h4eq54cnjs/ruW2YvpKybICtxzNaO5KtEMf7y4YJdrPykeSD/lkkavLfrCNZOHJmnfGMIyiZqpe6X9SezgRMJS6UgJuku+DGAY8H3jdsib7kIOU3jTJDPv2hK6Ro6wjjJmPA6em7YVd+cp1jPiPvu9AEmV/i3K3vFP72y//avhlIHY6Rvfel/Oxs0HxdM5C5Ocy4NfSVfnzI4m+yo/RvBo4IPzp2vBH8/k+YH80fLTk0Pz0PzXw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTHx3oBSjQEWaQyzlVUI/g9eVMSBcQd5uUJoXqr99JsRUQPXhmHCGLlW9965IvOeMoDGy3wznEgjCqeb2W/i+2Gg6aTusl5PvNUtWqVuS3mVWaNZBTs+W/htPUNY/zBDzKBaKipdumVSlZpvybWKZbM13TKVcc51nX7iHmElq6lE1dS8OAcjcL29KTmLoMccJdikLgrsDuuDMautLTRTknvX22YZkFjNsLISLXMHDZBwxBgMuYhcaZseNz5nN3TOYUiSSG95g+b+nve9frdXldKbN4btimaRpm05A+PifzE739K98MvkdnbLPuIsoowSggb0iRGoFYMF/rBHMWE7EIv4C2DMtU0CVIcQlbVXqiGx8BMnZHIu2QjDkq8QWycrBbmEEMFIN2d+u19JPjOrjZO4kR5TMWh3xv/TNKQFcQsAj8Es8zy9kdj3igXO0zwK5HcZBwsoIrNSYRwsC1mxhmJB0SLofP51rWfi3l+YQB/klLzoxtnpK2caAyPTIHLv5Pv7Z7tUG5R0EC7dFb03n7/RBdPoQ3Pn416uOuT4bLy8plv5VR2HbekCpa/b7eH9Rirt43XfeG0SztzQdkLfAQ11+fxer+rxe7c1pPas+ny5qIl6F9m7DYXFhgX/8zHlYvmvz+eVSte/N6sn5NuTN4JNfJ48Wvp/o0nf09vW9e8MhLRxWajG+Cy6vTDnqL+AP3HqzF5PFuWB1GT4DWjQlJIQlg+PByMxqyyVP8KGZRNFpH9mrh/Ioq9wtWOX+8iwa3jjO6WQ0arY+ctnPYNeZyME6mL4BFvlSj4fW0gewXEt9Li7IQvzTLXN1I6RMXQIXeVruUrLiJFB/iu7KZm3W/4Vhdu1Gxu4NB32qafbNqWgOzY9aaTdsZNHP92bDYo9hldEZULKWwm/n5niAOXQ7Uh7i0YgleANe/QewhgTSP3sqDwSiHCZMK3mn0uk7dbvbO5UGXbPu1XqNj9qu9fq3S6VU6unbFxDW9jjszAfGueld21PsWMIkIKIlXc87loHMhS7JEq0QEVnmFyhQSeQnESoddu9qoGZyEUQCKsBEyX05AOVpEWYEMvvm0SwjzzEo4jlgsUJCdwi+T3P8tr4f08Yly4Cqjc5A9hf3LqNp0a3k6n9KuHry0cvhO4hN12GRxRUzwhsnuTx8zo4alGJgiL8ytnHux5YcQBwCMb/gZ+6Up4vkrshU9v2DlnSFVpZ23d4nKy3KyWiVZQ+tKMWMJb1iGWTfGgBMpe68T9huoUUAYR904Beu9yIV9l18iFnQskIBQjp+WLY94boyBq+eGJ49PeuxbZiekrJuAVByydQP5KlGMv324YBcrP2m+kR9rFvsf7TqAtRVH5infGILQuVqp++X1i9nATMISKYgs3gY/BHAo+K6xKHLBRchpmiYCvv5FU0rX0hHGLKHC6+mZYVt9M57iNQL3w+kTTKbw71d2yr+8sh9Hw7HUwRDphS/5b+cSycYFg9zFScalpafy9SmD0/mW2r8T/CT4Vq3WNc/rttno7gl+vyjgTibtT+bPlq2a7p+H9h8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06501</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06502</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06504</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C155C0CA208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C155C112208CE0401F0A059926FE</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832D00E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_FUNC_YOUTH_BAU_Get_CHILD_200_OK_P1" searchProperties="true" id="fec9c655-6b13-4647-997d-f3e94914ecde"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832D6CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832E3FE190E0401F0A059926F9:5BD2E3E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C155C14F208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C155C14F208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C155C14F208CE0401F0A059926FE</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832D6CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832DB4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832DF4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832D6CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832DB4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832DF4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6F32fXxFlHqtgJyQUooLEpfTQ+wdMB/XlyDgOuCR2ajuUnl//2aFJgdKezpGQkHe211774mWfSZQmXtiVkghFObNGg7b992m9GURNPHdafiN2/AaJHTRveE49mHv+adxCEfJtayRlTkZMKsRU2/agW3dcqH9TF4YBDGGzVg+8R9t6IEJqaO1Sg7a1SRMmwyJs284FCzmSVIYMpUSGCoeT7s11qD1DVHKyO2dblkVA0VkqlYUA4FpEMEkSXMM8BWdgz+cskuGELhhSuSBvMSPZtt/2vry81F7qNS4WwIMQAtgC2ieSdPHT7vwoN5NoxGK+XfcR44xilNB/kCF1Q9SSR1Y3WXBB1TL9BNoFLjTQDtlgB7s++2mD9wAFu28i7ZEUEjlyidwSbExiIgjDxPo1HrXtn9/r4HbvVCAmYy5SebD+M0qErUnCMxI5ssysZPd9xCPl6pwRHI4YTnJJ1+TWjEmGMJHWvSAx3VxTqYcvklbRfmsjywkj+E9acgZ2eWra4EhlBnRBpPov/drt1RblASU56QwH8eXsYtqcX4kXt754vp35kXexgdMctgsKu85bUlWr39aHg1rN1dumPmg0L35fkTRYjcaXywAGPh6n4m41WV+Jp3H6IG//GjRXLM5A0m+cpE/4LluCUezequikuwk4hNe92eqxz/H9j1+rnojkvEXzxu/55lL9xs+rR57Mp+h1cHfvsSk9efrfXbq+yB6eF3R4dTW8nd/f8NmNmEa0l8zSywc+U6tx43z868fp5XwwXjw2H2Yn3nTZQwA22+857eawbyzlYJLPnwhW5dKMxmhgDXW/kPpaWoyFRk5cuIaZ0SepCFN2x+wyshLmWnxoFOpmbtfnzYbb95p1b9Don7steA596A5hFwatltcYtkr92bI4oNjnLKYmllHY7fx8TRCnoSQsIsJZ8xwvibS/QBwghawRG+uDwZkkU64VvA7dQb8xHLTqgVv3+70W9Hqe63Y9v+vX/d6pbd1ydcfuRDdWROyrd31PvccE04wSI/FmzqUedKl0SZ7ROleJW1ujGiO5vgSE0eHQ85sBkDTNEmIIg5RHeUJq2TIrCgTk9t9zEJaFlUqccaFQUpzCT5M8/FbWQ/tE1DhIk1GP6J6Sw8vIb4VBmc7naTd20y7hu3lEzWHTxVWC4i2T/U/vM2OGpRqYKi8s3ZJ7teUPIY4AgC/4gcPSVPGiNd2JXl6w+s7QqtIp2/uMas+1fL3Oi4aeGsUUGh64AJ6CCcG5lr3XKV8RBioI8K0bp2J9ELmy7/PL1ZJNFFIk1eNnFctvPDcmRJrnxkgfn8133zJ7IXXdFNmoY7Z+ol8lhvGXDxccYuOnzff674WL6L1dR7B24ug89RtDUbYwK3O/vH4yG5hrWKoFkYtd8GMAx4LvG6siV1yUnqZ5rsjnXyyjdG0bYcxzpkYDuzDsqm/BU71mJHx3+gBTKPzblb2Rn17Zs5vridbBFNmVL/13Z4cW44KJ3iVpwaVtb/TrUwdnix21fyP4QfDdIOi7/tCDzf6B4J9XBdzLpPPB/NGyU9PD89D5Pw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6F32fXxFlHqtgJyQUooLEpfTQ+wdMB/XlyDgOuCR2ajuUnl//2aFJgdKezpGQkHe211774mWfSZQmXtiVkghFObNGg7b992m9GURNPHdafiN2/AaJHTRveE49mHv+adxCEfJtayRlTkZMKsRU2/agW3dcqH9TF4YBDGGzVg+8R9t6IEJqaO1Sg7a1SRMmwyJs284FCzmSVIYMpUSGCoeT7s11qD1DVHKyO2dblkVA0VkqlYUA4FpEMEkSXMM8BWdgz+cskuGELhhSuSBvMSPZtt/2vry81F7qNS4WwIMQAtgC2ieSdPHT7vwoN5NoxGK+XfcR44xilNB/kCF1Q9SSR1Y3WXBB1TL9BNoFLjTQDtlgB7s++2mD9wAFu28i7ZEUEjlyidwSbExiIgjDxPo1HrXtn9/r4HbvVCAmYy5SebD+M0qErUnCMxI5ssysZPd9xCPl6pwRHI4YTnJJ1+TWjEmGMJHWvSAx3VxTqYcvklbRfmsjywkj+E9acgZ2eWra4EhlBnRBpPov/drt1RblASU56QwH8eXsYtqcX4kXt754vp35kXexgdMctgsKu85bUlWr39aHg1rN1dumPmg0L35fkTRYjcaXywAGPh6n4m41WV+Jp3H6IG//GjRXLM5A0m+cpE/4LluCUezequikuwk4hNe92eqxz/H9j1+rnojkvEXzxu/55lL9xs+rR57Mp+h1cHfvsSk9efrfXbq+yB6eF3R4dTW8nd/f8NmNmEa0l8zSywc+U6tx43z868fp5XwwXjw2H2Yn3nTZQwA22+857eawbyzlYJLPnwhW5dKMxmhgDXW/kPpaWoyFRk5cuIaZ0SepCFN2x+wyshLmWnxoFOpmbtfnzYbb95p1b9Don7steA596A5hFwatltcYtkr92bI4oNjnLKYmllHY7fx8TRCnoSQsIsJZ8xwvibS/QBwghawRG+uDwZkkU64VvA7dQb8xHLTqgVv3+70W9Hqe63Y9v+vX/d6pbd1ydcfuRDdWROyrd31PvccE04wSI/FmzqUedKl0SZ7ROleJW1ujGiO5vgSE0eHQ85sBkDTNEmIIg5RHeUJq2TIrCgTk9t9zEJaFlUqccaFQUpzCT5M8/FbWQ/tE1DhIk1GP6J6Sw8vIb4VBmc7naTd20y7hu3lEzWHTxVWC4i2T/U/vM2OGpRqYKi8s3ZJ7teUPIY4AgC/4gcPSVPGiNd2JXl6w+s7QqtIp2/uMas+1fL3Oi4aeGsUUGh64AJ6CCcG5lr3XKV8RBioI8K0bp2J9ELmy7/PL1ZJNFFIk1eNnFctvPDcmRJrnxkgfn8133zJ7IXXdFNmoY7Z+ol8lhvGXDxccYuOnzff674WL6L1dR7B24ug89RtDUbYwK3O/vH4yG5hrWKoFkYtd8GMAx4LvG6siV1yUnqZ5rsjnXyyjdG0bYcxzpkYDuzDsqm/BU71mJHx3+gBTKPzblb2Rn17Zs5vridbBFNmVL/13Z4cW44KJ3iVpwaVtb/TrUwdnix21fyP4QfDdIOi7/tCDzf6B4J9XBdzLpPPB/NGyU9PD89D5Pw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4jSx1HIhXCLChK3tNmB0oG2jOZlZRxDPE2c1Bcu++vXDiQFSrudlZCQT46/852LP/uGgSR2vC5jiHKcEi0YtPW/6/WaWw0dYFgNq264ThUaLRA2DKcVula1unABBLoWMCZQQBgHhLd1x7Krhm3J36NteTXLs62K3aj+0rVnRJmEli4VS9e2SUyYl4dt64ISLwUMM4+ABDGPQ2/WHY886emBgpPeudmzzAPSTsR55pkmrIQIojiGFZgm5o154nMTMm+GVwRwQdEhZsja+mHvZrOpbKqVlK5Mx7Is02qZ0idkeHWtd66KzSgMyDLdr/uApARDEON/gCI1RjxKQ60br1KKeZR8AG2btqWgDbSFBrRdcq2bbwFydl9EOiFJGTBYBOwCbIqWiCICkfY0Ddr69dc6uN/7SAFhy5Qm7Gz9Z5QQWaM4zVBosCKzgt3XES+Uq3ODoBcQGAuG1+hejUkGIGLaA0VLvB1hJocvZFrefm3LiglD8E9acmMe85S0zQuVGeAVYvz/9Ou4V3uUZxAL1KHZy918vt1M4MNu8LNP0p7bq7Pej7vBsJ1TOHbekypbfVifD2o5V4dNM7M7tpl4mfhj+msmao+/RBDfgsUGjBdTMH/6OfMnvay/9KdziH5Mdy57cJq/szs/imwxNue7W7eRpBHs3UbPV9/FE72fkWZvMh/Vgs3zcjOyqHWHN/c+mLy6NV8IsqmFfEG/A7Sg/pRO3G933xbOX7vYfBpWb2s/5n70HO5qzvQqsEfh6P42uh2u189kDZPmuP2W03EOp8ZCDmZi8RtBXizVaAQDzZf9AvxzaVEWHBrL3NXLlD4xjgjXO2qXkhVPSPHBoSebuV8Pm3W77zSrzqDnDu2WNbRcy/atrlVrtZy63yr0Z8/ijGI/JUusYimF3c/P5wRh4jFEQkSNdSpghJj+CeIAcKAFZCoPRkoYekyVgjfdRsNu1N1mv9tt+t1qdeg3h91Bw6+79W69p2v3KZ+QCe0uOaKn6l09Ue8pgjjDSEm8mnMmB51xWZJXsBY8titrUCFIyEuAKh32HLdZMxlOshgpwmaShiJGlSzK8gKZbP/vGACy3IoZzFLKQZyfwg+TPP9W1EP6hFg5MJVRD8meoguXkVWk83Ha9eO0C/iuCLE6bLK4nGK4Z3L66W1m1LCUA1PmBZldcC+3/CHEBQDzE37meWnKeOEaH0UvLlh5Z0hV6RTtfQWV14pYr0Xe0IZSTCrhTdu0GuYMQSFlb/eYviBilhDml26ckvVZ5NJ+yk/wiMw44CiR46flyy88N2aIqedGII/P9qtvmZOQsm4cbfklWz+WrxLF+NOHC/Sg8pPmB/m3SWn41q4LWEdxZJ7yjcExWamVul92H8wGTCUsloKY0mPwSwCXgp8ayyKXXLicpoXg6OMvmlK6tg4gTAXhwUDPDcfqm/Pkuwx5b07vYHKFP1zZW/bhlf1zPJpJHUyAXvri/3Y2cD4uEMldDOdc2vpWvj5lcLI6UvsDwXeCb9dqfdv1HavZPxP8YVnAk0w678zvLUc1PT8PnX8B</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6MQO4EAUUGiXKZ0ekGB6ZzOy5FxdsBtYtPYobRfP05oUqC0p3MkJOSd7bXXvnjZJ5IkseP3pIRUMcGN8aBj/otcwNRxGhaKImrVKY0s4tCG1cRNl7o4AnA80xhLmcGYS0W46pgOwq6Fkf7NMPIbyMduzXGc36ZxA6nU0Nqlhkxjk8Rc+kXYjpml3BdEMulzkoD0FfWnvcsLX3v6pORkdk+2LIuAaXep1Mq3bVoLgUIc0xoViX1i7/mchNKfsgUnKkvhJWYoO+bL3sfHx9qjWxPpwnYQQjZq29onlGzx1ex+KTdDOOaR2K77hAvOKInZM8lJXYJaitDoxQuRMrVM3oHGNkY5tAUbalFc519N+zVAwe6TSHskU0ksuSS4BAsgghQ4BeNnMO6YXz/Xwe3eWUq4jESayIP131ECvoZYrCC0ZJlZye7ziEfK1T0B6o85jTPJ1nCVj8mKUJDGJIWIbS6Y1MMXSqNov7GR5YQB/ZuWnNi7PDVt+0hlBmwBUv2ffu32aotyQ+IMutHl7CyYBM5E3vHoGw5Gt5NhcD5Z4nvUKSjsOm9JVa1+WR8OajVXL5uCs6Y3C57PE+HZtjdOJ/Ob7y3V8jIO7ug6fNpg3E5Tb+Bet27EueP2mhdi9byezwc/g4SN79D9DF893p89KS/4At9u1ebnEAs2uxlG7d/ZHH7/GHqtH1k2ujq7T9bO/W16+gPHJHhYzwmeETz9hW4vMAiExdXZUlzXf31H6vZucPslWtOJFz4rfcpp86rn/kouO6857eawbyzlYJrN74CqcpmPxnhgjHS/iPpYWnILC62ocPVXuT5JBVyZ3XxXLit+psWHhb5u5nY9bHm477RcZzCqD3EbDVEd4RHqoUa77Xijdqk/WxYHFPuCRyyPlSvsdn4+JkgTXwIPIbXWIqNLkOYHiAOiiDHmgT4YgkuYCa3grVbTxXjQaKJGH502egPUOG0g7LRRz/FOvYFpXAl1za/TXqTrv6/e7p56B0DZikEu8fmcSz3oUumSPJB1pmJcW5Mah0xfAmmuw75TbzVsyZJVDDlhOxFhFkNttVwVBbLl9t+xCJWFlUm6EqkicXEK303y8FtZD+0TstxB5hmdgu4pHLmMUJnOm7TrRy+tEr6XhSw/bLq4KmV0y2T/0+vM5MNSDUyVF5W45F5t+UuIIwD2B/zsw9JU8cI124leXrD6ztCq0i3b+0BqD7Vsvc6KhjZzxUw1vI1t1LSnQDMte08zcQ/criDsT904FeuDyJV9n1+mlnyqiIJEj59RLD/x3JiCzJ8bY318Np99y+yF1HVTsFHHbP1Yv0pyxh8+XKhPcz9tnui/R5GGr+06grUTR+ep3xiK8UW+yu+Xp3dmgwoNy7QginQX/BjAseD7xqrIFRelp2meKXj/i5ErXccklIqMq3GuKNqwq74FT/W0Av/V6Q1MofAvV/ZGvntl/3N5MdU6mBCz8mX/7WyxYlwo6F2SFVw65ka/PnVwvthR+xeCbwQfNxp9XB85qNU/EPxhVcC9TLpvzG8tOzU9PA/dPw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06507</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06509</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065011</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832D6DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832DB5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832DF5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_FUNC_CHILD_SAU_Get_CHILD_200_OK_P1" searchProperties="true" id="cf2bf137-2d6d-4378-935b-566dca39d85a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU" id="08adc646-1311-416b-b5ab-b8f23f07cecf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU" id="0c029175-97df-4aa3-bd58-e56abdbe6027"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU" id="bea2c7bc-9454-4c3d-9c8f-ebcb7147b934"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832E5BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2832F41E190E0401F0A059926F9:69237EDF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832E49E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832E49E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832E49E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832E5BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832EA3E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832EF6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832E5BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832EA3E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832EF6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxXicCcqSCmXnpyWXqClTF9GrrMBz0nsEDtc+vVjh4YCpZ12JCTkne2117542ecCR2HR9YSARFLODL/TNP92GqQ8QfBi1ao1xyoHjmO9lKoNq/ECRVwtlxyHVE3DFyIFnwmJmWyaReSULAep34OD3ApynXoB1UvPpjGCRCho5VJAprGKQibcLGzTTBPmciyocBmOQLiSuEOvf+0qTxfnnMzW+YZlFjBpzaSMXdsmhQAIhCEpEB7Z5/aez3kg3CGdMizTBN5iBqJpvu1dLpeFZanAk6ldRAjZqGErn0DQ6anZOsk3Q+CzCd+s25hxRgkO6SvWpPogZzwwvHDKEypn0SfQju0gDW3BiljEKbNT034PkLH7JtIeyURgS8ywk4MNYAIJMALG48Bvmqff6+Bm70OCmZjwJBIH659RAraAkMcQWCLPLGf3fcQj5WqdA3F9RsJU0AXc6DGJMQFh3CUwoatrKtTwBcLI2m+sRD5hQH7SknN7l6eibR+pTIdOQcj/06/dXm1QRjhModXoX9ZfAc2ugpfFLfn9GiXB+nl1cTlGy2ZGYdd5Q2rb6rf14aBu5+pt06/BQ4i607Rz/cgfy5P7edgdPS67rD8vDc/m/iAKq6veTWn212zdQNHTtDii5SvpjcPb2us1LP0OvxBL/8HutO/5ySSA5St/un1dd71xtD4Ly8l90IvGdFT1RmfBH/8mvvtzMY97T+O+cy/q3eek332+dgZ2h85GT5e1zs3l5Gp9lo4XdydKJ7zK4FflN4TUO4ti6vPme067OewbczkYpi//AJH5Uo+G3zF6ql9Yfi0t2kIDa5K5urHWJyGBSbOld2lZcVMlPjRwVTM362696rSL9VKxW7noOg3URWXk9JCHKo1Gsdpr5PqzYXFAsc3ZhOpYWmE38/M1QRK5AlgAibXgKZmBML9A7GCJDZ8N1MHgTMADVwperKBK+6KCSu1SpdctV0seape9isqiilQaDdO44fKW3SbeREKyr96lPfUeAKExBS3xes6FGnQhVUnmeJHK0CkscIFBqi6BROuwWyzXK7agURyCJmxHPEhDKMSzOCuQLTb/RQsTkVmpIDFPJA6zU/hpkoff8noon4BqB6EzugDVUzhyGaE8nc/Tru6mncN7aUD1YVPFlQklGyb7n95nRg/LdmC2eRHh5Ny3W34IcQTA/oKffViabbxgQXei5xesujOUqrTy9s5xYV5IF4s0a2hNK2ai4G3HRjV7CCRVsrd+4H+A2VsI+1s3zpb1QeStfZ9fKmdsKLGESI2fkS2/8dwYgtDPDV8dn9V33zJ7IVXdJKzkMVs7VK8SzfjLhwtxifZT5jv1t+RJ8N6uI1g7cVSe6o0hKZvqlb5f1p/MBuEKlipB5Mku+DGAY8H3jdsib7lINU0vqYTPvxha6ZomJoSnTPodMzPsqm/GU65jcN+dPsBkCv92Za/Ep1f2uH89VDoYYXPrS//b2aLZuBBQuwTNuDTNlXp9quBsuqP2bwSPC3658ZXg72fS+mD+aNmp6eF5aP0L</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxXicCcqSCmXnpyWXqClTF9GrrMBz0nsEDtc+vVjh4YCpZ12JCTkne2117542ecCR2HR9YSARFLODL/TNP92GqQ8QfBi1ao1xyoHjmO9lKoNq/ECRVwtlxyHVE3DFyIFnwmJmWyaReSULAep34OD3ApynXoB1UvPpjGCRCho5VJAprGKQibcLGzTTBPmciyocBmOQLiSuEOvf+0qTxfnnMzW+YZlFjBpzaSMXdsmhQAIhCEpEB7Z5/aez3kg3CGdMizTBN5iBqJpvu1dLpeFZanAk6ldRAjZqGErn0DQ6anZOsk3Q+CzCd+s25hxRgkO6SvWpPogZzwwvHDKEypn0SfQju0gDW3BiljEKbNT034PkLH7JtIeyURgS8ywk4MNYAIJMALG48Bvmqff6+Bm70OCmZjwJBIH659RAraAkMcQWCLPLGf3fcQj5WqdA3F9RsJU0AXc6DGJMQFh3CUwoatrKtTwBcLI2m+sRD5hQH7SknN7l6eibR+pTIdOQcj/06/dXm1QRjhModXoX9ZfAc2ugpfFLfn9GiXB+nl1cTlGy2ZGYdd5Q2rb6rf14aBu5+pt06/BQ4i607Rz/cgfy5P7edgdPS67rD8vDc/m/iAKq6veTWn212zdQNHTtDii5SvpjcPb2us1LP0OvxBL/8HutO/5ySSA5St/un1dd71xtD4Ly8l90IvGdFT1RmfBH/8mvvtzMY97T+O+cy/q3eek332+dgZ2h85GT5e1zs3l5Gp9lo4XdydKJ7zK4FflN4TUO4ti6vPme067OewbczkYpi//AJH5Uo+G3zF6ql9Yfi0t2kIDa5K5urHWJyGBSbOld2lZcVMlPjRwVTM362696rSL9VKxW7noOg3URWXk9JCHKo1Gsdpr5PqzYXFAsc3ZhOpYWmE38/M1QRK5AlgAibXgKZmBML9A7GCJDZ8N1MHgTMADVwperKBK+6KCSu1SpdctV0seape9isqiilQaDdO44fKW3SbeREKyr96lPfUeAKExBS3xes6FGnQhVUnmeJHK0CkscIFBqi6BROuwWyzXK7agURyCJmxHPEhDKMSzOCuQLTb/RQsTkVmpIDFPJA6zU/hpkoff8noon4BqB6EzugDVUzhyGaE8nc/Tru6mncN7aUD1YVPFlQklGyb7n95nRg/LdmC2eRHh5Ny3W34IcQTA/oKffViabbxgQXei5xesujOUqrTy9s5xYV5IF4s0a2hNK2ai4G3HRjV7CCRVsrd+4H+A2VsI+1s3zpb1QeStfZ9fKmdsKLGESI2fkS2/8dwYgtDPDV8dn9V33zJ7IVXdJKzkMVs7VK8SzfjLhwtxifZT5jv1t+RJ8N6uI1g7cVSe6o0hKZvqlb5f1p/MBuEKlipB5Mku+DGAY8H3jdsib7lINU0vqYTPvxha6ZomJoSnTPodMzPsqm/GU65jcN+dPsBkCv92Za/Ep1f2uH89VDoYYXPrS//b2aLZuBBQuwTNuDTNlXp9quBsuqP2bwSPC3658ZXg72fS+mD+aNmp6eF5aP0L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eUXrl1hJkKRXGLF0Dc8nImpquQbZtgkyLuX3+SYhEQPXpmmDJZXfnWty79kmOO0sTxA84hE4RRrd9t6f80YgvFMcJGzW00DM9FVaMJtm2gKnqoea7XBK+qa33Oc+hTLhAVLd2xbNewLfkb25ZftXzHrjieNdW1CWRcQkuXiqVrqzSh3C/CtvQ8oz5DnHCfohS4L7A/CgYXvvT0UclJbx+vWRYBs/ZciIVvmrgSAYYkwRXMUvPY3PE5jrg/IjOKRJ7Ba8yIt/TXvc/Pz5Vnt8KymelYlmVaTVP6RJzMjvT2j3IzRH0as/W6gyijBKOE/EWK1ADEnEVakMxYRsQ8/QDaNm1LQRuwwga2PXqkm28BCnZfRNohmXFk8DmyS7AhxJABxaDdDvst/ehrHVzvHWeI8phlKd9bf48S0CUkbAGRwcvMSnZfRzxQrvYxYL9PcZJzsoRLNSYLhIFr1xnEZHVBuBy+iGtF+7UVLycM8Hdacmxu85S0zQOV6ZIZcPF/+rXdqzXKBCU5tE+C+mxQHT55p0lwm+Lz67tpesbxbbXmtQoK285rUptWv673B3UzV6+bXsbNQTi5X02z4V33pR/ULdqMnUfv9CwZ1JrQvavPH4X7i85uf3uzOXWSc2t6v7pBHRrk96SBR+b89O6+d1k9u/nzYzLqPc5W51cPaBnXkPMzvDi9tmdzHD7f3Xamk8nP0/s4F/mQTS7vEExh4Py9yReT6RnrsBW+hrPTnpeO6/X6jUl/JMlVNHYf7sPpZe/22ru8muDWW07bOewaSzkY5Q9/AItyqUaj39V6sl9IfC4tykIiIy5c/YXSJy6ACr2tdilZ8XMpPiTyZTPX67BRsztOw3XCwA3tphVanmX3rMCqNptOrdcs9WfNYo9ih9GYqFhKYdfz8zlBnPocaASZsWQ5ngPXP0HsIoG0Ph3KD4NRDmMmFbzWs8MT98R25aMThp2ufIRuGNS8eqMZ9Hq6dsnEFb3KglhAtqve7o56DwGTBQEl8WrOuRx0LmRJntAyF4ldWaIKhVweApnSYd/xGlWTk3SRgCJspizKE6gs5ouiQCZf/zsGwrywEo4XLBMoKb7CD5Pcf1fWQ/pERDlwldEJyJ7CgcPILtN5l7Z38NAq4YM8Iupjk8UVGcFrJruv3mZGDctmYDZ5YW6X3DdbvglxAMD8hJ+5X5pNvGhJtqKXB6w8M6SqtMv2PqHKUyVfLvOioXWlmJmEN23TqpsjwLmUvZcxewRqbiDML504G9Z7kTf2XX65mNORQAJSOX5asfzCdWMEXF03+vLzWX31LrMTUtZNwEocsnUSeStRjD+9uGAfKz9pvpZ/zyyL3tp1AGsrjsxT3jEEoTO1UufLywezgZmEJVIQWbYNfgjgUPBd46bIGy5CTtNDLuDjN5pSupaOMGY5Ff2uXhi21bfgKV4W4L85vYMpFP71yF7xD4/s34OLkdTBFOkbX/LfzgYpxgWD3MVJwaWlr+TtUwansy21fyV4WPC95meCv5tJ+535vWWrpvvfQ/tf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jx3jC9jGnsCMyyUhC0kLaZb2ZUfIx6DElkCSgfTXr2xiAoRk051hhtHx0Xe+c9EnXQiUpU4YCQFcEka1Qbel/2MnwQwSLzZmjcQ2GoBcYxb4voFjBN4s8Ryr0dS1gRA5DKiQiMqW7lh23bAt9buzrdC1Qqde85v2L127By4UtHKpWbq2zVIqwjJsS885DRkSRIQUZSBCicNJNBqGyjNEFSe9fbFjWQbk7YWUy9A0cS0GDGmKa5hl5oV55HMRi3BC5hTJnMNzzFi09Oe9m82mtqnXGJ+bjmVZphWYyicWZP5Zb3+qNkM8oAnbrTuIMkowSslvVJAagVywWIvSOeNELrI3oG3TtgpoA7bYwHaDftbNlwAluw8iHZHkAhligewKbAwJcKAYtB/jQUv//LEO7vbecURFwngmTtZ/RgnoGlK2hNgQVWYVu48jnilX+wJwOKA4zQVZw00xJkuEQWjfOCRkOyRCDV8stLL92lZUEwb4T1pyYR7yVLTNM5XpkjkI+X/6ddirHco9SnNo8yu3++TLAHnkaj4S9ujHSsrxFXmcblolhUPnHal9q5/Xp4O6n6vnTZedTTBMvzYn97Dw3W83t3x61RXm8OmL0/iVrq/5JuhNYm+a/Uy/PyySrck32Jd555pMtsnv9IG4I3fD0HfbuR59atrzsZfaIwb4r2z10BtHbu9x4X2ZXt6761n9crVy71AjmnQ321vb63t9f7hZPXg/IjaA2d/NL4F140+//7Rdusg+Xa7wsP+4Gq3ip/rvOprOPav1ktNhDsfGSg4m+ewBsKyWxWgMulpf9QvJ96WlsJDYSErXcFnok5BApd4udhWyEuZKfEgcqmbu1r2mZ3ecZt3p9b2eHVg9q2HZfSuy3CBwvH5Q6c+OxQnFDqMJKWIVCrubn/cJ4iwUQGPgxprleAFCfwexiyTSBnSsDgajAu6YUnDF1PItz42inh+4fc/yo36n7jlf+91uPwrqunbD5C295VEigR+rd/1IvceAyZJAIfHFnAs16EKqkqzQOpepXVujGoVcXQK80OHQaTRdU5BsmUJB2MxYnKdQWy6WZYFMsft3DIRFaSUCLxmXKC1P4ZtJnn6r6qF8YlI4iCKjr6B6CmcuI7tK51XajbOXVgUf5TEpDpsqruQE75gcf3qZmWJY9gOzzwsLu+K+3/KHEGcAzHf4mael2ceL1+QgenXBqjtDqUq7au8K1Va1fL3Oy4b6hWJyBW/apuWbE8C5kr2nO/YI1NxDmB+6cfasTyLv7cf8crmgE4kkZGr8tHL5gefGBETx3Bio47P96FvmKKSqm4StPGfrpOpVUjB+9+GCQ1z4KfM39bdhPH5p1xmsgzgqT/XGkITOi1Vxvzy9MRuYKViiBJHxQ/BzAOeCHxv3Rd5zkWqaZrmEt79ohdK1dIQxy6kcdPXScKi+JU/5tITwxekVTKnwz1f2Vrx5ZU9Hw4nSwQzpe1/y384GKccFg9olSMmlpW/V61MFp/MDtX8meF7wG8F7gn+cSfuV+bXloKan56H9Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065017</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065019</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065021</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832E5CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832EA4E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832EF7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_FUNC_CHILD_BAU_Get_CHILD_200_OK_P1" searchProperties="true" id="2d83eb93-5719-465d-a4e7-8199bd0eff99"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2832F5DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C2833043E190E0401F0A059926F9:9A0E62F8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2832F4BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2832F4BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2832F4BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2832F5DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2832FA5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C2832FF8E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2832F5DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2832FA5E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C2832FF8E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxkj22DAnsCMg6GhhZAATW/7ckeR16DUlh1L5qO/vpKJCVCSm94ZZhitV2fPfuhIlxwnse35nEMuaMq0YdDR/20SDLhphUboti2jYTmu8eBYLcM17XbkNpsN8tDStSHnBQwZF5iJjm6bVt2wTPmbW6bnmJ7t1JxW/Yeu3UPOJbR0qZm6tklixr0ybEcvcualmFPuMZwA9wTxZv545ElPD1ec9O7ljmUZMO8uhcg8hEgtBAJxTGokTdAlOvK5DLk3owuGRZHDc8yQd/Tnvev1urau19J8gWzTNJHpIukTcrr4qHc/VJshHLIo3a17mKWMEhzTX1iRGoNYpqHmx4s0p2KZvAJtIctU0AZsiEGsBvuoo5cAJbt3Ih2RzDk2+BJbFdgUIsiBEdC+Tocd/eP7OrjbO88x41GaJ/xk/XeUgK0gTjMIDV5lVrF7P+KZcnUvgXhDRuKC0xXcqDHJMAGu3eYQ0c2Icjl8IdfK9msbXk0YkL9pySU65ClpozOVCegCuPg//Trs1Q7lHscFdB+DaEumN2boc3Tx8/Y6yZZFAjj6FfmdksKh847UvtXP69NB3c/V86Zsbl+37z8H48+N9XC2Xk5ugvn3L7dXdDSbEJsFwKwiopN5g326Y3UbNdKvo9bNpy/9xwEEXLjXNDev+3ZjME2/ffgRfqFmNvt1gWbNxLkf9QqnGDujmf9p7OPvve39qGiM3Ond1e2QLbAlvvXX9O4C04j1w4e78RxBnTqbie/8nDx+qPtfxeYOLp62/U2L3+fbwaLzktNhDsfGSg5mxcMjEFEt1WgMA20g+4XF29KiLDQ0otLVy5Q+cQFM6F21S8mKV0jxoaEnm7lb99tNq2e36/bACfqWa/bNhmkNTN90XNduDtxKf3YsTij2UhZRFUsp7G5+3iZIEo8DCyE3VmlBlsD1NxADLLA2ZFN5MFLGYZ5KBffbbr/ftOvBoG36buC2B0G95/ZMt9dutJvNpq7dpGLCJrkfCciP1bt+pN5TIDSjoCRezTmXg86FLMkTXhUitmorXGNQyEsgVzrs2Y22gzhNshgUYZSkYRFDLVtmZYEQ3/3bBia8tFJOsjQXOC5P4atJnn6r6iF9QqocuMroCmRP4cxlZFXpvJ528zDtCt4vQqoOmyyuyCnZMTn+9DIzalj2A7PPi3Cr4r7f8pcQZwDQG/zQaWn28cIVPYheXbDyzpCq0q3a+4RrT7VitSrKhraUYuYSHlnIbKEZkELK3nae/gSG9hDoXTfOnvVJ5L39mF8hlmwmsIBEjp9WLt/x3JgBV8+NoTw+m/e+ZY5CyroJ2Ihztl4sXyWK8ZsPF+IR5SfNt/JvnebhS7vOYB3EkXnKN4agbKFW6n7ZvjIbJJWwVApimh+CnwM4F/zYuC/ynouQ0/RQCHj9i6aUrqNjQtKCiWGgl4ZD9S15im0G3ovTHzClwj9f2Rv+6pX9z3g0kzqYYH3vS//b2aDluBCQuzgtuXT0jXx9yuBscaD2zwTPC37j6i3BP86k+4f5T8tBTU/PQ/c3</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxkj22DAnsCMg6GhhZAATW/7ckeR16DUlh1L5qO/vpKJCVCSm94ZZhitV2fPfuhIlxwnse35nEMuaMq0YdDR/20SDLhphUboti2jYTmu8eBYLcM17XbkNpsN8tDStSHnBQwZF5iJjm6bVt2wTPmbW6bnmJ7t1JxW/Yeu3UPOJbR0qZm6tklixr0ybEcvcualmFPuMZwA9wTxZv545ElPD1ec9O7ljmUZMO8uhcg8hEgtBAJxTGokTdAlOvK5DLk3owuGRZHDc8yQd/Tnvev1urau19J8gWzTNJHpIukTcrr4qHc/VJshHLIo3a17mKWMEhzTX1iRGoNYpqHmx4s0p2KZvAJtIctU0AZsiEGsBvuoo5cAJbt3Ih2RzDk2+BJbFdgUIsiBEdC+Tocd/eP7OrjbO88x41GaJ/xk/XeUgK0gTjMIDV5lVrF7P+KZcnUvgXhDRuKC0xXcqDHJMAGu3eYQ0c2Icjl8IdfK9msbXk0YkL9pySU65ClpozOVCegCuPg//Trs1Q7lHscFdB+DaEumN2boc3Tx8/Y6yZZFAjj6FfmdksKh847UvtXP69NB3c/V86Zsbl+37z8H48+N9XC2Xk5ugvn3L7dXdDSbEJsFwKwiopN5g326Y3UbNdKvo9bNpy/9xwEEXLjXNDev+3ZjME2/ffgRfqFmNvt1gWbNxLkf9QqnGDujmf9p7OPvve39qGiM3Ond1e2QLbAlvvXX9O4C04j1w4e78RxBnTqbie/8nDx+qPtfxeYOLp62/U2L3+fbwaLzktNhDsfGSg5mxcMjEFEt1WgMA20g+4XF29KiLDQ0otLVy5Q+cQFM6F21S8mKV0jxoaEnm7lb99tNq2e36/bACfqWa/bNhmkNTN90XNduDtxKf3YsTij2UhZRFUsp7G5+3iZIEo8DCyE3VmlBlsD1NxADLLA2ZFN5MFLGYZ5KBffbbr/ftOvBoG36buC2B0G95/ZMt9dutJvNpq7dpGLCJrkfCciP1bt+pN5TIDSjoCRezTmXg86FLMkTXhUitmorXGNQyEsgVzrs2Y22gzhNshgUYZSkYRFDLVtmZYEQ3/3bBia8tFJOsjQXOC5P4atJnn6r6iF9QqocuMroCmRP4cxlZFXpvJ528zDtCt4vQqoOmyyuyCnZMTn+9DIzalj2A7PPi3Cr4r7f8pcQZwDQG/zQaWn28cIVPYheXbDyzpCq0q3a+4RrT7VitSrKhraUYuYSHlnIbKEZkELK3nae/gSG9hDoXTfOnvVJ5L39mF8hlmwmsIBEjp9WLt/x3JgBV8+NoTw+m/e+ZY5CyroJ2Ihztl4sXyWK8ZsPF+IR5SfNt/JvnebhS7vOYB3EkXnKN4agbKFW6n7ZvjIbJJWwVApimh+CnwM4F/zYuC/ynouQ0/RQCHj9i6aUrqNjQtKCiWGgl4ZD9S15im0G3ovTHzClwj9f2Rv+6pX9z3g0kzqYYH3vS//b2aDluBCQuzgtuXT0jXx9yuBscaD2zwTPC37j6i3BP86k+4f5T8tBTU/PQ/c3</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0SZx1HIBVIgKkiBlJIZ6AU6vczLkXE24E5ih9gBOl9/7NBQoLSnPRIS8s722mtfvOwzjpLY8XzOIROEUS0MWvo/qDqxT+vVyGi6U2TU3AY2GlEVGY5zWndc14km1ZquhZznEFIuEBUt3bHsqmFb8ndrW55reU6j4jYbv3XtDjIuoaVLxdK1dRJT7hVhW3qeUY8hTrhHUQLcE9gb+8OBJz09VHLS22cblkXArD0XIvVME1ciwBDHuIJZYp6Zez5nEffGZEaRyDN4iRnxlv6yd7VaVVbVCstmpmNZlmk1TekTcTL7prdPys0QhXTKNusuoowSjGLyFylSQxBzFml+PGMZEfPkHWjbtC0FbcAaG9iu0W+6+RqgYPdJpD2SGUcGnyO7BBvBFDKgGLRfo7Clf/tcBzd7bzNE+ZRlCT9Yf40S0CXELIXI4GVmJbvPIx4pV/sMsBdSHOecLOFSjUmKMHDtOoMpWQ8Il8MXca1ov7bm5YQB/kpLzsxdnpK2eaQyAZkBF/+nX7u92qDcoTiHtv18O4CHm1lGO0lSf4SLZJTcPdCHW/+xVVDYdd6Q2rb6ZX04qNu5etnUSTFc8l4QO6va1fnQXbnfWb9/at3AMLxZzBaTfrLE874fkEVW41F3+TRy4l+jO6fv/MH3tvnzWaxQbykG61+Tk/n1U3ppX9x1aoOOPe7z4X1udfN0Pv5u3qN6I36YX19cDPPkYnqT/f7ZfUTNwVWw8vvrXi2P6lYPs7DfubOnEzdiJ0GaBX9/TOH773toIrigNGy95rSbw76xlINxPnkCLMqlGo0w0HqyX0h8LC3KQiJjWrh6qdInLoAKva12KVnxcik+JPJkMzfr88ap3XUaVafnu+d20zq3apbds3zLbTad016z1J8NiwOKXUanRMVSCruZn48J4sTjQCPIjCXL8Ry4/gFigATSQjqSB4NRDrdMKrhb992e79iBFZw33Eat2ujWg9Oq69hu99yvSh2+ZOKKXmX+VEC2r97VPfUeASYpASXxas65HHQuZEkWaJmL2K4sUYVCLi+BTOmw59QarslJksagCJsJi/IYKuk8LQpk8s2/YyDMCyvhOGWZQHFxCt9N8vBbWQ/pExHlwFVGHZA9hSOXkV2m8ybt2tFLq4T384iowyaLKzKCN0z2P73OjBqW7cBs88LcLrlvt3wR4giA+QE/87A023jRkuxELy9YeWdIVWmX7V2gyqKSL5d50dC6UsxMwpu2adXNMeBcyt7zLfsD1NxCmJ+6cbasDyJv7fv8cjGnY4EEJHL8tGL5iefGGLh6boTy+Kw/+5bZCynrJmAtjtm6sXyVKMYfPlywh5WfNF/LvxXLotd2HcHaiSPzlG8MQehMrdT98vzObGAmYYkURJbtgh8DOBZ837gt8paLkNM0yQW8/0VTStfSEcYspyIM9MKwq74FT/Gcgvfq9AamUPiXK3vN372yH4aDsdTBBOlbX/LfzgYpxgWD3MVJwaWlr+XrUwansx21fyF4XPBrnY8Efz+T9hvzW8tOTQ/PQ/tf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQK5dEBYmBMqVDS9XQaacvR8bZAXcSm9oO0H79sUNDgdKezpGQkHe211774mWfCJRnXtQVArgkjBrDftv8p5k2U0gSz0pDP7SCYNqwWn7TtQIvdP3WdJqkU2waQyEKGFIhEZVt03Nc33Id9Zu4TlR3It+phQ3/3jR+ARcKWrnUHNNY5xkVURm2bRacRgwJIiKKchCRxFHcvRhFyjNCFSezc7JhWQbknbmUi8i2cS0BDFmGa5jl9om953OSiCgmM4pkweElZiLa5sve1WpVW/k1xme25ziO7YS28kkEmX01O1+qzZAMaco26x6ijBKMMvKMNKkLkHOWGN1sxjiR8/wdaNd2HQ1twRpb2A3oV9N+DVCy+yTSHkkukCXmyK3AriEFDhSDcXM9bJtfP9fBzd4JR1SkjOfiYP13lIAuIWMLSCxRZVax+zzikXJ1TgBHQ4qzQpAlXOoxWSAMwrjikJL1iAg1fIkwyvYba1FNGOC/acmJvctT0baPVKZPZiDk/+nXbq82KL9QVkBnRL0fYeOBeKubq+yPz1QSv9C9na1+i3ZJYdd5Q2rb6pf14aBu5+plE/69dAs5Hty3ztjzT9Gf1Pv0zlux+OlPfOY14tv1dHKRPp6Np2jWfz5/uuPJOSCSOE9h91re4hQ36Gjk3ftD3vjy8HM8bf4IB+PLbB0Hp7frmcvjQMgfsUvG5J7ctc6ev93xm0k/vFjZ56v17Nv8WdZTb34j09vWQ9Y7dWV+Bws8zL/MeH8yPvdHt5e3Bc7n53YzaL/mtJvDvrGSg7iYPgCW1VKPxrBvDFS/kPxYWrSFJFZaukYLrU9CApVmR+/SshIVSnxIEqlmbtanrYbb81q+Nxi0Tt3QOXUCxx04Xacehl5jEFb6s2FxQLHHaEp0LK2wm/n5mCDOIwE0AW4tWYHnIMwPEPtIImNIr9XBYFTAhCkF7/m9biM47fadMAwGruM1/Hqr6YcNp1lvDvpd07hkckzHvJtK4Pvq7e+p9zVgsiCgJV7PuVCDLqQqySNaFjJza0tUo1CoS4BrHY68oFW3BckXGWjCds6SIoPaYr4oC2SLzb9nISxKKxF4wbhEWXkK303y8FtVD+WTEO0gdEbfQfUUjlxGXpXOm7SDo5dWBd8tEqIPmyqu5ARvmOx/ep0ZPSzbgdnmhYVbcd9u+UuIIwD2B/zsw9Js4yVLshO9umDVnaFUpVO19xHVHmvFclmUDW1qxeQK3nZtp2nHgAsle08T9geovYWwP3XjbFkfRN7a9/kVck5jiSTkavyMcvmJ50YMQj83hur4rD/7ltkLqeomYS2P2XqZepVoxh8+XHCEtZ8yX6m/FePJa7uOYO3EUXmqN4YkdKZX+n55emc2MFOwRAki47vgxwCOBd83bou85SLVNE0LCe9/MbTStU2EMSuoHPbN0rCrviVP+bSA6NXpDUyp8C9X9lq8e2XfXYxipYM5Mre+5L+dLVKOCwa1S5CSS9tcq9enCk5nO2r/QvC44AffPxL8/Uw6b8xvLTs1PTwPnX8B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065024</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065026</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065028</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2832F5EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2832FA6E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C2832FF9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_touP2" searchProperties="true" id="24b623af-1469-41bb-be35-a91a05736f0d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU" id="56e84f74-144a-4609-8df5-0421d96f3cac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C283305FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C283312DE190E0401F0A059926F9:6BFFE2F1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C283304DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C283304DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C283304DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C283305FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C28330A7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28330E2E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C283305FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C28330A7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28330E2E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6NgJ4RbVJAol5nMtLQlbYfOy5FxNsFtYtPYATpff5zQUKC0pz0SEvLO9tprX7zsE0mS2PG6UkKqmOCG32+b/9Rhht2w1rSatRlYLpCG1arVp1YVh25YD6vTFglNw5cyA59LRbhqmw62q5aN9e/axl4Ne1Wn0nLwH9O4hVRqaO1SwaaxTmIuvSJs28xS7gkimfQ4SUB6inpB9/zM054eKTmZnZMNyyJg2pkrtfAQopUQKMQxrVCRoBO053MSSi9gEScqS+E5Zijb5vPe1WpVWVUrIo2QgzFGuIW0TyhZ9NXsfCk3Q+jzmdise4QLziiJ2V+SkzoHNReh0Y0jkTI1T96AtpGNc2gL1tSitsu/muglQMHug0h7JFNJLDkndgk2hhmkwCkYN2O/bX79WAc3e69TwuVMpIk8WH+OEvAlxGIBoSXLzEp2H0c8Uq7OCVDP5zTOJFvCKB+TBaEgjcsUZmx9xqQevlAaRfuNtSwnDOhnWnKCdnlq2uhIZfosAqn+T792e7VBuSVxBh3FG/NvQ+eOYsju+8nVRfIUXQU9p+eKdkFh13lDatvq5/XhoG7n6nnT4A41x3/7Tlq3MUGTUXL7bflzcvOjMfjjpG63P3xYn83J5cPEce9Hcql+/Qm+B1V0uabMH6Lswr5k01H112g0vB9/kYk7vVip0UqdXo4b0/vbU3tU/x7doGiQOo3BQ0bHMhI9tZr0G7/HcniLria/g97Kv1fZTZQ4kyBySP/qO8660y9n64vkzlfZLxEMr4Mf6OruvP2S024O+8ZSDoJseg9Ulct8NPy+MdT9Iup9acktLLRmhau3yPVJKuDK7OS7clnxMi0+LPR0MzfrQbNu95xmtYprw4HdwgPsYnuIu7jWajn1YavUnw2LA4o9wWcsj5Ur7GZ+3idIE08CDyG1liKjc5DmO4h9oojh87E+GIJLuBZawQdVXLcbNYyHTbdb7dWwc1ob9Bo9t17T/FuOaYyEuuAXaXemIN1X7+qeeo+BsgWDXOLzOZd60KXSJXkky0zFdmVJKhwyfQmkuQ57jtusIcmSRQw5YZSIMIuhspgvigIhufl3LEJlYWWSLkSqSFycwjeTPPxW1kP7hCx3kHlGp6B7CkcuI6dM5+2067tpl/DdLGT5YdPFVSmjGyb7n15mJh+W7cBs86LSLrlvt3wS4ggAeocfOizNNl64ZDvRywtW3xlaVTplex9J5bGSLZdZ0dBGrpiphkc2wg0UAM207D1diwfgaAuBPnTjbFkfRN7a9/llas4DRRQkevyMYvmB50YAMn9u+Pr4rD/6ltkLqeumYK2O2XqxfpXkjN99uFCP5n7afKn/ViJ9SfwY1k4cnad+YyjGo3yV3y9Pb8wGFRqWaUEU6S74MYBjwfeN2yJvuSg9TdNMwdtfjFzp2iahVGRc+X2zMOyqb8FTPS3Ae3F6BVMo/POVvZZvXtmT87NA62BCzK0v+29nixXjQkHvkqzg0jbX+vWpg/NoR+2fCR4XfLf/nuDvZ9J5ZX5t2anp4Xno/As=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6NgJ4RbVJAol5nMtLQlbYfOy5FxNsFtYtPYATpff5zQUKC0pz0SEvLO9tprX7zsE0mS2PG6UkKqmOCG32+b/9Rhht2w1rSatRlYLpCG1arVp1YVh25YD6vTFglNw5cyA59LRbhqmw62q5aN9e/axl4Ne1Wn0nLwH9O4hVRqaO1SwaaxTmIuvSJs28xS7gkimfQ4SUB6inpB9/zM054eKTmZnZMNyyJg2pkrtfAQopUQKMQxrVCRoBO053MSSi9gEScqS+E5Zijb5vPe1WpVWVUrIo2QgzFGuIW0TyhZ9NXsfCk3Q+jzmdise4QLziiJ2V+SkzoHNReh0Y0jkTI1T96AtpGNc2gL1tSitsu/muglQMHug0h7JFNJLDkndgk2hhmkwCkYN2O/bX79WAc3e69TwuVMpIk8WH+OEvAlxGIBoSXLzEp2H0c8Uq7OCVDP5zTOJFvCKB+TBaEgjcsUZmx9xqQevlAaRfuNtSwnDOhnWnKCdnlq2uhIZfosAqn+T792e7VBuSVxBh3FG/NvQ+eOYsju+8nVRfIUXQU9p+eKdkFh13lDatvq5/XhoG7n6nnT4A41x3/7Tlq3MUGTUXL7bflzcvOjMfjjpG63P3xYn83J5cPEce9Hcql+/Qm+B1V0uabMH6Lswr5k01H112g0vB9/kYk7vVip0UqdXo4b0/vbU3tU/x7doGiQOo3BQ0bHMhI9tZr0G7/HcniLria/g97Kv1fZTZQ4kyBySP/qO8660y9n64vkzlfZLxEMr4Mf6OruvP2S024O+8ZSDoJseg9Ulct8NPy+MdT9Iup9acktLLRmhau3yPVJKuDK7OS7clnxMi0+LPR0MzfrQbNu95xmtYprw4HdwgPsYnuIu7jWajn1YavUnw2LA4o9wWcsj5Ur7GZ+3idIE08CDyG1liKjc5DmO4h9oojh87E+GIJLuBZawQdVXLcbNYyHTbdb7dWwc1ob9Bo9t17T/FuOaYyEuuAXaXemIN1X7+qeeo+BsgWDXOLzOZd60KXSJXkky0zFdmVJKhwyfQmkuQ57jtusIcmSRQw5YZSIMIuhspgvigIhufl3LEJlYWWSLkSqSFycwjeTPPxW1kP7hCx3kHlGp6B7CkcuI6dM5+2067tpl/DdLGT5YdPFVSmjGyb7n15mJh+W7cBs86LSLrlvt3wS4ggAeocfOizNNl64ZDvRywtW3xlaVTplex9J5bGSLZdZ0dBGrpiphkc2wg0UAM207D1diwfgaAuBPnTjbFkfRN7a9/llas4DRRQkevyMYvmB50YAMn9u+Pr4rD/6ltkLqeumYK2O2XqxfpXkjN99uFCP5n7afKn/ViJ9SfwY1k4cnad+YyjGo3yV3y9Pb8wGFRqWaUEU6S74MYBjwfeN2yJvuSg9TdNMwdtfjFzp2iahVGRc+X2zMOyqb8FTPS3Ae3F6BVMo/POVvZZvXtmT87NA62BCzK0v+29nixXjQkHvkqzg0jbX+vWpg/NoR+2fCR4XfLf/nuDvZ9J5ZX5t2anp4Xno/As=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyjxXEuXCLClKAtkOHTjuQ3ng5cp0NuE3sNHaAztcfOzQUKO3pHAkJeWd77bUvXvaxwEns+IEQkEnKmTHot81/nJaHUWNaq9ieAxVv+uBUHhxUqxC70aw1kdeou5FpDITIYcCExEy2TQfZbsVG6hfayK8h3/WqtYY3MY0byISCVi5VZBqrJGbCL8K2zTxjPseCCp/hBIQviT8OLoa+8vRxycnsHK9ZFgGzzlzK1LcsUo2AQByTKuGJdWzt+BxHwh/TGcMyz+A1ZiTa5uve5XJZXbpVns0sByFkoZalfCJBZ9/NzrdyM0QDNuXrdQ8zzijBMf2DNakLkHMeGUE84xmV8+QDaNuykYauwIqo8nnsu2m9BSjYfRFph2QmcEXMsV2CjWAKGTACxvVo0Da/f62D671hhpmY8iwRe+u/owRsATFPIaqIMrOS3dcRD5SrcwzEHzAS54Iu4JcekxQTEMZVBlO6GlKhhi8SRtF+YyXKCQPyNy05trZ5KtrWgcr06QyE/D/92u7VGuUGxzl0au5Tfh1eBulj1M0oCS9qqHUy4b+efv9uFxS2ndekNq1+Xe8P6mauXjeNvbPnZnoV9xv0aHppz8/vh6tFctuceDe3i/Aaunz5++7M7reco3h8GyU30WAokx/hPf5zmtm30/Pgfg4XtXP74r7+LQ5H9IgtvFN4RIuXFzkOb1rX8ufIC5fhOcprdCjc3p9WePbcn9xFgchG49XT0j0Krmo/u8NkNJyk949c9Po/6ujb42SEL9PJ7Iwe8R8DbMWJ137LaTuHXWMpB+P84RGILJd6NAZ941T1C8vPpUVbaFSZFq5+qvVJSGDS7OhdWlb8XIkPjXzVzPX6pFm3e07TdVHQOLFb6AR5yD5FAaq1Wk79tFXqz5rFHsUeZ1OqY2mFXc/P5wRJ4gtgEWSVBc/JHIT5CWIfS2wM2EgdDM4EhFwpuOrnabfRbaK+6/VQsxl0u/XgBNX7wYnb6zquafzi8pJdZsFUQrar3u6Oeo+A0JSClng950INupCqJM94kcvYri5wlUGuLoFM67DveM2aJWiSxqAJWwmP8hiq6TwtCmSJ9b9TwUQUVipIyjOJ4+IUfpjk/reyHsonotpB6Iy6oHoKBy4jp0zn47Tr22mX8EEeUX3YVHGlOqBrJruf3mZGD8tmYDZ5EWGX3Ddb/hLiAID1CT9rvzSbeNGCbkUvL1h1ZyhV6ZTtfcbV52q+WORFQxtaMTMFb9kWalhjILmSvZeQPwGzNhDWl26cDeu9yBv7Lr9cztlYYgmJGj+jWH7huTEGoZ8bA3V8Vl99y+yEVHWTsJKHbL1YvUo0408fLsQn2k+Zr9TfkmdviR/C2oqj8lRvDEnZTK/0/fLywWwQrmCpEkSebYMfAjgUfNe4KfKGi1TT9JBL+PiLoZWubWJCeM7koG8Whm31LXjKlxT8N6d3MIXCv17ZK/HhlX13MRwrHUywufGl/+1cocW4EFC7BC24tM2Ven2q4Gy2pfavBA8Lvtf/TPB3M+m8M7+3bNV0/zx0/gU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YwgFiBqc74ehdntVux3W6/3EnDUdNCQBJQ99dvwGLV2t7unXHGyeHkOc95yZNccRyFptvhHFJBY6Z4/Zb676NjA240HQ10m2gW0W3NwXOiPZoBtudWA1tzR1U8zjPwGBeYiZZq6kZdM3T5mxm629DderPWNO0HVbmDlEto6VLTVWUThYy7ZdiWmqXMjTGn3GU4Au4K4vqd8XdXerq44qS2r3Ysy4BpeylE4iJEagEQCENSI3GErtCRz1XAXZ8uGBZZCi8xA95SX/au1+vaul6L0wUydV1HuoOkT8Dp4qva/lJthsBj83i37mEWM0pwSH/jgtQYxDIOlE64iFMqltE70AYy9AJagw3RiGGxryp6DVCy+yTSEcmUY40vsVGBTWEOKTACyu3Ua6lfP9fB3d5Zihmfx2nET9Z/RwlYDmGcQKDxKrOK3ecRz5SrfQXE9RgJM05zmBRjkmACXPmRwpxuvlMuhy/gStl+ZcOrCQPyNy25Qoc8JW10pjJ9ugAu/k+/Dnu1Q7nDYQbtdTTtjMe3NNzS29Xg6SZpjLudcY79379aJYVD5x2pfatf1qeDup+rl035zfXgIk/qW56M9J6f5AsSz/zu/U2zsVqZzQcam6PRLEvFFD9e3vh2By3rKwRdz7knF5MfaOR8e1rODI9PyOTLho7R7Shs1J1BjOpJ5Ne35BIYf/Ks++lkO3wyR7f/kJ9s9XzxgH79Xpv0zlpeP+dNo3evQ9i0kO88fhNP5rbjfPGH6zvvYeZb24vnn9ZNZzThrdecDnM4NlZy4GePT0BEtSxGw+srQ9kvLD6WlsJCA21eurpJoU9cABNqu9hVyIqbSfGhgSubuVsP7EujZ9r1uj4wB4ajD3RLN4Z6R284jnk5dCr92bE4odiL2ZwWsQqF3c3PxwRJ5HJgAaRaHmdkCVz9ALGPBVY8NpUHI2YcZrFUcKur151h99K47Nv9oW1bPb3nNDsDs9s0u3ajoSqTWFyz67QzF5Aeq3f9SL2nQGhCoZD4Ys65HHQuZElWOM9EaNRyXGOQyUsgLXTYNS27gTiNkhAKwiiKgyyEWrJMygIhvvs3NUx4aaWcJHEqcFiewneTPP1W1UP6BLRw4EVGXZA9hTOXkVml8yZt6+ylVcF3soAWh00WV6SU7Jgcf3qdmWJY9gOzz4two+K+3/KXEGcA0Af80Glp9vGCnB5Ery5YeWdIVWlX7V3h2qqW5XlWNrRZKGYq4ZGB9CbygWRS9raz+BkY2kOgT904e9Ynkff2Y36ZWDJfYAGRHD+lXH7iueEDL54bnjw+m8++ZY5CyroJ2Ihztl4oXyUF4w8fLsQlhZ80/5B/6zgNXtt1BusgjsxTvjEEZYtiVdwv23dmg8QSlkpBjNND8HMA54IfG/dF3nMRcpoeMwHvf1EKpWupmJA4Y8Lrq6XhUH1LnmKbgPvq9AamVPiXK3vD372y78fffamDEVb3vvS/nTVajgsBuYvTkktL3cjXpwzOFgdq/0LwvOBb/Y8E/ziT9hvzW8tBTU/PQ/sP</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065031</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065033</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065035</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833060E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C28330A8E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28330E3E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="8ff93ce4-849f-4683-8624-c2e63038ba11"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833149E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C2833217E190E0401F0A059926F9:F83E4310"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833137E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833137E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833137E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833149E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2833191E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28331CCE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833149E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2833191E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28331CCE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlchVy6JClIKdDZT2k65qduXlescwDOJHWKHS3/92KGhQGm3sxIS8snxd75z8WdfcJQmThByDrkgjGpRr63/27Qc7DRb2Jg1wDI81wID+R4YTa/hYsf2XcfxdS3ivICIcoGoaOuOZbuGbcnf2LaCuhW4fq3l2o+6NoWcS2jpUrN0bZMmlAdl2LZe5DRgiBMeUJQCDwQORuHNIJCeAao46Z2LHcsyYN5ZCJEFpolrMWBIElzDLDUvzCOfi5gHIzKnSBQ5vMSMeVt/2bter2trt8byuelYlmVavil9Yk7mX/XOl2ozxBGdsd26iyijBKOEPCNF6gbEgsVamMxZTsQifQfaNm1LQRuwwQa2PfpVN18DlOw+iXREMufI4AtkV2BDmEEOFIM2GUZt/evnOrjbO84R5TOWp/xk/WeUgK4gYRnEBq8yq9h9HvFMuToXgIOI4qTgZAW3akwyhIFrP3KYkc2AcDl8MdfK9msbXk0Y4D9pyYV5yFPSNs9UpkfmwMX/6ddhr3YoU5QU0Pm7fsu669C720bDSf6tlwyKdNadTNffrHZJ4dB5R2rf6pf16aDu5+pl01Nc3Ey26K5XLMl4Mf5xfTMVIpybT+MUZffPP6HY1qch6y/+sdwl6Y7XrhfO7pONw24nDac5tn895z43+zeX8/hL0/ue3UaZmEQhbiydu8ZDlGXFwM0Gjmcm234shhPkPH1H9pM5YGv/V7HsxdvkepBvryY//fuHsTt+bN2jzV/Wty98uqpPH+FxuL0mj9ebeMpY+zWnwxyOjZUcjIqnn4BFtVSjEfW0K9kvJD6WFmUhsTErXYNM6RMXQIXeUbuUrASFFB8SB7KZu3W/1bC7Tst1bc/v277VtzzLvrJCq+77TuPKr/Rnx+KEYpfRGVGxlMLu5udjgjgNONAYcmPFCrwArn+A2EMCaREdyoPBKIcxkwruXVm+d+leWq16N7Sv/GbTb9Z9t9H3Q9dphY6u3TJxR+/ycCYgP1Zv90i9h4BJRkBJvJpzLgedC1mSJVoVIrFrK1SjUMhLIFc6HDheq25ykmYJKMJmyuIigVq2yMoCmXz37xgI89JKOM5YLlBSnsJ3kzz9VtVD+sREOXCV0SXInsKZy8ip0nk/7cZh2hV8WMREHTZZXJETvGNy/Ol1ZtSw7AdmnxfmdsV9v+UPIc4AmB/wM09Ls48Xr8hB9OqClXeGVJVO1d4lqi1rxWpVlA1tKsXMJbxpm1bTHAEupOxtx+wXUHMPYX7qxtmzPom8tx/zK8SCjgQSkMrx08rlJ54bI+DquRHJ47P57FvmKKSsm4CNOGfrJvJVohh/+HDBAVZ+0vxD/q1ZHr+26wzWQRyZp3xjCELnaqXul+07s4GZhCVSEFl+CH4O4FzwY+O+yHsuQk7TUyHg/S+aUrq2jjBmBRVRTy8Nh+pb8hTbDIJXpzcwpcK/XNkb/u6V/XAzGEkdTJG+9yX/7WyQclwwyF2clFza+ka+PmVwOj9Q+xeC5wXfbX4k+MeZdN6Y31oOanp6Hjq/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlchVy6JClIKdDZT2k65qduXlescwDOJHWKHS3/92KGhQGm3sxIS8snxd75z8WdfcJQmThByDrkgjGpRr63/27Qc7DRb2Jg1wDI81wID+R4YTa/hYsf2XcfxdS3ivICIcoGoaOuOZbuGbcnf2LaCuhW4fq3l2o+6NoWcS2jpUrN0bZMmlAdl2LZe5DRgiBMeUJQCDwQORuHNIJCeAao46Z2LHcsyYN5ZCJEFpolrMWBIElzDLDUvzCOfi5gHIzKnSBQ5vMSMeVt/2bter2trt8byuelYlmVavil9Yk7mX/XOl2ozxBGdsd26iyijBKOEPCNF6gbEgsVamMxZTsQifQfaNm1LQRuwwQa2PfpVN18DlOw+iXREMufI4AtkV2BDmEEOFIM2GUZt/evnOrjbO84R5TOWp/xk/WeUgK4gYRnEBq8yq9h9HvFMuToXgIOI4qTgZAW3akwyhIFrP3KYkc2AcDl8MdfK9msbXk0Y4D9pyYV5yFPSNs9UpkfmwMX/6ddhr3YoU5QU0Pm7fsu669C720bDSf6tlwyKdNadTNffrHZJ4dB5R2rf6pf16aDu5+pl01Nc3Ey26K5XLMl4Mf5xfTMVIpybT+MUZffPP6HY1qch6y/+sdwl6Y7XrhfO7pONw24nDac5tn895z43+zeX8/hL0/ue3UaZmEQhbiydu8ZDlGXFwM0Gjmcm234shhPkPH1H9pM5YGv/V7HsxdvkepBvryY//fuHsTt+bN2jzV/Wty98uqpPH+FxuL0mj9ebeMpY+zWnwxyOjZUcjIqnn4BFtVSjEfW0K9kvJD6WFmUhsTErXYNM6RMXQIXeUbuUrASFFB8SB7KZu3W/1bC7Tst1bc/v277VtzzLvrJCq+77TuPKr/Rnx+KEYpfRGVGxlMLu5udjgjgNONAYcmPFCrwArn+A2EMCaREdyoPBKIcxkwruXVm+d+leWq16N7Sv/GbTb9Z9t9H3Q9dphY6u3TJxR+/ycCYgP1Zv90i9h4BJRkBJvJpzLgedC1mSJVoVIrFrK1SjUMhLIFc6HDheq25ykmYJKMJmyuIigVq2yMoCmXz37xgI89JKOM5YLlBSnsJ3kzz9VtVD+sREOXCV0SXInsKZy8ip0nk/7cZh2hV8WMREHTZZXJETvGNy/Ol1ZtSw7AdmnxfmdsV9v+UPIc4AmB/wM09Ls48Xr8hB9OqClXeGVJVO1d4lqi1rxWpVlA1tKsXMJbxpm1bTHAEupOxtx+wXUHMPYX7qxtmzPom8tx/zK8SCjgQSkMrx08rlJ54bI+DquRHJ47P57FvmKKSsm4CNOGfrJvJVohh/+HDBAVZ+0vxD/q1ZHr+26wzWQRyZp3xjCELnaqXul+07s4GZhCVSEFl+CH4O4FzwY+O+yHsuQk7TUyHg/S+aUrq2jjBmBRVRTy8Nh+pb8hTbDIJXpzcwpcK/XNkb/u6V/XAzGEkdTJG+9yX/7WyQclwwyF2clFza+ka+PmVwOj9Q+xeC5wXfbX4k+MeZdN6Y31oOanp6Hjq/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH++UppRK6QgzfI6oKAh61Jc7Id1APG0KSQrorz9JsQiIXr0zzDDZ3Vl77Y+s5EzgOCoGdSGAS5owo9uqmv+6YYj88rhiOWPkWCXfrVg+8j3LLZZCB/vgeiXHNLpCpNBlQmImq2YROa7lIPUbOSjwUFByCmUPPZnGPXChoJVLAZnGOo6YCLKwVTPlLEiwoCJgOAYRSBIM672rQHkGOOdk1s42LLOAvDaTch7YNimEQCCKSIEksX1m7/mchSIY0inDMuXwFjMUVfNt72q1KqzcQsKndhEhZKOKrXxCQacnZu1XvhnCLpskm3UTs4RRgiP6ijWpHshZEhr1aJpwKmfxJ9CO7SANbcGaWMQpsRPTfg+Qsfsm0h5JLrAlZtjJwW5hAhwYAePutls1T77Xwc3eEcdMTBIei4P1zygBW0KUzCG0RJ5Zzu77iEfKVTsDEnQZiVJBl3Ctx2SOCQijz2FC11dUqOELhZG131iLfMKA/KQlZ/YuT0XbPlKZFp2CkP+nX7u92qDc4yiFGh50MLqOe6vTPr2cxB7v8vDlot6aDR+rGYVd5w2pbavf1oeDup2rt03UuY6TJW3cD9IS7XVE8/L14rw/ejolrQt4HLmLwbjXuWs937srcnXxci95vzG2W97gcThI71qlRgQvrDkfFPvI/dXCkX/VqDeuvdeU/uZckOU5F0+Nmwe58H4Lv5G6D+d/XkvOIJ60R5fjOEYzcotnbOFfXD5cP6MVtG+hMu716PjXVWONZv8sOr2+nXr3Tof3/Op7Trs57BtzORim42cgMl/q0ei2jI7qF5ZfS4u20NCaZK7BXOuTkMCkWdO7tKwEqRIfGgaqmZt12z91mkXfdZ2K03YqqI1KyOmgOvIqleJpp5Lrz4bFAcVmwiZUx9IKu5mfrwmSOBDAQuDWMknJDIT5BWILS2x02a06GAkTMEqUgnvNultHp75XaZdLFdQqN4udtu82Omow6+VG3TSuE3nDbnh9IoHvq7e7p963QOicgpZ4PedCDbqQqiQLvExl5BSWuMAgVZcA1zocFEu+ZwsazyPQhO04CdMICvPZPCuQLTb/RQsTkVmpIPOESxxlp/DTJA+/5fVQPiHVDkJn1ADVUzhyGbl5Op+nfbqbdg5fT0OqD5sqruSUbJjsf3qfGT0s24HZ5kWEk3PfbvkhxBEA+wt+9mFptvHCJd2Jnl+w6s5QqlLL27vAhUUhXS7TrKFlrZhcwduOjcr2EEiqZO9llPwBZm8h7G/dOFvWB5G39n1+qZyxocQSYjV+Rrb8xnNjCEI/N7rq+Ky/+5bZC6nqJmEtj9makXqVaMZfPlxIQLSfMvfV3yrh4Xu7jmDtxFF5qjeGpGyqV/p+eflkNkiiYKkSxITvgh8DOBZ837gt8paLVNM0TiV8/sXQSlc1MSFJymS3ZWaGXfXNeMqXOQTvTh9gMoV/u7LX4tMr+6F3NVQ6GGNz60v/29mi2bgQULsEzbhUzbV6fargbLqj9m8Ejwu+W/5K8PczqX0wf7Ts1PTwPNT+Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1HIlUuigpSBMs1Mr0A7PX05Ms4G3AY7jR0I/fqxQ0OB0p72SEjIO9trr33xso85midOEHIOmSCMalGvrf9b9+MWjN2GYSM0MTw79o2W7zsGbjmo4eIxajRjXYs4zyGiXCAq2rpj2a5hW/I3sq2gbgWeV2s0nXtdu4WMS2jpUrN0rZgnlAdl2LaeZzRgiBMeUDQHHggcDMPzs0B6BqjipHeO1yzLgFlnJkQamCauxYAhSXANs7l5bO74HMc8GJIpRSLP4CVmzNv6y97lcllbujWWTU3HsizT8k3pE3MyPdI736rNEEd0wtbrLqKMEowS8owUqXMQMxZrYTJlGRGz+TvQtmlbCtqAAhvY9uiRbr4GKNl9EmmHZMaRwWfIrsAGMIEMKAbtZhC19aPPdXC9d5Qhyicsm/O99dcoAV1AwlKIDV5lVrH7POKBcnWOAQcRxUnOyQIu1JikCAPXrjKYkOKMcDl8MdfK9msFryYM8Fdacmxu85S0zQOV6ZEpcPF/+rXdqzXKLUpy6BTFnftd2A4+v7zx7/sXLXfh1P3RyF09tksK285rUptWv6z3B3UzVy+bLqPT5+6910vJP04C7vMERbOz+uOC2Lj+01mhXuGyoc0Gv/ILL8b9G+rT7+Z98fPavm2Ev+94PkhD//7WPr3rh99Oh6fjCz+/Wj6OB+GfyfnFrzg+h2XTG7lwhop8fHcN92MzG7DBc6/7fFNfNf0/DyYe1sPJjWj5s4dVdjp4aLHr+OlbYrkjTvon0e/ru9bSS/2h137NaTuHXWMlB8N8/ABYVEs1GlFP68t+IfGxtCgLiY1J6RqkSp+4ACr0jtqlZCXIpfiQOJDNXK9PWg2767Rc1+52T2zfOrE8y+5boVWXx6rR9yv9WbPYo9hldEJULKWw6/n5mCCeBxxoDJmxYDmeAdc/QOwhgbSIDuTBYJTDiEkF73Xd0DrpWV7D9+sN13f7rdAJe71G1//hn4RShy+YuKSXWTgRkO2qt7uj3gPAJCWgJF7NOZeDzoUsyRNa5CKxawtUo5DLSyBTOhw4XqtucjJPE1CEzTmL8wRq6SwtC2Ty9b9jIMxLK+E4ZZlASXkK301y/1tVD+kTE+XAVUY/QPYUDlxGbpXOm7S9g5dWBR/mMVGHTRZXZASvmex+ep0ZNSybgdnkhbldcd9s+SLEAQDzA37mfmk28eIF2YpeXbDyzpCq0qna+4RqT7V8scjLhjaVYmYS3rRNq2kOAedS9lYj9gjU3ECYn7pxNqz3Im/su/xyMaNDgQTM5fhp5fITz40hcPXciOTxKT77ltkJKesmoBCHbN1EvkoU4w8fLjjAyk+ar+TfkmWviR/C2ooj85RvDEHoVK3U/bJ6ZzYwk7BECiLLtsEPARwKvmvcFHnDRchpGucC3v+iKaVr6whjllMR9fTSsK2+JU+xSiF4dXoDUyr8y5Vd8Hev7Lvzs6HUwTnSN77kv50NUo4LBrmLk5JLWy/k61MGp9MttX8heFjw3eZHgr+bSeeN+a1lq6b756HzFw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065038</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065040</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065042</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C283314AE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2833192E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28331CDE190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="df0d136e-2042-4ea7-b4cd-3e273e25429e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU" id="e128cdb7-2033-4571-9481-b741edbfbc35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU" id="364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833233E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C2833319E190E0401F0A059926F9:395A6637"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833221E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833221E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833221E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833233E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C283327BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28332CEE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833233E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C283327BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28332CEE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlcQOwm3qCBx3UkL7QzQy/RlZRwDniZ2sB2g/fVrh4YCQ7udlZCQT46/852LP/tCoiR2g7aURCjKmRX2mvY/rlubz3HVLRHgzko+hLA0IxVUgqBe9cmcNKJKzbZCKTMSMqkQU03bBdDTDvo3hSCogMCvlmsV8Ghbd0RIDa1dysC2tknMZJCHbdqZYAFHksqAoYTIQOFg0h4NA+0ZoIKT3brYscwDitZSqTRwHFyOCCZxjMuYJ86Fc+RzEclgQhcMqUyQ15iRbNqvezebTXnjlblYOC4AwAENR/tEki6+2q0vxWYShWzOd+suYpxRjGL6ggypEVFLHlnteMEFVcvkHWjoQGCgS2SLSxj67KvtvAXI2X0S6YikkKgklwgWYGPdFEEYJtbtOGzaXz/Xwd3eqUBMzrlI5Mn6zygRtiYxT0lUkkVmBbvPI54pV+uC4CBkOM4kXZNrMyYpwkRa3wWZ0+2QSj18kbTy9ltbWUwYwX/SkgvnkKem7ZypTI8uiFT/p1+Hvdqh3KE4I63tt58/nmv3t6N7v/O0XN09Mf+xnuLk8Rk0cwqHzjtS+1a/rk8HdT9Xr5vGL7eLcXQ5i5fJ4OEJzDHsxtPqw7gaX4sRH/wCLzNnAmbg9km2N48/wxsh53Ul/HuJr9LV3Sj5hhWXV2mtz+CXZ9wZ9h28gg+zUZsl04afzXp/bTZXU/j3dScbJs5s3QU/SOfa7Q7XVz+jzcNSMNBzF5eL+8uX4SIjqN2u3U/v6+mXDgz5InQ72w1M7p6UcK9um285HeZwbCzkYJLNfhGsiqUZjbBnDXS/kPpYWoyFRqV57hqkRp+kIkzZLbPLyEqQafGhUaCbuVv361XYdeue53peHzZAH/gADkAbVBoNtzpoFPqzY3FCscvZnJpYRmF38/MxQZwEkrCIiNKaZ3hJpP0BYg8pZIVsrA8GZ5JMuVbwitfoA2/Q83p+teN7g2q/Cxo1WIMN3/caNde2rrm6YTeiPVdEHKu3d6TeY4JpSomReDPnUg+6VLokK7TOVAzLa1RmJNOXgDA6HLh+veJImqQxMYSdhEdZTMrpMs0L5Mjdv1tCWOZWKnHKhUJxfgrfTfL0W1EP7RNR4yBNRh2ie0rOXEZekc77aVcP0y7g21lEzWHTxVWC4h2T409vM2OGZT8w+7ywhAX3/ZY/hDgD4HzAzzktzT5etKYH0YsLVt8ZWlVaRXtXqLwqZ+t1lje0ZhRTaHgHOqDmTAjOtOw9T/kTYc4ewvnUjbNnfRJ5bz/ml6klmyikSKLHz8qXn3huTIg0z41QH5/tZ98yRyF13RTZqnO2bqxfJYbxhw8XHGDjp83f9d+Gi+itXWewDuLoPPUbQ1G2MCtzvzy/MxuYa1iqBZGLQ/BzAOeCHxv3Rd5zUXqaZpki73+xjNI1bYQxz5gKe3ZuOFTfnKd6Tknw5vQbTK7wr1f2Vr57ZT+MhhOtgwmy9770v51LNB8XTPQuSXMuTXurX586OFscqP0rwfOC78KPBP84k9Zv5t8tBzU9PQ+tfwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlcQOwm3qCBx3UkL7QzQy/RlZRwDniZ2sB2g/fVrh4YCQ7udlZCQT46/852LP/tCoiR2g7aURCjKmRX2mvY/rlubz3HVLRHgzko+hLA0IxVUgqBe9cmcNKJKzbZCKTMSMqkQU03bBdDTDvo3hSCogMCvlmsV8Ghbd0RIDa1dysC2tknMZJCHbdqZYAFHksqAoYTIQOFg0h4NA+0ZoIKT3brYscwDitZSqTRwHFyOCCZxjMuYJ86Fc+RzEclgQhcMqUyQ15iRbNqvezebTXnjlblYOC4AwAENR/tEki6+2q0vxWYShWzOd+suYpxRjGL6ggypEVFLHlnteMEFVcvkHWjoQGCgS2SLSxj67KvtvAXI2X0S6YikkKgklwgWYGPdFEEYJtbtOGzaXz/Xwd3eqUBMzrlI5Mn6zygRtiYxT0lUkkVmBbvPI54pV+uC4CBkOM4kXZNrMyYpwkRa3wWZ0+2QSj18kbTy9ltbWUwYwX/SkgvnkKem7ZypTI8uiFT/p1+Hvdqh3KE4I63tt58/nmv3t6N7v/O0XN09Mf+xnuLk8Rk0cwqHzjtS+1a/rk8HdT9Xr5vGL7eLcXQ5i5fJ4OEJzDHsxtPqw7gaX4sRH/wCLzNnAmbg9km2N48/wxsh53Ul/HuJr9LV3Sj5hhWXV2mtz+CXZ9wZ9h28gg+zUZsl04afzXp/bTZXU/j3dScbJs5s3QU/SOfa7Q7XVz+jzcNSMNBzF5eL+8uX4SIjqN2u3U/v6+mXDgz5InQ72w1M7p6UcK9um285HeZwbCzkYJLNfhGsiqUZjbBnDXS/kPpYWoyFRqV57hqkRp+kIkzZLbPLyEqQafGhUaCbuVv361XYdeue53peHzZAH/gADkAbVBoNtzpoFPqzY3FCscvZnJpYRmF38/MxQZwEkrCIiNKaZ3hJpP0BYg8pZIVsrA8GZ5JMuVbwitfoA2/Q83p+teN7g2q/Cxo1WIMN3/caNde2rrm6YTeiPVdEHKu3d6TeY4JpSomReDPnUg+6VLokK7TOVAzLa1RmJNOXgDA6HLh+veJImqQxMYSdhEdZTMrpMs0L5Mjdv1tCWOZWKnHKhUJxfgrfTfL0W1EP7RNR4yBNRh2ie0rOXEZekc77aVcP0y7g21lEzWHTxVWC4h2T409vM2OGZT8w+7ywhAX3/ZY/hDgD4HzAzzktzT5etKYH0YsLVt8ZWlVaRXtXqLwqZ+t1lje0ZhRTaHgHOqDmTAjOtOw9T/kTYc4ewvnUjbNnfRJ5bz/ml6klmyikSKLHz8qXn3huTIg0z41QH5/tZ98yRyF13RTZqnO2bqxfJYbxhw8XHGDjp83f9d+Gi+itXWewDuLoPPUbQ1G2MCtzvzy/MxuYa1iqBZGLQ/BzAOeCHxv3Rd5zUXqaZpki73+xjNI1bYQxz5gKe3ZuOFTfnKd6Tknw5vQbTK7wr1f2Vr57ZT+MhhOtgwmy9770v51LNB8XTPQuSXMuTXurX586OFscqP0rwfOC78KPBP84k9Zv5t8tBzU9PQ+tfwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6MQJwQCUUGiAaZsW8oW+vmyMs4FTIMTYifA/Pq1Q0OB0m5nJSTkm+tzz/3wsc85XoS21+IcEkEjpvXaDf2feh0qeFItG7UyAsMZj+vG2K1gw3YRnpQtVAFwda3HeQo9xgVmoqHbyCobFpK/kYW8CvKceskt2y+69gAJl9DSpYR0bb0IGffysA09TZgXYU65x/ACuCeIN2zdXHvS08MFJ715vmWZB0yaMyFizzRJKQACYUhKJFqY5+aBz3nAvSGdMizSBN5iBryhv+1drValVbkUJVPTRgiZqG5Kn4DT6Zne/FFshqDHJtF27WMWMUpwSH9jReoGxCwKtFY4jRIqZotPoC3TQgragDUxiOWwM918D5Cz+ybSAcmEY4PPsFWA3cEEEmAEtPu7XkM/+14Ht3tHCWZ8EiULfrT+M0rAMgijGAKDF5kV7L6PeKJczXMgXo+RMOU0g74akxgT4NoggQldX1Muhy/gWt5+bc2LCQPyJy05N/d5Strmicq06RS4+D/92u/VFuUBhyk075eP48vNL/9xXXsuv1Sn2cNm9Wv+yFzLaeQU9p23pHatflsfD+purt42bfjlpPXqOuOHO/I3urzqP69Gczu6XDudn2bFYm4nZfc/nXFnk1XW7tRMNiZcXWfL0V+P+CUILrnYBK9RvDF/R4Mfj7+eX1bjaT97HLXnlHfSK4x+itu+bz11n+ZdZ0BF/fXeHy7H7hyN0/6MY+x3bJczP15Xl/VyeDvox/PqwCe9Hy2r9XJvPY/vnp/STDwklctW4z2n/RwOjYUcDNPxHIgolmo0em2tK/uFxdfSoiw0MCa5qxcrfeICmNCbapeSFS+V4kMDTzZzu+7UqpZv18pl273oWHXUQQ6yuqiFKvW6Xe3WC/3Zsjii6EdsQlUspbDb+fmaIFl4HFgAiZFFKZkB179AbGOBtR67kwcjYhxGkVRwq92pV1DH7aI2sp2u76DOhX9hV9q1FkJ+rapr/UjcstukNRGQHKp3+UC974DQmIKSeDXnXA46F7IkS5ylIrRKGS4xSOUlkCgd9mynVjE5XcQhKMLmIgrSEErxLM4LZPLtv21gwnMr5SSOEoHD/BR+muTxt6Ie0iegyoGrjC5A9hROXEblIp0PaTsnL60CvpUGVB02WVyRULJlcvjpfWbUsOwGZpcX4VbBfbflDyFOAJhf8DOPS7OLF2R0L3pxwco7Q6pKs2jvEpeWpTTL0ryhrlLMRMKblolccwgklbK3GUWvwMwdhPmtG2fH+ijyzn7ILxUzNhRYwEKOn5Yvv/HcGAJXz42ePD7r775lDkLKuglYi1M2P5SvEsX4y4cL8Yjyk+aB/FtFSfDerhNYe3FknvKNISibqpW6XzafzAaJJCyVghgl++CnAE4FPzTuirzjIuQ0jVMBn3/RlNI1dExIlDLRa+u5YV99c55iE4P37vQBJlf4tyt7zT+9sp9urodSBxdY3/nS/3Y2aD4uBOQuTnMuDX0tX58yOJvuqf0bwdOCb1tfCf5hJs0P5o+WvZoen4fmvw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1dgJ+EzKkgUUm1ooS20aHdfrowzgLeJncYOpfvrrx0aCpT2dq+EhDwZnznz4WOfSZLErt+TEjLFBLfCQcf+B9eiGuCWU2k1vFaltvCiyryOcYU6FIjbqLtRc2FboZQ5hFwqwlXHdrHjVRysf3cO9uv651ZxE/+yrRlkUkNrlyq2rU0Sc+kXYTt2nnFfEMmkz0kC0lfUn/ZGV7729EnJye6ebVkWAbPuSqnUR4hWI6AQx7RKRYLO0IHPWST9KVtyovIMXmJGsmO/7H16eqo+eVWRLZGLMUa4jbRPJNnyq939Um6GKOQLsV33CRecURKzP8SQGoFaicjqxUuRMbVK3oF2kIMNdAU2VJevxr/a6DVAwe6TSAckM0kqckWcEmwCC8iAU7DuJ2HH/vq5Dm733mWEy4XIEnm0/jtKwNcQixSiiiwzK9l9HvFEubpnQP2Q0ziXbA1jMyYpoSCtmwwWbHPFpB6+SFpF+62NLCcM6N+05Azt89S00YnKDNgSpPo//drv1RZlRuIcuvXm5Cbqjb375gp+PtYeHoM5a2eTbDq87RQU9p23pHatflkfD+purl42PT/gEb+MomVDLMfjWT2vy40zdC6/h7et1jCZqfuIXvMmResfvdkQHMXub/Gw8WO2wrL+zbkEcf1H1cJfU/Q8/rJpAHVFj6dpGLRnzmrsBle1BibIy+e11uz610Pi8PPL0ZV65E9DVB9Owuj2Zo7633+Ofp/PE5RG33DSmI/+nCdf0iSYL2/o84I8pINFSwxd0XnNaT+HQ2MpB9N8/huoKpdmNMKBdaH7RdTH0mIsLKosClc/NfokFXBld80uIyt+rsWHRb5u5nYdtBpO3215ntsPAqeNA1zDzgXu4Xq77TYu2qX+bFkcUewLvmAmllHY7fx8TJAmvgQeQVZZi5yuQNofIA6IIlbIJ/pgCC7hTmgFbwbnDYyDVttzvXZzgJ164HlB32n020HzojWwrbFQ1/w66y0UZIfq7R2o9wQoSxkYiTdzLvWgS6VL8kjWuYqd6ppUOeT6EsiMDvturVVHkiVpDIYwSkSUx1BNV2lRICS3/26FUFlYmaSpyBSJi1P4bpLH38p6aJ+IGQdpMjoH3VM4cRnVynTepF07eWmV8L08Yuaw6eKqjNEtk8NPrzNjhmU3MLu8qHRK7rstfwlxAgB9wA8dl2YXL1qzvejlBavvDK0q3bK9j6T6WM3X67xoaNMoZqbhkYNwE02B5lr2nu/EA3C0g0CfunF2rI8i7+yH/HK14lNFFCR6/Kxi+YnnxhSkeW6E+vhsPvuWOQip66Zgo07Z+rF+lRjGHz5cqE+Nnzbf6L8nkUWv7TqBtRdH56nfGIrxpVmZ++X5ndmgQsMyLYgi2wc/BXAq+KFxV+QdF6WnaZ4reP+LZZSuYxNKRc5VaBRFG/bVt+CpnlPwX53ewBQK/3Jlb+S7V/aP0dVU62BC7J0v+2/nCivGhYLeJVnBpWNv9OtTB+fLPbV/IXha8F3nI8E/zKT7xvzWslfT4/PQ/Rc=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065045</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065047</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065050</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833234E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C283327CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28332CFE190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="289f5783-a9c3-4d44-a5c1-6dac58d0e07e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833335E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C283341BE190E0401F0A059926F9:4406E5BF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833323E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833323E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833323E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833335E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C283337DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C28333D0E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833335E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C283337DE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C28333D0E190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx0jfxFsT2CGAGlJQ5obKGnyckfICyixJUeSiZNfX9nEBCjJTS/jGUbr1dmzHz7SscRp4kZdKUEoypkx7LfNf2Nw5sSOXYu4M8/yPdKyAj9oWa04hJaNSYg92zSGUuYwZFJhptqmazue5dj6mTh21NSP33DC8NY0piCkhtYuDb2rSBMmoyps28wFiziWVEYMpyAjRaJxd3Qeac8I15zMzvGaZRVQdJZKZRFCpBEDgSQhDcJTdIx2fI5jGY3pgmGVC3iJGcu2+bL38fGx8eg1uFgg17ZtZIdI+8SSLj6bnU/1ZoiHbM7X6x5mnFGCE/qMS1IjUEseG91kwQVVy/QNaAc5dgltQUEs4vjss4leA1TsPoi0Q1JIbMkldmqwK5iDAEbA+Hk1bJufP9bB9d6JwEzOuUjl3vrvKAFbQcIziC1ZZ1az+zjigXJ1joFEQ0aSXNIVXJRjkmEC0rgUMKfFOZV6+GJpVO03CllPGJC/ackx2uapaaMDlenTBUj1f/q13as1yhQnOXQKO3GKAs1Ok3v3uvd03c+eL06+5eL06z/tisK285rUptUv6/1B3czVyybJfp08LPt+8/ELn89H0+84G43Q5ObmefrzpjmQ6cK9Tm7516fu5Xh2d1Nk8/H5jTjTqVPvGWDZP7r1Wv4i+dKH50/FLBTfmlO/ucwGU8ECL5SD+7Mf3084v7tX7khl/s904alB92HqTdEkGPGv81/sZHrmJD6yb29uv4W4mFxdoAA+OeLCvryXd18KMSuuWbEMSfs1p+0cdo21HIzz2R0QVS/L0Rj2jVPdL6zel5bSQmNrXrlGWalPUgFTZqfcVcpKlGvxoXGkm7leD4Ijp+cGnv41B05oD2zfdk7trt0MQ/foNKz1Z81ij2KPszktY5UKu56f9wmSNJLAYhDWiudkCdJ8B7GPFTaG7Ep/GJxJmHCt4M0g8G3b9bu9oBcOnKZzEvj+wHUHQS8Imk7PNC64+sF+iO5cgdhVb29Hva+A0IxCKfHlnEs96FLpkjzgVa4Sp7HCDQa5PgREqcOR6wdNJGmaJVASRimP8wQa2TKrCoTk+t+1MJGVlUqScaFwUn2Fbya5/66uh/aJaekgy4xOQPcUDhxGfp3O22kfbaddw3fzmJYfmy6uEpSsmey+ep2Zclg2A7PJi0in5r7Z8pcQBwDQO/zQfmk28eIV3YpeH7D6zNCq0qnb+4AbD418tcqrhrZKxRQaHjnIbqExkFzL3tOE3wNDGwj0oRNnw3ov8sa+yy9XSzZWWEGqx8+olh+4boxBlteNof58io/eZXZC6ropKNQhWy/Rt5KS8bsXFxKR0k+bL/XfIxfxa7sOYG3F0XnqO4aibFGuyvPl6Y3ZIFzDUi2IXGyDHwI4FHzXuCnyhovS0zTLFbz9xiiVrm1iQnjO1LBvVoZt9a14qqcMolenP2AqhX85sgv55pH9a3Q+1jqYYnPjS//b2aLVuBDQuyStuLTNQt8+dXC22FL7F4KHBd/13hP83Uw6f5j/tGzVdP976PwG</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx0jfxFsT2CGAGlJQ5obKGnyckfICyixJUeSiZNfX9nEBCjJTS/jGUbr1dmzHz7SscRp4kZdKUEoypkx7LfNf2Nw5sSOXYu4M8/yPdKyAj9oWa04hJaNSYg92zSGUuYwZFJhptqmazue5dj6mTh21NSP33DC8NY0piCkhtYuDb2rSBMmoyps28wFiziWVEYMpyAjRaJxd3Qeac8I15zMzvGaZRVQdJZKZRFCpBEDgSQhDcJTdIx2fI5jGY3pgmGVC3iJGcu2+bL38fGx8eg1uFgg17ZtZIdI+8SSLj6bnU/1ZoiHbM7X6x5mnFGCE/qMS1IjUEseG91kwQVVy/QNaAc5dgltQUEs4vjss4leA1TsPoi0Q1JIbMkldmqwK5iDAEbA+Hk1bJufP9bB9d6JwEzOuUjl3vrvKAFbQcIziC1ZZ1az+zjigXJ1joFEQ0aSXNIVXJRjkmEC0rgUMKfFOZV6+GJpVO03CllPGJC/ackx2uapaaMDlenTBUj1f/q13as1yhQnOXQKO3GKAs1Ok3v3uvd03c+eL06+5eL06z/tisK285rUptUv6/1B3czVyybJfp08LPt+8/ELn89H0+84G43Q5ObmefrzpjmQ6cK9Tm7516fu5Xh2d1Nk8/H5jTjTqVPvGWDZP7r1Wv4i+dKH50/FLBTfmlO/ucwGU8ECL5SD+7Mf3084v7tX7khl/s904alB92HqTdEkGPGv81/sZHrmJD6yb29uv4W4mFxdoAA+OeLCvryXd18KMSuuWbEMSfs1p+0cdo21HIzz2R0QVS/L0Rj2jVPdL6zel5bSQmNrXrlGWalPUgFTZqfcVcpKlGvxoXGkm7leD4Ijp+cGnv41B05oD2zfdk7trt0MQ/foNKz1Z81ij2KPszktY5UKu56f9wmSNJLAYhDWiudkCdJ8B7GPFTaG7Ep/GJxJmHCt4M0g8G3b9bu9oBcOnKZzEvj+wHUHQS8Imk7PNC64+sF+iO5cgdhVb29Hva+A0IxCKfHlnEs96FLpkjzgVa4Sp7HCDQa5PgREqcOR6wdNJGmaJVASRimP8wQa2TKrCoTk+t+1MJGVlUqScaFwUn2Fbya5/66uh/aJaekgy4xOQPcUDhxGfp3O22kfbaddw3fzmJYfmy6uEpSsmey+ep2Zclg2A7PJi0in5r7Z8pcQBwDQO/zQfmk28eIV3YpeH7D6zNCq0qnb+4AbD418tcqrhrZKxRQaHjnIbqExkFzL3tOE3wNDGwj0oRNnw3ov8sa+yy9XSzZWWEGqx8+olh+4boxBlteNof58io/eZXZC6ropKNQhWy/Rt5KS8bsXFxKR0k+bL/XfIxfxa7sOYG3F0XnqO4aibFGuyvPl6Y3ZIFzDUi2IXGyDHwI4FHzXuCnyhovS0zTLFbz9xiiVrm1iQnjO1LBvVoZt9a14qqcMolenP2AqhX85sgv55pH9a3Q+1jqYYnPjS//b2aLVuBDQuyStuLTNQt8+dXC22FL7F4KHBd/13hP83Uw6f5j/tGzVdP976PwG</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb/I4EH3/fkWUPq5CLoSGRIDEtc1CCy29v6yMM4DbxIHYAdpfv3YgFCjt0pWQkCfjM2cuPnaFoSi0vDpjkHASU8VvVdV/itgunpdHjobHYGq2bYy0UQnZWql4bsEYw9g2z1XFZywFnzKOKK+qlmEWNdMQvzvT8Eri5xRMt/yiKg+QMAEtXAqGqqyikDIvC1tV04R6MWKEeRRFwDyOvWH9qucJTw/lnNRaZc0yC5jUppzPPF3HhQAwhCEu4DjSK/qeTyVg3pBMKOJpApuYAauqm73L5bKwLBbiZKJbhmHohqsLn4CRyZla+5NvhsCn43i9biIaU4JRSD6QJHUFfBoHSj2cxAnh0+gbaFM3DQmtwQpr2LTpmap/BsjYnYi0RzJhSGNTZOZgtzCGBCgG5f7Wr6pnp3VwvfcuQZSN4yRiB+vfUQK6gDCeQaCxPLOc3emIR8pVqwD2fIrDlJEFXMsxmSEMTBkkMCarHmFi+AKmZO1XViyfMMC/aUlF3+UpaOtHKtMiE2D8//Rrt1drlAcUplDTHbuD3QFMH67G5X6xEV3iVTRwux/3k2pGYdd5TWrb6s36cFC3c7XZRKwGiY3mY+t6uGrdR5bZt9LA74xs/PLcG1x2nzvTdkjdzvS1XU8Tv3k5mM4jyiOTldk0mE0ulwFq11EPO42HP8/+a3fC/Rvz9XlQvLmoN14iq/n0Np/0l3E9Xb6h1yfnyv3wHy8eX+iy/vjQKdFSLzJuEjDo/XhyvfqLXAzDaP73yPjz/oTSR2PY7XYt02zhPqBl9TOn3Rz2jbkcDNPRK2CeL+Vo+C2lI/qF+M/SIi0k0MaZqzeT+sQ4UK7W5C4pK14qxIcEnmjmet0un5tNq1wsFp1W23SNtmEbZseoGyXXtc47bq4/axYHFJsxHRMZSyrsen5+JogjjwENINEWcYqnwNQfEFuII8Wnt+JgxJTBXSwVvGy7RqnTcNpNt9Vxm03bcMqWOPydVqPsOE1VuY55n/aT+phDsq/exT31vgVMZgSkxMs5Z2LQGRclmaNFykOzsEAFCqm4BBKpw55ll0s6I9EsBElYj+IgDaEwm86yAuls/W9pCLPMShiexQlHYXYKv03y8FteD+ETEOnAZEYNED2FI5eRnafzJW376KWVw9fTgMjDJorLE4LXTPY/fc6MHJbtwGzzwszMuW+3/BLiCID+Az/9sDTbeMGC7ETPL1hxZwhVqeXtnaPCvJAuFmnWUEcqZiLgdVM3HH0IOBWy934XvwHVtxD6STfOlvVB5K19n1/Kp3TIEYdIjJ+SLU94bgyByeeGL47P6tS3zF5IUTcOK37M1gzFq0Qy/vHhgj0s/YR5IP6WcRJ8tusI1k4ckad4Y3BCJ3Il75f3b2YDxwKWCEGMk13wYwDHgu8bt0XecuFimkYph++/KFLpqirCOE4p91tqZthV34wnf5+B9+n0BSZT+M2VvWLfXtlPV72h0MEIqVtf8t/OGsnGBYPYxUjGpaquxOtTBKeTHbXfEDwu+FbxJ8Hfz6T2xfzVslPTw/NQ+xc=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkchTggNRAUJCJ3JtHRo0+llXlaucwCziRNih8v++rUDoUBpt10JCfnk+DvfufizzzlOYtvrcg65oCnTAr+t/9V4ts6IGyGDOGAZTr1uG88tlxjucwvZCMjZ2LF0LeC8gIBxgZlo6zay6oaF5O/OQl7D8hCq2XX7j67dQ84ltHSpIV1bJTHjXhm2rRc581LMKfcYToB7gnhhd3jlSU8PV5z0zvmGZRkw70yFyDzTJLUICMQxqZE0Mc/NA5/ziHshnTAsihy2MSPe1rd7l8tlbVmvpfnEtBFCJmqZ0ifidPJV73ypNkMUsHG6WfcxSxklOKb/YEVqCGKaRlo3nqQ5FdPkDWjLtJCCNmBFDGI57KtuvgQo2X0Q6YBkzrHBp9iqwG5hDDkwAtrv26Ctf/1YBzd773LM+DjNE360/hwlYAuI0wwig1eZVew+jniiXJ1zIF7ASFxwuoBrNSYZJsC1UQ5jurqiXA5fxLWy/dqKVxMG5DMtOTf3eUra5onK+HQCXPyffu33aoNyj+MCOiP8M7LXrSWpB8PvEYPRzXTmfxv4Q2fQLinsO29I7Vq9XR8P6m6utpuuZ/Pu5ShcjeZMNCZh9FQkqEezcPY7/PmA72karsS3bHHtxnUyHNwu++6K4vWtM7+KnRTj75c/548Ps6uUXIY3X0gwohfTu4dx2POb9jQ9ozh24yd8R6fWCm5+sMfeLFgX167bm89bT/3u75ve92Zv2IvWfO1wP+OJiK9/uOLyYfblaQj+6L7x68+fyyf7201hE6f9ktN+DofGSg7C4nkGRFRLNRqBr13IfmHxvrQoC42McenqZUqfuAAm9I7apWTFK6T40MiTzdysB80zq2836/W6jwZWCw2Qg6wL1EWNVss+u2hV+rNhcUSxn7IxVbGUwm7m532CJPE4sAhyY5EWZApcfwfRxwJrAbuVByNlHO5SqeDNrtPoWz3U7TYueqhpNf2m6w/O+i3XQr0G8nXtOhW/2K+8OxaQH6p3/UC9b4HQjIKSeDXnXA46F7Ikc7woRGzVFrjGoJCXQK502LOdZsPkNMliUITNJI2KGGrZNCsLZPLNv21gwksr5SRLc4Hj8hS+meTxt6oe0ieiyoGrjHogewqvLiP126bzKm3n5KVVwXeLiKrDJosrcko2TA4/vcyMGpbdwOzyItyquO+2fBLiBID5Dj/zuDS7eNGC7kWvLlh5Z0hV6VTtnePavFYsFkXZUFcpZi7hTctErhkCKaTsre/Sv4GZOwjzQzfOjvVR5J39kF8hpiwUWEAix08rlx94boTA1XMjkMdn9dG3zEFIWTcBK3HK1o/lq0QxfvfhQjyi/KR5JP+WaR69tOsE1l4cmad8YwjKJmql7pf1G7NBUglLpSCm+T74KYBTwQ+NuyLvuAg5Tc+FgLe/aErp2jomJC2YCJSiSMO++pY8xToD78XpFUyp8Nsre8XfvLIfh1eh1MEE6ztf+t/OBi3HhYDcxWnJpa2v5OtTBmeTPbXfEjwt+Hb9PcE/zKTzyvzaslfT4/PQ+Rc=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065053</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065055</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065057</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833336E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C283337EE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C28333D1E190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_FUNC_CLG_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="4de142fa-7e94-48a1-9f53-08163d3558cd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C2833437E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C28334DDE190E0401F0A059926F9:669A79A0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C2833425E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C2833425E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C2833425E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C2833437E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C283347FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C2833437E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C283347FE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eU3iiUDjDDTa0XdAN61JczMV1AsE1rk3Lx1++kWAREjp4ZZkpWV771rUu/pM5QFFpeizFIOYmp4ncb6r8AFlQqqKqZNnK0cmBY2rNbdjTXFn8N/Fx9dl1V8RnLwKeMI8obqmWYtmYa4jcyDc8xPcMqmXblSVXuIWUCWriUDFVZRiFlXh62oWYp9WLECPMoioB5HHvD1vWVJzw9VHBSm/U1yzxg2pxynni6jksBYAhDXMJxpNf1HZ96wLwhmVDEsxTeYwasob7vXSwWpYVditOJbhmGoRs1XfgEjExO1OavYjMEPh3H63UH0ZgSjELyhiSpa+DTOFBa4SROCZ9GX0CbumlIaA2WWMNmmZ6o+keAnN03kXZIpgxpbIrMAmwAY0iBYlDuBn5DPfleB9d7RymibBynEdtb/4wS0DmEcQKBxorMCnbfRzxQrmYdsOdTHGaMzKEvxyRBGJhym8KYLK8IE8MXMCVvv7JkxYQB/klL6vo2T0FbP1CZLpkA4/+nX9u9WqPcozCD5hweH8+SNzM6XYXMvW7/qc7u7pPRZNF/aeQUtp3XpDatfl/vD+pmrt43vTyVI7OGXgOz25mNLl9XTrszd1/sPntbWdTHdnoxG4N96UQvyfx83L8LWwPC/Jl79o/VHk0uelfpg9njySoejH6RuTv+PbLx7eDPqbO8w63L6/7iWg8unm/imn42aZObh+Utd58ez6/eBlH/sb88b3F72L5sV3tXt37NKePzyuri3IqGv8hCnw0mTujc/16as8qgcjlpfOS0ncOusZCDYfY8A8yLpRwNv6ucin4hflxapIUE2jh39RKpT4wD5WpT7pKy4mVCfEjgiWau1z23YnYs17bLdrVn1oyeUTbMU6NlOLWaVTmtFfqzZrFHsRPTMZGxpMKu5+c4QRx5DGgAqTaPMzwFph5B7CKOFJ8OxIcRUwajWCh4u1rr1eyK656Wqy3TqVW6dqdndzotxyg7dleodz/mN/QmbY05pLvqbe+o9wAwSQhIiZdzzsSgMy5K8ormGQ/N0hyVKGTiEEilDntW2XV0RqIkBElYj+IgC6GUTJO8QDpbPy0NYZZbCcNJnHIU5l/hl0nuvyvqIXwCIh2YzKgNoqfw6TASvyKdr9OubKddwLeygMiPTRSXpwSvmey++pgZOSybgdnkhZlZcN9s+SHEAQD9CD99vzSbeMGcbEUvDlhxZghVaRbtfUWl11I2n2d5Q6tSMVMBr5u6UdWHgDMhe6tR/AJU30Do3zpxNqz3Im/su/wyPqVDjjhEYvyUfPmN68YQmLxu+OLzWX73LrMTUtSNw5IfsnVCcSuRjI9eXLCHpZ8w34rHIk6Dj3YdwNqKI/IUdwxO6ESu5Pmy+mI2cCxgiRDEON0GPwRwKPiucVPkDRcupuk54/D1G0UqXUNFGMcZ5X5XzQ3b6pvz5KsEvA+nTzC5wr8f2Uv25ZH9cH01FDoYIXXjS/7bWSP5uGAQuxjJuTTUpbh9iuB0sqX27wQPC77lHBP83Uyan8yfLVs13f8emn8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eU3iiUDjDDTa0XdAN61JczMV1AsE1rk3Lx1++kWAREjp4ZZkpWV771rUu/pM5QFFpeizFIOYmp4ncb6r8AFlQqqKqZNnK0cmBY2rNbdjTXFn8N/Fx9dl1V8RnLwKeMI8obqmWYtmYa4jcyDc8xPcMqmXblSVXuIWUCWriUDFVZRiFlXh62oWYp9WLECPMoioB5HHvD1vWVJzw9VHBSm/U1yzxg2pxynni6jksBYAhDXMJxpNf1HZ96wLwhmVDEsxTeYwasob7vXSwWpYVditOJbhmGoRs1XfgEjExO1OavYjMEPh3H63UH0ZgSjELyhiSpa+DTOFBa4SROCZ9GX0CbumlIaA2WWMNmmZ6o+keAnN03kXZIpgxpbIrMAmwAY0iBYlDuBn5DPfleB9d7RymibBynEdtb/4wS0DmEcQKBxorMCnbfRzxQrmYdsOdTHGaMzKEvxyRBGJhym8KYLK8IE8MXMCVvv7JkxYQB/klL6vo2T0FbP1CZLpkA4/+nX9u9WqPcozCD5hweH8+SNzM6XYXMvW7/qc7u7pPRZNF/aeQUtp3XpDatfl/vD+pmrt43vTyVI7OGXgOz25mNLl9XTrszd1/sPntbWdTHdnoxG4N96UQvyfx83L8LWwPC/Jl79o/VHk0uelfpg9njySoejH6RuTv+PbLx7eDPqbO8w63L6/7iWg8unm/imn42aZObh+Utd58ez6/eBlH/sb88b3F72L5sV3tXt37NKePzyuri3IqGv8hCnw0mTujc/16as8qgcjlpfOS0ncOusZCDYfY8A8yLpRwNv6ucin4hflxapIUE2jh39RKpT4wD5WpT7pKy4mVCfEjgiWau1z23YnYs17bLdrVn1oyeUTbMU6NlOLWaVTmtFfqzZrFHsRPTMZGxpMKu5+c4QRx5DGgAqTaPMzwFph5B7CKOFJ8OxIcRUwajWCh4u1rr1eyK656Wqy3TqVW6dqdndzotxyg7dleodz/mN/QmbY05pLvqbe+o9wAwSQhIiZdzzsSgMy5K8ormGQ/N0hyVKGTiEEilDntW2XV0RqIkBElYj+IgC6GUTJO8QDpbPy0NYZZbCcNJnHIU5l/hl0nuvyvqIXwCIh2YzKgNoqfw6TASvyKdr9OubKddwLeygMiPTRSXpwSvmey++pgZOSybgdnkhZlZcN9s+SHEAQD9CD99vzSbeMGcbEUvDlhxZghVaRbtfUWl11I2n2d5Q6tSMVMBr5u6UdWHgDMhe6tR/AJU30Do3zpxNqz3Im/su/wyPqVDjjhEYvyUfPmN68YQmLxu+OLzWX73LrMTUtSNw5IfsnVCcSuRjI9eXLCHpZ8w34rHIk6Dj3YdwNqKI/IUdwxO6ESu5Pmy+mI2cCxgiRDEON0GPwRwKPiucVPkDRcupuk54/D1G0UqXUNFGMcZ5X5XzQ3b6pvz5KsEvA+nTzC5wr8f2Uv25ZH9cH01FDoYIXXjS/7bWSP5uGAQuxjJuTTUpbh9iuB0sqX27wQPC77lHBP83Uyan8yfLVs13f8emn8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuI6EH2fr3B5no1XFrsCVSxmxglkg0wmebkl5AaUMTKRZHDm669kMAFCcpNbRRWlduv06UVHOuNokThBm3NggqRUi3pN/R/bhgZ2Hc/w62AZnl13DTR1YsO3wfXienUyQbauRZxnEFEuEBVN3bFs17At+RvbVlC1A6tasf3ao679AsYltHSpWLqWLxLKgyJsU88YDVLECQ8oWgAPBA5G7eEgkJ4BKjnprbMNyyIga82FWAamiSsxYEgSXMHpwjwzD3zOYh6MyIwikTHYxox5U9/uXa/XlbVbSdnMdCzLMi3flD4xJ7PveutbuRniiE7TzbqLaEoJRgn5ixSpIYh5GmvtZJYyIuaLd6Bt07YUtAE5NrDt0e+6+RqgYPdJpAOSjCODz2UTtmC3MAUGFIN2dxs19e+f6+Bm75ghyqcpW/Cj9dcoAV1Bki4hNniZWcnu84gnytU6AxxEFCcZJyu4VGOyRBi4ds1gSvIB4XL4Yq4V7ddyXk4Y4K+05Mzc5ylpmycq0yMz4OL/9Gu/VxuUXyjJoDUcNa6qP37lL+zuaZLd/EzuYDCoPfL5KGoWFPadN6R2rd6ujwd1N1fbTeH9nPnr2VMSJ731xaDz6I39+z8/zZva3W07j1hyP0oxmZjZmNKb67w3tX6v42j6cD0cPLuNl/bNX+7NHiZPM56Pv7k/urVrb/AYdu/j9Op8ePmTPCf2HWrfTIbrH9VO1ug5onq+frwaz8L7Tj0+rwKvXi3z9XX1ofEUThrIH/b/nF9eEPZt2Xth88vh0O08A1zEA9qzmq857edwaCzlYJRNngCLcqlGI+ppfdkvJD6WFmUhsTEtXIOl0icugAq9pXYpWQkyKT4kDmQzN+uwUbO7TsN1vXo/tH0rtDzL7lttq+r7Tq3vl/qzYXFEsZvSKVGxlMJu5udjgngRcKAxMGOVZngOXP8AsYcE0iJ6Kw9GSjmMU6XgvlOvdayw3QnDbr8Repbn9p1uaNfqVuhbrq5dpuKKXrH2VAA7VG/3QL1vAZMlASXxas65HHQuZEme0SoTiV1ZoQqFTF4CTOlw4HiNqsnJYpmAImwu0jhLoLKcL4sCmXzz7xgI88JKOF6mTKCkOIXvJnn8rayH9ImJcuAqow7InsKby0j+ynTepO2dvLRK+HYWE3XYZHEFI3jD5PDT68yoYdkNzC4vzO2S+27LFyFOAJgf8DOPS7OLF6/IXvTygpV3hlSVVtneZ1R5rmSrVVY0tK4Uk0l40zatujkCnEnZexmnf4CaOwjzUzfOjvVR5J39kF8m5nQkkICFHD+tWH7iuTECrp4bkTw++WffMgchZd0E5OKUrZvIV4li/OHDBQdY+Unztfxbpyx+bdcJrL04Mk/5xhCEztRK3S8v78wGTiUskYKYsn3wUwCngh8ad0XecRFymiaZgPe/aErpmjrCOM2oiHp6YdhX34KneFlC8Or0BqZQ+O2VnfN3r+zfw8FI6uAC6Ttf8t/OBinGBYPcxUnBpann8vUpg9PZntpvCZ4WfKf6keAfZtJ6Y35r2avp8Xlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06511</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06513</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C2833438E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2833480E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="0fdacc19-deeb-4672-8ba0-6f04fa9cd827"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="c8d70d7c-e4e3-4372-8a03-222427f07689"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C28334F9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C28335C6E190E0401F0A059926F9:B280CA4E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C28334E7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C28334E7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C28334E7E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C28334F9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C2833541E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C283357BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C28334F9E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C2833541E190E0401F0A059926F9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C283357BE190E0401F0A059926F9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx6uQOAECUUGiQG6z229adNuXlXEGME1siB1K++vXDg0FSrvtSkjIk/GZMx8+9onAaeIGHSEgk5QzI+q1zH/qfrPmIXdsIYKRVW02RtYI1euW0xjVUH08dkeATCMSIoeICYmZbJmugzwLOep3h5yghgLHr6B689E0hpAJBa1cKo5prNKEiaAI2zLzjAUcCyoChlMQgSTBoHNxHijPAJeczPbJmmURMGtPpZwHtk0qMRBIElIhPLVP7B2fk1gEAzphWOYZvMWMRct82/v8/Fx59io8m9iu4zi207SVTyzo5NhsH5WbIY7YmK/XXcw4owQn9BVrUhcgpzw2OsmEZ1RO00+gkY0cDW3BilgEVdmxab8HKNh9E2mHZCawJaYYlWC3MIYMGAHj/jZqmcff6+B6712GmRjzLBV7659RAraEhM8htkSZWcnu+4gHytU+ARJEjCS5oEu41GMyxwSEcZ3BmK7OqVDDFwujaL+xEuWEAflJS07sbZ6Ktn2gMj06ASH/T7+2e7VGGeIkhzYnnhgu+/lvjgddB+pisKJiltDz5kWroLDtvCa1afXben9QN3P1tmk+C/0XGOAQX09ZAy0mp8MXZ/Q0H8+maTJ14SZ1WO9a1HNUfXqKZn56T+nli+z5fq86E33vMZxFE7s/Gnvh7dGiURv69OKP8+sa15rpEmrk5owm5Amd8clgmd+EvYfOw4BUY/d+5c26v+LrKxJFXvjI89WrN3yIGGLRU0oWfy+Ppvbpa5wMJ9nZ77/6MPPJ0Gm957Sdw66xlINBPpoBkeVSj0bUM0LVLyy/lhZtobE1LlyDudYnIYFJs613aVkJciU+NA5UM9frfqOOum7D86phs4+aTt+pOih0Ok6t2XTrYbPUnzWLPYpdzsZUx9IKu56frwmSNBDAYsisJc/JFIT5BWIPS2xE7FYdDM4E3HGl4CHqnIZ+6Hdr3X6nX3P6tb5b67pu6FVd5KGmaVxyecWuss5YQrar3t6Oet8CoXMKWuL1nAs16EKqkizwMpcJqixxhUGuLoFM63DgVhs1W9B0noAmbKc8zhOozKfzokC2WP+7FiaisFJB5jyTOClO4adJ7n8r66F8YqodhM7oFFRP4cNlpH5lOp+nXd9Ou4Tv5DHVh00VV2aUrJnsfnqfGT0sm4HZ5EUEKrlvtvwQ4gCA/QU/e780m3jxkm5FLy9YdWcoVWmX7V3gyqKSL5d50VBfK2am4G1kO749AJIr2Xu540/A7A2E/a0bZ8N6L/LGvssvl1M2kFhCqsbPKJbfeG4MQOjnRqSOz+q7b5mdkKpuElbykK2bqFeJZvzlw4UERPsp87X6e+ZZ/N6uA1hbcVSe6o0hKZvolb5fXj6ZDcIVLFWCyLNt8EMAh4LvGjdF3nCRappGuYTPvxha6VomJoTnTEY9szBsq2/BU77MIXh3+gBTKPzblb0Sn17Zfy7OB0oHU2xufOl/O1u0GBcCapegBZeWuVKvTxWcTbbU/o3gYcHv+18J/m4m7Q/mj5atmu6fh/a/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx6uQOAECUUGiQG6z229adNuXlXEGME1siB1K++vXDg0FSrvtSkjIk/GZMx8+9onAaeIGHSEgk5QzI+q1zH/qfrPmIXdsIYKRVW02RtYI1euW0xjVUH08dkeATCMSIoeICYmZbJmugzwLOep3h5yghgLHr6B689E0hpAJBa1cKo5prNKEiaAI2zLzjAUcCyoChlMQgSTBoHNxHijPAJeczPbJmmURMGtPpZwHtk0qMRBIElIhPLVP7B2fk1gEAzphWOYZvMWMRct82/v8/Fx59io8m9iu4zi207SVTyzo5NhsH5WbIY7YmK/XXcw4owQn9BVrUhcgpzw2OsmEZ1RO00+gkY0cDW3BilgEVdmxab8HKNh9E2mHZCawJaYYlWC3MIYMGAHj/jZqmcff6+B6712GmRjzLBV7659RAraEhM8htkSZWcnu+4gHytU+ARJEjCS5oEu41GMyxwSEcZ3BmK7OqVDDFwujaL+xEuWEAflJS07sbZ6Ktn2gMj06ASH/T7+2e7VGGeIkhzYnnhgu+/lvjgddB+pisKJiltDz5kWroLDtvCa1afXben9QN3P1tmk+C/0XGOAQX09ZAy0mp8MXZ/Q0H8+maTJ14SZ1WO9a1HNUfXqKZn56T+nli+z5fq86E33vMZxFE7s/Gnvh7dGiURv69OKP8+sa15rpEmrk5owm5Amd8clgmd+EvYfOw4BUY/d+5c26v+LrKxJFXvjI89WrN3yIGGLRU0oWfy+Ppvbpa5wMJ9nZ77/6MPPJ0Gm957Sdw66xlINBPpoBkeVSj0bUM0LVLyy/lhZtobE1LlyDudYnIYFJs613aVkJciU+NA5UM9frfqOOum7D86phs4+aTt+pOih0Ok6t2XTrYbPUnzWLPYpdzsZUx9IKu56frwmSNBDAYsisJc/JFIT5BWIPS2xE7FYdDM4E3HGl4CHqnIZ+6Hdr3X6nX3P6tb5b67pu6FVd5KGmaVxyecWuss5YQrar3t6Oet8CoXMKWuL1nAs16EKqkizwMpcJqixxhUGuLoFM63DgVhs1W9B0noAmbKc8zhOozKfzokC2WP+7FiaisFJB5jyTOClO4adJ7n8r66F8YqodhM7oFFRP4cNlpH5lOp+nXd9Ou4Tv5DHVh00VV2aUrJnsfnqfGT0sm4HZ5EUEKrlvtvwQ4gCA/QU/e780m3jxkm5FLy9YdWcoVWmX7V3gyqKSL5d50VBfK2am4G1kO749AJIr2Xu540/A7A2E/a0bZ8N6L/LGvssvl1M2kFhCqsbPKJbfeG4MQOjnRqSOz+q7b5mdkKpuElbykK2bqFeJZvzlw4UERPsp87X6e+ZZ/N6uA1hbcVSe6o0hKZvolb5fXj6ZDcIVLFWCyLNt8EMAh4LvGjdF3nCRappGuYTPvxha6VomJoTnTEY9szBsq2/BU77MIXh3+gBTKPzblb0Sn17Zfy7OB0oHU2xufOl/O1u0GBcCapegBZeWuVKvTxWcTbbU/o3gYcHv+18J/m4m7Q/mj5atmu6fh/a/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0Tp41HIDQJEBYlyOZOe0gv0dGhfRq69IW4TO8QOhfP14wRCgdJOOxIS8s722mtfvOwzgeLI8TtCQCopZ1rQa+n/PIFNHK9KjGoVPKM69eoGIp5n2FMbO9MqNAERXQuEyCBgQiImW7pj2a5hW+p3Z1t+zfatZsVq2o+6dg+pUNDKpWLp2jKOmPCLsC09S5nPkaDCZygG4UvsjzvDS195+qjkpLfP1iyLgGk7lDLxTRNXCGCIIlzBPDbPzD2fMyL8MZ0xJLMUNjGJaOmbva+vr5VXt8LTmelYlmVaTVP5EEFnp3r7pNwMJGBTvl53EeOMYhTRPygnNQQZcqJ1ohlPqQzjD6Bt07ZyaAOW2MB2lZ3q5luAgt0XkfZIpgIZIkR2CTaCKaTAMGi/R0FLP/1aB9d771LExJSnsThYf48SsAVEPAFiiDKzkt3XEY+Uq30G2A8YjjJBF3CVj0mCMAjtJoUpXV5SoYaPCK1ov7YU5YQB/k5Lzsxdnoq2eaQyPToDIf9Pv3Z7tUa5R1EG7dnlLc4ueDiy+POEOo41fwhXPy9c8RO3Cgq7zmtS21Zv1oeDup2rzabze4S6V8l90o/nz71kYD9eLR6sVcP5serf3k4WAfCH+M9Kzs1JncyDO9cj5Jd8QV1q42bM1KTNbrMXMmWPJD1ZoQdPDN3+i3fdl8PxzdCshWHUuL8n2VI8/x1MfsUvlmg28ENwHl7ADzy8uYyfwov5cBo89q4lmgtXTh5Xd9ejv05qk5s4zhov/OfqeXF9u2z+5q23nHZz2DeWcjDOnp4By3KZj0bQ0waqX0h+Li25hRJjWrj6Sa5PQgKTejvflcuKnynxocRXzVyv+w3P7joN161V7b7dtPpW1bIHVseqNZuON2iW+rNmcUCxy9mU5rFyhV3Pz+cEcewLYARSY8EzHILQP0HsIYm0gI3UweBMwB1XCt5v9Dr1waDX6bp1r9N3B+d2t+42rXrX7TpebaBrV1xes+u0M5WQ7qu3u6feI8A0oZBLfD7nQg26kKokc7TIZGRXFqjCIFOXQJrrsO9UGzVT0DiJICdsxpxkEVSSMCkKZIr1v2MgLAorFTjhqURRcQo/TPLwW1kP5UNo7iDyjM5B9RTeXUbqV6bzcdrebtolfCcjND9sqrgypXjNZP/T28zkw7IdmG1eWNgl9+2Wb0IcATA/4WcelmYbjyzoTvTyglV3hlKVdtneOarMK9likRUNreeKmSp40zatujkGnCnZW93xF2DmFsL80o2zZX0QeWvf55fJkI0lkhCr8dOK5ReeG2MQ+XMjUMdn+dW3zF5IVTcJS3nM1o3UqyRn/OnDBfs491PmG/X3ytO3xI9h7cRReao3hqRslq/y+2X1wWxgrmCpEkSe7oIfAzgWfN+4LfKWi1TT9JRJ+PiLlitdS0cY84zJoKcXhl31LXjKVQL+m9M7mELhN1f2Unx4ZU+Gl2OlgzHSt770v50NWowLBrVL0IJLS1+q16cKzmY7ar8heFTwq/36Z4K/n0n7nfm9Zaemh+eh/S8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6LT/eiUpBfoZYQZtoBWQd2g6PHlTEhTiJa0Nimgv34nxSIgetxnhhkmqyvf+tYlX3LM0TyxgjbnJBc0ZVrYaer/TvzI8RzYMCIEHcPxzciYELthuB5y4tizsY1dXQs5L0jIuEBMNHULmrZhQvm7MWFQNwPTqkEbPujamORcQkuXGtS11TxhPCjDNvUiZ0GKOOUBQ3PCA4GDUXvQD6RngCpOeut4zbIMmLdmQmQBALgWEUySBNdwOgfHYMfnOOLBiE4ZEkVO3mJGvKm/7V0ul7WlXUvzKbAghAD6QPpEnE5/6q0f1WYShSxO1+sTxFJGMUroK1KkBkTM0khrJ9M0p2I2/wTaBCZU0AZZYQObDvupg/cAJbtvIu2QzDky+AyZFdiQxCQnDBPtdhg29Z/f6+B6702OGI/TfM731n9HibAFSdKMRAavMqvYfR/xQLlaxwQHIcNJwemCXKoxyRAmXLvOSUxXfcrl8EVcK9uvrXg1YQT/TUuOwTZPSRscqEyHTgkX/6df271ao4xRUpDW6R1wVoPB6vWMi949Hbazs7h+EZH0ftosKWw7r0ltWv223h/UzVy9bbo5fzgfrvL83HRp9x//Vw+iJ+q9Pve9q8FL1u4+iYfJxJqdJY+PKLwm5ulFPhq7nju2RP/h+dVZ3vEuPxL2+GV0/sM6rz/O2jPOR9md597OQxD27m5NszP4fXTU4M/x6/Dy6ALhy8ZFnz/FwoyeoslFv3B7oxffHv9e2ncXRxMBfAA7P2xnmQ/r2QONT3+PIefLk6fme07bOewaKzkYFZNHgkW1VKMRdrSe7BcSX0uLstDIiEvXIFP6xAVhQm+pXUpWgkKKD40C2cz1uus1zBPLs+26+6tr+rALHWj2YBvWfd9q9PxKf9Ys9iiepCymKpZS2PX8fE0QzwNOWERyY5EWeEa4/gViBwmkhWwoD0bKOLlJpYKfuLbZ9T0P1i2z59fbdehBt+43ek7DMu2erWuXqbhiV3k7FiTfVW97R72HBNOMEiXxas65HHQuZEme0aIQiVlboBojhbwEcqXDgeV4dcDpPEuIIgzmaVQkpJbNsrJAgK//LQNhXlopx1maC5SUp/DTJPe/VfWQPhFVDlxl9IvInpIDlxGs0vmQtnPw0qrg20VE1WGTxRU5xWsmu5/eZ0YNy2ZgNnlhblbcN1v+EuIAAPiCH9gvzSZetKBb0asLVt4ZUlVaVXufUe25ViwWRdlQVylmLuGBCaALRgQXUvZebtInwsAGAnzrxtmw3ou8se/yK8SMjQQSZC7HTyuX33hujAhXz41QHp/Vd98yOyFl3QRZiUO2k0S+ShTjLx8uOMDKT5qv5d8yzaP3dh3A2ooj85RvDEHZVK3U/fLyyWzgVMJSKYhpvg1+COBQ8F3jpsgbLkJO06QQ5PMvmlK6po4wTgsmwo5eGrbVt+QpXjISvDt9gCkV/u3KXvFPr+z7QX8kdXCO9I0v/W9ng5bjgoncxWnJpamv5OtTBmfTLbV/I3hQ8J2u+5Xg72bS+mD+aNmq6f55aP0B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06516</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06518</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065110</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C28334FAE190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C2833542E190E0401F0A059926F9</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C283357CE190E0401F0A059926F9</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="ebabe9aa-2364-4e2c-b889-3f99da946eff"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB544BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB551BA1FAE0401F0A059945B1:85D86B26"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7C732908341E0401F0A059945A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7C732908341E0401F0A059945A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7C732908341E0401F0A059945A1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB544BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5495A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB54D0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB544BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5495A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB54D0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb/I4FH3vr4jSxypkZYsAKSXlm7R0A9ppeRm5jgG3wQbbYemvHzs0YSnttCMhId9cn3vu4mM3OJgmjh9wjpjAlGhR2NT/GSEQwzq0DKcMbMN7eUEGcJ2RUY096JUt4Hkvrq5FnKcoIlwAIpq6Y9muYVvyN7Atv2z7dqXklZ2hrj0ixiW0dClZuraaJoT7WdimnjLiU8Ax9wmYIu4L6PeD664vPX2Qc9JbjQ3LLCBrTYSY+aYJSzGCKElgCdKp2TD3fBox9/t4TIBIGfqIGfOm/rF3uVyWlm6JsrHpWJZlWnVT+sQcj0/11km+GcURGdHNug0IJRiCBL8DReoaiQmNtSAZU4bFZPoFtG3aloI20Aoa0PbIqW5uA2Tsfoi0R5JxYPAJsHOwHhohhghE2kMvauqnP+vgZu+AAcJHlE35wfp3lBBZoITOUGzwPLOc3c8Rj5Sr1UDQjwhMUo4X6EaNyQxAxLU7hkZ41cVcDl/Mtaz92ornE4bgb1rSMHd5StrmkcqEeIy4+D/92u3VBuURJClq1e+DmsfW6z/s7+vFFXgazi33+SFlN+P7ZkZh13lDqmj1x/pwUIu5+tg0r3gPdtzjHXsdz5ynaFKpPF/dX8Q3j6vbTj+KBKktV93XHr99P5ubiRc6ZxEbMnIZpUP+1imvhudP15bdYX+84Qnj/apI/5qPKL8J2+KS3vYrZ+tJp2d2ifXgTukg6FdW1eXzfbdTe7DPupzbg85IzkY8f7vqvV0NwM3j5Vs0fx/enTyS9PE5Hb46AsyinnXFn5+b25x2c9g35nLQT19eERT5Uo1GFGod2S8gvpcWZcGxMcpc/ZnSJy4QEXpL7VKy4qdSfHDsy2Zu1he1it2uts/Lnnce2J3gwvJkUazAKtfrXvnczvVnw+KAYpuSEVaxlMJu5ud7gnDqc0RixIwFTeEEcf0bxBAIoEWkJw8GJRwNqFTwduC4QVi3KxXrwq2FVidsB25YL7uhU7fDekXXbqi4JbcsGAnE9tXb3VPvHoJ4hpGSeDXnXA46F7Ikc7BIRWKXFqBEUCovAaZ02He8WtnkeDpLkCJsTmmcJqg0m8yyApl88+8YAPLMijmcUSZAkp3CL5M8/JbXQ/rEWDlwldE5kj1FRy4jK0/n67Qru2nn8EEaY3XYZHEFw3DDZP/TdmbUsBQDU+QFeTEcxZZfQhwBML/hZx6WpogXL/BO9PyClXeGVJVW3t45KM1L6WKRZg2tKsVkEt60Tatq9hFMpeytB/QNEbOAMH904xSsDyIX9n1+qZiQvgACTeX4adnyB8+NPuLquRHJ47P66VtmL6Ssm0ArcczWTuSrRDH+9uECfaj8pPlO/i0pi7ftOoK1E0fmKd8YApOxWqn7Zf3FbEAqYbEURMp2wY8BHAu+byyKXHARcppeUoG+/qIppWvqAEKaEhGFembYVd+Mp1jPkL91+gSTKfzHlb3iX17ZT9fdvtTBKdALX/zfzgbOxgUiuYvjjEtTX8nXpwxOxjtq/0HwiOBXXadu1VzP3hf8YHsk9zJpfTJ/tuzU9PA8tP4F</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I4FH3vr4jSxypkZYsAKSXlm7R0A9ppeRm5jgG3wQbbYemvHzs0YSnttCMhId9cn3vu4mM3OJgmjh9wjpjAlGhR2NT/GSEQwzq0DKcMbMN7eUEGcJ2RUY096JUt4Hkvrq5FnKcoIlwAIpq6Y9muYVvyN7Atv2z7dqXklZ2hrj0ixiW0dClZuraaJoT7WdimnjLiU8Ax9wmYIu4L6PeD664vPX2Qc9JbjQ3LLCBrTYSY+aYJSzGCKElgCdKp2TD3fBox9/t4TIBIGfqIGfOm/rF3uVyWlm6JsrHpWJZlWnVT+sQcj0/11km+GcURGdHNug0IJRiCBL8DReoaiQmNtSAZU4bFZPoFtG3aloI20Aoa0PbIqW5uA2Tsfoi0R5JxYPAJsHOwHhohhghE2kMvauqnP+vgZu+AAcJHlE35wfp3lBBZoITOUGzwPLOc3c8Rj5Sr1UDQjwhMUo4X6EaNyQxAxLU7hkZ41cVcDl/Mtaz92ornE4bgb1rSMHd5StrmkcqEeIy4+D/92u3VBuURJClq1e+DmsfW6z/s7+vFFXgazi33+SFlN+P7ZkZh13lDqmj1x/pwUIu5+tg0r3gPdtzjHXsdz5ynaFKpPF/dX8Q3j6vbTj+KBKktV93XHr99P5ubiRc6ZxEbMnIZpUP+1imvhudP15bdYX+84Qnj/apI/5qPKL8J2+KS3vYrZ+tJp2d2ifXgTukg6FdW1eXzfbdTe7DPupzbg85IzkY8f7vqvV0NwM3j5Vs0fx/enTyS9PE5Hb46AsyinnXFn5+b25x2c9g35nLQT19eERT5Uo1GFGod2S8gvpcWZcGxMcpc/ZnSJy4QEXpL7VKy4qdSfHDsy2Zu1he1it2uts/Lnnce2J3gwvJkUazAKtfrXvnczvVnw+KAYpuSEVaxlMJu5ud7gnDqc0RixIwFTeEEcf0bxBAIoEWkJw8GJRwNqFTwduC4QVi3KxXrwq2FVidsB25YL7uhU7fDekXXbqi4JbcsGAnE9tXb3VPvHoJ4hpGSeDXnXA46F7Ikc7BIRWKXFqBEUCovAaZ02He8WtnkeDpLkCJsTmmcJqg0m8yyApl88+8YAPLMijmcUSZAkp3CL5M8/JbXQ/rEWDlwldE5kj1FRy4jK0/n67Qru2nn8EEaY3XYZHEFw3DDZP/TdmbUsBQDU+QFeTEcxZZfQhwBML/hZx6WpogXL/BO9PyClXeGVJVW3t45KM1L6WKRZg2tKsVkEt60Tatq9hFMpeytB/QNEbOAMH904xSsDyIX9n1+qZiQvgACTeX4adnyB8+NPuLquRHJ47P66VtmL6Ssm0ArcczWTuSrRDH+9uECfaj8pPlO/i0pi7ftOoK1E0fmKd8YApOxWqn7Zf3FbEAqYbEURMp2wY8BHAu+byyKXHARcppeUoG+/qIppWvqAEKaEhGFembYVd+Mp1jPkL91+gSTKfzHlb3iX17ZT9fdvtTBKdALX/zfzgbOxgUiuYvjjEtTX8nXpwxOxjtq/0HwiOBXXadu1VzP3hf8YHsk9zJpfTJ/tuzU9PA8tP4F</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtb9o6FP6+XxFlH6fgJBASooLEeGnTlhYI29365co4DngNdogdCv31s0OTAqO93ZWQkE+On/OcFz/2BYerxPa7nONMEEa1oN/W/206bjyfN+dGNEeR0ajbTcObu5HRdBoOwnDutlqergWc5zigXEAq2rptWnXDMuVvZpm+Y/mWV3Pr7oOufccZl9DSpWbq2naVUO4XYdt6nlGfQU64T+EKc18gP+yObn3p6cOSk9652LMsAmadpRCpDwCqRRjhJEE1xFbgAhz5XETcD8mCQpFn+CVmxNv6y96np6faU73GsgWwTdMEZgtIn4iTxWe986ncjKOAxmy/7kHKKEEwIc9QkRphsWSR1k0WLCNiuXoD2gKWqaANvEUGshr0sw5eAxTsPoh0RDLj0OBLaJVgUxzjDFOEtW/ToK1//lgH93tnGaQ8ZtmKn6z/jhKmG5ywFEcGLzMr2X0c8Uy5OhcY+QFFSc7JBt+pMUkhwlwbZzgm21vC5fBFXCvar215OWEY/U1LLsAhT0kbnKlMnywwF/+nX4e92qN8h0mOO8+m1wgXI9OeTATLe1fDeP59MO7D5fWgXVA4dN6Tqlr9sj4d1GquXjbBsRtfuuGk/6UORo1JAG/uJlDA0YjFbHSz/FWPe1fO1B1duTejTfL4sO7xMCdxuswBWv+aPcQoneFmPLh3KPvkPGbhDnnT6+ufoc2/rHZzMLm5+eEli58u+HE3g6PtjoJ8+s/VNh4BOoku17vxs+3doWC8fJheXY4nbrCl9/ntLv1Ew1aS3Iy/JU/B+HowpvXZz/ZrToc5HBtLOQjz+S+MRLlUoxH0taHsFxTvS4uykMiIC1c/VfrEBaZC76hdSlb8XIoPiXzZzP164DWtntv76jRaTtcadgdmw7SGZtd0Wq2G89Uq9WfP4oRij9GYqFhKYffz8z5BtPI5phHOjA3L0RJz/R3EvmynFtCpPBiMcjxjUsFd2+sNhvLYd62+43lu12y6w37Lbgzr7qBrD3Ttjol7ep91Y4GzY/WuH6n3FCOSEqwkXs05l4POhSzJGm5ykVi1DaxRnMtLIFM67NsNzwGcrNIEK8JgxaI8wbV0mRYFAnz/bxsQ8cJKOEpZJmBSnMI3kzz9VtZD+kREOXCV0Vcse4rPXEZmmc7baTcP0y7hu3lE1GGTxRUZQXsmx59eZ0YNSzUwVV6IV8NRbflLiDMA4B1+4LQ0VbxoQw6ilxesvDOkqnTK9q5hbV3LN5u8aKirFDOT8MACpgtCjHIpe7sZe8QUVBDgQzdOxfokcmU/5peLJQ0FFHglx08rlh94boSYq+dGII/P9qNvmaOQsm4Cb8U5Wy+RrxLF+N2HC/KR8pPmsfx7Yln02q4zWAdxZJ7yjSEIXaiVul92b8wGYhKWSEFk2SH4OYBzwY+NVZErLkJO0zwX+O0vmlK6tg4RYjkVQV8vDIfqW/AUuxT7r05/wBQK/3Jlb/mbV/aP0W0odXAF9cqX/LezQYpxQVju4qTg0ta38vUpg9PFgdq/EDwj+G7dbplevWEdC3739UgeZdL5w/yn5aCmp+eh8xs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP+4gifgCTHUGxXbpttZW7e72y50YgmYLQUmw2l9/EyxUre3t3hlnnBxOnvOclzzJGUdJXHc9zkkmaMq0wO/o/7RmlgUsGBltZNWNRrsBDQdFTQO0MLCdWctGs5auBZznJGBcICY6eh1Ay4BA/iYQuE3o1mGt3XIedO2eZFxCS5ca0LVNEjPuFmE7ep4xN0WccpehhHBXYHfsXV+50tNFJSe9e7ZjWQTMugshlq5p4lpIMIljXMNpYp6ZBz5nIXfHdM6QyDPyEjPkHf1l79PTU+3JqqXZ3KwDAEzgmNIn5HT+Ve9+KTeTMGBRulv3EUsZxSimz0iRuiZikYaaF8/TjIpF8g40NCFQ0AbZYAPDBvuqm68BCnafRDogmXFk8AWCJdgdiUhGGCba9C7o6F8/18Hd3kmGGI/SLOFH67+jRNiaxOmShAYvMyvZfR7xRLm6ZwS7AcNxzumaDNWYLBEmXBtlJKKbK8rl8IVcK9qvbXg5YQT/TUvOzH2ekrZ5ojI+nRMu/k+/9nu1Q7lHcU66+QCxHho5IRxk40sTWJf+uv0dPFyurjsFhX3nHamq1S/r40Gt5uplU9/2r7a/H1f9B8Lub27hr/56C6PpaCHYrfVnlWzrqwcrWT5eJLObm22jN3x0Hi+cfDQcTQQZrtaDAHsPs83tMptOv/xYXOZilIOmb11a00XYi0jeXg8jy/9Ogji94fb1deRf2BdXMPk5ycLtt/l97+dg+hz8nlpja2zDWxturu5/iNs/X8jGfPbGd9h3wJxOvg2Hqd15zWk/h0NjKQfjfPaHYFEu1WgEvnYu+4XEx9KiLDQ0osLVXSp94oIwoXfVLiUrbi7Fh4aubOZuPbBbsN/u95oNH3jw3BuABoDnwANNx2k0e7DUnx2LI4r9lEVUxVIKu5ufjwnixOWEhSQz1mmOF4TrHyD6SCAtYHfyYKSMk0kqFdzr99t1b+C02n7dtoDjWO3+eQsC3+45QAqDrg1TccNuMi8SJDtUb+tAve8IpktKlMSrOedy0LmQJVmhdS5iWFujGiO5vAQypcNuvWE3TU6TZUwUYTNJwzwmteViWRTI5Lv/uoEwL6yU42WaCRQXp/DdJI+/lfWQPiFVDlxl1COyp+TEZQTLdN6k3Th5aZXwXh5SddhkcUVG8Y7J4afXmVHDUg1MlRfm1XBUW/4S4gSA+QE/87g0VbxwTfeilxesvDOkqnTL9q5QbVXL1+u8aGhbKWYm4U1ogrY5JjiXsredpI+EmRWE+akbp2J9FLmyH/LLxYKNBRIkkeOnFctPPDfGhKvnRiCPz+azb5mDkLJugmzEKVs/lq8SxfjDhwt2sfKT5pH8e0qz8LVdJ7D24sg85RtDUDZXK3W/bN+ZDZxKWCoFMc32wU8BnAp+aKyKXHERcppmuSDvf9GU0nV0hHGaMxH4emHYV9+Cp9guifvq9AamUPiXK3vD372yf11fjaUOJkivfOl/Oxu0GBdM5C5OCy4dfSNfnzI4m++p/QvBE4LftuoOsK0GPBR87/VIHmTSfWN+a9mr6fF56P4L</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065113</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065117</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065119</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB544CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5496A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB54D1A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_200_OK_P2" searchProperties="true" id="a352c4ce-3bc5-46ea-80be-feb57e0f58f5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5544A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C893788D529BE0401F0A07996E28:4743272"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5532A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5532A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5532A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5544A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB558CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937842529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5544A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB558CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937842529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6PgBAKUqCAFKNNQPrpNpzudl5VxbsDTxEljB+j8+rVDkwKl3c5KSMg31+ee++FjX3AcR3XH5RwyQROmecOu/k+jHdiAmwujDmbbsOv1hbEI8cJoNc4xNJo27rSIrnmc5+AxLjATXb1uWg3DMuXvzjKdpuXUG7XzjvVT1+4h4xJautRMXdvGEeNOEbar5xlzEswpdxiOgTuCOL47nTjS08ElJ713sWNZBMx6KyFSByFSC4BAFJEaSWJ0gQ58LgLu+HTJsMgzeIkZ8K7+snez2dQ2jVqSLVHdNE1kdpD0CThdnum9L+VmCDwWJrv1ALOEUYIj+hsrUlMQqyTQ3GiZZFSs4negLWSZCtqALTGIZbMzHb0GKNh9EumAZMaxwVfYKsFuIYQMGAHt+63X1c8+18Hd3rsMMx4mWcyP1n9GCdgaoiSFwOBlZiW7zyOeKFfvAojjMRLlnK5hpsYkxQS4dpNBSLcTyuXwBVwr2q9teTlhQP6kJRdon6ekjU5UZkiXwMX/6dd+r3Yo9zjKoXc9RtbNVdSh9IffOd/SoFVPo7/H6dzn3YLCvvOOVNXql/XxoFZz9bJpTkRqh7OvD3Nv5k9m39bXg7zpT5rezWCVoHCLyHQbj3E7vOHDr+3+4HaOZtePz8vfm++x93SFl88DMZ6NYitesy/LcZtaGxPld8Foms74491EXK9cMrhvD+6X9KHFfsV0Ht+v5tPHx+3Ct3/e95PJ1bhx/YTrYdT5Nm08bIAPWtgPvvyc/dUn4dXDnPxaTr7Nb/1s2n3NaT+HQ2MpB36++AVElEs1Gt5QG8l+YfGxtCgLDYywcHVSpU9cABN6T+1SsuLkUnxo4Mhm7taX5y1r0B70m03bdq2Re2napjUyXbPZ6djNvlXqz47FEcVBwkKqYimF3c3PxwRJ7HBgAWTGOsnJCrj+AeIQC6x57FYejIRxuEukgrujkX152Wn1O2bz8nw0dBujS9cddix7KE9/p6lrs0TM2TxzQwHZoXo3DtT7FghNKSiJV3PO5aBzIUvyhNe5iKzaGtcY5PISyJQOO3X7vIk4jdMIFGEUJ0EeQS1dpUWBEN/91w1MeGGlnKRJJnBUnMJ3kzz+VtZD+gRUOXCVUR9kT+HEZWSV6byfdms/7RLezQOqDpssrsgo2TE5/PQ6M2pYqoGp8iK8Go5qyx9CnABAH/BDx6Wp4gVruhe9vGDlnSFVpVe29wnXnmr5ep0XDW0rxcwkPLKQ2UY+kFzK3vNd8ggMVRDoUzdOxfoocmU/5JeLFfMFFhDL8dOK5SeeGz5w9dzw5PHZfvYtcxBS1k3AVpyyDSL5KlGMP3y4EIcoP2m+kX+bJAte23UCay+OzFO+MQRlS7VS98vzO7NBEglLpSAm2T74KYBTwQ+NVZErLkJO0yIX8P4XTSldV8eEJDkT3lAvDPvqW/AUzyk4r05vYAqFf7myt/zdK/vHdOJLHYyxXvnS/3Y2aDEuBOQuTgsuXX0rX58yOFvuqf0LwdOC36h/JPiHmfTemN9a9mp6fB56/wI=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6PgBAKUqCAFKNNQPrpNpzudl5VxbsDTxEljB+j8+rVDkwKl3c5KSMg31+ee++FjX3AcR3XH5RwyQROmecOu/k+jHdiAmwujDmbbsOv1hbEI8cJoNc4xNJo27rSIrnmc5+AxLjATXb1uWg3DMuXvzjKdpuXUG7XzjvVT1+4h4xJautRMXdvGEeNOEbar5xlzEswpdxiOgTuCOL47nTjS08ElJ713sWNZBMx6KyFSByFSC4BAFJEaSWJ0gQ58LgLu+HTJsMgzeIkZ8K7+snez2dQ2jVqSLVHdNE1kdpD0CThdnum9L+VmCDwWJrv1ALOEUYIj+hsrUlMQqyTQ3GiZZFSs4negLWSZCtqALTGIZbMzHb0GKNh9EumAZMaxwVfYKsFuIYQMGAHt+63X1c8+18Hd3rsMMx4mWcyP1n9GCdgaoiSFwOBlZiW7zyOeKFfvAojjMRLlnK5hpsYkxQS4dpNBSLcTyuXwBVwr2q9teTlhQP6kJRdon6ekjU5UZkiXwMX/6dd+r3Yo9zjKoXc9RtbNVdSh9IffOd/SoFVPo7/H6dzn3YLCvvOOVNXql/XxoFZz9bJpTkRqh7OvD3Nv5k9m39bXg7zpT5rezWCVoHCLyHQbj3E7vOHDr+3+4HaOZtePz8vfm++x93SFl88DMZ6NYitesy/LcZtaGxPld8Foms74491EXK9cMrhvD+6X9KHFfsV0Ht+v5tPHx+3Ct3/e95PJ1bhx/YTrYdT5Nm08bIAPWtgPvvyc/dUn4dXDnPxaTr7Nb/1s2n3NaT+HQ2MpB36++AVElEs1Gt5QG8l+YfGxtCgLDYywcHVSpU9cABN6T+1SsuLkUnxo4Mhm7taX5y1r0B70m03bdq2Re2napjUyXbPZ6djNvlXqz47FEcVBwkKqYimF3c3PxwRJ7HBgAWTGOsnJCrj+AeIQC6x57FYejIRxuEukgrujkX152Wn1O2bz8nw0dBujS9cddix7KE9/p6lrs0TM2TxzQwHZoXo3DtT7FghNKSiJV3PO5aBzIUvyhNe5iKzaGtcY5PISyJQOO3X7vIk4jdMIFGEUJ0EeQS1dpUWBEN/91w1MeGGlnKRJJnBUnMJ3kzz+VtZD+gRUOXCVUR9kT+HEZWSV6byfdms/7RLezQOqDpssrsgo2TE5/PQ6M2pYqoGp8iK8Go5qyx9CnABAH/BDx6Wp4gVruhe9vGDlnSFVpVe29wnXnmr5ep0XDW0rxcwkPLKQ2UY+kFzK3vNd8ggMVRDoUzdOxfoocmU/5JeLFfMFFhDL8dOK5SeeGz5w9dzw5PHZfvYtcxBS1k3AVpyyDSL5KlGMP3y4EIcoP2m+kX+bJAte23UCay+OzFO+MQRlS7VS98vzO7NBEglLpSAm2T74KYBTwQ+NVZErLkJO0yIX8P4XTSldV8eEJDkT3lAvDPvqW/AUzyk4r05vYAqFf7myt/zdK/vHdOJLHYyxXvnS/3Y2aDEuBOQuTgsuXX0rX58yOFvuqf0LwdOC36h/JPiHmfTemN9a9mp6fB56/wI=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1FwEgiQqCBxndLC0ELLdHg5ch0DbhM7jR2gfP2xQ5MChR56JCTkne2117542ZcchoHtNTjHsSCMar12Tf/HgVVUdJ+w4Zcs1yhVKo7h+mVouE8ViJ3KDNuzoq71OE9wj3IBqajptmkVDcuUv3vL9BzLs51CtexMdW2CYy6hpUvB1LV1GFDupWFrehJTj0FOuEdhiLknkDduDPqe9PRgxkmvX25ZpgHj+kKIyAMAFXyMcBCgAmIhuAR7Ppc+98ZkTqFIYvwe0+c1/X3varUqrIoFFs+BbZomMF0gfXxO5hd6/Ue2Gfs9OmPbdQtSRgmCAdlARWqAxYL5WiOYs5iIRXgC2gKWqaANvEYGskr0QgcfAVJ2ZyLtkYw5NPgCWhnYCM9wjCnC2sOoV9Mvzuvgdu99DCmfsTjkB+vvUcJ0iQMWYd/gWWYZu/MRj5SrfomR16MoSDhZ4t9qTCKIMNduYzwj6z7hcvh8rqXt19Y8mzCMvtOSS7DLU9IGRyrTJnPMxf/p126vtigTGCS4XmFR4pcnk66c45sueBwPfzXm1J1YyaCWUth13pLKW/2+PhzUfK7eN41uWLJe/L39OQV+/Ow+gKv+ZthZvKxumXVVvrkq3U9Li1c0BIndvx6PJ9U/JLCXD/N53wxmzV/Xa/p8/dLp85llXv+Yjvjd4EUMB6tk2ib8PuzeTTe3lWkkXu4eh9NOibZHz/G0nYA1cN82DpmQcPSzVxxPJjc2KL3x0brSbW4aRffP3x/zaNDtm5vyI3yIW05z8jir1j5y2s1h35jJwTh5esZIZEs1Gr221pX9guJraVEW4huz1NWLlD5xganQ62qXkhUvkeJDfE82c7vuVMtWq9JqOk611bC6jY5ZMq2u2TAd1y05TSvTny2LA4otRmdExVIKu52frwmi0OOY+jg2lixBC8z1LxDbUECtR0fyYDDK8T2TCl6smh2r6bQ7brdbrtpOy+2UmpZbLTedZtl2Srr2m4khHcaNmcDxvnoX99R7hBGJCFYSr+acy0HnQpbkFS4TEViFJSxQnMhLIFY67NmlqgM4CaMAK8IgZH4S4EK0iNICAb79tw2IeGolHEUsFjBIT+HJJA+/ZfWQPj5RDlxl1MSyp/jIZWRl6ZxOu7ybdgbfSHyiDpssrogJ2jLZ//QxM2pY8oHJ80I8H458yzchjgCAL/iBw9Lk8fwl2YmeXbDyzpCqUs/a+woLr4VkuUzShlaUYsYSHljArIAxRomUvbd79oIpyCHAWTdOzvogcm7f55eIBR0LKHAox09Ll2c8N8aYq+dGTx6f9blvmb2Qsm4Cr8UxWyuQrxLF+MuHC/KQ8pPmW/m3YrH/0a4jWDtxZJ7yjSEInauVul/eTswGYhKWSEFk8S74MYBjwfeNeZFzLkJO01Mi8OkvmlK6mg4RYgkVvbaeGnbVN+Up3iLsfTh9gkkV/v3KXvOTV/bjoD+WOhhCPfcl/+1skHRcEJa7OEm51PS1fH3K4HS+o/bvBI8LftH+SvD3M6l/Mn+27NT08DzU/wU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6OQOAnkooLEpZ1hBG25bLfty8o4DniaOMF2IO2vXyc0KVDaZVZCQj45/s53Lv7sSw7jyPS7nGMmSEKV4aCt/tOykGeHAGleEBiaHYaOtggcoNmW61qGGQZO0FKVIecZHlIuIBVt1TSApQFD/ubA8JvAN72GYYEnVbnHjEto6dIwVCWPI8r9MmxbzRj1E8gJ9ymMMfcF8mfd8ciXnj6sOKmdyx3LMiDrrIRIfV1HjQAjHEWogZJYv9QPfC4D7s/IkkKRMfwWM+Bt9W3vdrttbK1Gwpa6aRiGbni69Ak4WV6onW/VZhwMaZjs1n1IE0oQjMgrLEiNsVglgdKNlgkjYhV/Ag10YBTQGs6RhoBNL1T9PUDJ7kykA5KMQ42vIKjApjjEDFOElb+mw7Z6cV4Hd3vnDFIeJizmR+s/o4TpBkdJigONV5lV7M5HPFGuziVG/pCiKONkg2+KMUkhwly5Yzgk+YhwOXwBV8r2KzmvJgyjP2nJpb7PU9LWT1RmQJaYi//Tr/1e7VDuYZThDhhl8/7mKedj5D08p98n0w1ervLwx3TSLinsO+9I1a1+Wx8Paj1Xb5sWqOfp3fGqN3++Hv1Ye/BuYcPuI8qi+PbX9HfAnvrNl9/23yhl1uv31a27Rfoi768333PureNHRJY/c+spfRk7v75NfxoQzh5j1ne325g9mPddc9Rc/0xnbjQhQ91L9S20J+txP7x7mE/CfLHu3aHr++XmZZuvJ/cOvpm+9q6z2yUbfgvHPWFxt/WaP0DnMU5Gz5P2e077ORwaKzmYZYvfGIlqWYzGcKBcy35B8bW0FBYSaGHp6qeFPnGBqVA7xa5CVvxMig8JfNnM3frKbYG+61mOa5tN0+tdGbYBro2u4Xhe68p0K/3ZsTii2E9oSIpYhcLu5udrgij2OaYBZtomydAKc/ULxAEUUBnSqTwYCeV4nkgFNwDwHKNlNQdg0Ltq2eAKeC3nCrh2q+m1gKsqN4m4pbesGwrMDtXbOlDvKUYkJbiQ+GLOuRx0LmRJ1nCTiQg0NrBBcSYvAVbosG/ablPnJE4jXBDW4yTIItxIV2lZIJ3v/k0NIl5aCUdpwgSMylP4aZLH36p6SJ+AFA68yKiHZU/xicsIVOl8SNs+eWlV8N0sIMVhk8UVjKAdk8NP7zNTDEs9MHVeiIOKe73lDyFOAOhf8NOPS1PHCzZkL3p1wco7Q6pKp2rvGjbWjWyzycqGOoViMgmvA91w9BlGmZS9l3nyjKleQ+hn3Tg166PItf2QXyZWdCagwLEcP6VcnvHcmGFePDeG8vjk575lDkLKugmci1O2fiRfJQXjLx8uyEeFnzTfyb9twoL3dp3A2osj85RvDEHoslgV98vLJ7OBEglLpCAmbB/8FMCp4IfGusg1FyGnaZEJ/PkXpVC6tgoRSjIqhgO1NOyrb8lTvKTYf3f6AFMq/NuVnfNPr+yH8WgmdTCGau1L/ttZI+W4ICx3cVJyaau5fH3K4HS5p/ZvBD8IvtPvNZuW2QXX3Vrwm55nN3vvR/Igk84H80fLXk2Pz0PnXw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065122</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065124</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065126</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5545A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB558DA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937843529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="666287ea-8b89-416d-8755-d5159a90ec71"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89378AE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C893797C529BE0401F0A07996E28:2FCB1B49"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C893789C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C893789C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C893789C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89378AE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C89378F6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937931529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89378AE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C89378F6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937931529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrkQrgkKkhAqIYZSi/QTtuXI9fZCS6Jk9oOpf36Y4eGAkN72iMhIe9sr732xcs+4ShNHL/HOTBBMqqNgo7+jx1F2G7aYDRDq2G4XlQ3HiKrbrSaTtN22i6A7ejaiPMCRpQLREVHdyy7btiW/M1sy2/Yft2qea53r2s3wLiEli41S9dWaUK5X4bt6AWjfoY44T5FKXBfYH/aOxv70tNHFSe9e7JmWQZk3bkQuW+auBYChiTBNZyl5om543MScn9KYopEweAtZsg7+tve5+fn2nO9lrHYdCzLMi3PlD4hJ/GR3v1RbYZwRKNsvR4gmlGCUUJekSJ1BmKehVoviTNGxDz9ANo2bUtBG7DCBrZdeqSb7wFKdl9E2iHJODL4HNkV2BVEwIBi0K6vRh396GsdXO+dMUR5lLGU762/RwnoEpIsh9DgVWYVu68jHihX9wSwP6I4KThZwkSNSY4wcO2CQURWY8Ll8IVcK9uvrXg1YYC/05ITc5unpG0eqExAYuDi//Rru1drlBuUFNClLE9b8zAPr++sGN0tm/FVNKs/zM8eh52SwrbzmtSm1W/r/UHdzNXbpgDugkajcF/bzP31sHoSg8m0wOl80pv9upk0/lw3fl6P7Vt7uHAvLxPIw3tnmonj7Lj9ElHeb/XNwDwF6oXT4eLHYtiy5rNHcdG/Z2xyXrdWi1Pzstm8s73k5vQ2DxfDu4vjPzeNZLwwj9uP3uXgOO39eoz/ePFPcnyN8CJ6iovfk1Ef/ehfxOPZ7/ptvHq9tRsvk4u7s857Tts57BorOZgWD4+ARbVUozEKtFPZLyQ+lxZlIaERla5+rvSJC6BC76pdSlb8QooPCX3ZzPV62G7ag7ZXb7V7w4bj9YeWa9mnVs9qeV5z6LQr/Vmz2KM4yGhEVCylsOv5+ZwgTn0ONARmLLMCz4HrnyAGSCBtRK/kwcgoh1mmFDzotQKvZzedoN603NZp3w2snhe4Tt2Ww+nq2iQT5/Sc9SIBbFe96zvqfQWY5ASUxKs553LQuZAleULLQiR2bYlqFAp5CTClw77jthsmJ2megCJspllYJFDL53lZIJOv/x0DYV5aCcd5xgRKylP4YZL736p6SJ+QKAeuMuqD7CkcuIycKp2P025up13B94qQqMMmiysYwWsmu5/eZ0YNy2ZgNnlhblfcN1u+CXEAwPyEn7lfmk28cEm2olcXrLwzpKp0q/Y+odpTrVgui7KhLaWYTMKbtmm1zCngQsreyyxbADU3EOaXbpwN673IG/suv0LM6VQgAakcP61cfuG5MQWunhsjeXxWX33L7ISUdROwEodsg0S+ShTjTx8u2MfKT5ov5N9zxsL3dh3A2ooj85RvDEForFbqfnn5YDZwJmGJFMSMbYMfAjgUfNe4KfKGi5DT9FAI+PiLppSuoyOMs4KKUaCXhm31LXmKlxz8d6e/YEqFf7uyV/zDK/v2bDyVOpgifeNL/tvZIOW4YJC7OCm5dPSVfH3K4DTeUvs3gocF3xt8Jvi7mXT/Mv9t2arp/nno/gs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrkQrgkKkhAqIYZSi/QTtuXI9fZCS6Jk9oOpf36Y4eGAkN72iMhIe9sr732xcs+4ShNHL/HOTBBMqqNgo7+jx1F2G7aYDRDq2G4XlQ3HiKrbrSaTtN22i6A7ejaiPMCRpQLREVHdyy7btiW/M1sy2/Yft2qea53r2s3wLiEli41S9dWaUK5X4bt6AWjfoY44T5FKXBfYH/aOxv70tNHFSe9e7JmWQZk3bkQuW+auBYChiTBNZyl5om543MScn9KYopEweAtZsg7+tve5+fn2nO9lrHYdCzLMi3PlD4hJ/GR3v1RbYZwRKNsvR4gmlGCUUJekSJ1BmKehVoviTNGxDz9ANo2bUtBG7DCBrZdeqSb7wFKdl9E2iHJODL4HNkV2BVEwIBi0K6vRh396GsdXO+dMUR5lLGU762/RwnoEpIsh9DgVWYVu68jHihX9wSwP6I4KThZwkSNSY4wcO2CQURWY8Ll8IVcK9uvrXg1YYC/05ITc5unpG0eqExAYuDi//Rru1drlBuUFNClLE9b8zAPr++sGN0tm/FVNKs/zM8eh52SwrbzmtSm1W/r/UHdzNXbpgDugkajcF/bzP31sHoSg8m0wOl80pv9upk0/lw3fl6P7Vt7uHAvLxPIw3tnmonj7Lj9ElHeb/XNwDwF6oXT4eLHYtiy5rNHcdG/Z2xyXrdWi1Pzstm8s73k5vQ2DxfDu4vjPzeNZLwwj9uP3uXgOO39eoz/ePFPcnyN8CJ6iovfk1Ef/ehfxOPZ7/ptvHq9tRsvk4u7s857Tts57BorOZgWD4+ARbVUozEKtFPZLyQ+lxZlIaERla5+rvSJC6BC76pdSlb8QooPCX3ZzPV62G7ag7ZXb7V7w4bj9YeWa9mnVs9qeV5z6LQr/Vmz2KM4yGhEVCylsOv5+ZwgTn0ONARmLLMCz4HrnyAGSCBtRK/kwcgoh1mmFDzotQKvZzedoN603NZp3w2snhe4Tt2Ww+nq2iQT5/Sc9SIBbFe96zvqfQWY5ASUxKs553LQuZAleULLQiR2bYlqFAp5CTClw77jthsmJ2megCJspllYJFDL53lZIJOv/x0DYV5aCcd5xgRKylP4YZL736p6SJ+QKAeuMuqD7CkcuIycKp2P025up13B94qQqMMmiysYwWsmu5/eZ0YNy2ZgNnlhblfcN1u+CXEAwPyEn7lfmk28cEm2olcXrLwzpKp0q/Y+odpTrVgui7KhLaWYTMKbtmm1zCngQsreyyxbADU3EOaXbpwN673IG/suv0LM6VQgAakcP61cfuG5MQWunhsjeXxWX33L7ISUdROwEodsg0S+ShTjTx8u2MfKT5ov5N9zxsL3dh3A2ooj85RvDEForFbqfnn5YDZwJmGJFMSMbYMfAjgUfNe4KfKGi5DT9FAI+PiLppSuoyOMs4KKUaCXhm31LXmKlxz8d6e/YEqFf7uyV/zDK/v2bDyVOpgifeNL/tvZIOW4YJC7OCm5dPSVfH3K4DTeUvs3gocF3xt8Jvi7mXT/Mv9t2arp/nno/gs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrEIRAgKkgplykUaAsMw+nLkeuY4DZxgu1QOl8/dmgoUOC0R0JC3tlee+2Ll33FYRQWXY9zzASJqdZt1fV/bafiQ8eBBnAqJaPkY2BUa1XbmM8BRsipOXP/Sde6nKe4S7mAVNT1IrBswwLyN7GAW7Zcu1go25VHXZtixiW0dCkAXVtHIeVuFraup4y6MeSEuxRGmLsCuWNv0HelpwtzTnrjasMyC8gaCyES1zRRwccIhyEqoDgyr8w9nyufu2MSUChSht9j+ryuv+99fX0tvNqFmAVmEQBggpopfXxOggu98SPfjP0uncebdRPSmBIEQ/IHKlIDLBaxr3lhEDMiFtEJaMu0gII28BoZyCrRC938CJCx+yLSHknGocEX0MrBRniOGaYIa79G3bp+8bUObvZOGKR8HrOIH6y/RwnTFQ7jBPsGzzPL2X0d8Ui5GlcYuV2KwpSTFR6qMUkgwly7Z3hO1n3C5fD5XMvar615PmEYfaclV+YuT0nbPFKZFgkwF/+nX7u92qBMYZjixnT60xo4PbudrOiDcyPW1eGwbS5+d8pePaOw67whtW31+/pwULdz9b7Jm/mPzaj9AvrjzrVnLpOfTz3+UK6R5+6jXSr2HoE9ZtyrBqDXhGPbq14WZ+xXeTKzJ2F5NblZXw78f9pkAFoj5wcAQdS86c3uUZCwBE5BEAd9MS/+eRkOg0vhPddE1Os77SebrWaDy/HLPHr47Q1H0V0PLKfLtt2KuoNbrz99a4sfJVa77UW3NnoaPfTLqZOMXuofOe3msG/M5WCcPj1jJPKlGo1uS+vIfkFxXlqUhfjGPHN1E6VPXGAq9IbapWTFTaX4EN+Vzdys21XHalZrdqXaccrF2nUblIDVAR6o1GpOu1jN9WfD4oBiM6ZzomIphd3Mz3mCKHI5pj5mxipO0QJz/QxiCwqodelIHoyYcjyJpYI7Zbvd7thWq9wBoNm5vm515KGvlSuOY1cqFUvXhrG4o3fMmwvM9tXb3lPvEUYkIVhJvJpzLgedC1mSJVylIrQKK1igOJWXAFM67BZL1bLJSZSEWBE2o9hPQ1xIFklWIJNv/osGRDyzEo6SmAkYZqfwZJKH3/J6SB+fKAeuMrrGsqf4yGVUzNM5nbazm3YO76U+UYdNFlcwgjZM9j99zIwalu3AbPNC3Mq5b7d8E+IIgHmGn3lYmm08f0V2oucXrLwzpKo08vYuYWFZSFerNGtoRSkmk/CmZYKKOcYolbL3NolfMDW3EOaXbpwt64PIW/s+v1Qs6FhAgSM5flq2/MJzY4y5em505fFZf/UtsxdS1k3gtThma4byVaIYn324IBcpP2m+l3+vMfM/2nUEayeOzFO+MQShgVqp++XtxGygWMISKYgx2wU/BnAs+L5xW+QtFyGn6SkV+PQXTSldXYcIxSkV3ZaeGXbVN+Mp3hLsfjh9gskU/v3KXvOTV/Zs0B9LHYygvvUl/+1skGxcEJa7OMm41PW1fH3K4DTYUft3gscFv9Y8J/j7mTQ+mT9bdmp6eB4afwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx1VwAoGQCJD4KF36eRcoRbysjDMQl8SB2KH0/vprB0KB0m67EhLyZHzmjGd8xjWOo7DoNTmHRNCYab1OXf+XOFUXqnhmVKAEhl10TcOduRXDn5mm7ZAyKU+JrvU4T6HHuMBM1PWiaZUMy5S/oWV6ZcsrlQtWqTLRtREkXEJLl4Kpa5soZNzLwtb1NGFejDnlHsMRcE8Qb9C8v/Okp4dzTnqjtmWZBUwagRBLDyFS8IFAGJICiSNUQ0c+NZ97AzpnWKQJ7GL6vK7v9r6+vhZeS4U4maOiaZrIdJH08TmdX+qNi3wz+D02i7frNmYxowSH9DdWpO5BBLGvNcN5nFARRJ9AW8gyFbQBG2IQy2aXOnoPkLH7JtIRyYRjgwfYysH6MIMEGAHtqd+r65ffq+B27zDBjM/iJOIn659RAraGMF6Cb/A8s5zd9xHPHFejBsTrMRKmnK7hQbXJEhPg2q8EZnRzR7lsPp9rWfm1Dc87DMhPSlJDhzwlbXTmZDp0Dlz8n3od1mqLMsJhCo1oEIzSoTN2n9ar1s1b6rsdpx+ONtPpop5ROHTektqXerc+bdR9X+02rVbR9K/K0L59RtZt2SSt4P5u0QYUh+2qmL4tyTgo/fPcRRPnKbpfhE+0Mp2IymLSX6Y3PXCf0nVphZ31rLNaTC5exosBt6tdNyW9RNx1X+aPb86wT8dsunq+NslkZK1GZeduQK7HN8Pba2b/fqk8xC+tzt/twJlH8wkazW98JsR0fnH9mCbR6v75Ga8W12MYToJq/T2nwxyOjbkcDNLpCxCRL1Vr9DpaV9YLi6+lRVmob8wyV2+p9IkLYEJvqF1KVrxUig/1PVnM7fqqWrHaVbfkuCWrXHRbV6ZtWl2zaTquW7kqVnP92bI4odiO2YyqWEpht/3zNUESeRyYD4mxjlMSANe/QOxggbUe68uLETMOw1gquOuYrU6zaNlmt2q3r6q22262Ol2nedVxOrZr69pDLB7ZY9KcCUiO1bt0pN59IHRJQUm86nMuG50LeSQrvE5FaBXWuMAglUMgUTrsFe1qGXEaLUNQhFEU+2kIhWWwzA4I8e1/0cCEZ1bKyTJOBA6zW/hpkqff8vOQPj5VDlxl1AJZUzgzjIp5Oh/Sts8OrRy+mfpUXTZ5uCKhZMvk+NN7z6hm2TfMPi/CrZz7fssPIc4AoC/4odOj2cfz1/Qgej5g5cyQqtLIy7vChVUhXa/TrKCOUsxEwiMLmQ4aAEml7L0N4wUwtIdA35o4e9Ynkff2Y36pCNhAYAGRbD8tW37juTEArp4bPXl9Nt99yxyFlOcmYCPO2dqhfJUoxl8+XIhHlJ80/5J/r3Hiv5frDNZBHJmnfGMIyuZqpebL2ye9QWIJS6Ugxskh+DmAc8GPjftD3nMRspumqYDPv2hK6eo6JiROmeh19MxwqL4ZT/G2BO/d6QNMpvC7kb3hn47s8b2cKQFEWN/70v92NmjWLgTkLk4zLnV9I1+fMjibH6j9juBZwa+67a8E/ziTxgfzR8vBmZ7eh8Yf</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065130</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065131</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065133</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89378AF529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C89378F7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937932529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="d4b0cdd3-2698-446a-8815-831f65fc9860"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937998529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937A66529BE0401F0A07996E28:997D44F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937986529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937986529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937986529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937998529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C89379E0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937A1B529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937998529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C89379E0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937A1B529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQCyQkUUGi0E7pjQ7QqtOXI+NsgtvEprYDtF9/7NBQYGhP50hIyDvba6998bKPBMozL+4IAVwSRo1+r2X+4zs+noRN35p4zdBqTOpNK0RT30L1KHL9JoSRA6bRF6KAPhUSUdkyPcetW66jfmPXiX03rge1yA8eTOMOuFDQyqXmmMYqz6iIy7Ats+A0ZkgQEVOUg4gljkedq8tYecao4mS2j9Ysy4C8PZNyHts2riWAIctwDbPcPrJ3fI4SEY9ISpEsOLzFTETLfNu7XC5ry3qN8dT2HMexnchWPokg6Xez/a3aDEmfTtl63UWUUYJRRl6RJnUFcsYSo5OljBM5yz+Adm3X0dAWrLCF3Qb9btrvAUp2X0TaIckFssQMuRXYEKbAgWIwbof9lvn9ax1c7x1zRMWU8Vzsrf+OEtAFZGwOiSWqzCp2X0c8UK72EeC4T3FWCLKAaz0mc4RBGDccpmR1SYQavkQYZfuNlagmDPDftOTI3uapaNsHKtMjKQj5f/q13as1yh3KCmi/dH7/KBr33m0I02feie5Du94bnD0Qr98qKWw7r0ltWv223h/UzVy9bTofDKYTf8AxO3FumpcL/Ov0sUC9Fz4Z9H5OaArucuzcYQgm0bgTDvrRxbT5SJdn9eNg8XT2eJ7+ukkX6WDYeH6Kvl00Omyc3jtX16eBvOD89WkyG15fzjNbTOzxGC/H56uXx5/52dU9IISDh9fTy+H9/HfzYTm88FZX7PpugW+nKcI3F9/y8W8nm50cp4571j3/KW5/LFvvOW3nsGus5GBUTB4By2qpR6PfM05Vv5D8XFq0hSTWtHSN51qfhAQqzbbepWUlLpT4kCRWzVyvT8LA7YZRvRlFoe9FxydOw3FPnY6jDMGJF1b6s2axR7HL6JToWFph1/PzOUGcxwJoAtxasALPQJifIPaQREafDtXBYFTAmCkF7zb8ZtTrBcdON3SiRuS7zZOuH9S7/nHDc/zANK6ZHNAB70wl8F31ru+o9xAwmRPQEq/nXKhBF1KV5BktCpm5tQWqUSjUJcC1DsdeI/RtQfJ5BpqwnbOkyKA2n83LAtli/e9ZCIvSSgSeMy5RVp7CD5Pc/1bVQ/kkRDsIndExqJ7CgcvIq9L5OO1gO+0KvlMkRB82VVzJCV4z2f30PjN6WDYDs8kLC7fivtnylxAHAOxP+Nn7pdnESxZkK3p1wao7Q6lKu2rvM6o914rFoigb2tSKyRW87dpO0x4BLpTsvYzZE1B7A2F/6cbZsN6LvLHv8ivkjI4kkpCr8TPK5ReeGyMQ+rnRV8dn9dW3zE5IVTcJK3nI1s3Uq0Qz/vThgmOs/ZT5Rv0tGU/e23UAayuOylO9MSShqV7p++Xlg9nATMESJYiMb4MfAjgUfNe4KfKGi1TTNCkkfPzF0ErXMhHGrKCy3zNLw7b6ljzlyxzid6c/YEqFf7uyV+LDK/v+6nKkdDBH5saX/LezRcpxweqxqvxLLi1zpV6fKjhNt9T+jeBhwQ+DzwR/N5P2H+Y/LVs13T8P7X8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQCyQkUUGi0E7pjQ7QqtOXI+NsgtvEprYDtF9/7NBQYGhP50hIyDvba6998bKPBMozL+4IAVwSRo1+r2X+4zs+noRN35p4zdBqTOpNK0RT30L1KHL9JoSRA6bRF6KAPhUSUdkyPcetW66jfmPXiX03rge1yA8eTOMOuFDQyqXmmMYqz6iIy7Ats+A0ZkgQEVOUg4gljkedq8tYecao4mS2j9Ysy4C8PZNyHts2riWAIctwDbPcPrJ3fI4SEY9ISpEsOLzFTETLfNu7XC5ry3qN8dT2HMexnchWPokg6Xez/a3aDEmfTtl63UWUUYJRRl6RJnUFcsYSo5OljBM5yz+Adm3X0dAWrLCF3Qb9btrvAUp2X0TaIckFssQMuRXYEKbAgWIwbof9lvn9ax1c7x1zRMWU8Vzsrf+OEtAFZGwOiSWqzCp2X0c8UK72EeC4T3FWCLKAaz0mc4RBGDccpmR1SYQavkQYZfuNlagmDPDftOTI3uapaNsHKtMjKQj5f/q13as1yh3KCmi/dH7/KBr33m0I02feie5Du94bnD0Qr98qKWw7r0ltWv223h/UzVy9bTofDKYTf8AxO3FumpcL/Ov0sUC9Fz4Z9H5OaArucuzcYQgm0bgTDvrRxbT5SJdn9eNg8XT2eJ7+ukkX6WDYeH6Kvl00Omyc3jtX16eBvOD89WkyG15fzjNbTOzxGC/H56uXx5/52dU9IISDh9fTy+H9/HfzYTm88FZX7PpugW+nKcI3F9/y8W8nm50cp4571j3/KW5/LFvvOW3nsGus5GBUTB4By2qpR6PfM05Vv5D8XFq0hSTWtHSN51qfhAQqzbbepWUlLpT4kCRWzVyvT8LA7YZRvRlFoe9FxydOw3FPnY6jDMGJF1b6s2axR7HL6JToWFph1/PzOUGcxwJoAtxasALPQJifIPaQREafDtXBYFTAmCkF7zb8ZtTrBcdON3SiRuS7zZOuH9S7/nHDc/zANK6ZHNAB70wl8F31ru+o9xAwmRPQEq/nXKhBF1KV5BktCpm5tQWqUSjUJcC1DsdeI/RtQfJ5BpqwnbOkyKA2n83LAtli/e9ZCIvSSgSeMy5RVp7CD5Pc/1bVQ/kkRDsIndExqJ7CgcvIq9L5OO1gO+0KvlMkRB82VVzJCV4z2f30PjN6WDYDs8kLC7fivtnylxAHAOxP+Nn7pdnESxZkK3p1wao7Q6lKu2rvM6o914rFoigb2tSKyRW87dpO0x4BLpTsvYzZE1B7A2F/6cbZsN6LvLHv8ivkjI4kkpCr8TPK5ReeGyMQ+rnRV8dn9dW3zE5IVTcJK3nI1s3Uq0Qz/vThgmOs/ZT5Rv0tGU/e23UAayuOylO9MSShqV7p++Xlg9nATMESJYiMb4MfAjgUfNe4KfKGi1TTNCkkfPzF0ErXMhHGrKCy3zNLw7b6ljzlyxzid6c/YEqFf7uyV+LDK/v+6nKkdDBH5saX/LezRcpxweqxqvxLLi1zpV6fKjhNt9T+jeBhwQ+DzwR/N5P2H+Y/LVs13T8P7X8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuI4FH3vr3C5H1PGCwYvFaiiWabphGxkm36ZEvK1rbQtGUs2pL9+ZBMTICSTniqqKF1fnXvuoiOdcpQmlj/gHHJBGFWmo576TzfA2HZMS8O2hTXbQa7mujjU2h0rMO1O2HW6lqpMOS9gSrlAVPRUyzDbmmnI361p+B3Tb7stxzR+qso95FxCS5eWoSrrNKHcr8P21CKnPkOccJ+iFLgvsD8fzM596emjhpPaP92wrAPm/ViIzNd13AoAQ5LgFmapfqrv+ZwG3J+TiCJR5PASM+A99WXvarVqrdotlke6ZRiGbni69Ak4ib6q/S/NZgimNGSb9RBRRglGCfmNKlIzEDELlEESsZyIOH0H2tRNo4LWYI01bNr0q6q/BqjZfRJpj2TOkcZjZDZgNxBCDhSDcncz7alfP9fBzd7bHFEesjzlB+s/owS0hIRlEGi8yaxh93nEI+XqnwL2pxQnBSclXFRjkiEMXLnKISTrc8Ll8AVcqduvrHkzYYD/pCWn+i5PSVs/UpkRiYCL/9Ov3V5tUO5RUkA/OhsNWHlyIp4fl4uUe3eXdxGsmB4Y172awq7zhtS21S/rw0HdztXLpskZfRjaq+v7QRtH9sPTeTiZiMl19vCzvJ7EZe5yPL6+G8dPZ7H9GCxuvHTN9IdgPZnoPx7jhXn10x17kWkDlE9f2stZ9h2Hv9Yzr4xD9/4SL4vujZXfs98XKy/5u1w/F6OggOfv3xdshnTsXf1I4mE3SsP5OFvi8mR154hUnAUEvgj73HY4/oGWi/Ff3sWsa0W915x2c9g3NnIwLxZPgEWzrEZjOlImsl9IfCwtlYUEWli7+lmlT1wAFWq/2lXJil9I8SGBL5u5WY/drjl0vbbjjY2O5X0bG7ZhToyB4Xhed2y5jf5sWBxQHDIakipWpbCb+fmYIE59DjSAXCtZgWPg6geIIySQMqU38mAwyuGWSQU33bEx7Awcp932BrblGMbIsEbucOINjOE3q6MqF0xc0st8EArI99W7vafeN4BJRqCS+GrOuRx0LmRJlqgsRGK2StSiUMhLIK902Ldst6NzkmYJVIT1lAVFAq0szuoC6Xzzb2kI89pKOM5YLlBSn8J3kzz81tRD+gSkcuBVRt9A9hSOXEZWk877aXd3027gB4WcVHnYZHFFTvCGyf6n15mphmU7MNu8MDcb7tstfwhxBED/gJ9+WJptvKAkO9GbC1beGVJV+k17l6i1bBVlWdQNdSrFzCW8buqGo88BF1L2nm/ZL6D6FkL/1I2zZX0QeWvf51eImM4FEpDK8VPq5SeeG3Pg1XNjKo/P+rNvmb2Qsm4C1uKYbZjIV0nF+MOHC/Zx5SfNV/JvxfLgtV1HsHbiyDzlG0MQGlWr6n55fmc2MJOwRAoiy3fBjwEcC75v3BZ5y0XIaVoUAt7/olRK11MRxqygYjpSa8Ou+tY8xXMG/qvTG5ha4V+u7DV/98p+nJ3PpQ6mSN36kv921kg9LhjkLk5qLj11LV+fMjiNdtT+heBxwXe7Hwn+fib9N+a3lp2aHp6H/r8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBCQRKooKUculktreFlg59WbnOAdwmTrAdLv31a4eGAqXdzkpIyCfH3/nOxZ99KnASV/1ACOCSpswIuy3zH2/ScO0IYwtww7bcR69mNSMnsrzItm2nTpr1RtU0QiFyCJmQmMmWWbWdmuXY6nfr2H7d8V2nUncbD6YxAi4UtHKp2KaxSmIm/CJsy8w581MsqPAZTkD4kvjD4PLCV54+LjmZ7dMNyyIgb8+kzHyESCUCAnFMKiRN0Cna8zmNhD+kU4ZlzuE1ZiRa5uve5XJZWdYqKZ+iqkoJ2R5SPpGg0+9m+1u5GaKQTdLNuoNZyijBMX3BmtQlyFkaGUE8TTmVs+QDaAc5toa2YEUs4rjsu4neAhTsvoi0R5ILbIkZdkqwAUyAAyNg3A3Clvn9ax3c7L3lmIlJyhNxsP4zSsAWEKcZRJYoMyvZfR3xSLnap0D8kJE4F3QBV3pMMkxAGDccJnR1QYUavkgYRfuNlSgnDMiftOQU7fJUtNGRynTpFIT8P/3a7dUGZYTjHNpw/zgPHTtbcvmUpOczvq4G/Zer8X2v1yoo7DpvSG1b/bo+HNTtXL1u6qyG+c+XLJ48xnfjUTVZueOH0Xk4fxj8QDcj2qstrsOzEZeDsHs9vct/yfuHCVuHV8NoSZN4nP81noUnUeMCxbPlt9Hz0+X8MWiMFpfdl5rdHPOfy4fxCzyfT56Hq8HT6MYZodr67wcWoOwlSWZoad+sEymFE8x+Lofh/W1wMx/QVfP6+duP5Gl8dv67B1QGnbs4Ox+PW2857eawbyzlYJg/PgGR5VKPRtg1+qpfWH4uLdpCI2tSuPqZ1ichgUmzrXdpWfFzJT408lUzN+tes+F0ml7tJHDO6lXvrGe7ttO3A/vE8xq9arPUnw2LA4qdlE2ojqUVdjM/nxMkiS+ARcCtRZqTGQjzE8QultgI2UAdjJQJuE2Vgp+4HbfvNrpevecGvVpQ7Te8fr/jeJ1av+/VPNO4SuU1u+bBRALfV+/annoPgNCMgpZ4PedCDbqQqiRzvMhl7FQWuMIgV5cA1zrsV91mHQmaZDFowihJozyGSjbLigIhsfmvWpiIwkoFyVIucVycwg+TPPxW1kP5RFQ7CJ3RGaiewpHLqFam8y5t9+ilVcIHeUT1YVPFlZySDZP9T28zo4dlOzDbvIhwSu7bLX8IcQQAfcIPHZZmGy9a0J3o5QWr7gylKu2yvXNcmVfyxSIvGnqiFZMreOQg+wQNgeRK9ta36TMwtIVAX7pxtqwPIm/t+/xyOWNDiSUkavyMYvmF58YQhH5uhOr4rL76ltkLqeomYSWP2TqxepVoxp8+XIhPtJ8y36i/Zcqjt3YdwdqJo/JUbwxJ2VSv9P2y/mA2SKpgqRLElO+CHwM4FnzfuC3ylotU0/SYS/j4i6GVrmViQtKcybBrFoZd9S14ynUG/pvTO5hC4V+v7JX48Mr+fXkxVDqYYHPrS//b2aLFuBBQuwQtuLTMlXp9quBsuqP2rwSPCr7XbHwm+PuZtN+Z31t2anp4Htr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065136</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065138</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065139</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937999529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C89379E1529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937A1C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="4e068d44-cb12-4d9d-8339-f16e46424b1d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937A82529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C8937B68529BE0401F0A07996E28:E6451DAF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937A70529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937A70529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937A70529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937A82529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937ACA529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937B1D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937A82529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937ACA529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937B1D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oVDoADMV5GwU0S3g7eVMTBeQbZtCkhb01++kWAREj54ZZpisrnzrW5d8SYOjOHL8gHNggiRU63Wa+r+VumM5nls2cPWpargTr27UEbIMXAMc1u2Ka4VPutbjPIUe5QJR0dQdyy4btiV/I9vyK7bvlkuuVX/UtVtgXEJLl5Kla6s4otzPwzb1lFE/QZxwn6IYuC+wPwwu+7709FHBSW811izzgKw1E2LumyYuhYAhinAJJ7HZMHd8GiH3h2RKkUgZvMUMeVN/27tcLkvLcilhU9OxLMu06qb0CTmZHuuto2IzhD06SdbrNqIJJRhF5BUpUpcgZkmoBdE0YUTM4k+gbdO2FLQBK2xg26XHuvkeIGf3TaQdkowjg8+QXYDdwAQYUAza+KbX1I+/18H13hFDlE8SFvO99c8oAc0gSuYQGrzIrGD3fcQD5Wo1APs9iqOUkwwGakzmCAPXrhlMyKpPuBy+kGt5+7UVLyYM8E9a0jC3eUra5oHKdMgUuPg//dru1RrlFkUptE7S16tsMSKrZ3a+iB+cqwEJni/s3sVJ0swpbDuvSW1a/bbeH9TNXL1tGuLf3XjhTM/PF1kAXnr2EM6WletK+yR6ai8fpll8VTtdXniDpH1+/xhjdl1FL9H49y19uPSGJ/GdzQcV83b0iBzniFW9C1KePaLXfqdL/yyJR0/7/dchy54s0s8cwpbjwX16PXaXnPTH80xUBpd09OsBodNfL8/1u8HwbPh431/eR+Wj5+5l+x9r/BzcMFZmcPdasZrvOW3nsGss5GCYPv0BLIqlGo1eR+vKfiHxtbQoCwmNSe7qz5U+cQFU6C21S8mKn0rxIaEvm7len9WqdrtWL3tBzak49dMzy7XsrhVYXr1ePXNqhf6sWexRbCd0QlQspbDr+fmaII59DjQEZmRJimfA9S8QO0ggrUdv5MFIKIdRIhXcc9u25VTKtXZQ8QLX7XbsjuuWna7TdYPgrKprg0Rc0SsWTASwXfUu76j3DWAyJ6AkXs05l4POhSzJAmWpiOxShkoUUnkJMKXDvuPWKiYn8TwCRdiMkzCNoDSfzfMCmXz97xgI89xKOJ4nTKAoP4WfJrn/raiH9AmJcuAqo1OQPYUDl1G5SOfztKvbaRfwQRoSddhkcQUjeM1k99P7zKhh2QzMJi/M7YL7ZssPIQ4AmF/wM/dLs4kXZmQrenHByjtDqkqraO8ClRalNMvSvKGeUkwm4U3btDxzCDiVsvcySp6BmhsI81s3zob1XuSNfZdfKmZ0KJCAWI6fli+/8dwYAlfPjZ48PqvvvmV2Qsq6CViJQ7Z2JF8livGXDxfsY+Unzdfyb5mw8L1dB7C24sg85RtDEDpVK3W/vHwyGziRsEQKYsK2wQ8BHAq+a9wUecNFyGl6SgV8/kVTStfUEcZJSkWvo+eGbfXNeYqXOfjvTh9gcoV/u7JX/NMr+/6yP5Q6GCN940v+29kg+bhgkLs4ybk09ZV8fcrgdLql9m8EDwu+Z30l+LuZtD6YP1q2arp/Hlp/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oVDoADMV5GwU0S3g7eVMTBeQbZtCkhb01++kWAREj54ZZpisrnzrW5d8SYOjOHL8gHNggiRU63Wa+r+VumM5nls2cPWpargTr27UEbIMXAMc1u2Ka4VPutbjPIUe5QJR0dQdyy4btiV/I9vyK7bvlkuuVX/UtVtgXEJLl5Kla6s4otzPwzb1lFE/QZxwn6IYuC+wPwwu+7709FHBSW811izzgKw1E2LumyYuhYAhinAJJ7HZMHd8GiH3h2RKkUgZvMUMeVN/27tcLkvLcilhU9OxLMu06qb0CTmZHuuto2IzhD06SdbrNqIJJRhF5BUpUpcgZkmoBdE0YUTM4k+gbdO2FLQBK2xg26XHuvkeIGf3TaQdkowjg8+QXYDdwAQYUAza+KbX1I+/18H13hFDlE8SFvO99c8oAc0gSuYQGrzIrGD3fcQD5Wo1APs9iqOUkwwGakzmCAPXrhlMyKpPuBy+kGt5+7UVLyYM8E9a0jC3eUra5oHKdMgUuPg//dru1RrlFkUptE7S16tsMSKrZ3a+iB+cqwEJni/s3sVJ0swpbDuvSW1a/bbeH9TNXL1tGuLf3XjhTM/PF1kAXnr2EM6WletK+yR6ai8fpll8VTtdXniDpH1+/xhjdl1FL9H49y19uPSGJ/GdzQcV83b0iBzniFW9C1KePaLXfqdL/yyJR0/7/dchy54s0s8cwpbjwX16PXaXnPTH80xUBpd09OsBodNfL8/1u8HwbPh431/eR+Wj5+5l+x9r/BzcMFZmcPdasZrvOW3nsGss5GCYPv0BLIqlGo1eR+vKfiHxtbQoCwmNSe7qz5U+cQFU6C21S8mKn0rxIaEvm7len9WqdrtWL3tBzak49dMzy7XsrhVYXr1ePXNqhf6sWexRbCd0QlQspbDr+fmaII59DjQEZmRJimfA9S8QO0ggrUdv5MFIKIdRIhXcc9u25VTKtXZQ8QLX7XbsjuuWna7TdYPgrKprg0Rc0SsWTASwXfUu76j3DWAyJ6AkXs05l4POhSzJAmWpiOxShkoUUnkJMKXDvuPWKiYn8TwCRdiMkzCNoDSfzfMCmXz97xgI89xKOJ4nTKAoP4WfJrn/raiH9AmJcuAqo1OQPYUDl1G5SOfztKvbaRfwQRoSddhkcQUjeM1k99P7zKhh2QzMJi/M7YL7ZssPIQ4AmF/wM/dLs4kXZmQrenHByjtDqkqraO8ClRalNMvSvKGeUkwm4U3btDxzCDiVsvcySp6BmhsI81s3zob1XuSNfZdfKmZ0KJCAWI6fli+/8dwYAlfPjZ48PqvvvmV2Qsq6CViJQ7Z2JF8livGXDxfsY+Unzdfyb5mw8L1dB7C24sg85RtDEDpVK3W/vHwyGziRsEQKYsK2wQ8BHAq+a9wUecNFyGl6SgV8/kVTStfUEcZJSkWvo+eGbfXNeYqXOfjvTh9gcoV/u7JX/NMr+/6yP5Q6GCN940v+29kg+bhgkLs4ybk09ZV8fcrgdLql9m8EDwu+Z30l+LuZtD6YP1q2arp/Hlp/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyjyjNrdeIVgq9DKEDZQjlMi9HxtltDYmdiZ02zNcfOyWlLYUDR6pUeWd77bUvXvYxR0nseD7nkAnCqBYMuvo/ruNAq2lFRrMFbaPu1mdGO8JNA5Blo0Zj5uJ2W9cCznMIKBeIiq7uWLZr2Jb8XduW17C9erNmt63funYDGZfQ0qVm6VqRxJR7ZdiunmfUY4gT7lGUAPcE9kL//KcnPT1UcdJ7x2uWZcCstxAi9UwT1yLAEMe4hlliHps7PscR90Iyp0jkGbzEjHhXf9m7Wq1qK7fGsrnpWJZlWh1T+kSczL/rvW/VZogCOmPrdR9RRglGMfmLFKlzEAsWaX48ZxkRi+QdaNu0LQVtQIENbNfpd918DVCy+yTSDsmMI4MvkF2BXcEMMqAYtOlV0NW/f66D673XGaJ8xrKE762/RgnoEmKWQmTwKrOK3ecRD5SrdwzYCyiOc06WcKHGJEUYuHaZwYwUPwmXwxdxrWy/VvBqwgB/pSXH5jZPSds8UJkBmQMX/6df271ao9ygOIcevfjRvh3FAM7psHMamvbf4ia9jS8fxvfdksK285rUptUv6/1B3czVyyZy9+zSx2IQxe3Lm4uz30OSdU6zhc/zFG7Ny2w2MScn/anDohTHyfjGDu5wiBt3j0/9e3YdPoyDo+BxMjkaW4OLb+m9ezS5ntqrx3hVnJ+Nz1e/jyA8EZ18NF3Goyc7xol9OrZu0/CRnk6XE7/usB9/+2Ewqx/5xa/bZ6cxLdq/puPl+Nt5OO/UHf9peObWH5p3/RPmd19z2s5h11jJQZg/PAIW1VKNRjDQRrJfSHwsLcpCImNWunqp0icugAq9p3YpWfFyKT4k8mQz1+thu2n32x235ff9htM5GVp1yx5ZvtXqdJpDp13pz5rFHsU+ozOiYimFXc/PxwRx4nGgEWTGkuV4AVz/AHGABNICeiUPBqMcrplS8M6g47on7qgxbDaGo2a/1bQbjm2NRi3brftSvS+YmNBJ5s8EZLvq7e6o9xVgkhJQEq/mnMtB50KW5A9a5iK2a0tUo5DLSyBTOuw59XbD5CRJY1CEzYRFeQy1dJGWBTL5+t8xEOallXCcskyguDyF7ya5/62qh/SJiHLgKqMTkD2FA5eRW6XzJu36wUurgvfziKjDJosrMoLXTHY/vc6MGpbNwGzywtyuuG+2fBHiAID5AT9zvzSbeNGSbEWvLlh5Z0hV6VXt/YNqf2r5cpmXDW0pxcwkvGmbVssMAedS9p6v2RNQcwNhfurG2bDei7yx7/LLxYKGAglI5Php5fITz40QuHpuBPL4FJ99y+yElHUTUIhDtn4sXyWK8YcPF+xh5SfNl/JvxbLotV0HsLbiyDzlG0MQOlcrdb88vzMbmElYIgWRZdvghwAOBd81boq84SLkND3kAt7/oiml6+oIY5ZTEQz00rCtviVP8ZyC9+r0BqZU+Jcru+DvXtl35z9DqYMJ0je+5L+dDVKOCwa5i5OSS1cv5OtTBqfzLbV/IXhY8FvWR4K/m0nvjfmtZaum++eh9y8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqowNpaWmhI8xw3aLcBN37eF7OxDSFaEkwSaHy609SLAKiR88MM0xWV771rUu+5FLARVwKGkJgLgmjRq9dM/+JHCdCZTcqIPfRK7i+4xeqlcgqIDuEyCrByAs90+gJkeAeFRJSWTNLlu0UbEv97mwrKNuBWyk6rve3afzGXCho5VK0TCNdxFQEWdiamXAaMCiICChcYBFIFEwbg36gPAOYczLrl1uWWUBen0u5DABAxRAjHMeoiNgCXIIDn8tQBFMyo1AmHL/FDEXNfNu7Xq+La6fI+AyULMsCVhUon1CQ2blZP8s347BHI7ZdtyBllCAYkw3UpAZYzlloNOIZ40TOF59A28C2NHQBp0iVz6XnJngPkLH7JtIBSS5gQcyhnYNNcIQ5pggb95NezTz/Xge3e+84pCJifCGO1j+jhOkKx2yJw4LIM8vZfR/xRLnqlxgFPYriRJAVHuoxWUKEhTHmOCJpnwg1fKEwsvYbqcgnDKOftOQS7PNUtMGJyrTJDAv5f/q136stym8YJ7j+sBw6nesxBs7qvn/x3N1Mn9LUjx6bLauWUdh33pLatfptfTyou7l620TTwXV3PSCpfXd1FceNF3cQ3jjX5atVwlUhgTe5Aavnhv3Q/3WRDtreMPQ3UfxUcq3F7c2GhxvW7sxuxvardY3OmolnT0e3FyK5YI1pOpajyYvvlCZ/2J/mdPzsW48P4vZ1fOsg2SJzd3MXjbz+Vfo0sx9uPOuq0/eGHK15ue8L++zXg4QPaGRfE7uyenwaeuC+9p7Tfg6HxlwOpsnjE0YyX+rR6LWNruoXlF9Li7aQsBBlrsFS65OQmEqzrndpWQkSJT4kDFQzt+tOxbNblarjN+12uVRtdizXsrtWw/KrVa9TquT6s2VxRLHFaER0LK2w2/n5miBaBALTEPPCiiVojoX5BWIbSmj06EQdDEYFvmNKwZ2SV/VafrPbcctuudlQjFuu1fYdz+/6nW7FNIZMjuiINyKJ+aF6OwfqPcGILAnWEq/nXKhBF1KV5AWuEhnbxRUsUpyoS4BrHQ5KbqUMBFksY6wJgwULkxgXl/NlViAgtv+lAkQisxKBloxLGGen8NMkj7/l9VA+IdEOQmfUxKqn+MRl5OTpfEjbPXlp5fCNJCT6sKniSk7Qlsnhp/eZ0cOyG5hdXkjYOffdlh9CnAAAX/ADx6XZxQtXZC96fsGqO0OpSj1v7wssvhST1SrJGuprxeQKHtjA8sEUo0TJ3usde8YU7CDAt26cHeujyDv7Ib9EzulUQokXavyMbPmN58YUC/3c6Knjk373LXMQUtVN4lSesrVi9SrRjL98uKAAaT9lHqu/NePhe7tOYO3FUXmqN4YkdKZX+n55/WQ2EFOwRAki4/vgpwBOBT807oq84yLVND0mEn/+xdBKVzMhQiyhstc2M8O++mY85esSB+9OH2AyhX+7slPx6ZX916A/VTq4gObOl/y3c4Fk44Kw2iVIxqVmpur1qYLT2Z7avxE8KfgN3/pK8A8zqX8wf7Ts1fT4PNT/BQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065142</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065144</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065146</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937A83529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937ACB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937B1E529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="9a25b3f6-6b0c-49b0-8ad9-5cd56bcb4d6a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937B84529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C8937C6A529BE0401F0A07996E28:1F48A14F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937B72529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937B72529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937B72529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937B84529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937BCC529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937C1F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937B84529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937BCC529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937C1F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU/I6FH3/fkWnPjKlLVRaOsIMFNSOePkERX05E9INBNu0NCkXf/1JikVA9OiZYYbJ7s7aa1+ykjOGorDithiDlJOYKn6nof4DCMCqnQbaqIYqmmXBWBs5tq05CI0rwbiKajVTVXzGMvAp44jyhloxzKpmGuI3MA331HRPjbJZtV9U5RFSJqCFS9lQlVUUUubmYRtqllI3Rowwl6IImMux229d91zh6aKCk9o827DMA6bNKeeJq+u4HACGMMRlHEf6mb7ncxYwt08mFPEshfeYAWuo73uXy2V5WS3H6USvGIahG3Vd+ASMTE7U5p9iMwQ+HcebtYdoTAlGIXlDktQ18GkcKK1wEqeET6MvoE3dNCS0BiusYdOiJ6r+ESBn90OkPZIpQxqbIrMAu4cxpEAxKA/3fkM9+VkHN3sHKaJsHKcRO1j/jhLQBYRxAoHGiswKdj9HPFKu5hlg16c4zBhZwI0ckwRhYMpdCmOy6hEmhi9gSt5+ZcWKCQP8m5ac6bs8BW39SGU6ZAKM/59+7fZqg/KIwgya87X32nts+wNvmPwlw9nTrN31R15yU3pt5BR2nTektq1+Xx8O6nau3jfB28MIxx7XjXaCZ3e0ZHrtwaN5FcTXCen9jbzZBdKH1SHvzeuJ2e9c0nB4cX3R9UtVfGmYzsPIntO32iMu3fb+lAY9XGOvVw9PLcPpTFZ+dLWc0eH0Ppte3l2/dV9mN/fG+sVOEAzOX24mFr6sVEvPs/5VaZYOzSHN6o5Tv7waR8nyz+p5tu50u+R5HTqjlrlEDm585LSbw76xkIN+NpoB5sVSjobfUc5FvxD/XlqkhQTaOHd1E6lPjAPlalPukrLiZkJ8SOCKZm7WXadmek69arcd67RSb3cNyzDPjZZh1+u1bsUp9GfD4oCiF9MxkbGkwm7m53uCOHIZ0ABSbRFneApM/QaxgzhSfHovDkZMGQxioeCG3TYsyzNNy26fV+qe1araNc82qm2vKuh6qnIT81t6m7bGHNJ99a7uqfc9YJIQkBIv55yJQWdclGSOFhkPzfIClSlk4hJIpQ67Fcs51RmJkhAkYT2KgyyEcjJN8gLpbPNf0RBmuZUwnMQpR2F+Cr9M8vBbUQ/hExDpwGRGbRA9hSOXkVWk83Xatd20C/hWFhB52ERxeUrwhsn+p4+ZkcOyHZhtXpiZBfftll9CHAHQv+GnH5ZmGy9YkJ3oxQUr7gyhKs2ivXNUnpezxSLLG2pLxUwFvG7qhq33AWdC9taD+BWovoXQf3TjbFkfRN7a9/llfEr7HHGIxPgp+fIHz40+MPnc8MXxWf30LbMXUtSNw4ofs3mheJVIxt8+XLCLpZ8w34m/ZZwGH+06grUTR+Qp3hic0Ilcyftl/cVs4FjAEiGIcboLfgzgWPB947bIWy5cTNMo4/D1F0UqXUNFGMcZ5X5HzQ276pvz5OsE3A+nTzC5wr9f2Sv25ZX9dN3rCx2MkLr1Jf/trJF8XDCIXYzkXBrqSrw+RXA62VH7d4LHBd+ufCf4+5k0P5k/W3Zqengemv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FH3/fkWnPjKlLVRaOsIMFNSOePkERX05E9INBNu0NCkXf/1JikVA9OiZYYbJ7s7aa1+ykjOGorDithiDlJOYKn6nof4DCMCqnQbaqIYqmmXBWBs5tq05CI0rwbiKajVTVXzGMvAp44jyhloxzKpmGuI3MA331HRPjbJZtV9U5RFSJqCFS9lQlVUUUubmYRtqllI3Rowwl6IImMux229d91zh6aKCk9o827DMA6bNKeeJq+u4HACGMMRlHEf6mb7ncxYwt08mFPEshfeYAWuo73uXy2V5WS3H6USvGIahG3Vd+ASMTE7U5p9iMwQ+HcebtYdoTAlGIXlDktQ18GkcKK1wEqeET6MvoE3dNCS0BiusYdOiJ6r+ESBn90OkPZIpQxqbIrMAu4cxpEAxKA/3fkM9+VkHN3sHKaJsHKcRO1j/jhLQBYRxAoHGiswKdj9HPFKu5hlg16c4zBhZwI0ckwRhYMpdCmOy6hEmhi9gSt5+ZcWKCQP8m5ac6bs8BW39SGU6ZAKM/59+7fZqg/KIwgya87X32nts+wNvmPwlw9nTrN31R15yU3pt5BR2nTektq1+Xx8O6nau3jfB28MIxx7XjXaCZ3e0ZHrtwaN5FcTXCen9jbzZBdKH1SHvzeuJ2e9c0nB4cX3R9UtVfGmYzsPIntO32iMu3fb+lAY9XGOvVw9PLcPpTFZ+dLWc0eH0Ppte3l2/dV9mN/fG+sVOEAzOX24mFr6sVEvPs/5VaZYOzSHN6o5Tv7waR8nyz+p5tu50u+R5HTqjlrlEDm585LSbw76xkIN+NpoB5sVSjobfUc5FvxD/XlqkhQTaOHd1E6lPjAPlalPukrLiZkJ8SOCKZm7WXadmek69arcd67RSb3cNyzDPjZZh1+u1bsUp9GfD4oCiF9MxkbGkwm7m53uCOHIZ0ABSbRFneApM/QaxgzhSfHovDkZMGQxioeCG3TYsyzNNy26fV+qe1araNc82qm2vKuh6qnIT81t6m7bGHNJ99a7uqfc9YJIQkBIv55yJQWdclGSOFhkPzfIClSlk4hJIpQ67Fcs51RmJkhAkYT2KgyyEcjJN8gLpbPNf0RBmuZUwnMQpR2F+Cr9M8vBbUQ/hExDpwGRGbRA9hSOXkVWk83Xatd20C/hWFhB52ERxeUrwhsn+p4+ZkcOyHZhtXpiZBfftll9CHAHQv+GnH5ZmGy9YkJ3oxQUr7gyhKs2ivXNUnpezxSLLG2pLxUwFvG7qhq33AWdC9taD+BWovoXQf3TjbFkfRN7a9/llfEr7HHGIxPgp+fIHz40+MPnc8MXxWf30LbMXUtSNw4ofs3mheJVIxt8+XLCLpZ8w34m/ZZwGH+06grUTR+Qp3hic0Ilcyftl/cVs4FjAEiGIcboLfgzgWPB947bIWy5cTNMo4/D1F0UqXUNFGMcZ5X5HzQ276pvz5OsE3A+nTzC5wr9f2Sv25ZX9dN3rCx2MkLr1Jf/trJF8XDCIXYzkXBrqSrw+RXA62VH7d4LHBd+ufCf4+5k0P5k/W3Zqengemv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGljyPIhUsuKkhcZ5hpoQudTrcvK49zALeJHWwn0P76tUNDgdJuuxIS8snxd75z8WefC5TEbtgRArgkjBqjfsv8px54jXoT1SsehqhSx3O3gpo+VMCdezVke/WaE5jGSIgMRlRIRGXLdG2nVnFs9bt27LDhhA23GtRqd6ZxA1woaOVStU1jk8RUhEXYlplxGjIkiAgpSkCEEoezzuVFqDxDVHIy2+dblkVA3l5KmYaWhasRYIhjXMUssc6tA5/zSIQzsqBIZhyeY0aiZT7vXa/X1XWtyvjCcm3btuzAUj6RIIszs/2l3AzRiM7Zdt1DlFGCUUyekCZ1CXLJIqMTLxgncpm8Ae1Yjq2hK7DBFezU6ZlpvQQo2H0Q6YAkF6gilsgpwaYwBw4Ug/FrOmqZZx/r4HbvNUdUzBlPxNH6c5SA5hCzVEUTZWYlu48jnihX+xxwOKI4zgTJYazHJEUYhHHFYU42F0So4YuEUbTf2IhywgB/piXn1j5PRds6UZk+WYCQ/6df+73aotygOIN23uPcfXTZ7dX3nJF0tUST8ZPzrdlzWKugsO+8JbVr9fP6eFB3c/W86eHxhiQN/HCR4aeu7/ZHQe/35UW9mQ/8xsrL+gtr5t8+pUu2mfbzZnSLKfDFfEVrnWgC48u/rm6/2f61H+U/XO/L8E4w6oxtNK39nTfvk437a73YZFl69zuNYel+733t3DaGNxZ3komcXnmjDQsGP+nT7OHb/Vd+vUA/nwZNROswHn8RN82HibV2lg5aReR+0pXr1ktO+zkcGks5mGV/7gHLcqlHY9Q3hqpfSL4vLdpCosq8cA1TrU9CApVmW+/SshJmSnxIFKpmbtcDv+n0/KDmdXu9hht0B3bddoZ2x/aCoDlw/VJ/tiyOKPYYnRMdSyvsdn7eJ4iTUACNgFdyluElCPMdxD6SyBjRqToYjAq4ZkrBXb8R+K7nd/r+wPW6TqM3dNxG4AXd5tB1hkq9x0xO6IR35hL4oXrXDtR7CpikBLTE6zkXatCFVCVZoTyTsVPNUZVCpi4BrnU4dOt+wxIkUeOgCVsJi7IYqukyLQpkie2/kiMsCisROGVcorg4hW8mefytrIfyiYh2EDqjLqiewonLqF6m8yrt+slLq4TvZBHRh00VV3KCt0wOP73MjB6W3cDs8sLCKbnvtnwS4gSA9Q4/67g0u3hRTvailxesujOUqrTL9q5QdVXN8jwrGuppxeQK3nIs27NmgDMle4/X7AGotYOwPnTj7FgfRd7ZD/llcklnEklI1PgZxfIDz40ZCP3cGKnjs/noW+YgpKqbhI08ZevF6lWiGb/7cMEh1n7KfKX+1oxHL+06gbUXR+Wp3hiS0IVe6fvl8Y3ZwEzBEiWIjO+DnwI4FfzQuCvyjotU0/Qnk/D2F0MrXctEGLOMylHfLAz76lvwlI8phC9Or2AKhX++sjfizSv79vJipnQwQebOl/y3c4UU44JB7RKk4NIyN+r1qYLTxZ7aPxM8Lfie+57gH2bSfmV+bdmr6fF5aP8L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tq45nSC0WgI8xggbPxgiKibl/OhHQVsm0TTFIu/vqTFIuA6NEzwwyT1ZVvfeuSLzkVKE28oCUEcEkYNXrthvkPPnFiD3BkVcZx1fLx2LFQ1a9bzjg6QRi7sYdqptETIoMeFRJR2TA9xy1brqN+d64TVNygUik5jvtkGvfAhYJWLiXHNJZpQkWQh22YGacBQ4KIgKIURCBxMGxdXQbKM0AFJ7N5umaZB+TNqZSzwLZxKQIMSYJLmKX2qb3jcxqJYEgmFMmMw1vMSDTMt72LxaK0KJcYn9ie4zi2U7eVTyTI5NhsHhWbIerRmK3XIaKMEowS8oo0qSuQUxYZrWTCOJHT9BNo13YdDW3BElvY9emxab8HyNl9E2mHJBfIElPkFmC3EAMHisEY3fYa5vH3Orjee8cRFTHjqdhb/4wS0DkkbAaRJYrMCnbfRzxQruYp4KBHcZIJMoe+HpMZwiCMGw4xWV4SoYYvEkbefmMpigkD/JOWnNrbPBVt+0Bl2mQCQv6ffm33ao1yj5IMmiGurVzqUDl6mN2mtfroPFx1RufxY9pp5BS2ndekNq1+W+8P6mau3jbNvPPayWvv1fGiy3vPP+dMPPX704E7WNxm/uu93/IH4+yhH17Ez6PxffdmWl9601/LQbsSy/YJfv0tLhFbsFF9To7Kf3dG5cEFHvS98zK/m2fJhfuLpzfX2fBhvKqh8tWNCG1ydxWdhY/9wcMz6faWf/2ZdNBrNF84dFWrRwL8FZn/JkeLPq8uxRM8dsaPj+PWZa2PG+85beewayzkYJiN/wCWxVKPRq9tdFW/kPxaWrSFRFacuwYzrU9CApVmU+/SshJkSnxIFKhmrted2okb1urlauh2K179rOP4jtt1Wk61Xj/peLVCf9Ys9iiGjMZEx9IKu56frwniNBBAI+DWnGV4CsL8ArGNJDJ69FYdDEYF3DGl4H6nU3NDv9I9a7e6Yd1xztrtiudWwroXepWW0uE+k9f0mrdiCXxXvcs76n0LmMwIaInXcy7UoAupSvKC5plM3NIclShk6hLgWocDz69VbEHSWQKasJ2yKEugNJvO8gLZYv3vWQiL3EoEnjEuUZKfwk+T3P9W1EP5REQ7CJ3RGaiewoHLyC/S+ZC2f/DSKuBbWUT0YVPFlZzgNZPdT+8zo4dlMzCbvLBwC+6bLT+EOABgf8HP3i/NJl40J1vRiwtW3RlKVZpFe19Q6aWUzedZ3tCqVkyu4G3Xdqr2EHCmZG91x56B2hsI+1s3zob1XuSNfZdfJqd0KJGEVI2fkS+/8dwYgtDPjZ46PsvvvmV2Qqq6SVjKQ7YwUa8SzfjLhwsOsPZT5hv1t2A8em/XAaytOCpP9caQhE70St8vq09mAzMFS5QgMr4NfgjgUPBd46bIGy5STdM4k/D5F0MrXcNUJWQZlb22mRu21TfnKVczCN6dPsDkCv92ZS/Fp1f249XlUOlgisyNL/lvZ4vk44JB7RIk59Iwl+r1qYLTyZbavxE8KPhnVe8rwd/NpPnB/NGyVdP989D8Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065149</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065151</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065153</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937B85529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937BCD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937C20529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_FUNC_CLG_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="2c94c539-a988-48c8-a4cc-c306cf372755"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937C86529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E861C8937D18529BE0401F0A07996E28:2E6E1E39"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937C74529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937C74529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937C74529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937C86529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937CCE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937C86529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937CCE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3icx47xjYvxBGaMuZSWhDYQkvbljCJvQKmRHEkmJF9/JBMToCQnPTPMMNreWnvti5Z0LtAq9cJICOCSMGoMuy3zH6fuO8GdF1g4SHyr6jdcC3lwZ4EPtWYjSDBgxzSGQuQwpEIiKlum57i+5TrqN3WdsOaGtUbF9fxfpjEDLhS0cqmoXZtVSkVYhG2ZOachQ4KIkKIViFDicBJdjELlGaKSk9k+37IsAvL2UsostG1cSQBDmuIKZiv73D7wOU9EOCELimTO4SVmIlrmy97Hx8fKo19hfGF7juPYTtNWPokgizOz/ancDMmQztl2HSPKKMEoJc9Ik7oAuWSJEaULxolcrt6Adm3X0dAWbLCF3So9M+3XAAW7DyIdkOQCWWKJ3BLsCubAgWIwrq+GLfPsYx3c7p1yRMWc8ZU4Wv8dJaBrSFkGiSXKzEp2H0c8Ua72OeBwSHGaC7KGSz0mGcIgjO8c5mQzIkINXyKMov3GRpQTBvhvWnJu7/NUtO0TlemSBQj5f/q136stygylObSj+KY7HtVdh9PgKWdTL4bxzeQbj79ErYLCvvOW1K7VL+vjQd3N1cumcXL9MHJ+Pcc1P248DgZV8bnHR6Or6u3N5TCyg/vN4HL8m2Wr5Nnp/HToF5ong/VXX9Z/JOzef+iMhZhcOPTeu5l8It2YD6v3Xzux7V96N9ObztMsmrvdzyO7dy1+ZmK+gcn62r29v5g12ey2Xp/FWdCnozSRtw+zPvsWPzcv5l347MpPAyL60x/XIu8MFo2nyQD1f7Zec9rP4dBYysEkv7sHLMulHo1h1+irfiH5vrRoC0mseeEaZlqfhAQqzbbepWUlzJX4kCRUzdyue0HdjYOm34iDes1rdnpO1XH7TuQ0ms16zwtK/dmyOKIYMzonOpZW2O38vE8Qr0IBNAFurVmOlyDMdxC7SCJjSK/UwWBUwJQpBa9We71q0I97NSdyu17UbKpTH0XNfs31u7VGZBqXTI7pmEdzCfxQvf0D9b4CTDICWuL1nAs16EKqkjygdS5Tt7JGFQq5ugS41uHQqwY1W5BVloImbK9YkqdQyZZZUSBbbP89C2FRWInAGeMSpcUpfDPJ429lPZRPQrSD0Bl1QPUUTlxG1TKdt9Ou76ddwkd5QvRhU8WVnOAtk8NPrzOjh2U3MLu8sHBL7rstfwlxAsB+h599XJpdvGRN9qKXF6y6M5SqtMv2PqDKQyVfr/OioQ2tmFzB267tNOwJ4FzJ3tOU/QZq7yDsD904O9ZHkXf2Q365XNKJRBJWavyMYvmB58YEhH5uDNXx2Xz0LXMQUtVNwkaessWpepVoxu8+XHCItZ8yf1d/j4wnr+06gbUXR+Wp3hiS0IVe6fvl6Y3ZwEzBEiWIjO+DnwI4FfzQuCvyjotU03SXS3j7i6GVrmUijFlO5bBrFoZ99S14yqcMwlenP2AKhX+5sjfizSv79mI0UTq4QubOl/y3s0WKccGgdglScGmZG/X6VMHpYk/tXwieFvxG9T3BP8yk/Yf5T8teTY/PQ/tf</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3icx47xjYvxBGaMuZSWhDYQkvbljCJvQKmRHEkmJF9/JBMToCQnPTPMMNreWnvti5Z0LtAq9cJICOCSMGoMuy3zH6fuO8GdF1g4SHyr6jdcC3lwZ4EPtWYjSDBgxzSGQuQwpEIiKlum57i+5TrqN3WdsOaGtUbF9fxfpjEDLhS0cqmoXZtVSkVYhG2ZOachQ4KIkKIViFDicBJdjELlGaKSk9k+37IsAvL2UsostG1cSQBDmuIKZiv73D7wOU9EOCELimTO4SVmIlrmy97Hx8fKo19hfGF7juPYTtNWPokgizOz/ancDMmQztl2HSPKKMEoJc9Ik7oAuWSJEaULxolcrt6Adm3X0dAWbLCF3So9M+3XAAW7DyIdkOQCWWKJ3BLsCubAgWIwrq+GLfPsYx3c7p1yRMWc8ZU4Wv8dJaBrSFkGiSXKzEp2H0c8Ua72OeBwSHGaC7KGSz0mGcIgjO8c5mQzIkINXyKMov3GRpQTBvhvWnJu7/NUtO0TlemSBQj5f/q136stygylObSj+KY7HtVdh9PgKWdTL4bxzeQbj79ErYLCvvOW1K7VL+vjQd3N1cumcXL9MHJ+Pcc1P248DgZV8bnHR6Or6u3N5TCyg/vN4HL8m2Wr5Nnp/HToF5ong/VXX9Z/JOzef+iMhZhcOPTeu5l8It2YD6v3Xzux7V96N9ObztMsmrvdzyO7dy1+ZmK+gcn62r29v5g12ey2Xp/FWdCnozSRtw+zPvsWPzcv5l347MpPAyL60x/XIu8MFo2nyQD1f7Zec9rP4dBYysEkv7sHLMulHo1h1+irfiH5vrRoC0mseeEaZlqfhAQqzbbepWUlzJX4kCRUzdyue0HdjYOm34iDes1rdnpO1XH7TuQ0ms16zwtK/dmyOKIYMzonOpZW2O38vE8Qr0IBNAFurVmOlyDMdxC7SCJjSK/UwWBUwJQpBa9We71q0I97NSdyu17UbKpTH0XNfs31u7VGZBqXTI7pmEdzCfxQvf0D9b4CTDICWuL1nAs16EKqkjygdS5Tt7JGFQq5ugS41uHQqwY1W5BVloImbK9YkqdQyZZZUSBbbP89C2FRWInAGeMSpcUpfDPJ429lPZRPQrSD0Bl1QPUUTlxG1TKdt9Ou76ddwkd5QvRhU8WVnOAtk8NPrzOjh2U3MLu8sHBL7rstfwlxAsB+h599XJpdvGRN9qKXF6y6M5SqtMv2PqDKQyVfr/OioQ2tmFzB267tNOwJ4FzJ3tOU/QZq7yDsD904O9ZHkXf2Q365XNKJRBJWavyMYvmB58YEhH5uDNXx2Xz0LXMQUtVNwkaessWpepVoxu8+XHCItZ8yf1d/j4wnr+06gbUXR+Wp3hiS0IVe6fvl6Y3ZwEzBEiWIjO+DnwI4FfzQuCvyjotU03SXS3j7i6GVrmUijFlO5bBrFoZ99S14yqcMwlenP2AKhX+5sjfizSv79mI0UTq4QubOl/y3s0WKccGgdglScGmZG/X6VMHpYk/tXwieFvxG9T3BP8yk/Yf5T8teTY/PQ/tf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxVy5xIVJEphTnovUM6Z8zJynR3waWLT2CHQrx87NBQo7bQjISHvbK+99sXLPuUoTZygyzlkgjCqhedt/R9Aju0hNzKcyMWGV3eR0axbsdGwoRFLexw5tq6FnOcQUi4QFW3dsWzXsC35G9tW4NuB36q1rMZvXZtAxiW0dKlZurZME8qDMmxbzzMaMMQJDyhKgQcCB6Pu9VUgPQNUcdI7p2uWZcCsMxNiHpgmrkWAIUlwDbPUPDV3fE4jHozIlCKRZ/AaM+Jt/XVvURS1wq2xbGo6lmWZVsuUPhEn02O9c1RthiikMVuve4gySjBKyAtSpK5BzFikdZMpy4iYpR9A26ZtKWgDltjAtkePdfMtQMnui0g7JDOODD5DdgU2hBgyoBi0h2HY1o+/1sH13nGGKI9ZlvK99fcoAV1AwuYQGbzKrGL3dcQD5eqcAg5CipOckwXcqDGZIwxcu8sgJssrwuXwRVwr268teTVhgL/TklNzm6ekbR6ozDmZAhf/p1/bvVqjTFCSQ4eNix56KZwT/uPyz93J07L++NBF3bhwmu2SwrbzmtSm1a/r/UHdzNXrpkGR1QlCzLqdm1PeEP7ZT/M29630MZyd3IXn3VgI1n/5Wb8vFm78YPOb+smvVWs4KAa/byYXN/0+c1/6N/GltxofFZ4j3Cv/ZGDdh3U36q1SGe2vIX0y7aGdNYuQ3+PF5Kl5n1yi1Wj8Y3Hme7wbWbl9ged3MSSNq4nfvBhP/MniKBmgaZ+6q6veSf15PBj447/bbzlt57BrrORglD/+ASyqpRqN8FwbyH4h8bm0KAuJjLh0DeZKn7gAKvSO2qVkJcil+JAokM1cr/vNut1rttxGr9f3ndZZ3/Ise2B1rUarVe87zUp/1iz2KPYYjYmKpRR2PT+fE8RpwIFGkBkLluMZcP0TxHMkkBbSoTwYjHIYM6ngZ5bV95pus97v9ru+41tOr+5I7lbrzGnZrqdrN0zc0ttMth+yXfV2d9R7CJjMCSiJV3PO5aBzIUvyjBa5SOzaAtUo5PISyJQOB47X9E1O0nkCirCZsihPoDafzcsCmXz97xgI89JKOJ6zTKCkPIUfJrn/raqH9ImIcuAqozOQPYUDl5FXpfMube/gpVXBd/OIqMMmiysygtdMdj+9zYwals3AbPLC3K64b7Z8E+IAgPkJP3O/NJt40YJsRa8uWHlnSFXpVO19RrXnWr5Y5GVDG0oxMwlv2qbVMEeAcyl7qzF7AmpuIMwv3Tgb1nuRN/ZdfrmY0ZFAAlI5flq5/MJzYwRcPTdCeXyWX33L7ISUdROwFIdsvUS+ShTjTx8uOMDKT5rv5F/BsuitXQewtuLIPOUbQxA6VSt1v6w+mA3MJCyRgsiybfBDAIeC7xo3Rd5wEXKaHnMBH3/RlNK1dYQxy6kIz/XSsK2+JU+xmkPw5vQOplT41yt7yT+8sn9dX42kDqZI3/iS/3Y2SDkuGOQuTkoubX0pX58yOJ1uqf0rwcOC3/A+E/zdTDrvzO8tWzXdPw+dfwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065156</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065158</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937C87529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937CCF529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="dc9356f8-07bb-465d-99eb-ce6a41c3f1e6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937D34529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937E13529BE0401F0A07996E28:5FC0F229"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937D22529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937D22529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937D22529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937D34529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937D7C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937DC8529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937D34529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937D7C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937DC8529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgOOEaFaRw62QK7Uwpozl9OTKOA6bBDrHDpV8/diAUKO1pjxSEvLO99tqXLPtKoEXseL4QJJWUMyPoNs1/nbCC61VnYtXK1cgq4wm0JqgWWo0onNTKGNaqZGIagRAZCZiQiMmm6djQtaCtngdoexXHs2GpAsuPpvGbpEJBK5eSbRqbRcyEl4dtmlnKPI4EFR5DCyI8ib2RPxx4ytNDBSezdbVjmQdMWzMpEw8AXAoJJnGMS5gvwBU48bkKhTeiU4ZklpJ9zFA0zf3e9XpdWrslnk6BY9s2sBtA+YSCTr+arS/FZhIGLOK7dQcxzihGMX1GmtSQyBkPDT+e8pTK2eINaAigraEtssEWhmX21QQvAXJ2H0Q6IZkKZIkZggXYPYlIShgmxvg+aJpfP9bB3d6HFDER8XQhztafo0TYisQ8IaEliswKdh9HvFCu1hXBXsBwnAm6Ird6TBKEiTB+piSimwEVavhCYeTtNzaimDCCP9OSK3DMU9EGFyrTpVMi5P/p13Gvdii/UZyRlj9JJwCyUYN/+z39g8aP4Xacdarxt5thM6dw7LwjdWj1fn0+qIe52m/6Ob+RA3fV6P/Kbr7Pw23t2ln2gjH88Q93nSEH6fp5hJd/8JM9ROVwc3t/PZl3rh8ATp/9p2EUzMfXvvr9KtcGzheYjO9Fb7ysg9vZeM02g+VkKSLm99pDZndkdDMDt2I2dPrfn6bxU+Iuf4zrcF7Z3D262baMkoYddWtwFbMHH38hd/F0iufb9U09lMGWC4ybLzkd53BqLORglE3mBMtiqUcj6Bp91S8k35cWbaGhFeWuXqL1SUjCpNnSu7SseJkSHxp6qpm7da9ehZ16w6113XLFabR7dtmGfdu3a41GtefUC/3ZsTij2OEsojqWVtjd/LxPEC88QVhIUmvFMzwjwnwHsYskMgJ2rz4MzgR54ErB277b8O1Kpe+67Ypdr/Vhu+10emUIXduuNvqmccvlHbtL/UiS9FS93RP1vieYJpRoiddzLtSgC6lKskSrTMawtEIlRjJ1CKRahz2nXK8AQRdJTDRhsOBhFpNSMkvyAgGx+3cshEVupQInPJUozr/CN5M8f1fUQ/mEVDsInVGbqJ6SV4cRVM8+nbfTrh6nXcD7WUj1x6aKK1OKd0xOX73MjB6Ww8Ac8sICFtwPWz4JcQEAvMMPnJfmEC9c0aPoxQGrzgylKq2ivUtUWpay1SrLG1rTipkqeACBXQMjgjMle9sH/kQYOECAD504B9ZnkQ/2U36ZnLGRRJIs1PgZ+fID140REfq6EajPZ/PRu8xJSFU3STbykq0Tq1uJZvzuxQV7WPsp80/1t+Zp+NKuC1hHcVSe6o4hKZvqlT5ftm/MBuYKlipB5Okx+CWAS8FPjYciH7hINU2TTJK33xha6ZomwphnTAZdMzccq2/OU24T4r04vYLJFX5/ZG/Em0f2n+FgpHRwgcyDL/1vZ4vm44KJ2iVozqVpbtTtUwVn0yO13xO8LPiO857gn2bSemV+bTmq6fn30PoL</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgOOEaFaRw62QK7Uwpozl9OTKOA6bBDrHDpV8/diAUKO1pjxSEvLO99tqXLPtKoEXseL4QJJWUMyPoNs1/nbCC61VnYtXK1cgq4wm0JqgWWo0onNTKGNaqZGIagRAZCZiQiMmm6djQtaCtngdoexXHs2GpAsuPpvGbpEJBK5eSbRqbRcyEl4dtmlnKPI4EFR5DCyI8ib2RPxx4ytNDBSezdbVjmQdMWzMpEw8AXAoJJnGMS5gvwBU48bkKhTeiU4ZklpJ9zFA0zf3e9XpdWrslnk6BY9s2sBtA+YSCTr+arS/FZhIGLOK7dQcxzihGMX1GmtSQyBkPDT+e8pTK2eINaAigraEtssEWhmX21QQvAXJ2H0Q6IZkKZIkZggXYPYlIShgmxvg+aJpfP9bB3d6HFDER8XQhztafo0TYisQ8IaEliswKdh9HvFCu1hXBXsBwnAm6Ird6TBKEiTB+piSimwEVavhCYeTtNzaimDCCP9OSK3DMU9EGFyrTpVMi5P/p13Gvdii/UZyRlj9JJwCyUYN/+z39g8aP4Xacdarxt5thM6dw7LwjdWj1fn0+qIe52m/6Ob+RA3fV6P/Kbr7Pw23t2ln2gjH88Q93nSEH6fp5hJd/8JM9ROVwc3t/PZl3rh8ATp/9p2EUzMfXvvr9KtcGzheYjO9Fb7ysg9vZeM02g+VkKSLm99pDZndkdDMDt2I2dPrfn6bxU+Iuf4zrcF7Z3D262baMkoYddWtwFbMHH38hd/F0iufb9U09lMGWC4ybLzkd53BqLORglE3mBMtiqUcj6Bp91S8k35cWbaGhFeWuXqL1SUjCpNnSu7SseJkSHxp6qpm7da9ehZ16w6113XLFabR7dtmGfdu3a41GtefUC/3ZsTij2OEsojqWVtjd/LxPEC88QVhIUmvFMzwjwnwHsYskMgJ2rz4MzgR54ErB277b8O1Kpe+67Ypdr/Vhu+10emUIXduuNvqmccvlHbtL/UiS9FS93RP1vieYJpRoiddzLtSgC6lKskSrTMawtEIlRjJ1CKRahz2nXK8AQRdJTDRhsOBhFpNSMkvyAgGx+3cshEVupQInPJUozr/CN5M8f1fUQ/mEVDsInVGbqJ6SV4cRVM8+nbfTrh6nXcD7WUj1x6aKK1OKd0xOX73MjB6Ww8Ac8sICFtwPWz4JcQEAvMMPnJfmEC9c0aPoxQGrzgylKq2ivUtUWpay1SrLG1rTipkqeACBXQMjgjMle9sH/kQYOECAD504B9ZnkQ/2U36ZnLGRRJIs1PgZ+fID140REfq6EajPZ/PRu8xJSFU3STbykq0Tq1uJZvzuxQV7WPsp80/1t+Zp+NKuC1hHcVSe6o4hKZvqlT5ftm/MBuYKlipB5Okx+CWAS8FPjYciH7hINU2TTJK33xha6ZomwphnTAZdMzccq2/OU24T4r04vYLJFX5/ZG/Em0f2n+FgpHRwgcyDL/1vZ4vm44KJ2iVozqVpbtTtUwVn0yO13xO8LPiO857gn2bSemV+bTmq6fn30PoL</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0Tp4yjEuUAgKkgZKD3pUHqhlxlejlzHgNvEBtvhMl8/diAUKO3pHAkJeWd77bUvXvaZgFnqhpEQmEvCqBF3mua/XrVRS579wELI9SzfQ4FVB6huYfTs4lENwUZSN41YiBzHVEhIZdN0geNZDlC/eweEVTcEbiUAtaFpPGIuFLRyqQDTWGYpFWERtmnmnIYMCiJCCjMsQonCQXTVC5VnCEtOZutszbIIyFsTKaehbaNKghFOU1RBLLPP7D2fs0SEAzKmUOYcb2Imomlu9i4Wi8rCqzA+tl0AgA0atvJJBBmfmq2TcjNOYjpi63UbUkYJgin5DTWpKywnLDGidMw4kZPsA2jHdoCGtvASWcjx6alpvwUo2H0RaY8kF9ASE+iUYHd4hDmmCBsPd3HTPP1aB9d77zmkYsR4Jg7Wf0cJ0zlO2RQnligzK9l9HfFIuVpnGIUxRWkuyBz39ZhMIcLCuOF4RJY9ItTwJcIo2m8sRTlhGP1NS87sXZ6Ktn2kMh0yxkL+n37t9mqN8gjTHLfmzP85+ech8K6r5HZBn6op6D093T+RS79ZUNh1XpPatnqzPhzU7VxtNv26vbgYrpKRl6S/lvVbGv+o8fl5dehFERj4M/598vz6moPZb+gT56Zay/q+17urp9ElvLjpiShuX9N49kzTvgtPEnQ1Wo0XNy93gT8O+gERV/hxdpnU4ZC95NlwBt0YjKfX89uHEeoOVwHoZ/Hjzxn4xpPF4+W3TkAuO6uLCzH9wU5eu7aYXwfRrNbndPht0pNx8y2n3Rz2jaUcDPLnF4xkudSjEXeMruoXlJ9Li7aQxBoVruFU65OQmEqzpXdpWQlzJT4kCVUz1+vzes1p1xte0AnaVbfx/Rz4wOmCCASNRu3crZf6s2ZxQLHN6IjoWFph1/PzOUGUhQLTBHNrznI0wcL8BLEDJTRieqcOBqMC3zOl4K7XrZ+3a9Wo3Q1qiuh55FRB1wWeX40CPwpMo8/kNb3m0Uhivq/e3p5632FEpgRriddzLtSgC6lKMoPzXKZOZQ4rFOfqEuBah0PXr1dtQbJpijVhO2NJnuLKdDItCmSL9b9rQSQKKxFoyriEaXEKP0zy8FtZD+WTEO0gdEbfseopfncZOSqjTTofp13bTbuEj/KE6MOmiis5QWsm+5/eZkYPy3Zgtnkh4ZTct1v+EuIIgP0JP/uwNNt4yZzsRC8vWHVnKFVple2dwcqsks/nedHQQCsmV/C2Y4PAHmCUK9lb3bNXTO0thP2lG2fL+iDy1r7PL5cTOpBQ4kyNn1Esv/DcGGChnxuxOj7Lr75l9kKqukm8lMds7VS9SjTjTx8uKETaT5lv1N+C8eStXUewduKoPNUbQxI61it9v6w+mA3EFCxRgsj4LvgxgGPB943bIm+5SDVNz7nEH38xtNI1TYgQy6mMO2Zh2FXfgqdcTXH45vQOplD4zZW9FB9e2T+vegOlgxk0t77kv50tUowLwmqXIAWXprlUr08VnI531H5D8Ljgu+5ngr+fSeud+b1lp6aH56H1Bw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBSbgmKkhcQoeZ0gvQy+7Lyjgn4JnETm0HaH/9OqGhQGm3sxIS8snxd75z8WefSZzErt+VEoSinBmjQdv8x/GqNRKFkQVeNLdqXiO0vAYmVtMmrahR81pOY24aIykzGDGpMFNt07WdquXY+jdzbL/u+na94jabf5vGHQipobVLxTaNTRIz6Rdh22YmmM+xpNJnOAHpK+JPu+MLX3v6uORkds62LIuAorNUKvURIpUQCMQxqRCeoDN04HMWSn9KFwyrTMBLzFC2zZe96/W6sq5WuFgg17ZtZHtI+4SSLr6anS/lZghHLOLbdR8zzijBMX3GOakxqCUPjW684IKqZfIOtIMcO4e2YEMs4tTYVxO9BijYfRLpgKSQ2JJL7JRgE4hAACNg3E5GbfPr5zq43TsTmMmIi0Qerf+MErAVxDyF0JJlZiW7zyOeKFfnDIg/YiTOJF3BZT4mKSYgjWsBEd1cUKmHL5RG0X5jI8sJA/InLTlD+zw1bXSiMgO6AKn+T7/2e7VFucNxBp3Fw/K2EfGotpiR279k+tRfBT+/fb/h2bpdUNh33pLatfplfTyou7l62aS69Zukq54bi8WTQ+T1Y7KM0sZ4cnlOxA2+rMc4fby7vw+c837Ymt9cTJ3zm598sgrmrW8MrtDD/LtcETSvDW/Fl+l1EG2e0e/ej2o4jIZwtx4/iCCdPQ+m3d+Ti4DPJIsnM3tM7uvuzbfW6ir8tRbLBzV20vtfwundIRg/E4eli7svGa1PVd/7fh6Oo58N6dRvefs1p/0cDo2lHEyz+S8gqlzmozEaGEPdL6w+lpbcQkMrKlz9NNcnqYAps5PvymXFz7T40NDXzdyug1bD6be8anPQb9VdrxfYNdsZ2l276XmNwG2V+rNlcUSxz1lE81i5wm7n52OCJPElsBCEteIZWYI0P0AcYIWNEZvog8GZhBnXCt4fBN0gsJtO3R02Br2q3ey5g57XDIatVtexPdO45OqKXYlupEAcqnf1QL0nQGhKIZf4fM6lHnSpdEke8SpTsVNZ4QqDTF8CItdh36216kjSJI0hJ4wSHmYxVNJlWhQIye2/a2EiCyuVJOVC4bg4he8mefytrIf2CWnuIPOMeqB7Cm8uI8evl+m8Sbt28tIq4btZSPPDpourBCVbJoefXmcmH5bdwOzyItIpue+2/CHECQD0AT90XJpdvHBF96KXF6y+M7SqdMr2PuLKYyVbrbKioc1cMYWGRw6ym2gKJNOy9zTjv4GhHQT61I2zY30UeWc/5JepJZsqrCDR42cUy088N6Yg8+fGSB+fzWffMgchdd0UbNQpWz/Wr5Kc8YcPF+KT3E+br/XfmovwtV0nsPbi6Dz1G0NRtshX+f3y9M5sEK5hqRZELvbBTwGcCn5o3BV5x0XpaZpnCt7/YuRK1zYxITxjajQwC8O++hY81VMK/qvTG5hC4V+u7I1898p+GF9MtQ4m2Nz50v92tmgxLgT0LkkLLm1zo1+fOjhb7Kn9C8HTgu+6Hwn+YSadN+a3lr2aHp+Hzr8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06520</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06522</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06523</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937D35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937D7D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937DC9529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="916df3e0-4be0-4386-b9a1-c5aa9f249e95"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937E4C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937F19529BE0401F0A07996E28:1645B6A8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937E3A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937E3A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937E3A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937E4C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937E94529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8937ECE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937E4C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937E94529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8937ECE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx1jC4yxPYEZh4/GLQlJIG3alzuKvIBSWyKWTCC//komJkBIbnpnmGG0Xp09+6EjnQicpfUwEgJySTkz4l7b/GfqNpue7yYWaniB5fo+svxpI7CcOiDiJB4KvKZpxEIUEDMhMZNts+6ghoUc9ZsgJ2zWQ6dVcwL02zR+QC4UtHKpOaaxylImwjJs2yxyFnIsqAgZzkCEkoTj6HwYKs8QV5zMzsmGZRkw78ylXIS2TWoJEEhTUiM8s0/sPZ+TRIRjOmNYFjk8x0xE23ze+/j4WHts1Hg+s+uO49hOYCufRNDZZ7PzqdoMScymfLPuYsYZJTilT1iTOgc554kRpTOeUznP3oBGNnI0tAUrYhHkss+m/RKgZPdBpD2SucCWmGNUgV3DFHJgBIyb67htfv5YBzd7JzlmYsrzTBys/44SsCWkfAGJJarMKnYfRzxSrs4JkDBmJC0EXcKFHpMFJiCMyxymdDWkQg1fIoyy/cZKVBMG5G9acmLv8lS07SOV6dEZCPl/+rXbqw3KD5wW0JHcvcvrp49D99cgekJs9DSYDc8eomxI2iWFXecNqW2rn9eHg7qdq+dNPc4H6/GDmK2/k69x/9tZcSuezrrnN9n0/DdfN/KYgN/s0dHV+qbfzajjZS2SOaOzydl3fH73m4/vgmT+lF6t/0Sffg5u7ldf0M9WdNEdyVnzJxldpGeyP5J/ZpPGxL+5jAct9/T2/paftu6/rdlVkN5ergt28XV0AcWKtaiPv9iDG69PP9WHAzTJCjRPbPEL0ScbO+2XnHZz2DdWcjAu7u6ByGqpRyPuGQPVLyzflxZtoYk1LV3DhdYnIYFJs6N3aVkJCyU+NAlVMzfrvu+hrh80Wn2326wHp33HddDAiZxWEHj9ul/pz4bFAcUuZ1OqY2mF3czP+wRJFgpgCeTWkhdkDsJ8B7GHJTZidq0OBmcCJlwpuOt7QavZOm14HnKRG3l1J+pF3qDrOz2/0Q9M44LLERvl0VRCvq/ejT31vgZCFxS0xOs5F2rQhVQlecDLQqaotsQ1BoW6BHKtw2Hd9Zu2oNkiBU3YznhSpFBbzBdlgWyx+a9bmIjSSgVZ8FzitDyFbyZ5+K2qh/JJqHYQOqNTUD2FV5cRCptVOm+n7e2mXcFHRUL1YVPFlTklGyb7n15mRg/LdmC2eRGBKu7bLX8JcQTAfoeffViabbxkSXeiVxesujOUqnSq9j7g2kOtWC6LsqEtrZi5greR7bTsMZBCyd56wv8As7cQ9odunC3rg8hb+z6/Qs7ZWGIJmRo/o1x+4LkxBqGfG7E6PquPvmX2Qqq6SVjJY7Zuql4lmvG7DxcSEu2nzJfq75HnyUu7jmDtxFF5qjeGpGymV/p+Wb8xG4QrWKoEkee74McAjgXfN26LvOUi1TTdFRLe/mJopWubmBBeMBn3zNKwq74lT7leQPji9AqmVPjnK3sl3ryyb8+HY6WDGTa3vvS/nS1ajgsBtUvQkkvbXKnXpwrOZjtq/0zwuOA3ovcEfz+Tzivza8tOTQ/PQ+df</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx1jC4yxPYEZh4/GLQlJIG3alzuKvIBSWyKWTCC//komJkBIbnpnmGG0Xp09+6EjnQicpfUwEgJySTkz4l7b/GfqNpue7yYWaniB5fo+svxpI7CcOiDiJB4KvKZpxEIUEDMhMZNts+6ghoUc9ZsgJ2zWQ6dVcwL02zR+QC4UtHKpOaaxylImwjJs2yxyFnIsqAgZzkCEkoTj6HwYKs8QV5zMzsmGZRkw78ylXIS2TWoJEEhTUiM8s0/sPZ+TRIRjOmNYFjk8x0xE23ze+/j4WHts1Hg+s+uO49hOYCufRNDZZ7PzqdoMScymfLPuYsYZJTilT1iTOgc554kRpTOeUznP3oBGNnI0tAUrYhHkss+m/RKgZPdBpD2SucCWmGNUgV3DFHJgBIyb67htfv5YBzd7JzlmYsrzTBys/44SsCWkfAGJJarMKnYfRzxSrs4JkDBmJC0EXcKFHpMFJiCMyxymdDWkQg1fIoyy/cZKVBMG5G9acmLv8lS07SOV6dEZCPl/+rXbqw3KD5wW0JHcvcvrp49D99cgekJs9DSYDc8eomxI2iWFXecNqW2rn9eHg7qdq+dNPc4H6/GDmK2/k69x/9tZcSuezrrnN9n0/DdfN/KYgN/s0dHV+qbfzajjZS2SOaOzydl3fH73m4/vgmT+lF6t/0Sffg5u7ldf0M9WdNEdyVnzJxldpGeyP5J/ZpPGxL+5jAct9/T2/paftu6/rdlVkN5ergt28XV0AcWKtaiPv9iDG69PP9WHAzTJCjRPbPEL0ScbO+2XnHZz2DdWcjAu7u6ByGqpRyPuGQPVLyzflxZtoYk1LV3DhdYnIYFJs6N3aVkJCyU+NAlVMzfrvu+hrh80Wn2326wHp33HddDAiZxWEHj9ul/pz4bFAcUuZ1OqY2mF3czP+wRJFgpgCeTWkhdkDsJ8B7GHJTZidq0OBmcCJlwpuOt7QavZOm14HnKRG3l1J+pF3qDrOz2/0Q9M44LLERvl0VRCvq/ejT31vgZCFxS0xOs5F2rQhVQlecDLQqaotsQ1BoW6BHKtw2Hd9Zu2oNkiBU3YznhSpFBbzBdlgWyx+a9bmIjSSgVZ8FzitDyFbyZ5+K2qh/JJqHYQOqNTUD2FV5cRCptVOm+n7e2mXcFHRUL1YVPFlTklGyb7n15mRg/LdmC2eRGBKu7bLX8JcQTAfoeffViabbxkSXeiVxesujOUqnSq9j7g2kOtWC6LsqEtrZi5greR7bTsMZBCyd56wv8As7cQ9odunC3rg8hb+z6/Qs7ZWGIJmRo/o1x+4LkxBqGfG7E6PquPvmX2Qqq6SVjJY7Zuql4lmvG7DxcSEu2nzJfq75HnyUu7jmDtxFF5qjeGpGymV/p+Wb8xG4QrWKoEkee74McAjgXfN26LvOUi1TTdFRLe/mJopWubmBBeMBn3zNKwq74lT7leQPji9AqmVPjnK3sl3ryyb8+HY6WDGTa3vvS/nS1ajgsBtUvQkkvbXKnXpwrOZjtq/0zwuOA3ovcEfz+Tzivza8tOTQ/PQ+df</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxVygUCIClK4dMo5tLRQqh5eRq6zAbeJTWOHy3z92KGhQIGhIyEh72yvvfbFy77mKI4cP+AcEkEY1Tqtmv63ZRVfcRXAqGDsGKViZWygqoWNkud54NgwdstVXetwnkKHcoGoqOmOZRcN25K/J9vyXce3vELFdUa69gwJl9DSpWDp2jKOKPezsDU9TajPECfcpygG7gvsD4K7ri89fZRz0uvXa5ZZwKQ+FWLmmyYuhIAhinABs9i8Nnd8rkPuD8iEIpEm8Bkz5DX9c+9isSgsigWWTEzHsizTqprSJ+RkcqnXL/LNEHbomK3XTUQZJRhF5B+kSN2BmLJQC6IJS4iYxkegbdO2FLQBS2xgu0QvdfMrQMbuTKQdkglHBp8iOwfrwxgSoBi0Yb9T0y/P6+B671OCKB+zJOZ7659RAjqHiM0gNHieWc7ufMQD5apfA/Y7FEcpJ3O4V2MyQxi49pDAmCy7hMvhC7mWtV9b8nzCAP+kJdfmNk9J2zxQmRaZABf/p1/bvVqjPKMohXoYvyzmQaMHv98iWFFs9h69wV9R9+YN1zIK285rUptWf673B3UzV5+bGu92cP+WpL33aXXYGC376RuNV2QYFr2VF428x1EjcM1R1BtPeJPdvPDB1Uh0ofnYbUwnU9Lr9VsWPMRXYvE6vMCT+M+vJfSHqbiFmXvlvP65em6x9LZZbo4fSsNS8b389Pir/G7DyJ3Q29XozhV4zsdRXO7elssPvcYwDduuBDYv+N3LALynKzb6XXJb7fsrimtfOW3nsGvM5WCQvr4BFvlSjUanpd3IfiFxWlqUhYTGOHP1Z0qfuAAq9LrapWTFT6X4kNCXzVyv217ZbnrVYqVdLblOtdG2SpZ9YwVWpVottx0v1581iz2KTUbHRMVSCruen9MEcexzoCEkxpyleApcP4HYQgJpHdqXB4NRDk9MKrhbKTmB3QjsG6/ledVmteVULMm74tntIHBbunbPRI/2kmAsINlV7+KOevcBkxkBJfFqzrkcdC5kST7QPBWRXZijAoVUXgKJ0mHfKXmuyUk8i0ARNmMWphEUZtNZViCTr/8dA2GeWQnHM5YIFGWn8GiS+9/yekifkCgHrjJqgOwpfLuMbN/N0zmednk77Rw+SEOiDpssrkgIXjPZ/fQ1M2pYNgOzyQtzO+e+2fJDiAMA5gl+5n5pNvHCOdmKnl+w8s6QqlLP2/uBCh+FdD5Ps4ZWlGImEt60TatiDgCnUvZWT+wdqLmBMM+6cTas9yJv7Lv8UjGlA4EExHL8tGx5xnNjAFw9Nzry+CzPfcvshJR1E7AUh2zNSL5KFOOTDxfsY+UnzQ/yb8GS8KtdB7C24sg85RtDEDpRK3W/rI7MBmYSlkhBZMk2+CGAQ8F3jZsib7gIOU2vqYDjXzSldDUdYcxSKjpKUaRhW30znmI1A//L6RtMpvCfV/aSH72yX+66A6mDMdI3vuS/nQ2SjQsGuYuTjEtNX8rXpwxOJ1tq/0nwsOAXg1OCv5tJ/Zv5u2Wrpvvnof4v</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0Q5jyjkRghEBSlcepqe3ii0c05fRsbZgJlgp7EDtF8/dmgoUNppR0JC3tlee+2Ll33K0SJxgpBzyARhVIt6Lf1vC2G34YFnuMj2jZqPakajAbbh+JYH9bo3dvyxrkWc5xBRLhAVLd2xbNewLfkb2VbgOYFtVz3PfdS1B8i4hJYuVUvX1ouE8qAI29LzjAYMccIDihbAA4GDYXh1GUjPAJWc9PbphmURMGvPhEgD08TVGDAkCa5itjBPzT2f05gHQzKlSOQZvMaMeUt/3btaraort8qyqelYlmVaTVP6xJxMf+jtk3IzxBGdsM26iyijBKOEvCBF6grEjMVamExZRsRs8QG0bdqWgjZgjQ1s1+gP3XwLULD7ItIeyYwjg8+QXYLdwQQyoBi0+7uopf/4Wgc3e0cZonzCsgU/WH+PEtAlJCyF2OBlZiW7ryMeKVf7FHAQUZzknCzhWo1JijBw7TaDCVlfEi6HL+Za0X5tzcsJA/ydlpyauzwlbfNIZXpkClz8n37t9mqD8oCSHNrnlxWRj3o1v2/5PXa1JrdX6XmHNyv3q1ZBYdd5Q2rb6tf14aBu5+p10/CONf1mHd1eV0x2AcxK5w9gMzoceOl1PP/d715Hy0F9MK9P8ygZeY+DXuXivveHvfxM7poXvx5s1/09fqzVu7e9E1jn9SeW5zdeFPLajS+iFzPGt/cvq2kczkfNuVvpPZ6FF8sOGjTGNq+N53/1yWT5iOLziz9WZzpk1vDxZX5eZ6sTGHjX+Ay8Ssd5qlUG05/etPWW024O+8ZSDob5eA5YlEs1GlFPO5P9QuJzaVEWEhuTwjVIlT5xAVTobbVLyUqQS/EhcSCbuVn3G3W722i6fr/b95xmp2/VLPvMCi2/2az3nUapPxsWBxS7jE6IiqUUdjM/nxPEi4ADjSEzlizHM+D6J4g9JJAW0Tt5MBjlMGJSwftup19r1r2O5bih3/MaZw3bd8Nu56zvOqHd17VrJm7oTRZOBGT76u3uqfcdYJISUBKv5pzLQedCluQJLXOR2NUlqlLI5SWQKR0OnFrDMzlZpAkowuaCxXkC1XSWFgUy+ebfMRDmhZVwnLJMoKQ4hR8mefitrIf0iYly4CqjDsiewpHLyCrTeZd27eilVcKHeUzUYZPFFRnBGyb7n95mRg3LdmC2eWFul9y3W74JcQTA/ISfeViabbx4SXailxesvDOkqrTL9j6h6lM1Xy7zoqG+UsxMwpu2afnmEHAuZe95xP4Bam4hzC/dOFvWB5G39n1+uZjRoUACFnL8tGL5hefGELh6bkTy+Ky/+pbZCynrJmAtjtm6iXyVKMafPlxwgJWfNN/KvxXL4rd2HcHaiSPzlG8MQehUrdT98vzBbGAmYYkURJbtgh8DOBZ837gt8paLkNM0zgV8/EVTStfSEcYspyLq6YVhV30LnuI5heDN6R1MofCvV/aaf3hl/766HEodXCB960v+29kgxbhgkLs4Kbi09LV8fcrgdLqj9q8Ejwu+G34m+PuZtN+Z31t2anp4Htr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06526</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06528</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06529</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937E4D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937E95529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8937ECF529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_200_OK_P2" searchProperties="true" id="66dbb909-a2fd-4e5f-964c-e03eec4d0d47"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C8937F35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB562FA1FAE0401F0A059945B1:987B3EB4"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937F23529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937F23529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937F23529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937F35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8937F7D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB55E3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937F35529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8937F7D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB55E3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSx0+QhbAkAiQIoJu2dAFKl5cr40zAbeLQ2AHaX//ZoaFAoZdeCQl5Mj5zZvGx6wxFoem0GIOEk5gqXqeh/htU/Inhl3GhNqkFBUuHWsGemLiAMJi+b02wDb6qeIyl4FHGEeUN1dSNUsHQxW9k6E7ZdIxS0aoYz6oyhoQJaOFS1FVlFYWUOVnYhpom1IkRI8yhKALmcOwMW/0rR3g6KOekNutrllnApDnjfO5oGi76gCEMcRHHkVbXdnzqPnOGZEoRTxP4jOmzhvq5d7lcFpelYpxMNVPXdU23NeHjMzI9V5tn+WbwPRrE67WLaEwJRiH5QJJUH/gs9pVWOI0TwmfREWhDM3QJXYAVLmDDoueq9hUgY3ci0g7JhKECmyEjBxtAAAlQDMr9wGuo56d1cL13lCDKgjiJ2N76d5SALiCM5+AXWJ5Zzu50xAPlatYBOx7FYcrIAq7lmMxFFky5TSAgqyvCxPD5TMnar6xYPmGAf9OSurbNU9DWDlSmQ6bA+P/p13av1ihjFKbQ7L+COzHaV27ZfixdTlvtsOz3Ly6CR7PbyChsO69JbVr9ud4f1M1cfW4K78fdPwYrmR8pvbC82cPSbvf7Kzx6+XhA9uKf4N0bed7rR3T71L949pZp+2ViBa2nytUimMYP82ScGpbHB6uZa5/dTzW78kT129ogutEuKQq8OWrDo23HrVXVrUa2Ya/KE9K9+zMgk6uL+zTh7dJdeF2jz0Ip7seLsd2Lkv7j5TQ4m1Wr/eFFaem5HzcPtcFt5+mu8ZXTdg67xlwOhunkBTDPl3I0vI7SE/1C/GdpkRbiF4LM1ZlLfWIcKFebcpeUFScV4kN8RzRzve7WKoZbs0vVXqlcNu12V7d0o6e39KptV7pmLdefNYs9im5MAyJjSYVdz8/PBHHkMKA+JIVFnOIZMPUHxA7iSPHoQByMmDIYxULB26VKtWPb7ZrbNjqu0etZlZ5luWa1bJXdntlSleuY39CbpBVwSHbVu7Sj3gPAZE5ASryccyYGnXFRkje0SHloFBeoSCEVl0AiddgxrVpZYySahyAJa1HspyEU57N5ViCNrf9NoUQssxKG53HCUZidwqNJ7n/L6yF8fCIdmMyoDaKncOAy0vN0jqdd2U47h2+lPpGHTRSXJwSvmex++poZOSybgdnkhZmRc99s+SXEAQDtB37afmk28fwF2YqeX7DizhCq0szb+4aKb8V0sUizhlalYiYCXjM0vaoNAadC9t5H8StQbQOhnXTjbFjvRd7Yd/mlfEaHHHGIxPgp2fKE58YQmHxueOL4rE59y+yEFHXjsOKHbG4oXiWS8Y8PF+xg6SfMt+JvGSdfiR/C2ooj8hRvDE7oVK7k/fJ+ZDZwLGCJEMQ42QY/BHAo+K5xU+QNFy6maZJyOP5FkUrXUBHGcUq511Ezw7b6Zjz5+xycL6dvMJnCf17ZK3b0yn7sXw2FDkZI3fiS/3YukGxcMIhdjGRcGupKvD5FcDrdUvtPgocF3yz9JPi7mTS/mb9btmq6fx6afwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSx0+QhbAkAiQIoJu2dAFKl5cr40zAbeLQ2AHaX//ZoaFAoZdeCQl5Mj5zZvGx6wxFoem0GIOEk5gqXqeh/htU/Inhl3GhNqkFBUuHWsGemLiAMJi+b02wDb6qeIyl4FHGEeUN1dSNUsHQxW9k6E7ZdIxS0aoYz6oyhoQJaOFS1FVlFYWUOVnYhpom1IkRI8yhKALmcOwMW/0rR3g6KOekNutrllnApDnjfO5oGi76gCEMcRHHkVbXdnzqPnOGZEoRTxP4jOmzhvq5d7lcFpelYpxMNVPXdU23NeHjMzI9V5tn+WbwPRrE67WLaEwJRiH5QJJUH/gs9pVWOI0TwmfREWhDM3QJXYAVLmDDoueq9hUgY3ci0g7JhKECmyEjBxtAAAlQDMr9wGuo56d1cL13lCDKgjiJ2N76d5SALiCM5+AXWJ5Zzu50xAPlatYBOx7FYcrIAq7lmMxFFky5TSAgqyvCxPD5TMnar6xYPmGAf9OSurbNU9DWDlSmQ6bA+P/p13av1ihjFKbQ7L+COzHaV27ZfixdTlvtsOz3Ly6CR7PbyChsO69JbVr9ud4f1M1cfW4K78fdPwYrmR8pvbC82cPSbvf7Kzx6+XhA9uKf4N0bed7rR3T71L949pZp+2ViBa2nytUimMYP82ScGpbHB6uZa5/dTzW78kT129ogutEuKQq8OWrDo23HrVXVrUa2Ya/KE9K9+zMgk6uL+zTh7dJdeF2jz0Ip7seLsd2Lkv7j5TQ4m1Wr/eFFaem5HzcPtcFt5+mu8ZXTdg67xlwOhunkBTDPl3I0vI7SE/1C/GdpkRbiF4LM1ZlLfWIcKFebcpeUFScV4kN8RzRzve7WKoZbs0vVXqlcNu12V7d0o6e39KptV7pmLdefNYs9im5MAyJjSYVdz8/PBHHkMKA+JIVFnOIZMPUHxA7iSPHoQByMmDIYxULB26VKtWPb7ZrbNjqu0etZlZ5luWa1bJXdntlSleuY39CbpBVwSHbVu7Sj3gPAZE5ASryccyYGnXFRkje0SHloFBeoSCEVl0AiddgxrVpZYySahyAJa1HspyEU57N5ViCNrf9NoUQssxKG53HCUZidwqNJ7n/L6yF8fCIdmMyoDaKncOAy0vN0jqdd2U47h2+lPpGHTRSXJwSvmex++poZOSybgdnkhZmRc99s+SXEAQDtB37afmk28fwF2YqeX7DizhCq0szb+4aKb8V0sUizhlalYiYCXjM0vaoNAadC9t5H8StQbQOhnXTjbFjvRd7Yd/mlfEaHHHGIxPgp2fKE58YQmHxueOL4rE59y+yEFHXjsOKHbG4oXiWS8Y8PF+xg6SfMt+JvGSdfiR/C2ooj8hRvDE7oVK7k/fJ+ZDZwLGCJEMQ42QY/BHAo+K5xU+QNFy6maZJyOP5FkUrXUBHGcUq511Ezw7b6Zjz5+xycL6dvMJnCf17ZK3b0yn7sXw2FDkZI3fiS/3YukGxcMIhdjGRcGupKvD5FcDrdUvtPgocF3yz9JPi7mTS/mb9btmq6fx6afwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZbuo6FH0/XxHlPFbBGShDVJBShio90FbA6fRyZRwH3CZ2ajsM/fprh4YCpb3tlZCQd7bXXnvwss8ETBPXD4TAXBJGjbDbMv+pO6huO1XHasYN16pWvZo19ao1K0ZVBOF0Gjt2ZBqhEDkOqZCQypbp2o5nObb6TRzbP3V9p1Fx6t6jadxiLhS0cqnYprFKEyr8ImzLzDn1GRRE+BSmWPgS+eNgOPCVpw9LTmb7bMOyCMjbcykzHwBUiTDCSYIqiKXgDOz5nEXCH5MZhTLn+C1mJFrm297lcllZehXGZ8C1bRvYTaB8IkFmv832r3IzjkIas826AymjBMGEvEJNaojlnEVGkMwYJ3KefgLtAMfW0BZeIQs5VfrbBO8BCnbfRNojyQW0xBw6JdgIx5hjirDxdxS2zN/f6+Bm74RDKmLGU3Gw/hklTBc4YRmOLFFmVrL7PuKRcrXPMPJDipJckAW+0mOSQYSFccNxTFYDItTwRcIo2m+sRDlhGP2kJWdgl6eiDY5UpktmWMj/06/dXm1QbmGS43Z3OppkYooG8TR+TPKn3nB8Mb33wHrIWgWFXecNqW2r39aHg7qdq7dNw8vBcDJKk1pn/PTXeWCU31XlCPTXL+EkjHO55MvbVfQgLy+v78fP+TW4bKAGPwlGwROKav0TL8rnA3gTBg/s+dfLn1d84l0Mb4Dn/u301hfZ63l32H19xudkcIUmjy+yOekNAziwG+7rwru7cmACVwP5ZwTyXiMSTzCcd7hcR6/ur9XFyWKSerd3s9rEDcaNrDtsvee0m8O+sZSDcT59wkiWSz0aYdfoq35B+bW0aAuJrLhw9TOtT0JiKs223qVlxc+V+JDIV83crHuNmtNpNL16v949dZvnPbtqO307sOvNZq3nNkr92bA4oNhhNCY6llbYzfx8TRClvsA0wtxasBzNsTC/QOxCCY2QjtTBYFTgCVMK7vT7/U7dbtZrfafhdvs199Q+7duu3fPswPEC07hi8ppe8yCWmO+rt7en3iOMSEawlng950INupCqJC9wkcvEqSxgheJcXQJc67DvVhunQJA0S7AmDFIW5QmuZPOsKBAQm3/XgkgUViJQxriESXEKP03y8FtZD+UTEe0gdEbnWPUUH7mM7DKdz9Ou7aZdwgd5RPRhU8WVnKANk/1P7zOjh2U7MNu8kHBK7tstP4Q4AgC+4AcOS7ONFy3ITvTyglV3hlKVdtneF1h5qeSLRV40tK4Vkyt44AC7DsYY5Ur21hP2jCnYQoBv3Thb1geRt/Z9frmc07GEEqdq/Ixi+Y3nxhgL/dwI1fFZffctsxdS1U3ilTxm6yTqVaIZf/lwQT7Sfsp8o/6WjL8nfgxrJ47KU70xJKEzvdL3y/qT2UBMwRIliIzvgh8DOBZ837gt8paLVNM0zSX+/Iuhla5lQoRYTmXYNQvDrvoWPOU6w/670weYQuHfruyV+PTKvh8OxkoHU2hufcl/O1ukGBeE1S5BCi4tc6Venyo4ne2o/RvB44Lvel8J/n4m7Q/mj5admh6eh/a/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6JTPzKl7xQ6wgyviovrrvi2++VOTA8QbZPSpIj++psUWwHR694ZRyanJ895zkue5JijJHbCLueQCcKoNh609X8iN2q6jfvAsHDLNTw/aBj3boQMgFngOU6raXuero05z2FMuUBUtHXHsl3DtuTflW2FvhM6dj2wgj+6dgMZl9DSpW7p2jqJKQ+LsG09z2jIECc8pCgBHgocTrvnk1B6hqjkpHeONyyLgFlnIUQamiauR4AhjnEds8Q8Nnd8jiMeTsmcIpFn8Boz4m39de/T01P9ya2zbG46lmWZVsuUPhEn8yO9863cDNGYzthm3UeUUYJRTF6QInUOYsEirRvPWUbEIvkA2jZtS0EbsMYGtj16pJtvAQp2X0TaIZlxZPAFskuwS5hBBhSDdn05butHX+vgZu9VhiifsSzhe+u/owR0BTFLITJ4mVnJ7uuIB8rVOQYcjimOc05W8EONSYowcO1nBjOynhAuhy/iWtF+bc3LCQP8Ny05Nrd5StrmgcoMyBy4+D/92u7VBuUGxTl0Ts4en90pnNUG7jr1F2xlPbJ1zh8mv3+1CwrbzhtSVatf1/uDWs3V6yaM7k6zK98neHlxMj95uVky2vWu51Y/PyUovrefetdW83Yxrs1zuzF6oC9eYnaTQevi5PqBPc4WC7j18O1JI3nsffuBovkfuPt5Mzm18H0ae6P1Eg9neXCOb2vEdrpi8DCunU2iU+jdDpu/8u9Lcfl8gszV98mo9vu0/3ta41ZNvED/8tvZxXd+bon5+pb8onhkX6XN9ltO2znsGks5mOb3D4BFuVSjMR5oI9kvJD6XFmUhkTErXMNU6RMXQIXeUbuUrIS5FB8ShbKZm/Ww2bD7Qb/n+0O3a4+6Q8uz7JHVtfxWy/N7dqk/GxZ7FPuMzoiKpRR2Mz+fE8RJyIFGkBkrluMFcP0TxAESSBvTS3kwGOVwxaSCN4bdfn/kNZpDuzFwgpHbHMp/vt0Mej1vMPR17QcTF/Qi684EZLvq7e6o9yVgkhJQEq/mnMtB50KWZIlWuYjt+grVKeTyEsiUDoeO1/RNTpI0BkXYTFiUx1BPF2lRIJNvfh0DYV5YCccpywSKi1P4YZL738p6SJ+IKAeuMuqB7CkcuIzsMp13aXsHL60SvptHRB02WVyREbxhsvvpbWbUsFQDU+WFeTUc1Za/hDgAYH7Cz9wvTRUvWpGt6OUFK+8MqSqdsr1LVF/W89UqLxoaKMXMJLxpm1ZgTgHnUvaer9gjULOCML9041Ss9yJX9l1+uVjQqUACEjl+WrH8wnNjClw9N8by+Ky/+pbZCSnrJmAtDtn6sXyVKMafPlxwiJWfNP+UP08si97adQBrK47MU74xBKFztVL3y/MHs4GZhCVSEFm2DX4I4FDwXWNV5IqLkNN0nwv4+IumlK6tI4xZTsV4oBeGbfUteIrnFMI3p3cwhcK/Xtlr/uGVfXc+mUodTJBe+ZL/djZIMS4Y5C5OCi5tfS1fnzI4nW+p/SvBd4LfbLnByHF9p9WrBD9otRpDp1kVcCeTzjvze8tWTffPQ+df</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065212</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065217</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065219</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937F36529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8937F7E529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB55E4A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_FUNC_CHILD_Get_Self_Blocked:clg_403_FORBIDDEN_P2" searchProperties="true" id="b7ba9f6d-4119-436a-9b26-daa9b166adc1"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="027aba9f-4602-45c5-b486-7ebd54fae0f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","USER_INACTIVE");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861FDD556CD1178E0401F0A07996787</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861FDD556BA1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861FDD556BA1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861FDD556BA1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861FDD556CD1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861FDD557151178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861FDD556CD1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861FDD557151178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SlksLHWEGKGzr1u0F3KIvZ2K6Ctm2SWlSQH/9SYpFQPTomWGGyerKt751yZeccJTEVa/LOWSCMKoFflv/J2qAU6s9OoYVNmyj3rSrRqvlREYrqtuuBbiFwlDXAs5zCCgXiIq2XrXsmmFb8je2bc9yvKpVaTnug679gYxLaOlSsXRtlcSUe0XYtp5n1GOIE+5RlAD3BPZG3YtzT3p6qOSkd07WLIuAWWcmROqZJq6EgCGOcQWzxDwxd3xOQu6NyJQikWfwGjPkbf1173K5rCxrFZZNzaplWabVMqVPyMn0SO/8KDdDGNCIrdd9RBklGMXkBSlSFyBmLNS68ZRlRMySD6Bt07YUtAErbGC7To908y1Awe6LSDskM44MPkN2CXYDEWRAMWi3N0FbP/paB9d7xxmiPGJZwvfW36MEdAExSyE0eJlZye7riAfK1TkB7AUUxzknC/itxiRFGLh2lUFEVueEy+ELuVa0X1vxcsIAf6clJ+Y2T0nbPFAZn0yBi//Tr+1erVH+oDiHzmk6i58Gd5MJYov0HF/d/52cnTYb19fLZrugsO28JrVp9et6f1A3c/W6yT8XowmdXlz3rXiOont+fze4rS+X4nhQq1aJe/YsCB1erpoPTyuoxVe965rrnt4MZw8hv+2P78J48hPOpmAua8MfSRAMjk+j2l1ovvgRG+N515/+8peN0R1e0vrt+dmyMX85nbIxJMd/c/Nywqi9Qr3r51Tk80GQ0lPhOquL6KX39CO+5OIsndwOfw4HPboIjs9u2285beewayzlYJQ//gUsyqUajcDXhrJfSHwuLcpCQiMqXL1U6RMXQIXeUbuUrHi5FB8SerKZ6/Wg6dhD3280nL5v225zYNUte2h1LVeeK7fplvqzZrFHsc9oRFQspbDr+fmcIE48DjSEzFiwHM+A658g+kggLaA38mAwymHMpII7vVqt2vMH/e7Qcdy+4/e7frcliTv1quVXW7r2m4lLepl1IwHZrnrXd9T7BjBJCSiJV3PO5aBzIUsyR4tcxHZlgSoUcnkJZEqHvWq92TA5SdIYFGEzYWEeQyWdpUWBTL7+rxoI88JKOE5ZJlBcnMIPk9z/VtZD+oREOXCVUQ9kT+HAZWSX6XyctruddgnfzUOiDpssrsgIXjPZ/fQ2M2pYNgOzyQtzu+S+2fJNiAMA5if8zP3SbOKFC7IVvbxg5Z0hVaVTtneOKvNKvljkRUNdpZiZhDdt03LNEeBcyt7zmD0BNTcQ5pdunA3rvcgb+y6/XMzoSCABiRw/rVh+4bkxAq6eG4E8PquvvmV2Qsq6CViJQ7Z+LF8livGnDxfsYeUnzVfyb8myt8QPYW3FkXnKN4YU5Klaqfvl+YPZwEzCEimILNsGPwRwKPiucVPkDRchp+kxF/DxF00pXVtHGLOcisDXC8O2+hY8xXMK3pvTO5hC4V+v7BX/8MqeXJyPpA4mSN/4kv92NkgxLhjkLk4KLm19JV+fMjidbqn9K8HDgt/rfib4u5l03pnfW7Zqun8eOv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SlksLHWEGKGzr1u0F3KIvZ2K6Ctm2SWlSQH/9SYpFQPTomWGGyerKt751yZeccJTEVa/LOWSCMKoFflv/J2qAU6s9OoYVNmyj3rSrRqvlREYrqtuuBbiFwlDXAs5zCCgXiIq2XrXsmmFb8je2bc9yvKpVaTnug679gYxLaOlSsXRtlcSUe0XYtp5n1GOIE+5RlAD3BPZG3YtzT3p6qOSkd07WLIuAWWcmROqZJq6EgCGOcQWzxDwxd3xOQu6NyJQikWfwGjPkbf1173K5rCxrFZZNzaplWabVMqVPyMn0SO/8KDdDGNCIrdd9RBklGMXkBSlSFyBmLNS68ZRlRMySD6Bt07YUtAErbGC7To908y1Awe6LSDskM44MPkN2CXYDEWRAMWi3N0FbP/paB9d7xxmiPGJZwvfW36MEdAExSyE0eJlZye7riAfK1TkB7AUUxzknC/itxiRFGLh2lUFEVueEy+ELuVa0X1vxcsIAf6clJ+Y2T0nbPFAZn0yBi//Tr+1erVH+oDiHzmk6i58Gd5MJYov0HF/d/52cnTYb19fLZrugsO28JrVp9et6f1A3c/W6yT8XowmdXlz3rXiOont+fze4rS+X4nhQq1aJe/YsCB1erpoPTyuoxVe965rrnt4MZw8hv+2P78J48hPOpmAua8MfSRAMjk+j2l1ovvgRG+N515/+8peN0R1e0vrt+dmyMX85nbIxJMd/c/Nywqi9Qr3r51Tk80GQ0lPhOquL6KX39CO+5OIsndwOfw4HPboIjs9u2285beewayzlYJQ//gUsyqUajcDXhrJfSHwuLcpCQiMqXL1U6RMXQIXeUbuUrHi5FB8SerKZ6/Wg6dhD3280nL5v225zYNUte2h1LVeeK7fplvqzZrFHsc9oRFQspbDr+fmcIE48DjSEzFiwHM+A658g+kggLaA38mAwymHMpII7vVqt2vMH/e7Qcdy+4/e7frcliTv1quVXW7r2m4lLepl1IwHZrnrXd9T7BjBJCSiJV3PO5aBzIUsyR4tcxHZlgSoUcnkJZEqHvWq92TA5SdIYFGEzYWEeQyWdpUWBTL7+rxoI88JKOE5ZJlBcnMIPk9z/VtZD+oREOXCVUQ9kT+HAZWSX6XyctruddgnfzUOiDpssrsgIXjPZ/fQ2M2pYNgOzyQtzu+S+2fJNiAMA5if8zP3SbOKFC7IVvbxg5Z0hVaVTtneOKvNKvljkRUNdpZiZhDdt03LNEeBcyt7zmD0BNTcQ5pdunA3rvcgb+y6/XMzoSCABiRw/rVh+4bkxAq6eG4E8PquvvmV2Qsq6CViJQ7Z+LF8livGnDxfsYeUnzVfyb8myt8QPYW3FkXnKN4YU5Klaqfvl+YPZwEzCEimILNsGPwRwKPiucVPkDRchp+kxF/DxF00pXVtHGLOcisDXC8O2+hY8xXMK3pvTO5hC4V+v7BX/8MqeXJyPpA4mSN/4kv92NkgxLhjkLk4KLm19JV+fMjidbqn9K8HDgt/rfib4u5l03pnfW7Zqun8eOv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH52StEBLO8IMCHjwoCig5+jLnZAGyLFNSpMC+utvUiwColfvDDNMdnfWXvsjKzkTKI6coCkESSXlzOi16+Y//qQ6qVZrE2vqhKFVgbWyVfOhZ5XRpOa4fjmEZGIaPSEy0mNCIibrpgPtsmVD9RvbdgDdwKmUoF9+NI17kgoFrVxK0DTWccREkIetm1nKAo4EFQFDMRGBxMGoedUPlGeACk5m42zDMg+YNuZSJgEAuBQSTKIIlzCPwRnY8zkLRTCiM4ZklpLXmKGom697V6tVaVUu8XQGHAghgD5QPqGgsxOz8aPYTMIem/LN+hwxzihGEX1BmtQVkXMeGs1oxlMq5/EH0DawoYa2yBpb2K6wExO8BcjZfRFpj2QqkCXmyC7AhmRKUsIwMe6Gvbp58rUObvaOU8TElKexOFh/jxJhSxLxhISWKDIr2H0d8Ui5GmcEBz2Go0zQJbnWY5IgTIRxk5IpXfepUMMXCiNvv7EWxYQR/J2WnIFdnoo2OFKZNp0RIf9Pv3Z7tUG5R1FGGrbntQb9Zeh7Dm11Fy4at5euf+PGvdt6TmHXeUNq2+rX9eGgbufqdVMiyKIc3z31K2g4uuxfrlPUZOfwcvIzScBP3pHpBevw6HL+cDm/GlzdykE8AMPq49y/fbh7sbvNi4f2MuTl360++vHXjt3yCDh8MbAfcXz/a1iugiq8ERd//IvVmjH20sEwin/Zj1mn6rci9HzXH3u/zyuznjt28HVyWz2Fyenp6fPTD7iQz/wlSqb4FqeefLqVT/W3nHZz2DcWcjDKJn8JlsVSj0avbXRVv5D8XFq0hYbWNHcNEq1PQhImzYbepWUlyJT40DBQzdysOzXX7rbb1apnV23bq3VgBdpd2ISe77tezSv0Z8PigOI5Z1OqY2mF3czP5wRxHAjCQpJaS57hORHmJ4htJJHRY0N1MDgTZMyVglfsll8770BHUa64FceulTtd39GGlgvdrmlcczlgg7Q5lSTdV+/KnnoPCaYJJVri9ZwLNehCqpIs0DKTkV1aohIjmboEUq3Dal+tCgSNk4howiDmYRaRUjJP8gIBsfl3LIRFbqUCJzyVKMpP4YdJHn4r6qF8QqodhM6oRVRPyZHLyC7SeZd25eilVcA3s5Dqw6aKK1OKN0z2P73NjB6W7cBs88LCLrhvt3wT4ggA+IQfOCzNNl64pDvRiwtW3RlKVRpFexeotChly2WWN9TTipkqeGAD6IERwZmSvecxfyIMbCHAl26cLeuDyFv7Pr9MztlIIkliNX5GvvzCc2NEhH5u9NTxWX/1LbMXUtVNkrU8ZjuP1KtEM/704YIDrP2U+Ub9rXgavrXrCNZOHJWnemNIymZ6pe+X5w9mA3MFS5Ug8nQX/BjAseD7xm2Rt1ykmqZJJsnHXwytdHUTYcwzJnttMzfsqm/OUz4nJHhzegeTK/zrlb0WH17Zf676I6WDMTK3vvS/nS2ajwsmapegOZe6uVavTxWczXbU/pXgUcF3W83PBH8/k8Y783vLTk0Pz0PjXw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_070620</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_070622</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861FDD556CE1178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861FDD557161178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_FUNC_CHILD_Get_Self_Blocked:tou_200_OK_P2" searchProperties="true" id="fd6b96a6-9e54-455b-9436-53d6118f7bec"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E8620BEC0D54A157E0401F0A079977E6</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E8620BEC0DE6A157E0401F0A079977E6:75BE341"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E8620BEC0D41A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E8620BEC0D41A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E8620BEC0D41A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E8620BEC0D54A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E8620BEC0D9CA157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E8620BEC0D54A157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E8620BEC0D9CA157E0401F0A079977E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jztgydgYPIEZwE5KS5oshG6Slx1Fvgaltmws2ZD8+somJkBJNt2ZTBhdX5177oeOdCZIHJnuQAjIJEu4NvZ6+r8mpraNAtow2+qf1QLc6NoIN1CIcDdEYZtAR9fGQuQw5kISLnu6iXCrgZH6u8HYxcjFTtM2u/e69gMyoaCVSxPp2iaOuHCrsD09z7ibEMGEy0kMwpXUnQ0uJ67ydEnNSe+fbVlWAbP+UsrUNQzaDIBCFNEmTWLjzDjwOQuEO2MLTmSewUvMQPT0l73r9bq5bjWTbGGYCCEDdQ3lEwi2+Kz3P9WbIRjzMNmuR4QnnFESsWdSkroEuUwCbRAtkozJZfwGNDYwKqEbsKENii3+WTdeA1TsPoh0QDITpCGWBNdgUwghA05Bm0/HPf3zxzq43XuTES7CJIvF0frPKAEvIEpSCBqizqxm93HEE+XqnwF1x5xGuWAFfC/HJCUUhHadQcg2EybU8AVCq9qvbUQ9YUD/pCVnxj5PRds4URmPLUDI/9Ov/V5tUX6QKIe+v0rsW+tOGhCG0/GjdfMwmY5Czx+a815FYd95S2rX6pf18aDu5uplExne+w/XAMtz9pjNv3x5nGPnHM3/7naeR/am4N/aQ/8b3JPp7Efstfz53cPQmJprJ7tBpmWjdvwcXAydq+v1I8efipZjYtvspP9k1qXBL41b7/4iT69WK+o8r8fOKG1ddFd3VjFpTy6KuZhNgif6wFZjH2+Cr3+1vw5IpzPYWN2fPzuf7sJ7uy1m7DsqHjvY8G4nl73XnPZzODTWcjDLHx6BynpZjsbY085Vv4h8X1pKCwsaYeXqpqU+CQlc6v1yVykrbq7EhwWuauZ27XfaJhr6I+TZ1gDbjo8shM/RADndruP47Vp/tiyOKI4SHrIyVqmw2/l5nyCNXQE8gKxRJDldgtDfQfSIJNqYT9XBSLiAm0QpeBtZHdP3LdTxTXvQtT27NRr43ghbluN0vKGufU/kFb/KBqGE7FC9rQP1ngJlKYNS4ss5F2rQhVQlWZEilxFuFqTJIVeXQFbqsGtaHdsQLE4jKAkbcRLkETTTZVoVyBDbX7NBqKisTNA0ySSJqlP4ZpLH3+p6KJ+AlQ6izGgIqqdw4jJCdTpvp+3sp13DD/KAlYdNFVdmjG6ZHH56nZlyWHYDs8uLClxz3235Q4gTAMY7/Izj0uziBQXbi15fsOrOUKrSr9u7Is1VMy+KvGqoUypmpuANbCDHmAHNlew93SQ/gRs7CONDN86O9VHknf2QXy6XfCaJhFiNn1YtP/DcmIEonxtjdXw2H33LHIRUdZOwkadso0i9SkrG7z5cqEtLP2W+Vj/rJAte23UCay+OylO9MSTji3JV3i9Pb8wGTRQsU4KYZPvgpwBOBT807oq84yLVND3kEt7+opVK19MJpUnO5djTK8O++lY85VMK7qvTbzCVwr9c2Rvx5pV9ezmZKR2Mib7zZf/t3GDVuFBQuwSruPT0jXp9quB8saf2LwRPC76F3xP8w0z6v5l/t+zV9Pg89H8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jztgydgYPIEZwE5KS5oshG6Slx1Fvgaltmws2ZD8+somJkBJNt2ZTBhdX5177oeOdCZIHJnuQAjIJEu4NvZ6+r8mpraNAtow2+qf1QLc6NoIN1CIcDdEYZtAR9fGQuQw5kISLnu6iXCrgZH6u8HYxcjFTtM2u/e69gMyoaCVSxPp2iaOuHCrsD09z7ibEMGEy0kMwpXUnQ0uJ67ydEnNSe+fbVlWAbP+UsrUNQzaDIBCFNEmTWLjzDjwOQuEO2MLTmSewUvMQPT0l73r9bq5bjWTbGGYCCEDdQ3lEwi2+Kz3P9WbIRjzMNmuR4QnnFESsWdSkroEuUwCbRAtkozJZfwGNDYwKqEbsKENii3+WTdeA1TsPoh0QDITpCGWBNdgUwghA05Bm0/HPf3zxzq43XuTES7CJIvF0frPKAEvIEpSCBqizqxm93HEE+XqnwF1x5xGuWAFfC/HJCUUhHadQcg2EybU8AVCq9qvbUQ9YUD/pCVnxj5PRds4URmPLUDI/9Ov/V5tUX6QKIe+v0rsW+tOGhCG0/GjdfMwmY5Czx+a815FYd95S2rX6pf18aDu5uplExne+w/XAMtz9pjNv3x5nGPnHM3/7naeR/am4N/aQ/8b3JPp7Efstfz53cPQmJprJ7tBpmWjdvwcXAydq+v1I8efipZjYtvspP9k1qXBL41b7/4iT69WK+o8r8fOKG1ddFd3VjFpTy6KuZhNgif6wFZjH2+Cr3+1vw5IpzPYWN2fPzuf7sJ7uy1m7DsqHjvY8G4nl73XnPZzODTWcjDLHx6BynpZjsbY085Vv4h8X1pKCwsaYeXqpqU+CQlc6v1yVykrbq7EhwWuauZ27XfaJhr6I+TZ1gDbjo8shM/RADndruP47Vp/tiyOKI4SHrIyVqmw2/l5nyCNXQE8gKxRJDldgtDfQfSIJNqYT9XBSLiAm0QpeBtZHdP3LdTxTXvQtT27NRr43ghbluN0vKGufU/kFb/KBqGE7FC9rQP1ngJlKYNS4ss5F2rQhVQlWZEilxFuFqTJIVeXQFbqsGtaHdsQLE4jKAkbcRLkETTTZVoVyBDbX7NBqKisTNA0ySSJqlP4ZpLH3+p6KJ+AlQ6izGgIqqdw4jJCdTpvp+3sp13DD/KAlYdNFVdmjG6ZHH56nZlyWHYDs8uLClxz3235Q4gTAMY7/Izj0uziBQXbi15fsOrOUKrSr9u7Is1VMy+KvGqoUypmpuANbCDHmAHNlew93SQ/gRs7CONDN86O9VHknf2QXy6XfCaJhFiNn1YtP/DcmIEonxtjdXw2H33LHIRUdZOwkadso0i9SkrG7z5cqEtLP2W+Vj/rJAte23UCay+OylO9MSTji3JV3i9Pb8wGTRQsU4KYZPvgpwBOBT807oq84yLVND3kEt7+opVK19MJpUnO5djTK8O++lY85VMK7qvTbzCVwr9c2Rvx5pV9ezmZKR2Mib7zZf/t3GDVuFBQuwSruPT0jXp9quB8saf2LwRPC76F3xP8w0z6v5l/t+zV9Pg89H8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6OQS8MtKkiB0CXb20yhdKYvK8c5AXcSm8YOl/76tUNDgdJuuxIS8snxd75z8WefcZSljudzDrkgjGph0NH/aVv2aYzh1HBxMzLceuwaLacRGXWEIozAcaLGqa6FnBcQUi4QFR3dkXsM25K/sW17tuXZ7Vq7bT/o2gRyLqGlS83StVWWUu6VYTt6kVOPIU64R1EG3BPYG/lXl5709FDFSe+ebViWAfPuTIi5Z5q4FgOGNMU1zDLzzNzzOYu5NyJTikSRw0vMmHf0l73L5bK2PK2xfGo6lmWZVtuUPjEn0xO9+63aDHFIE7ZZ9xFllGCUkmekSF2BmLFY89Mpy4mYZe9A26ZtKWgDVtjAtktPdPM1QMnuk0h7JHOODD5DdgV2CwnkQDFod7dhRz/5XAc3e8c5ojxhecYP1l+jBHQBKZtDbPAqs4rd5xGPlKt7BtgLKU4LThZwrcZkjjBw7UcOCVldEi6HL+Za2X5txasJA/yVlpyZuzwlbfNIZQIyBS7+T792e7VBmaC0gO5vjv0/N8nMaab+jfOwyBd10br7fZ9lfqeksOu8IbVt9cv6cFC3c/WyacKTH+vHIWtE44tbfz69GjYvrtvf19l0MvTd6OJXEEXLx/u7/LF1/jAp8HAYpk9+yv4+vyRuQp+iNVok5AE77cvv35bhuXk5TZ4f0n4+vmDLv4Y/V73rGV/+TCYsupjU+8/xeeOPTX/+nrGi8eg83z1k4yerdzMtTKfnN55vmsGw5+BVBN9g5YbLkLnre7xg1xN8S1qd15x2c9g3VnIwKqJHwKJaqtEIA+1c9guJj6VFWUhsJKWrN1f6xAVQoXfVLiUrXiHFh8SebOZmPWg1HKs36FtBu+/b9ebAci373PKtZrvdbA4alf5sWBxQ7DOaEBVLKexmfj4miDOPA40hNxaswDPg+geIARJIC+mtPBiMchgzqeCW03OtVsN1W25gDaxeYPfqdSsYDIJ2EAz6jq5dM3FDb3I/EZDvq7e7p963gMmcgJJ4NedcDjoXsiRPaFGI1K4tUI1CIS+BXOmw57ituslJNk9BETYzFhcp1OazeVkgk2/+HQNhXloJx3OWC5SWp/DdJA+/VfWQPjFRDlxl1APZUzhyGVlVOm/Sdo9eWhW8X8REHTZZXJETvGGy/+l1ZtSwbAdmmxfmdsV9u+WLEEcAzA/4mYel2caLF2QnenXByjtDqkq3au8Tqj3VisWiKBvaVIqZS3jTNq2mOQJcSNlbj9kfoOYWwvzUjbNlfRB5a9/nV4gZHQkkIJPjp5XLTzw3RsDVcyOUx2f12bfMXkhZNwErcczWT+WrRDH+8OGCPaz8pPmH/FuyPH5t1xGsnTgyT/nGEIRO1UrdL+t3ZgMzCUukILJ8F/wYwLHg+8ZtkbdchJymqBDw/hdNKV1HRxizgoow0EvDrvqWPMV6Dt6r0xuYUuFfruwVf/fK/nV1OZI6mCF960v+29kg5bhgkLs4Kbl09JV8fcrgdLqj9i8Ejwu+a38k+PuZdN+Y31p2anp4Hrr/Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_071016</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_071018</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E8620BEC0D55A157E0401F0A079977E6</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E8620BEC0D9DA157E0401F0A079977E6</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_403_FORBIDDEN_P2" searchProperties="true" id="c27e6ce4-309d-4538-86cf-fb4c8762d5bd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","USER_INACTIVE");
myTC.setPropertyValue("RequestorType","CLG");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861FDD558D71178E0401F0A07996787</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861FDD558C51178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861FDD558C51178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861FDD558C51178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861FDD558D71178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861FDD5591F1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861FDD558D71178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861FDD5591F1178E0401F0A07996787</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6MQJ0BzESClXFpmS2mh7c7My8p1DuBp4qSxw6W/fu1AKFDotishIZ8cf+c7F392g+M4sv2Ac8gETZjW7zT1f7DtWo4zqRph3XWNWq1GjCcIkVF1iDfB5w7yQkfX+pzn0GdcYCaauo2sqmEh+bu3LB85fr1acRz3t649QsYltHSpIF1bxhHjfhG2qecZ8xPMKfcZjoH7gvjjYHDtS08fl5z0VmPNsgiYtWZCpL5pkkoIBKKIVEgSmw1zz6cRcn9MpwyLPINNzJA39c3exWJRWVQrSTY1bYSQiTxT+oScTs/01rdyM4R9NknW6zZmCaMER/QVK1IDELMk1IJommRUzOIT0JZpIQVtwJIYxKqxM918C1Cw+yTSHsmMY4PPsFWCjWACGTAC2sOo39TPPtfB9d77DDM+SbKYH6y/RgnYHKIkhdDgZWYlu88jHilXqwHE7zMS5ZzO4UaNSYoJcO02gwldXlMuhy/kWtF+bcnLCQPylZY0zF2ekrZ5pDIdOgUu/k+/dnu1RnnEUQ4t/Gfq3Yrw79fXxQrdtdv3rxBd4XTq3QyaBYVd5zWpbas368NB3c7VZlP00LsLbER/13/NOAq81cPs0XyOuo5XZ8/d4OEm71x7QwK9Wcfu3Xnoakz7+CkLn2PykqBc8Ie8GnTDrn359P3bz1t64U1dbzi+SusjHv1l4kBYtEoSx4ue0I/zyfXlzZXXg/mg/xIN8WWO4tS++P7c/lW7jOPbx2t0dbmIogd35XxbvvC756r3eBGQwWA4mjo3i+ZbTrs57BtLORjnT3+AiHKpRqPf0XqyX1h8LC3KQkNjUrj6qdInLoAJvaV2KVnxcyk+NPRlM9frrntu9Tqdet3tOJbluF1UQ1YPBcjxvHPHdUr9WbM4oNhO2ISqWEph1/PzMUES+xxYCJkxT3IyA65/gNjBAmt9NpIHI2Ec7hOp4OdB1eucI8+1rYuOFdS6Vcex6z27XfdqXde1de0mEUM2zIKJgGxfvWt76j0CQlMKSuLVnHM56FzIkrzgeS4iqzLHFQa5vAQypcO+XXPrJqdxGoEibMZJmEdQSWdpUSCTr/9tAxNeWCknaZIJHBWn8GSSh9/KekifkCoHrjK6ANlTOHIZ1cp0Tqft7KZdwgd5SNVhk8UVGSVrJvuf3mZGDct2YLZ5EW6V3LdbvghxBMD8gJ95WJptvHBOd6KXF6y8M6SqtMr2vuDKSyWfz/OioY5SzEzCm5aJHHMMJJeyt7pPnoGZWwjzUzfOlvVB5K19n18uZmwssIBYjp9WLD/x3BgDV8+Nvjw+y8++ZfZCyroJWIpjtnYkXyWK8YcPF+IT5SfNt/JvkWThW7uOYO3EkXnKN4agbKpW6n5ZnZgNkkhYKgUxyXbBjwEcC75v3BZ5y0XIaXrKBZz+oimla+qYkCRnot/RC8Ou+hY8xSoF/83pHUyh8Jsre8lPXtk/B9djqYMx1re+9L+dDVqMCwG5i9OCS1NfytenDM6mO2q/IXhc8Nv1jwR/P5PWO/N7y05ND89D618=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6MQJ0BzESClXFpmS2mh7c7My8p1DuBp4qSxw6W/fu1AKFDotishIZ8cf+c7F392g+M4sv2Ac8gETZjW7zT1f7DtWo4zqRph3XWNWq1GjCcIkVF1iDfB5w7yQkfX+pzn0GdcYCaauo2sqmEh+bu3LB85fr1acRz3t649QsYltHSpIF1bxhHjfhG2qecZ8xPMKfcZjoH7gvjjYHDtS08fl5z0VmPNsgiYtWZCpL5pkkoIBKKIVEgSmw1zz6cRcn9MpwyLPINNzJA39c3exWJRWVQrSTY1bYSQiTxT+oScTs/01rdyM4R9NknW6zZmCaMER/QVK1IDELMk1IJommRUzOIT0JZpIQVtwJIYxKqxM918C1Cw+yTSHsmMY4PPsFWCjWACGTAC2sOo39TPPtfB9d77DDM+SbKYH6y/RgnYHKIkhdDgZWYlu88jHilXqwHE7zMS5ZzO4UaNSYoJcO02gwldXlMuhy/kWtF+bcnLCQPylZY0zF2ekrZ5pDIdOgUu/k+/dnu1RnnEUQ4t/Gfq3Yrw79fXxQrdtdv3rxBd4XTq3QyaBYVd5zWpbas368NB3c7VZlP00LsLbER/13/NOAq81cPs0XyOuo5XZ8/d4OEm71x7QwK9Wcfu3Xnoakz7+CkLn2PykqBc8Ie8GnTDrn359P3bz1t64U1dbzi+SusjHv1l4kBYtEoSx4ue0I/zyfXlzZXXg/mg/xIN8WWO4tS++P7c/lW7jOPbx2t0dbmIogd35XxbvvC756r3eBGQwWA4mjo3i+ZbTrs57BtLORjnT3+AiHKpRqPf0XqyX1h8LC3KQkNjUrj6qdInLoAJvaV2KVnxcyk+NPRlM9frrntu9Tqdet3tOJbluF1UQ1YPBcjxvHPHdUr9WbM4oNhO2ISqWEph1/PzMUES+xxYCJkxT3IyA65/gNjBAmt9NpIHI2Ec7hOp4OdB1eucI8+1rYuOFdS6Vcex6z27XfdqXde1de0mEUM2zIKJgGxfvWt76j0CQlMKSuLVnHM56FzIkrzgeS4iqzLHFQa5vAQypcO+XXPrJqdxGoEibMZJmEdQSWdpUSCTr/9tAxNeWCknaZIJHBWn8GSSh9/KekifkCoHrjK6ANlTOHIZ1cp0Tqft7KZdwgd5SNVhk8UVGSVrJvuf3mZGDct2YLZ5EW6V3LdbvghxBMD8gJ95WJptvHBOd6KXF6y8M6SqtMr2vuDKSyWfz/OioY5SzEzCm5aJHHMMJJeyt7pPnoGZWwjzUzfOlvVB5K19n18uZmwssIBYjp9WLD/x3BgDV8+Nvjw+y8++ZfZCyroJWIpjtnYkXyWK8YcPF+IT5SfNt/JvkWThW7uOYO3EkXnKN4agbKpW6n5ZnZgNkkhYKgUxyXbBjwEcC75v3BZ5y0XIaXrKBZz+oimla+qYkCRnot/RC8Ou+hY8xSoF/83pHUyh8Jsre8lPXtk/B9djqYMx1re+9L+dDVqMCwG5i9OCS1NfytenDM6mO2q/IXhc8Nv1jwR/P5PWO/N7y05ND89D618=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oxQ6wgyIbPGGCrp1v5yJ6QLCadOSpID8+p0UioDo0TPDDJPVlW9965IvOeUojpygyTkwQRKqddt1/Z/QqlmO44DhISc0yp5dNV5DFwzXBcu2K47vga9rXc4z6FIuEBV13bFs17At+RvYdmD5gVcp1Xznj649AeMSWrqULF1bxBHlQR62rmeMBgnihAcUxcADgYN+8+Y6kJ4BKjjpjdMVyzwga4yFSAPTxKUQMEQRLuEkNk/NHZ/TkAd9MqJIZAzWMUNe19d75/N5ae6WEjYyHcuyTKtmSp+Qk9Gx3jgqNkPYpcNktT5DNKEEo4gskSJ1A2KchFozGiWMiHH8CbRt2paCNmCBDWyX6bFuvgfI2X0TaYck48jgY2QXYA8wBAYUg/b40K3rx9/r4GrvgCHKhwmL+d76Z5SAziBKUggNXmRWsPs+4oFyNU4BB12Ko4yTGdyqMUkRBq7dMRiSxTXhcvhCruXt1xa8mDDAP2nJqbnNU9I2D1SmTUbAxf/p13avVihPKMqgcXcS34fNq9fJoMXAvkifLq5Z9Qkuf4fzek5h23lFatPq9Xp/UDdztd40ue7w5Z9kZPUG5LV34aZvy0nv5iStvM4GV5MZmjzxdC4e7wb9+47jTTu/7qPfltutpjP36TpLbsrTqx6q3PSmD204irznc180b+0X26s05/Nyz2TmqLbsDuKaoDG1BF1ePFbsqHM/X1wOX2r3l28nZtn9FT1POr9eqlPRQ2LZ69HmZXx0azl3bOCdX/UvO1l7/uiWX+rvOW3nsGss5KCfvU4Ai2KpRqPb1jqyX0h8LS3KQkJjmLsGqdInLoAKvaF2KVkJMik+JAxkM1fr82rF7rTbnlezO7btV8+tsmV3rKbl12oVv+oX+rNisUfxLKFDomIphV3Nz9cEcRxwoCEwY5ZkeAxc/wKxjQTSuvRBHoyEchgkUsFb5x3fsj2n5VXalue22i3PcWte02q7Z+dlv6Vrt4no0R5rDgWwXfUu76j3A2CSElASr+acy0HnQpZkimaZiOzSDJUoZPISYEqHA6dc9UxO4jQCRdiMkzCLoJSO07xAJl/9OwbCPLcSjtOECRTlp/DTJPe/FfWQPiFRDlxl1ALZUzhwGZWLdD6kXT54aRXwzSwk6rDJ4gpG8IrJ7qf3mVHDshmYTV6Y2wX3zZYfQhwAML/gZ+6XZhMvnJGt6MUFK+8MqSqNor1TVJqWstksyxvqK8VkEt60Tcs3+4AzKXtvg+RfoOYGwvzWjbNhvRd5Y9/ll4kx7QskIJbjp+XLbzw3+sDVc6Mrj8/iu2+ZnZCybgIW4pDtLJKvEsX4y4cLDrDyk+Y7+TdPWPjergNYW3FknvKNIQgdqZW6X94+mQ2cSFgiBTFh2+CHAA4F3zVuirzhIuQ0vWYCPv+iKaWr6wjjJKOi29Zzw7b65jzFWwrBu9MHmFzh11f2gn96ZT/fXPelDsZI3/iS/3Y2SD4uGOQuTnIudX0hX58yOB1tqf2a4EHBr555Xwn+biaND+aPlq2a7p+Hxl8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_070752</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_070754</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861FDD558D81178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861FDD559201178E0401F0A07996787</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_FUNC_YOUTH_BAU_Get_Self_200_OK_P1" searchProperties="true" id="8e5d5c59-162e-4432-92c5-81d8b2567f02"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8937FC1529BE0401F0A07996E28:916853E8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5639A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5639A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5639A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB564BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5693A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB564BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5693A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH5nSLwq0I8wgiKcqiIB69OVOThog2ia1SaHy629SbAVEL94ZZpjs7qy99kdWcspAFFpehzGUcEyJ4vda6j9u3Q5AA5ha3XYtrWa7DQ3UG3UN2q5jOsBEwAaq4jOWIp8wDghvqZZh2pppiN/UNDzH8iy72mw2nlTlHiVMQAuXqqEqWRQS5uVhW2qaEI8ChplHQISYx6E36QyuPeHpgYKT2j7dsMwDJu0F57Gn67AaIIjCEFYhjfRTfcfnNGDeBM8J4GmC3mMGrKW+712tVtWVXaXJXLcMw9ANVxc+AcPzE7X9q9iMAp/M6GbdBYQSDEGI10CSGiC+oIHSCec0wXwRfQFt6qYhoTWUQQ2aNXKi6h8BcnZHIu2QTBjQ2AKYBdgYzVCCCETK3dhvqSfHdXCzd5oAwmY0idje+meUEFmikMYo0FiRWcHueMQD5WqfIuj5BIYpw0s0lGMSA4iYMkrQDGfXmInhC5iSt1/JWDFhCP6kJaf6Nk9BWz9QmR6eI8b/T7+2e7VBuQdhitrN4RX2r27hOhjdDCI2/HPN3d9T+zZO/VZOYdt5Q6ps9ft6f1DLuXrflAWX5sPtbfg8MP3ekPzusUE2uBy/IfMZv2aR03vK7irrJ/8xJfQ2cZ/wePxsku5k+fBQc67CdHg+uzL0+7tu15j+Gpmrs8q0Ewej+3h50a0YweBmaNyN7h6D5vO68eLqI9yE+uVbcFHhwHLXkzt85Q/6kzMKnGBizRrzhj2rrNzK8/RX+FJz1l2jv8IXWXP8yEKLtj5y2s5h11jIwST9+4wgL5ZyNPye0hf9Avx7aZEWHGiz3NWLpT4xjghX23KXlBUvFeKDA080c7M+b9bNbqN75tRrZx2z3zk3aobZNzqG47o158ws9GfDYo9il5IZlrGkwm7m53uCMPIYIgFKtCVN4QIx9RvEHuBA8clYHAxKGJpSoeBd1+o3HKffdJtOzbI7zaZrWeeNjmmZ54bjnKvKkPIbcpN0Zhwlu+pt76j3GEEcYyQlXs45E4POuCjJK1imPDSrS1AlKBWXQCJ12LNqTUdnOIpDJAnrEQ3SEFXjRZwXSGebf0sDkOVWzGBMEw7C/BR+meT+t6IewifA0oHJjM6Q6Ck6cBmZRTpfp13fTruA76QBlodNFJcnGG6Y7H76mBk5LOXAlHlBVg5HueWHEAcA9G/46fulKeMFS7wVvbhgxZ0hVKVdtPcVVF+r6XKZ5g1tSMVMBLxu6kZDnyCYCtl7m9IXRPQSQj/qxilZ70Uu7bv8Ur4gEw44isT4KfnyiOfGBDH53PDF8cmOfcvshBR14yjjh2zdULxKJONvHy7Qg9JPmEfib0WT4KNdB7C24og8xRuDYzKXK3m/vH0xG5AKWCwEkSbb4IcADgXfNZZFLrlwMU1/U46+/qJIpWupAEKaEu731Nywrb45T/4WI+/D6RNMrvDvV3bGvryy/wyuJ0IHI6CWvvi/nTWcjwtEYhfDOZeWmonXpwhO5ltq/07wsODb7neCv5tJ+5P5s2Wrpvvnof0v</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH5nSLwq0I8wgiKcqiIB69OVOThog2ia1SaHy629SbAVEL94ZZpjs7qy99kdWcspAFFpehzGUcEyJ4vda6j9u3Q5AA5ha3XYtrWa7DQ3UG3UN2q5jOsBEwAaq4jOWIp8wDghvqZZh2pppiN/UNDzH8iy72mw2nlTlHiVMQAuXqqEqWRQS5uVhW2qaEI8ChplHQISYx6E36QyuPeHpgYKT2j7dsMwDJu0F57Gn67AaIIjCEFYhjfRTfcfnNGDeBM8J4GmC3mMGrKW+712tVtWVXaXJXLcMw9ANVxc+AcPzE7X9q9iMAp/M6GbdBYQSDEGI10CSGiC+oIHSCec0wXwRfQFt6qYhoTWUQQ2aNXKi6h8BcnZHIu2QTBjQ2AKYBdgYzVCCCETK3dhvqSfHdXCzd5oAwmY0idje+meUEFmikMYo0FiRWcHueMQD5WqfIuj5BIYpw0s0lGMSA4iYMkrQDGfXmInhC5iSt1/JWDFhCP6kJaf6Nk9BWz9QmR6eI8b/T7+2e7VBuQdhitrN4RX2r27hOhjdDCI2/HPN3d9T+zZO/VZOYdt5Q6ps9ft6f1DLuXrflAWX5sPtbfg8MP3ekPzusUE2uBy/IfMZv2aR03vK7irrJ/8xJfQ2cZ/wePxsku5k+fBQc67CdHg+uzL0+7tu15j+Gpmrs8q0Ewej+3h50a0YweBmaNyN7h6D5vO68eLqI9yE+uVbcFHhwHLXkzt85Q/6kzMKnGBizRrzhj2rrNzK8/RX+FJz1l2jv8IXWXP8yEKLtj5y2s5h11jIwST9+4wgL5ZyNPye0hf9Avx7aZEWHGiz3NWLpT4xjghX23KXlBUvFeKDA080c7M+b9bNbqN75tRrZx2z3zk3aobZNzqG47o158ws9GfDYo9il5IZlrGkwm7m53uCMPIYIgFKtCVN4QIx9RvEHuBA8clYHAxKGJpSoeBd1+o3HKffdJtOzbI7zaZrWeeNjmmZ54bjnKvKkPIbcpN0Zhwlu+pt76j3GEEcYyQlXs45E4POuCjJK1imPDSrS1AlKBWXQCJ12LNqTUdnOIpDJAnrEQ3SEFXjRZwXSGebf0sDkOVWzGBMEw7C/BR+meT+t6IewifA0oHJjM6Q6Ck6cBmZRTpfp13fTruA76QBlodNFJcnGG6Y7H76mBk5LOXAlHlBVg5HueWHEAcA9G/46fulKeMFS7wVvbhgxZ0hVKVdtPcVVF+r6XKZ5g1tSMVMBLxu6kZDnyCYCtl7m9IXRPQSQj/qxilZ70Uu7bv8Ur4gEw44isT4KfnyiOfGBDH53PDF8cmOfcvshBR14yjjh2zdULxKJONvHy7Qg9JPmEfib0WT4KNdB7C24og8xRuDYzKXK3m/vH0xG5AKWCwEkSbb4IcADgXfNZZFLrlwMU1/U46+/qJIpWupAEKaEu731Nywrb45T/4WI+/D6RNMrvDvV3bGvryy/wyuJ0IHI6CWvvi/nTWcjwtEYhfDOZeWmonXpwhO5ltq/07wsODb7neCv5tJ+5P5s2Wrpvvnof0v</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQhBQCUUECUrZs26ULdG/blyvjDMTdxKa2E0J//TqhSYGlve2VkJAn4zNnPnzsM4HiqO71hAAuCaPayO/o/7abCwRBq24EKHCNU6fhGvP6HBunGDUhqM8XloV0bSREAiMqJKKyo9ct2zFsS/1mtuU16l69UXOb7oOu/QIuFLRyqVm6lsURFV4RtqMnnHoMCSI8imIQnsTetHd95SlPD5Wc9O7ZlmURkHdDKVeeaeJaABiiCNcwi80zc8/nLBDelCwpkgmHl5iB6Ogve9frdW3t1BhfmnXLskyrbSqfQJDlV737pdwMwYgu2HY9QJRRglFEnlFO6hpkyAKtFy0ZJzKM34C2TdvKoQ3IsIHtU/pVN18DFOw+iLRHkgtkiBDZJdgEFsCBYtBuJ6OO/vVjHdzunXFExYLxWBysP0cJaAoRW0FgiDKzkt3HEY+Uq3sG2BtRHCWCpPAjH5MVwiC0Gw4Lkl0RoYYvEFrRfi0T5YQB/kxLzsxdnoq2eaQyPlmCkP+nX7u92qL8QlEC3RZpb8Q/mT8Uy+/Z5M7hg3v/J/b5N7A6BYVd5y2pqtUv68NBrebqZVN6aZ4slg+XYZy2RvVn53LduH/4zb/fhWTDGnI9Tk/qq6sbdCF6y9HDI1um/OL24u5mFrj3Jy0a4Fs7DB/C9T3fXH25H2/C22Qc8m831nC+uhCX2c+hAP9ucsHW96g55RdsuBxe+elzmg2sE/LIx9IOmufBNeezb1LSxJ1c3932olv55fxmnGbOHGbtGXrm8bPzJDqvOe3msG8s5WCazB8By3KZj8bI14aqX0i+Ly25hQTGonD1Vrk+CQlU6t18Vy4rXqLEhwSeauZ2fd5q2gN30G80207PHvbOrVPLHlo9q9Funzb6dqk/WxYHFAeMLkgeK1fY7fy8TxDHngAaADdSluAQhP4Ooo8k0kZ0og4GowJmTCm447vN4aDfttq+5Qwsx2/Zfdd2h+d9u2/33IGu/WByTMe8t5DA99Xb2VPvCWCyIpBLfD7nQg26kKokTyhNZGTXUlSjkKhLgOc67NVPWw1TkHgVQU7YjFmQRFBbhauiQKbY/tcNhEVhJQKvGJcoKk7hm0kefivroXwCkjuIPKM+qJ7CkcvILtN5O+3mbtolfC8JSH7YVHElJ3jLZP/T68zkw1INTJUXFtVwVFs+CXEEwHyHn3lYmipekJKd6OUFq+4MpSrdsr1PqPZUS9I0KRrq5orJFbxpm5ZrTgEnSvY2M/YbqFlBmB+6cSrWB5Er+z6/RIZ0KpGEWI2fViw/8NyYgsifGyN1fLKPvmX2Qqq6ScjkMdsgUq+SnPG7Dxfs4dxPmW/U35rx4LVdR7B24qg81RtDErrMV/n9snljNjBTsEQJIuO74McAjgXfN1ZFrrhINU3zRMLbX7Rc6To6wpglVI58vTDsqm/BU25W4L06/QVTKPzLlZ2JN6/su+urqdLBGOmVL/lvZ4MU44JB7RKk4NLRM/X6VMHpckftXwgeF3yn/Z7g72fS/cv8t2WnpofnofsH</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065222</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065224</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB564CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5694A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_FUNC_YOUTH_SAU_Get_Self_200_OK_P1" searchProperties="true" id="58ce5055-0bfe-4906-a247-c84a5244e475"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Self");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB570FA1FAE0401F0A059945B1:FBFB4D89"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C8937FC7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C8937FC7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C8937FC7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C8937FD9529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB56D9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C8937FD9529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB56D9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4jSx1HIBQJJVJC4N52WzhKYYedl5ToHcEkcGjs0zK9fOzQUKO22KyEhnxx/5zsXf/YVQ3FkeW3GIOUkoYrfa6r/2M6DgZ2HhmZbgLSa3cAaqoagIde2q6HVsG3bUBWfsQx8yjiivKlahlnVTEP8Jqbh2ZZnORWz5vxWlZ+QMgEtXCpiVx5HlHlF2KaapdRLECPMoygG5nHsBe27W094eqjkpLaudiyLgGlryfna03VcCQFDFOEKTmL9Sj/yuQqZF5AFRTxL4SVmyJrqy97n5+fKc7WSpAvdMgxDN1xd+ISMLC7V1kW5GUKfzpPduotoQglGEfmDJKk74MskVNrRIkkJX8bvQJu6aUhoDXKsYbNGL1X9NUDB7pNIRyRThjS2RGYJNoY5pEAxKNOx31QvP9fB3d5JiiibJ2nMTtZfowR0A1GyhlBjZWYlu88jnilX6wqw51McZYxsYCTHZI0wMOVHCnOS3xImhi9kStF+JWflhAH+Skuu9EOegrZ+pjI9sgDG/0+/Dnu1Q/mJogxaUHccf9jpoLsHt079m1ntnrtoOmo84WZB4dB5R2rf6pf16aDu5+pl02DwFNxsxv2VtY4nwWw6ad99o+4WGv4qtcfcGrk9PzVmP+L+ZDnLe9++PQ7vh4/TbRZfUyuYfycWIdaNT6/Nv+oX7iBYstmv2t/54r4ztLouRqto7LcXq+Gf6zx/XG+Dzp+AjqxfxmqwnY6muDZ08t+/8Pf5Ch43OGMrI3OuB9Fws70Y8eqDacW1Kpltpp15+DxizdecDnM4NpZyEGQPj4B5uZSj4feUgegX4h9Li7SQUJsXrt5a6hPjQLnakrukrHiZEB8SeqKZu3XfqZtdx602Bj3XttxO36gZ5sBoGw3Xrfctp9SfHYsTit2EzomMJRV2Nz8fE8Sxx4CGkGqbJMNLYOoHiD3EkeLTsTgYCWUwSYSCt/v1vmMYVt+yO/2BaZr1eq3WbfTadbttdwemqowSfk/v0/acQ3qs3tUj9R4DJmsCUuLlnDMx6IyLkjyhTcYjs7JBFQqZuARSqcOeVXNsnZF4HYEkrMdJmEVQWS/XRYF0tvu3NIRZYSUMr5OUo6g4he8mefqtrIfwCYl0YDKjDoiewpnLyCzTeT/t+mHaJXw7C4k8bKK4PCV4x+T40+vMyGHZD8w+L8zMkvt+yxchzgDoH/DTT0uzjxduyEH08oIVd4ZQlVbZ3idUeapkm01WNLQhFTMV8LqpGw09AJwJ2dtOkhVQfQ+hf+rG2bM+iby3H/PL+JIGHHGIxfgpxfITz40AmHxu+OL45J99yxyFFHXjkPNztm4kXiWS8YcPF+xh6SfMP8Tfc5KGr+06g3UQR+Qp3hic0IVcyftl+85s4ETAEiGISXoIfg7gXPBj477Iey5cTNNDxuH9L4pUuqaKME4yyv2eWhgO1bfgybdr8F6d3sAUCv9yZefs3St7dncbCB2Mkbr3Jf/trJFiXDCIXYwUXJpqLl6fIjhdHKj9C8Hzgt9tfCT4x5m03pjfWg5qenoeWv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4jSx1HIBQJJVJC4N52WzhKYYedl5ToHcEkcGjs0zK9fOzQUKO22KyEhnxx/5zsXf/YVQ3FkeW3GIOUkoYrfa6r/2M6DgZ2HhmZbgLSa3cAaqoagIde2q6HVsG3bUBWfsQx8yjiivKlahlnVTEP8Jqbh2ZZnORWz5vxWlZ+QMgEtXCpiVx5HlHlF2KaapdRLECPMoygG5nHsBe27W094eqjkpLaudiyLgGlryfna03VcCQFDFOEKTmL9Sj/yuQqZF5AFRTxL4SVmyJrqy97n5+fKc7WSpAvdMgxDN1xd+ISMLC7V1kW5GUKfzpPduotoQglGEfmDJKk74MskVNrRIkkJX8bvQJu6aUhoDXKsYbNGL1X9NUDB7pNIRyRThjS2RGYJNoY5pEAxKNOx31QvP9fB3d5JiiibJ2nMTtZfowR0A1GyhlBjZWYlu88jnilX6wqw51McZYxsYCTHZI0wMOVHCnOS3xImhi9kStF+JWflhAH+Skuu9EOegrZ+pjI9sgDG/0+/Dnu1Q/mJogxaUHccf9jpoLsHt079m1ntnrtoOmo84WZB4dB5R2rf6pf16aDu5+pl02DwFNxsxv2VtY4nwWw6ad99o+4WGv4qtcfcGrk9PzVmP+L+ZDnLe9++PQ7vh4/TbRZfUyuYfycWIdaNT6/Nv+oX7iBYstmv2t/54r4ztLouRqto7LcXq+Gf6zx/XG+Dzp+AjqxfxmqwnY6muDZ08t+/8Pf5Ch43OGMrI3OuB9Fws70Y8eqDacW1Kpltpp15+DxizdecDnM4NpZyEGQPj4B5uZSj4feUgegX4h9Li7SQUJsXrt5a6hPjQLnakrukrHiZEB8SeqKZu3XfqZtdx602Bj3XttxO36gZ5sBoGw3Xrfctp9SfHYsTit2EzomMJRV2Nz8fE8Sxx4CGkGqbJMNLYOoHiD3EkeLTsTgYCWUwSYSCt/v1vmMYVt+yO/2BaZr1eq3WbfTadbttdwemqowSfk/v0/acQ3qs3tUj9R4DJmsCUuLlnDMx6IyLkjyhTcYjs7JBFQqZuARSqcOeVXNsnZF4HYEkrMdJmEVQWS/XRYF0tvu3NIRZYSUMr5OUo6g4he8mefqtrIfwCYl0YDKjDoiewpnLyCzTeT/t+mHaJXw7C4k8bKK4PCV4x+T40+vMyGHZD8w+L8zMkvt+yxchzgDoH/DTT0uzjxduyEH08oIVd4ZQlVbZ3idUeapkm01WNLQhFTMV8LqpGw09AJwJ2dtOkhVQfQ+hf+rG2bM+iby3H/PL+JIGHHGIxfgpxfITz40AmHxu+OL45J99yxyFFHXjkPNztm4kXiWS8YcPF+xh6SfMP8Tfc5KGr+06g3UQR+Qp3hic0IVcyftl+85s4ETAEiGISXoIfg7gXPBj477Iey5cTNNDxuH9L4pUuqaKME4yyv2eWhgO1bfgybdr8F6d3sAUCv9yZefs3St7dncbCB2Mkbr3Jf/trJFiXDCIXYwUXJpqLl6fIjhdHKj9C8Hzgt9tfCT4x5m03pjfWg5qenoeWv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/A4jx1j2eAAnsAM5tKyDeQCTbt92VHkY1BjS8SSDOTXr2xiBwjJpjuTDKPjo+9856JPuhA4iV2/JwSkknJmjAcd8x839Oq4Hjasluc2rEZ0H1oYotDywHWh6bZwC5BpjIVQMGZCYiY7poucuuUg/Td3kO+5fh3VHFT/ZRp3kAoNrV1qetcmiZnwi7AdU6XM51hQ4TOcgPAl8We9yaWvPX1ccjK7FzuWRcC0u5Ry5ds2qYVAII5JjfDEvrAPfC5C4c/ogmGpUniOGYqO+bx3vV7X1vUaTxe2ixCyUdvWPqGgizOz+6ncDOGYRXy37mPGGSU4pk84JzUBueSh0YsXPKVymbwB7dgOyqEt2BCLOA12ZtovAQp2H0Q6IJkKbIkldkqwW4ggBUbA+H477phnH+vgbu88xUxEPE3E0frPKAHLIOYrCC1RZlay+zjiiXJ1L4D4Y0ZiJWgG03xMVpiAMK5TiOjmkgo9fKEwivYbG1FOGJA/acmFvc9T07ZPVGZAFyDk/+nXfq92KHc4VtDNmg+2cvkPe3Q9vTyf/+Kb4UN9S8O/pqhTUNh33pGqWv28Ph7Uaq6eN0UKzSfnHpfboYqGlyppzL9Nf2dT1Uju4i/rvmJOKnv3Cabb4fxqvPl65arvTzdP9dHwwWnN5psr+8s0nqCMjm4+8cBLbgNn8O1zg6PJdjn9+3t/lD091PuNaLH4HLvRbxFF7MtDOIHk7hLY4ob9uN7eJdfxzY2D1nzpzYIfrSBYDRefxE8VL74+oswe97Zp8BP1Reclp/0cDo2lHMzU/W8gslzmozEeGCPdLyzfl5bcQkMrKlz9Va5PQgKTZjfflcuKr7T40NDXzdyth61zp9/sB975oN1zRr0haiBnhHrIa7cbXuCU+rNjcUSxz1lE81i5wu7m532CJPEFsBBSK+OKLEGY7yAOsMTGmN3qg8GZgDnXCu64aOggt+22XC9AbcdrtvQ/GraCdjsYNYemMeXyil2lvUhCeqje9QP1vgVCVxRyic/nXOhBF1KX5BFnSsZOLcM1BkpfAmmuw77baHm2oMkqhpywnfBQxVBbLVdFgWyx+3UtTERhpYKseCpxXJzCN5M8/lbWQ/uENHcQeUYB6J7CicvILdN5O+3z/bRL+J4KaX7YdHFlSsmOyeGnl5nJh6UamCovIqrhqLb8IcQJAPsdfvZxaap4YUb3opcXrL4ztKp0y/Y+4tpjTWWZKhrazBUz1fC2Y6OmPQOitOxt5/wBmF1B2B+6cSrWR5Er+yE/JZdsJrGERI+fUSw/8NyYgcifG2N9fDYffcschNR1k7CRp2z9WL9KcsbvPlyIT3I/bb7WP2uehi/tOoG1F0fnqd8YkrJFvsrvl+0bs0G4hqVaEHm6D34K4FTwQ2NV5IqL1NN0ryS8/cXIla5jYkK4YnI8MAvDvvoWPOV2Bf6L0yuYQuGfr+yNePPK/jm5nGkdTLBZ+dL/drZoMS4E9C5BCy4dc6Nfnzo4W+yp/TPBV4Lfatebo37Tc9tBJfjNdvt86LaqAh5k0n1lfm3Zq+nxeej+Cw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065227</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065229</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C8937FDA529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB56DAA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_FUNC_NONCLG_FAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="064d970f-4f5f-4dd8-9757-393c7b147dc8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB57AAA1FAE0401F0A059945B1:90F25B8D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5715A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5715A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5715A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5727A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5774A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5727A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5774A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIBUJKVJDCpTPp0Cu0Q3k5cp0NuJM4IbaBztcfOzQpMLSncyQk5J3ttde+eNlnDCWx4weMQc5JSrWw39b/Aeep4SFsGeDartFooSfjqRHNjDp26h54jg0zW9dCxgSElHFEeVt3LLtu2Jb8jW3Ldx2/7tSadXuqaw+QMwktXWqWrm2SmDK/CNvWRU79FDHCfIoSYD7H/ii4HPrS00clJ71ztmVZBMw7C84z3zRxLQIMcYxrOE3MM3PP5yxi/ojMKeIih9eYEWvrr3vX63VtXa+l+dx0LMsyrZYpfSJG5l/1zpdyM0QhnaXbdQ/RlBKMYvIbKVKXwBdppAXxPM0JXyTvQNumbSloAzbYwHaDftXNtwAFu08i7ZHMGTLYAtkl2B3MIAeKQbu/C9v61891cLt3nCPKZmmesIP131ECuoI4zSAyWJlZye7ziEfK1TkD7IcUx4KRFVypMckQBqbd5DAjmyFhcvgiphXt1zasnDDAf9OSM3OXp6RtHqlMn8yB8f/Tr91ebVEeUCygM12g2cVzP2hQC4Xp93R4Fd08k2fPfblsFxR2nbekqla/rg8HtZqr103d6WNjvez/cCewGQ2Xvcn0ZDo6EcHJbdS8fnBWpDcWo0m6XocXzKRP0/uhOHGbQfe7Pb/duI/jFr25rrfwywtfDr+MHlGv/rtlS6QevY9ultS8AIfFXJzbdXedPCzW8fnAnf8anD/+xL+zoPttEk1mvZVwvW/9wc2PKb/3kruYrTa3X57Fz7vmfVeMQjPMssXl7XjdfstpN4d9YykHI/H0DJiXSzUaYV87l/1C/GNpURYSGbPC1c+UPjEOlOsdtUvJii+k+JDIl83crgenTbvn9bqu53iBfR4MrIZln1uB5bZaDbdrl/qzZXFAsZfSGVGxlMJu5+djgjjxGdAIcmOVCrwApn+A2EccaSG9kwcjpQzGqVTwgeJqdVvN+mmr0fe6ruM4DcvxeoFrdwddqcNXKb+m13kw45Dvq3d9T73vAJOMgJJ4NedMDjrjsiRLtBI8tmsrVKMg5CWQKx32ncapazKSZDEowmaSRiKGWrbIigKZbPvvGAizwkoYztKco7g4he8mefitrIf0iYhyYCqjLsiewpHLyCnTeT/t5m7aJXwgIqIOmywuzwneMtn/9DYzaliqganywqwajmrLX0IcATA/4GcelqaKF63ITvTygpV3hlSVTtneJaota2K1EkVDPaWYuYQ3bdPyzBFgIWXvZZz+AmpWEOanbpyK9UHkyr7PT/AFHXHEIZHjpxXLTzw3RsDUcyOUx2fz2bfMXkhZNw4bfszWi+WrRDH+8OGCfaz8pPlG/q3TPHpr1xGsnTgyT/nG4ITO1UrdLy/vzAZOJSyRgpjmu+DHAI4F3zdWRa64cDlNT4LD+180pXRtHWGcCsrDvl4YdtW34MlfMvDfnP6AKRT+9cresHev7MnlcCR1MEF65Uv+29kgxbhgkLsYKbi09Y18fcrgdL6j9q8Ejwu+7X4k+PuZdP4w/2nZqenheej8Cw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIBUJKVJDCpTPp0Cu0Q3k5cp0NuJM4IbaBztcfOzQpMLSncyQk5J3ttde+eNlnDCWx4weMQc5JSrWw39b/Aeep4SFsGeDartFooSfjqRHNjDp26h54jg0zW9dCxgSElHFEeVt3LLtu2Jb8jW3Ldx2/7tSadXuqaw+QMwktXWqWrm2SmDK/CNvWRU79FDHCfIoSYD7H/ii4HPrS00clJ71ztmVZBMw7C84z3zRxLQIMcYxrOE3MM3PP5yxi/ojMKeIih9eYEWvrr3vX63VtXa+l+dx0LMsyrZYpfSJG5l/1zpdyM0QhnaXbdQ/RlBKMYvIbKVKXwBdppAXxPM0JXyTvQNumbSloAzbYwHaDftXNtwAFu08i7ZHMGTLYAtkl2B3MIAeKQbu/C9v61891cLt3nCPKZmmesIP131ECuoI4zSAyWJlZye7ziEfK1TkD7IcUx4KRFVypMckQBqbd5DAjmyFhcvgiphXt1zasnDDAf9OSM3OXp6RtHqlMn8yB8f/Tr91ebVEeUCygM12g2cVzP2hQC4Xp93R4Fd08k2fPfblsFxR2nbekqla/rg8HtZqr103d6WNjvez/cCewGQ2Xvcn0ZDo6EcHJbdS8fnBWpDcWo0m6XocXzKRP0/uhOHGbQfe7Pb/duI/jFr25rrfwywtfDr+MHlGv/rtlS6QevY9ultS8AIfFXJzbdXedPCzW8fnAnf8anD/+xL+zoPttEk1mvZVwvW/9wc2PKb/3kruYrTa3X57Fz7vmfVeMQjPMssXl7XjdfstpN4d9YykHI/H0DJiXSzUaYV87l/1C/GNpURYSGbPC1c+UPjEOlOsdtUvJii+k+JDIl83crgenTbvn9bqu53iBfR4MrIZln1uB5bZaDbdrl/qzZXFAsZfSGVGxlMJu5+djgjjxGdAIcmOVCrwApn+A2EccaSG9kwcjpQzGqVTwgeJqdVvN+mmr0fe6ruM4DcvxeoFrdwddqcNXKb+m13kw45Dvq3d9T73vAJOMgJJ4NedMDjrjsiRLtBI8tmsrVKMg5CWQKx32ncapazKSZDEowmaSRiKGWrbIigKZbPvvGAizwkoYztKco7g4he8mefitrIf0iYhyYCqjLsiewpHLyCnTeT/t5m7aJXwgIqIOmywuzwneMtn/9DYzaliqganywqwajmrLX0IcATA/4GcelqaKF63ITvTygpV3hlSVTtneJaota2K1EkVDPaWYuYQ3bdPyzBFgIWXvZZz+AmpWEOanbpyK9UHkyr7PT/AFHXHEIZHjpxXLTzw3RsDUcyOUx2fz2bfMXkhZNw4bfszWi+WrRDH+8OGCfaz8pPlG/q3TPHpr1xGsnTgyT/nG4ITO1UrdLy/vzAZOJSyRgpjmu+DHAI4F3zdWRa64cDlNT4LD+180pXRtHWGcCsrDvl4YdtW34MlfMvDfnP6AKRT+9cresHev7MnlcCR1MEF65Uv+29kgxbhgkLsYKbi09Y18fcrgdL6j9q8Ejwu+7X4k+PuZdP4w/2nZqenheej8Cw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jxnjD2wMnsCMcaBLk6ZJTJNsX3aEfAG1tgSSDIRfv7KJHaAkm+wMM4yur84990NHOhcoS50gFAK4JIxqo4uu/k/Ha06blmcbrZblG27S9o12y0mMZgI2wsjrJJ6jayMhchhRIRGVXd2x7KZhW+o3tq3Ac4Km23DbnZ+6dg9cKGjl0rB0bZOlVARl2K6ecxowJIgIKMpABBIHcfjtKlCeAao46b3zHcsyIO/NpVwEpokbCWBIU9zALDPPzQOf80QEMZlRJHMOzzET0dWf967X68a62WB8ZjqWZZlWx1Q+iSCzz3rvU7UZkhGdst06QpRRglFKtqgg9Q3knCVamM4YJ3KevQJtm7ZVQBuwwQa2XfpZN18ClOzeiXRAkgtkiDmyK7A7mAIHikH7cTfq6p/f18Hd3jFHVEwZz8TR+mOUgK4gZQtIDFFlVrF7P+KJcvXOAQcjitNckBVcF2OyQBiEdsNhSjZXRKjhS4RWtl/biGrCAH+kJefmPk9F2zxRmQsyAyH/T7/2e7VDuUdpDj3rcTJeUZ5dn7lbeSnp9nbeRuYZS3/OuiWFfecdqbrVz+vjQa3n6nnTQzgbuv1B8hjdLrbtwZ0YeKbv/Bi011fh7NKywwEeRvzvx8Xm8sakFqMPg8nYmlzPbu5+PcTtp21G0GotW08s+/qJm/ZqsnZt+iuO8Ozr2W+2+Us+9lFI4uXwy5JG4/D2PhR5fB1Z41vgeHjPrXg6SeNt6reheXm7OQMfReF21fy0hOWlHK7H5MvNz69n+Vx4bvclp/0cDo2VHMT55BdgWS2L0RhdaEPVLyTflpbCQhJjWroGi0KfhAQq9V6xq5CVIFfiQ5JANXO3HrRbduRHfc/33dAehgPLteyhFVpep+N6fbvSnx2LI4oRo1NSxCoUdjc/bxPEWSCAJsCNFcvxHIT+BuIFkkgb0Tt1MBgVMGZKwT130GpfDJyW5fl2x3f6fjNyfNvveNFAJdDXtWsmv9PvPJxK4Ifq3TxQ7zvAZEGgkPhizoUadCFVSZZolcvUbqxQg0KuLgFe6HDguG3PFCRbpFAQNjOW5Ck0FvNFWSBT7P4dA2FRWonAC8YlSstT+GqSx9+qeiifhBQOosioD6qncOIycqp0Xk+7tZ92BR/mCSkOmyqu5ATvmBx+epmZYljqganzwqIejnrLByFOAJhv8DOPS1PHS1ZkL3p1wao7Q6lKr2rvEjWWjXy1ysuG+oVicgVv2qblmzHgXMne05j9BmrWEOa7bpya9VHk2n7IL5dzGkskIVPjp5XLdzw3YhDFc2Okjs/mvW+Zg5CqbhI28pQtStWrpGD85sMFB7jwU+Yb9bdmPHlp1wmsvTgqT/XGkITOilVxvzy9MhuYKViiBJHxffBTAKeCHxrrItdcpJqmSS7h9S9aoXRdHWHMcipHF3pp2Fffkqd8WkDw4vQHTKnwz1f2Rrx6ZT9+u4qVDmZIr33JfzsbpBwXDGqXICWXrr5Rr08VnM721P6Z4GnBt723BP8wk94f5j8tezU9Pg+9fwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065231</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065233</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5728A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5775A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_FUNC_ADULT_SAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="d85d3ec6-ce3d-4a59-bab4-e43d315300ef"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU" id="f4babe74-1397-4891-8a95-aa893da0e256"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB587BA1FAE0401F0A059945B1:13D6E2C7"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB57B0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB57B0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB57B0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB57C2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB580AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5844A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB57C2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB580AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5844A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyjyjNpZfQiFYKKQwZWhgo174cGWenMSR2iZ228PXHTkloS+EwR6pUeWd77bUvXvYBR1nqeD7nkAvCqBYOevo/LnbdKI4eDKuDXKOFH5oG6iDLQI6DLXDc5j64uhZyXkBIuUBU9HTHspuGbcnflW15bcdrug3bbU907QZyLqGlS8PStWWWUu6VYXt6kVOPIU64R1EG3BPYG/ujoSc9PVRx0vsHK5ZlwLyfCDHzTBM3IsCQpriBWWYemBs+BxH3xmRKkShyeIsZ8Z7+tnexWDQWzQbLp6ZjWZZpdU3pE3Ey/an3f1SbIQppzFbrAFFGCUYpeUWK1AhEwiLNT6csJyLJPoG2TdtS0AYssYHtFv2pm+8BSnbfRNogmXNk8ATZFdglxJADxaBdX4Y9/ef3Orjae5UjymOWZ3xr/XeUgM4hZTOIDF5lVrH7PuKOcvUPAHshxWnByRzO1JjMEAau/ckhJssh4XL4Iq6V7deWvJowwH/TkgNznaekbe6ozIBMgYv/06/1Xq1QblBaQP8ifArPLqen1L22XMi72e39dHB283s29HslhXXnFam61W/r7UGt5+pt091p5/X34N69sOjexf1L8/gK2+NJPHwI49vF0/wkPB/lbNm+sOc3MQp/8Yx0x93LcDJ8SJzZ495k77QzPLsexcnQ7vy4j5KbSOwPh3vNc2wv7ZcimLduJ2AdueFd5/X2V6f9J35NXp+6SUD9cVyIx8dbws4G+9eJPXLn/njhWCcnV5OWc/FjClma2BOWjk+eUY5GwZD13nNaz2HTWMnBuHh4BCyqpRqNcKAdy34h8bW0KAuJjLh09WZKn7gAKvS+2qVkxSuk+JDIk81crY/2O3bgBodtN3B8+9g/slqWfWz5VrvbbbUP7Up/Viy2KAaMxkTFUgq7mp+vCeLM40AjyI05K3ACXP8CcYAE0kJ6KQ8GoxyumFTwdnB4fOQO7I5/2GwHx0HXbQf2wHKctjz7/r6ja2dMnNPz3I8F5Jvq3dxQ70vAZEZASbyacy4HnQtZkmc0L0RqN+aoQaGQl0CudNhzWvttk5NsloIibGYsKlJozJJZWSCTr/4dA2FeWgnHM5YLlJan8NMkt79V9ZA+EVEOXGV0CLKnsOMycqp0Pk+7s552Be8XEVGHTRZX5ASvmGx+ep8ZNSz1wNR5YV4PR73lLyF2AJhf8DO3S1PHi+ZkLXp1wco7Q6pKv2rvM2o8N4r5vCgb6irFzCW8aZuWa44BF1L2Xq7YE1CzhjC/dePUrLci1/ZNfoVI6FggAZkcP61cfuO5MQaunhuhPD7L775lNkLKuglYil22IJWvEsX4y4cL9rDyk+Y/8m/B8ui9XTuw1uLIPOUbQxA6VSt1v7x8MhuYSVgiBZHl6+C7AHYF3zTWRa65CDlND4WAz79oSul6OsKYFVSEA700rKtvyVO8zMB7d/oAUyr825W95J9e2Xej4VjqYIb02pf8t7NBynHBIHdxUnLp6Uv5+pTB6XRN7d8I7hb8Q+srwd/MpP/B/NGyVtPt89D/Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyjyjNpZfQiFYKKQwZWhgo174cGWenMSR2iZ228PXHTkloS+EwR6pUeWd77bUvXvYBR1nqeD7nkAvCqBYOevo/LnbdKI4eDKuDXKOFH5oG6iDLQI6DLXDc5j64uhZyXkBIuUBU9HTHspuGbcnflW15bcdrug3bbU907QZyLqGlS8PStWWWUu6VYXt6kVOPIU64R1EG3BPYG/ujoSc9PVRx0vsHK5ZlwLyfCDHzTBM3IsCQpriBWWYemBs+BxH3xmRKkShyeIsZ8Z7+tnexWDQWzQbLp6ZjWZZpdU3pE3Ey/an3f1SbIQppzFbrAFFGCUYpeUWK1AhEwiLNT6csJyLJPoG2TdtS0AYssYHtFv2pm+8BSnbfRNogmXNk8ATZFdglxJADxaBdX4Y9/ef3Orjae5UjymOWZ3xr/XeUgM4hZTOIDF5lVrH7PuKOcvUPAHshxWnByRzO1JjMEAau/ckhJssh4XL4Iq6V7deWvJowwH/TkgNznaekbe6ozIBMgYv/06/1Xq1QblBaQP8ifArPLqen1L22XMi72e39dHB283s29HslhXXnFam61W/r7UGt5+pt091p5/X34N69sOjexf1L8/gK2+NJPHwI49vF0/wkPB/lbNm+sOc3MQp/8Yx0x93LcDJ8SJzZ495k77QzPLsexcnQ7vy4j5KbSOwPh3vNc2wv7ZcimLduJ2AdueFd5/X2V6f9J35NXp+6SUD9cVyIx8dbws4G+9eJPXLn/njhWCcnV5OWc/FjClma2BOWjk+eUY5GwZD13nNaz2HTWMnBuHh4BCyqpRqNcKAdy34h8bW0KAuJjLh09WZKn7gAKvS+2qVkxSuk+JDIk81crY/2O3bgBodtN3B8+9g/slqWfWz5VrvbbbUP7Up/Viy2KAaMxkTFUgq7mp+vCeLM40AjyI05K3ACXP8CcYAE0kJ6KQ8GoxyumFTwdnB4fOQO7I5/2GwHx0HXbQf2wHKctjz7/r6ja2dMnNPz3I8F5Jvq3dxQ70vAZEZASbyacy4HnQtZkmc0L0RqN+aoQaGQl0CudNhzWvttk5NsloIibGYsKlJozJJZWSCTr/4dA2FeWgnHM5YLlJan8NMkt79V9ZA+EVEOXGV0CLKnsOMycqp0Pk+7s552Be8XEVGHTRZX5ASvmGx+ep8ZNSz1wNR5YV4PR73lLyF2AJhf8DO3S1PHi+ZkLXp1wco7Q6pKv2rvM2o8N4r5vCgb6irFzCW8aZuWa44BF1L2Xq7YE1CzhjC/dePUrLci1/ZNfoVI6FggAZkcP61cfuO5MQaunhuhPD7L775lNkLKuglYil22IJWvEsX4y4cL9rDyk+Y/8m/B8ui9XTuw1uLIPOUbQxA6VSt1v7x8MhuYSVgiBZHl6+C7AHYF3zTWRa65CDlND4WAz79oSul6OsKYFVSEA700rKtvyVO8zMB7d/oAUyr825W95J9e2Xej4VjqYIb02pf8t7NBynHBIHdxUnLp6Uv5+pTB6XRN7d8I7hb8Q+srwd/MpP/B/NGyVtPt89D/Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3Tqo1OacqcjzJQCgoKK4OXz5UxIU4i2SW1SwO/Xn6TYCogePDPMMNndWXvtS1ZyzmEYFG2HcxwLwqg26DT1fyrY94uoNDMAQHWjXJkBA84ANqA/s4qlxqwKq2VdG3Ce4AHlAlLR1IvAKhkWkL+pBexK0S41CiXLeta1BxxzCS1dCkDX1mFAuZ2GbepJTG0GOeE2hSHmtkD2xBkNbelpw4yT3jrfsEwDxq2FEJFtmqjgYYSDABUQC81zc8fn3OP2hMwpFEmMP2J6vKl/7F2tVoVVqcDiuVkEAJigYUofj5P5qd46yTZjb0B9tlm7kDJKEAzIX6hIjbBYME9zgjmLiViE30BbpgUUtIHXyEBWmZ7q5meAlN2RSDskYw4NvoBWBnaHfRxjirB2fzdo6qfHdXCzdxpDyn0Wh3xv/TtKmC5xwCLsGTzLLGN3POKBcrXOMbIHFAUJJ0t8rcYkgghz7TbGPlkPCZfD53Etbb+25tmEYfSblpyb2zwlbfNAZTpkjrn4P/3a7tUG5QEGCW4N/77cly9Lj4tR+zIZ93uWW439ChqTdr2ZUth23pDKW/2x3h/UfK4+NtHx2ZRXxJnXvwaTP6ZVKT4+8PLq4ZKO+GwytC5e6M2siMHTLZqOQ97rct+tMfo2q9TffTp6ZeHYWk7G95foJTqp+qUL33o1R9NRMFhcu+C9tkpqwcVFP7kiKHaXdcu9uao+g9uz52SILvnj2Z9ZfxzdOmAQDNsvT8P1tdkJnS7rXZys6IPTmLtvLOq7V1fTntUfNT9z2s5h15jJwSSZvWAksqUajUFH68l+QfGztCgL8Qw/dbUjpU9cYCr0ltqlZMVOpPgQz5bN3Ky79arl1tx2pQ4cx+o5XVAGVg84oNJolCttK9OfDYs9ii6jPlGxlMJu5udngii0OaYejo0lS9ACc/0HxA4UUBvQO3kwGOV4yqSCdzqg3LVqpU6tWKp2nbJbBu1qp1MtO23Q7VY7unbNxA29iR1f4HhXvUs76n2HEYkIVhKv5pzLQedCluQNLhMRWIUlLFCcyEsgVjpsF8v1islJGAVYETZD5iUBLkSLKC2QyTf/RQMinloJRxGLBQzSU/htkvvfsnpIH48oB64yamPZU3zgMipm6XyfdnU77QzeSTyiDpssrogJ2jDZ/fQ5M2pY8oHJ80I8H458yy8hDgCYP/Az90uTx/OWZCt6dsHKO0OqSitr7xssvBWS5TJJG1pTihlLeNMyQc2cYJRI2XufsldMzRzCPOrGyVnvRc7tu/wSsaATAQUO5fhp6fKI58YEc/XcGMjjsz72LbMTUtZN4LU4ZHMD+SpRjH98uCAbKT9pvpV/KxZ7n+06gLUVR+Yp3xiC0Llaqfvl/ZvZQEzCEimILN4GPwRwKPiuMS9yzkXIaZolAn//RVNK19QhQiyhYqAURRq21TflKd4jbH86fYFJFf7jyl7zb6/sp9FwInUwhHruS/7b2SDpuCAsd3GScmnqa/n6lMHpfEvtPwgeFPxaG/wk+LuZtL6Yv1q2arp/Hlr/Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx46RjW0unsCMw+XEbZImEJI0L2eEvAG1tkQsmUC/vpKJHaAkJzkzzDDa3lp77YuWdCJwmtSDUAjIJOXMiPod81+/3poCwQ3LbXq+5WHsWthxbavebMwaM3vqTV3PNCIhcoiYkJjJjlm3HddybPW7cezArweeU3M898E0biETClq51GzTWKcJE0ERtmPmGQs4FlQEDKcgAkmCcXhxHijPAJeczO7JlmURMOsupFwGCJFaDASShNQIT9EJ2vM5iUUwpnOGZZ7Bc8xYdMznvU9PT7Unt8azOarbto3sNlI+saDzz2b3U7kZ4ojN+Hbdw4wzSnBCf2NN6gLkgsdGmMx5RuUifQXaQY6toS1YE4s4HvtsopcABbt3Iu2RzAS2xAI7JdgIZpABI2BMRlHH/Py+Dm733mSYiRnPUnGw/hglYCtI+BJiS5SZlezej3ikXN0TIEHESJILuoJLPSZLTEAYVxnM6PqcCjV8sTCK9htrUU4YkI+05ATt8lS00ZHK9OkchPw//drt1RblFic5dKWgm9vVZPL7zLsY5vNLgtDXwaYnkc87BYVd5y2pqtXP68NBrebqeRPzn6YbjscM9dOLVZrc2pPb4ZfeQ/rPNZLzG7/5lQ7teZhFFIU8cQfzhn3dxAPCBj/PhDeW67Z7tvkxvB/9eLj/hC8xyME3N4bzzeUkRdH1bfwtGi6vV9fR3Wz0c9IUZ0l292V95anvD+0v96MonTitSTO834C9JNNr+Yg3X3+dTvxPOBxPvsVX0+Fqczdt3Df4MOy85LSbw76xlINxPv0JRJZLPRpR3xiqfmH5trRoC42tWeEaLLU+CQlMml29S8tKkCvxoXGgmrldD1oNp9fsnfotzwudYTiwPdsZ2qHtt9uef+qU+rNlcUCxx9mM6lhaYbfz8zZBkgYCWAyZteI5WYAw30DsY4mNiI3UweBMwA1XCt7zW03PHbZ6ttNseI7bqztt16k32qd9N/SHDdO45PI7+56FMwnZvnq7e+o9AkKXFLTE6zkXatCFVCV5xKtcJk5thWsMcnUJZFqHg7rX8pGg6TIBTRilPM4TqC0Xy6JASGz/6xYmorBSQZY8kzgpTuGrSR5+K+uhfGKqHYTO6BRUT+HIZeSW6byedmM37RI+zGOqD5sqrswo2TLZ//QyM3pYqoGp8iKiGo5qywchjgCgN/ihw9JU8eIV3YleXrDqzlCq0i3b+4hrj7V8tcqLhja1YmYKHjnIbqIxkFzJ3uaG/wKGKgj0rhunYn0QubLv88vlgo0llpCq8TOK5TueG2MQ+rkRqeOzfu9bZi+kqpuEtTxm6yXqVaIZv/lwIQHRfsp8pf6eeBa/tOsI1k4clad6Y0jK5nql75fNK7NBuIKlShB5tgt+DOBY8H1jVeSKi1TTNM0lvP7F0ErXMTEhPGcy6puFYVd9C55ys4TgxekvmELhn6/stXj1yr6/OB8rHUyxWfnS/3a2aDEuBNQuQQsuHXOtXp8qOJvvqP0zwaOC3zy13xL8/Uy6f5n/tuzU9PA8dP8A</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065236</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065238</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065240</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB57C3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB580BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5845A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_FUNC_ADULT_BAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="742fdcc5-4c20-479f-bd3f-4cb6f9aec130"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB594CA1FAE0401F0A059945B1:37E6EB80"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5881A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5881A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5881A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5893A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB58DBA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5915A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5893A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB58DBA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5915A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chcfiOClKAso3UdrelZUtfrowzBO8mdogdCvvr1w5NCpT2dq+EhDwZnznz4WOfC5zErucLAZmknBnBqGf+6yKEF3XctbouIKuB3IXVQZ255RDUJS5ptqHVMI1AiBwCJiRmsme6DqpbyFG/e+R4Tddr1GutpvNkGlPIhIJWLjXHNDZJzIRXhO2ZecY8jgUVHsMJCE8Sb+JfX3nK08MlJ7N/vmNZBMz6SylTz7ZJLQQCcUxqhCf2uX3gcx4Kb0IjhmWewUvMUPTMl73Pz8+153qNZ5HtOo5jO11b+YSCRmdm/0u5GcKALfhuPcSMM0pwTH9jTeoa5JKHhh9HPKNymbwDjWzkaGgLNsQiqMHOTPs1QMHuk0gHJDOBLbHEqAS7gwVkwAgYD3dBzzz7XAd3e+8zzMSCZ4k4Wv8dJWBriHkKoSXKzEp2n0c8Ua7+ORAvYCTOBV3DjR6TFBMQxvcMFnRzRYUavlAYRfuNjSgnDMjftOTc3uepaNsnKjOiEQj5f/q136sdyhTHOfSXa7cVjbZhNr+KZpIPf/njbVtmT+35Ra+gsO+8I1W1+mV9PKjVXL1sGqPRrf3DQeDOyTSeTi5XIPh2FpPLxjydtkijNRgPbxJUT9acDei0fRMM2PSfVnsWOYMrtvnOn74tk+7mAUbbL2Mx+DH/eTHefg1X11F8vc3TYLC5HjHiOnwpHqh9MYtaM37nfL173M7qv8ePk8VwlT7d3s6Cy3hE/OUqGFzG61+d/MtcQeTMjyYdwvHz8n5m3/Zec9rP4dBYysEkn/8EIsulHo1gZIxVv7D8WFq0hYbWonD1Uq1PQgKTZl/v0rLi5Up8aOipZu7WF50WGraHg2anW/fR2L9wGg4aO77T7HYbzQEq9WfH4ojikLMF1bG0wu7m52OCJPEEsBAya81zsgRhfoA4whIbAbtTB4MzAfdcKXi92fHdVrfujp1Wxx05Q+Sjzhihpt8ctYa+axo3XH5j3zJ/ISE7VO/6gXrfAaEpBS3xes6FGnQhVUlWeJ3LGNXWuMYgV5dApnXYcxudpi1oksagCdsJD/MYaukyLQpki92/a2EiCisVJOWZxHFxCt9N8vhbWQ/lE1LtIHRGA1A9hROXUb1M5/20W/tpl/B+HlJ92FRxZUbJjsnhp9eZ0cNSDUyVFxHVcFRb/hLiBID9AT/7uDRVvHBN96KXF6y6M5Sq9Mv2rnBtVcvX67xoaFsrZqbgbWQ7bXsCJFeyt73nv4DZFYT9qRunYn0UubIf8svlkk0klpCo8TOK5SeeGxMQ+rkRqOOz+exb5iCkqpuEjTxlG8bqVaIZf/hwIR7Rfsr8Xf098yx8bdcJrL04Kk/1xpCURXql75ftO7NBuIKlShB5tg9+CuBU8ENjVeSKi1TTNM8lvP/F0ErXMzEhPGcyGJmFYV99C55ym4L36vQGplD4lyt7I969sh+vryZKBxNsVr70v50tWowLAbVL0IJLz9yo16cKzqI9tX8heFrwO+gjwT/MpP/G/NayV9Pj89D/Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chcfiOClKAso3UdrelZUtfrowzBO8mdogdCvvr1w5NCpT2dq+EhDwZnznz4WOfC5zErucLAZmknBnBqGf+6yKEF3XctbouIKuB3IXVQZ255RDUJS5ptqHVMI1AiBwCJiRmsme6DqpbyFG/e+R4Tddr1GutpvNkGlPIhIJWLjXHNDZJzIRXhO2ZecY8jgUVHsMJCE8Sb+JfX3nK08MlJ7N/vmNZBMz6SylTz7ZJLQQCcUxqhCf2uX3gcx4Kb0IjhmWewUvMUPTMl73Pz8+153qNZ5HtOo5jO11b+YSCRmdm/0u5GcKALfhuPcSMM0pwTH9jTeoa5JKHhh9HPKNymbwDjWzkaGgLNsQiqMHOTPs1QMHuk0gHJDOBLbHEqAS7gwVkwAgYD3dBzzz7XAd3e+8zzMSCZ4k4Wv8dJWBriHkKoSXKzEp2n0c8Ua7+ORAvYCTOBV3DjR6TFBMQxvcMFnRzRYUavlAYRfuNjSgnDMjftOTc3uepaNsnKjOiEQj5f/q136sdyhTHOfSXa7cVjbZhNr+KZpIPf/njbVtmT+35Ra+gsO+8I1W1+mV9PKjVXL1sGqPRrf3DQeDOyTSeTi5XIPh2FpPLxjydtkijNRgPbxJUT9acDei0fRMM2PSfVnsWOYMrtvnOn74tk+7mAUbbL2Mx+DH/eTHefg1X11F8vc3TYLC5HjHiOnwpHqh9MYtaM37nfL173M7qv8ePk8VwlT7d3s6Cy3hE/OUqGFzG61+d/MtcQeTMjyYdwvHz8n5m3/Zec9rP4dBYysEkn/8EIsulHo1gZIxVv7D8WFq0hYbWonD1Uq1PQgKTZl/v0rLi5Up8aOipZu7WF50WGraHg2anW/fR2L9wGg4aO77T7HYbzQEq9WfH4ojikLMF1bG0wu7m52OCJPEEsBAya81zsgRhfoA4whIbAbtTB4MzAfdcKXi92fHdVrfujp1Wxx05Q+Sjzhihpt8ctYa+axo3XH5j3zJ/ISE7VO/6gXrfAaEpBS3xes6FGnQhVUlWeJ3LGNXWuMYgV5dApnXYcxudpi1oksagCdsJD/MYaukyLQpki92/a2EiCisVJOWZxHFxCt9N8vhbWQ/lE1LtIHRGA1A9hROXUb1M5/20W/tpl/B+HlJ92FRxZUbJjsnhp9eZ0cNSDUyVFxHVcFRb/hLiBID9AT/7uDRVvHBN96KXF6y6M5Sq9Mv2rnBtVcvX67xoaFsrZqbgbWQ7bXsCJFeyt73nv4DZFYT9qRunYn0UubIf8svlkk0klpCo8TOK5SeeGxMQ+rkRqOOz+exb5iCkqpuEjTxlG8bqVaIZf/hwIR7Rfsr8Xf098yx8bdcJrL04Kk/1xpCURXql75ftO7NBuIKlShB5tg9+CuBU8ENjVeSKi1TTNM8lvP/F0ErXMzEhPGcyGJmFYV99C55ym4L36vQGplD4lyt7I969sh+vryZKBxNsVr70v50tWowLAbVL0IJLz9yo16cKzqI9tX8heFrwO+gjwT/MpP/G/NayV9Pj89D/Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHqvgBEKAqCBBQneyA22n0OnHy8o4l+CZxIHYAdpfv3ZoUqC021kJCfnm+txzP3zsc46TuO72OYdM0JRpgd/V/4HQac7CFjYajuUYtm3XjY5NQmMW1q0Wbluh3ZnpWsB5DgHjAjPR1eum1TAsU/6mluk2667drNmd1qOu/YSMS2jpUjN1bZvEjLtF2K6eZ8xNMafcZTgB7griTvrjkSs9XVxy0nvnO5ZFwKy3EGLpIkRqIRCIY1IjaYLO0YHPecjdCY0YFnkGLzFD3tVf9m42m9qmUUuzCNVN00RmB0mfkNPoq977Um6GMGDzdLf2MEsZJTimz1iRGoNYpKHWj6M0o2KRvANtIctU0AZsiUEsm33V0WuAgt0nkQ5IZhwbfIGtEuwG5pABI6Dd3gRd/evnOrjbO80w4/M0S/jR+s8oAVtDnC4hNHiZWcnu84gnytU7B+IGjMQ5p2u4VGOyxAS4dp3BnG5HlMvhC7lWtF/b8nLCgPxJS87RPk9JG52ojE8j4OL/9Gu/VzuUnzjOoXc/PPM2rfEDT5x7JxlMF1Hb6ay22d1k2C0o7DvvSFWtflkfD2o1Vy+bPKc9az3k7K+HcAGkFV/fXHkPweD7VgTZY/M7+omCnEPjnjyZXsws685qxbPhuH825hnJJzd/z+I5x6tHfvkMX86eh8/WYpQg1DYj8vsqWvnh6Lbjz2x/di1G/g/r7Hn0ox0M0+hx4j3eTufTh20Y981xp41/bSZ1fudc939E357vGl9y754/rb6NkoUHQ+/pvn8RdV9z2s/h0FjKwSSf/QIiyqUajcDXLmS/sPhYWpSFhsa8cHWXSp+4ACb0ntqlZMWVNclo6Mpm7tbDtmN5LW/QbPuDvnXRH5q2aV2YfbPZ6djNgVXqz47FEUUvZXOqYimF3c3PxwRJ4nJgIWTGOs3JArj+AaKPBdYCdiMPRso4TFOp4JLboDU0B3bHd2yzMRy0m37zouE7TvvCa/qWrl2m4opdZf25gOxQvRsH6n0DhC4pKIlXc87loHMhS7LC61zEVm2NawxyeQlkSofdut1uIk6TZQyKMErSMI+htlwsiwIhvvuvG5jwwko5WaaZwHFxCt9N8vhbWQ/pE1LlwFVGA5A9hROXUaNM5/20nf20S/h+HlJ12GRxRUbJjsnhp9eZUcNSDUyVF+HVcFRb/hDiBAD6gB86Lk0VL1zTvejlBSvvDKkqvbK9K1xb1fL1Oi8a2lKKmUl4ZCGzhSZAcil7T9P0NzBUQaBP3TgV66PIlf2QXy4WbCKwgESOn1YsP/HcmABXz41AHp/tZ98yByFl3QRsxSmbF8tXiWL84cOFuET5SfO1/NukWfjarhNYe3FknvKNISiL1ErdL0/vzAZJJSyVgphm++CnAE4FPzRWRa64CDlNs1zA+180pXRdHROS5kwEvl4Y9tW34CmeluC+Or2BKRT+5cre8nev7PvxaCJ1MMF65Uv/29mgxbgQkLs4Lbh09a18fcrgLNpT+xeCpwW/bX0k+IeZ9N6Y31r2anp8Hnr/Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtc7I4FP3+/AqGfuwgoPgCo87gS7tYa1t13Xa/7MQQNC0kSILa59dvgkLVarfdGWecXG7OPfclJ2kyEIVlx2UMJRxToni9lvqPDcHcr1TKWq3RMDVrDm0NAFTVbMsAgQ2seVCuq4rHWIo8wjggvKWWDbOimYb4TU3DqZYdq14q182/VWWGEiaghUvJUJVtFBLmZGFbapoQhwKGmUNAhJjDoTNx74eO8HRAzkltN3css4BJe8l57Og6LPkIojCEJUgjvakf+TR95kzwggCeJmgf02ctdb93s9mUNpUSTRZ62TAM3bB14eMzvLhS27/yzcj3SEB36y4glGAIQvwbSFL3iC+pr7jhgiaYL6ML0KZuGhJaQ1uoQdMiV6r+ESBj902kI5IJAxpbAjMHG6MAJYhApPw59lrq1fc6uNs7TQBhAU0idrL+GSVE1iikMfI1lmeWs/s+4plytZsIOh6BYcrwGo3kmMQAIqY8JijA2yFmYvh8pmTtV7YsnzAEf9KSpn7IU9DWz1SmhxeI8f/Tr8Ne7VBmIExR26vfRI0/wpCP342HJfFvn18Xt6+93siErYzCofOOVNHq/fp0UIu52m8K7jrj0awXddLl6+R69ryahtS8G0yD8apS0+v+3L9fuQ336eaVserT5G44W6eP21srgO+D7ks/sB8nQ2xtuWG76S/7Ph7eXt9VZj3vdonhW22ajKIn+OZuNmNr6veqfm39uBp0nlbD7urFfalvtl64eL6Fg79Wo/W611jN3Fl3NnkLBoNfm2vm0klMYnpXfrnZGvGQtj5yOszh2JjLwSSdvyLI86UcDa+n3Ih+Af61tEgL9rUgc3ViqU+MI8LVttwlZcVJhfhg3xHN3K37jZrZrXc7VdusuuaN2zcsw7wxXKNq21a1Y+b6s2NxQrFLSYBlLKmwu/n5miCMHIaIjxJtTVO4REz9ArEHOFA8MhYHgxKGplQouNkXPa1YVsU1G4Zt2PVepdap9etmv+rWu92uqowofyAPiRtwlByrd+VIvccI4hgjKfFyzpkYdMZFSVZgnfLQLK1BiaBUXAKJ1GGnbDWqOsNRHCJJWI+on4aoFC/jrEA62/2XNQBZZsUMxjThIMxO4cUkT7/l9RA+PpYOTGbUQaKn6MxlVMnTuZx27TDtHN5NfSwPmyguTzDcMTn+9DEzcliKgSnygqwYjmLLDyHOAOhf8NNPS1PE89f4IHp+wYo7Q6hKO2/vCpRWpXS9TrOG1qViJgJeN3Wjrk8QTIXsvU/pGyJ6AaF/68YpWJ9ELuzH/FK+JBMOOIrE+CnZ8hvPjQli8rnhieOz/e5b5iikqBtHW37O1g3Fq0Qy/vLhAh0o/YT5UfxtaOJ/tOsM1kEckad4Y3BMFnIl75f3C7MBqYDFQhBpcgh+DuBc8GNjUeSCCxfTNE85uvxFkUrXUgGENCXc66mZ4VB9M578PUbOh9MnmEzh91f2ll28sp/vhxOhgxFQC1/8384azsYFIrGL4YxLS92K16cIThYHar8neFbwxdh8JfjHmbQ/mT9bDmp6eh7a/wI=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065242</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065244</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065246</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5894A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB58DCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5916A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_FUNC_YOUTH_SAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="99a02aae-8915-4c3f-a340-87a3e08584da"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5A1EA1FAE0401F0A059945B1:A1E1749"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5952A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5952A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5952A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5964A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB59ACA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB59E7A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5964A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB59ACA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB59E7A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jxmwDQZfJjBjbiktuTSk2W5edoR8jEVsCSzZIf31K5nYAUqy6c4ww+j46DvfueiTzjlKk5YfcA6ZIIxq01FP/6fdcj3PNVHDMsFq2G4UNtzFYtGIvDCKPNtGGFxdm3Kew5Rygajo6S3Takt/+buzTL/T8m2v6bjmg67dQ8YltHRpmrq2TRPK/TJsT88z6jPECfcpSoH7Avvz4HLmS08fVZz0/vmOZRkw68dCrH3DwM0QMCQJbmKWGufGgc95yP05WVIk8gxeYoa8p7/sfXp6aj61myxbGi3TNA3TM6RPyMnys97/VG2GcEojtlsPEWWUYJSQX0iRugQRs1ALkiXLiIjTN6AtwzIVdAO2uIEtm37WjdcAJbsPIh2QzDhq8BhZFdgtRJABxaD9uJ329M8f6+Bu712GKI9YlvKj9Z9RAlpAwtYQNniVWcXu44gnytU/B+xPKU5yTgq4UmOyluy5dpNBRLYzwuXwhVwr269teTVhgP+kJefGPk9J2zhRmRFZAhf/p1/7vdqh3KMkh348K1K3/S1YDS66w4UzCsbiMu38wrP8sVdS2Hfekapb/bI+HtR6rl42FYub4EfHiJ+nA9F+PLN/OtbtcLD5loxHYjAnaBlbsx9f8dnPECIPFw5Y3TRk8dX1KE+u0otNshqz6Du9//v79eRTiO8fkJuyB8gvzr6Kr1MnO7Mcc9J9trd3D6vtXzEvHm6CdABfzE18d72yR8ObtoO3C3fr4dUquI7c+Zgb4+744tPZ08NqxQp3c/bo4NWl+2UW9F5z2s/h0FjJwTxfrACLaqlGYzrSJrJfSLwvLcpCwkZUuvprpU9cABV6X+1SsuLnUnxI6Mtm7tZjt2sNneGg43XtwJoEY9M2rYkZmB3PszsDq9KfHYsjikNGI6JiKYXdzc/7BHHqc6AhZI2C5TgGrr+DOEICaVN6Kw8GoxzumFTwwcgeuLacwpbjTIYtezzxvOHE9Cyr03I63YmuXTFxTa+zIBKQHap3+0C9bwGTNQEl8WrOuRx0LmRJNqjIRWI1C9SkkMtLIFM67Ldst2Nwkq4TUISNlIV5As11vC4LZPDdf6uBMC+thOM1ywRKylP4ZpLH36p6SJ+QKAeuMhqA7CmcuIzaVTpvp93dT7uCD/KQqMMmiysygndMDj+9zowalnpg6rwwr4ej3vKHECcAjHf4GcelqeOFBdmLXl2w8s6QqtKv2rtBzU0zL4q8bKijFDOT8IZlmI4xB5xL2Xu+Y49AjRrC+NCNU7M+ilzbD/nlIqZzgQSkcvy0cvmB58YcuHpuTOXx2X70LXMQUtZNwFacsg0T+SpRjN99uGAfKz9pvpF/TywLX9t1AmsvjsxTvjEEoUu1UvfL8xuzgZmEJVIQWbYPfgrgVPBDY13kmouQ07TIBbz9RVNK19MRxiynYjrSS8O++pY8xfMa/Fen32BKhX+5srf8zSv75+VsLnUwRXrtS/7buUHKccEgd3FScunpW/n6lMHpck/tXwieFvxO6z3BP8yk/5v5d8teTY/PQ/9f</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jxmwDQZfJjBjbiktuTSk2W5edoR8jEVsCSzZIf31K5nYAUqy6c4ww+j46DvfueiTzjlKk5YfcA6ZIIxq01FP/6fdcj3PNVHDMsFq2G4UNtzFYtGIvDCKPNtGGFxdm3Kew5Rygajo6S3Takt/+buzTL/T8m2v6bjmg67dQ8YltHRpmrq2TRPK/TJsT88z6jPECfcpSoH7Avvz4HLmS08fVZz0/vmOZRkw68dCrH3DwM0QMCQJbmKWGufGgc95yP05WVIk8gxeYoa8p7/sfXp6aj61myxbGi3TNA3TM6RPyMnys97/VG2GcEojtlsPEWWUYJSQX0iRugQRs1ALkiXLiIjTN6AtwzIVdAO2uIEtm37WjdcAJbsPIh2QzDhq8BhZFdgtRJABxaD9uJ329M8f6+Bu712GKI9YlvKj9Z9RAlpAwtYQNniVWcXu44gnytU/B+xPKU5yTgq4UmOyluy5dpNBRLYzwuXwhVwr269teTVhgP+kJefGPk9J2zhRmRFZAhf/p1/7vdqh3KMkh348K1K3/S1YDS66w4UzCsbiMu38wrP8sVdS2Hfekapb/bI+HtR6rl42FYub4EfHiJ+nA9F+PLN/OtbtcLD5loxHYjAnaBlbsx9f8dnPECIPFw5Y3TRk8dX1KE+u0otNshqz6Du9//v79eRTiO8fkJuyB8gvzr6Kr1MnO7Mcc9J9trd3D6vtXzEvHm6CdABfzE18d72yR8ObtoO3C3fr4dUquI7c+Zgb4+744tPZ08NqxQp3c/bo4NWl+2UW9F5z2s/h0FjJwTxfrACLaqlGYzrSJrJfSLwvLcpCwkZUuvprpU9cABV6X+1SsuLnUnxI6Mtm7tZjt2sNneGg43XtwJoEY9M2rYkZmB3PszsDq9KfHYsjikNGI6JiKYXdzc/7BHHqc6AhZI2C5TgGrr+DOEICaVN6Kw8GoxzumFTwwcgeuLacwpbjTIYtezzxvOHE9Cyr03I63YmuXTFxTa+zIBKQHap3+0C9bwGTNQEl8WrOuRx0LmRJNqjIRWI1C9SkkMtLIFM67Ldst2Nwkq4TUISNlIV5As11vC4LZPDdf6uBMC+thOM1ywRKylP4ZpLH36p6SJ+QKAeuMhqA7CmcuIzaVTpvp93dT7uCD/KQqMMmiysygndMDj+9zowalnpg6rwwr4ej3vKHECcAjHf4GcelqeOFBdmLXl2w8s6QqtKv2rtBzU0zL4q8bKijFDOT8IZlmI4xB5xL2Xu+Y49AjRrC+NCNU7M+ilzbD/nlIqZzgQSkcvy0cvmB58YcuHpuTOXx2X70LXMQUtZNwFacsg0T+SpRjN99uGAfKz9pvpF/TywLX9t1AmsvjsxTvjEEoUu1UvfL8xuzgZmEJVIQWbYPfgrgVPBDY13kmouQ07TIBbz9RVNK19MRxiynYjrSS8O++pY8xfMa/Fen32BKhX+5srf8zSv75+VsLnUwRXrtS/7buUHKccEgd3FScunpW/n6lMHpck/tXwieFvxO6z3BP8yk/5v5d8teTY/PQ/9f</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx0jy9gYPIEZMHDjNh8tkDbtyx0hLyBqy8SSDemvr2xiByjJTe+TR+vV2bMfOtKFIHFkeX0hIJUs4Vow7Or/EozNEIdgLNouMez2vGnMLWwattNpuy6xcNuhuhYIkUHAhSRcdnXLxE1D+WBzhk3PsTwHN1qm9UPXvkIqFLRyaZi6tosjLrwybFfPUu4lRDDhcRKD8CT1pv3rK095eqTipPcu9izLgGlvJeXGQ4g2QqAQRbRBkxhdoCOfi1B4U7bkRGYpPMUMRVd/2rvdbhvbZiNJl8gyTROZHaR8QsGW7/Xeu2ozhAFfJPu1T3jCGSUR+0UKUtcgV0mo9aNlkjK5il+AxgibBbQBO2pQbPP3OnoOULJ7I9IRyVQQQ6wIrsAmsIAUOAXtbhJ09fdv6+B+7ywlXCySNBYn67+jBDyHKNlAaIgqs4rd2xHPlKt3AdQLOI0ywXK4KcZkQygI7XMKC7a7YkINXyi0sv3aTlQTBvRvWnKBDnkq2uhMZYZsCUL+n34d9mqP8pVEGfTCD59mn4ejPGv+GAfX891qML2mYH7/6NvdksKh855U3eqn9emg1nP1tIkl6ys7uOyPvn0TN7uWb6ERHQ226Ap/dNnVPFvfuLb075fpl/iu77QvycQm4SrZyNyHu+Hs7lcoOPo5HUzml/hd6kDz53r0BcPswzbO2GoWiLa8f7D4p2X+HUHqhner7W62xq1/3MHtMv/hd26aZD7L491g4qd3zfs1ghvx4XHaf0fzQRvQ0l1xvLa/XEZoue0+53SYw7GxkoNpNl8DldWyGI1gqI1Vv4h8XVoKCwuNRenqbQp9EhK41HvFrkJWvEyJDws91cz9etRuYd/1B06n7/fxuD8ybROPzb7pdDq2M8CV/uxZnFD0E75gRaxCYffz8zpBGnsCeAipkScZXYHQX0EcEkm0gE/UwUi4gFmiFByPbdexcGtstp2O4w7GzXbTH5vNjj12/XG7pWs3ibzlt2l/ISE9Vu/mkXpPgLINg0LiizkXatCFVCV5IHkmI9zISYNDpi6BtNBhz7LbDhIs3kRQEEZxEmYRNDarTVkgJPZfyyBUlFYm6CZJJYnKU/hikqf/qnoon5AVDqLIaACqp3DmMrKrdF5Ou3WYdgXfz0JWHDZVXJkyumdy/Ot5ZophqQemzouKejjqLX8JcQYAvcIPnZamjhfm7CB6dcGqO0OpSq9q7wNpPDSyPM/KhrqFYqYKHmFkumgKNFOy9zhLfgJHNQR6041Tsz6JXNuP+WVyxaeSSIjV+Gnl8g3PjSmI4rkRqOOze+tb5iikqpuEnTxn8yP1KikYv/pwoR4t/JT5s/pskzR8btcZrIM4Kk/1xpCML4tVcb88vjAbNFGwTAlikh6CnwM4F/zYWBe55iLVNM0zCS//0Qql6+qE0iTjMhjqpeFQfUue8nED3rPTHzClwj9d2Tvx4pV9f301VToYE732Zf/tbLByXCioXYKVXLr6Tr0+VXC+PFD7J4LnBd+xXhP840x6f5j/tBzU9PQ89H4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fX4HSx1VwAgkJUUEKX6u0BdrSpVVfrowzgNvEgdihtL/+2qFJgaW93SshIU/GZ858+NjnHMdRzfM5h1TQhFWCXkv7xyJGGOIm6E4zxLrlNojuui7RnRAMYoDZsB1DqwScZxAwLjATLa1mmHXdNOTvzjQ8u+bZ9apVdx61yhRSLqGlS1Xu2sYR414etqVlKfMSzCn3GI6Be4J4E3945UlPDxectPb5jmUeMG0vhVh5CJFqCASiiFRJEqNzdOBzHnJvQhcMiyyF95ghb2nve19eXqov9WqSLlDNMAxkNJH0CTldnGntH8VmCAM2T3brLmYJowRH9A0rUkMQyySs+NEiSalYxp9Am8g0FLQOW6IT02JnGvoIkLP7JtIByZRjnS+xWYDdwhxSYAQqv2+Dlnb2vQ7u9t6lmPF5ksb8aP13lIBtIEpWEOq8yKxg933EE+VqnwPxAkaijNMNjNSYrDABXrlOYU63V5TL4Qt5JW9/ZcuLCQPyNy05R/s8JW10ojI9ugAu/k+/9nu1Q5niKIN27Wmw7sSrK2c8jX7W6mkveH28wNlm4JJWTmHfeUeqbPX7+nhQy7l637SMEhoZ8evz+GaQ9Bq9m+A5YxdDm0/cS8fvSPwNRT+N5SW+qQ8v3SkjdvNycrkY9kW/8+Skb+M+d6/uh3Fj+PvH02s2M9MbNH32xxBOL25+WQ+jWWdG3kbT2eKNDh+vbNa958HN/W86YZu+XbcGS0Gvfz1cXvS6k3Wn6UeTXnq9eZz/aM5GKPav6Zit+yOCRsMoaH3ktJ/DobGQg0k2ewIiiqUajaBXGch+YfG1tCgLDfV57uqtlD5xAUxobbVLyYqXSfGhoSebuVv33YbZdbodu9l3fHPg9w3LMAeGb9jNpmV3zEJ/diyOKHYTNqcqllLY3fx8TZDEHgcWQqpvkowsgWtfIPawwJWA3cqDkTAOd4lUcMe3XMcw7Vqj4zS6A8v1LcdyrV7Hd7udfkPq8CgRYzZO/bmA9FC96wfqfQuErigoiVdzzuWgcyFLssabTERmdYOrDDJ5CaRKh72a5dqI03gVgSKM4iTMIqiulqu8QIjv/ms6Jjy3Uk5WSSpwlJ/CT5M8/lbUQ/qEVDlwlVEHZE/hxGVkFel8nnZjP+0C3s9Cqg6bLK5IKdkxOfz0MTNqWMqBKfMivByOcstfQpwAQF/wQ8elKeOFG7oXvbhg5Z0hVaVdtHeNq+tqttlkeUMdpZiphEcmMhw0AZJJ2Xu9S56BoRICfevGKVkfRS7th/wysWQTgQXEcvwq+fIbz40JcPXcCOTx2X73LXMQUtZNwFacsnUj+SpRjL98uBCPKD9pvpZ/L0kafrTrBNZeHJmnfGMIyhZqpe6X109mgyQSlkpBTNJ98FMAp4IfGssil1yEnKZZJuDzLxWldC0NE5JkTAQ9LTfsq2/OU7yuwPtw+gMmV/j3K3vLP72yH4ZXE6mDMdZKX/rfzjrNx4WA3MVpzqWlbeXrUwZniz21fyd4WvDt2leCf5hJ+w/zn5a9mh6fh/a/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065250</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065252</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5965A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB59ADA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB59E8A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_FUNC_YOUTH_BAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="070abf66-1a39-4d22-9a46-c4848740ce18"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5AF0A1FAE0401F0A059945B1:70EAA1A9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5A24A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5A24A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5A24A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5A36A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5A7EA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5AB9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5A36A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5A7EA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5AB9A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxBRuwJzBjIGnd3AjQNu3LGUXegFpbIpIMJF9/JBM7QElOemaYYbS9tfbaFy3pVKA886JYCOCSMGokw675TysIOk3fubfc4D6wfCdsWuEM2hakXttzAt/3fM80EiEKSKiQiMqu6Tlu03Id9Zu6ThR4URA0On7w0zS+ARcKWrk0HNPY5BkVURm2axacRgwJIiKKchCRxNEkvrqMlGeEKk5m73TLsgzIewspl5Ft40YKGLIMNzDL7VN7z+c0FdGEzCmSBYfnmKnoms971+t1Y91sMD63PcdxbCe0lU8qyPyj2ftQbYY0oTO2XQ8QZZRglJEnpEldgVyw1IizOeNELvJXoF3bdTS0BRtsYdenH037JUDJ7p1IeyS5QJZYILcCG8MMOFAMxtdx0jU/vq+D271TjqiYMZ6Lg/XfUQK6gowtIbVElVnF7v2IR8rVOwUcJRRnhSAruNZjskQYhDHiMCObSyLU8KXCKNtvbEQ1YYD/piWn9i5PRds+UpkhmYOQ/6dfu73aonxDWQG9E/r4I/xG2DVpBTNxe3cWjvopv0+K8Vm3pLDrvCVVt/p5fTio9Vw9bwL/unPmzk+uvKDdjvHvJ9xv3uTfN6gjfogHma/dq8/j0cZrBRf3SN4O208/N0F/fjMJ579mnc/uevzEbvHDycWn2/jDp+n6C+/ki/g8hwt+OR+NpstVC6bL4uSzNzhZnLO7WzfLR0n2lZLFCntt5651w9uXIH6ff4dw4Tc/tS49hE/4+sPjNERFhtJ4lCf0B97Ycdx9yWk3h31jJQeT4v4XYFkt9WgkQ+Nc9QvJt6VFW0hqzUrXaKn1SUig0uzpXVpWokKJD0kj1czt+qzTcgftQT+Im63YPY/PHN9xz53YCcLQD/pupT9bFgcUB4zOiI6lFXY7P28TxHkkgKbArRUr8AKE+QbiEElkJHSsDgajAqZMKfiw2XSGAz+IwzBsOa7fGfbPXMcPvI7X6vSdoWlcM3lDb3g8k8D31bu5p95jwGRJQEu8nnOhBl1IVZIHtCpk5jZWqEGhUJcA1zoceX4nsAXJlxlownbO0iKDxnKxLAtki+2/ZyEsSisReMm4RFl5Cl9N8vBbVQ/lkxLtIHRGfVA9hSOXkV+l83rard20K/i4SIk+bKq4khO8ZbL/6WVm9LDUA1PnhUU9HPWWv4Q4AmC/wc8+LE0dL12RnejVBavuDKUqvaq9D6jx0ChWq6JsaFsrJlfwtms7bXsCuFCy9zhlv4HaNYT9rhunZn0Qubbv8yvkgk4kkpCr8TPK5TueGxMQ+rmRqOOzee9bZi+kqpuEjTxmG2TqVaIZv/lwwRHWfso8Un9rxtOXdh3B2omj8lRvDEnoXK/0/fL4ymxgpmCJEkTGd8GPARwLvm+si1xzkWqa7gsJr38xtNJ1TYQxK6hMtKIow676ljzl4xKiF6c/YEqFf76yN+LVK/vu6nKidDBHZu1L/tvZIuW4YFC7BCm5dM2Nen2q4HS+o/bPBI8Lvue/Jfj7mfT+MP9p2anp4Xno/Qs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxBRuwJzBjIGnd3AjQNu3LGUXegFpbIpIMJF9/JBM7QElOemaYYbS9tfbaFy3pVKA886JYCOCSMGokw675TysIOk3fubfc4D6wfCdsWuEM2hakXttzAt/3fM80EiEKSKiQiMqu6Tlu03Id9Zu6ThR4URA0On7w0zS+ARcKWrk0HNPY5BkVURm2axacRgwJIiKKchCRxNEkvrqMlGeEKk5m73TLsgzIewspl5Ft40YKGLIMNzDL7VN7z+c0FdGEzCmSBYfnmKnoms971+t1Y91sMD63PcdxbCe0lU8qyPyj2ftQbYY0oTO2XQ8QZZRglJEnpEldgVyw1IizOeNELvJXoF3bdTS0BRtsYdenH037JUDJ7p1IeyS5QJZYILcCG8MMOFAMxtdx0jU/vq+D271TjqiYMZ6Lg/XfUQK6gowtIbVElVnF7v2IR8rVOwUcJRRnhSAruNZjskQYhDHiMCObSyLU8KXCKNtvbEQ1YYD/piWn9i5PRds+UpkhmYOQ/6dfu73aonxDWQG9E/r4I/xG2DVpBTNxe3cWjvopv0+K8Vm3pLDrvCVVt/p5fTio9Vw9bwL/unPmzk+uvKDdjvHvJ9xv3uTfN6gjfogHma/dq8/j0cZrBRf3SN4O208/N0F/fjMJ579mnc/uevzEbvHDycWn2/jDp+n6C+/ki/g8hwt+OR+NpstVC6bL4uSzNzhZnLO7WzfLR0n2lZLFCntt5651w9uXIH6ff4dw4Tc/tS49hE/4+sPjNERFhtJ4lCf0B97Ycdx9yWk3h31jJQeT4v4XYFkt9WgkQ+Nc9QvJt6VFW0hqzUrXaKn1SUig0uzpXVpWokKJD0kj1czt+qzTcgftQT+Im63YPY/PHN9xz53YCcLQD/pupT9bFgcUB4zOiI6lFXY7P28TxHkkgKbArRUr8AKE+QbiEElkJHSsDgajAqZMKfiw2XSGAz+IwzBsOa7fGfbPXMcPvI7X6vSdoWlcM3lDb3g8k8D31bu5p95jwGRJQEu8nnOhBl1IVZIHtCpk5jZWqEGhUJcA1zoceX4nsAXJlxlownbO0iKDxnKxLAtki+2/ZyEsSisReMm4RFl5Cl9N8vBbVQ/lkxLtIHRGfVA9hSOXkV+l83rard20K/i4SIk+bKq4khO8ZbL/6WVm9LDUA1PnhUU9HPWWv4Q4AmC/wc8+LE0dL12RnejVBavuDKUqvaq9D6jx0ChWq6JsaFsrJlfwtms7bXsCuFCy9zhlv4HaNYT9rhunZn0Qubbv8yvkgk4kkpCr8TPK5TueGxMQ+rmRqOOzee9bZi+kqpuEjTxmG2TqVaIZv/lwwRHWfso8Un9rxtOXdh3B2omj8lRvDEnoXK/0/fL4ymxgpmCJEkTGd8GPARwLvm+si1xzkWqa7gsJr38xtNJ1TYQxK6hMtKIow676ljzl4xKiF6c/YEqFf76yN+LVK/vu6nKidDBHZu1L/tvZIuW4YFC7BCm5dM2Nen2q4HS+o/bPBI8Lvue/Jfj7mfT+MP9p2anp4Xno/Qs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH8+UpqVQ6Agztcix9yioeNXx5U5INxBPm0KT8uGvv0mxFRC9emeYYbK7s/baH1nJKcdJbHs+55AJmjIt7HX0f9y6OyZ4HBn1NhkbTrtuG23LRQZBFq638BgmrqtrIec5hIwLzERHt5FVNywkf3cW8hq213BrLdR80rV7yLiEli41pGvrJGbcK8J29DxjXoo55R7DCXBPEG/kX1160tPDJSe9e7plWQTMujMh5p5pkloEBOKY1EiamKfmns9pxL0RnTIs8gxeY0a8o7/uXa1WtVW9lmZT00YImahtSp+I0+mJ3v1RboYoZJN0uw4wSxklOKYvWJG6AjFLI82Pp2lGxSz5ANoyLaSgDVgTg1gOO9HNtwAFuy8i7ZHMODb4DFsl2C1MIANGQPv7NuzoJ1/r4HbvXYYZn6RZwg/W36MEbAlxOofI4GVmJbuvIx4pV/cUiBcyEuecLmGgxmSOCXDtOoMJXV9SLocv4lrRfm3NywkD8p2WnJq7PCVt80hlenQKXPyffu32aotyj+McumwhblrR/fiP3wN/+htZwePkediH+SXvFBR2nbekqla/rg8HtZqr1003bqN5tmlPrQfngpCm+4Csp9nir4TWF1EYXPtDfvPcg5xv7q/F7CJnDTf4tbz/7dwN48HVwL7zcS+0m3yJaLL4MRwEjxsh4DrpuTPLgV/+4CcaoCAdxAPnesUW+PHPYpjnT+OXMzJ2LpZzcttzwJluNq7fCJpDy2IbdNGfvuCHH2lICfr5crPqZ0v7onk/eCKdt5x2c9g3lnIwysfPQES5VKMR9rS+7BcWn0uLstDImBSu3lzpExfAhN5Vu5SseLkUHxp5spnb9XmraQVucNbw3XPf6vvnyEFWH/mo0W47jTOr1J8tiwOKQcomVMVSCrudn88JksTjwCLIjGWakxlw/RPEHhZYC9mtPBgp43CXSgXv988D33Ltvt+v26jVbDdakqUb2E7vvNWy27o2SMWQDTN/IiDbV+/6nnrfAqFzCkri1ZxzOehcyJIs8DIXsVVb4hqT4yNwpnTYs51Ww+Q0mcegCJtJGuUx1OazeVEgk2//bQMTXlgpJ/M0EzguTuGHSR5+K+shfSKqHLjK6AxkT+HIZeSU6XycdnM37RLezyOqDpssrsgo2TLZ//Q2M2pYqoGp8iK8Go5qyzchjgCYn/AzD0tTxYuWdCd6ecHKO0OqSrds7wLXFrV8ucyLhrpKMTMJb1omcs0RkFzK3uYu/QPMrCDML904FeuDyJV9n18uZmwksIBEjp9WLL/w3BgBV8+NUB6f9VffMnshZd0ErMUxWxDLV4li/OnDhXhE+UnztfxbpVn01q4jWDtxZJ7yjSEom6qVul82H8wGSSUslYKYZrvgxwCOBd83VkWuuAg5TeNcwMdfNKV0HR0TkuZMhD29MOyqb8FTbObgvTm9gykU/vXKXvMPr+zHq8uR1MEE65Uv/W9ngxbjQkDu4rTg0tHX8vUpg7Ppjtq/Ejwu+LbzmeDvZ9J9Z35v2anp4Xno/gs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb6M4FH7vr0D0cUSAhNxQEynXXaZNO9M0vb2sjDkET8GmtknS+fVrSKFJmnY7K0WKfDj+zncu/uwzgZK47g6EAC4Jo5o37un/BA2/3m63QgMFYctw/AAZftNuG81uEEADHOTYvq55QmTgUSERlT29btkNw7bU78a23GbdbXZr7W77UddugQsFrVxqlq5tkpgKtwjb0zNOXYYEES5FCQhXYnc+mF24ytNFJSe9f7ZlWQTk/UjK1DVNXAsAQxzjGmaJeWbu+ZwFwp2TJUUy4/AaMxA9/XXver2urRs1xpdm3bIs0+qayicQZHmq90/KzRB4NGTb9QhRRglGMfmNclIzkBELtEG8ZJzIKPkA2jZtK4c2YIMNbDv0VDffAhTsvoi0R5ILZIgI2SXYNYTAgWLQFtdeTz/9Wge3e284oiJkPBEH6z+jBHQFMUshMESZWcnu64hHytU/A+x6FMeZICu4zMckRRiE9oNDSDYXRKjhC4RWtF/biHLCAP9JS87MXZ6KtnmkMmOyBCH/T792e7VFuUVxBv3H0LnyVpJLyu/ibDONqGTnN12/NWG9gsKu85ZU1erX9eGgVnP1uml2E9rWj83d97vLLLt9XAcWv4ge/Yenh1Z6/7BY+NfPMLxaDi/nnVbaSr6B9/fvKPyerhnwxWP956Le3tyH8xEaed7J1fD6MqD+0lktktl6uj6Pya2Pomnk1396v76RlT3Bt3eDdtB6OCf3lC+izXj5be3PlsibZldj0u7g1cWdeDlP6AmBbhI0npwJfWZ/jZP59xfce8tpN4d9YykH88z/BViWy3w0vLE2Vf1C8nNpyS0kMMLC1U1zfRISqNT7+a5cVtxMiQ8JXNXM7XrSadmj9mjYHAy7A3s6mFiOZU+tgdXsdp3m0C71Z8vigOKI0ZDksXKF3c7P5wRx4gqgAXBjxTIcgdA/QRwjiTSPXquDwaiAG6YUvDPsNKZTxbhjT51xsz5WRAfT1sieTB3bGk907ZLJK3rFB6EEvq/ejT31vgZMUgK5xOdzLtSgC6lK8oxWmYzt2grVKGTqEuC5Drt1p9M0BUnSGHLCZsKCLIZaGqVFgUyx/a8bCIvCSgROGZcoLk7hh0kefivroXwCkjuIPKMhqJ7CkcvIKdP5OO3Wbtol/CALSH7YVHElJ3jLZP/T28zkw1INTJUXFtVwVFv+EOIIgPkJP/OwNFW8YEV2opcXrLozlKr0y/Y+o9pzLVutsqKh7VwxuYI3bdNqm3PAmZK9lxv2BNSsIMwv3TgV64PIlX2fXyYjOpdIQqLGTyuWX3huzEHkzw1PHZ/NV98yeyFV3SRs5DHbKFavkpzxpw8X7OLcT5l/qL8148Fbu45g7cRReao3hiR0ma/y++Xlg9nATMESJYiM74IfAzgWfN9YFbniItU0+ZmEj79oudL1dIQxy6j0xnph2FXfgqd8ScF9c3oHUyj865W9ER9e2fezi7nSwQTplS/5b2eDFOOCQe0SpODS0zfq9amC0+WO2r8SPC74deczwd/PpP/O/N6yU9PD89D/Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065254</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065256</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065258</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5A37A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5A7FA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5ABAA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_FUNC_CHILD_SAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="28867471-d117-405d-b1e5-3b1e9da466cc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5B08A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5B86A1FAE0401F0A059945B1:903EC660"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5AF6A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5AF6A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5AF6A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5B08A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5B50A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5B8BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5B08A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5B50A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5B8BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4kIHhhqjPgZY/danuq7W77ciaEoGkhoSSo3b9+BxSq1va0Z8YZJ4uVb33rki+54DCOTMflHKeCMKqM+h313yYM6ib0LS30IdAsYAZaG6OWZjQatuUjq2E0LFUZcZ7hEeUCUtFRTWDUNQPI39wAjl13gFkz7cajqtzhlEto6VIDqrKJI8qdImxHzVLqMMgJdyiMMXcEcmbuZOxITweWnNTuxZZlETDtLoVIHF1HtQAjHEWohlisX+gHPhcBd2ZkQaHIUryLGfCOutu7Xq9r63qNpQvdBADooK1Ln4CTxbnaPSs342BEQ7Zd9yBllCAYkT8wJzXBYskCxY0WLCViGX8AbegGyKE1vEEaMix6rupvAQp2X0Q6IJlyqPElNEqwGxziFFOEldubUUc9/1oHt3vnKaQ8ZGnMj9bfo4TpCkcswYHGy8xKdl9HPFGu7gVGzoiiKONkhaf5mCQQYa5cpzgkmzHhcvgCrhTtVza8nDCMvtOSC32fp6Stn6hMnywwF/+nX/u92qLcwSjD3WbS/2fd8G/r6Hb91F/f8utf9s00DKZ00iko7DtvSVWt3q2PB7Waq92my/Bhch/8crPf47twarbBY7CcX1rtV3leL707ww/vEtd+vHzshZsn/97n3ujaW43bbkgnzE5cdwN9N+v/uHzoBWfWczT/DVaR4d693D62H5j/kwY2gYvGcgOGy6vEm7eyyBiPB35kbuYMezYLgyGYTO2n+5Xuez+f+3HS+BF7g/VZ/DS+Wgsbzm8In/55vbRGoPOW034Oh8ZSDmaZ/4SRKJf5aIz6ylD2C4rPpSW3kEALC1cnyfWJC0yF2s135bLiZFJ8SODIZm7Xg1bD6DV7nu2BlmsM3QGwgDEELrDbbcv2jFJ/tiyOKPYYDUkeK1fY7fx8ThDFDsc0wKm2YhlaYq5+gtiHAiojeiMPBqMcz5lU8IHbAjbwesP2oF4fem7TdA174FqNPhhYVqupKlMmruhV6oYCp4fqXT9Q7xuMSEJwLvH5nHM56FzIkrzAVSYio7aCNYozeQmkuQ47ptWydU7iJMI5YT1mQRbhWrJMigLpfPtvahDxwko4SlgqYFScwg+TPP5W1kP6BCR34HlGHpY9xe8uI1P+dul8nHZjP+0S3s0Ckh82WVyRErRlcvjpbWbyYakGpsoL8Wo4qi3fhDgBoH/CTz8uTRUvWJG96OUFK+8MqSrdsr0vsPZSy1arrGhoM1fMVMLrhg6a+gyjTMre65w9Y6pXEPqXbpyK9VHkyn7ILxNLOhNQ4FiOn1Isv/DcmGGePzdG8vhsvvqWOQgp6ybwRpyy9SL5KskZf/pwQQ7K/aT5Wv6tWRq8tesE1l4cmad8YwhCF/kqv19eP5gNxCQskYLI0n3wUwCngh8aqyJXXIScJj8T+OMvSq50HRUixDIqRn21MOyrb8FTvCbYeXN6B1Mo/O7K3vAPr+z7yXgmdTCGauVL/ttZI8W4ICx3cVJw6agb+fqUweliT+13BE8KvjtsfCb4h5l035nfW/Zqenweun8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4kIHhhqjPgZY/danuq7W77ciaEoGkhoSSo3b9+BxSq1va0Z8YZJ4uVb33rki+54DCOTMflHKeCMKqM+h313yYM6ib0LS30IdAsYAZaG6OWZjQatuUjq2E0LFUZcZ7hEeUCUtFRTWDUNQPI39wAjl13gFkz7cajqtzhlEto6VIDqrKJI8qdImxHzVLqMMgJdyiMMXcEcmbuZOxITweWnNTuxZZlETDtLoVIHF1HtQAjHEWohlisX+gHPhcBd2ZkQaHIUryLGfCOutu7Xq9r63qNpQvdBADooK1Ln4CTxbnaPSs342BEQ7Zd9yBllCAYkT8wJzXBYskCxY0WLCViGX8AbegGyKE1vEEaMix6rupvAQp2X0Q6IJlyqPElNEqwGxziFFOEldubUUc9/1oHt3vnKaQ8ZGnMj9bfo4TpCkcswYHGy8xKdl9HPFGu7gVGzoiiKONkhaf5mCQQYa5cpzgkmzHhcvgCrhTtVza8nDCMvtOSC32fp6Stn6hMnywwF/+nX/u92qLcwSjD3WbS/2fd8G/r6Hb91F/f8utf9s00DKZ00iko7DtvSVWt3q2PB7Waq92my/Bhch/8crPf47twarbBY7CcX1rtV3leL707ww/vEtd+vHzshZsn/97n3ujaW43bbkgnzE5cdwN9N+v/uHzoBWfWczT/DVaR4d693D62H5j/kwY2gYvGcgOGy6vEm7eyyBiPB35kbuYMezYLgyGYTO2n+5Xuez+f+3HS+BF7g/VZ/DS+Wgsbzm8In/55vbRGoPOW034Oh8ZSDmaZ/4SRKJf5aIz6ylD2C4rPpSW3kEALC1cnyfWJC0yF2s135bLiZFJ8SODIZm7Xg1bD6DV7nu2BlmsM3QGwgDEELrDbbcv2jFJ/tiyOKPYYDUkeK1fY7fx8ThDFDsc0wKm2YhlaYq5+gtiHAiojeiMPBqMcz5lU8IHbAjbwesP2oF4fem7TdA174FqNPhhYVqupKlMmruhV6oYCp4fqXT9Q7xuMSEJwLvH5nHM56FzIkrzAVSYio7aCNYozeQmkuQ47ptWydU7iJMI5YT1mQRbhWrJMigLpfPtvahDxwko4SlgqYFScwg+TPP5W1kP6BCR34HlGHpY9xe8uI1P+dul8nHZjP+0S3s0Ckh82WVyRErRlcvjpbWbyYakGpsoL8Wo4qi3fhDgBoH/CTz8uTRUvWJG96OUFK+8MqSrdsr0vsPZSy1arrGhoM1fMVMLrhg6a+gyjTMre65w9Y6pXEPqXbpyK9VHkyn7ILxNLOhNQ4FiOn1Isv/DcmGGePzdG8vhsvvqWOQgp6ybwRpyy9SL5KskZf/pwQQ7K/aT5Wv6tWRq8tesE1l4cmad8YwhCF/kqv19eP5gNxCQskYLI0n3wUwCngh8aqyJXXIScJj8T+OMvSq50HRUixDIqRn21MOyrb8FTvCbYeXN6B1Mo/O7K3vAPr+z7yXgmdTCGauVL/ttZI8W4ICx3cVJw6agb+fqUweliT+13BE8KvjtsfCb4h5l035nfW/Zqenweun8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vghACFqCAFKHfTlrZbaHe7L1fGmYDbxAmxE2B//dqhSYHS3u6VkJAn4zNnPnzsM46jsO64nEMqaMw0b9jV/235ljVr2IFhNTsdo1FvgNGegWlgPLNbgGcNqz3TNY/zDDzGBWaiq9dNyzYsU/6mluk0bcds1Oqd+i9de4CUS2jpUjN1bR2FjDtF2K6epcyJMafcYTgC7gjiTNzxlSM9HVxy0ntnW5ZFwLS3ECJxECI1HwiEIamROEJnaM/nzOfOhM4ZFlkKLzF93tVf9q5Wq9rKrsXpHNVN00RmB0kfn9P5V733pdwMvseCeLseYBYzSnBIf2NFagxiEfuaG87jlIpF9A60hSxTQRuwJgaxGuyrjl4DFOw+ibRHMuXY4AtslWB3EEAKjIB2f+d19a+f6+B27zTFjAdxGvGD9d9RApZDGCfgG7zMrGT3ecQj5eqdAXE8RsKM0xyu1ZgkmADXblMI6PqKcjl8PteK9mtrXk4YkL9pyRna5SlpoyOVGdI5cPF/+rXbqy3KAw4z6FnmJtvg1sVvc7i6ORn129Hz+jFAk8vBebegsOu8JVW1+mV9OKjVXL1sSlYcPXw/D26fVt9mJ1l2Lh5X4ysvc73nSzf40SEnUd4c/Fo/fFuTk/v6Lbjt9Dm/gmnfntPngbu8ePz5j4f8Bz+afUFsHNy078mv9U/8NLzvzx77EbPszMX3J8EFnn7vJxv3arCUU+glXr4MJ/E4RBfNaf3xx7enSe7Ry2viXY6/u/XRF+Yu4d7O8pa4uRUP551Nc9x9zWk3h31jKQeTbPYERJRLNRreUBvJfmHxsbQoC/WNoHB1EqVPXAATek/tUrLiZFJ8qO/IZm7X5+2WNTgd9Jv9pulaI/fcbJjWyHRNeb4azb5V6s+WxQHFQcwCqmIphd3Oz8cESeRwYD6kRh5nZAFc/wBxiAXWPHYnD0bMOExjqeDD/qDTbtmNkdUw3VbbsvvN9sg+bbm21bFHrtTh61jcsJvUDQSk++pt76n3HRCaUFASr+acy0HnQpZkifNMhFYtxzUGmbwEUqXDTr3RbiJOoyQERRhFsZ+FUEsWSVEgxLf/dQMTXlgpJ0mcChwWp/DdJA+/lfWQPj5VDlxl1AfZU3hzGdWdZpnO+2m3dtMu4d3Mp+qwyeKKlJItk/1PrzOjhqUamCovwqvhqLb8JcQRAPQBP3RYmiqen9Od6OUFK0+rVJVe2d4lri1rWZ5nRUNPlWKmEh5ZyDxFEyCZlL3NNH4GhioI9Kkbp2J9ELmy7/PLxIJNBBYQyfHTiuUnnhsT4Oq54cnjs/7sW2YvpKybgLU4ZhuE8lWiGH/4cCEOUX7SfCv/VnHqv7brCNZOHJmnfGMIyuZqpe6XzTuzQWIJS6Ugxuku+DGAY8H3jVWRKy5CTtMsE/D+F00pXVfHhMQZE95QLwy76lvwFJsEnFenNzCFwr9c2Wv+7pX9c3w1kToYYb3ypf/tbNBiXAjIXZwWXLr6Wr4+ZXA231H7F4JHBd8dtT4S/P1Mem/Mby07NT08D70/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoYwcBBVGmOgNUW3pvdXfX/XImhqDphkST4KW//gQsVK3tac+MM04WK9/61iVfcspBmtRdj3PEBKZECc866j82aFtjy4YaGo+bmtUwDK1txVBzLCM2nSZyIqelKiHnGQoJF4CIjlo3zIZmGvI3NA3XbriGU2vY5h9VeUKMS2jpUjNUZZUmhLtF2I6aMeJSwDF3CUgRdwV0B97NtSs9XVByUrunG5ZFQNadCjFzdR3WIgRRksAapKl+qu/4nEbcHeAJASJj6C1mxDvq297lcllbNmqUTfS6YRi60dalT8Tx5FjtHpWbURSSmG7WASCUYAgS/ApyUjdITGmkeMmEMiym6SfQpm4aObSGVlCDpkWOVf09QMHum0g7JBkHGp8CswR7RDFiiECk/HoMO+rx9zq42TtkgPCYspTvrX9GCZEFSugMRRovMyvZfR/xQLm6pwi6IYFJxvEC3eZjMgMQceWeoRivrjGXwxdxpWi/suLlhCH4k5ac6ts8JW39QGXO8ARx8X/6td2rDcoTSDLUbfnp8qR9Mb9v2JfhiDw+wPBJJ/VW8DjpFBS2nTekqla/rfcHtZqrt03X13d2wKH/sBre6i0TRJevyZovRs3eb+E/9K2b819O/3d8Ga6YOehNn7L2gnD//H560rSn1B9P0D1Yv1B2OX+9OHoa9Z4s+45cja7ur5xYZv+yvIj/rq9uxmIu5i8BSmO+/DM9f4jX8cx7HgxphBPm168n7GzdG46s9ksaeM7i/Ll9dMJfR+eDwag3Hy2sQWz2Eth5z2k7h11jKQeDbPyCoCiX+WiEZ0pf9guIr6Ult+BIiwtXd5brExeICLWb78plxc2k+ODIlc3crHutphk4gW/7Ld8z+17PsAyzb3iG3W5btm+W+rNhsUcxoCTGeaxcYTfz8zVBmLockQgxbUEzOEVc/QLxDAighORRHgxKOBpSqeBt3/baPafp+b3Abnm+YbZ6Zt0KLCsIjH7TUZVbKu7IHfNigdiuejd21PsRQTzDKJf4fM65HHQuZEnmYJGJxKwtQI2gTF4CLNdht261bJ3jdJagnLCe0ihLUG02nRUF0vnmv64ByAsr5nBGmQBJcQo/TXL/W1kP6RPh3IHnGflI9hR9uIzqrl2m8yFt6+ClVcJ7WYTzwyaLKxiGGya7n95nJh+WamCqvCCvhqPa8kOIAwD6F/z0/dJU8aIF3opeXrDyzpCq0i3bOwe1eS1bLLKioU6umEzC66ZuOPoAwUzK3npI/yKiVxD6t26civVe5Mq+yy8TUzIQQKBUjp9SLL/x3Bggnj83Qnl8Vt99y+yElHUTaCUO2YJEvkpyxl8+XKALcz9pvpd/S8qi93YdwNqKI/OUbwyBySRf5ffL+pPZgFTCYimIlG2DHwI4FHzXWBW54iLkNI0zgT7/ouRK11EBhDQjIjxTC8O2+hY8xXqG3HenDzCFwr9d2Sv+6ZX9fHM9kDqYArXyxf/trOFiXCCSuzguuHTUlXx9yuBksqX2bwQPCr7Xb34l+LuZdD+YP1q2arp/Hrr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06531</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06533</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06535</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5B09A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5B51A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5B8CA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_FUNC_CHILD_BAU_Get_YOUTH_200_OK_P1" searchProperties="true" id="5d03e113-a613-4dcc-9961-a4b38d72b08b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5BF2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5C70A1FAE0401F0A059945B1:146486F8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5BE0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5BE0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5BE0A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5BF2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5C3AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5C75A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5BF2A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5C3AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5C75A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YQUBFkqjPUl5atbd3qtrv9cieGo6SFoCQo7a+/CRaq1vZ274wzTg4nz3nOS57klKE4qrseY5ByklDF73fUf7BVt0zkzLSWg+da04K5NgMHaQ3sNAK7aTiO3VYVn7EMfMo4oryj1g2zoZmG+E1Nw7UartGuNVrmg6rcQcoEtHCpGaqSxxFlbhG2o2YpdRPECHMpioG5HLsT72rkCk8XlZzU7umWZREw7YacL11dx7UAMEQRruEk1k/1PZ/TgLkTsqCIZym8xgxYR33du9lsaptGLUkXet0wDN1o68InYGTxXe1+KzdD4NN5sl33EE0owSgiL0iSugIeJoHiRYskJTyMP4A2ddOQ0BrkWMNmk35X9bcABbsvIu2RTBnSWIjMEuwW5pACxaD8uvU76vevdXC7d5oiyuZJGrOD9d9RArqGKFlCoLEys5Ld1xGPlKt7Ctj1KY4yRtZwLcdkiTAwZZzCnOQjwsTwBUwp2q/krJwwwH/TklN9l6egrR+pTJ8sgPH/06/dXm1R7lCUQXf62MqMyyf9pnV+wsbo4XIdP15PBqNn3+8UFHadt6SqVr+uDwe1mqvXTT+9OvpxafuP/Ok3835dtHsLNuiPYyPsvVyakzvv+nzOEaDH23Pkze4eVuNeePG0+XnP7/U/V+2Lq3Bojh4gb824/W2T44xlYes8JHUSbH5ja3Xy7KQU7unUGA+ejHW+um/NTOd6uTm5eYlGxq+xk8fWTfvP2mnQn/PJyezmwclpPgm/0bwRXNTj1Qk5mZKUj6Io6bzltJvDvrGUg0k2ewTMy6UcDb+vDEW/EP9cWqSFBNq8cHWXUp8YB8rVrtwlZcXNhPiQwBXN3K4HTsvs2b0z62xY98yhNzCahjk0PMNqt5vWmVnqz5bFAcVeQudExpIKu52fzwni2GVAA0i1dZLhEJj6CWIfcaT49FYcjIQymCZCwYfG4MzyzIbZNG3b8uxWv2WfDQdOYyBo121bVa4TfkNvUm/OId1X78aeet8CJksCUuLlnDMx6IyLkqzQOuORWVujGoVMXAKp1GG33nQsnZF4GYEkrMdJkEVQW4bLokA62/7XNYRZYSUML5OUo6g4hR8mefitrIfwCYh0YDKjMxA9hXeXUd21ynQ+Tru1m3YJ72UBkYdNFJenBG+Z7H96mxk5LNXAVHlhVg1HteUvIY4A6J/w0w9LU8UL1mQnennBijtDqEq3bO8K1Va1bL3OiobaUjFTAa+bumHrE8CZkL3nafIEVK8g9C/dOBXrg8iVfZ9fxkM64YhDLMZPKZZfeG5MgMnnhi+OT/7Vt8xeSFE3Djk/ZutF4lUiGX/6cMEuln7CPBZ/myQN3tp1BGsnjshTvDE4oQu5kvfL8wezgRMBS4QgJuku+DGAY8H3jVWRKy5cTNMs4/DxF0UqXUdFGCcZ5X5fLQy76lvw5M9LcN+c3sEUCv96Zefswyv799VoInQwRmrlS/7bWSPFuGAQuxgpuHTUXLw+RXC62FH7V4LHBX9gfCb4+5l035nfW3Zqengeuv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YQUBFkqjPUl5atbd3qtrv9cieGo6SFoCQo7a+/CRaq1vZ274wzTg4nz3nOS57klKE4qrseY5ByklDF73fUf7BVt0zkzLSWg+da04K5NgMHaQ3sNAK7aTiO3VYVn7EMfMo4oryj1g2zoZmG+E1Nw7UartGuNVrmg6rcQcoEtHCpGaqSxxFlbhG2o2YpdRPECHMpioG5HLsT72rkCk8XlZzU7umWZREw7YacL11dx7UAMEQRruEk1k/1PZ/TgLkTsqCIZym8xgxYR33du9lsaptGLUkXet0wDN1o68InYGTxXe1+KzdD4NN5sl33EE0owSgiL0iSugIeJoHiRYskJTyMP4A2ddOQ0BrkWMNmk35X9bcABbsvIu2RTBnSWIjMEuwW5pACxaD8uvU76vevdXC7d5oiyuZJGrOD9d9RArqGKFlCoLEys5Ld1xGPlKt7Ctj1KY4yRtZwLcdkiTAwZZzCnOQjwsTwBUwp2q/krJwwwH/TklN9l6egrR+pTJ8sgPH/06/dXm1R7lCUQXf62MqMyyf9pnV+wsbo4XIdP15PBqNn3+8UFHadt6SqVr+uDwe1mqvXTT+9OvpxafuP/Ok3835dtHsLNuiPYyPsvVyakzvv+nzOEaDH23Pkze4eVuNeePG0+XnP7/U/V+2Lq3Bojh4gb824/W2T44xlYes8JHUSbH5ja3Xy7KQU7unUGA+ejHW+um/NTOd6uTm5eYlGxq+xk8fWTfvP2mnQn/PJyezmwclpPgm/0bwRXNTj1Qk5mZKUj6Io6bzltJvDvrGUg0k2ewTMy6UcDb+vDEW/EP9cWqSFBNq8cHWXUp8YB8rVrtwlZcXNhPiQwBXN3K4HTsvs2b0z62xY98yhNzCahjk0PMNqt5vWmVnqz5bFAcVeQudExpIKu52fzwni2GVAA0i1dZLhEJj6CWIfcaT49FYcjIQymCZCwYfG4MzyzIbZNG3b8uxWv2WfDQdOYyBo121bVa4TfkNvUm/OId1X78aeet8CJksCUuLlnDMx6IyLkqzQOuORWVujGoVMXAKp1GG33nQsnZF4GYEkrMdJkEVQW4bLokA62/7XNYRZYSUML5OUo6g4hR8mefitrIfwCYh0YDKjMxA9hXeXUd21ynQ+Tru1m3YJ72UBkYdNFJenBG+Z7H96mxk5LNXAVHlhVg1HteUvIY4A6J/w0w9LU8UL1mQnennBijtDqEq3bO8K1Va1bL3OiobaUjFTAa+bumHrE8CZkL3nafIEVK8g9C/dOBXrg8iVfZ9fxkM64YhDLMZPKZZfeG5MgMnnhi+OT/7Vt8xeSFE3Djk/ZutF4lUiGX/6cMEuln7CPBZ/myQN3tp1BGsnjshTvDE4oQu5kvfL8wezgRMBS4QgJuku+DGAY8H3jVWRKy5cTNMs4/DxF0UqXUdFGCcZ5X5fLQy76lvw5M9LcN+c3sEUCv96Zefswyv799VoInQwRmrlS/7bWSPFuGAQuxgpuHTUXLw+RXC62FH7V4LHBX9gfCb4+5l035nfW3Zqengeuv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkchFwg0UUFKuOwybSktTDXty8o4J8Rt4oTYAdpfv3ZoUmBot12pEvXJ8Xe+c/FnnzOUxJbrMQY5JylVxoOu+g8KTDDsjqWBaYZaK2xizel0FhqywGnjM2uxsNuqMmasgDFlHFHeVS3DbGqmIf7mpuHaTdc0G6bTeVCVO8iZgBYuDUNVtklMmVuG7apFTt0UMcJcihJgLsfuzLu6dIWniypOau98x7IMmPcizjNX13EjAAxxjBs4TfRz/cDnPGDujCwp4kUOrzED1lVf9242m8am2UjzpW4ZhqEbji58AkaW39Xet2ozBGMaprt1H9GUEoxi8oIkqSvgURooXrxMc8Kj5B1oUzcNCa3BFmvYbNHvqv4WoGT3SaQDkjlDGouQWYHdQgg5UAzKr9txV/3+uQ7u9s5zRFmY5gk7Wn+NEtA1xGkGgcaqzCp2n0c8Ua7eOWB3THFcMLKGiRyTDGFgyjSHkGwvCRPDFzClbL+yZdWEAf5KS871fZ6Ctn6iMgOyBMb/T7/2e7VDuUNxAT0c39xMsc94MXu4GfDb6M6eXMaLohj+6pYU9p13pOpWv66PB7Weq9dNoXWGvBVbnN2RPhvARXjv3bYi+0fcmf69IZPnv4p1dLW4vI7GTyjt6+GjP7x6yubkdzvgzxfIjtCMwAsKH0Z88s16Gf6YsPnST/zLCz9tL+95Bxft5N7httf6tZ4EPDGWd8/O6PdyhG6W5HH60Myy++ufMg995ZnBNL3wo8efnvXNWp1dBf2N+Hfuvzw8jqf2sPuW034Oh8ZKDmbF4hEwr5ZyNMYDZST6hfjH0iItJNDC0tXNpD4xDpSrPblLyopbCPEhgSuauVsPz9pmv9P37X7T88yRNzRahjkyPMN2nJbtm5X+7FgcUeynNCQyllTY3fx8TBAnLgMaQK6t0wJHwNQPEAeII2VMb8XBSCmDeSoU3BO0fKvvDSy7ObIMx+v0nU6rPxr4Q8cxO46qTFJ+Ta9zL+SQH6p380C9bwGTjICUeDnnTAw646IkK7QueGw21qhBoRCXQC512LVaZ7bOSJLFIAnrSRoUMTSyKCsLpLPdr6UhzEorYThLc47i8hS+m+Txt6oewicg0oHJjHwQPYUTl5FRpfN+2u39tCt4rwiIPGyiuDwneMfk8NPbzMhhqQemzguzejjqLV+EOAGgf8BPPy5NHS9Yk73o1QUr7gyhKr2qvSvUWDWK9booG9qRipkLeN3UjY4+A1wI2Xuep09A9RpC/9SNU7M+ilzbD/kVPKIzjjgkYvyUcvmJ58YMmHxujMXx2X72LXMQUtSNw5afsvVj8SqRjD98uGAXSz9hnoqfTZoHb+06gbUXR+Qp3hic0KVcyfvl+Z3ZwKmAJUIQ03wf/BTAqeCHxrrINRcupmlRcHj/iyKVrqsijNOC8vFALQ376lvy5M8ZuG9Of8CUCv96ZW/Zu1f276vLmdDBBKm1L/lvZ42U44JB7GKk5NJVt+L1KYLT5Z7avxI8Kfj+0PhI8A8z6f1h/tOyV9Pj89D7Fw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7fv4Khjx0EBG9MdUZEW1sv3WK7u/tyJoaFpoWgJKjtrz8BC1Vre9oz44yTxcq3vnXJl1wwFAZlq80YxJxEVOo7TfkfD2PUQHVfMap6XTH9mqnMqpqvlGflemVWriDTqMlSn7EE+pRxRHlTLmu6oeia+E11zaoYll4t1QzjUZbuIWYCWriUNFnahgFlVha2KScxtSLECLMoCoFZHFtueziwhKeFck5y62LHMgsYtxacLy1VxSUPMAQBLuEoVC/UA58Lj1kumVPEkxjeYnqsKb/t3Ww2pY1RiuK5WtY0TdUaqvDxGJmfya1f+Wbw+tSPdusOohElGAXkFaWkhsAXkSe1g3kUE74IP4HWVV1LoRXYYgXrJj2T1fcAGbtvIh2QjBlS2ALpOdgEfIiBYpDuJv2mfPa9Du72TmNEmR/FITta/4wS0DUE0RI8heWZ5ey+j3iiXK0LwFaf4iBhZA2jdEyWCAOTbmPwyXZAmBg+j0lZ+6UtyycM8E9acqHu8xS01ROVccgcGP8//drv1Q7lHgUJtG4mbfw8rq9+e/Pq7dXMHK/h3L66u2rwbjOjsO+8I1W0+m19PKjFXL1tGq4D37x8XS1n5au7eufv5WjkhQ662Ty7g/PNwGnc3CZ0MesN+9Pba/9lMpzWnqoP3ccHuwf3zuTFnY+GhruqTu/dy18MB+Hfp8oI+9vfk8F0bgxmE+12PL43r21/oN/Unka+bQ8a1WRw56zOu+XYSM4nd+rAv56PYxe7f+zXG5W8dse2/ssGexqaYNzMncc/IxrMtu3me077ORwaczlwk9kTYJ4v09HoO1JP9Avxr6UltRBP8TNXa5nqE+NAudxKd6WyYiVCfIhniWbu1t16Ve/UOnalU6u09V67q5ma3tPaWqXRMCu2nuvPjsURxU5EfZLGShV2Nz9fE8ShxYB6ECvrKMELYPIXiA7iSOrTiTgYEWUwjYSCdzrVsuPUDLNWbxh2rVtta06vUq7YRkVv9wxDlkYRH9Nx3PY5xIfqbRyo9wQwWRJIJT6dcyYGnXFRkhVaJzzQS2tUopCISyBOddgqm/WKyki4DCAlrIaRlwRQWi6WWYFUtvsvKwizzEoYXkYxR0F2Cj9N8vhbXg/h45HUgaUZ2SB6CicuIy1P50Pa5slLK4dvJx5JD5soLo8J3jE5/PQ+M+mwFANT5IVZMRzFlh9CnABQv+CnHpemiOetyV70/IIVd4ZQlVbe3hUqrUrJep1kDa2lihkLeFVXtZrqAk6E7L1Mo2egagGhfuvGKVgfRS7sh/wSvqAuRxxCMX5StvzGc8MFlj43+uL4bL/7ljkIKerGYctP2TqBeJWkjL98uGALp37CfCv+NlHsvbfrBNZeHJGneGNwQufpKr1fXj6ZDRwJWCIEMYr3wU8BnAp+aCyKXHDhYppmCYfPv0ip0jVlhHGUUN535Mywr74ZT/6yBOvd6QNMpvBvV/aWfXplPwwHrtDBEMmFL/lvZ4Vk44JB7GIk49KUt+L1KYLT+Z7avxE8Kfh2V/tK8A8zaX0wf7Ts1fT4PLT+BQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06538</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065312</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5BF3A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5C3BA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5C76A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_FUNC_CHILD_BAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="24f12140-dd52-4079-ad3a-3f2e56ebfc14"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C7CB5CEEA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8938091529BE0401F0A07996E28:1DD1AE0B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C7CB5CDCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5CDCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C7CB5CDCA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C7CB5CEEA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C893805C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C8938096529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5CEEA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C893805C529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C8938096529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4ERBSZ6gwqtnZrb3a33b6cScNC00K4JKjtrz8BC1Vre9oz44yTxcq3vnXJl5wwFAZ122EMUk4iKo0GHfkfEyPDNw1TadZNS2noYCmPhu8pZqMJj6D52GhpsjRiLIMRZRxR3pHrmm4ouiZ+t7pmm4atWzVLa85k6Q5SJqCFS03sWocBZXYRtiNnKbUjxAizKQqB2RzbU2cytoWnjUpOcvdkw7IImHYXnMe2quKaBxiCANdwFKon6o7PicfsKZlTxLMU3mJ6rCO/7V2tVrWVUYvSuVrXNE3V2qrw8RiZH8vdo3IzeCPqR5t1H9GIEowC8opyUhPgi8iTnGAepYQvwk+gdVXXcmgF1ljBeoMey+p7gILdN5F2SKYMKWyB9BLsBnxIgWKQ/tyMOvLx9zq42XubIsr8KA3Z3vpnlIAuIYhi8BRWZlay+z7igXJ1TwDbI4qDjJElXORjEiMMTLpKwSfrMWFi+DwmFe2X1qycMMA/acmJus1T0FYPVGZA5sD4/+nXdq82KHcoyKDbMMbns3PaWtDkNUycfvN+/RL71rT16nQKCtvOG1JVq9/W+4NazdXbpuuH22QdJ+qdEfZWk4fzxcvjXHuejawVXc8nS+6MX54WZ9n9XzfBv4fP5qnv1oOp8Xs2HYftIR6k6JeuW+Tysp5YR9f37QvaW65OoWGGFzS5U63eq3/21OSaHsH4kc3V4TM5Cx/Oh8ng8n51PZ096S3XjcL72dXTHdKv2HP8d7A8bSezo0mf3s2aaXK++vXUvr55Pm396bzntJ3DrrGUg2n2+ASYl8t8NEYDaSj6hfjX0pJbiKf4hasd5/rEOFAud/NduazYmRAf4tmimZu1azX1fqvfM/uu6+hDx9Uamj7UHM1stxtmTy/1Z8Nij2I/oj7JY+UKu5mfrwni0GZAPUiVZZThBTD5C8QB4kga0RtxMCLK4DYSCj5ouU3D6jVc09Adq9F2zJ41dN2hpTfqvabhytJFxC/pZer4HNJd9TZ21PsGMIkJ5BKfzzkTg864KEmClhkP9NoS1Shk4hJIcx226w3LVBkJ4wBywmoYeVkAtXgRFwVS2ea/riDMCithOI5SjoLiFH6a5P63sh7CxyO5A8sz6oHoKRy4jLQync/Tbm6nXcI7mUfywyaKy1OCN0x2P73PTD4s1cBUeWFWDUe15YcQBwDUL/ip+6Wp4nlLshW9vGDFnSFUpVu2N0G1pJYtl1nR0FaumKmAV3VVa6lTwJmQvZfb6BmoWkGo37pxKtZ7kSv7Lr+ML+iUIw6hGD+pWH7juTEFlj83RuL4rL/7ltkJKerGYc0P2fqBeJXkjL98uGAb537CfCX+VlHqvbfrANZWHJGneGNwQuf5Kr9fXj6ZDRwJWCIEMUq3wQ8BHAq+a6yKXHHhYpoeMw6ff5FypevICOMoo3w0kAvDtvoWPPlLDPa70weYQuHfruw1+/TKfpiMp0IHQyRXvuS/nRVSjAsGsYuRgktHXovXpwhO51tq/0bwsOAP+l8J/m4m3Q/mj5atmu6fh+6/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4ERBSZ6gwqtnZrb3a33b6cScNC00K4JKjtrz8BC1Vre9oz44yTxcq3vnXJl5wwFAZ122EMUk4iKo0GHfkfEyPDNw1TadZNS2noYCmPhu8pZqMJj6D52GhpsjRiLIMRZRxR3pHrmm4ouiZ+t7pmm4atWzVLa85k6Q5SJqCFS03sWocBZXYRtiNnKbUjxAizKQqB2RzbU2cytoWnjUpOcvdkw7IImHYXnMe2quKaBxiCANdwFKon6o7PicfsKZlTxLMU3mJ6rCO/7V2tVrWVUYvSuVrXNE3V2qrw8RiZH8vdo3IzeCPqR5t1H9GIEowC8opyUhPgi8iTnGAepYQvwk+gdVXXcmgF1ljBeoMey+p7gILdN5F2SKYMKWyB9BLsBnxIgWKQ/tyMOvLx9zq42XubIsr8KA3Z3vpnlIAuIYhi8BRWZlay+z7igXJ1TwDbI4qDjJElXORjEiMMTLpKwSfrMWFi+DwmFe2X1qycMMA/acmJus1T0FYPVGZA5sD4/+nXdq82KHcoyKDbMMbns3PaWtDkNUycfvN+/RL71rT16nQKCtvOG1JVq9/W+4NazdXbpuuH22QdJ+qdEfZWk4fzxcvjXHuejawVXc8nS+6MX54WZ9n9XzfBv4fP5qnv1oOp8Xs2HYftIR6k6JeuW+Tysp5YR9f37QvaW65OoWGGFzS5U63eq3/21OSaHsH4kc3V4TM5Cx/Oh8ng8n51PZ096S3XjcL72dXTHdKv2HP8d7A8bSezo0mf3s2aaXK++vXUvr55Pm396bzntJ3DrrGUg2n2+ASYl8t8NEYDaSj6hfjX0pJbiKf4hasd5/rEOFAud/NduazYmRAf4tmimZu1azX1fqvfM/uu6+hDx9Uamj7UHM1stxtmTy/1Z8Nij2I/oj7JY+UKu5mfrwni0GZAPUiVZZThBTD5C8QB4kga0RtxMCLK4DYSCj5ouU3D6jVc09Adq9F2zJ41dN2hpTfqvabhytJFxC/pZer4HNJd9TZ21PsGMIkJ5BKfzzkTg864KEmClhkP9NoS1Shk4hJIcx226w3LVBkJ4wBywmoYeVkAtXgRFwVS2ea/riDMCithOI5SjoLiFH6a5P63sh7CxyO5A8sz6oHoKRy4jLQync/Tbm6nXcI7mUfywyaKy1OCN0x2P73PTD4s1cBUeWFWDUe15YcQBwDUL/ip+6Wp4nlLshW9vGDFnSFUpVu2N0G1pJYtl1nR0FaumKmAV3VVa6lTwJmQvZfb6BmoWkGo37pxKtZ7kSv7Lr+ML+iUIw6hGD+pWH7juTEFlj83RuL4rL/7ltkJKerGYc0P2fqBeJXkjL98uGAb537CfCX+VlHqvbfrANZWHJGneGNwQuf5Kr9fXj6ZDRwJWCIEMUq3wQ8BHAq+a6yKXHHhYpoeMw6ff5FypevICOMoo3w0kAvDtvoWPPlLDPa70weYQuHfruw1+/TKfpiMp0IHQyRXvuS/nRVSjAsGsYuRgktHXovXpwhO51tq/0bwsOAP+l8J/m4m3Q/mj5atmu6fh+6/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoMxJERJnqDEo9m2lru7318nImhqDphkBJQOqv3wELVWt72jPjjJPFyre+dcmXXDAYBk3LZgwnnERUcp2e/G+nC3VDayOloxlIabW0lrJsaZoCoe/rsOn7BujIkstYil3KOKS8JzeBpisaEL+ZBixDt5qgYbTBkywtcMIEtHBpAFnKw4Ayqwzbk9OEWhFkhFkUhphZHFlT++baEp4WrDjJ/YsdyzJg0l9zHluqihoeRjgIUANFoXqhHvhceMyakhWFPE3wW0yP9eS3vZvNprHRG1GyUpsAABV0VeHjMbI6l/tn1WbsudSPdushpBElCAZkCwtSN5ivI0+yg1WUEL4OP4HWVA0U0ArOkYK0Fj2X1fcAJbtvIh2QTBhU2BpqFdgE+zjBFGFpPnF78vn3OrjbO0sgZX6UhOxo/TNKmGY4iGLsKazKrGL3fcQT5epfYGS5FAUpIxkeF2MSQ4SZdJdgn+TXhInh85hUtl/KWTVhGP2kJRfqPk9BWz1RGYesMOP/p1/7vdqhLGCQ4v78cp5NwOMyXtm+uc39wXxwtZ1MyP0z65UU9p13pOpWv62PB7Weq7dN0d0IXwnQzlWaJxsPub72e7DMH9vzyaM6vv0NwsHSd5+gNty+bDt5snBex/lTeLe2F+2cmuQf2sWLbbZ9mb3ens1MEIzVLL7+5S8gSSb8Hmy9pj9bopFPTfdmrZH163xsz570BWHOEF+y5kPmzudb2uR3s3s9NsyH54fp8g+4Ovu1fRQRXgbb1vN4MMsmbW3Te89pP4dDYyUH03T5jBGvlsVouI40Ev2C/GtpKSzEU/zS1YoLfWIcUy73i12FrFipEB/iWaKZu/Vlp60NO129A4yh0ewOLkELaCNgA7PbbV82O5X+7FgcURxG1CdFrEJhd/PzNUEUWgxTDydKFqVojZn8BaIDOZRcOhEHI6IMzyKh4MC5dHRnpDuGNnAcA7RM3TZN07DBSNeN1lCWxhG/pbeJ7XOcHKq3fqDeE4xITHAh8cWcMzHojIuSvMAs5YHWyGCD4lRcAkmhw1az1TFURsI4wAVhNYy8NMCNeB2XBVLZ7r+pQMRKK2EojhIOg/IUfprk8beqHsLHI4UDKzIaYNFTfOIy0qp0Pk+7vZ92BW+nHikOmyguTwjaMTn89D4zxbDUA1PnhZhWca+3/BDiBID6BT/1uDR1PC8je9GrC1bcGUJV+lV7X2DjpZFmWVo21CwUMxHwqqYCU51ilArZe51FfzBVawj1WzdOzfoocm0/5JfyNZ1yyHEoxk8ql994bkwxK54brjg++XffMgchRd04zvkp2zAQr5KC8ZcPF2Shwk+Y78TfJkq893adwNqLI/IUbwxO6KpYFffL6yezgSIBS4QgRsk++CmAU8EPjXWRay5cTNMy5fjzL1KhdD0ZIhSllLuOXBr21bfkyV9jbL07fYApFf7tys7Zp1f2w831VOhgCOXal/y3s0LKcUFY7GKk5NKTc/H6FMHpak/t3wh+EHxzODCGztDWRnYt+Ea32zIG70fyIJP+B/NHy15Nj89D/y8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgOBdIooIUoMwwlN7o0Jm+HLmOAbeJQ2MHQr/+2KFJgdKezpGQkHe211774mWfcJTEVhByTjJBU6YN+239H+ha9r3jYcPxm03DcRxo+DPbNJqubdrRzIQWRLo25DwnQ8YFYqKtWya0DWjK3w00A9cOLLthQ+9O16Yk4xJaujRMXSuSmPGgDNvW84wFKeKUBwwlhAcCB5NwfBZIzwBVnPTOyZZlGTDrLIRYBgDgRkQwiWPcwGkCTsCez0nEgwmdMyTyjLzEjHhbf9m7Xq8ba7uRZnNgmaYJTB9In4jT+Ve986XaTKIhm6XbdQ+xlFGMYvqMFKkxEYs00sJ4nmZULJJ3oCGApoI2SIENDB32VQevAUp2n0TaI5lxZPAFghXYNZmRjDBMtF/Xw7b+9XMd3O69yRDjszRL+MH67ygRtiJxuiSRwavMKnafRzxSrs4JwcGQ4TjndEXO1ZgsESZcu8zIjBZnlMvhi7hWtl8reDVhBP9NS07ALk9JGxypTJ/OCRf/p1+7vdqiTFGckw4Z8acxu3VDaqfrs9tRXow22f3Ee+zidklh13lLqm71y/pwUOu5etmUrkHBnu3Tn4l7CjaXfWt6bibnD+M/P5+X8/nV1KG/vj/cf4uS1mghsjh69uFmetcqzs+vErhKL/Fd9HjfS7Kr6fjiywoONt3+460YFt/vehD3f4OLHzhmqG+OSRx+Gz/kPl/SS/9H9wf6hm6/XxZitVg/wLOf8cW4t7m6++ONBvGVB7relxCG0wEYWX46OmWt5Nov5u3XnHZz2DdWcjDJ7x8IFtVSjcawrw1kv5D4WFqUhUbGrHQNlkqfuCBM6B21S8lKkEvxoVEgm7ldn3pN2PN82zP9pmv53VPTMeHADM2W7zdPLa/Sny2LA4q9lM2oiqUUdjs/HxPEScAJi0hmrNIcLwjXP0DsI4G0IbuWByNlnNykSsGh1+w6PdeCLvQ9u9d3Qtvthr6suWN51kDXzlNxwS6ycCZItq/e9p56XxNMl5QoiVdzzuWgcyFL8oRWuYhhY4UajOTyEsiUDgeW47mA02QZE0UYJGmUx6SxXCzLAgG+/bcMhHlppRwv00yguDyF7yZ5+K2qh/SJqHLgKqMukT0lRy4jWKXzJm3n6KVVwYd5RNVhk8UVGcVbJvufXmdGDUs9MHVemMOKe73lLyGOAIAP+IHD0tTxohXdiV5dsPLOkKrSqdr7hBpPjXy1ysuGtpRiZhIeQGC2wITgXMre5iZ9JAzUEOBTN07N+iBybd/nl4sFmwgkSCLHTyuXn3huTAhXz42hPD7FZ98yeyFl3QQpxDFbL5avEsX4w4cLDrDyk+ZL+bdOs+i1XUewduLIPOUbQ1A2Vyt1v2zemQ2cSlgqBTHNdsGPARwLvm+si1xzEXKa7nNB3v+iKaVr6wjjNGdi2NdLw676ljzFZkmCV6c3MKXCv1zZBX/3yv49PptIHUyQXvvS/3Y2aDkumMhdnJZc2nohX58yOJvvqP0LwTeC3+p13V6/F8JBWAu+6/uO2309knuZdN6Y31p2anp4Hjr/Ag==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065317</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065319</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065321</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C7CB5CEFA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C893805D529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8938097529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_FUNC_CHILD_BAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="fa72bc78-9033-461b-939e-644774b8f435"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89380FD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C893817A529BE0401F0A07996E28:2949E0D9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C89380EB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C89380EB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C89380EB529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89380FD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8938145529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C893817F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89380FD529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8938145529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C893817F529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I4FP3ur+jUjw60hQJtB5jhVXHBR0Gd1S87Ib3QaJvWJi3or9+kUAQEFnfGGcztzbnnvuQkdYYCv+S0GIOYk5Aqg25D/cfFYKNq1SqAMbULJrhGwbbNUgFNkY1rJTDBclVlwFgCA8o4oryhlnSjXDB08fdo6E6l7JTMomVbr6ryDDET0MKlqKvKMvApc7KwDTWJqRMiRphDUQDM4diZtEZDR3g6KOekNusrllnAuOlxHjmahosuYPB9XMRhoNW1HZ+6y5wJmVPEkxjWMV3WUNd7F4tFcVEuhvFcK+m6rum2JnxcRuaXavMi3wzugM7C1bqDaEgJRj75QpLUCLgXukrLn4cx4V5wBNrQDF1CF2CJC9gw6aWqfQfI2J2JtEMyZqjAPGTkYGOYQQwUg/I0HjTUy/M6uNr7GCPKZmEcsL317ygBTcEPI3ALLM8sZ3c+4oFyNeuAnQHFfsJICndyTCKEgSn3MczIckiYGD6XKVn7lSXLJwzwb1pS17Z5Ctragcp0yRwY/z/92u7VCuUZ+Qk0F6/Ps977RBv3hu/3L5XbhN70kTlHw5enRkZh23lFatPq9Xp/UDdztd401q7ePPFvbdL373S/95fFJi+t/tScptoVufEXy6HLzV6Hfvb75ddrl/jcu611vqB6+/AwpSP9Zq5/vT5b6WiBLpKXh/frx/F9lSxR9Pm0uG7R5U1XL48sKEe9B07TQeu9HeKSV/nqlmc301FcnS2CZ+ot2YuZgvdKgupVv5v6nF2AMfQG+hWtGPyNeHd2+IEb3zlt57BrzOVgkkzfAPN8KUdj0FX6ol+In5YWaSFuYZa5OpHUJ8aBcrUpd0lZcRIhPsR1RDNX655VNTqWXbb0frdSsts93dSNvt7Sa7Zd7ZWsXH9WLPYodkI6IzKWVNjV/JwmiAOHAXUhLqRhgj1g6gnELuJIGdCxOBghZfAYCgVv9XWjaxudrlVpt81qS++Zpm23S3a5XGv37aqq3IX8D/0Tt2Yc4l31Lu+o9xgwiQhIiZdzzsSgMy5K8oHShPtGMUVFCom4BGKpw2KfVdEYCSIfJGEtCN3Eh2LkRVmBNLb6FUqEWWYlDEdhzJGfncKjSe5/y+shfFwiHZjMqA2ip3DgMjLydI6nXd1OO4dvJS6Rh00Ul8cEr5jsfvqeGTksm4HZ5IWZkXPfbPklxAEA7QQ/bb80m3huSrai5xesuDOEqjTz9n6g4kcxSdMka2hNKmYs4DVD02vaBHAiZO/zMXwHqm0gtLNunA3rvcgb+y6/hHt0whGHQIyfki3PeG5MgMnnxkAcn+W5b5mdkKJuHJb8kK3ji1eJZHzy4YIdLP2E+V78LML4O/FDWFtxRJ7ijcEJncuVvF8+j8wGDgUsEYIYxtvghwAOBd81boq84cLFNE0TDse/KFLpGirCOEwoH3TVzLCtvhlP/hmB8+30AyZT+PWVvWRHr+y/R8OJ0MEAqRtf8t/OBZKNCwaxi5GMS0NditenCE7nW2q/JnhY8HvtU4K/m0nzh/mnZaum++eh+S8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU/I4FP3ur+jUjw60hQJtB5jhVXHBR0Gd1S87Ib3QaJvWJi3or9+kUAQEFnfGGcztzbnnvuQkdYYCv+S0GIOYk5Aqg25D/cfFYKNq1SqAMbULJrhGwbbNUgFNkY1rJTDBclVlwFgCA8o4oryhlnSjXDB08fdo6E6l7JTMomVbr6ryDDET0MKlqKvKMvApc7KwDTWJqRMiRphDUQDM4diZtEZDR3g6KOekNusrllnAuOlxHjmahosuYPB9XMRhoNW1HZ+6y5wJmVPEkxjWMV3WUNd7F4tFcVEuhvFcK+m6rum2JnxcRuaXavMi3wzugM7C1bqDaEgJRj75QpLUCLgXukrLn4cx4V5wBNrQDF1CF2CJC9gw6aWqfQfI2J2JtEMyZqjAPGTkYGOYQQwUg/I0HjTUy/M6uNr7GCPKZmEcsL317ygBTcEPI3ALLM8sZ3c+4oFyNeuAnQHFfsJICndyTCKEgSn3MczIckiYGD6XKVn7lSXLJwzwb1pS17Z5Ctragcp0yRwY/z/92u7VCuUZ+Qk0F6/Ps977RBv3hu/3L5XbhN70kTlHw5enRkZh23lFatPq9Xp/UDdztd401q7ePPFvbdL373S/95fFJi+t/tScptoVufEXy6HLzV6Hfvb75ddrl/jcu611vqB6+/AwpSP9Zq5/vT5b6WiBLpKXh/frx/F9lSxR9Pm0uG7R5U1XL48sKEe9B07TQeu9HeKSV/nqlmc301FcnS2CZ+ot2YuZgvdKgupVv5v6nF2AMfQG+hWtGPyNeHd2+IEb3zlt57BrzOVgkkzfAPN8KUdj0FX6ol+In5YWaSFuYZa5OpHUJ8aBcrUpd0lZcRIhPsR1RDNX655VNTqWXbb0frdSsts93dSNvt7Sa7Zd7ZWsXH9WLPYodkI6IzKWVNjV/JwmiAOHAXUhLqRhgj1g6gnELuJIGdCxOBghZfAYCgVv9XWjaxudrlVpt81qS++Zpm23S3a5XGv37aqq3IX8D/0Tt2Yc4l31Lu+o9xgwiQhIiZdzzsSgMy5K8oHShPtGMUVFCom4BGKpw2KfVdEYCSIfJGEtCN3Eh2LkRVmBNLb6FUqEWWYlDEdhzJGfncKjSe5/y+shfFwiHZjMqA2ip3DgMjLydI6nXd1OO4dvJS6Rh00Ul8cEr5jsfvqeGTksm4HZ5IWZkXPfbPklxAEA7QQ/bb80m3huSrai5xesuDOEqjTz9n6g4kcxSdMka2hNKmYs4DVD02vaBHAiZO/zMXwHqm0gtLNunA3rvcgb+y6/hHt0whGHQIyfki3PeG5MgMnnxkAcn+W5b5mdkKJuHJb8kK3ji1eJZHzy4YIdLP2E+V78LML4O/FDWFtxRJ7ijcEJncuVvF8+j8wGDgUsEYIYxtvghwAOBd81boq84cLFNE0TDse/KFLpGirCOEwoH3TVzLCtvhlP/hmB8+30AyZT+PWVvWRHr+y/R8OJ0MEAqRtf8t/OBZKNCwaxi5GMS0NditenCE7nW2q/JnhY8HvtU4K/m0nzh/mnZaum++eh+S8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6vgJEAgUUGiIe1NW2gL3Wp3X65cZwBvgx1iB2h//dqhocDS3u6VkJAn4zNnPnzsU4HnqRv0hIBcUs6MuN8x/7XrzcRr4obVatfBariea/lOy7VIgnHS9lx4dJumEQtRQMyExEx2TNd26pZjq9+9YwfNeuB6tXrb+WkaD5ALBa1carZprOcpE0EZtmMWOQs4FlQEDM9BBJIE497gOlCeAa44md3TDcsyYN6dSZkFCJFaAgTSlNQIn6NTtOdzmohgTKcMyyKH15iJ6Jive1erVW1Vr/F8ilzbtpHtI+WTCDr9ana/VJshidmEb9YhZpxRglP6gjWpAcgZT4xeOuU5lbP5O9AOcmwNbcGaWMRpsK8megtQsvsk0h7JXGBLzLBTgY1gAjkwAsa3Udwxv36ug5u99zlmYsLzuThY/x0lYEtIeQaJJarMKnafRzxSru4pkCBmJC0EXcJQj0mGCQjjNocJXV9ToYYvEUbZfmMtqgkD8jctOUW7PBVtdKQyfToFIf9Pv3Z7tUF5wGkB3RG++Wf6MnRuqXtxRcOXO1aENntI0CDulBR2nTektq1+XR8O6nauXjddxyt4ERffzwYRlU9T72bwhEfeyVUapQBoFfYd5/Jm9vQ4u7mbtTDnKftJYcGfvz25bYxgkD16VF5F2K8/tL4If/izL3K6XgxpL4rayclT9rw4PzmJT/CiuPOQ/+P8Yn3n315G4fjXRSFTOqaXTtYc09t+vzFejkYoJgSfpfXBl9aPcMhGLe60yKjfpI9Zuuq85bSbw76xkoNx8fgLiKyWejTivnGu+oXlx9KiLTSxJqVrkGl9EhKYNLt6l5aVoFDiQ5NANXOzjtqeE7Z9pWiNZtP1zyK7YTvnds9u+b4Xue1KfzYsDiiGnE2ojqUVdjM/HxMk80AASyC3lrwgMxDmB4h9LLERs5E6GJwJuOdKwV3fUWSbXnju9XuNKDr3ndA96yvGYdjyI6XDQy5v2E3em0jI99W7vqfeIyA0o6AlXs+5UIMupCrJAi9Ve53aEtcYFOoSyLUOB26j3USCzrMUNGE050mRQi2bZWWBkNj8uxYmorRSQTKeS5yWp/DdJA+/VfVQPgnVDkJndAaqp3DkMnKqdN5P29tNu4LvFQnVh00VV+aUbJjsf3qbGT0s24HZ5kWEU3HfbvlLiCMA6AN+6LA023jJku5Ery5YdWcoVelW7V3g2qJWLJdF2dCWVsxcwSMH2S00BlIo2Xu+50/A0BYCferG2bI+iLy17/Mr5IyNJZYwV+NnlMtPPDfGIPRzI1bHZ/3Zt8xeSFU3CWt5zBam6lWiGX/4cCEB0X7KfKv+VjxP3tp1BGsnjspTvTEkZVO90vfL8zuzQbiCpUoQeb4LfgzgWPB947bIWy5STdNjIeH9L4ZWuo6JCeEFk3HfLA276lvylM8ZBG9Of8CUCv96Za/Fu1f298H1WOngHJtbX/rfzhYtx4WA2iVoyaVjrtXrUwVn0x21fyV4VPDt6Owjwd/PpPuH+U/LTk0Pz0P3Nw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1PSFoTSEWYAgVM/AIWj1/NyJ6YbiLYpJCmgv/4kxSIgevXOMMNkd2fttT+ykjOB48j1G0IAlzRhRnBeM/91PKiGHoBV9rySVSqOQ+uxjEsWeM7juGhXXNcJTSMQIoWACYmZrJmu7RQtx1a/kWP7p0XfrRYc2/tjGnfAhYJWLgXbNFZxxISfha2ZKWd+ggUVPsMxCF8Sf9i4vvKVp49zTmb9bM0yC8jrUylnPkKkEAKBKCIFksToDO34nIXCH9IJwzLl8BYzFDXzbe9yuSwsi4WET5Br2zayq0j5hIJOjs36Ub4ZwoCNk/W6hVnCKMERfcWa1DXIaRIajWiScCqn8SfQDnJsDW3BiljEKbFjE70HyNh9E2mHJBfYElPs5GC3MAYOjIDx+zaomcff6+B674hjJsYJj8Xe+meUgC0gSmYQWiLPLGf3fcQD5aqfAfEDRqJU0AX09JjMMAFhDDiM6eqKCjV8oTCy9hsrkU8YkJ+05Axt81S00YHKnNMJCPl/+rXdqzXKHY5SqIuua8+HYlFyuyfN3niynBQfeqT/4l5MahmFbec1qU2r39b7g7qZq7dNq2c3DjvenM5Tex4PehfL1/uee30pL05GNyN8FUzlHZ863cFgeTILr2a9x557cYmC/n2rEj29Pt0vfg3C5gi17F7zyD4Nu5fg3YxazYtqv3vP0cmqchHYz6/RnxPW/j3m5KU4WHSdVr/KS5cP/cEqCi5f3Nfu7YiSuIrc8fLp4Tl0L4uroxtZZsX2ffLccq8q16+/ho+k9p7Tdg67xlwOhunjExCZL/VoBOdGR/ULy6+lRVtoaI0zV3+m9UlIYNKs611aVvxUiQ8NfdXM9brtlZ2WVy16TqVz6labbbtkOx27YVeq1XLb9XL9WbPYo9hK2JjqWFph1/PzNUES+wJYCNxaJCmZgjC/QDzHEhsBu1UHI2ECRolScLdcPS13vKbdcu1Kqe02nLLXcrS103HL5w3T6CWyz/q8MZbAd9W7uKPet0DojIKWeD3nQg26kKokc7xIZeQUFrjAIFWXANc67Lsl7xQJGs8i0IRRnIRpBIXZdJYVCIn1v2thIjIrFWSWcImj7BR+muT+t7weyiek2kHojJqgegoHLiMnT+dD2qWDl1YO30hDqg+bKq7klKyZ7H56nxk9LJuB2eRFhJNz32z5IcQBAPQFP7Rfmk28cEG3oucXrLozlKrU8/bOcWFeSBeLNGtoRSsmV/DIQXYFDYGkSvZeRskzMLSBQN+6cTas9yJv7Lv8UjllQ4klxGr8jGz5jefGEIR+bgTq+Ky++5bZCanqJmElD9lakXqVaMZfPlyIT7SfMg/U3zLh74kfwtqKo/JUbwxJ2USv9P3y8slskETBUiWICd8GPwRwKPiucVPkDReppukxlfD5F0MrXc3EhCQpk8G5mRm21TfjKV9m4L87fYDJFP7tyl6JT6/sf66vhkoHY2xufOl/O1s0GxcCapegGZeauVKvTxWcTbbU/o3gQcG3282vBH83k/oH80fLVk33z0P9Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065324</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065325</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065327</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89380FE529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8938146529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C8938180529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_FUNC_CHILD_BAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="ae2010e8-724b-42d9-87c6-794b93d5cfd6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89381E6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C8938265529BE0401F0A07996E28:4BCAD402"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C89381D4529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C89381D4529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C89381D4529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89381E6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C8938230529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C893826A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89381E6529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C8938230529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C893826A529BE0401F0A07996E28</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSxwqchC1EgESB3qZ0Bbq+XBlnAH8NTogdlv76zw6EAgUuvRIS8mR85sziY1c4HvuWU+ccIkEDprnNqv6vCdi0rL6d6ZegmMlj28z07ZyXGVgAGPrFXA4MXXM5j8FlXGAmqrplmLmMachfzzScQs7JmVnLtj907QUiLqGlS1bumo99xp0kbFWPI+YEmFPuMDwG7gjidOt3t470dHDKSa9VliyTgFFtJEToIESyHhDwfZIlwRhV0JZPxeNOlw4ZFnEEq5ger+qrvbPZLDvLZYNoiCzDMJBRRtLH43R4rtfO0s3guWwQLNcNzAJGCfbpF1ak7kCMAk+r+8MgomI0PgBtItNQ0BmYkwwx8+xcR98BEnYnIm2RjDjO8BE2U7AODCACRkB77rhV/fy0Di739iLM+CCIxnxn/TtKwKbgByF4GZ5mlrI7HXFPuWoVII7LiB9zOoV7NSYhJsC1xwgGdH5LuRw+j2tJ+7U5TycMyG9aUkGbPCVttKcyTToELv5PvzZ7tUR5wX4MteHrDN2I4Rvlg9FtfXQzWXASkfbDu/VUTShsOi9JrVu9Wu8O6nquVpvqfyJz+vr63sGu+/U8KuD5rH/5Vp6FonVx4b7nKX58Qa+iex0HaIRb13ZwP7p4tntf3c7lU/+qPyT/mPe5TxeR1/ZZ7tOfYni4joeTDhQfHpufJT5suG+997ZpXYnrh6eXnrj5LM/b721itQzX67FH6JTQYnFxF7YvnruNr9Lnx8J6Gn+cdcp5yzUKk/w0f91/DF/8nF39zmkzh21jKgfduP8HiEiXajTcpnYl+4XFcWlRFioPQ+LqhEqfuAAm9JrapWTFiaX4UM+RzVyuW3bRbNjlnG22igWrfNky8oZ5ZdSNUrlcbFl2qj9LFjsUGwEbUBVLKexyfo4TJGOHA/MgykyDmIyA60cQm1hgzWUdeTACxqEXSAWvN0qtQj1fMC6bjXyx0bhqGmWz0Wq1LsvlZsMq6dp9IB7YQ1QfCIi21Tu3pd4dIDSkoCRezTmXg86FLMkET2Phm9kpzjKI5SUQKR12rLxdQJyOQx8UYTQOvNiHbDgKkwIhvvy3MpjwxEo5CYNIYD85hQeT3P2W1kP6eFQ5cJXRJciewp7LyErTOZx2cTPtFL4ee1QdNllcEVGyZLL96Xtm1LCsB2adF+Fmyn295ZcQewDQEX5otzTreN6UbkRPL1h5Z0hVqaXtneDsJBtPp3HS0JJSzEjCIxMZJdQFEkvZW/SCT2BoDYFOunHWrHcir+3b/GIxYl2BBYzl+GnJ8oTnRhe4em648vjMT33LbIWUdRMwF/tsDV++ShTjow8X4hDlJ82P8m8WRN53u/ZgbcSReco3hqBsqFbqflkcmA0SSFgqBTGINsH3AewLvm1cF3nNRchp6scCDn/RlNJVdUxIEDPhNvXEsKm+CU+xCMH5dvoBkyj86sqe84NX9tvdbVfq4Bjra1/6384ZmowLAbmL04RLVZ/L16cMzoYbar8iuF/wm/ljgr+dSe2H+adlo6a756H2Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I6EH3vr4jSxwqchC1EgESB3qZ0Bbq+XBlnAH8NTogdlv76zw6EAgUuvRIS8mR85sziY1c4HvuWU+ccIkEDprnNqv6vCdi0rL6d6ZegmMlj28z07ZyXGVgAGPrFXA4MXXM5j8FlXGAmqrplmLmMachfzzScQs7JmVnLtj907QUiLqGlS1bumo99xp0kbFWPI+YEmFPuMDwG7gjidOt3t470dHDKSa9VliyTgFFtJEToIESyHhDwfZIlwRhV0JZPxeNOlw4ZFnEEq5ger+qrvbPZLDvLZYNoiCzDMJBRRtLH43R4rtfO0s3guWwQLNcNzAJGCfbpF1ak7kCMAk+r+8MgomI0PgBtItNQ0BmYkwwx8+xcR98BEnYnIm2RjDjO8BE2U7AODCACRkB77rhV/fy0Di739iLM+CCIxnxn/TtKwKbgByF4GZ5mlrI7HXFPuWoVII7LiB9zOoV7NSYhJsC1xwgGdH5LuRw+j2tJ+7U5TycMyG9aUkGbPCVttKcyTToELv5PvzZ7tUR5wX4MteHrDN2I4Rvlg9FtfXQzWXASkfbDu/VUTShsOi9JrVu9Wu8O6nquVpvqfyJz+vr63sGu+/U8KuD5rH/5Vp6FonVx4b7nKX58Qa+iex0HaIRb13ZwP7p4tntf3c7lU/+qPyT/mPe5TxeR1/ZZ7tOfYni4joeTDhQfHpufJT5suG+997ZpXYnrh6eXnrj5LM/b721itQzX67FH6JTQYnFxF7YvnruNr9Lnx8J6Gn+cdcp5yzUKk/w0f91/DF/8nF39zmkzh21jKgfduP8HiEiXajTcpnYl+4XFcWlRFioPQ+LqhEqfuAAm9JrapWTFiaX4UM+RzVyuW3bRbNjlnG22igWrfNky8oZ5ZdSNUrlcbFl2qj9LFjsUGwEbUBVLKexyfo4TJGOHA/MgykyDmIyA60cQm1hgzWUdeTACxqEXSAWvN0qtQj1fMC6bjXyx0bhqGmWz0Wq1LsvlZsMq6dp9IB7YQ1QfCIi21Tu3pd4dIDSkoCRezTmXg86FLMkET2Phm9kpzjKI5SUQKR12rLxdQJyOQx8UYTQOvNiHbDgKkwIhvvy3MpjwxEo5CYNIYD85hQeT3P2W1kP6eFQ5cJXRJciewp7LyErTOZx2cTPtFL4ee1QdNllcEVGyZLL96Xtm1LCsB2adF+Fmyn295ZcQewDQEX5otzTreN6UbkRPL1h5Z0hVqaXtneDsJBtPp3HS0JJSzEjCIxMZJdQFEkvZW/SCT2BoDYFOunHWrHcir+3b/GIxYl2BBYzl+GnJ8oTnRhe4em648vjMT33LbIWUdRMwF/tsDV++ShTjow8X4hDlJ82P8m8WRN53u/ZgbcSReco3hqBsqFbqflkcmA0SSFgqBTGINsH3AewLvm1cF3nNRchp6scCDn/RlNJVdUxIEDPhNvXEsKm+CU+xCMH5dvoBkyj86sqe84NX9tvdbVfq4Bjra1/6384ZmowLAbmL04RLVZ/L16cMzoYbar8iuF/wm/ljgr+dSe2H+adlo6a756H2Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxVyhUBUkLiEOenltIdLp+3LyDgG3CY2tZ0U+vVjh4YChU47EhLyzvbaa1+87HMO0sQJ2pwjJjAlWtRr6v9U7QaAIPaNmu05hhd7wACuhQx3ClzPdxqW51i6FnGeoYhwAYho6o5lu4Ztyd/ItoKqG7hOpd7wHnXtDjEuoaVLRe5apgnhQRG2qWeMBBRwzAMCUsQDAYNh+/oqkJ4BKDnprfM1yyIga82FWASmCSsxgihJYAXS1Dw3d3zOYx4M8YwAkTH0HjPmTf197+vra+XVrVA2Mx3LskyrYUqfmOPZqd46KTejOCJTul53AaEEQ5DgN6BIXSMxp7HWTmaUYTFPj0Dbpm0paAMtoQFtj5zq5keAgt03kXZIMg4MPgd2CTZAU8QQgUgbD6Kmfvq9Dq73jhggfEpZyvfWP6OESI4SukCxwcvMSnbfRzxQrtY5gkFEYJJxnKPfakwWACKu3TI0xcsrzOXwxVwr2q8teTlhCP6kJefmNk9J2zxQmR6eIS7+T7+2e7VGuQNJhloAdu8u7Jpvk7OzuXBvUBqKLuVsUgubBYVt5zWpTavf1/uDupmr903kT/+yf++xVX/UBZPu09mDXfsVj26j4W1n3Enc0XiCLx5eV6M+c/M/f3XGQ9v75d907gWs0cd2OEj+fqqnnF7yG3hyv2LVWFwm/B6O67fpmX8xX42yh/whnk4uhyTNRXz21PXZsxiOUDsbVKnpvrl37pyP/eTRvrCfnh/x4OUyql/nJ6w9odVl+MChGbLe2+OqHTU/ctrOYddYysEwmzwhKMqlGo2op/Vlv4D4WlqUBcfGtHANFkqfuEBE6C21S8lKkEnxwXEgm7leh/Wa3a033LrjWlWn0Qktz7L7VtvyG41a6NRL/Vmz2KPYpWSKVSylsOv5+ZogTAOOSIyYkdMMzhHXv0DsAQG0iAzkwaCEoxGVCu6HNd/q2WHPsht2p1bthlWv74ZdqxFWGx2/p2u/qbghN6w9FYjtqre7o94DBPECIyXxas65HHQuZEleQJ6JxK7koEJQJi8BpnQ4cLx61eQ4XSRIETZTGmcJqizmi6JAJl//OwaAvLBiDheUCZAUp/BokvvfynpInxgrB64y6iDZU3TgMnLKdI6nXdtOu4RvZzFWh00WVzAM10x2P33MjBqWzcBs8oLcLrlvtvwQ4gCA+QU/c780m3hxjreilxesvDOkqrTK9r6Ayksly/OsaKivFJNJeNM2Ld8cIphJ2VuN6DMi5gbC/NaNs2G9F3lj3+WXiTkZCiBQKsdPK5bfeG4MEVfPjUgen+V33zI7IWXdBFqKQ7ZuIl8livGXDxcYQOUnzbfy75Wy+KNdB7C24sg85RtDYDJTK3W/rI7MBqQSFktBpGwb/BDAoeC7xk2RN1yEnKZJJtDxL5pSuqYOIKQZEZFSFGnYVt+Cp1gtUPDh9AmmUPj3K3vJj17Z99dXQ6mDKdA3vvi/nQ1cjAtEchfHBZemvpSvTxmczLbU/p3gQcG3e95Xgr+bSeuT+bNlq6b756H1Lw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SG5fSEWYKqKeKbhS3ex9fzsR0AdE2qUkK6K8/SbEIiB49M8wwWV351rcu+ZIjgbLUCyMhgEvCqBEPOuY/TaeF6z74VmOCGlbdb7hWgMGx2jDBbitpQd1pmkYsRAExFRJR2TE9x/Ut11G/G9cJG37oN2r1ILgzjVvgQkErl5pjGssspSIsw3bMgtOQIUFESFEGIpQ4HEcXw1B5hqjiZHaPVizLgLw7kzIPbRvXEsCQpriGWWYf2Vs+R4kIx2RKkSw4vMZMRMd83btYLGoLv8b41PYcx7Gdtq18EkGmB2b3R7UZkphO2GrdR5RRglFKXpAmdQFyxhIjSqeMEznLPoB2bdfR0BYssYXdOj0w7bcAJbsvIm2R5AJZYobcCuwaJsCBYjB+Xccd8+BrHVztveGIignjmdhZf48S0DmkLIfEElVmFbuvI+4pV/cIcBhTnBaCzOFSj0mOMAhjxGFClkMi1PAlwijbbyxFNWGAv9OSI3uTp6Jt76nMgExByP/Tr81erVBuUVpA17m7uuWXv85G+MIlg6w3n4wFuP7dJVl0SgqbzitS61a/rncHdT1Xr5twPi/yRtZkN48DMcIFS1iAYDxGT+mw/dDMG4NsLqI/9DQ7D8YsODv+PTp9dBdXmCwu2tP44WV4fxWdn14+sGD5gxYM8SzOm749jM8XMPnbK+oNO0LSecEBxSOMRfP5Eegpj+KH2D38fXZOeiNY9k6uDp+vZ4/P08MxT0973unVDzcZtJcQ9S5vZ+Sv/h1etIPOW06bOWwbKzkYF/cPgGW11KMRD4wT1S8kP5cWbSGJNSldw1zrk5BApdnVu7SshIUSH5KEqpmr9XHQdPtB2w+8ZtTw2r1jp+64J07ktNrt5rEXVPqzYrFDsc/ohOhYWmFX8/M5QZyFAmgC3JqzAs9AmJ8gDpBERkyv1cFgVMANUwre6DVPgqDu9/tOXVE9HvheK2r1G23P9VwnGJjGJZM/6U8eTSTwbfX2t9T7GjDJCWiJ13Mu1KALqUryhOaFTN3aHNUoFOoS4FqHQ68eNGxBsjwFTdjOWFKkUMtneVkgW6z+PQthUVqJwDnjEqXlKfwwyd1vVT2UT0K0g9AZ9UD1FPZcRl6Vzru063svrQo+KhKiD5sqruQEr5hsf3qbGT0s64FZ54WFW3Ffb/kmxB4A+xN+9m5p1vGSOdmIXl2w6s5QqtKt2vuEak+1Yj4vyoa2tGJyBW+7ttOyx4ALJXvPN0ydcnsNYX/pxlmz3om8tm/zK+SMjiWSkKnxM8rlF54bYxD6uRGr47P86ltmK6Sqm4Sl3Gfrp+pVohl/+nDBIdZ+yjxSfwvGk7d27cHaiKPyVG8MSehUr/T98vzBbGCmYIkSRMY3wfcB7Au+bVwXec1Fqmm6LyR8/MXQStcxEcasoDLWiqIMm+pb8pTPOYRvTu9gSoV/vbKX4sMr+8/FcKx0MEPm2pf8t7NFynHBoHYJUnLpmEv1+lTB6XRD7V8J7hV8d1D/TPC3M+m+M7+3bNR09zx0/wU=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065330</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065332</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065333</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89381E7529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C8938231529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C893826B529BE0401F0A07996E28</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_FUNC_CHILD_SAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="d2e27260-f3e9-43cc-a4c2-1ed6cc9c0d9d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861C89382D2529BE0401F0A07996E28</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861C7CB5D74A1FAE0401F0A059945B1:19F93AD1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861C89382C0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861C89382C0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861C89382C0529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861C89382D2529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861C7CB5D3FA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861C7CB5D79A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861C89382D2529BE0401F0A07996E28</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5D3FA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861C7CB5D79A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcZyNfABtPYIZwOXELKQ2ENnk5o8gyKLVlI8lg8vWVTEyAkpzkzDDDaHtr7bUvWtIlh0ls+13OMRMkpVrQb+v/eshroJaFjabdcI16K7IMaFp1w2madceBkWN5oa4FnOc4oFxAKtq6bVqOYZnyN7NMv+H4jluzPftB1+aYcQktXWqmrhVJTLlfhm3rOaN+CjnhPoUJ5r5A/rQ7HvnS04cVJ71zuWNZBmSdpRCZDwCqhRjhOEY1lCbgEhz5XIbcn5IFhSJn+CVmyNv6y97NZlPbOLWULYBtmiYwW0D6hJwsvuidi2ozDgMapbt1D9KUEgRj8gwVqTEWyzTUuvEiZUQskzegLWCZCtrABTKQVadfdPAaoGT3QaQjkoxDgy+hVYHd4ggzTBHW7m6Dtv7lYx3c7Z0xSHmUsoSfrD9HCdM1jtMMhwavMqvYfRzxTLk6lxj5AUVxzska36gxySDCXJswHJFiRLgcvpBrZfu1glcThtFnWnIJDnlK2uBMZfpkgbn4P/067NUOZQ7jHHd+/ppPhrFIvM3d9d02yeNoedV3g/xpvGiXFA6dd6T2rX5Znw7qfq5eNs1G7OGpP743+U24pNdwA+fPD91rO5uaaGDze4t/+1E8Rf+MGqL79f7hftxbzR/F8BvIirvkprjrsW20XbcmNwjgi+vl49ob09m8y39eDUa31vCBOVfP6fP9cOJs5yu+9foZ+r4ar55/uPGk/0h/zyeMBHGwKFqP42gAfhf519F8uK67Fz8m1vXXdc/NG2DWh8ve/aLbfs3pMIdjYyUH0/zxCSNRLdVoBH1tKPsFxfvSoiwkNKLS1c+UPnGBqdA7apeSFT+X4kNCXzZztx54TavntRzP7tsNu3U1MOumNTS7pttqNQe2V+nPjsUJxV5KI6JiKYXdzc/7BFHic0xDzIx1mqMl5vo7iH0ooBbQW3kwUsrxLJUK3ug1hoO+2/TMZsNqufWh6w4aTmtYN4f15vCqoWs3qfhOv7NuJDA7Vm/nSL1vMSIZwUri1ZxzOehcyJKs4DoXsVVbwxrFubwEmNJh3657DcBJksVYEQZJGuYxrmXLrCwQ4Lt/24CIl1bCUZYyAePyFL6Z5Om3qh7SJyTKgauMrrDsKT5zGdlVOm+n3TxMu4Lv5iFRh00WVzCCdkyOP73OjBqW/cDs80Lcqrjvt3wS4gwAeIcfOC3NPl64JgfRqwtW3hlSVTpVe1ewtqrl63VeNtRViskkPLCA6YIpRrmUve0s/Y0p2EOAD904e9Ynkff2Y365WNKpgAIncvy0cvmB58YUc/XcCOTxKT76ljkKKesmcCHO2XqxfJUoxu8+XJCPlJ80T+TfJmWviZ/DOogj85RvDEHoQq3U/bJ9YzZQKmGJFMSUHYKfAzgX/Ni4L/Kei5DT9JgL/PYXTSldW4cIpTkVQV8vDYfqW/IU2wz7r05/wZQK/3JlF/zNK/vXeDSVOphAfe9L/tvZIOW4ICx3cVJyaeuFfH3K4HRxoPYvBM8Lfs98T/CPM+n8Zf7bclDT0/PQ+QM=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcZyNfABtPYIZwOXELKQ2ENnk5o8gyKLVlI8lg8vWVTEyAkpzkzDDDaHtr7bUvWtIlh0ls+13OMRMkpVrQb+v/eshroJaFjabdcI16K7IMaFp1w2madceBkWN5oa4FnOc4oFxAKtq6bVqOYZnyN7NMv+H4jluzPftB1+aYcQktXWqmrhVJTLlfhm3rOaN+CjnhPoUJ5r5A/rQ7HvnS04cVJ71zuWNZBmSdpRCZDwCqhRjhOEY1lCbgEhz5XIbcn5IFhSJn+CVmyNv6y97NZlPbOLWULYBtmiYwW0D6hJwsvuidi2ozDgMapbt1D9KUEgRj8gwVqTEWyzTUuvEiZUQskzegLWCZCtrABTKQVadfdPAaoGT3QaQjkoxDgy+hVYHd4ggzTBHW7m6Dtv7lYx3c7Z0xSHmUsoSfrD9HCdM1jtMMhwavMqvYfRzxTLk6lxj5AUVxzska36gxySDCXJswHJFiRLgcvpBrZfu1glcThtFnWnIJDnlK2uBMZfpkgbn4P/067NUOZQ7jHHd+/ppPhrFIvM3d9d02yeNoedV3g/xpvGiXFA6dd6T2rX5Znw7qfq5eNs1G7OGpP743+U24pNdwA+fPD91rO5uaaGDze4t/+1E8Rf+MGqL79f7hftxbzR/F8BvIirvkprjrsW20XbcmNwjgi+vl49ob09m8y39eDUa31vCBOVfP6fP9cOJs5yu+9foZ+r4ar55/uPGk/0h/zyeMBHGwKFqP42gAfhf519F8uK67Fz8m1vXXdc/NG2DWh8ve/aLbfs3pMIdjYyUH0/zxCSNRLdVoBH1tKPsFxfvSoiwkNKLS1c+UPnGBqdA7apeSFT+X4kNCXzZztx54TavntRzP7tsNu3U1MOumNTS7pttqNQe2V+nPjsUJxV5KI6JiKYXdzc/7BFHic0xDzIx1mqMl5vo7iH0ooBbQW3kwUsrxLJUK3ug1hoO+2/TMZsNqufWh6w4aTmtYN4f15vCqoWs3qfhOv7NuJDA7Vm/nSL1vMSIZwUri1ZxzOehcyJKs4DoXsVVbwxrFubwEmNJh3657DcBJksVYEQZJGuYxrmXLrCwQ4Lt/24CIl1bCUZYyAePyFL6Z5Om3qh7SJyTKgauMrrDsKT5zGdlVOm+n3TxMu4Lv5iFRh00WVzCCdkyOP73OjBqW/cDs80Lcqrjvt3wS4gwAeIcfOC3NPl64JgfRqwtW3hlSVTpVe1ewtqrl63VeNtRViskkPLCA6YIpRrmUve0s/Y0p2EOAD904e9Ynkff2Y365WNKpgAIncvy0cvmB58YUc/XcCOTxKT76ljkKKesmcCHO2XqxfJUoxu8+XJCPlJ80T+TfJmWviZ/DOogj85RvDEHoQq3U/bJ9YzZQKmGJFMSUHYKfAzgX/Ni4L/Kei5DT9JgL/PYXTSldW4cIpTkVQV8vDYfqW/IU2wz7r05/wZQK/3JlF/zNK/vXeDSVOphAfe9L/tvZIOW4ICx3cVJyaeuFfH3K4HRxoPYvBM8Lfs98T/CPM+n8Zf7bclDT0/PQ+QM=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6PgfBBCooIUAsxmpjAtMDPdvqyMY8AlsSF2gPbXrxOaFCjt0pWQkG+uzz33w8e+5jCJTc/nHKeCMKqE3Zb6z9TB06lhRxq0I6jVpzbWmmbkaM7UqjeNpmVOZ3VVCTnPcEi5gFS0VFM3LM3Q5W9i6J5teZZbqzvOg6r8ximX0NKlpqvKLokp94qwLTVLqccgJ9yjMMHcE8gb+4MbT3p6sOSktq/3LIuAaXshxMoDANUijHAcoxpiCbgGRz7XEffGZE6hyFL8EjPiLfVl73a7rW2tGkvnwNR1HegukD4RJ/Mvavuq3IyjkM7Yfh1AyihBMCbPMCc1wGLBIsWP5ywlYpG8A20AQ8+hNbxDGjLq9IsKXgMU7C5EOiKZcqjxBTRKsBGe4RRThJVfo7Clfrmsg/u9kxRSPmNpwk/Wn6OE6QbHbIUjjZeZlewuRzxTrvY1Rl5IUZxxssHDfExWEGGu3KZ4RnY3hMvhi7hStF/Z8XLCMPpMS67BIU9JG5ypTJfMMRf/p1+Hvdqj/IZxhtvJ8zBcI2xjf/DoN4w+sr9F9efwrxubtQoKh857UlWrX9ang1rN1cum20005V3XvOMhCX/dE2e6IzvBWLSeNdzGaJatHGD3B6TxuEz0bMiF/2c78SfGA9gOh78fGw+jYcO+2QS76HtwlYX3cH037/gj3VoswbR3639dJ9aSdcPHpVgG+gZ/W+yYv3wgcGmZG95gf2ZgdruMf9p8+8u4e/77O6ivwSTV06sH6DqDyX36QwzA3QD2vtabrdecDnM4NpZyMM6mjxiJcpmPRthV+rJfUHwsLbmFRNqscPVWuT5xgalQ2/muXFa8TIoPiTzZzP2612wYgRN07K7V942+39PrutHXfd123brdMUr92bM4oRgwOiN5rFxh9/PzMUGUeBzTCKfahmVogbn6AWIXCqiEdCQPBqMcT5hUcMftB/1+r69bgdPvuJ2g13W6DcOtB7obWG5HVYZM/KQ/U38mcHqs3taReo8wIiuCc4nP55zLQedClmQNN5mIjdoG1ijO5CWQ5jrsmfWmDThJVjHOCYOERVmMa6vFqigQ4Pt/U4OIF1bC0YqlAsbFKXw3ydNvZT2kT0RyB55n1MGyp/jMZWSW6byfduMw7RLezyKSHzZZXJEStGdy/Ol1ZvJhqQamygvxajiqLZ+EOAMAPuAHTktTxYs25CB6ecHKO0OqSrts7xrW1rVss8mKhjq5YqYSHhhAd8AYo0zK3tOELTEFFQS46MapWJ9EruzH/DKxoGMBBU7k+CnF8oLnxhjz/LkRyuOzu/QtcxRS1k3gnThnC2L5KskZf/hwQR7K/aT5Vv5tWRq9tusM1kEcmad8YwhC5/kqv1+e3pkNxCQskYLI0kPwcwDngh8bqyJXXIScpmkm8PtflFzpWipEiGVUhF21MByqb8FTPK2w9+r0BqZQ+Jcre8ffvbLvBzdjqYMJVCtf8t/OGinGBWG5i5OCS0vdydenDE7nB2r/QvCN4Dddq2kGum26nUrwHddt9MxmVcCjTNpvzG8tBzU9PQ/tfwE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6OQD0JIooIUSClMKcxA2+32ZeU6F3BJHBo7QOfXrx2aFCjtdlZCQr65PvfcDx/7nKEktvyAMcg4SakyCFvqP87jrA62izTbaM40O3Kamms3bc1z3UbdfbQ9p4FUZcBYDgPKOKK8pVqGWddMQ/xuTMNv1H3bqjmu86Aqd5AxAS1caoaqbJOYMr8I21LzjPopYoT5FCXAfI79aXA99IWnj0pOavt8x7IImLUXnK98Xce1CDDEMa7hNNHP9QOf84j5UzKniOcZvMaMWEt93bvZbGqbei3N5rplGIZueLrwiRiZn6ntb+VmiAZ0lu7WXURTSjCKyW8kSV0DX6SREsTzNCN8kXwAbeqmIaE12GINmzY9U/W3AAW7LyIdkMwY0tgCmSXYBGaQAcWg3E4GLfXsax3c7b3JEGWzNEvY0frPKAFdQ5yuINJYmVnJ7uuIJ8rVPgfsDyiOc0bWMJJjskIYmPIzgxnZDgkTwxcxpWi/smXlhAH+k5ac6/s8BW39RGVCMgfG/0+/9nu1Q7lDcQ7t714+uh/3LxL9+m/Xup10M8DLn7fb8WXQKijsO+9IVa1+XR8PajVXr5vuc5t2otF94tn9p862P78PEUlnoylebceL5ff0rwbvI+PeW8bh3frK7f5w7YermWcuRsb0CTXoFG7Gy/BymBg/voXj7tIhwz4YDnOtyys2fnh20ObCvX1aT7LtxnkkZGr0e+GgO5pvNg9odBPfoWvPHfyyeN966ZPvw7odG8FdffJtiS9f4mf7l9APHISA1wy33nLaz+HQWMrBNH98AszLpRyNQaj0RL8Q/1xapIVE2qxw9VdSnxgHytW23CVlxc+F+JDIF83crS9cx+w2u51G2PQCsxdcGLZh9ozAaHie3eiYpf7sWBxR7KZ0RmQsqbC7+fmcIE58BjSCTFunOV4AUz9BDBFHyoBOxMFIKYObVCq444ZO4Nim1w2tRtAJe5Zp9C68pu0aXrNnqcoo5WM6zoIZh+xQvesH6j0BTFYEpMTLOWdi0BkXJXlG65zHZm2NahRycQlkUod9y3YbOiPJKgZJWE/SKI+htlqsigLpbPdvaQizwkoYXqUZR3FxCj9M8vhbWQ/hExHpwGRGHRA9hROXUb1M513a9slLq4QP8ojIwyaKyzOCd0wOP73NjByWamCqvDCrhqPa8ocQJwD0T/jpx6Wp4kVrshe9vGDFnSFUpV229xnVnmv5ep0XDW1KxcwEvG7qRlOfAs6F7L3cpEugegWhf+nGqVgfRa7sh/xyvqBTjjgkYvyUYvmF58YUmHxuDMTx2X71LXMQUtSNw5afsnVj8SqRjD99uGAfSz9h/in+NmkWvbXrBNZeHJGneGNwQudyJe+Xlw9mA6cClghBTLN98FMAp4IfGqsiV1y4mKbHnMPHXxSpdC0VYZzmlA9CtTDsq2/Bk7+swH9zegdTKPzrlb1lH17Z99fDqdDBBKmVL/lvZ40U44JB7GKk4NJSt+L1KYLT+Z7avxJ8J/iuV3etrtGwvE4l+E3Pcy4styrgQSbtd+b3lr2aHp+H9r8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065336</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065338</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065340</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861C89382D3529BE0401F0A07996E28</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861C7CB5D40A1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861C7CB5D7AA1FAE0401F0A059945B1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_FUNC_CHILD_SAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="7e71a5cf-bb29-47e9-81b6-d222214c8418"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861D0C7DB9854F7E0401F0A079904B3</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D0D0FBC211A5E0401F0A059963DC:1CBDE93E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0C0BF5D6FFEE0401F0A059963C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0C0BF5D6FFEE0401F0A059963C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0C0BF5D6FFEE0401F0A059963C1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0C7DB9854F7E0401F0A079904B3</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D0D0FB8D11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D0D0FBC711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0C7DB9854F7E0401F0A079904B3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FB8D11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FBC711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyokDoFcVJC4lGk6FJim95cj19mA2+CksQO0X3+c0KTA0J7OkZCQd7bXXvviZZ9wvIhMr8M5pILGTPH7LfWfpoVQSB7rGjZdolmu42qO3UCaMwXUANOxbNNUFZ/zDHzGBWaipZoGqmvIkL8rZHiNumdZNce0HlTlBlIuoaVLzVCV9SJi3CvCttQsZV6MOeUewwvgniBe0LkYetLTwyUntX2yYVkETNtzIRJP10ktBAJRRGokXugn+o7PSci9gM4YFlkK7zFD3lLf965Wq9qqXovTmW4ahqEbri59Qk5nR2r7R7kZQp9N4826h1nMKMERfcM5qQsQ8zhUOtEsTqmYLz6BRjoycmgN1kQjyGJHqv4RoGD3TaQdkinHGp9jVIJdwhRSYASU60u/pR59r4ObvVcpZnwapwu+t/47SsCWEMUJhBovMyvZfR/xQLnaJ0A8n5Eo43QJo3xMEkyAK5MUpnQ9pFwOX8iVov3KmpcTBuRvWnKib/OUtPUDlenTGXDxf/q13asNyg2OMmiPzpq/z+Z8hIPj3uOzfmPz0SSeoTEX162CwrbzhlTV6vf1/qBWc/W+iXf86YrPnla35wSmP1fWS7f3az28jWxqjm4mF8FPlLHh23IY2G/nr9f4FqHjs3G/2X1jg9HxYEUNk5/ds4e70dnPH/rl8H6tHz/gHnoexrR+PrDCZNI5Zv35fXTeNV/EeNRJ3OvJ7a/V89MgbbKH353zuxSv1kH0FpwmyLmcjP007Dn4BwQ3b5bbOL8Y3zGOiE+p3/rIaTuHXWMpB0H2+ARElMt8NPy+MpD9wuJracktNNSmhauX5PrEBTChtvNduax4mRQfGnqymZv1qdNEfaNn97uu07AG9qlhGWhgdAzbdQ2rWy/1Z8Nij2IvZlOax8oVdjM/XxMkC48DCyHVlnFG5sDVLxD7WGDFZ5fyYMSMw1UsFbzfMbu2Y/eQ2zOtLnJQ3bUlXadrOc1uo95TlVEsxmycdqYC0l31ru+o9yUQmlDIJT6fcy4HnQtZkhe8zESEaktcY5DJSyDNddgzLaehc7pIIsgJ64s4zCKoJfOkKJDON/+mhgkvrJSTJE4FjopT+GmS+9/KekifkOYOPM+oC7KncOAyqpfpfJ52czvtEr6ThTQ/bLK4IqVkw2T308fM5MNSDUyVF+Go5F5t+UuIAwD6F/z0/dJU8cIl3YpeXrDyzpCq0i7b+4JrL7VsucyKhtq5YqYSXke6YesBkEzK3utV/AxMryD0b904Feu9yJV9l18m5iwQWMBCjp9SLL/x3AiA588NXx6f9XffMjshZd0ErMUhWy+Sr5Kc8ZcPF+KR3E+aJ/JvFafhR7sOYG3FkXnKN4agbJav8vvl9ZPZILGEpVIQ43Qb/BDAoeC7xqrIFRchp+kxE/D5FyVXupaKCYkzJvy+Whi21bfgKV4T8D6c/oApFP79yl7zT6/su4thIHVwgdXKl/63s0aLcSEgd3FacGmpa/n6lMHZbEvt3wkeEHyjO2j0m4PBaSX4Dddt1nsfR3Ink/Yf5j8tWzXdPw/tfwE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyokDoFcVJC4lGk6FJim95cj19mA2+CksQO0X3+c0KTA0J7OkZCQd7bXXvviZZ9wvIhMr8M5pILGTPH7LfWfpoVQSB7rGjZdolmu42qO3UCaMwXUANOxbNNUFZ/zDHzGBWaipZoGqmvIkL8rZHiNumdZNce0HlTlBlIuoaVLzVCV9SJi3CvCttQsZV6MOeUewwvgniBe0LkYetLTwyUntX2yYVkETNtzIRJP10ktBAJRRGokXugn+o7PSci9gM4YFlkK7zFD3lLf965Wq9qqXovTmW4ahqEbri59Qk5nR2r7R7kZQp9N4826h1nMKMERfcM5qQsQ8zhUOtEsTqmYLz6BRjoycmgN1kQjyGJHqv4RoGD3TaQdkinHGp9jVIJdwhRSYASU60u/pR59r4ObvVcpZnwapwu+t/47SsCWEMUJhBovMyvZfR/xQLnaJ0A8n5Eo43QJo3xMEkyAK5MUpnQ9pFwOX8iVov3KmpcTBuRvWnKib/OUtPUDlenTGXDxf/q13asNyg2OMmiPzpq/z+Z8hIPj3uOzfmPz0SSeoTEX162CwrbzhlTV6vf1/qBWc/W+iXf86YrPnla35wSmP1fWS7f3az28jWxqjm4mF8FPlLHh23IY2G/nr9f4FqHjs3G/2X1jg9HxYEUNk5/ds4e70dnPH/rl8H6tHz/gHnoexrR+PrDCZNI5Zv35fXTeNV/EeNRJ3OvJ7a/V89MgbbKH353zuxSv1kH0FpwmyLmcjP007Dn4BwQ3b5bbOL8Y3zGOiE+p3/rIaTuHXWMpB0H2+ARElMt8NPy+MpD9wuJracktNNSmhauX5PrEBTChtvNduax4mRQfGnqymZv1qdNEfaNn97uu07AG9qlhGWhgdAzbdQ2rWy/1Z8Nij2IvZlOax8oVdjM/XxMkC48DCyHVlnFG5sDVLxD7WGDFZ5fyYMSMw1UsFbzfMbu2Y/eQ2zOtLnJQ3bUlXadrOc1uo95TlVEsxmycdqYC0l31ru+o9yUQmlDIJT6fcy4HnQtZkhe8zESEaktcY5DJSyDNddgzLaehc7pIIsgJ64s4zCKoJfOkKJDON/+mhgkvrJSTJE4FjopT+GmS+9/KekifkOYOPM+oC7KncOAyqpfpfJ52czvtEr6ThTQ/bLK4IqVkw2T308fM5MNSDUyVF+Go5F5t+UuIAwD6F/z0/dJU8cIl3YpeXrDyzpCq0i7b+4JrL7VsucyKhtq5YqYSXke6YesBkEzK3utV/AxMryD0b904Feu9yJV9l18m5iwQWMBCjp9SLL/x3AiA588NXx6f9XffMjshZd0ErMUhWy+Sr5Kc8ZcPF+KR3E+aJ/JvFafhR7sOYG3FkXnKN4agbJav8vvl9ZPZILGEpVIQ43Qb/BDAoeC7xqrIFRchp+kxE/D5FyVXupaKCYkzJvy+Whi21bfgKV4T8D6c/oApFP79yl7zT6/su4thIHVwgdXKl/63s0aLcSEgd3FacGmpa/n6lMHZbEvt3wkeEHyjO2j0m4PBaSX4Dddt1nsfR3Ink/Yf5j8tWzXdPw/tfwE=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jx0j37h5AjOAoXVzIQtZmvZlR0gyVrAlYslA+utXMjEBQrLpzjDD6PjoO9+56JMuBMxSN+gJQXJJOTOisGP+gxGxPR97ll8nvuX7dsOae3ButV3cmLdbTTJ3W6YRCVGQiAkJmeyYru14lmOr351jB3Uv8Js122//Mo0ZyYWCVi412zS2WcpEUIbtmEXOAg4FFQGDGRGBRMG0d30VKM8AVpzM7sWOZRkw7yZSrgIAUA0TRNIU1RDPwAU48rnAIpjSBYOyyMlzTCw65vPezWZT23g1ni+Aa9s2sNtA+WBBF5/N7qdqM8ERi/luPYCMM4pgSn9DTeqayIRjo5cueE5lkr0B7QDH1tAW2SILOT77bIKXACW7DyIdkcwFtEQCnQpsQmKSE4aI8fck6pifP9bB3d67HDIR8zwTJ+s/o0TYmqR8RbAlqswqdh9HPFOu7gVBQcRQWgi6Jjd6TFYQEWHc5iSm2ysq1PBhYZTtN7aimjCC/qQlF+CQp6INzlQmpAsi5P/p12GvdigzmBakO/+L8j5eumSGpvn3OPvV+0r7P9m0NfY7JYVD5x2pfauf16eDup+r5014Gc1vs+XoKkl+TWwumzdfL73Y+eJjvvky36KFv8LNO+dyCWgOLsFgk3nzeLNcR2k8hKN1M3zcJNcuvh/ETw+fMgTcaHLbu6o3xrPhMFu4Kzf5/vM2gfU8ul8v06k9FZOf+Gbbn42/bR+w/zT+mg5+/74fu1ePs6EMH6/rUS8rnsDdp4dtgr8lKIQ/2rMfvB3ff9t0XnI6zOHYWMnBtJg/ECSrpR6NKDRGql9Qvi8t2kKxFZeuwUrrk5CESbOrd2lZCQolPhQHqpm79bDVcEI7tEf9Vug4vfrQ9m1nZPfservd8MJBpT87FicUB5zFVMfSCrubn/cJoiwQhGGSW2teoIQI8x3EEEpoRGyiDgZngtxxpeCe03O8uhsO+2G70Wr0hq4/HLj1tuM4g1Z/0DSNGy7HbJz3YknyY/X2jtR7QhBdUaIlXs+5UIMupCrJI1wXMnVqa1hjpFCXQK51OHD9Vh0Imq1SogmDjOMiJbVVsioLBMTu37UgEqWVCrTiuYRpeQrfTPL0W1UP5YOpdhA6oz5RPSVnLiOvSufttBuHaVfwvQJTfdhUcWVO0Y7J8aeXmdHDsh+YfV5IOBX3/ZY/hDgDAN7hB05Ls4+H1/QgenXBqjtDqUq3au8jrD3WivW6KBva1IqZK3jgALsJpgQVSvae7viSMLCHAB+6cfasTyLv7cf8CpmwqYSSZGr8jHL5gefGlAj93IjU8dl+9C1zFFLVTZKtPGcbpOpVohm/+3BBAdJ+ynyr/jY8xy/tOoN1EEflqd4YkrKFXun75emN2UBcwVIliDw/BD8HcC74sXFf5D0XqaZpXkjy9hdDK13HhAjxgskoNEvDofqWPOXTigQvTq9gSoV/vrK34s0r+/76aqp0MIPm3pf+t7NFy3FBRO0StOTSMbfq9amCs8WB2j8TfC34A7s/qoeN0Wh4LPiDlyN5lEn3lfm15aCmp+eh+y8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/bhT2lKK0BFmeCviqriCLvrlTkwPELdNsEkK+OtvUiwCote9M8wwOT15znNe8iSnHCVxOWhxDqkgjBqDbsP8B2reY21awdZjzcdWZYrAeqyCZ1WngH23OsWuj0xjwLmEAeUCUdEwy47rWa6jfmPXCXwvqNRLdbf2YBp3kHIFrVxKjmmskpjyIA/bMGVKA4Y44QFFCfBA4GDUurwIlGeACk5m83TDMg+YNudCLALbxqUIMMQxLmGW2Kf2ns9pxIMRmVEkZAqvMSPeMF/3LpfL0tIrsXRmlx3HsZ26rXwiTmbfzea3YjNEAzplm3UHUUYJRjF5QZrUJYg5i4xWPGMpEfPkA2jXdh0NbcEKW9it0O+m/RYgZ/dFpD2SKUcWnyO3ALuBKaRAMRi3N4OG+f1rHdzsHaeI8ilLE36w/jtKQDOI2QIiixeZFey+jnikXM1TwMGA4lhyksGVHpMFwsCN6xSmZHVBuBq+iBt5+40VLyYM8N+05NTe5alo20cq0yUz4OL/9Gu3VxuUOxRLaI6HbJw5yyGtVaOxvKiTq97v6GVdPeFOI6ew67whtW316/pwULdz9bqpXWePZ5O62/8x5ZfzGWT9y7OntYvvH5LR7fXaDpdXWdy5Rb2HmT/x5bPHZL/ry0kte3pYhdd/zuKzs+WP4Wry1Hv69tB/dmt2L87OL87n5/d4PArXT/NfchHSX94kkwn8Ym6r73Xbf27rtZif3/ftk5WT8uEknERueQJ3dxgP+z8nv/m3u9/nZ2kWzshSxuL69uXn/azxltNuDvvGQg5G8vEJsCiWejQGXSNU/ULic2nRFhJZ09w1WGh94gKoMJt6l5aVQCrxIVGgmrlZ92pVt+t0nbDdOXHdlt9zKo4bOi3Hr9erXrdT6M+GxQHFDqNTomNphd3Mz+cEcRJwoBGkVsYkngM3P0HsIoGMAb1RB4NRDmOmFNz3HM8L2145bCveHe+k55VbNbddrvqu45XLpnHFxJAO09ZUQLqv3t6eet8AJgsCWuL1nHM16FyokjyjTIrYLWWoREGqSyDVOhyUKzXf5iRZxKAJ2wmLZAylxXyRF8jmm/+yhTDPrYTjBUsFivNT+GGSh9+KeiifiGgHrjNqg+opHLmMvCKdd2lXjl5aBXxLRkQfNlVckRK8YbL/6W1m9LBsB2abF+ZuwX275S8hjgDYn/CzD0uzjRdlZCd6ccGqO0OpSrNo7zMqPZdklsm8oSdaMVMFb7u2c2KPAEsle+sx+wPU3kLYX7pxtqwPIm/t+/ykmNORQAISNX5GvvzCc2MEXD83Bur4rL76ltkLqeomYCWO2TqxepVoxp8+XHCAtZ8yX6u/JUujt3YdwdqJo/JUbwxB6Eyv9P2y/mA2MFOwRAkiS3fBjwEcC75v3BZ5y0WoaXqUAj7+Ymila5gIYyapGHTN3LCrvjlPsV5A8Ob0DiZX+Ncre8U/vLInlxcjpYMJMre+5L+dLZKPCwa1i5OcS8NcqdenCk5nO2r/SvC94Hecduh3q2HY2xf8ztuR3Muk+c783rJT08Pz0PwX</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065343</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065345</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065347</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0C7DB9954F7E0401F0A079904B3</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D0D0FB8E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D0D0FBC811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_FUNC_CHILD_SAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="bf62e2e3-dc13-4d88-8c77-fd101a7dd5d4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E861D0D0FC2E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D0D0FCAB11A5E0401F0A059963DC:54071101"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0D0FC1C11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FC1C11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FC1C11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0D0FC2E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D0D0FC7611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D0D0FCB011A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FC2E11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FC7611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FCB011A5E0401F0A059963DC</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3TqM/QCpdARZspFrR8oivqpL2diukujJalNiuCvP0mxCIgePTPMMNndWXvtS1ZyxNEssT2fc8gEYVQL+m39HztEjtt0nQq2a06lXo8eK+gxqlUs1HSisB65uBbqWsB5DgHlAlHR1m3Tkg6m/F1bpufUPMeqtmr2g67dQsYltHSpmrq2mCWUe0XYtp5n1GOIE+5RNAPuCexN/NHQk54eKjnpnaMVyyJg1omFSD3DwNUQMCQJrmI2M46MLZ+jkHsTMqVI5Bm8xwx5W3/f+/r6Wn2tVVk2NWzTNA2zZUifkJPpod45KDdDGNCIrdY9RBklGCXkDSlSIxAxCzU/mbKMiHj2BbRlWKaCrsACV7BVp4e68RGgYPdDpC2SGUcVHiOrBLuCCDKgGLSbq6CtH/6sg6u91xmiPGLZjO+sf0cJ6BwSlkJY4WVmJbufI+4pV+cIsBdQnOSczOFcjUmKMHBtnEFEFkPC5fCFXCvary14OWGAf9OSI2OTp6Rt7KlMn0yBi//Tr81erVBuUZJD5ywy+RPvxqEb1BPXTp7rd4sT5/qchqN2QWHTeUVq3er39e6grufqfdP8jfHlQ3M8Mv9Mb/jyzshvX9Fz8DJIo9rpw7x504VjhN1x6zKau6NbNvVJI41rZ1dpDJNLdnr/PJziP7fxvdm4Och9alye+28C+Sf960yEl8sxSv6Ok9AKzkaN4XLGGnkjf3L/2uMzm50+3KLh1TN58Pu5icMwiuFhGvsv9xe9m/nB28tJZNp3DZ+NnyfDpIe43/7IaTOHbWMpB5P88QmwKJdqNIK+diz7hcT30qIsJKxEhauXKn3iAqjQO2qXkhUvl+JDQk82c7UeNBtW3+ybxz17YFm+MzDrpnVs+qbTajVq/V6pPysWOxR7jEZExVIKu5qf7wnimceBhpBV5izHMXD9G8Q+EkgL6JU8GIxyuGZSwQcD27acltXq2l1n4DqtZncwqLuu1ez33W7rWNfOmbigF5kfCci21bu2pd5XgElKQEm8mnMuB50LWZIXNM9FYlXnqEohl5dApnTYs+tNx+BkliagCBszFuYJVNM4LQpk8NW/XUGYF1bCccoygZLiFH6Z5O63sh7SJyTKgauMuiB7Cnsuo3qZztdpNzbTLuH9PCTqsMniiozgFZPtTx8zo4ZlPTDrvDC3Su7rLb+E2ANgfMPP2C3NOl44JxvRywtW3hlSVTple19Q9aWaz+d50VBXKWYm4Q3LMF1jAjiXsre8Zs9AjTWE8aMbZ816J/Lavs0vFzGdCCRgJsdPK5Y/eG5MgKvnRiCPz+Knb5mtkLJuAhZin62XyFeJYvztwwV7WPlJ81j+vbLsI/F9WBtxZJ7yjSEInaqVul+WX8wGZhKWSEFk2Sb4PoB9wbeN6yKvuQg5TY+5gK+/aErp2jrCmOVUBH29MGyqb8FTLFPwPpw+wRQK/35lL/iXV/bdaDiROjhD+tqX/LdzhRTjgkHu4qTg0tYX8vUpg9Pphtq/E9wv+FbvO8HfzqTzyfzZslHT3fPQ+Rc=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3TqM/QCpdARZspFrR8oivqpL2diukujJalNiuCvP0mxCIgePTPMMNndWXvtS1ZyxNEssT2fc8gEYVQL+m39HztEjtt0nQq2a06lXo8eK+gxqlUs1HSisB65uBbqWsB5DgHlAlHR1m3Tkg6m/F1bpufUPMeqtmr2g67dQsYltHSpmrq2mCWUe0XYtp5n1GOIE+5RNAPuCexN/NHQk54eKjnpnaMVyyJg1omFSD3DwNUQMCQJrmI2M46MLZ+jkHsTMqVI5Bm8xwx5W3/f+/r6Wn2tVVk2NWzTNA2zZUifkJPpod45KDdDGNCIrdY9RBklGCXkDSlSIxAxCzU/mbKMiHj2BbRlWKaCrsACV7BVp4e68RGgYPdDpC2SGUcVHiOrBLuCCDKgGLSbq6CtH/6sg6u91xmiPGLZjO+sf0cJ6BwSlkJY4WVmJbufI+4pV+cIsBdQnOSczOFcjUmKMHBtnEFEFkPC5fCFXCvary14OWGAf9OSI2OTp6Rt7KlMn0yBi//Tr81erVBuUZJD5ywy+RPvxqEb1BPXTp7rd4sT5/qchqN2QWHTeUVq3er39e6grufqfdP8jfHlQ3M8Mv9Mb/jyzshvX9Fz8DJIo9rpw7x504VjhN1x6zKau6NbNvVJI41rZ1dpDJNLdnr/PJziP7fxvdm4Och9alye+28C+Sf960yEl8sxSv6Ok9AKzkaN4XLGGnkjf3L/2uMzm50+3KLh1TN58Pu5icMwiuFhGvsv9xe9m/nB28tJZNp3DZ+NnyfDpIe43/7IaTOHbWMpB5P88QmwKJdqNIK+diz7hcT30qIsJKxEhauXKn3iAqjQO2qXkhUvl+JDQk82c7UeNBtW3+ybxz17YFm+MzDrpnVs+qbTajVq/V6pPysWOxR7jEZExVIKu5qf7wnimceBhpBV5izHMXD9G8Q+EkgL6JU8GIxyuGZSwQcD27acltXq2l1n4DqtZncwqLuu1ez33W7rWNfOmbigF5kfCci21bu2pd5XgElKQEm8mnMuB50LWZIXNM9FYlXnqEohl5dApnTYs+tNx+BkliagCBszFuYJVNM4LQpk8NW/XUGYF1bCccoygZLiFH6Z5O63sh7SJyTKgauMuiB7Cnsuo3qZztdpNzbTLuH9PCTqsMniiozgFZPtTx8zo4ZlPTDrvDC3Su7rLb+E2ANgfMPP2C3NOl44JxvRywtW3hlSVTple19Q9aWaz+d50VBXKWYm4Q3LMF1jAjiXsre8Zs9AjTWE8aMbZ816J/Lavs0vFzGdCCRgJsdPK5Y/eG5MgKvnRiCPz+Knb5mtkLJuAhZin62XyFeJYvztwwV7WPlJ81j+vbLsI/F9WBtxZJ7yjSEInaqVul+WX8wGZhKWSEFk2Sb4PoB9wbeN6yKvuQg5TY+5gK+/aErp2jrCmOVUBH29MGyqb8FTLFPwPpw+wRQK/35lL/iXV/bdaDiROjhD+tqX/LdzhRTjgkHu4qTg0tYX8vUpg9Pphtq/E9wv+FbvO8HfzqTzyfzZslHT3fPQ+Rc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1GIE8IlUUHiUira0mmBMu28HBlnA+4kdogdoP36Y4eGAkN7OkdCQt7ZXnvti5d9LnAcuUFLCEgl5czodxvmP2SKZlPwp9a0jHzLK09dy5/6vjUliHhlUqkS4ptGX4gM+kxIzGTDdJFTthykfmMHBZWy+pXq5dov05hAKhS0cikh09jEERNBHrZhZikLOBZUBAzHIAJJglFrcBMozwAXnMzm+ZZlHjBtLqRMAtsmpRAIRBEpER7b5/aBz3koghGdMyyzFN5ihqJhvu1dr9eldbnE07ntIoRs5NvKJxR0fmY2vxWbIeyzGd+uO5hxRgmO6CvWpAYgFzw0WtGcp1Qu4g+gHdtBGtqCDbGI47Ez034PkLP7ItIByVRgSyywU4ANYQYpMALGw7DfMM++1sHt3nGKmZjxNBZH67+jBGwFEU8gtESRWcHu64gnytU8BxL0GYkyQVdwq8ckwQSEcZfCjG5uqFDDFwojb7+xEcWEAfmblpzb+zwVbftEZbp0DkL+n37t92qLMsFRBk1vOrYZWv+8//0w2GSj9Io8tZ8uxz6azBs5hX3nLaldq9/Wx4O6m6u3Ta3l1e19jCaLe5eG1fZrevP88/ukT32S4stFrRZ1QkeM/RqfPf4S1/DC8R28XCxjb5S9luu1i8t4PHm0B9XnKLn5FmUTG7vDST38NXwdVi+TuzV3H9p+ezBN2p0rf+CVs97T6s6rvV4m0XpZ4dflnvMikRj6+Mm/+s6uH1dJtdeL4/m3HvWeb+lVxW17t7NRu36zEY33nPZzODQWcjDKps9AZLHUo9HvGj3VLyw/lxZtoaE1y12DROuTkMCk2dS7tKwEmRIfGgaqmdv1Rb3qdFEX9Tq1quO0KhfIQ04PtVDF96vlbqfQny2LI4odzmZUx9IKu52fzwmSOBDAQkitFc/IAoT5CWIXS2z02VAdDM4EjLlScL9d7VVQ9cLp+l6l4164Vc9zO5163XMrPQc5pnHL5Q/2I23NJKSH6l0+UO8hEJpQ0BKv51yoQRdSlWSJV5mMnNIKlxhk6hJItQ4Hrlev2ILGSQSasB3zMIuglCySvEC22P67FiYit1JBEp5KHOWn8MMkj78V9VA+IdUOQmfUBtVTOHEZeUU6H6dd3U+7gG9lIdWHTRVXppRsmRx+ep8ZPSy7gdnlRYRTcN9t+UuIEwD2J/zs49Ls4oUruhe9uGDVnaFUpVm0d4lLy1K2WmV5Q2taMVMFbzs2qtkjIJmSvZcx/w3M3kHYX7pxdqyPIu/sh/wyuWAjiSXEavyMfPmF58YIhH5u9NXx2Xz1LXMQUtVNwkaesnUi9SrRjD99uJCAaD9lvlN/a56G7+06gbUXR+Wp3hiSsrle6fvl5YPZIFzBUiWIPN0HPwVwKvihcVfkHReppmmaSfj4i6GVrmFiQnjGZL9r5oZ99c15ypcEgnenP2ByhX+7sjfiwyv7cXAzUjoYY3PnS//b2aL5uBBQuwTNuTTMjXp9quBsvqf2bwRPC77T+UzwDzNp/mH+07JX0+Pz0PwX</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyOwExIKUUHiUtpM79B2mHk5Ms4G3CY2jR2g/fqxQ0OB0p72SEjIO9trr33xso8kSWI3aEkJqWKCW2G3Yf9bd/CIHlZIiTrVUcnDMCqNvKpbwmMfwK/VXL/m2lYoZQYhl4pw1bBd7FRKDta/WwcHfiXwq+VDXP9jW/eQSg2tXcrYtpZJzGWQh23YWcoDQSSTAScJyEDRYNC6OA+0Z0AKTnbzaMUyD5g2p0rNAoRoOQIKcUzLVCToCG35HEUyGLAJJypL4TVmJBv2697FYlFeVMoinSAXY4xwHWmfSLLJgd38UWyGKORjsVp3CBecURKzF2JIXYCaishqxRORMjVNPoB2kIMNdAmWVFfT4wc2eguQs/si0hbJVJKSnBKnAOvDGFLgFKy7ftiwD77WwdXe25RwORZpInfW36MEfA6xmEFUkkVmBbuvI+4pV/MIaBByGmeSzeHSjMmMUJDWdQpjtjxnUg9fJK28/dZSFhMG9DstOUKbPDVttKcyXTYBqf5PvzZ7tUK5J3EGzfklG/VluxKd3f3pTftXXdSiV6e93mkSNnIKm84rUutWv653B3U9V6+bSKc6/el759fDcEgEIUqcPvZH3SuxYFmi5g/9k0fhHzLwT85vn86eX9yXh4uHpHomeMh//77pYpm23HYMdXLf/3HSow+4uvxn+DO8OPbu48nlcTVaehP/evIrYU/VylWEhrMsTZ9PFy/DE1V/8bLZcyoz5/HmVFY6i8GdqN70bx4gZj9qN7fj2olLbtATWv7Khl2MG285beawbSzkYJCNHoCqYmlGI+xaPd0voj6XFmNhUWmcuwYzo09SAVd20+wyshJkWnxYFOhmrtbHtarTxV3c67Sx47T8Y+xhp4db2K/Xq5Vup9CfFYsdih3Bx8zEMgq7mp/PCdIkkMAjSEtzkdEpSPsTxC5RxAp5Xx8MwSXcCq3gbrvjVtqanVbldsWvVlz/sNbzPN/3PezXWrZ1KdQVv0pbYwXptnpXttS7D5TNGBiJN3Mu9aBLpUvyROaZip3ynJQ5ZPoSSI0OB65X85FkySwGQxglIspiKM+ms7xASK7+3RKhMrcySWciVSTOT+GHSe5+K+qhfSJmHKTJqA26p7DnMvKKdN6l7e29tAr4VhYxc9h0cVXK6IrJ9qe3mTHDsh6YdV5UOgX39ZZvQuwBQJ/wQ7ulWceL5mwjenHB6jtDq0qzaO8TKT+Vs/k8yxt6aBQz1fDIQfgQDYBmWvaeb8UjcLSGQF+6cdasdyKv7dv8MjXlA0UUJHr8rHz5hefGAKR5boT6+Cy/+pbZCqnrpmCp9tk6sX6VGMafPlxoQI2fNl/rv4VIo7d27cHaiKPz1G8MxfjErMz98vzBbFChYZkWRJFugu8D2Bd827gu8pqL0tM0yhR8/MUyStewCaUi4yrs2rlhU31znup5BsGb0zuYXOFfr+yl/PDKHl6cD7QOJsRe+7L/di6xfFwo6F2S5Vwa9lK/PnVwPtlQ+1eC+wXf6Xwm+NuZNN+Z31s2arp7Hpp/AQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065350</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065352</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065354</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0D0FC2F11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D0D0FC7711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D0D0FCB111A5E0401F0A059963DC</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_FUNC_YOUTH_BAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="bb1da092-6cd7-48f9-8cc6-3922b9b1562f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT" id="b640c33b-9694-4dec-ab58-b80de10092ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D0D0FD9411A5E0401F0A059963DC:8BAD1D40"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0D0FD0511A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FD0511A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FD0511A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0D0FD1711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D0D0FD5F11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D0D0FD9911A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FD1711A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FD5F11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FD9911A5E0401F0A059963DC</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBcQgQooKUNrSbDvQGrbp9WbnOATyTOGnscJlfv3ZoKDC021kJCfnk+DvfufizTwRJE8cPhIBCsowbUdgz/8EYO57jgOXa07bluh1sdXH32Yrb2HEc3GxTD5tGJEQJEReScNkzHRs3LWyr3wTbfqvpt7yG53aeTOMBCqGglUvDNo1VmnDhV2F7ZllwPyOCCZ+TFIQvqT8ORkNfefqk5mT2TzYsq4BFfy5l7iNEGzFQSBLaoFmKTtCez0ks/DGbcSLLAl5jxqJnvu5dLpeNZbORFTPk2LaN7C5SPrFgs69m/0u9GeKIT7PN+ozwjDNKEvaLaFIjkPMsNoJklhVMztN3oDHCtoa2YEUtil3+1URvASp2n0TaI1kIYok5wTXYHUyhAE7BuL+LeubXz3Vws3dSEC6mWZGKg/WfUQK+gCTLIbZEnVnN7vOIR8rVPwHqR5wmpWALuNJjkhMKwrgpYMpWQybU8MXCqNpvrEQ9YUD/pCUnaJenoo2OVCZkMxDy//Rrt1cblAeSlNC/SNfMfURLb1UOLz3evQwLEeCXq0k061UUdp03pLatfl0fDup2rl433V070+jvsxtEXI94ZXd09rRiA1d+wyhNrn6NbrLuw/PqFE/JsNNxxg+t++/fuXt5+zS4hvUsHVzSrDODZcLx+vbLhRydTm4cr3gaT+6vBnD97eaq44Rjdn9x8WNoSy9gP+WDyIed+aUT8mb5mAwe1xd565uHg5G8jpr3j3ayOiW3Xv6lK35EQubh809A47+6SNwGvbecdnPYN9ZyMC6ffwCV9VKPRhQa56pfRH4sLdrCYmtaufq51ichgUuzr3dpWfFLJT4s9lUzN+uB18ahHdrnIe5gHLQGtmvjczuwW91uuxme1fqzYXFA8SzjU6ZjaYXdzM/HBGnqC+AxFNYiK+kchPkBYkgkMSJ+pw5GxgVMMqXgzebgvHWK7W7oDdoDz3MxdlvhYBDauBMEdsc0rjJ5za+LYCqh2Ffv5p563wFlOQMt8XrOhRp0IVVJXsiilAluLEiDQ6kugULrsO+4XgsJluYJaMIozeIygUY+z6sCIbH5dyxCRWVlguZZIUlSncJ3kzz8VtdD+cRMOwid0SmonsKRy8it03k/7fZu2jV8UMZMHzZVXFkwumGy/+ltZvSwbAdmmxcVuOa+3fKHEEcA0Af80GFptvHiBduJXl+w6s5QqtKv2/tCGi+NcrEoq4Z2tGIWCh5hZHfQGGipZG89yX4CR1sI9KkbZ8v6IPLWvs+vlHM+lkRCqsbPqJafeG6MQejnRqSOz+qzb5m9kKpuElbymO0sUa8SzfjDhwv1qfZT5hv1t8yK+K1dR7B24qg81RtDMj7TK32/rN+ZDZopWKYEMSt2wY8BHAu+b9wWectFqml6LiW8/8XQStczCaVZyWUUmpVhV30rnnKdg//m9BtMpfCvV/ZKvHtlP46GY6WDKTG3vuy/nS1WjQsFtUuwikvPXKnXpwrOZztq/0rwuODbrY8Efz+T/m/m3y07NT08D/1/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkfBcQgQooKUNrSbDvQGrbp9WbnOATyTOGnscJlfv3ZoKDC021kJCfnk+DvfufizTwRJE8cPhIBCsowbUdgz/8EYO57jgOXa07bluh1sdXH32Yrb2HEc3GxTD5tGJEQJEReScNkzHRs3LWyr3wTbfqvpt7yG53aeTOMBCqGglUvDNo1VmnDhV2F7ZllwPyOCCZ+TFIQvqT8ORkNfefqk5mT2TzYsq4BFfy5l7iNEGzFQSBLaoFmKTtCez0ks/DGbcSLLAl5jxqJnvu5dLpeNZbORFTPk2LaN7C5SPrFgs69m/0u9GeKIT7PN+ozwjDNKEvaLaFIjkPMsNoJklhVMztN3oDHCtoa2YEUtil3+1URvASp2n0TaI1kIYok5wTXYHUyhAE7BuL+LeubXz3Vws3dSEC6mWZGKg/WfUQK+gCTLIbZEnVnN7vOIR8rVPwHqR5wmpWALuNJjkhMKwrgpYMpWQybU8MXCqNpvrEQ9YUD/pCUnaJenoo2OVCZkMxDy//Rrt1cblAeSlNC/SNfMfURLb1UOLz3evQwLEeCXq0k061UUdp03pLatfl0fDup2rl433V070+jvsxtEXI94ZXd09rRiA1d+wyhNrn6NbrLuw/PqFE/JsNNxxg+t++/fuXt5+zS4hvUsHVzSrDODZcLx+vbLhRydTm4cr3gaT+6vBnD97eaq44Rjdn9x8WNoSy9gP+WDyIed+aUT8mb5mAwe1xd565uHg5G8jpr3j3ayOiW3Xv6lK35EQubh809A47+6SNwGvbecdnPYN9ZyMC6ffwCV9VKPRhQa56pfRH4sLdrCYmtaufq51ichgUuzr3dpWfFLJT4s9lUzN+uB18ahHdrnIe5gHLQGtmvjczuwW91uuxme1fqzYXFA8SzjU6ZjaYXdzM/HBGnqC+AxFNYiK+kchPkBYkgkMSJ+pw5GxgVMMqXgzebgvHWK7W7oDdoDz3MxdlvhYBDauBMEdsc0rjJ5za+LYCqh2Ffv5p563wFlOQMt8XrOhRp0IVVJXsiilAluLEiDQ6kugULrsO+4XgsJluYJaMIozeIygUY+z6sCIbH5dyxCRWVlguZZIUlSncJ3kzz8VtdD+cRMOwid0SmonsKRy8it03k/7fZu2jV8UMZMHzZVXFkwumGy/+ltZvSwbAdmmxcVuOa+3fKHEEcA0Af80GFptvHiBduJXl+w6s5QqtKv2/tCGi+NcrEoq4Z2tGIWCh5hZHfQGGipZG89yX4CR1sI9KkbZ8v6IPLWvs+vlHM+lkRCqsbPqJafeG6MQejnRqSOz+qzb5m9kKpuElbymO0sUa8SzfjDhwv1qfZT5hv1t8yK+K1dR7B24qg81RtDMj7TK32/rN+ZDZopWKYEMSt2wY8BHAu+b9wWectFqml6LiW8/8XQStczCaVZyWUUmpVhV30rnnKdg//m9BtMpfCvV/ZKvHtlP46GY6WDKTG3vuy/nS1WjQsFtUuwikvPXKnXpwrOZztq/0rwuODbrY8Efz+T/m/m3y07NT08D/1/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tq452SlC+hI8wUEA8qooAcjy93QppCrm0CSUrRX3+TYhEQvXpnmGGyu7P22h9ZyblEcVT0fCmJUJQzq9dp2H+fVch06tbKzrRWRU4ZwZJTL9XqDqxWK2Vcc6vhdGpbPSkT0mNSIaYadhG6JceF+jd2oVcpexAWzsrwybYmREgNrV0K0LbWccSkl4Vt2IlgHkeSSo+hmEhPYW/k92887emhnJPdPN+wzAKK5lyphQcALgQEkyjCBcxjcA72fM4D6Y3ojCGVCPIWM5AN+21vmqaFtFTgYgaKEEIA60D7BJLOTu3mSb6ZBD0W8s26jRhnFKOIviJDqk/UnAeWH824oGoefwLtAhcaaIessYPdMju1wXuAjN03kfZICokcOUduDjYkIRGEYWI9DHsN+/R7HdzsHQvEZMhFLA/WP6NE2IpEfEECR+aZ5ey+j3ikXM1zgr0ew1Ei6YrcmjFZIEykdSdISNc3VOrhC6SVtd9ay3zCCP5JS87BLk9NGxypTIfOiFT/p1+7vdqgTFCUkOYl/rUcPwZ+8uv16fpuDqviTzeszsRz9NDIKOw6b0htW/22PhzU7Vy9berxIb5S5cFV+6GCLie81TobXOPnGCyefdB256kC63aLMn+89EdRVxSfapVoMBi34jm+iQaX6ZDBQASSr2fpyXIJxuJ+Mm23Rrf93+lseNGqT8NaecbvU4TT1z8sCJKr+0dZwW12IcPfKemjp2CS3oSTZXl9xVqXbqe0lBe1F3pyNQ1x37+7Hl/2n5ery8n1X8+N95x2c9g35nIwSqb/EKzypRmNXsfq6n4h9bW0GAsNnDBz9RZGn6QiTNlNs8vIipdo8aGBp5u5WV/Uqm4HdmC3U+m6rl+5gGXodqEPK/V6tdRp5/qzYXFAsc1ZSE0so7Cb+fmaII49SVhAhLPiCZ4TaX+B2EEKWT021AeDM0nGXCt4vd6tl0p+rV2tue5Z0fXLXejW291qqe53WpWabd1yNWAD4YeKiH31Lu2p95BguqDESLyZc6kHXSpdkiVaJSpyCytUYCTRl4AwOuwVy7UKkDReRMQQBjEPkogUFvNFViAgN/9FB2GZWanECy4UirJT+GmSh9/yemifgBoHaTJqEd1T8uEy0hnl6XyednU37RzeTwJqDpsurhIUb5jsf3qfGTMs24HZ5oWlm3PfbvkhxBEA8AU/cFiabbxgRXei5xesvjO0qjTz9i5RYVlIVqska+iZUUyh4YEL4BkYEZxo2XsZ82fCwBYCfOvG2bI+iLy17/NL1JyNFFIk1uNnZctvPDdGRJrnRk8fn/V33zJ7IXXdFFmrY7Z2pF8lhvGXDxfsYeOnzXf6L+UieG/XEaydODpP/cZQlM3MytwvL5/MBuYalmpB5GIX/BjAseD7xm2Rt1yUnqZposjnXyyjdA0bYcwTpnodOzPsqm/GU70siPfu9AEmU/i3K3stP72yH/s3I62DMbK3vvS/nR2ajQsmepekGZeGvdavTx2czXbU/o3gccGHla8Efz+T5gfzR8tOTQ/PQ/Nf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0TpYwVxuJVEgBQIzKQDBUHbU/py5Dob8EzipLHDpV8/dmgoUOhpj4SEvLO99toXL7vBcRiUbIdzSASNmOa5Tf1f36qVapZZLuBaBRUq5ToqWIg8F6BWe0azWZkQs6prHucpeIwLzERTLyHpbyL5uzORXa3YqFSsmvUnXXuAhEto6VJEurYOA8btLGxTTxNmR5hTbjMcArcFsSfOoG9LTxvnnPRWY8syC5i0FkLEtmGQog8EgoAUSRQaDePAp+Fze0LnDIs0gbeYPm/qb3tXq1VxVS5GydwoIYQMZBnSx+d0fqm3LvLN4HtsFm3XHcwiRgkO6CtWpAYgFpGvOcE8SqhYhGegTcNECroAa1IgZoVd6sZ7gIzdF5EOSCYcF/gCmznYGGaQACOg3Y+9pn75tQ5u994lmPFZlIT8aP09SsCWEEQx+AWeZ5az+zriiXK1GkBsj5Eg5XQJt2pMYkyAa6MEZnTdp1wOn8+1rP3amucTBuQ7LWkY+zwlbeNEZVw6By7+T7/2e7VFecBBCq3ufPgw3gxfNnfTzaJT3/x0a4M/3lXUfhw0Mwr7zltSu1a/rY8HdTdXb5vEYko8HFbD526tMlmZZefVTcbX90tr0i8PK4+9/qszmc6f7vrOGpxOmVz9mo/bm2X3aTqa3gx7hvdLrF4GeGM+hRej18qKGdWHGzOc/Lzuk6g8p1PC7ntX5sL8cfvaG6XroP00qax+o3KwGv+z8m67o8Fz4KQ3OO2v591RP56SWXyFrYubH8zcTDudNtA0uao9xt598z2n/RwOjbkcTNLn30BEvlSj4blaT/YLi8+lRVmoX5hlrnas9IkLYEJvqV1KVuxUig/1bdnM7bpbr5kuclHPtSzTdKpdVEFmDzmoalm1stvJ9WfL4ohiJ2IzqmIphd3Oz+cESWhzYD4khWWUkgVw/RNEFwuseWwsD0bEONxFUsFRtXtdtnpds1PpVOuu6bQtq1pzu6hTqpTanZKu3UZiyIaJMxOQHKp3+UC9x0BoTEFJvJpzLgedC1mSF7xMRWAWl7jIIJWXQKJ02C5V6lWD0zAOQBE2wshPAyjGizgrkMG3/6UCJjyzUk7iKBE4yE7h2SSPv+X1kD4+VQ5cZdQG2VP4cBnJjPJ0zqdd2087h3dSn6rDJosrEkq2TA4/vc+MGpbdwOzyItzMue+2fBPiBIDxCT/juDS7eP6S7kXPL1h5Z0hVaeXtfcHFl2K6XKZZQ6+VYiYS3jANdG1MgKRS9jZ30R9gxg7C+NKNs2N9FHlnP+SXigWbCCwglOOnZcsvPDcmwNVzw5PHZ/3Vt8xBSFk3AWtxytYJ5KtEMf704UJsovykeST/VlHiv7frBNZeHJmnfGMIyuZqpe6XzZnZIJGEpVIQo2Qf/BTAqeCHxl2Rd1yEnKbnVMD5L5pSuqaOCYlSJjxXzwz76pvxFJsY7HenDzCZwr9d2Wt+9sp+HPQnUgdDrO986X87F2g2LgTkLk4zLk19LV+fMjib76n9G8HTgo+qnwn+YSatD+aPlr2aHp+H1l8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065357</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065359</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06541</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0D0FD1811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D0D0FD6011A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D0D0FD9A11A5E0401F0A059963DC</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_FUNC_YOUTH_BAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="9c4070fc-000a-4e4d-8f9b-c72bff3fdb41"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B752C0A1E0401F0A079904DF:AD160F96"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D0D0FDD611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FDD611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D0D0FDD611A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D0D0FDE811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B71DC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B757C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D0D0FDE811A5E0401F0A059963DC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B71DC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B757C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6MQh4SQRAUp08BOOv2Gdqd9WRnnAu4EOxM7QPn16wRCgdJuZyUk5Jvrc8/98LFPBZ6lzSAUAnJJOdPiqKP/A207wXa7bWDPcw0HnJaBx7ZnOFYbNce2jZ2xp2uxEAXETEjMZEdvIss2LKR+QwsFLSdATqPte0+69gC5UNDKpYF0bTlLmQiqsB29yFnAsaAiYHgGIpAkGISXF4HyDHDNSe+erllWAfPuVMosME3SSIBAmpIG4TPz1NzzOU1EMKAThmWRwyZmIjr6Zu9isWgs7AbPJ2YTIWQi31Q+iaCTL3r3pN4MSczGfL0+w4wzSnBKV7gkdQlyyhMtTCc8p3I6ewfaMi1UQhuwJAaxHPZFN18DVOw+ibRHMhfYEFNs1WB3MIYcGAHt/i7u6F8+18H13mGOmRjzfCYO1n9GCdgcUp5BYog6s5rd5xGPlKt7CiSIGUkLQedwVY5JhgkI7SaHMV1eUKGGLxFa1X5tKeoJA/InLTk1d3kq2uaRykR0AkL+n37t9mqN8oDTArrn4+UDcodnIRn5d2Z+NuDm7fdfq3sbkU5FYdd5TWrb6s36cFC3c7XZtIpF1EL94rr3hMzr0Q2NFzf3abxYZVfkdtJr+eKef2U/2IS205Dlib/M8mEa8l5r2L/+67wPovl8ec7lV9pyT+TziPgPod9zM+ciROl8FRPLao1GYxpe9GF1m3979J2rB/pDrl6omM2nP1Bys3Cfmn/35N3jUDbDVlt85zde/P2EA7r1vfPH52tn6P38Be4j6rzmtJvDvrGWg0ExegYi62U5GnGk9VW/sPxYWkoLTYxx5RpkpT4JCUzq3XJXKStBocSHJoFq5nrd81wrQhHqRz3PssJWDznI6qMQtXzftaOzWn/WLA4onnE2pmWsUmHX8/MxQTILBLAEcmPOCzIFoX+AGGGJtZjdqYPBmYAhVwre93w79D0HRf2e1/Obbs8P7bbrKkW2W1FbqfcVl9fsOg/HEvJ99bb31PsOCM0olBJfzrlQgy6kKslvPC9kajXmuMGgUJdAXupw0HS8linoLEuhJGzOeFKk0MimWVUgU6z/mwYmorJSQTKeS5xWp/DdJA+/1fVQPgktHUSZ0TdQPYU3l1GZ0Sad99N2d9Ou4cMioeVhU8WVOSVrJvufXmemHJbtwGzzIsKquW+3/CHEEQDzA37mYWm28ZI53YleX7DqzlCq0q3b+xs3fjeK+byoGtouFTNX8KZlorY5AFIo2XsZ8l/AzC2E+akbZ8v6IPLWvs+vkFM2kFjCTI2fVi0/8dwYgCifG7E6PsvPvmX2Qqq6SVjKY7azVL1KSsYfPlxIQEo/Zb5RfwueJ6/tOoK1E0flqd4YkrJJuSrvl5d3ZoNwBUuVIPJ8F/wYwLHg+8ZtkbdcpJqmUSHh/S9aqXQdHRPCCybjSK8Mu+pb8ZQvGQSvTm9gKoXfXNlL8e6V/fPyYqB0cIb1rS/9b2eDVuNCQO0StOLS0Zfq9amCs8mO2m8IHhf8yP1I8Pcz6b4xv7Xs1PTwPHT/BQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6MQh4SQRAUp08BOOv2Gdqd9WRnnAu4EOxM7QPn16wRCgdJuZyUk5Jvrc8/98LFPBZ6lzSAUAnJJOdPiqKP/A207wXa7bWDPcw0HnJaBx7ZnOFYbNce2jZ2xp2uxEAXETEjMZEdvIss2LKR+QwsFLSdATqPte0+69gC5UNDKpYF0bTlLmQiqsB29yFnAsaAiYHgGIpAkGISXF4HyDHDNSe+erllWAfPuVMosME3SSIBAmpIG4TPz1NzzOU1EMKAThmWRwyZmIjr6Zu9isWgs7AbPJ2YTIWQi31Q+iaCTL3r3pN4MSczGfL0+w4wzSnBKV7gkdQlyyhMtTCc8p3I6ewfaMi1UQhuwJAaxHPZFN18DVOw+ibRHMhfYEFNs1WB3MIYcGAHt/i7u6F8+18H13mGOmRjzfCYO1n9GCdgcUp5BYog6s5rd5xGPlKt7CiSIGUkLQedwVY5JhgkI7SaHMV1eUKGGLxFa1X5tKeoJA/InLTk1d3kq2uaRykR0AkL+n37t9mqN8oDTArrn4+UDcodnIRn5d2Z+NuDm7fdfq3sbkU5FYdd5TWrb6s36cFC3c7XZtIpF1EL94rr3hMzr0Q2NFzf3abxYZVfkdtJr+eKef2U/2IS205Dlib/M8mEa8l5r2L/+67wPovl8ec7lV9pyT+TziPgPod9zM+ciROl8FRPLao1GYxpe9GF1m3979J2rB/pDrl6omM2nP1Bys3Cfmn/35N3jUDbDVlt85zde/P2EA7r1vfPH52tn6P38Be4j6rzmtJvDvrGWg0ExegYi62U5GnGk9VW/sPxYWkoLTYxx5RpkpT4JCUzq3XJXKStBocSHJoFq5nrd81wrQhHqRz3PssJWDznI6qMQtXzftaOzWn/WLA4onnE2pmWsUmHX8/MxQTILBLAEcmPOCzIFoX+AGGGJtZjdqYPBmYAhVwre93w79D0HRf2e1/Obbs8P7bbrKkW2W1FbqfcVl9fsOg/HEvJ99bb31PsOCM0olBJfzrlQgy6kKslvPC9kajXmuMGgUJdAXupw0HS8linoLEuhJGzOeFKk0MimWVUgU6z/mwYmorJSQTKeS5xWp/DdJA+/1fVQPgktHUSZ0TdQPYU3l1GZ0Sad99N2d9Ou4cMioeVhU8WVOSVrJvufXmemHJbtwGzzIsKquW+3/CHEEQDzA37mYWm28ZI53YleX7DqzlCq0q3b+xs3fjeK+byoGtouFTNX8KZlorY5AFIo2XsZ8l/AzC2E+akbZ8v6IPLWvs+vkFM2kFjCTI2fVi0/8dwYgCifG7E6PsvPvmX2Qqq6SVjKY7azVL1KSsYfPlxIQEo/Zb5RfwueJ6/tOoK1E0flqd4YkrJJuSrvl5d3ZoNwBUuVIPJ8F/wYwLHg+8ZtkbdcpJqmUSHh/S9aqXQdHRPCCybjSK8Mu+pb8ZQvGQSvTm9gKoXfXNlL8e6V/fPyYqB0cIb1rS/9b2eDVuNCQO0StOLS0Zfq9amCs8mO2m8IHhf8yP1I8Pcz6b4xv7Xs1PTwPHT/BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc6o6FH3vr2DoYwcJFFSY6oyK9nhOv7U9bV/upGGraSFQEhT99TdgoWptb3tnnHGy2Vl77Y+s5ITjMDDdDueQCBoxZei11H8ahlN/sidYs32baBZYoDXrhqPVbdzAE+fJenIaqjLkPIUh4wIz0VJNZBxrBpK/sYFc23JRvWY1rUdVuYOES2jpUkOqkoUB424RtqWmCXMjzCl3GQ6Bu4K4o875mSs9XVxyUtsna5ZFwKQ9EyJ2dZ3UfCAQBKRGolA/0bd8TnzujuiUYZEm8BbT5y31be9isagtjmtRMtVNhJCOHF36+JxOD9X2QbkZ/CGbROt1D7OIUYIDusI5qXMQs8hXOsE0SqiYhZ9AG7qBcmgNMqIRw2KHqv4eoGD3TaQtkgnHGp9howS7gQkkwAgotzfDlnr4vQ6u944TzPgkSkK+s/4ZJWBzCKIYfI2XmZXsvo+4p1ztEyDukJEg5XQOF/mYxJgAV64SmNDsjHI5fD5XivYrGS8nDMhPWnKib/KUtPU9lfHoFLj4P/3a7NUa5Q4HKbSfgh48TLM/r+jyz2T27D3zF+80SETY5a2CwqbzmlTV6rf17qBWc/W2iVqr26kYwtHyN8myZNjvd06tMD7W71+W3VNy9it7JuQej0+P9BVlt4939l9xvThddUbx5fLiqh8uybzxYN+sbl/0gya3+xdofnc9R3d3j+bEfj0Kw7D51zGzwaq/jIlzPp6Y3QV3Ll6cM/N6kIxvu2T8SqOm4aP4d3rdaK4euBiPgtnB9a/zvn01pRdHxCfnndtVk7fec9rMYdtYysEofXoGIsplPhpDTxnIfmHxtbTkFuprk8LVjXN94gKYUNv5rlxW3FSKD/Vd2cz1ui+Pj2caqNswvB7qGH1kIWOAOqjhOMjyBqX+rFnsUOxFbELzWLnCrufna4IkdDkwHxJtHqVkBlz9AtHDAitDdiMPRsQ4jCOp4Bbq9RrdQV8y7JhN26ubyLTqvUG37jS7jYatKheRuGSXSWciINlW7+Mt9b4BQmMKucTnc87loHMhS/KK56kIjNoc1xik8hJIch12Tatp65yGcQA5YT2M/DSAWjyLiwLpfP1vapjwwko5iaNE4KA4hZ8mufutrIf08WnuwPOMuiB7Ch8uI5lRmc7nadc30y7hO6lP88MmiysSStZMtj+9z0w+LNXAVHkRbpTcqy0/hNgDoH/BT98tTRXPn9ON6OUFK+8MqSrtsr2vuPZaS+fztGhoI1fMRMLrho4a+ghIKmVvOY5egOkVhP6tG6divRO5sm/zS8WMjQQWEMrxU4rlN54bI+D5c2Moj0/23bfMVkhZNwGZ2GfrBfJVkjP+8uFCXJL7SfOV/FtEif/erj1YG3FknvKNISib5qv8fll+MhskkrBUCmKUbILvA9gXfNtYFbniIuQ0PaUCPv+i5ErXUjEhUcrE0FMLw6b6FjzFMgb33ekDTKHwb1d2xj+9su/Pz0ZSB0OsVr70v501WowLAbmL04JLS83k61MGZ9MNtX8j+EHwkYcGnlc3jI5dCb7tOPVjr1cVcCuT9gfzR8tGTXfPQ/tf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1OaQkuhI8wUC8d6FY+AHo8vd0IaINqmJUkB76+/SbEVEL2eO8MMk92dtdf+yErOOUziuudzjpkgKdXCoKP/HYGG3WhN2wa23Klhw0bLmM5Q3QBuw8JwOrUtEOlayHmOQ8oFpKKj14HVMCwgfxMLeI7tgVYNNMCTrj1gxiW0dKkBXdskMeVeEbaj54x6KeSEexQmmHsCeWP/5tqTnh4sOend8y3LIiDrLoTIPNNEtQgjHMeohtLEPDf3fM4j7o3JnEKRM/wWM+Id/W3ver2urRu1lM3NOgDABG1T+kSczE/17km5GUchnaXb9QWkKSUIxuQfqEjdYLFII82P5ykjYpF8Am2ZFlDQBt4gA1k2PdXN9wAFu28i7ZFkHBp8Aa0SbIRnmGGKsHY/Cjv66fc6uN07YZDyWcoSfrD+M0qYrnCcZjgyeJlZye77iEfK1T3HyAspinNOVnioxiSDCHPtJ8MzsrkmXA5fxLWi/dqGlxOG0Z+05Nzc5Slpm0cqE5A55uL/9Gu3V1uUBxjnuOuS0R0TYXhmTpxl7OZn4szNZ+wutu87BYVd5y2pqtVv68NBrebqbdMajm9Wvx5/RRub28+3jxn/nQ3ukzg0+2D5k40em42zYXZTr1t3VryeNvMeTa7OhuzmxU+D64dX9/fQtrPft25yd38Sp68LnE9a+WWWtNopaLSfHEj690mGZq3hKLYfpvHl0zq0x/jqufF8+br2o4ndenwZ0ml8Zt/fimCCnsPlKlo6J1f+j7/6zoCyyY/ZMK//mg78zntOuznsG0s5GOfTZ4xEuVSjEQbaQPYLiq+lRVlIZMwKVy9T+sQFpkLvql1KVrxcig+JPNnM7brfalpB3QI913EvgG/1gQ2sAfCB224DOxiU+rNlcUDxIqUzomIphd3Oz9cEUeJxTCPMjFWaowXm+heIARRQC+lIHoyUcjxJpYLbTn3Qbzt9q265F33Xsnu9Xt92mj3fsfq9QaBrw1Tc0lvmzwRm++rd2FPvEUYkI1hJvJpzLgedC1mSJVzlIrZqK1ijOJeXAFM67NXtlmNykmQxVoTNJI3yGNeyRVYUyOTb/7oBES+shKMsZQLGxSn8NMnDb2U9pE9ElANXGfWw7Cn+cBnJjMp0Pk+7uZt2Ce/nEVGHTRZXMIK2TPY/vc+MGpZqYKq8ELdK7tWWP4Q4AmB+wc88LE0VL1qRnejlBSvvDKkq3bK9S1hb1vLVKi8a6irFZBLetEzgmmOMcil7r5P0BVOzgjC/deNUrA8iV/Z9frlY0LGAAidy/LRi+Y3nxhhz9dwI5fHZfPctsxdS1k3gjThmu4jlq0Qx/vLhgjyk/KT5p/xbp+w98WNYO3FknvKNIQidq5W6X14/mQ2USlgiBTFlu+DHAI4F3zdWRa64CDlN01zgz79oSuk6OkQozakIlaJIw676FjzFa4a9d6cPMIXCv13ZG/7plf14cz2WOphAvfIl/+1skGJcEJa7OCm4dPSNfH3K4HS+o/ZvBD8IPgjAIAialuU7leA77XazEVxUBdzLpPvB/NGyU9PD89D9Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06543</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_06545</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_06547</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D0D0FDE911A5E0401F0A059963DC</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B71EC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B758C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_FUNC_YOUTH_BAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="1e134f84-6ab2-4660-a2e6-8ba8cab33d69"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B823C0A1E0401F0A079904DF:E4403C99"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210B794C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210B794C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210B794C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210B7A6C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B7EEC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B828C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210B7A6C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B7EEC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B828C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6vgJIQAUUGipMxkll6m0M50XlbGOYCH4ATb4dJfv3ZoKFDabVdCQj45/s53Lv7sc4HniRt0hAAuacqMKGyZ/7jjRrOBSWw5VRxbHoywhccuWBC7uOaRBvGxbxqREDlETEjMZMt0badqObb6DR07qHmBY1ccr/bbNB6ACwWtXCq2aaznCRNBEbZl5pwFKRZUBAzPQQSSBIPOVT9QngEuOZnt8y3LIiBvT6XMAoRIJQYCSUIqJJ2jc3Tgcx6LYEAnDMucw3PMWLTM572r1aqyqlZSPkGubdvIbiLlEws6OTPbX8rNEEdsnG7XXcxSRglO6BPWpK5ATtPY6CSTlFM5nb8B7SDH1tAWrIlFHI+dmeglQMHug0gHJLnAlphipwS7gzFwYASM+7uoZZ59rIPbvUOOmRinfC6O1p+jBGwJSZpBbIkys5LdxxFPlKt9DiSIGElyQZdwrcckwwSEccthTNd9KtTwxcIo2m+sRTlhQD7TknO0z1PRRicqE9IJCPl/+rXfqy3KA05yaD/K3k3YD8d/Tx/d5sX0YV51N19neX6Z3LcKCvvOW1K7Vj+vjwd1N1fPm8jG+Xadr4f1H/kSPQ1Ir/4wWYnL6aYXockMVxMyzJ74yv+6GTlXFH2bfR9dNUYLwa9szocPt24fZyxZxLNxePvFdfObGVrQXz+bf6L7J/4rdX9ns7rTfKQPl7P6n3TYjxKXNGqLZLROmjGWnaFPU2/lXt/8NZPX0dPoZub+lNO7u59fkqVTJ98aUP1eu2T+U200+dF6yWk/h0NjKQeDfPQHiCyXejSi0OipfmH5vrRoC42tceEaZFqfhAQmzbbepWUlyJX40DhQzdyuLxu+E7qOfVHv+F2741zanu307I5dbzZtL+yV+rNlcUSxm7Ix1bG0wm7n532CZB4IYDFwa5nmZArCfAcxxBIbEbtTByNlAoapVvCwavvdnu97fsMLu/6F3bwIO41G1el6dli7MI3rVN6wG94ZS+CH6l09UO87IDSjoCVez7lQgy6kKskCL3OZOJUlrjDI1SXAtQ4HrteoIUHnWQKaMJqncZ5AJZtmRYGQ2P67FiaisFJBspRLnBSn8M0kj7+V9VA+MdUOQmd0AaqncOIysst03k7b30+7hO/kMdWHTRVXckq2TA4/vcyMHpbdwOzyIsIpue+2fBLiBAB6hx86Ls0uXryke9HLC1bdGUpV2mV7F7iyqOTLZV40tK4Vkyt45CC7jgZAciV7m2E6A4Z2EOhDN86O9VHknf2QXy6nbCCxhLkaP6NYfuC5MQChnxuROj7rj75lDkKquklYy1O2bqJeJZrxuw8XEhDtp8y36m+V8vilXSew9uKoPNUbQ1I20St9v2zemA2SKliqBDHl++CnAE4FPzTuirzjItU0jXIJb38xtNK1TExImjMZhWZh2FffgqfcZBC8OL2CKRT++cpeizev7F9X/YHSwTk2d770v50tWowLAbVL0IJLy1yr16cKziZ7av9M8LTgN733BP8wk/Yr82vLXk2Pz0P7Xw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6vgJIQAUUGipMxkll6m0M50XlbGOYCH4ATb4dJfv3ZoKFDabVdCQj45/s53Lv7sc4HniRt0hAAuacqMKGyZ/7jjRrOBSWw5VRxbHoywhccuWBC7uOaRBvGxbxqREDlETEjMZMt0badqObb6DR07qHmBY1ccr/bbNB6ACwWtXCq2aaznCRNBEbZl5pwFKRZUBAzPQQSSBIPOVT9QngEuOZnt8y3LIiBvT6XMAoRIJQYCSUIqJJ2jc3Tgcx6LYEAnDMucw3PMWLTM572r1aqyqlZSPkGubdvIbiLlEws6OTPbX8rNEEdsnG7XXcxSRglO6BPWpK5ATtPY6CSTlFM5nb8B7SDH1tAWrIlFHI+dmeglQMHug0gHJLnAlphipwS7gzFwYASM+7uoZZ59rIPbvUOOmRinfC6O1p+jBGwJSZpBbIkys5LdxxFPlKt9DiSIGElyQZdwrcckwwSEccthTNd9KtTwxcIo2m+sRTlhQD7TknO0z1PRRicqE9IJCPl/+rXfqy3KA05yaD/K3k3YD8d/Tx/d5sX0YV51N19neX6Z3LcKCvvOW1K7Vj+vjwd1N1fPm8jG+Xadr4f1H/kSPQ1Ir/4wWYnL6aYXockMVxMyzJ74yv+6GTlXFH2bfR9dNUYLwa9szocPt24fZyxZxLNxePvFdfObGVrQXz+bf6L7J/4rdX9ns7rTfKQPl7P6n3TYjxKXNGqLZLROmjGWnaFPU2/lXt/8NZPX0dPoZub+lNO7u59fkqVTJ98aUP1eu2T+U200+dF6yWk/h0NjKQeDfPQHiCyXejSi0OipfmH5vrRoC42tceEaZFqfhAQmzbbepWUlyJX40DhQzdyuLxu+E7qOfVHv+F2741zanu307I5dbzZtL+yV+rNlcUSxm7Ix1bG0wm7n532CZB4IYDFwa5nmZArCfAcxxBIbEbtTByNlAoapVvCwavvdnu97fsMLu/6F3bwIO41G1el6dli7MI3rVN6wG94ZS+CH6l09UO87IDSjoCVez7lQgy6kKskCL3OZOJUlrjDI1SXAtQ4HrteoIUHnWQKaMJqncZ5AJZtmRYGQ2P67FiaisFJBspRLnBSn8M0kj7+V9VA+MdUOQmd0AaqncOIysst03k7b30+7hO/kMdWHTRVXckq2TA4/vcyMHpbdwOzyIsIpue+2fBLiBAB6hx86Ls0uXryke9HLC1bdGUpV2mV7F7iyqOTLZV40tK4Vkyt45CC7jgZAciV7m2E6A4Z2EOhDN86O9VHknf2QXy6nbCCxhLkaP6NYfuC5MQChnxuROj7rj75lDkKquklYy1O2bqJeJZrxuw8XEhDtp8y36m+V8vilXSew9uKoPNUbQ1I20St9v2zemA2SKliqBDHl++CnAE4FPzTuirzjItU0jXIJb38xtNK1TExImjMZhWZh2FffgqfcZBC8OL2CKRT++cpeizev7F9X/YHSwTk2d770v50tWowLAbVL0IJLy1yr16cKziZ7av9M8LTgN733BP8wk/Yr82vLXk2Pz0P7Xw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3S6n0tTWoR2hBmkqLhV3OJWty9nYrqAaJtALlz89SctFoGNHj0zzDBZXfnWty75kiOJs7QataUEoShnVi9u2v8AgIcTv+H4uPHkBDUSOLhRrTqNQ28YhkO/2sCBbfWk1NBjUmGmmnYVeb7jIfO79VBUCyLPq9TR4aNt3YGQBtq4VJBtLbKUyagI27S1YBHHksqI4QxkpEg0aF9eRMYzwiUnu3W0YlkEFK2xUpPIdUklAQJpSiqEZ+6Ru+VzlMhoQEcMKy3gLWYim/bb3vl8Xpn7FS5GbhUh5KLQNT6JpKMfduug3AxJjw35at3BjDNKcEpfcU7qEtSYJ1Y7HXFB1Tj7ANpzPZRDO7AgDvEC9sN23wMU7L6ItEVSSOzIMfZKsBsYggBGwPp902vaP77WwdXeW4GZHHKRyZ319ygBm0HKJ5A4ssysZPd1xD3lah0BiXqMpFrSGVzlYzLBBKR1LWBIFxdUmuFLpFW031rIcsKAfKclR+4mT0Pb3VOZmI5Aqv/Tr81erVDucKqh5QnyXH2+ClM9nnWCKbmI4/701/3hGYyaBYVN5xWpdavf1ruDup6rt01wv7jxr+Rj6iVx213MveT67Ox2eX6v66fj18c+D6+JrNfi5fHjGdfP7ukgmPKX38jvz6vJILs+ftAhrw3H0L4/PBj+eoTR6cXiLByk5331x++dPnR+32lBfsYp9rOzTNxl92mC6ueJcjt4evmyfKjeiB4KGqTb+dUnV6/wTGU35q8Hi6X+M73U4fK5cXvYQPXT827zPafNHLaNpRwM9NMzEFUu89HoxdaJ6RdWn0tLbqGJMyxco0muT1IBU3Yr35XLSqSN+NAkMs1crbvm5MRVDx3Xu90OantdFCDvBLVRPQxREJ+U+rNisUOxw9mQ5rFyhV3Nz+cESRZJYAkIZ8Y1GYO0P0GMscJWj92Yg8GZhFtuFNzv1Osnx4FfP4kboe91a35wHKNaHPvoJAjaoW1dcdVnfdEeKhDb6u1vqfcNEDqhkEt8PufSDLpUpiRTPNMq9SozXGGgzSUgch2OqkGj5kqaTVLICbsZT3QKlcl4UhTIlav/qoOJLKxUkgkXCqfFKfwwyd1vZT2MT0JzB5lndAymp7DnMkJlOh+nfbiZdgnf1gnND5sprhKUrJhsf3qfmXxY1gOzzotIr+S+3vJNiD0A7if83N3SrOMlM7oRvbxgzZ1hVKVVtneKK9OKns100dB6rpjCwLuei+ruAIg2sre85S/A3DWE+6UbZ816J/Lavs1PqzEbKKwgM+NnFcsvPDcGIPPnRs8cn8VX3zJbIU3dFCzUPlsnNa+SnPGnDxcSkdzPmK/N35yL5L1de7A24pg8zRtDUTbKV/n9svxgNgg3sNQIIheb4PsA9gXfNq6LvOaizDQ9aQUff7FypWvamBCumerFdmHYVN+Cp1pOIHp3+gumUPi3K3shP7yyHy4vBkYHM2yvfel/Ozu0GBcCZpekBZemvTCvTxOcjTbU/o3gfsEPg88EfzuT1l/mvy0bNd09D61/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHlchH9AQooIETehkprQd6HQrXlaucwOeSew0diD0168dGgoM7XZWQkK+uT733A8f+5yjLHX8IedQCMKoFgV9/Z92D7qOi7tGF1zb6KCea3id9qOReB6GLnYSN/F0LeK8hIhygajo645ltw3bkr872/LPOr7dbjln7lzX7qHgElq6tCxdq7KUcr8O29fLgvoMccJ9ijLgvsD+bDi58qWnjxpO+uB8y7IOWAyWQuS+aeJWDBjSFLcwy8xz88DnPOb+jCwoEmUBLzFj3tdf9q7X69a63WLFwnQsyzKtnil9Yk4Wn/XBp2YzxBFN2HZ9gSijBKOUPCNFagJiyWJtmC5YQcQyewPaNm1LQRtQYQPbHfpZN18D1Ow+iHRAsuDI4EtkN2BTSKAAikH7MY36+uePdXC7965AlCesyPjR+s8oAV1BynKIDd5k1rD7OOKJcg3OAfsRxWnJyQqu1ZjkCAPXbgtISHVFuBy+mGt1+7WKNxMG+E9acm7u85S0zROVCcgCuPg//drv1RblHqUlDJbPnm0N722Wj62wfPgF42j1yGAefZn0awr7zltSu1a/rI8HdTdXL5uo982aBAFeXtp06STT0f36QYRVVZ19mz8+zjck+F6FV9++fK9YZVob9zZc/7y+LGamxX8shL2BK+/mOnteumF8/wldAS86dPP3w9e/WJCQdZTjzmpxk9Hbe89DpFuhSVJNCzMI8rMJ5eN0XfHoV76+mRbzaxHCavJz/sPF1dx9/nS5tiZjZ+492J2bIKluL92o/5rTfg6HxkYOZuXjT8CiWarRiAJtLPuFxPvSoiwkNpLa1c+VPnEBVOgDtUvJil9K8SGxL5u5XYeeaweObY08x7uwhnZodSx7bA2tbq9ndYJxoz9bFkcULxhNiIqlFHY7P+8TxJnPgcZQGCtW4iVw/R3EAAmkRXQqDwajHO6YVHCn1xl5XjgKnWFoB73eaOiMR8HZsN3z3F7YDXXtmokbelMMEwHFoXq3D9R7CpjkBJTEqznnctC5kCV5QqtSpHZrhVoUSnkJFEqHfafjnZmcZHkKirCZsbhMoZUv87pAJt/+OwbCvLYSjnNWCJTWp/DNJI+/NfWQPjFRDlxlNALZUzhxGVlNOm+n7e6n3cAPy5iowyaLKwqCt0wOP73OjBqW3cDs8sLcbrjvtvwhxAkA8x1+5nFpdvHiFdmL3lyw8s6QqjJo2vuEWk+tcrUq64Z2lWIWEt60TatrzgCXUvY2d+wXUHMHYX7oxtmxPoq8sx/yK8WSzgQSkMnx0+rlB54bM+DquRHJ41N99C1zEFLWTUAlTtkuUvkqUYzffbhgHys/ab6Vf2tWxK/tOoG1F0fmKd8YgtCFWqn7ZfPGbGAmYYkURFbsg58COBX80Lgr8o6LkNP0WAp4+4umlK6vI4xZSUUU6LVhX31rnmKTg//q9BtMrfAvV3bF37yyHyZXM6mDGdJ3vuS/nQ1SjwsGuYuTmktfr+TrUwaniz21fyF4UvC7vc57gn+YyeA38++WvZoen4fBvw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_06549</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065411</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065412</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210B7A7C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B7EFC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B829C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_FUNC_YOUTH_SAU_Get_ADULT_BAU_200_OK_P1" searchProperties="true" id="78112be6-587e-49c7-a51e-ce2fc7a0bef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B8F4C0A1E0401F0A079904DF:D54F3F9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210B865C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210B865C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210B865C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210B877C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B8BFC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B8F9C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210B877C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B8BFC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B8F9C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgJAUSooKUcplmei9th+nLketswG1ip7EDlK8/dmgoUNrTORIS8s722mtfvOxDgdPEDUIhIJeUMyPqtc1/iNMcNx6IbzXBr1t13z2w/LqHrYbXgOaDX6+TmJhGJEQBERMSM9k2Xds5sBxb/W4cO2jUA8ev2e7BvWncQS4UtHKp2aaxSBMmgjJs2yxyFnAsqAgYTkEEkgTD8Ow0UJ4BrjiZncMVyzJg3plKmQUIkVoMBJKE1AhP0SHa8jmMRTCkE4ZlkcNrzFi0zde98/m8Nj+o8XyCXNu2kd1CyicWdPLd7HyrNkMcsTFfrbuYcUYJTugSa1JnIKc8NsJkwnMqp+kH0A5ybA1twYJYxKmz7yZ6C1Cy+yLSFslcYEtMsVOBXcMYcmAEjNvrqG1+/1oHV3tvcszEmOep2Fn/HSVgM0h4BrElqswqdl9H3FOuziGQIGIkKQSdwbkekwwTEMZlDmO6OKVCDV8sjLL9xkJUEwbkb1pyiDZ5KtpoT2V6dAJC/p9+bfZqhXKHkwI69zKyf53aTrffeOgeL1u9+5Yv+g2v9XLVLilsOq9IrVv9ut4d1PVcvW46haPfmd1F3IZllPZv58uX3y9iMBq5Jzg/yf6EJ/dL8fjrGI2Efybdy4P70e2iWKZ/UCKH3H3kvauTuZONnjPn5NskOrX7yU95dYziYy9+vO8tLqbjq9l18yFt5T8uLo/SZJ4dNe+mhA+Hy9HN+XFK+/Nf6fDn0/H4dpr4g+V5PAtH6eTi2yV6PP8huzeZexk9nj2Ft9On9ltOmzlsGys5GBYPj0BktdSjEfWMgeoXlp9Li7bQ2BqXrkGm9UlIYNLs6F1aVoJCiQ+NA9XM1brvN52e69hHvud17dDp23XbGdih7bVadr03qPRnxWKHYpezMdWxtMKu5udzgiQNBLAYcmvGCzIFYX6C2MMSGxG7VgeDMwE3XCl4ozsIe3bL85xu96jh1f1+M+yG/YHrt1p+o+6ZxjmXF+wiD8cS8m31PthS72sgNKOgJV7PuVCDLqQqyTOeFTJxajNcY1CoSyDXOhy4db+BBE2zBDRhlPK4SKCWTbOyQEis/l0LE1FaqSAZzyVOylP4YZK736p6KJ+YagehMzoC1VPYcxnZVTofp93cTLuCD4uY6sOmiitzSlZMtj+9zYwelvXArPMiwqm4r7f8JcQeAPQJP7RbmnW8eEY3olcXrLozlKp0qvY+49pzrZjNirKhnlbMXMEjB9keGgIplOy93PAnYGgNgb5046xZ70Re27f5FXLKhhJLSNX4GeXyC8+NIQj93IjU8Vl89S2zFVLVTcJC7rN1E/Uq0Yw/fbiQgGg/Zb5Uf3Oex2/t2oO1EUflqd4YkrKJXun75eWD2SBcwVIliDzfBN8HsC/4tnFd5DUXqabpoZDw8RdDK13bxITwgsmoZ5aGTfUtecqXDII3p3cwpcK/XtkL8eGVPTo7HSodTLG59qX/7WzRclwIqF2Cllza5kK9PlVwNtlQ+1eC+wW/2fhM8Lcz6bwzv7ds1HT3PHT+BQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6PgJAUSooKUcplmei9th+nLketswG1ip7EDlK8/dmgoUNrTORIS8s722mtfvOxDgdPEDUIhIJeUMyPqtc1/iNMcNx6IbzXBr1t13z2w/LqHrYbXgOaDX6+TmJhGJEQBERMSM9k2Xds5sBxb/W4cO2jUA8ev2e7BvWncQS4UtHKp2aaxSBMmgjJs2yxyFnAsqAgYTkEEkgTD8Ow0UJ4BrjiZncMVyzJg3plKmQUIkVoMBJKE1AhP0SHa8jmMRTCkE4ZlkcNrzFi0zde98/m8Nj+o8XyCXNu2kd1CyicWdPLd7HyrNkMcsTFfrbuYcUYJTugSa1JnIKc8NsJkwnMqp+kH0A5ybA1twYJYxKmz7yZ6C1Cy+yLSFslcYEtMsVOBXcMYcmAEjNvrqG1+/1oHV3tvcszEmOep2Fn/HSVgM0h4BrElqswqdl9H3FOuziGQIGIkKQSdwbkekwwTEMZlDmO6OKVCDV8sjLL9xkJUEwbkb1pyiDZ5KtpoT2V6dAJC/p9+bfZqhXKHkwI69zKyf53aTrffeOgeL1u9+5Yv+g2v9XLVLilsOq9IrVv9ut4d1PVcvW46haPfmd1F3IZllPZv58uX3y9iMBq5Jzg/yf6EJ/dL8fjrGI2Efybdy4P70e2iWKZ/UCKH3H3kvauTuZONnjPn5NskOrX7yU95dYziYy9+vO8tLqbjq9l18yFt5T8uLo/SZJ4dNe+mhA+Hy9HN+XFK+/Nf6fDn0/H4dpr4g+V5PAtH6eTi2yV6PP8huzeZexk9nj2Ft9On9ltOmzlsGys5GBYPj0BktdSjEfWMgeoXlp9Li7bQ2BqXrkGm9UlIYNLs6F1aVoJCiQ+NA9XM1brvN52e69hHvud17dDp23XbGdih7bVadr03qPRnxWKHYpezMdWxtMKu5udzgiQNBLAYcmvGCzIFYX6C2MMSGxG7VgeDMwE3XCl4ozsIe3bL85xu96jh1f1+M+yG/YHrt1p+o+6ZxjmXF+wiD8cS8m31PthS72sgNKOgJV7PuVCDLqQqyTOeFTJxajNcY1CoSyDXOhy4db+BBE2zBDRhlPK4SKCWTbOyQEis/l0LE1FaqSAZzyVOylP4YZK736p6KJ+YagehMzoC1VPYcxnZVTofp93cTLuCD4uY6sOmiitzSlZMtj+9zYwelvXArPMiwqm4r7f8JcQeAPQJP7RbmnW8eEY3olcXrLozlKp0qvY+49pzrZjNirKhnlbMXMEjB9keGgIplOy93PAnYGgNgb5046xZ70Re27f5FXLKhhJLSNX4GeXyC8+NIQj93IjU8Vl89S2zFVLVTcJC7rN1E/Uq0Yw/fbiQgGg/Zb5Uf3Oex2/t2oO1EUflqd4YkrKJXun75eWD2SBcwVIliDzfBN8HsC/4tnFd5DUXqabpoZDw8RdDK13bxITwgsmoZ5aGTfUtecqXDII3p3cwpcK/XtkL8eGVPTo7HSodTLG59qX/7WzRclwIqF2Cllza5kK9PlVwNtlQ+1eC+wW/2fhM8Lcz6bwzv7ds1HT3PHT+BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHkfBCQmERAWJQtFEU2gX2pnpvqyMcwF3EjvEDl+/fu3QUGBot7MSEvLN9bnnfvjYVwKnST3sCgG5pJwZUb9t/hM4QTNoNG3LrXsNy5u2XGsK06nluU3Xd8D24qlrGpEQBURMSMxk26zbjms5tvo9OHbY8EInqPl1+2/T+A65UNDKpWabxiZNmAjLsG2zyFnIsaAiZDgFEUoSTrrD21B5hrjiZHau9izLgHlnIWUWIkRqMRBIElIjPEVX6MTnKhbhhM4ZlkUOLzFj0TZf9q7X69rarfF8juq2bSM7QMonFnT+2ex8qjZDHLEZ3697mHFGCU7oDmtSQ5ALHhvdZM5zKhfpG9AOcmwNbcGGWMTx2GcTvQYo2X0Q6YRkLrAlFtipwMYwgxwYAeNxHLXNzx/r4H7vQ46ZmPE8FWfrP6MEbAUJzyC2RJVZxe7jiBfK1bkCEkaMJIWgKxjpMckwAWHc5zCjm1sq1PDFwijbb2xENWFA/qQlV+iYp6KNLlSmT+cg5P/p13Gv9ijfcVJAJwiaT4/zL71vZDiCUTC+u7+9ETFx491Tu6Rw7LwndWj1y/p8UA9z9bLpW+PX+icSPh4Pl6M7SeuPP1qpX19G47/S7hfqPcWoJa65v16uHm9HW/G47koc9Jqkz/KJ3F6PPVgmjWgif3zNPmXLyWb3LFcjuZ0/rXGQrJsZ3Tk7P8LDtDdm23v7eXYP8Re6yvKvWaTOol8fZs7uPnZ36OtzS+BvOZo4rSn/9akgN+Ku+7jZFnwzeOgFgjy1X3M6zuHUWMnBpJg+A5HVUo9G1DcGql9Yvi8t2kJja1a6hpnWJyGBSbOjd2lZCQslPjQOVTP365tW0+nXHfu6dT3o2V3nxvZsZ2B3bT8IbK8/qPRnz+KMYo+zGdWxtMLu5+d9giQNBbAYcmvFC7IAYb6D2McSGxEbq4PBmYAHrhS8GQSud+0OWn6j3+/1Pcfzb2y3ZTt91/e9Qd80Rlzesbu8O5OQn6q3e6LeYyA0o6AlXs+5UIMupCrJEq8KmTi1Fa4xKNQlkGsdDuteq4EETbMENGGU8rhIoJYtsrJASOz/6xYmorRSQTKeS5yUp/DNJM+/VfVQPjHVDkJndA2qp3DhMrKrdN5Ou3mcdgXfLWKqD5sqrswp2TM5/fQ6M3pYDgNzyIsIp+J+2PKHEBcA0Dv80HlpDvHiFT2KXl2w6s5QqtKp2rvEtWWtWK2KsqG+VsxcwSMH2T6aACmU7G0f+C9g6ACBPnTjHFifRT7YT/kVcsEmEktI1fgZ5fIDz40JCP3ciNTx2Xz0LXMSUtVNwkZesvUS9SrRjN99uJCQaD9lvld/a57Hr+26gHUUR+Wp3hiSsrle6ftl+8ZsEK5gqRJEnh+DXwK4FPzUeCjygYtU0zQtJLz9xdBK1zYxIbxgMtKKogzH6lvylNsMwlen32BKhX+5sjfizSv75/B2onQwxebBl/63s0XLcSGgdglacmmbG/X6VMHZ/EjtXwheFvxm4z3BP82k85v5d8tRTc/PQ+df</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj1WwHe5RQeJSdlLotFNou+3LyjgH8EziQOzQtL9+7dBQoLTbWQkJ+eT4O9+5+LPPJI1C1+tICYnisbD8fsv+Z0rZtFJzXQem9alTadaJM62Xqw6uE6iVq5hUyk3b8qVMwRdSUaFatotJ2SFY/yYEe9WK55JS2cWPtnUHidTQ2qWEbSuLQiG9PGzLThPhxVRy6QkagfQU88ady5GnPT1acLLbZxuWecCkvVBq6SHESgEwCENWYnGEztCez1kgvTGfC6rSBF5jBrJlv+59enoqPZVLcTJHLsYY4SbSPoHk8xO7/a3YDIEvZvFm3aMiFpzRkL9QQ+oS1CIOrE44jxOuFtEH0AQRbKAdyJjDSEWc2OgtQM7ui0h7JBNJHbmgpAC7gRkkIBhYtzd+yz75Wgc3eycJFXIWJ5E8WP8ZJRBrCOMlBI4sMivYfR3xSLnaZ8A8X7AwlXwNP8yYLCkDaV0nMOPZiEs9fIG08vZbmSwmDNiftOQM7fLUtNGRyvT5HKT6P/3a7dUG5Y6GKbT9m6Gr0Pe7cmU8no2G5OUWzkeLrHb787aVU9h13pDatvp1fTio27l63fTcuBmSZIDJxeS7L+aP6jEgvVu8yIbi4a/xsFa96PqTl0zcL66q3fC0Nw1RtHKrg6r7axR2pr/HvH+xKndQcDu6/HZxP3drrni8GlSDbPTQU3jIyPfVA1s+/rxKTsNV/9y9G5bTVTY5De7nl9di8TCt/GqoDsLXVws8CbMZPnWTF7iYf3uZrLovavIcDZbTZm9EVipuveW0m8O+sZCDcTr9BUwVSzMaft8a6H5R9bm0GAsPnFnu6i2NPkkFQtlts8vIipdq8eGBp5u5WZ83aqTvEtxtDJo93CHnuILJAHdwvdnElf6g0J8NiwOKvVjMuIllFHYzP58TZJEnQQSQOOs4ZQuQ9ieIfaqo5YsbfTBiIWESawXXrGpdXK5UB/VGv1Z3Sb9b6TbPy+7gvNcdNBu29SNWV+Iq6cwUJPvqXd5T7xtgfMnBSLyZc6kHXSpdkhVdpyokpTUtCUj1JZAYHfbcSqOKJI+WIRjCKIqDNITScrHMC4Tk5t91KJO5lUu2jBNFw/wUfpjk4beiHton4MZBmoy6oHsKRy4jUqTzcdq13bQL+E4acHPYdHFVwtmGyf6nt5kxw7IdmG1eTJKC+3bLH0IcAUCf8EOHpdnGC9Z8J3pxweo7Q6tKu2jvipZWpXS9TvOG1o1iJhoeEYTraAws1bL3PIl/g0BbCPSlG2fL+iDy1r7PL1ULMVZUQaTHz8qXX3hujEGa54avj0/21bfMXkhdNwWZOmbrhfpVYhh/+nBhHjN+2nyt/57iJHhr1xGsnTg6T/3GUFzMzcrcL88fzAaLNSzXghgnu+DHAI4F3zdui7zlovQ0TVMFH3+xjNK1bMpYnArl9+3csKu+OU/1vATvzekdTK7wr1d2Jj+8sv++HI21DkbU3vry/3Z2eD4uDPQuyXMuLTvTr08dXMx31P6V4HHBr1U/E/z9TNrvzO8tOzU9PA/tfwE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065417</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065419</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065420</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210B878C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B8C0C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B8FAC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_FUNC_YOUTH_SAU_Get_ADULT_SAU_200_OK_P1" searchProperties="true" id="c247bcbd-c102-4114-82a4-84dc37720ef2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210B9C5C0A1E0401F0A079904DF:89B33908"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210B936C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210B936C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210B936C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210B948C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210B990C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210B9CAC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210B948C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210B990C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210B9CAC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTHx3ohXsHmCkU3HWDF0DE/XImpguIlqQ0KaC//iTFIiB69Mw4g1ld+da3LvmSOkeL0HZcziEWhFHN9xr6P7ZpAQS1Ug6XzFKuODUrudqj+g9bZatm2hauYV3zOU/Ap1wgKhq63FPIWab8G1mmUyo6diFftqp/dW0MMZfQ0iVv6tpmEVLupGEbehJThyFOuEPRArgjsDN0+z1Hejoo46Q361uWacC4ORcicgwD5wPAEIY4j9nCqBsHPvWAO0Myo0gkMbzFDHhDf9u7Xq/z60KexTPDNk3TMGuG9Ak4mZ3pzV/ZZgh8OmXbdRtRRglGIXlFilQfxJwFmhvOWEzEfPEJtGVYpoLOwQbnsFWkZ7rxHiBl902kA5IxRzk+R1YGNoApxEAxaHcDv6Gffa+D272jGFE+ZfGCH61/RgnoCkIWQZDjWWYZu+8jnihXsw7Y8SkOE05WcKXGJEIYuHYTw5RseoTL4Qu4lrZf2/BswgD/pCV1Y5+npG2cqIxHZsDF/+nXfq+2KGMUJtDs3kxaeNPxJ+GfXveihMbxJb9F4m+3U2ykFPadt6R2rX5bHw/qbq7eNnX8Z1odjc+LD2JZCq/iUUhrv9fo/LU0mj14V564Hfavu+3Z5rx7/hrfyvjL1xdU6UfVaqffK3cTPASz9XsMk0fvF7r0o3L5/g53RgGfTk27vISLyyv35vwV3/2Zj9zS43J5f3c+YMt5q/103XnuQMGcscETe+h5FzeL+2nrYj6jxuR28itZv9qFgVecvqDWuD+xypHbeM9pP4dDYyYHw+TxCbDIlmo0fE/ryn4h8bW0KAsJctPU1YmUPnEBVOhNtUvJipNI8SGBI5u5XXeqZcuzLbNVK1bbpmt1zKJpdU3XrNRqZtHrZvqzZXFEsc3olKhYSmG38/M1QbxwONAA4tyKJXgOXP8C0UMCaT4dyIPBKIcRkwruWm675VluodJqtbxCp1op2bbbtgt2pVurmjVdu2Liml7H7lRAfKjehQP1HgAmEQEl8WrOuRx0LmRJlmiViNDKr1CeQiIvgVjpsGMXqyWDk0UUgiJsLFiQhJCP5lFaIINvf+0cwjy1Eo4jFgsUpqfw0ySPv2X1kD4BUQ5cZdQC2VM4cRlZWTqfp13eTzuDd5OAqMMmiytigrdMDj+9z4walt3A7PLC3Mq477b8EOIEgPEFP+O4NLt4wYrsRc8uWHlnSFVpZu1dovwyn6xWSdrQilLMWMIblmFWjCHgRMrey4g9AzV2EMa3bpwd66PIO/shv0TM6VAgAQs5flq6/MZzYwhcPTd8eXw2333LHISUdROwEads7VC+ShTjLx8u2MHKT5pv5M+axcF7u05g7cWReco3hiB0plbqfnn5ZDYwk7BECiKL98FPAZwKfmjcFXnHRchpekwEfP5FU0rX0BHGLKHC9/TUsK++KU/xEoHz7vQBJlX4tyt7wz+9sif93lDq4ALpO1/y3845ko4LBrmLk5RLQ9/I16cMTmd7av9G8LTgF8pfCf5hJs0P5o+WvZoen4fmvw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTHx3ohXsHmCkU3HWDF0DE/XImpguIlqQ0KaC//iTFIiB69Mw4g1ld+da3LvmSOkeL0HZcziEWhFHN9xr6P7ZpAQS1Ug6XzFKuODUrudqj+g9bZatm2hauYV3zOU/Ap1wgKhq63FPIWab8G1mmUyo6diFftqp/dW0MMZfQ0iVv6tpmEVLupGEbehJThyFOuEPRArgjsDN0+z1Hejoo46Q361uWacC4ORcicgwD5wPAEIY4j9nCqBsHPvWAO0Myo0gkMbzFDHhDf9u7Xq/z60KexTPDNk3TMGuG9Ak4mZ3pzV/ZZgh8OmXbdRtRRglGIXlFilQfxJwFmhvOWEzEfPEJtGVYpoLOwQbnsFWkZ7rxHiBl902kA5IxRzk+R1YGNoApxEAxaHcDv6Gffa+D272jGFE+ZfGCH61/RgnoCkIWQZDjWWYZu+8jnihXsw7Y8SkOE05WcKXGJEIYuHYTw5RseoTL4Qu4lrZf2/BswgD/pCV1Y5+npG2cqIxHZsDF/+nXfq+2KGMUJtDs3kxaeNPxJ+GfXveihMbxJb9F4m+3U2ykFPadt6R2rX5bHw/qbq7eNnX8Z1odjc+LD2JZCq/iUUhrv9fo/LU0mj14V564Hfavu+3Z5rx7/hrfyvjL1xdU6UfVaqffK3cTPASz9XsMk0fvF7r0o3L5/g53RgGfTk27vISLyyv35vwV3/2Zj9zS43J5f3c+YMt5q/103XnuQMGcscETe+h5FzeL+2nrYj6jxuR28itZv9qFgVecvqDWuD+xypHbeM9pP4dDYyYHw+TxCbDIlmo0fE/ryn4h8bW0KAsJctPU1YmUPnEBVOhNtUvJipNI8SGBI5u5XXeqZcuzLbNVK1bbpmt1zKJpdU3XrNRqZtHrZvqzZXFEsc3olKhYSmG38/M1QbxwONAA4tyKJXgOXP8C0UMCaT4dyIPBKIcRkwruWm675VluodJqtbxCp1op2bbbtgt2pVurmjVdu2Liml7H7lRAfKjehQP1HgAmEQEl8WrOuRx0LmRJlmiViNDKr1CeQiIvgVjpsGMXqyWDk0UUgiJsLFiQhJCP5lFaIINvf+0cwjy1Eo4jFgsUpqfw0ySPv2X1kD4BUQ5cZdQC2VM4cRlZWTqfp13eTzuDd5OAqMMmiytigrdMDj+9z4walt3A7PLC3Mq477b8EOIEgPEFP+O4NLt4wYrsRc8uWHlnSFVpZu1dovwyn6xWSdrQilLMWMIblmFWjCHgRMrey4g9AzV2EMa3bpwd66PIO/shv0TM6VAgAQs5flq6/MZzYwhcPTd8eXw2333LHISUdROwEads7VC+ShTjLx8u2MHKT5pv5M+axcF7u05g7cWReco3hiB0plbqfnn5ZDYwk7BECiKL98FPAZwKfmjcFXnHRchpekwEfP5FU0rX0BHGLKHC9/TUsK++KU/xEoHz7vQBJlX4tyt7wz+9sif93lDq4ALpO1/y3845ko4LBrmLk5RLQ9/I16cMTmd7av9G8LTgF8pfCf5hJs0P5o+WvZoen4fmvw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH++UNLUC7QgzSOHQc1Q8VL3qy52QhhItSWnSUv31Ny0WAdGrd4YZJrs7a6/9kZWcCrSILbcnBEkl5UzzvY7+DzRbTtO0oNEiTtuwUQsbbdNxjGmzGbbsNp7h0NE1X4iM+ExIxGRHt0x4bEBT/a6h6Z7YrnXSMJvwQdduSSoUtHJpmLpWLGIm3CpsR89S5nIkqHAZWhDhSuwGvYtzV3m6qOakd0/XLKuAaXcuZeICgBshwSSOcQPzBTgFOz6noXADGjEks5S8xgxFR3/du1qtGqvjBk8jYJmmCUwHKJ9Q0OhI7/6oN5PQZzO+XvcR44xiFNMXVJK6IHLOQ60XRzylcr74ABoCaJbQBimwgaHNjnTwFqBi90WkHZKpQIaYI1iDTciMpIRhot1M/I5+9LUOrvdep4iJGU8XYm/9PUqE5STmCQkNUWdWs/s64oFydU8Jdn2G40zQnFyWY5IgTIR2lZIZLc6pUMMXCq1qv1aIesII/k5LTsE2T0UbHKiMRyMi5P/p13av1ii3KM5IV9xcXj6H/t3TdHg1sJP4poDzh5sZGsObTkVh23lNatPq1/X+oG7m6nXTS9DCwTi4ML3HHJ5M+OM0zqMVnbAgYKNfAX8GPzNwbv1tOfaioMvb0UMvGEfwti2X3D5fXUbjHumP79Hobjr78eA84vsRTfLWZN4bLke/Rv6lP25n/btg8PKAzOJiaQk4v28Ob8GDDSK4fHLGL3HRTAaIe+GUPaW/oz9/RS8/h+AHH4+PUV6Mznr2H+siLUg+6LzltJ3DrrGWgyCbPhIs62U5Gr6nDVW/kPxcWkoLDY1Z5eompT4JSZjUu+WuUlbcTIkPDV3VzPV60G5Cz4LmmeOYfbMHB6ZtwqHZU+fMMW1vWOvPmsUexT5nM1rGKhV2PT+fE8QLVxAWktTIeYbnROifIHpIIs1nE3UwOBPkmisFH3r94zZsO33vzGu1zH5/cDZQ1G27NWifeGeWrl1yOWbjtDeTJN1V7+Md9Z4QTBNKSokv51yoQRdSlWSJ8kzGsJGjBiOZugTSUoddy26fAEEXSUxKwmDBwywmjWSeVAUCYv1vGQiLykoFTngqUVydwg+T3P9W10P5hLR0EGVGZ0T1lBy4jGCdzsdpN7fTruF7WUjLw6aKK1OK10x2P73NTDksm4HZ5IUFrLlvtnwT4gAA+IQf2C/NJl6Y063o9QWr7gylKt26vUvUWDayPM+qhrZKxUwVPIDAbIGA4EzJ3vM1fyIMbCDAl26cDeu9yBv7Lr9MzlkgkSQLNX5atfzCcyMgonxu+Or4FF99y+yEVHWTpJCHbP1YvUpKxp8+XLCLSz9lvlJ/K56Gb+06gLUVR+Wp3hiSsqhclffL8wezgbmCpUoQeboNfgjgUPBd46bIGy5STdM0k+TjL1qpdB0dYcwzJn1Prwzb6lvxlM8Jcd+c3sFUCv96ZRfiwyv77uI8UDq4QPrGl/63s0GrccFE7RK04tLRC/X6VMFZtKX2rwQPC/5x8zPB382k+8783rJV0/3z0P0X</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqM6TlVugIM5WKVvEGuHWflzMhXUA2bVKaFNFfv5NiERA9emYcmayufOtbl3zJicBxVHE9ISCVlDMj8Nvmv5YNraozJqXaGOrqX9gqtZrVVgmTmj22rNABEppGIEQGARMSM9k2K5ZdLdmW+hvZlluvuZVGuVZv/GMavyAVClq5lC3TWMURE24etm1mKXM5FlS4DMcgXEncoXfdd5WniwtOZudkzTIPmHZmUiYuQqQcAoEoImXCY3SCdnxOQuEO6ZRhmaXwFjMUbfNt7/Pzc/m5WubpFFUsy0JWCymfUNDpsdk5KjZDGLAJX6+7mHFGCY7oK9akrkHOeGh40ZSnVM7iT6BtZFsaugQrUiJ2jR2b6D1Azu6bSDskU4FLYobtAmwAE0iBETAeBkHbPP5eB9d7RylmYsLTWOytf0YJ2BIinkBYEkVmBbvvIx4oV+cEiBswEmWCLuFGj0mCCQjjLoUJXfWpUMMXCiNvv7ESxYQB+UlLTtA2T0UbHaiMT6cg5P/p13av1ii/cJRB52rQFWT0JzqzGs5o0XpKcHbV73PnJgzaOYVt5zWpTavf1vuDupmrt00P88emnfRu5tVHmPJJEj7cs8tzWZl7Me6N+V3jdTJ6WiB66s3uItp6CeHBumgEdz6KJs9XwxY59/2Le1ZL48nZUXUZTucVoNd2vTmr1sOrUXZeGfUmF78vfvOneXTnOIOLgRcsH05v+6Pp0zWNncRbXjUux3M/y87Z4+uKz6/ZGbqJjnrjEb6xLu+b/mLuLdC99eC133PazmHXWMjBMBv/ASKLpR6NwDd6ql9Yfi0t2kLD0iR3dROtT0ICk2ZH79Ky4mZKfGjoqmau12fNhu1XbOu01fW6lmefWTXL7lme5bRaVs3vFfqzZrFHscvZhOpYWmHX8/M1QRK7AlgIaWnJMzIDYX6B6GOJjYAN1MHgTMCIKwXvNls93z89q9crfr3q1D3ba5z6Tq3qV5ya43VN44bLW3abehMJ6a56V3fUewCEJhS0xOs5F2rQhVQlWeBlJiO7vMRlBpm6BFKtw26l1qwjQeMkAk0YxTzMIignsyQvEBLr34pSIpFbqSAJTyWO8lP4aZL734p6KJ+QagehMzoF1VM4cBnZRTqfp93YTruA97KQ6sOmiitTStZMdj+9z4wels3AbPIiwi64b7b8EOIAAPqCH9ovzSZeuKRb0YsLVt0ZSlU6RXsXuLwoZ8tlljfU0YqZKnhkI8tBQyCZkr2XEZ8DQxsI9K0bZ8N6L/LGvssvkzM2lFhCrMbPyJffeG4MQejnRqCOz+q7b5mdkKpuElbykK0bqVeJZvzlw4W4RPsp8536eebpe+KHsLbiqDzVG0NSNtUrfb+8fDIbhCtYqgSRp9vghwAOBd81boq84SLVNI0zCZ9/MbTStU1MCM+YDHwzN2yrb85TviTgvjt9gMkV/u3KXolPr+yn6/5Q6WCMzY0v/W/nEs3HhYDaJWjOpW2u1OtTBWfTLbV/I3hY8KuNrwR/N5POB/NHy1ZN989D5y8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065422</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065424</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065425</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210B949C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210B991C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210B9CBC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_FUNC_YOUTH_SAU_Get_ADULT_FAU_200_OK_P1" searchProperties="true" id="5086181c-e502-4e7b-ba84-007566e9f8b1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType","Other");
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E861D210BA96C0A1E0401F0A079904DF:9BE76F88"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E861D210BA07C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E861D210BA07C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E861D210BA07C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E861D210BA19C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E861D210BA61C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E861D210BA9BC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E861D210BA19C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E861D210BA61C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E861D210BA9BC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo4FH0/XxGlj1WIE8ItKkgQyihTeuHS9px5GRnHgA/BDrYDKV9/7NBQoLTTjoSEvLO99toXL/tKwGXs+m0hMJeEUSPsNs1/J96kAR1Uscpe1bU8rw6sCao0rGji4BqElXodANMIhUhxSIWEVDZNFzhlywHqN3aAX/F8t16qerV/TOMJc6GglUtJ7cqWMRV+HrZpppz6DAoifAqXWPgS+aP2bd9Xnj4sOJmtqx3LPCBvzaVMfNtGpQgjHMeohNjSvrKPfK4i4Y/IjEKZcvwaMxJN83XvZrMpbcolxme2CwCwQcNWPpEgswuz9aPYjKOQTtluHUDKKEEwJluoSd1iOWeR0Y5njBM5X34A7dgO0NAWzpCFHI9emPZbgJzdF5GOSHIBLTGHTgE2xFPMMUXYeByGTfPiax3c7R1zSMWU8aU4WX+PEqZrHLMER5YoMivYfR3xTLlaVxj5IUVxKsga3+kxSSDCwnjgeEqyPhFq+CJh5O03MlFMGEbfacmVfchT0bbPVKZLZljI/9Ovw17tUJ5gnOJWlAV9dlepTVbP/Sx2X8Yvg8tfbLaspayZUzh03pHat/p1fTqo+7l63bQJxsNtPAq4V31seM/8EcwrvYGbJCPxyIfPW0F6eOLdPFRH42dnUHdvnsLV87z8tLhJ++sIrfs/h+HAHWwXq2Dyg2/G23F6P8xmt8FsJXB4zdfwBWTUC/6WvSq7v6zGf8WIJVsQkl/J4K58u3Z6w77wRuUOGNFemTO26N5dBmT6oxcvFvBSlDn93c9uVuMGQc23nA5zODYWcjBKJ78xksVSj0bYNXqqX1B+Li3aQiJrmrv6idYnITGVZkvv0rLip0p8SOSrZu7W1/Wq03Ud0Gk7jQC0nWvgAacH2qDWaACv2yv0Z8fihGLA6JToWFphd/PzOUG09AWmEebWmqVojoX5CWIXSmiEdKgOBqMCj5lS8E7dq1Ua5dq106lXu0HQBVWnUwFut1otV1yvbBp3TN7Te96eSsyP1bt8pN5DjEhCsJZ4PedCDbqQqiQruE5l7JTWsERxqi4BrnXYd716xRZkmcRYE7aXLEpjXErmSV4gW+z+XQsikVuJQAnjEsb5KfwwydNvRT2UT0S0g9AZdbDqKT5zGTlFOh+nXT1Mu4BvpxHRh00VV3KCdkyOP73NjB6W/cDs80LCKbjvt3wT4gyA/Qk/+7Q0+3jRmhxELy5YdWcoVWkV7V3B0qqUrtdp3tCaVkyu4G3HBjV7hFGqZO9lzBaY2nsI+0s3zp71SeS9/ZhfKud0JKHESzV+Rr78wnNjhIV+boTq+GRffcschVR1kziT52xBrF4lmvGnDxfkI+2nzA/qb8N49NauM1gHcVSe6o0hCZ3plb5fXj6YDcQULFGCyPgh+DmAc8GPjfsi77lINU2TVOKPvxha6ZomRIilVIZdMzccqm/OU74k2H9zegeTK/zrlZ2JD6/sn7f9kdLBJTT3vuS/nS2SjwvCapcgOZemmanXpwpOZwdq/0rwvOCD2meCf5xJ6535veWgpqfnofUH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo4FH0/XxGlj1WIE8ItKkgQyihTeuHS9px5GRnHgA/BDrYDKV9/7NBQoLTTjoSEvLO99toXL/tKwGXs+m0hMJeEUSPsNs1/J96kAR1Uscpe1bU8rw6sCao0rGji4BqElXodANMIhUhxSIWEVDZNFzhlywHqN3aAX/F8t16qerV/TOMJc6GglUtJ7cqWMRV+HrZpppz6DAoifAqXWPgS+aP2bd9Xnj4sOJmtqx3LPCBvzaVMfNtGpQgjHMeohNjSvrKPfK4i4Y/IjEKZcvwaMxJN83XvZrMpbcolxme2CwCwQcNWPpEgswuz9aPYjKOQTtluHUDKKEEwJluoSd1iOWeR0Y5njBM5X34A7dgO0NAWzpCFHI9emPZbgJzdF5GOSHIBLTGHTgE2xFPMMUXYeByGTfPiax3c7R1zSMWU8aU4WX+PEqZrHLMER5YoMivYfR3xTLlaVxj5IUVxKsga3+kxSSDCwnjgeEqyPhFq+CJh5O03MlFMGEbfacmVfchT0bbPVKZLZljI/9Ovw17tUJ5gnOJWlAV9dlepTVbP/Sx2X8Yvg8tfbLaspayZUzh03pHat/p1fTqo+7l63bQJxsNtPAq4V31seM/8EcwrvYGbJCPxyIfPW0F6eOLdPFRH42dnUHdvnsLV87z8tLhJ++sIrfs/h+HAHWwXq2Dyg2/G23F6P8xmt8FsJXB4zdfwBWTUC/6WvSq7v6zGf8WIJVsQkl/J4K58u3Z6w77wRuUOGNFemTO26N5dBmT6oxcvFvBSlDn93c9uVuMGQc23nA5zODYWcjBKJ78xksVSj0bYNXqqX1B+Li3aQiJrmrv6idYnITGVZkvv0rLip0p8SOSrZu7W1/Wq03Ud0Gk7jQC0nWvgAacH2qDWaACv2yv0Z8fihGLA6JToWFphd/PzOUG09AWmEebWmqVojoX5CWIXSmiEdKgOBqMCj5lS8E7dq1Ua5dq106lXu0HQBVWnUwFut1otV1yvbBp3TN7Te96eSsyP1bt8pN5DjEhCsJZ4PedCDbqQqiQruE5l7JTWsERxqi4BrnXYd716xRZkmcRYE7aXLEpjXErmSV4gW+z+XQsikVuJQAnjEsb5KfwwydNvRT2UT0S0g9AZdbDqKT5zGTlFOh+nXT1Mu4BvpxHRh00VV3KCdkyOP73NjB6W/cDs80LCKbjvt3wT4gyA/Qk/+7Q0+3jRmhxELy5YdWcoVWkV7V3B0qqUrtdp3tCaVkyu4G3HBjV7hFGqZO9lzBaY2nsI+0s3zp71SeS9/ZhfKud0JKHESzV+Rr78wnNjhIV+boTq+GRffcschVR1kziT52xBrF4lmvGnDxfkI+2nzA/qb8N49NauM1gHcVSe6o0hCZ3plb5fXj6YDcQULFGCyPgh+DmAc8GPjfsi77lINU2TVOKPvxha6ZomRIilVIZdMzccqm/OU74k2H9zegeTK/zrlZ2JD6/sn7f9kdLBJTT3vuS/nS2SjwvCapcgOZemmanXpwpOZwdq/0rwvOCD2meCf5xJ6535veWgpqfnofUH</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbUts6FH3vV3jMYyex5FztIZnJjeJyKSVAKS9nVHknUWtLjiSb0K8/koNDkgYOPTPMBG1vrb32RUs6ViRN/HCgFEjNBHeicc/9h/oUd2jQrUEH4VoT4kat24z9GsE0hpn5hHHXdSKlcoi40oTrnusj3KhhZP5uMApbzbCB6jhoPLjOHUhloI1LHbnOKk24CsuwPTeXPBREMRVykoIKNQ2ng4vz0HiGpOLk9o/XLMuAsr/QOgs9j9ZjoJAktE5F6h17Oz7HsQqnbM6JziU8x4xVz33e+/j4WH9s1IWcez5CyEOBZ3xixeZHbv9DtRniiM/Eej0iXHBGScJ+E0vqAvRCxM4gmQvJ9CJ9BRp7GFnoGqxojeImP3K9lwAlu3ci7ZCUitTUguAK7BpmIIFTcG6vo5579L4OrvfeSMLVTMhU7a3/jhLwAhKRQVxTVWYVu/cjHihX/xhoGHGa5IoVcGnHJCMUlHMlYcZW50yZ4YuVU7bfWalqwoD+TUuOvW2ehrZ3oDJjNgel/0+/tnu1RrkjSQ795qcfzWj2mQyn6Kv6zNRp/PEaPTwO1ceoV1LYdl6T2rT6eb0/qJu5et5UnOLON5Ivsttxy+/4Z9OCjlXw/dvPaazlNwiih9GvIQ7O8osFFi1x1T6T54vWL6Ay96YFv4/omf/1Qcf+Za4/XN0U0hd6cDFP8Vfkk/bdyVKfdW6frk4nc51kvEXw5ez8frW8zdLTYsq6s2Hi6daoc0fmbX5/31LLJZoHAZngD5g3yJ3XJYPFp/RUfk9IPum95LSdw66xkoNp/uMnUF0t7WhEY+fE9Ivot6XFWlhcm5WuYWb1SWng2u3bXVZWwtyID4tD08z1etJt47GP0XDQxiM0wBPURPgEDVAnCFBzfFLpz5rFHsWR4DNmY1mFXc/P2wRpGirgMchaIXK6AOW+gTgmmjgRvzYHQ3AFN8IoOMbNdgOPB0Fr2JlMWuOB+b/jjwJ/Mjk5QUHTdS6F/sK/yMFMg9xV78aOel8DZRkDK/F2zpUZdKVNSZakyHWC6wWpc8jNJSCtDod+s9vyFEuzBCxhLxVxnkA9W2RlgTy1/jVKRFVpZYpmQmqSlKfw1ST3v1X1MD4xsw7KZjQE01M4cBn5VTqvp93eTruCH+Qxs4fNFFdLRtdMdj+9zIwdls3AbPKiClfcN1v+EuIAgPcGP2+/NJt4ccG2olcXrLkzjKr0q/YuSX1Zz4siLxvasYopDbyHPdTxpkBzI3tPN+IXcG8D4b3rxtmw3ou8se/yy/WCTzXRkJrxc8rlO54bU1D2uRGZ47N671tmJ6Spm4aVPmQbJeZVYhm/+XChIbV+xnxlfh6FjF/adQBrK47J07wxNONzu7L3y9Mrs0GFgWVGEIXcBj8EcCj4rnFT5A0XbabpR67h9S+OVbqeSygVOdfR2C0N2+pb8tRPGYQvTn/AlAr/fGWv1KtX9v3F+dToYErcjS/7b+caK8eFgtmlWMml567M69ME5/MttX8meFjwUectwd/NpP+H+U/LVk33z0P/Xw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4jSx1WIE0KACJACKavMQKeFdvrxsnIdA54mNo2dkPLr1w4NBUq7dCUk5Jvrc8/98LE7HCax7fmc41QQRrUw6Or/NF0LYKfuGI4d2YbTnNUN6Dy5Bmg1wZMD7Rly2roWcp7hkHIBqejqNrDqhgXk78YCXsPx6lbNrTuPuvYbp1xCS5ca0LUiiSn3yrBdPUupxyAn3KMwwdwTyJv645EnPT1YcdJ7nQ3LMmDaWwix9EwT1SKMcByjGmKJ2TH3fDoR96ZkTqHIUvwWM+Jd/W3varWqreo1ls5NGwBggrYpfSJO5ud676zajKOQzthmPYCUUYJgTNZQkRpjsWCR5sdzlhKxSD6BtkwLKGgDF8hAlkPPdfM9QMnuRKQ9kimHBl9AqwKb4BlOMUVYu52EXf38tA5u9t6kkPIZSxN+sP4eJUxzHLMljgxeZVaxOx3xSLl6HYy8kKI44yTHl2pMlhBhrl2leEaKEeFy+CKule3XCl5NGEbfaUnH3OUpaZtHKhOQOebi//Rrt1cblN8wznDP7UcPi/XfPmq95Nc37dktT4r0PlnPG2G3pLDrvCG1bfXb+nBQt3P1tildjBqr0e0weLxnLrkYrn0Sjtz2bYuN/mTBD/cvPvLr48e+vR4A6zpvXzlDt91C88ZiEBVP41FrSaNWnufDH/frszv/nk1XT+1x+5re3Y7Xg/HzA+27r9O4z+jzOuwDF7SKwRxFNn2tT2e5lUQ/75oscaNnsQqGSNTjbDy0Kabu2WMwEyCdjCZ/rlbh5UPhoOvue067OewbKzmYZk9/MBLVUo1GGGhD2S8ovpYWZSGRMStdvaXSJy4wFXpP7VKy4mVSfEjkyWZu1hct1wpsC/T9dn8AfOsCOMAaAh80223gBMNKfzYsDigOGJ0RFUsp7GZ+viaIEo9jGuHUyFmGFpjrXyAGUEAtpBN5MBjl+IZJBXf9Zst1bGto2bYVDNrBRWMwqNdtu2n3/ZZj6dolE7/or9SfCZzuq3d9T70nGJElwUri1ZxzOehcyJK8wDwTsVXLYY3iTF4CqdJhz3ZaDZOTZBljRdhMWJTFuLZcLMsCmXzzbxsQ8dJKOFqyVMC4PIWfJnn4raqH9ImIcuAqoz6WPcVHLiO7SufztN3dtCt4P4uIOmyyuCIlaMNk/9P7zKhh2Q7MNi/ErYr7dss3IY4AmF/wMw9Ls40X5WQnenXByjtDqkqvau8LrL3UsjzPyoY2lWKmEt60TNA0pxhlUvZeb9gzpuYWwjzpxtmyPoi8te/zy8SCTgUUOJHjp5XLE54bU8zVcyOUx6c49S2zF1LWTeBCHLMNYvkqUYy/fLggDyk/ab6SfyuWRu/tOoK1E0fmKd8YgtC5Wqn75fWT2UBMwhIpiCzdBT8GcCz4vnFb5C0XIafpKRP48y+aUrquDhFiGRVhoJeGXfUteYrXJfbenT7AlAr/dmUX/NMr+348mkodTKC+9SX/7WyQclwQlrs4Kbl09UK+PmVwOt9R+zeCxwUfNL8S/P1Meh/MHy07NT08D71/AQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20131010_065428</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131010_065429</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131010_065431</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E861D210BA1AC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E861D210BA62C0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E861D210BA9CC0A1E0401F0A079904DF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>30.User_Get_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>CS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="02.User_Get_CS_GeoProfile" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true" id="ca60c885-8e2c-4090-9b0c-044bb9724c52"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="fe1b0271-f16d-44a5-8847-14115dd0f2ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>CA34890BB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173E3B29775E0401F0A07995A24:E24CFF0A"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_081991388236749748</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>1A345FEAB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1A345FEAB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:1A345FEAB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>CA34890BB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>2D34ACCBB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:CA34890BB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:2D34ACCBB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUtpSXtiPMFKoXVvEFlN31y52YnkK0JJikgP76mxSLgOi6d4aZktOT5zznpU9yLNAsq4aREMAlYdToxy3zXw9VG14NsHXvA1i1WlC3fOQH6p8XeG7iNxtB3TT6QuTQp0IiKltm1XE9y61aVf/G9UI3CJ1mxfecO9MYAxcKWrlUHNNYzTIqwiJsy8w5DRkSRIQUzUCEEoejaHAeKs8QlZzM9vGaZRGQt6dSzkPbxpUEMGQZrmA2s4/tHZ/jRIQjMqFI5hxeYyaiZb7uXS6XlaVXYXxiVx3HsZ3AVj6JIJPvZvtbuRmSPk3Zet1FlFGCUUZekCY1ADlliRFlE8aJnM4+gHZt19HQFqywhd0a/W7abwEKdl9E2iHJBbLEFLkl2BBS4EAxGLfDfsv8/rUOrvfecERFyvhM7K3/jhLQBWRsDoklysxKdl9HPFCu9jHgsE9xlguygAs9JnOEQRhXHFKyOidCDV8ijKL9xkqoHymnDPDftOXY3uaqqNsHqhOTCQj5f3q23a81yhhlObRXxPbQoDM/7cw85lw8DO9gPAzS3q/RdaugsO28JrVp9+t6f1g3s/W6iQ7PGlcodZb+2SojvC5OBrfxjx6+un65jKLRdfKCkPg5r3Z7lykfHwkaHTVzuLLHOO3c/9P7PeEveBnXWXB98vDtngQ9Lm8WXZK6jds0enzK7ghrxBk/YeNahnz3heaPNw/+VVwd1eRqGhxlz3aXufy2G/1+OBoLTtPB+ZCn3uW33ln/99j5GXf6v3qP1+QuvnxsveW0ncOusZSEUX7/AFiWSz0e/dg4Vf1C8nN50RaSWGnhGs61RgkJVJptvUtLS5grASJJqJq5Xncjr+YHTqdTDzyv5jrdThBV1b+g5runQeSXGrRmsUexy2hKdCytsuv5+ZwgnoUCaALcWrAcT0GYnyDGSCKjT4fq42BUwA1TKt6IT0+DZtzw63Wn6zWjbjNwaq7biE+cpl/r+KZxweQlveRRKoHvKnhjR8GHgMmcgJZ5PedCDbqQqiRPaJHLzK0sUIVCrg4CrrU4rNb8ui3IbJ6BJmzPWJJnUJlP50WBbLF+Vi2ERWElAs8Zlyhzi8/wwyz335UFUT4J0Q5Cp9QB1VR4dyL5Yb3M5+O8g+28S/goT4j+2lR1JSd4zWT31dvQ6GnZTMwmMSzckvtmy19CHACwP+Fn75dmEy9ZkK3o5SmrDg4lK+2yv0+o8lTJF4u86GhTSyZX8LZSTtceAc6V7j3fsEeg9gbC/tKxs2G9F3lj3+WXyykdSSRhpubPKJZfuHOMQOg7R199P6uvXmh2Qqq6SVjJQ7Zupq4mmvGntxccYu2nzFfqsWQ8eWvXAaytOCpPddGQhE70Sh8wzx/MBmYKlihFZHwb/BDAoeC7xk2RN1ykmqb7XMLHbwwtdS0TYcxyKvuxWRi25bfgKZ/nEL45vYMpJP71zF6JD8/sX4PzkRLCGTI3vuTPzhYpxgWDqa8GBZeWuVJXUBWcTrbk/pXgtuK7SvHrpyfRnxR/N5P2O/N7y1ZN97+H9n8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUtpSXtiPMFKoXVvEFlN31y52YnkK0JJikgP76mxSLgOi6d4aZktOT5zznpU9yLNAsq4aREMAlYdToxy3zXw9VG14NsHXvA1i1WlC3fOQH6p8XeG7iNxtB3TT6QuTQp0IiKltm1XE9y61aVf/G9UI3CJ1mxfecO9MYAxcKWrlUHNNYzTIqwiJsy8w5DRkSRIQUzUCEEoejaHAeKs8QlZzM9vGaZRGQt6dSzkPbxpUEMGQZrmA2s4/tHZ/jRIQjMqFI5hxeYyaiZb7uXS6XlaVXYXxiVx3HsZ3AVj6JIJPvZvtbuRmSPk3Zet1FlFGCUUZekCY1ADlliRFlE8aJnM4+gHZt19HQFqywhd0a/W7abwEKdl9E2iHJBbLEFLkl2BBS4EAxGLfDfsv8/rUOrvfecERFyvhM7K3/jhLQBWRsDoklysxKdl9HPFCu9jHgsE9xlguygAs9JnOEQRhXHFKyOidCDV8ijKL9xkqoHymnDPDftOXY3uaqqNsHqhOTCQj5f3q23a81yhhlObRXxPbQoDM/7cw85lw8DO9gPAzS3q/RdaugsO28JrVp9+t6f1g3s/W6iQ7PGlcodZb+2SojvC5OBrfxjx6+un65jKLRdfKCkPg5r3Z7lykfHwkaHTVzuLLHOO3c/9P7PeEveBnXWXB98vDtngQ9Lm8WXZK6jds0enzK7ghrxBk/YeNahnz3heaPNw/+VVwd1eRqGhxlz3aXufy2G/1+OBoLTtPB+ZCn3uW33ln/99j5GXf6v3qP1+QuvnxsveW0ncOusZSEUX7/AFiWSz0e/dg4Vf1C8nN50RaSWGnhGs61RgkJVJptvUtLS5grASJJqJq5Xncjr+YHTqdTDzyv5jrdThBV1b+g5runQeSXGrRmsUexy2hKdCytsuv5+ZwgnoUCaALcWrAcT0GYnyDGSCKjT4fq42BUwA1TKt6IT0+DZtzw63Wn6zWjbjNwaq7biE+cpl/r+KZxweQlveRRKoHvKnhjR8GHgMmcgJZ5PedCDbqQqiRPaJHLzK0sUIVCrg4CrrU4rNb8ui3IbJ6BJmzPWJJnUJlP50WBbLF+Vi2ERWElAs8Zlyhzi8/wwyz335UFUT4J0Q5Cp9QB1VR4dyL5Yb3M5+O8g+28S/goT4j+2lR1JSd4zWT31dvQ6GnZTMwmMSzckvtmy19CHACwP+Fn75dmEy9ZkK3o5SmrDg4lK+2yv0+o8lTJF4u86GhTSyZX8LZSTtceAc6V7j3fsEeg9gbC/tKxs2G9F3lj3+WXyykdSSRhpubPKJZfuHOMQOg7R199P6uvXmh2Qqq6SVjJQ7Zupq4mmvGntxccYu2nzFfqsWQ8eWvXAaytOCpPddGQhE70Sh8wzx/MBmYKlihFZHwb/BDAoeC7xk2RN1ykmqb7XMLHbwwtdS0TYcxyKvuxWRi25bfgKZ/nEL45vYMpJP71zF6JD8/sX4PzkRLCGTI3vuTPzhYpxgWDqa8GBZeWuVJXUBWcTrbk/pXgtuK7SvHrpyfRnxR/N5P2O/N7y1ZN97+H9n8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHquQKxCighSgdDNDb8B0Z+dlZWwnuE2c1HZo2l+/dmgoUNrprFSJ+uT4O9+5+LNPOchSJwg5x0yQnGrRuK//i9yl1fXbluF1kWt4yI8Nv+MjYxl3fRT7MbRcX9cizkscUS4AFX3dsWzXsB3D8Re2G9i9wHZabdv9pWu3mHEJLV1alq5VWUp5UIft6yWjQQ444QEFGeaBgME8vJgG0jMADSd9cLphWQdkg5UQRWCasIUwxGkKWzDPzFNzz+cU8WBOEgpEyfBLTMT7+svex8fH1qPbylliOpZlmVbPlD6Ik+SrPvjSbMYoonG+WY8AzSmBICXPQJG6wGKVIy1Mk5wRscregbZN21LQBq6gAW2PftXN1wA1u08i7ZFkHBh8BewGbIZjzDCFWPsxi/r61891cLN3wQDlcc4yfrD+M0qYrnGaFxgZvMmsYfd5xCPlGpxiGEQUpiUna3ypxqQAEHPtmuGYVFPC5fAhrtXt1you/0gzZRj+SVtOzV2ukrp5pDpjkmAu/k/Pdvu1QbkFaYkH7W/318VleH+SrJOyk8IRM60VcNCkuunXFHadN6S27X5ZHw7rdrZeNiXTxWr+T2KGFxHgcbVcu7F7331YR+2sfW3CrLqJHlx42UXd9Xn5yx6G+FqkhXl3e3FZCn8KwNljOo84ms3J4ssVs6c/Fj7q5cyZ966KH9/S8xXKTqoZL8fj8RKSIb57Dqub+2XCbK+IO8ms7fydDe8cOqnOy7/K3sgLnybPV8j+8h2ddEI8NMEt/35zQjrsJ+y/5rSbw76xkYR5ubzDUDRLNR7RWJvIfgHxsbwoC0FGXLsGhdIoLjAV+kDtUtISlFKACApkMzdrZ+x64Wg0HLZ7ruvZ1mjYCx35X8/z7Ukv9BsN2rA4oDjKaUxULKWym/n5mCDMAo4pwsxY5yVcYa5/gDgGAmgRncnDkVOOF7lU8UmnY026znDodGw37LQtZ9j2nLbre+5ZZ+Q6unaZiyt6xcJYYLav4J09BZ9hSAqClcyrOedy0LmQJXkA61KkdmsNWhSX8iJgSosDx/PbJidZkWJF2MxyVKa4VayKukAm3/w6BoC8thIOi5wJkNr1MXw3y8NvTUGkDyLKgauUhlg2FR+5kawmnzd5e0dvrgY+LBFRp01WVzACN0z2P70OjZqW7cRsE4Pcbrhvt/whxBEA8wN+5mFptvHQmuxEb25ZeXFIWRk0/X0ArYdWuV6XdUe7SjKZhDelctrmHMNS6t7TIr/H1NxCmJ+6drasDyJv7fv8SrGicwEEzuT8afXyE2+OOebqzRHJ81N99kGzF1LWTeBKHLONUvk0UYw/fL3AACo/ab6WP485Q6/tOoK1E0fmKR8agtBErdQF8/TObMBcwhKpiDnbBT8GcCz4vnFb5C0XIadpWQr8/hdNSV1fBxDmJRXRWK8Nu/Jb8xRPBQ5end7A1BL/cmdX/N07++fFdC6FMAP61pf83tkg9bhArKunQc2lr1fyCSqD02RH7l8I7iq+Hbpee3IW/k7x9zMZvDG/tezU9PA8DP4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_081991388236749748</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_081991388236749748</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_081961388236746699</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_081991388236749748</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>DA34B90BB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>3D34CCCBB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe1b0271-f16d-44a5-8847-14115dd0f2ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true" id="7c869761-57d8-409b-b402-6dc5f0c48a9b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="43ec0f4c-b301-4507-90a3-521fff1fca1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>B0440EACB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B4052F61C7E0401F0A0799472F:92C38B92"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0819161388236756051</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>00446F9CB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00446F9CB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:00446F9CB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>B0440EACB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1344075DB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:B0440EACB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1344075DB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o4FP5+f0WnftwpaUsR2hFmePOKK8KKq65fdkJ6SuMtSWlSQH/9JsUiIHp1Z5zBnJ485zkveZIzgeeJG7SFgExSzoxBr2n+6znO9BRXI2taaziWF2Js+Xbdt+rYrru4holDItMYCJHDgAmJmWyaru1ULce13MatUw0cP3C8ildvPJrGHWRCQSuXim0a63nCRFCEbZp5xgKOBRUBw3MQgSTBpD28CpRngEtOZutsw7IImLViKdMAIVIJgUCSkArhc3SG9nzOQhFM6IxhmWfwGjMUTfN172q1qqyqFZ7NkGvbNrJ9pHxCQWcnZutHuRnCAYv4Zt3FjDNKcEJfsCY1BBnz0GgnM55RGc8/gHaQY2toC9bEIo7HTkz0FqBg90WkPZKZwJaIsVOC3UAEGTACxt83g6Z58rUObvbeZpiJiGdzcbD+HiVgS0h4CqElysxKdl9HPFKu1hmQYMBIkgu6hGs9JikmIIxxBhFdX1Ghhi8URtF+Yy3UHy2nDMh32nKGdrkq6uhIdXp0BkL+n57t9muDcoeTHFqPUZzlP5P0ZXzvnQoGi/OHP2g/5QCrZkFh13lDatvu1/XhsG5n63XTw2IcLUZD/CJ+JZCxC6ePbqcLjz0+XbLwujN6cC85rT2uJj2xXHRysab99v3dZZgPavX1+UM0Hj9V+9f93tD10I+H5+dbH6M/hzF0uj/r6WTRu2mPXrwr/957iXl0dTdjf/G6N7wIr05jd4r61+3Js6wPbXs1msYXI3QpVZ53j/BP/ON6OXpqnN5fTNGw1pBjZ1YdNN9y2s1h31hKwiSfPgGR5VKPx6BnnKt+Yfm5vGgLDa2ocA1SrVFCApNmS+/S0hLkSoBoGKhmbtYd2/PsfrvbqfnVqufY3Y7fdtV/vtdwzv12o9SgDYsDil3OIqpjaZXdzM/nBMk8EMBCyKwlz0kMwvwEsYclNgbsRh0OzgTccqXiXc/xu7VOt1ard3qNqt3uVv1qr9vz+/651+m6pnHN5YiNsnYkIdtX8NM9Bb8BQlMKWub1nAs16EKqkizwMpeJU1niCoNcXQSZ1uLA9Ro1JOg8TUATRnMe5glU0jgtCoTE5te1MBGFlQqS8kzixCmO4YdZHn4rC6J8QqodhE6pA6qpcORGsst8Ps7b3827hG/nIdWnTVVXZpRsmOx/ehsaPS3bidkmRoRTct9u+SbEEQD0CT90WJptvHBJd6KXt6y6OJSstMr+LnBlUcmXy7zoaF1LZqbgkVJOB02A5Er3nm/5L2BoC4G+dO1sWR9E3tr3+eUyZhOJJczV/BnF8gtvjgkI/eYYqPOz/uqDZi+kqpuEtTxm6ybqaaIZf/p6IQHRfso8Vj8rnoVv7TqCtRNH5akeGpKymV7pC+b5g9kgXMFSpYg82wU/BnAs+L5xW+QtF6mmaZpL+PiLoaWuaWJCeM7koGcWhl35LXjK5xSCN6d3MIXEv97Za/Hhnf0wvJooIZxjc+tLf+9s0WJcCJj6aVBwaZpr9QRVwdlsR+5fCe4qvq0U//Tc/63i72fSemd+b9mp6eF5aP0H</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o4FP5+f0WnftwpaUsR2hFmePOKK8KKq65fdkJ6SuMtSWlSQH/9JsUiIHp1Z5zBnJ485zkveZIzgeeJG7SFgExSzoxBr2n+6znO9BRXI2taaziWF2Js+Xbdt+rYrru4holDItMYCJHDgAmJmWyaru1ULce13MatUw0cP3C8ildvPJrGHWRCQSuXim0a63nCRFCEbZp5xgKOBRUBw3MQgSTBpD28CpRngEtOZutsw7IImLViKdMAIVIJgUCSkArhc3SG9nzOQhFM6IxhmWfwGjMUTfN172q1qqyqFZ7NkGvbNrJ9pHxCQWcnZutHuRnCAYv4Zt3FjDNKcEJfsCY1BBnz0GgnM55RGc8/gHaQY2toC9bEIo7HTkz0FqBg90WkPZKZwJaIsVOC3UAEGTACxt83g6Z58rUObvbeZpiJiGdzcbD+HiVgS0h4CqElysxKdl9HPFKu1hmQYMBIkgu6hGs9JikmIIxxBhFdX1Ghhi8URtF+Yy3UHy2nDMh32nKGdrkq6uhIdXp0BkL+n57t9muDcoeTHFqPUZzlP5P0ZXzvnQoGi/OHP2g/5QCrZkFh13lDatvu1/XhsG5n63XTw2IcLUZD/CJ+JZCxC6ePbqcLjz0+XbLwujN6cC85rT2uJj2xXHRysab99v3dZZgPavX1+UM0Hj9V+9f93tD10I+H5+dbH6M/hzF0uj/r6WTRu2mPXrwr/957iXl0dTdjf/G6N7wIr05jd4r61+3Js6wPbXs1msYXI3QpVZ53j/BP/ON6OXpqnN5fTNGw1pBjZ1YdNN9y2s1h31hKwiSfPgGR5VKPx6BnnKt+Yfm5vGgLDa2ocA1SrVFCApNmS+/S0hLkSoBoGKhmbtYd2/PsfrvbqfnVqufY3Y7fdtV/vtdwzv12o9SgDYsDil3OIqpjaZXdzM/nBMk8EMBCyKwlz0kMwvwEsYclNgbsRh0OzgTccqXiXc/xu7VOt1ard3qNqt3uVv1qr9vz+/651+m6pnHN5YiNsnYkIdtX8NM9Bb8BQlMKWub1nAs16EKqkizwMpeJU1niCoNcXQSZ1uLA9Ro1JOg8TUATRnMe5glU0jgtCoTE5te1MBGFlQqS8kzixCmO4YdZHn4rC6J8QqodhE6pA6qpcORGsst8Ps7b3827hG/nIdWnTVVXZpRsmOx/ehsaPS3bidkmRoRTct9u+SbEEQD0CT90WJptvHBJd6KXt6y6OJSstMr+LnBlUcmXy7zoaF1LZqbgkVJOB02A5Er3nm/5L2BoC4G+dO1sWR9E3tr3+eUyZhOJJczV/BnF8gtvjgkI/eYYqPOz/uqDZi+kqpuEtTxm6ybqaaIZf/p6IQHRfso8Vj8rnoVv7TqCtRNH5akeGpKymV7pC+b5g9kgXMFSpYg82wU/BnAs+L5xW+QtF6mmaZpL+PiLoaWuaWJCeM7koGcWhl35LXjK5xSCN6d3MIXEv97Za/Hhnf0wvJooIZxjc+tLf+9s0WJcCJj6aVBwaZpr9QRVwdlsR+5fCe4qvq0U//Tc/63i72fSemd+b9mp6eF5aP0H</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6oVTaEWa4zkbBrcD2uHk5E9IFxN0mtUm5+OtPUiwColvPjDOY1ZVvfeuSL7niKI6coME5pIIwqvXaNf1fr+oB9i3PuJwhZLjggjHFgA00m9rVqQVl7IS61uM8gx7lAlFR0x3LLhu2YzjVsV0ObD+wq6VLtzrRtQdIuYSWLiVL19ZxRHmQh63pWUoDhjjhAUUx8EDgYNQY9APpGaCCk16/2rLMA6b1hRBJYJq4FAKGKMIlzGLzyjzwuQp5MCJzikSWwmvMkNf0172r1aq0KpdYOjcdy7JMyzelT8jJ/FyvnxWbIezRGduuW4gySjCKyAtSpAYgFizUGtGcpUQs4g+gbdO2FLQBa2xg26XnuvkWIGf3RaQDkilHBl8guwAbwgxSoBi0X8NeTT//Wge3e8cponzG0pgfrb9HCegSIpZAaPAis4Ld1xFPlKt+BTjoURxlnCzhVo1JgjBw7S6FGVn3CZfDF3Itb7+25vKPFFMG+DttuTL3uUrq5onqtMkcuPg/Pdvv1xblAUUZ1N15pS+Bfnfj5kMlfM4isfCuzfHgH9uq5RT2nbekdu1+XR8P6262Xjfd3YY396sWx+540mxUF4PH2dPgZVjZXDw6Gy+65i2zSq9nvuPcj5+G83B1vXR+TMvuvM8fWxejJ2cV3q8Gw7ZzXbk8Cyc/Vp2+xcfca5LVTeZcsJdeetFz5pf+tRf9YZmYONV7d7m5n7S8wa/p89yaxGK5uUk6yL0r3/2usJvkSXRsb3TW6Hf8Pk/4Op1075dd9FLu1N5y2s/h0FhIwiibPgEWxVKNR6+tdWW/kPhcXpSFhMYsdw0SpVFcABV6Xe1S0hJkUoBIGMhmbtd22XWty0q7WfHLZde2Wk2/4cj/fLdqd/1GtdCgLYsjii1GZ0TFUiq7nZ/PCeI44EBDSI0ly/ACuP4JYhsJpPXoUB4ORjmMmVRxu+v65WbTkm11yx3L87yW1elUXctrNbq+6+vaLRM/6c+0MROQHiq4d6DgQ8AkIaBkXs05l4POhSzJM1pmIrJLS1SikMmLIFVaHDhutWJyEicRKMJmzMIsglKySPICmXz76xgI89xKOE5YKlBk58fwwyyPvxUFkT4hUQ5cpdQE2VQ4cSNZRT7v8nZP3lwFfCMLiTptsroiJXjL5PDT29CoadlNzC4xzO2C+27LNyFOAJif8DOPS7OLFy7JXvTilpUXh5SVetHfZ1R6LmXLZZZ39FJJZirhTamctjkCnEnd24zZH6DmDsL80rWzY30UeWc/5JeJBR0JJCCW86flyy+8OUbA1ZujJ8/P+qsPmoOQsm4C1uKUrRXJp4li/OnrBQdY+UnznfxZsfQt8VNYe3FknvKhIQidq5W6YDYfzAZmEpZIRWTpPvgpgFPBD427Iu+4CDlN00zAx180JXU1HWHMMip6bT037MtvzlNsEgjenN7B5BL/emev+Yd39uOgP5JCGCN950v+7myQfFww6OppkHOp6Wv5BJXB6XxP7l8J7iu+Zbmu1/Vbf1P8w0zq78zvLXs1PT4P9f8A</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0819161388236756051</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0819161388236756051</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0819131388236753463</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0819161388236756051</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>C0442EACB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>2344275DB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43ec0f4c-b301-4507-90a3-521fff1fca1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true" id="44e9d761-69ee-4512-b489-7619d13c7e46"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="f61f1377-9b57-4e12-9112-c4306b2aa6db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A644043EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE988A2E54ECBA0CE0401F0A05991749:459B334B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0819211388236761558</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>F544B22EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F544B22EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F544B22EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>A644043EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>0944EAAEB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:A644043EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:0944EAAEB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0Tp4yjkQoAQFaRA6JSZXhignMLLkXE24DY4aewEytcfOzQUKO20R6pEvbO99toXL/uCoWVouR5jkHASUaXrN9R/HccAx6k7Gq5U65o9mxpa3YGqZtWrpm2bhj2bVVSly1gKXco4oryhWoZZ1kxLs5yhWXbNumsZJeE9UZURJExAC5eSoSrrZUiZm4dtqGlC3QgxwlyKlsBcjt2Bd3PtCk8XFZzU5sWWZR4waS44j11dx6UAMIQhLuFoqV/oBz4XAXMHZE4RTxN4jRmwhvq6d7ValVblUpTMdcswDN2o68InYGR+rjbPis0QdOks2q7biEaUYBSSDZKkboAvokDxwnmUEL5YfgBt6qYhoTVYYw2bNj1X9bcAObsvIh2QTBjS2AKZBVgfZpAAxaDc97sN9fxrHdzuHSaIslmULNnR+nuUgGYQRjEEGisyK9h9HfFEuZoXgN0uxWHKSAa3ckxihIEpvQRmZH1NmBi+gCl5+5U1E3+kmDLA32nLhb7PVVDXT1THJ3Ng/P/0bL9fW5QRClNo9l+iLLiOJ49tbofezbg1mXf9YRpbEDVyCvvOW1K7dr+uj4d1N1uvm7Kg9zC9s65XU2PdW20M1Nn8WHqPm9FkdVWB348del9G49VPYtA/U68/zuwhwbw2jp0fG6/t+C1zuqHJdMrue60zdDXutQY37Q2EG6vz8+GPnzH2CHFtMp7feg+dUZ/RwDH6leteXH6+GpmGeV9pYfTrn8n975s0e05aT61pNuj4/svZWHcqfOLXRqNn+jRs99cju/GW034Oh8ZCEgbp9BEwL5ZyPLq+cin6hfjn8iItJNBmuasbS41iHChXm3KXlBY3FQJEAlc0c7v2qrZt2OVOq1Ivl8UharfqniX+q9uOeVn3nEKDtiyOKLYjOiMyllTZ7fx8ThAvXQY0gETLohQvgKmfIPqII6VL++JwRJTBMBIqLqjW/NrlpeNXqxW/U+2YdsevW7WO5Vy2q5WaqtxG/I7eJd6MQ3Ko4NUDBe8DJjEBKfNyzpkYdMZFSZ5RlvLQLGWoRCEVF0Eitdi1bKeiM7KMQ5CE9WUUpCGU4kWcF0hn219LQ5jlVsJwHCUchWZ+DD/M8vhbURDhExDpwGRKLRBNhRM3klnk83He9f28C3gvDYg8baK6PBEHI2dy+OltaOS07CZmlxhmZsF9t+WbECcA9E/46cel2cULMrIXvbhlxcUhZKVZ9PcZlZ5LaZaleUdrUjITAa8L5TT1AeBU6N7LMHoCqu8g9C9dOzvWR5F39kN+KV/QAUcclmL+lHz5hTfHAJh8c3TF+Vl/9UFzEFLUjcOan7K1Q/E0kYw/fb1gF0s/Ye6Jn1WUBG/tOoG1F0fkKR4anNC5XMkL5uWD2cCRgCVCEaNkH/wUwKngh8ZdkXdcuJimacrh4y+KlLqGijCOUsq7vpob9uU358lfYnDfnN7B5BL/emev2Yd39sPN9UAI4RKpO1/yd2eN5OOCQZVPg5xLQ12LJ6gITud7cv9KcF/xLyu23bKsvyr+YSbNd+b3lr2aHp+H5n8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0Tp4yjkQoAQFaRA6JSZXhignMLLkXE24DY4aewEytcfOzQUKO20R6pEvbO99toXL/uCoWVouR5jkHASUaXrN9R/HccAx6k7Gq5U65o9mxpa3YGqZtWrpm2bhj2bVVSly1gKXco4oryhWoZZ1kxLs5yhWXbNumsZJeE9UZURJExAC5eSoSrrZUiZm4dtqGlC3QgxwlyKlsBcjt2Bd3PtCk8XFZzU5sWWZR4waS44j11dx6UAMIQhLuFoqV/oBz4XAXMHZE4RTxN4jRmwhvq6d7ValVblUpTMdcswDN2o68InYGR+rjbPis0QdOks2q7biEaUYBSSDZKkboAvokDxwnmUEL5YfgBt6qYhoTVYYw2bNj1X9bcAObsvIh2QTBjS2AKZBVgfZpAAxaDc97sN9fxrHdzuHSaIslmULNnR+nuUgGYQRjEEGisyK9h9HfFEuZoXgN0uxWHKSAa3ckxihIEpvQRmZH1NmBi+gCl5+5U1E3+kmDLA32nLhb7PVVDXT1THJ3Ng/P/0bL9fW5QRClNo9l+iLLiOJ49tbofezbg1mXf9YRpbEDVyCvvOW1K7dr+uj4d1N1uvm7Kg9zC9s65XU2PdW20M1Nn8WHqPm9FkdVWB348del9G49VPYtA/U68/zuwhwbw2jp0fG6/t+C1zuqHJdMrue60zdDXutQY37Q2EG6vz8+GPnzH2CHFtMp7feg+dUZ/RwDH6leteXH6+GpmGeV9pYfTrn8n975s0e05aT61pNuj4/svZWHcqfOLXRqNn+jRs99cju/GW034Oh8ZCEgbp9BEwL5ZyPLq+cin6hfjn8iItJNBmuasbS41iHChXm3KXlBY3FQJEAlc0c7v2qrZt2OVOq1Ivl8UharfqniX+q9uOeVn3nEKDtiyOKLYjOiMyllTZ7fx8ThAvXQY0gETLohQvgKmfIPqII6VL++JwRJTBMBIqLqjW/NrlpeNXqxW/U+2YdsevW7WO5Vy2q5WaqtxG/I7eJd6MQ3Ko4NUDBe8DJjEBKfNyzpkYdMZFSZ5RlvLQLGWoRCEVF0Eitdi1bKeiM7KMQ5CE9WUUpCGU4kWcF0hn219LQ5jlVsJwHCUchWZ+DD/M8vhbURDhExDpwGRKLRBNhRM3klnk83He9f28C3gvDYg8baK6PBEHI2dy+OltaOS07CZmlxhmZsF9t+WbECcA9E/46cel2cULMrIXvbhlxcUhZKVZ9PcZlZ5LaZaleUdrUjITAa8L5TT1AeBU6N7LMHoCqu8g9C9dOzvWR5F39kN+KV/QAUcclmL+lHz5hTfHAJh8c3TF+Vl/9UFzEFLUjcOan7K1Q/E0kYw/fb1gF0s/Ye6Jn1WUBG/tOoG1F0fkKR4anNC5XMkL5uWD2cCRgCVCEaNkH/wUwKngh8ZdkXdcuJimacrh4y+KlLqGijCOUsq7vpob9uU358lfYnDfnN7B5BL/emev2Yd39sPN9UAI4RKpO1/yd2eN5OOCQZVPg5xLQ12LJ6gITud7cv9KcF/xLyu23bKsvyr+YSbNd+b3lr2aHp+H5n8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3Tq45nSC+XWAWbKRe3nBQXEy8uZkG4g2ibYpID++pMUi4Dop2fGGczuztprX7KSOkdx5Hg+55AIwqgWdBr6v7ZtQREmY8NxK2XDdRAYNVSsGDUHjd1KOK6WamNdCzhPIaBcICoaumPZRcN2DKc6tIueXfOcYqHkWI+6NoKES2jpUrB0bRVHlHtZ2IaeJtRjiBPuURQD9wT2Bv7lhSc9PZRz0pv1NcssYNKcCTH3TBMXQsAQRbiAWWzWzR2fesi9AZlSJNIE3mOGvKG/710ul4VlscCSqelYlmVaNVP6hJxMj/XmUb4ZwoBO2HrdRpRRglFE3pAidQlixkLNj6YsIWIWfwFtm7aloA1YYQPbLj3WzY8AGbsfIu2QTDgy+AzZOVgfJpAAxaDd9oOGfvyzDq73DhNE+YQlMd9b/44S0AVEbA6hwfPMcnY/RzxQrmYdsBdQHKWcLOBKjckcYeDadQITsrogXA5fyLWs/dqKyz+STxng37Slbm5zldTNA9XpkClw8X96tt2vNcoIRSk0R+1Wy2Zvvc4ivKQzcjcYWlH6KsbIv2lkFLad16Q27X5f7w/rZrbeN3X6bcTDB+extAyTV0FGKLyJrV7PLwe1eTxkeHh5bQ4fLvr0vBOI6DQadHvD2mr4NEgW6CK5fyky+viAXJ/MTo+Wd5Wb2Wl08ed8SgbleBWFt9Nbv3Tj3qzOozsaTMWfZQt1R0+BHZfH7tnD09ui24uf3bP+0800Ckvl4gseXq1CfF86msDLCJcGz+fpkvwzJb2HM9z4yGk7h11jLgmDdPwEWORLNR5BRzuR/ULie3lRFhIak8zVmyuN4gKo0Jtql5IWL5UCREJPNnO9tmqu2/X9bqtUKxZd22q3ar4j/6u5Vfuk5ldzDVqz2KPYZnRCVCylsuv5+Z4gjj0ONITEWLAUz4Dr3yB2kEBaQPvycDDKYcikirfalt11qmXXsfwTy/c79knbr1Q63Va5Xe36UouvmOjRXuJPBCS7Cl7eUfA+YDInoGRezTmXg86FLMkLWqQisgsLVKCQyosgUVrsOW61ZHISzyNQhM2YhWkEhflsnhXI5Otfx0CYZ1bC8ZwlAkV2dgy/zHL/W14Q6RMS5cBVSi2QTYUDN5Kd5/Mpb/fgzZXD+2lI1GmT1RUJwWsmu58+hkZNy2ZiNolhbufcN1t+CXEAwPyGn7lfmk28cEG2oue3rLw4pKw08/6+oMJLIV0s0qyjFSWZiYQ3pXLa5gBwKnXvdciegZobCPNH186G9V7kjX2XXypmdCCQgFjOn5Ytf/DmGABXb45Anp/VTx80OyFl3QSsxCFbO5JPE8X429cL9rDyk+Zr+bNkSfjRrgNYW3FknvKhIQidqpW6YF6/mA3MJCyRisiSbfBDAIeC7xo3Rd5wEXKaxqmAr79oSuoaOsKYpVQEHT0zbMtvxlO8zsH7cPoEk0n8+5294l/e2feXFwMphDHSN77k784GycYFg66eBhmXhr6ST1AZnE635P6d4Lbin5Rct+U4f1X83Uyan8yfLVs13T8Pzf8A</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0819211388236761558</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0819211388236761558</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0819191388236759710</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0819211388236761558</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>B644143EB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1944FAAEB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f61f1377-9b57-4e12-9112-c4306b2aa6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true" id="4ac5920b-6215-407f-95af-dfe3bc85b8d9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="f1a12c5a-be0f-44c4-a0d4-e4c793d4681e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>9C44E76FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE985478963F3A46E0401F0A079931FF:210BA0B9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0819301388236770042</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>EB44434FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EB44434FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:EB44434FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>9C44E76FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FE448C30C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F05420C0C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:9C44E76FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FE448C30C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F05420C0C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3Tq4zel9AK0HWGmFNFyUFEULy9nQhog2ialSQH99ScpFgHRT8+MM5jdnbXXvmQlJwwksen5jKGMY0qUsNNU/40s0xmPJ2PNcaOxZtfrE21sRo4GgOuYDVC1rXFVVULGchQSxgHhTdWsGpZmmJrp3BqWZ7ieWavULedJVUYoYwJauFTErlUSE+YVYZtqnhGPAoaZR0CCmMehN/Qv+p7w9EDJSW2drFkWAbPWjPPU03VYiRBEcQwrkCb6ib7jcxIxb4inBPA8Q+8xI9ZU3/cul8vK0qrQbKqb1WpVr7q68IkYnh6rraNyM4pCMqHrdQAIJRiCGL8BSeoC8RmNFD+e0gzzWfIFtKEbVQmtoRXUoGGTY1X/CFCw+yHSDsmMAY3NgFGC3aAJyhCBSLm7CZvq8c86uN57mwHCJjRL2N76d5QQWaCYpijSWJlZye7niAfK1TpB0AsJjHOGF+hSjkkKIGLKIEMTvOpjJoYvYkrRfmXFxB8upwzB37TlRN/mKqjrB6rTwVPE+P/p2Xa/1igjEOeohad27Xn+fDm88oE1CVz8RP55SV8v6L3TLChsO69Jbdr9vt4f1s1svW86Z3bHMrsPD3TUG3fr5mW/9waI0+vdZc/LQccwr7NpfTlsD2qvl/58Gg3iez8AV+lFm531Mb/p1JwgjJ+qYe2KHw2SkDuvIAUL96HfTRb2XfqAwaU1qvVS525Uf3yM9OcUjuw8PI/pn+vrizl5eVv2lob/MPoDBo+h6Z85pG4POy9H/ehtjNLk7mxw28Pnjfa9c938yGk7h11jKQnDfPyMIC+XcjzCjtIV/QL8e3mRFhxpk8LVS6VGMY4IV1tyl5QWLxcChCNPNHO9dgPbPm3Uu+2aa1m2UQ3arm+K/1zbMbqu75QatGaxRzGgZIJlLKmy6/n5niBMPIZIhDJtQXM4Q0z9BrEDOFBCciMOByUM3VKh4rVG57QWVLtu1e1aphV0/aBRD3y/UQushmm5qnJJ+RW5yvwJR9mugtd3FPwGQZxiJGVezjkTg864KMkcLHIeG5UFqBCUi4sgk1rsmbZT0xlO0hhJwnpCozxGlXSWFgXS2frX1ABkhRUzmNKMg9gojuGXWe5/KwsifCIsHZhMqY1EU9GBG8ko8/k6b3c77xLezyMsT5uoLs8wXDPZ/fQxNHJaNhOzSQwyo+S+2fJLiAMA+jf89P3SbOJFC7wVvbxlxcUhZKVV9ncOKvNKvljkRUcbUjIzAa8L5TT0IYK50L3XW/qCiL6B0H907WxY70Xe2Hf55XxGhhxwlIj5U4rlD94cQ8TkmyMU52f10wfNTkhRN45W/JAtiMXTRDL+9vUCPSj9hHkgfpY0iz7adQBrK47IUzw0OCZTuZIXzOsXswGpgMVCEWm2DX4I4FDwXeOmyBsuXEzTOOfo6y+KlLqmCiCkOeFhRy0M2/Jb8OSvKfI+nD7BFBL/fmev2Jd39sNFfyiEMAHqxhf/3VnDxbhApMqnQcGlqa7EE1QEJ9MtuX8nuK34p23bti37r4q/m0nrk/mzZaum++eh9R8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3Tq4zel9AK0HWGmFNFyUFEULy9nQhog2ialSQH99ScpFgHRT8+MM5jdnbXXvmQlJwwksen5jKGMY0qUsNNU/40s0xmPJ2PNcaOxZtfrE21sRo4GgOuYDVC1rXFVVULGchQSxgHhTdWsGpZmmJrp3BqWZ7ieWavULedJVUYoYwJauFTErlUSE+YVYZtqnhGPAoaZR0CCmMehN/Qv+p7w9EDJSW2drFkWAbPWjPPU03VYiRBEcQwrkCb6ib7jcxIxb4inBPA8Q+8xI9ZU3/cul8vK0qrQbKqb1WpVr7q68IkYnh6rraNyM4pCMqHrdQAIJRiCGL8BSeoC8RmNFD+e0gzzWfIFtKEbVQmtoRXUoGGTY1X/CFCw+yHSDsmMAY3NgFGC3aAJyhCBSLm7CZvq8c86uN57mwHCJjRL2N76d5QQWaCYpijSWJlZye7niAfK1TpB0AsJjHOGF+hSjkkKIGLKIEMTvOpjJoYvYkrRfmXFxB8upwzB37TlRN/mKqjrB6rTwVPE+P/p2Xa/1igjEOeohad27Xn+fDm88oE1CVz8RP55SV8v6L3TLChsO69Jbdr9vt4f1s1svW86Z3bHMrsPD3TUG3fr5mW/9waI0+vdZc/LQccwr7NpfTlsD2qvl/58Gg3iez8AV+lFm531Mb/p1JwgjJ+qYe2KHw2SkDuvIAUL96HfTRb2XfqAwaU1qvVS525Uf3yM9OcUjuw8PI/pn+vrizl5eVv2lob/MPoDBo+h6Z85pG4POy9H/ehtjNLk7mxw28Pnjfa9c938yGk7h11jKQnDfPyMIC+XcjzCjtIV/QL8e3mRFhxpk8LVS6VGMY4IV1tyl5QWLxcChCNPNHO9dgPbPm3Uu+2aa1m2UQ3arm+K/1zbMbqu75QatGaxRzGgZIJlLKmy6/n5niBMPIZIhDJtQXM4Q0z9BrEDOFBCciMOByUM3VKh4rVG57QWVLtu1e1aphV0/aBRD3y/UQushmm5qnJJ+RW5yvwJR9mugtd3FPwGQZxiJGVezjkTg864KMkcLHIeG5UFqBCUi4sgk1rsmbZT0xlO0hhJwnpCozxGlXSWFgXS2frX1ABkhRUzmNKMg9gojuGXWe5/KwsifCIsHZhMqY1EU9GBG8ko8/k6b3c77xLezyMsT5uoLs8wXDPZ/fQxNHJaNhOzSQwyo+S+2fJLiAMA+jf89P3SbOJFC7wVvbxlxcUhZKVV9ncOKvNKvljkRUcbUjIzAa8L5TT0IYK50L3XW/qCiL6B0H907WxY70Xe2Hf55XxGhhxwlIj5U4rlD94cQ8TkmyMU52f10wfNTkhRN45W/JAtiMXTRDL+9vUCPSj9hHkgfpY0iz7adQBrK47IUzw0OCZTuZIXzOsXswGpgMVCEWm2DX4I4FDwXeOmyBsuXEzTOOfo6y+KlLqmCiCkOeFhRy0M2/Jb8OSvKfI+nD7BFBL/fmev2Jd39sNFfyiEMAHqxhf/3VnDxbhApMqnQcGlqa7EE1QEJ9MtuX8nuK34p23bti37r4q/m0nrk/mzZaum++eh9R8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqc+kHBduOMFMLaBX0aNU5+nInpKGNlgSTFNBff5JiERA9njvjDGZ3Z+21P7KSYw6mhROEnCMmMCVa3Ovo/41T5LdbqWt4LpgYbmvSNsYpdAwPjS0AfWuSpm1dizkvUUy4AER0dMeym4btGI53azcD2w8cr+EfuY+6do8Yl9DSpWHp2nJaEB5UYTt6yUhAAcc8IGCKeCBgkISjYSA9A1Bz0rvHK5ZVQNbNhZgFpgkbKYKoKGAD0ql5bG75HKc8SHBGgCgZeo+Z8o7+vnexWDQWzQZlmelYlmVavil9Uo6zQ717UG9GaUwmdLWOAKEEQ1DgN6BIjZDIaaqFRUYZFvn0C2jbtC0FbaAlNKDtkkPd/AhQsfsh0hZJxoHBc2DXYDdoghgiEGl3N3FHP/xZB1d7bxkgfELZlO+s/40SInNU0BlKDV5nVrP7OeKecnWPEQxiAouS4zm6VGMyAxBx7RdDE7wcYi6HL+Va1X5tyeUfrqcMwX9py7G5yVVSN/dUp4czxMX/6dlmv1Yo96AoURd51vNtcnb99nDenudFv0fyR3Nxdx//zjoVhU3nFal1u9/Xu8O6nq33TWej7KF8a16cFS+Xvxf9h0deni7N/i0dPTiLq5v+BT07v4if4QmdhVE2HLyGLxF8s5MQtrM0fRox89QnkOT+Re4c4GSZvl4+WPPobpxGz26PFfjJiwen8C4Lo+GzN1qOxq3Ea/bs4i26SpaDO5bwU5bh9sn4wl/kTushjC+vezfW8OAxn1jz8GU8vLhuXz3C83O66HzktJnDtrGWhKQcPyEo6qUaj7inDWS/gPheXpQFp8akcg1mSqO4QEToXbVLSUtQSgHCaSCbuVoP+q7rRU0ravnNpmtb0YkfOvI/3/XsgR96tQatWOxQjCiZYBVLqexqfr4nCKcBRyRFzJjTEuaI698g9oAAWkxu5OGghKNbKlXcGVheP7TdXrvp2OFR5Dt2zw7tQSvyjlzf8nTtkoorcsXCiUBsW8HbWwp+gyCeYaRkXs05l4POhSzJC5iXorAbc9AgqJQXAVNaHDiu1zI5ns4KpAibU5qWBWrM8llVIJOvfh0DQF5ZMYczygQo7OoYfpnl7re6INInxcqBq5ROkGwq2nMj2XU+X+ftb+Zdw4dlitVpk9UVDMMVk+1PH0OjpmU9MevEILdr7ust/wixB8D8hp+5W5p1vHSON6LXt6y8OKSsdOv+voDGS6Ocz8uqo0dKMpmEN6Vy2maCYCl17/WWPiNiriHMH107a9Y7kdf2bX6lyEkigEBTOX9atfzBmyNBXL05Ynl+lj990GyFlHUTaCn22aJCPk0U429fLzCAyk+af8mfBWXpR7v2YG3EkXnKh4bAJFMrdcG8fjEbkEpYLBWRsk3wfQD7gm8b10VecxFymsalQF9/0ZTUdXQAIS2JiHt6ZdiU34qneJ2h4MPpE0wl8e939pJ/eWf/Hg0TKYRToK998d+dDVyNC0S6ehpUXDr6Uj5BZXCSbcj9O8FNxe+fuK7bdAcnf1H87Uy6n8yfLRs13T0P3T8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jxnjKzdPYIZbWloCWWCTbl92hHQAEVt2JJlLf/1KJiZASJruTGaIjo++852LPulaoDjywpYQwCVNmNHvNsx/PVRzUHVWsTyoza2g4lUtREjFqnoEESC+X69UTaMvRAZ9JiRismF6jutbrmd5tanrh2499P1SUAt+msY9cKGglUvJMY1tHDER5mEbZsZZmCBBRchQDCKUOJy0bgeh8gxRwclsXu9Z5gF5cyllGto2LhHAEEW4hJPYvrZPfK6JCCd0wZDMODzHJKJhPu/dbDaljV9K+ML2HMexnbqtfIigi89m81OxGUifzZP9uoNYwihGEf2FNKlbkMuEGK1okXAql/Eb0K7tOhragi22sBuwz6b9EiBn90GkE5JcIEsskVuAjWEOHBgG4+9xv2F+/lgH93unHDExT3gsztZ/RgnYGqIkBWKJIrOC3ccRL5SreQ047DMcZYKuYajHJEUYhHHHYU63AyrU8BFh5O03tkL90WLKAP9JW67tY66Kun2hOl26ACH/T8+O+7VHuUdRBs3HB97uDhdRbxCIZDVcrGbVVex1WbQTjZzCsfOe1KHdz+vzYT3M1vMm3qmur25RPOX4afV1lQ3Z/XRcr9G/OMGj0a/71S/6fdr2wR794yy3d3i7ql/RBzf9NtuR3bL6EF85wwTR3WP1gXxq8dthLGFSXmcjr9b/KUGu7CDtxdvRvFNrX/lf5j+++g9487jC429P8dV2Vx/NBj/IYi3alfQuCQZP68mX7tWGiU+35dbQZ+PZYFhf3USL+x3bNF5yOs7h1FhIwiSbrQDLYqnHo981blS/kHxfXrSFEmueu4ap1ighgUmzqXdpaQkzJUCUhKqZ+/WNUw48p+N0ynXfD1yn0663PPVfPai5N/VWrdCgPYszip2EzamOpVV2Pz/vE8RxKIAR4NY6yfAShPkOYhdJZPTZWB2OhAmYJkrFe+1W1XUqfqvdq/XaVbdX6dY67XI1KJe7TtDqmMYwkSM24q25BH6q4JUTBR8DpikFLfN6zoUadCFVSZ7QOpORW1qjEoNMXQRca3HoBbWyLWicRqAJ23FCsghK6TLNC2SL/a9nISxyKxU4TbhEkZsfwzezPP9WFET5EKodhE6pDaqpcOFG8op8XuUdXLy5CvhWRqg+baq6klO8Z3L66WVo9LQcJuaQGBZuwf2w5Q8hLgDY7/Czz0tziEfW9Ch6ccuqi0PJSrPo7xMqPZWy9TrLO1rVkskVvK2U07UngDOle7tp8gjMPkDYH7p2DqzPIh/sp/wyuWQTiSTEav6MfPmBN8cEhH5z9NX52X70QXMSUtVNwlZesnUi9TTRjN99veAQaz9lvlM/m4STl3ZdwDqKo/JUDw1J2UKv9AWze2M2cKJgqVLEhB+DXwK4FPzUeCjygYtU0zTLlNS/+cXQUtcwEcZJxmS/a+aGY/nNecpdCuGL0yuYXOKf7+ytePPO/nE7mCghjJF58KW/d7ZoPi4YTP00yLk0zK16gqrgbHEk988EjxW/1w6CwA9u2r9R/NNMmq/Mry1HNT0/D83/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0819301388236770042</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0819301388236770042</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0819241388236764552</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0819271388236767923</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0819301388236770042</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>AC44F76FB5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0F449C30C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>015430C0C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1a12c5a-be0f-44c4-a0d4-e4c793d4681e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true" id="943b4b09-cff0-420e-b0f0-ad4aa7da8eab"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="3d9f91a0-cf40-4715-aeaa-9e1b3a3a0f69"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>8454CAD1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173E4339775E0401F0A07995A24:59CBF0C9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0819391388236779936</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>D35433C1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:D35433C1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:D35433C1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>8454CAD1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6542592C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E854DB23C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:8454CAD1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6542592C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E854DB23C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6I8FL7fX8Gwlx2EICow1RnEtmu3H9vaduzevBPDUdOFQElQ1l+/CRar1na774wzmMPJc57zwZMcc5zEth9wDrmgKdOGg67+X7tDkIdhYrikjQ3HaYP81yGG3W5bzgRbqD1p6tqQ8wKGjAvMRFe3LdQ0kG3Y7h1q+sjzm62GZ1k/de0Bci6hpUvD0rUyiRn3q7BdvciZn2JOuc9wAtwXxB8Flxe+9PRxzUnvHa9ZVgHz3lyIzDdN0oiAQByTBkkT89jc8TmOuD+iM4ZFkcNLzIh39Ze9y+WysWw20nxm2pZlmZZnSp+I09lXvfel3gzRkE3T9TrELGWU4JiusCJ1CWKeRloQz9KcinnyDjQykaWgDSiJQZDDvurma4CK3SeRdkjmHBt8jlENdgtTyIER0O5vh1396+c6uN57l2PGp2me8L31v1ECtoA4zSAyeJ1Zze7ziAfK1TsG4g8ZiQtOF3ClxiTDBLj2I4cpLS8ol8MXca1qv1Zy+aP1lAH5l7Ycm9tcJXXzQHUGdAZc/J+ebfdrjfKA4wJ6XBTjMAxN5Jjk6NoSj2j8C9vjwXhy360obDuvSW3a/bLeH9bNbL1swqvJZJFO7x5SiigMyhKev5fh2VmQhP2TNgxTT9wIhlHr5+JsuJpkbicFZ8hP3JtzZv8s4wz9WnTi89AJ0NmXx37nKFyi4OrBfZic396SfNJfnZ7M4nM6uJ+SzmOy4pcXT9erMfPGy0fA0/NxJzn63lmtluXlzcO3p2+j/PSqsO+fzC9nYf/sphNO5+NWNvvmcnAfu685beewa6wlYVRMnoCIeqnGYzjQTmW/sPhYXpSFRsa0cvUzpVFcABN6T+1S0uIXUoBo5Mtmrteu03LCYIDCltdsOsgK+15gy3+e46JTL3BrDVqz2KMYpmxKVSylsuv5+ZggSXwOLILcWKQFmQPXP0AcYIG1IbuVH0fKONylUsWbLasfnLZObGQPAg+1nGZ46no2ClouctqDga5dpeKaXefBVEC+q+DtHQW/BUIzCkrm1ZxzOehcyJI840UhYtRY4AaDQh4EudJi33bclslpksWgCJtJGhUxNLJ5VhXI5OunbWDCKyvlJEtzgWNUfYbvZrn/ri6I9ImocuAqpT7IpsKBE8mu83k/b2877xo+KCKqvjZZXZFTsmay++p1aNS0bCZmkxjhqOa+2fKPEAcAzA/4mful2cSLFnQren3KyoNDykqv7u8zbjw3isWiqDraUZKZS3hTKicyR0AKqXu/79JfwMwNhPmpY2fDei/yxr7LrxBzNhJYQCLnT6uWn7hzjICrO8dQfj/lZy80OyFl3QSU4pAtjOXVRDH+8PZCfKL8pPmHfCzTPHpt1wGsrTgyT3nREJTN1EodML/fmQ2SSlgqFTHNt8EPARwKvmvcFHnDRchpmhQC3n+jKanr6piQtGBiqCRFGrblt+Ipfmfgvzq9gakk/uXMLvm7Z/b48mIkhTDB+saX/t3ZoNW4ENDV1aDi0tVLeQWVwdlsS+5fCG4r/qApVbMZ/lXxdzPpvTG/tWzVdP976P0B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc6I8FL7fX8Gwlx2EICow1RnEtmu3H9vaduzevBPDUdOFQElQ1l+/CRar1na774wzmMPJc57zwZMcc5zEth9wDrmgKdOGg67+X7tDkIdhYrikjQ3HaYP81yGG3W5bzgRbqD1p6tqQ8wKGjAvMRFe3LdQ0kG3Y7h1q+sjzm62GZ1k/de0Bci6hpUvD0rUyiRn3q7BdvciZn2JOuc9wAtwXxB8Flxe+9PRxzUnvHa9ZVgHz3lyIzDdN0oiAQByTBkkT89jc8TmOuD+iM4ZFkcNLzIh39Ze9y+WysWw20nxm2pZlmZZnSp+I09lXvfel3gzRkE3T9TrELGWU4JiusCJ1CWKeRloQz9KcinnyDjQykaWgDSiJQZDDvurma4CK3SeRdkjmHBt8jlENdgtTyIER0O5vh1396+c6uN57l2PGp2me8L31v1ECtoA4zSAyeJ1Zze7ziAfK1TsG4g8ZiQtOF3ClxiTDBLj2I4cpLS8ol8MXca1qv1Zy+aP1lAH5l7Ycm9tcJXXzQHUGdAZc/J+ebfdrjfKA4wJ6XBTjMAxN5Jjk6NoSj2j8C9vjwXhy360obDuvSW3a/bLeH9bNbL1swqvJZJFO7x5SiigMyhKev5fh2VmQhP2TNgxTT9wIhlHr5+JsuJpkbicFZ8hP3JtzZv8s4wz9WnTi89AJ0NmXx37nKFyi4OrBfZic396SfNJfnZ7M4nM6uJ+SzmOy4pcXT9erMfPGy0fA0/NxJzn63lmtluXlzcO3p2+j/PSqsO+fzC9nYf/sphNO5+NWNvvmcnAfu685beewa6wlYVRMnoCIeqnGYzjQTmW/sPhYXpSFRsa0cvUzpVFcABN6T+1S0uIXUoBo5Mtmrteu03LCYIDCltdsOsgK+15gy3+e46JTL3BrDVqz2KMYpmxKVSylsuv5+ZggSXwOLILcWKQFmQPXP0AcYIG1IbuVH0fKONylUsWbLasfnLZObGQPAg+1nGZ46no2ClouctqDga5dpeKaXefBVEC+q+DtHQW/BUIzCkrm1ZxzOehcyJI840UhYtRY4AaDQh4EudJi33bclslpksWgCJtJGhUxNLJ5VhXI5OunbWDCKyvlJEtzgWNUfYbvZrn/ri6I9ImocuAqpT7IpsKBE8mu83k/b2877xo+KCKqvjZZXZFTsmay++p1aNS0bCZmkxjhqOa+2fKPEAcAzA/4mful2cSLFnQren3KyoNDykqv7u8zbjw3isWiqDraUZKZS3hTKicyR0AKqXu/79JfwMwNhPmpY2fDei/yxr7LrxBzNhJYQCLnT6uWn7hzjICrO8dQfj/lZy80OyFl3QSU4pAtjOXVRDH+8PZCfKL8pPmHfCzTPHpt1wGsrTgyT3nREJTN1EodML/fmQ2SSlgqFTHNt8EPARwKvmvcFHnDRchpmhQC3n+jKanr6piQtGBiqCRFGrblt+Ipfmfgvzq9gakk/uXMLvm7Z/b48mIkhTDB+saX/t3ZoNW4ENDV1aDi0tVLeQWVwdlsS+5fCG4r/qApVbMZ/lXxdzPpvTG/tWzVdP976P0B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZT+M8FH2fXxGFR5Rm7ZKIVkoXmA4FhpZtePlknNvWkNghdrrw68dOSWlLYeCTKqW+uT733CXHPuIoiZ0g5BwyQRjV+t2m/p9fj2zPefAMiJya4XlVx2hA3TOwh8cWYA/VAOtan/Mc+pQLREVTdyzbNWzHcBpXthvYfuA2KnW3eq9rN5BxCS1dKpauLZKY8qAI29TzjAYMccIDihLggcDBKDwbBNIzQCUnvXW0YlkEzFpTIdLANHElAgxxjCuYJeaRueVzFPFgRCYUiTyD15gRb+qve+fzeWXuVlg2MR3LskzLN6VPxMnkQG/9KDdD1Kdjtlp3EGWUYBSTF6RInYGYskgL4wnLiJgmH0Dbpm0paAMW2MC2Rw908y1Awe6LSFskM44MPkV2CTaEMWRAMWjXw35TP/haB1d7rzJE+ZhlCd9Zf48S0BnELIXI4GVmJbuvI+4pV+sIcNCnOM45mcG5GpMUYeDa7wzGZDEgXA5fxLWi/dqCyx8ppwzwd9pyZG5yldTNPdXpkglw8X96ttmvFcoNinNojS69nB9fol7knlaX3Sf+8NOve2Gt51jNgsKm84rUut2v691hXc/W66b7m8nPUWhdny8O7Zea6IXjRXr/56Ia+7/uD8fP4/judvSQ3aUePz59zN3e+SQZ9PKHeHLRE9e3MZ64neGTZR7Pb0L7xz0aWbmX+vPh4fPdchbR2S9/aZPJuXdyykPv+sxZckJr7dtOfOa83CeDrPHsDnnst5fTQfuJdf48IhQ2aLee+T8oY73qiXci/Kf6otseXIZe8y2nzRy2jaUkjPKHR8CiXKrx6He1Y9kvJD6XF2UhkTEuXINUaRQXQIXeUruUtAS5FCASBbKZq3WvVvWcqu90qr7rerbVafuhI//5XsM+9sNGqUErFjsUO4yOiYqlVHY1P58TxEnAgUaQGTOW4ylw/RPELhJI69Oh/DgY5XDFpIq3XcW0UbPb7apk266F8l/HdbpevesdN3q6ds7EBb3IwrGAbFvBa1sKPgRMUgJK5tWccznoXMiSPKNZLmK7MkMVCrk8CDKlxYHjNaomJ0kagyJsJizKY6ik07QokMlXT8dAmBdWwnHKMoFiu/gMP8xy911ZEOkTEeXAVUptkE2FPSeSU+bzcd7+Zt4lfJhHRH1tsroiI3jFZPvV29CoaVlPzDoxzO2S+3rLNyH2AJif8DN3S7OOF83IRvTylJUHh5SVVtnfZ1R5ruSzWV50tK4kM5PwplRO2xwBzqXuLa/YE1BzDWF+6dhZs96JvLZv88vFlI4EEpDI+dOK5RfuHCPg6s7Rl9/P4qsXmq2Qsm4CFmKfrRPLq4li/OntBQdY+Unzb/mYsyx6a9cerI04Mk950RCETtRKHTDLD2YDMwlLpCKybBN8H8C+4NvGdZHXXIScpodcwMdvNCV1TR1hzHIq+l29MGzKb8FTLFMI3pzewRQS/3pmL/iHZ/bd2WAkhTBB+tqX/NvZIMW4YNDV1aDg0tQX8goqg9PJhty/EtxU/K5b9Vy3Y/9L8bczab0zv7ds1HT3e2j9BQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyrkQgIhAqQApZPphR6gFPFy5DoG3CZ2GjsU+PpjB0KB0g49UiXqne2117542XUG4sjyfMZQyjElStBpqP8aZccuA7eq2aFjaLZbsTS3BqaaC9ypUTMtYJqhqgSMZSggjAPCG6plmGXNtDTLHZplz6x5tlVyqu5EVUYoZQJauJQMVVnGEWFeHrahZinxKGCYeQTEiHkcegP/7tYTnh4oOKnN+oZlHjBtzjlPPF2HpRBBFEWwBGms1/UDn3rIvAGeEcCzFG1jhqyhbve+v7+X3sslms50yzAM3ajpwidkeHahNn8Vm1EYkCndrNuAUIIhiPAaSFJ3iM9pqPjRjKaYz+MvoE3dNCS0hpZQg6ZNLlT9I0DO7kykA5IpAxqbA7MA66MpShGBSHnsBw314rwObvYOU0DYlKYxO1r/jBIiCxTRBIUaKzIr2J2PeKJczTqCXkBglDG8QPdyTBIAEVMeUjTFy1vMxPCFTMnbryyZ+MPFlCH4k7bU9X2ugrp+ojodPEOM/5+e7fdrgzICUYaaT5a9WFceu4Pu79Z1dumvLmllzoz7JHlt5BT2nTekdu3ero+HdTdb2029XmjAMX4NnFoPV6ajkRteDy2n8s+iyyfJOrg2UDwa96fzQe8mw2XnaR3cX/Hnq+cXMAe/9VUFpP5oBQd80r789fZ4/zRaj/HQHbcmd8ZLcNN9Wb4GneW1b3f7bPjw8HLtIDKaTaqRgy95rffqwrfHZOQy6thx73biJvGfZPnc6Vd+sXSQTIagu56P+50banaSu8ZHTvs5HBoLSRhkzy8I8mIpxyPoKF3RL8C/lxdpwaE2zV29RGoU44hwtSl3SWnxMiFAOPREMzfrK9exOy2r3HZq5bJtGu1WzbfEfzXbNbs13y00aMPiiGKbkimWsaTKbubne4Iw9hgiIUq1Bc3gHDH1G8QO4EAJSF8cDkoYGlKh4la36lTNjum6tlszWpZjmJbfrZi+X6uUjYqtKveU90gv9accpYcKXjlQ8D6COMFIyryccyYGnXFRkjewyHhklhagRFAmLoJUarFn2a6jMxwnEZKE9ZiGWYRKyTzJC6Szza+lAchyK2YwoSkHkZkfwy+zPP5WFET4hFg6MJlSC4mmohM3UrnI51Pe9smbq4D3sxDL0yaqy1MMN0wOP30MjZyW3cTsEoPMLLjvtvwQ4gSA/g0//bg0u3jhAu9FL25ZcXEIWWkW/X0DpbdStlhkeUerUjJTAa8L5TT1AYKZ0L3VkL4iou8g9LOunR3ro8g7+yG/jM/JgAOOYjF/Sr48480xQEy+OQJxfpbnPmgOQoq6cbTkp2ztSDxNJONvXy/Qg9JPmB/EzztNPxI/hbUXR+QpHhock5lcyQtm9cVsQCpgsVBEmu6DnwI4FfzQuCvyjgsX0/SccfT1F0VKXUMFENKM8KCj5oZ9+c158lWCvA+nTzC5xG/v7CX78s4e390OhBDGQN354r87azgfF4hU+TTIuTTUpXiCiuBktif3W4L7it+Rc1Num39T/MNMmp/Mny17NT0+D83/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0819391388236779936</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0819391388236779936</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0819341388236774592</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0819371388236777596</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0819391388236779936</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>9454DAD1C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F6543592C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F8540C23C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d9f91a0-cf40-4715-aeaa-9e1b3a3a0f69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true" id="0c602d59-a23e-4f22-b8d6-e354e0979ead"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for AdultSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - AdultSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="5e79a886-e9be-43d3-b770-ef35038f0465"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>7C542814C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B405C361C7E0401F0A0799472F:FA3EE26D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0819471388236787969</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>CB5485F3C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:CB5485F3C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:CB5485F3C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>7C542814C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>DE545E84C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4364CC15C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:7C542814C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:DE545E84C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4364CC15C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SKwU6wgyXXTeKN0CO+nImpAuIlqQ2KaC//iTFIiC69cw4g1ld+da3LvmSE47msRM0OYdUEEa1bqeu/4t9N3IBxobjId/wKl7VQBXfM6rYHduW51kVhHWty3kGXcoFoqKuO5btGrZjONWh7QZ2LfC8ku86D7o2gpRLaOlSsnRtNY8pD/KwdT1LacAQJzygaA48EDgYNC96gfQMUMFJb5ysWeYB08ZMiCQwTVyKAEMc4xJmc/PE3PE5iXgwIFOKRJbCW8yI1/W3vcvlsrR0Syydmo5lWaZVM6VPxMn0SG/8KjZD1KUTtl63EWWUYBSTV6RIXYCYsUhrxlOWEjGbfwJtm7aloA1YYQPbHj3SzfcAObtvIu2QTDky+AzZBVgfJpACxaDd9rt1/eh7HVzvHaaI8glL53xv/TNKQBcQswQigxeZFey+j3igXI0TwEGX4jjjZAGXakwShIFr1ylMyKpHuBy+iGt5+7UVl3+kmDLAP2nLibnNVVI3D1SnQ6bAxf/p2Xa/1igjFGfQcK6nd39qcFy9uuN3N6EYHtcmvc704tny6jmFbec1qU2739b7w7qZrbdNvbOrl0TcP8GwFz4Mwzhc9PGt+8jGeNpv/+n8Y87Cp/Lx6U1yc+5PQg8lN/e9lS38l9GZB8PXyaUnrnvt6DEB3/yFn5v9vhOjOzi32N3IuY5e5uev8XEZLv3OMGvOstFrmSwTZzGu3V4tzk6np+OHx1uzOr4pZw+T25Fltc4vF7UuK3d/NcNlGK5Cancmzv3V6LLdr9bfc9rOYddYSMIgGz8CFsVSjUe3o4WyX0h8LS/KQiJjkrsGidIoLoAKvaF2KWkJMilAJApkM9frSrvsOVXba5drruvZVrtVazryv5pXtcNas1po0JrFHsU2oxOiYimVXc/P1wTxPOBAI0iNBcvwDLj+BWIHCaR1aV8eDkY5DJlUcbvi11qtdqvjVGzHtn+Xf7ctv2lXnHLLd5u2r2uXTFzRq7Q5EZDuKri/o+B9wCQhoGRezTmXg86FLMkzWmQitksLVKKQyYsgVVocOF61bHIyT2JQhM05i7IYSsksyQtk8vWvYyDMcyvhOGGpQLGdH8NPs9z/VhRE+kREOXCVUgtkU+HAjeQW+Xyed2077wK+mUVEnTZZXZESvGay++l9aNS0bCZmkxjmdsF9s+WHEAcAzC/4mful2cSLFmQrenHLyotDykqj6O8zKj2XssUiyztaUZKZSnhTKqdtDgBnUvdehuwJqLmBML917WxY70Xe2Hf5ZWJGBwIJmMv50/LlN94cA+DqzdGV52f13QfNTkhZNwErccjWjuXTRDH+8vWCA6z8pPla/ixZGr236wDWVhyZp3xoCEKnaqUumJdPZgMzCUukIrJ0G/wQwKHgu8ZNkTdchJymcSbg8y+akrq6jjBmGRXdjp4btuU35yleEgjenT7A5BL/dmev+Kd39t1FbyCFcI70jS/5u7NB8nHBoKunQc6lrq/kE1QGp9MtuX8juK347VZZalno/k3xdzNpfDB/tGzVdP88NP4D</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SKwU6wgyXXTeKN0CO+nImpAuIlqQ2KaC//iTFIiC69cw4g1ld+da3LvmSE47msRM0OYdUEEa1bqeu/4t9N3IBxobjId/wKl7VQBXfM6rYHduW51kVhHWty3kGXcoFoqKuO5btGrZjONWh7QZ2LfC8ku86D7o2gpRLaOlSsnRtNY8pD/KwdT1LacAQJzygaA48EDgYNC96gfQMUMFJb5ysWeYB08ZMiCQwTVyKAEMc4xJmc/PE3PE5iXgwIFOKRJbCW8yI1/W3vcvlsrR0Syydmo5lWaZVM6VPxMn0SG/8KjZD1KUTtl63EWWUYBSTV6RIXYCYsUhrxlOWEjGbfwJtm7aloA1YYQPbHj3SzfcAObtvIu2QTDky+AzZBVgfJpACxaDd9rt1/eh7HVzvHaaI8glL53xv/TNKQBcQswQigxeZFey+j3igXI0TwEGX4jjjZAGXakwShIFr1ylMyKpHuBy+iGt5+7UVl3+kmDLAP2nLibnNVVI3D1SnQ6bAxf/p2Xa/1igjFGfQcK6nd39qcFy9uuN3N6EYHtcmvc704tny6jmFbec1qU2739b7w7qZrbdNvbOrl0TcP8GwFz4Mwzhc9PGt+8jGeNpv/+n8Y87Cp/Lx6U1yc+5PQg8lN/e9lS38l9GZB8PXyaUnrnvt6DEB3/yFn5v9vhOjOzi32N3IuY5e5uev8XEZLv3OMGvOstFrmSwTZzGu3V4tzk6np+OHx1uzOr4pZw+T25Fltc4vF7UuK3d/NcNlGK5Cancmzv3V6LLdr9bfc9rOYddYSMIgGz8CFsVSjUe3o4WyX0h8LS/KQiJjkrsGidIoLoAKvaF2KWkJMilAJApkM9frSrvsOVXba5drruvZVrtVazryv5pXtcNas1po0JrFHsU2oxOiYimVXc/P1wTxPOBAI0iNBcvwDLj+BWIHCaR1aV8eDkY5DJlUcbvi11qtdqvjVGzHtn+Xf7ctv2lXnHLLd5u2r2uXTFzRq7Q5EZDuKri/o+B9wCQhoGRezTmXg86FLMkzWmQitksLVKKQyYsgVVocOF61bHIyT2JQhM05i7IYSsksyQtk8vWvYyDMcyvhOGGpQLGdH8NPs9z/VhRE+kREOXCVUgtkU+HAjeQW+Xyed2077wK+mUVEnTZZXZESvGay++l9aNS0bCZmkxjmdsF9s+WHEAcAzC/4mful2cSLFmQrenHLyotDykqj6O8zKj2XssUiyztaUZKZSnhTKqdtDgBnUvdehuwJqLmBML917WxY70Xe2Hf5ZWJGBwIJmMv50/LlN94cA+DqzdGV52f13QfNTkhZNwErccjWjuXTRDH+8vWCA6z8pPla/ixZGr236wDWVhyZp3xoCEKnaqUumJdPZgMzCUukIrJ0G/wQwKHgu8ZNkTdchJymcSbg8y+akrq6jjBmGRXdjp4btuU35yleEgjenT7A5BL/dmev+Kd39t1FbyCFcI70jS/5u7NB8nHBoKunQc6lrq/kE1QGp9MtuX8juK347VZZalno/k3xdzNpfDB/tGzVdP88NP4D</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrU+I8FP6+v6JTP+6U3oV2hJkWRFkvKBdZ98s7MT1ApCSlSYH1129aLAKi674zzmBOT57znEue5IyjeWz5AeeQCsKo0mnV1f9sx7GquAqaaaJIc6A61p5qyNPGqFZzbAdVIwNUpcN5Bh3KBaKirlqGaWumpVm1gWn7puc7p5VqzfqlKg+QcgktXSqGqqznMeV+EbauZin1GeKE+xTNgfsC+/3g5tqXnj4qOamNsw3LImDamAqR+LqOKxFgiGNcwWyun+l7PmcR9/tkQpHIUniNGfG6+rp3tVpVVnaFpRPdMgxDNzxd+kScTE7UxrdyM0QdOmabdRNRRglGMXlBOakbEFMWKUE8YSkR0/kH0KZuGjm0BmusYdOhJ6r+FqBg90WkPZIpRxqfIrME68EYUqAYlGGvU1dPvtbBzd5Biigfs3TOD9b/RgnoEmKWQKTxMrOS3dcRj5SrcQbY71AcZ5ws4TYfkwRh4MpdCmOyviZcDl/ElaL9yprLP1JOGeB/acuZvstVUtePVKdFJsDF/+nZbr82KA8ozqDx+PBj1qTtpnPTHbsJ3P66HT33HvhpNx3WCwq7zhtS23a/rg+HdTtbr5ueH+4Xj72xGXXtqcVHpDp9uhrMw580HF7dGWjYY5ff01447/5AoQs/1/3AuzLcBffaSQjL4OXejEaxw7rgXdjfbi5HC3Pk3r+4fD1gg5H7smxTb9R8HNnk+/q8PxyS9rPbSe1kll3ci3D444LNLnFvNFnFv7D+YM2url8s5/u9F1a/XSxri2j2dDkd3j1iuJytpuf1t5x2c9g3lpLQz56eAYtymY9Hp6W0Zb+Q+FxecguJtHHh6ie5RnEBVKiNfFcuLX4mBYhEvmzmZt06dx33vOY0Xc+2HdNohl5gyf88p2a2vaBWatCGxQHFJqNjksfKVXYzP58TxHOfA40g1ZYsw1Pg6ieILSSQ0qE9eTgY5TBgUsXP20FoNE+toB0azrnXdkzXqwZe1WmZQXjqBKpyy0SXdtNgLCDdV/DTPQXvASYJgVzm8znnctC5kCVZoGUmYrOyRBUKmbwI0lyLfcupuTon8ySGnLA+Z1EWQyWZJkWBdL75tTSEeWElHCcsFSg2i2P4YZaH38qCSJ+I5A48TykE2VQ4ciPZZT4f5+3t5l3CB1lE8tMmqytSgjdM9j+9DU0+LduJ2SaGuVly3275R4gjAPon/PTD0mzjRUuyE728ZeXFIWWlUfZ3gSqLSrZcZkVHq7lkphJel8pp6n3AmdS93wM2A6pvIfQvXTtb1geRt/Z9fpmY0r5AAuZy/pRi+YU3Rx94/uboyPOz/uqDZi+krJuAtThma8byaZIz/vT1gn2c+0nznfxZsTR6a9cRrJ04Mk/50BCETvJVfsH8/mA2MJOwRCoiS3fBjwEcC75v3BZ5y0XIaXrKBHz8Rcmlrq4ijFlGRaelFoZd+S14it8J+G9O72AKiX+9s9f8wzv75811XwrhHKlbX/J3Z40U44Lli1X6F1zq6lo+QWVwOtmR+1eCu4rfDF2pZW37b4q/n0njnfm9Zaemh+eh8Qc=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxkjfxLwBGaMKcEZCA2Eprcvd4S8NmqN7FgykP76K5uYACFpemcyQ7RenT37oSNdcbxKTNfjHHJBU6YE/Y76rwkLwwb7UoscuNRsDC0NExNrZgTNpg7YhtBWlYDzAgLGBWaio5q6YWmGqZmte8Nyjbbr6A3Hcn6oyjfIuYSWLg1dVbarhHG3CttRi5y5KeaUuwyvgLuCuDNvPHKlp4trTmr3aseyCph3l0JkLkKkEQKBJCENkq7QFTryuQq5O6Mxw6LI4TlmyDvq897NZtPYWI00j5Gp6zrS20j6hJzGn9Xup3ozhAGL0t3axyxllOCE/sYlqTGIZRoqXhKnORXL1RvQBjL0ElqDLdGIYbPPKnoJULH7INIRyZxjjS+xUYNNIYIcGAFlPg066uePdXC39z7HjEdpvuIn67+jBGwNSZpBqPE6s5rdxxHPlKt7BcQNGEkKTtdwW45Jhglw5WsOEd2OKJfDF3Klar+y5fKP1lMG5G/acoUOuUrq6Ex1+jQGLv5Pzw77tUP5hpMCuijq3UceTNf9J380mN9Og4uFv1mg4HvcqSgcOu9I7dv9vD4d1v1sPW8atibZxa+FMeg5wXwckzhNHxbBzdfiIc3v7jffPft6HBoPP74EvbCX9bO1P5q0huTi4dc/rfFyQoc3I123qdf6vfn5iU8GQxRbw2w1xy3HjJ2n2bfheG441xfIC26o+Bnd3C2mcdrLLo1Ws9nzvfB6ezcRiEam7yDdQ8kjGmWJfnf96WFpWsFoPorn05vru+Eqmcedl5wOczg21pIwKxY/gYh6WY5H0FcGsl9YvC8vpYWGWlS5ulmpUVwAE2q33FVKi1tIAaKhK5u5W9tW0/Z9w/GdtmXZhu732p4p/2vbLWPQ9lq1Bu1YnFD0UxbRMlapsrv5eZ8gWbkcWAi5tk4LsgSuvoPYxwIrAZvKw5EyDvepVPGm3bPaXy79Zm/Q71mtpq8PpMFz+gNjYDmDS1W5TcWETXIvEpAfK3jzSMGnQGhGoZT5cs65HHQuZEke8boQidFY4waDQl4EeanFrmm3HMTpKkugJIxWaVgk0MiWWVUgxHe/ppQkXlkpJ1maC5wY1TF8M8vTb3VBpE9ISwdeptQD2VQ4cyPZdT6v8rbP3lw1vFeEtDxtsroip2TH5PjTy9CU07KfmH1ihBs19/2Wv4Q4A4De4YdOS7OPF67pQfT6lpUXh5SVbt3fR9x4bBTrdVF19LKUzFzCI6mcBpoBKaTuPd2nv4ChPQT60LWzZ30SeW8/5leIJZsJLGAl50+plh94c8yAl2+OQJ6f7UcfNEchZd0EbMU5m5/Ip0nJ+N3XC3FJ6SfNX+XPJs3Dl3adwTqII/OUDw1BWVyuygvm6Y3ZIKmEpVIR0/wQ/BzAueDHxn2R91yEnKZFIeDtL0opdR0VE5IWTAR9tTIcym/FUzxl4L44vYKpJP75zt7yN+/s7+PRTArhCqt7X/pnZ41W40JALZ8GFZeOupVPUBmcxQdy/0zwUPH9niO1bGD9SfGPM+m+Mr+2HNT09Dx0/wM=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0819471388236787969</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0819471388236787969</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0819431388236783626</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0819451388236785652</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0819471388236787969</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>8C543814C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE547E84C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>5364EC15C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e79a886-e9be-43d3-b770-ef35038f0465</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true" id="ed662c97-01aa-48bd-8325-ee16d567eb6e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="e51efb9d-d1a4-4d82-90e4-c40166555eee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>D664EF26C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547896BC3A46E0401F0A079931FF:101C7E90"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0819571388236797542</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>26644506C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:26644506C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:26644506C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>D664EF26C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>396420D6C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7B649577C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:D664EF26C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:396420D6C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:7B649577C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrU+I8FP7ur+jUjzul9AK0HWEGuWhdvKyo6+6Xd2J6oNE2KU0KuL9+k2IREF19Z5zBnJ485zmXPMkRR2liB13OIReEUS3st/X/vIem3ULINtyJhwy30WoZqOU1jcizJx7ghjtpRboWcl5ASLlAVLR1u245hmUbtndjOYHlBw2n1nSd37p2BzmX0NKlVte1ZZpQHpRh23qR04AhTnhAUQo8EDgYd89HgfQMUMVJ7xytWJYB804sRBaYJq5FgCFJcA2z1Dwyt3yOIh6MyZQiUeTwEjPibf1l72KxqC2cGsunpl2v1826b0qfiJPpod45qDZDFNIJW617iDJKMErIH6RInYOIWaR1kynLiYjTd6At06oraAOW2MCWSw918zVAye6TSFskc44MHiOrAruGCeRAMWi312FbP/xcB1d7b3JE+YTlKd9Zf40S0DkkLIPI4FVmFbvPI+4pV+cIcBBSnBSczOFCjUmGMHDtKocJWY4Il8MXca1sv7bk8o9UUwb4K205Mje5Surmnur0yRS4+D892+zXCuUOJQV0bgbFVfyUxM8UDQfWwpv3z6bfRsK2H6ftksKm84rUut0v691hXc/Wy6beffgDLq5+k7OBRcaDhRhcPZpPU+/4cdHwRZy7XvGnX3TpY5GKp9PLeHT3cP1diPRkcOGcnvZZ6KTfF83+WeLU8UEz78Vuj/m+e7GkxenJrX/549dshuj8Lupl5nkYe+kc5fTerc+Jw6/9GT6x7yc/B6g/8UbZw/PAnB17325/XQA6yOiyic94a1oMkWX1fnafWfs1p80cto2VJIyLh0fAolqq8Qj72lD2C4mP5UVZSGRMStcgUxrFBVChd9QuJS1BIQWIRIFs5mrdbzbdwdBu9hq+47hWvXfsd235n+961tDvepUGrVjsUOwxOiEqllLZ1fx8TBCnAQcaQW7MWYFj4PoHiH0kkBbSa3k4GOVww6SKDxxn6PuO23R8SfnYbw6GntNw672GPfC73YauXTBxSS/z7kRAvq3gzS0FvwZMMgJK5tWccznoXMiSzNC8EIlVm6MahUJeBLnS4sB2vYbJSZoloAibKYuKBGpZnJUFMvnq1zYQ5qWVcJyxXKDEKo/hu1nufqsKIn0iohy4SukYZFNhz43kVvm8n7e/mXcF3y0iok6brK7ICV4x2f70OjRqWtYTs04Mc6vivt7yRYg9AOYH/Mzd0qzjRXOyEb26ZeXFIWWlU/V3hmqzWjGfF2VHW0oycwlvSuW0zDHgQure8w17AmquIcxPXTtr1juR1/ZtfoWI6VggAamcP61cfuLNMQau3hyhPD/Lzz5otkLKuglYin22XiKfJorxh68XHGDlJ81X8mfB8tfE92FtxJF5yoeGIHSqVuqCeX5nNjCTsEQqIss3wfcB7Au+bVwXec1FyGl6KAS8/0VTUtfWEcasoCLs66VhU35LnuI5g+DV6Q1MKfEvd/aSv3tn35+PxlIIU6Svfcm/nQ1SjgsGXT0NSi5tfSmfoDI4nW7I/QvBTcW3peK7jfo/FX87k84b81vLRk13z0PnLw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU+I8FP7ur+jUjzul9AK0HWEGuWhdvKyo6+6Xd2J6oNE2KU0KuL9+k2IREF19Z5zBnJ485zmXPMkRR2liB13OIReEUS3st/X/vIem3ULINtyJhwy30WoZqOU1jcizJx7ghjtpRboWcl5ASLlAVLR1u245hmUbtndjOYHlBw2n1nSd37p2BzmX0NKlVte1ZZpQHpRh23qR04AhTnhAUQo8EDgYd89HgfQMUMVJ7xytWJYB804sRBaYJq5FgCFJcA2z1Dwyt3yOIh6MyZQiUeTwEjPibf1l72KxqC2cGsunpl2v1826b0qfiJPpod45qDZDFNIJW617iDJKMErIH6RInYOIWaR1kynLiYjTd6At06oraAOW2MCWSw918zVAye6TSFskc44MHiOrAruGCeRAMWi312FbP/xcB1d7b3JE+YTlKd9Zf40S0DkkLIPI4FVmFbvPI+4pV+cIcBBSnBSczOFCjUmGMHDtKocJWY4Il8MXca1sv7bk8o9UUwb4K205Mje5Surmnur0yRS4+D892+zXCuUOJQV0bgbFVfyUxM8UDQfWwpv3z6bfRsK2H6ftksKm84rUut0v691hXc/Wy6beffgDLq5+k7OBRcaDhRhcPZpPU+/4cdHwRZy7XvGnX3TpY5GKp9PLeHT3cP1diPRkcOGcnvZZ6KTfF83+WeLU8UEz78Vuj/m+e7GkxenJrX/549dshuj8Lupl5nkYe+kc5fTerc+Jw6/9GT6x7yc/B6g/8UbZw/PAnB17325/XQA6yOiyic94a1oMkWX1fnafWfs1p80cto2VJIyLh0fAolqq8Qj72lD2C4mP5UVZSGRMStcgUxrFBVChd9QuJS1BIQWIRIFs5mrdbzbdwdBu9hq+47hWvXfsd235n+961tDvepUGrVjsUOwxOiEqllLZ1fx8TBCnAQcaQW7MWYFj4PoHiH0kkBbSa3k4GOVww6SKDxxn6PuO23R8SfnYbw6GntNw672GPfC73YauXTBxSS/z7kRAvq3gzS0FvwZMMgJK5tWccznoXMiSzNC8EIlVm6MahUJeBLnS4sB2vYbJSZoloAibKYuKBGpZnJUFMvnq1zYQ5qWVcJyxXKDEKo/hu1nufqsKIn0iohy4SukYZFNhz43kVvm8n7e/mXcF3y0iok6brK7ICV4x2f70OjRqWtYTs04Mc6vivt7yRYg9AOYH/Mzd0qzjRXOyEb26ZeXFIWWlU/V3hmqzWjGfF2VHW0oycwlvSuW0zDHgQure8w17AmquIcxPXTtr1juR1/ZtfoWI6VggAamcP61cfuLNMQau3hyhPD/Lzz5otkLKuglYin22XiKfJorxh68XHGDlJ81X8mfB8tfE92FtxJF5yoeGIHSqVuqCeX5nNjCTsEQqIss3wfcB7Au+bVwXec1FyGl6KAS8/0VTUtfWEcasoCLs66VhU35LnuI5g+DV6Q1MKfEvd/aSv3tn35+PxlIIU6Svfcm/nQ1SjgsGXT0NSi5tfSmfoDI4nW7I/QvBTcW3peK7jfo/FX87k84b81vLRk13z0PnLw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/bhT+kppO8IML8ta1NUFFd0vd0J6KPG2KTZpQX/9TYpFYNHVO+MM5vTkOc95yZOcMJQmVtBlDHJOMqqEg7b6j+c4hulFLc0Fy9Ec27M0z2rONIxmXoRdF9kzS1VCxgoIKeOI8rZqGaatmZZmedemHZh+0HQbTd/7rSq3kDMBLVwahqqs04SyoArbVoucBhlihAUUpcACjoNJ9+I8EJ4BqjmpnZMNyypg3llwvgx0HTciwJAkuIGzVD/R93xOIhZMSEwRL3J4iRmxtvqyd7VaNVZ2I8tj3TIMQzd8XfhEjMRf1c6XejNEIZ1nm3Uf0YwSjBLyjCSpC+CLLFK6SZzlhC/SN6BN3TQktAZrrGHToV9V/TVAxe6DSHskc4Y0tkBmDTaGOeRAMSg347Ctfv1YBzd7r3NE2TzLU3aw/hwloCUk2RIijdWZ1ew+jnikXJ0TwEFIcVIwUsJPOSZLhIEpVznMyfqcMDF8EVOq9itrJv5IPWWAP9OWE32Xq6CuH6nOgMTA+P/p2W6/Nii3KCmggx6v2NPpeGGve/7cKqeJP7k9twujSS/aFYVd5w2pbbtf1ofDup2tl03TYurZqHlvQkr008Q7m5Lz+PJuNI7RKer++HFrP41Gi2/uXZjMryA67Rqr2xGJncuxPfjW6mW/XHT26/l2MbRuyi+rq99kQZz7++J+PrWGcTrCMXf6U1KO9SguT4nfn1w+zqYGeuDoW7Nk32cPYd+cRTeujwbhKLo8H11HOB3aZ89ffHd8cdVa9mbT1tn37OHmARnt15x2c9g31pIwKWYPgHm9lOMRDpSh6Bfi78uLtJBIm1euwVJqFONAudqRu6S0BIUQIBIFopmbte27jmUM3H7Tt23HNPo9v2uJ/3zHM4d+16s1aMPigGI/o3MiY0mV3czP+wRxGjCgEeRamRV4AUx9B3GAOFJCOhaHI6MMrjOh4oJq1+r7tjPsO37LbvZ7LdseDrs9x3P73qClKj8zfkkv8+6cQ76v4O6ego8BkyUBKfNyzpkYdMZFSR5RWfDEbJSoQaEQF0EutTiwHK+pM5IuE5CE9TSLigQay8WyKpDONr+WhjCrrIThZZZzlJjVMXwzy8NvdUGET0SkA5Mp9UA0FY7cSE6dz9t5+7t51/DdIiLytInq8pzgDZP9T69DI6dlOzHbxDAza+7bLZ+EOAKgv8NPPyzNNl5Ukp3o9S0rLg4hK526v4+o8dgoyrKoOtqSkpkLeF0op6lPABdC956us3+B6lsI/UPXzpb1QeStfZ9fwRd0whGHVMyfUi0/8OaYAJNvjlCcn/VHHzR7IUXdOKz5MVs/EU8Tyfjd1wsOsPQT5ivxs8ry6LVdR7B24og8xUODExrLlbxgnt6YDZwJWCIUMct3wY8BHAu+b9wWecuFi2maFRze/qJIqWurCOOsoDwcqJVhV34rnvxpCcGr0x8wlcS/3Nlr9uadfXdxPhFCmCJ160v+7qyRalwwqPJpUHFpq2vxBBXBabwj9y8EdxXfcl3HaRp/Vfz9TDp/mP+07NT08Dx0/gM=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I8FP3ur+jUj07pCy3QjjBTBRQXlaWwvnx5JqQB4rYJJmlBf/0mxSIguu4z4wzm9ubcc19yklMO0sQJQs4RE5gSrddu6v+5ADTiug+MiVtrGO5k2jAmyJ0asWPF9nRS8y3L07Ue5xnqES4AEU3dseyqYTuG0xjZ1cCxAsuq1N3qo679QoxLaOlSsXRtlSaEB0XYpp4xElDAMQ8ISBEPBAyi8LofSM8AlJz01umaZRGQteZCLALThJUYQZQksAJpap6aOz6nMQ8iPCNAZAy9xYx5U3/bu1wuK8tqhbKZ6ViWZVq+KX1ijmfHeuuo3IziHpnS9focEEowBAl+BYrUNRJzGmthMqMMi3n6CbRt2paCNtAKGtB2ybFuvgco2H0TaYck48Dgc2CXYEM0RQwRiLTxsNfUj7/XwfXeEQOETylL+d763yghkqOELlBs8DKzkt33EQ+Uq3WKYNAjMMk4ztGNGpMFgIhrA4ameNXHXA5fzLWi/dqKyz9cThmC/9KWU3Obq6RuHqhOG88QF/+nZ9v9WqP8AkmGWvn9XZTdVS+e0j7C5Np/8ea2zwY+Pek0CwrbzmtSm3a/rfeHdTNbb5vo+PbKjzsPd+LhavZ64y0uvD6+rz9W7egEzB6X9Cp/ihL7itlj/3WeEb/eGzg/Jy/5rXN92eV3sDrB7lXtYjTpj48meb87mCz9uzgbeGNM0ovnq9lwNrIuBue37Z8PQzOaJ8tO1wGrxuPo+pGZv39cdvJGiC/Tsd2dnLWrNB53/ZNs9HIUpvMfdzds+Bz1vbwTdUJiNd9z2s5h11hKQpRNnhAU5VKNR6+tdWW/gPhaXpQFx8a0cA0WSqO4QEToLbVLSUuQSQHCcSCbuV7Xz2qu79Xr555frbq2dX7mh478z3cbdtcPG6UGrVnsUTynZIpVLKWy6/n5miBMA45IjJiR0wzOEde/QGwDAbQeGcrDQQlHIypVvGaHHaft+XW/XTvzumFYq3uS7lko157TlQp+Q8UtuWXhVCC2q+C1HQUfIogXGCmZV3PO5aBzIUvyDPJMJHYlBxWCMnkRMKXFgeM2PJPjdJEgRdhMaZwlqLKYL4oCmXz96xgA8sKKOVxQJkBiF8fw0yz3v5UFkT4xVg5cpXSGZFPR/o1k+4FX5vMhb/fgzVXCh1mM1WmT1RUMwzWT3U/vQ6OmZTMxm8Qgt0vumy3/CHEAwPyCn7lfmk28OMdb0ctbVl4cUlZaZX+fQeW5kuV5VnS0riSTSXhTKqdtRghmUvdeRvQ3IuYGwvzWtbNhvRd5Y9/ll4k5iQQQKJXzpxXLb7w5IsTVm6Mnz8/quw+anZCybgKtxCHbeSKfJorxl68XGEDlJ80D+bOkLH5v1wGsrTgyT/nQEJjM1EpdMC+fzAakEhZLRaRsG/wQwKHgu8ZNkTdchJymSSbQ5180JXVNHUBIMyJ6bb0wbMtvwVO8LFDw7vQBppD4tzt7xT+9s++v+5EUwhToG1/8d2cDF+MCka6eBgWXpr6ST1AZnMy25P6N4LbiO7Wa63pW7W+Kv5tJ64P5o2WrpvvnofUH</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0819571388236797542</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0819571388236797542</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0819521388236792142</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0819541388236794841</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0819571388236797542</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E6640036C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>496430D6C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>8B64A577C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e51efb9d-d1a4-4d82-90e4-c40166555eee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true" id="8feaff25-820c-4af3-baa6-845ba90671cd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="9acd1c9a-5834-403b-b34f-a5ecbadf81b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>0F643F88C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B4065161C7E0401F0A0799472F:700EA39F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082061388236806238</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>5E64B878C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:5E64B878C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:5E64B878C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0F643F88C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>61747D19C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A3741299C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0F643F88C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:61747D19C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:A3741299C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIBZImUUHiPulp6Qg69PJyZJwd8DRxqO1Q2q8/dmgoUNrpHKkS9c722mtfvOwzjrLUCducAxMkp1rUa+r/1pGLZ9iLDSvBM6PhJYkxm/mW4VmWf+rO6mC7sa5FnBcQUS4QFU3dsey6YTuG41/b9dCxQqtes+vuva5NgXEJLV1qlq6ts5TysAzb1AtGwxxxwkOKMuChwOGkfXkRSs8QVZz01tmGZRmQtRZCLEPTxLUYMKQpruE8M8/MPZ+zmIcTMqdIFAxeY8a8qb/ufXp6qj3Vazmbm45lWaYVmNIn5mT+XW99qzZDHNEk36y7iOaUYJSSF6RIXYJY5LHWTuc5I2KRfQBtm7aloA1YYwPbDfpdN98ClOy+iLRHknFk8AWyK7AxJMCAYtB+jaOm/v1rHdzsvWaI8iRnGT9Y/x0loCtI8yXEBq8yq9h9HfFIuVpngMOI4rTgZAUjNSZLhIFrPxkkZH1BuBy+mGtl+7U1l3+kmjLAf9OWM3OXq6RuHqlOj8yBi//Ts91+bVCmKC2g9TLL+7ftVTZPg+fxAnmP91NYrh66v+Z3zZLCrvOG1Lbdr+vDYd3O1uum82B9O7bZOcwSfNU78Tvey/PEOWWd7GHKp45zfpeDc+13yGg6RDQiV4XtnuRw0m78KIbz0WCc8R8/Fv4luxHJt4D/s165V8koHfovXjS27379jkcPQ58PU37nrhs3LDs/6d3g0eomucEPkTOL74edu7yok6G4SYuXQfpc+LOp6158i+dzc7HILPOSRcvBOb+/8ptvOe3msG+sJGFSzH4DFtVSjUfU0wayX0h8Li/KQmIjKV3DpdIoLoAKvaV2KWkJCylAJA5lMzdra+A16gPf77pBvd6wrW4naDvyv6Dh24Og7VcatGFxQLGb04SoWEplN/PzOUGchRxoDMxY5QVeANc/QewhgbSIjuXhyCmH61yq+GnfD7q247S7/UBSbHh9x/X6/bY9OA26Xs/TtVEurugVaycC2L6Ce3sKPgZMlgSUzKs553LQuZAleUSrQqR2bYVqFAp5ETClxaHT8F2Tk2yZgiJsZnlcpFBbLpZlgUy++XUMhHlpJRwvcyZQapfH8MMsD79VBZE+MVEOXKXUAdlUOLyR7CB0q3w+zjvYzbuCbxcxUadNVlcwgjdM9j+9DY2alu3EbBPD3K64b7f8JcQRAPMTfuZhabbx4hXZiV7dsvLikLLSqvr7iGqPtWK1KsqOnirJZBLelMppmxPAhdS95+v8Aai5hTC/dO1sWR9E3tr3+RViQScCCcjk/Gnl8gtvjglw9eaI5PlZf/VBsxdS1k3AWhyzdVP5NFGMP3294BArP2n+KX+ecvaW+DGsnTgyT/nQEITO1UpdMM8fzAbOJSyRipizXfBjAMeC7xu3Rd5yEXKaZoWAj79oSuqaOsI4L6iIenpp2JXfkqd4XkL45vQOppT41zt7zT+8s28vLyZSCDOkb33Jn50NUo4LBl09DUouTX0tn6AyOJ3vyP0rwV3Fd/teo+Of/lHx9zNpvTO/t+zU9PA8tP4D</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1XIBZImUUHiPulp6Qg69PJyZJwd8DRxqO1Q2q8/dmgoUNrpHKkS9c722mtfvOwzjrLUCducAxMkp1rUa+r/1pGLZ9iLDSvBM6PhJYkxm/mW4VmWf+rO6mC7sa5FnBcQUS4QFU3dsey6YTuG41/b9dCxQqtes+vuva5NgXEJLV1qlq6ts5TysAzb1AtGwxxxwkOKMuChwOGkfXkRSs8QVZz01tmGZRmQtRZCLEPTxLUYMKQpruE8M8/MPZ+zmIcTMqdIFAxeY8a8qb/ufXp6qj3Vazmbm45lWaYVmNIn5mT+XW99qzZDHNEk36y7iOaUYJSSF6RIXYJY5LHWTuc5I2KRfQBtm7aloA1YYwPbDfpdN98ClOy+iLRHknFk8AWyK7AxJMCAYtB+jaOm/v1rHdzsvWaI8iRnGT9Y/x0loCtI8yXEBq8yq9h9HfFIuVpngMOI4rTgZAUjNSZLhIFrPxkkZH1BuBy+mGtl+7U1l3+kmjLAf9OWM3OXq6RuHqlOj8yBi//Ts91+bVCmKC2g9TLL+7ftVTZPg+fxAnmP91NYrh66v+Z3zZLCrvOG1Lbdr+vDYd3O1uum82B9O7bZOcwSfNU78Tvey/PEOWWd7GHKp45zfpeDc+13yGg6RDQiV4XtnuRw0m78KIbz0WCc8R8/Fv4luxHJt4D/s165V8koHfovXjS27379jkcPQ58PU37nrhs3LDs/6d3g0eomucEPkTOL74edu7yok6G4SYuXQfpc+LOp6158i+dzc7HILPOSRcvBOb+/8ptvOe3msG+sJGFSzH4DFtVSjUfU0wayX0h8Li/KQmIjKV3DpdIoLoAKvaV2KWkJCylAJA5lMzdra+A16gPf77pBvd6wrW4naDvyv6Dh24Og7VcatGFxQLGb04SoWEplN/PzOUGchRxoDMxY5QVeANc/QewhgbSIjuXhyCmH61yq+GnfD7q247S7/UBSbHh9x/X6/bY9OA26Xs/TtVEurugVaycC2L6Ce3sKPgZMlgSUzKs553LQuZAleUSrQqR2bYVqFAp5ETClxaHT8F2Tk2yZgiJsZnlcpFBbLpZlgUy++XUMhHlpJRwvcyZQapfH8MMsD79VBZE+MVEOXKXUAdlUOLyR7CB0q3w+zjvYzbuCbxcxUadNVlcwgjdM9j+9DY2alu3EbBPD3K64b7f8JcQRAPMTfuZhabbx4hXZiV7dsvLikLLSqvr7iGqPtWK1KsqOnirJZBLelMppmxPAhdS95+v8Aai5hTC/dO1sWR9E3tr3+RViQScCCcjk/Gnl8gtvjglw9eaI5PlZf/VBsxdS1k3AWhyzdVP5NFGMP3294BArP2n+KX+ecvaW+DGsnTgyT/nQEITO1UpdMM8fzAbOJSyRipizXfBjAMeC7xu3Rd5yEXKaZoWAj79oSuqaOsI4L6iIenpp2JXfkqd4XkL45vQOppT41zt7zT+8s28vLyZSCDOkb33Jn50NUo4LBl09DUouTX0tn6AyOJ3vyP0rwV3Fd/teo+Of/lHx9zNpvTO/t+zU9PA8tP4D</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1chHySQRAUpQNnSbbtVw7IVL1euM4DbxEljBwK//tqhocDSbnulStST8ZkzHz72OUNJbPkBY5BzklJlNOio/3q4iQ2z7WqOA65mG6atIcs0NDNqtWzXxpH9CKoyYqyAEWUcUd5RLcNsaqalWe7YbPqW4RtOw2o5U1WZQM4EtHBpGKpSJjFlfhW2oxY59VPECPMpSoD5HPthcHPtC08f1ZzU7vmWZRUw7y44z3xdx40IMMQxbuA00c/1A5/ziPkhmVPEixxeY0aso77uXa1WjVWzkeZz3TIMQzc8XfhEjMy/qd2zejNEIzpLt+s+oiklGMVkgySpG+CLNFKCeJ7mhC+Sd6BN3TQktAYl1rBp02+q/hagYvdJpAOSOUMaWyCzBruHGeRAMSi/7kcd9dvnOrjdO84RZbM0T9jR+muUgC4hTjOINFZnVrP7POKJcnXPAfsjiuOCkSXcyjHJEAam3OUwI+U1YWL4IqZU7VdKJv5IPWWAv9KWc32fq6Cun6jOgMyB8f/Ts/1+bVEmKC6ga3nfy+nzw8IO5/8MFsFmnMFmPbsYZk+sU1HYd96S2rX7dX08rLvZet101VvQi7n5xL8PgvXlaPwynd2lyXpCf06XeeA6g+CK3PbGgzwlw1+Pjzi1C0QH68nL5MoLZ2O86a/MK3jIQpjoZ2gS3TmXYbGam1l7jDbBVTKGi+C6+QzXT6Uzvcc4++Hh0XrKNjdhLzYeW2X4e8lg8iPmZf7LLuNeMo0z9ELis2Evsi1yWT4XcMF/b1q8YJ23nPZzODTWkhAWj0+Aeb2U4zEaKEPRL8Q/lhdpIZE2q1z9TGoU40C52pW7pLT4hRAgEvmimdt1y2zb7YHp9R2v2bRNo9/zAkv859muOfQCt9agLYsjiv2UzoiMJVV2Oz8fE8SJz4BGkGvLtMALYOoHiAPEkTKi9+JwpJTBOBUqbg97A9v0mm7LNYb2hW0FntNrtc12b9h3PcdVlduU/6Q/82DGIT9U8NaBgt8DJhkBKfNyzpkYdMZFSV7QsuCx2ViiBoVCXAS51GLfsl1HZyTJYpCE9SSNihga2SKrCqSz7a+lIcwqK2E4S3OOYrM6hu9mefytLojwiYh0YDKlHoimwvGNZHq+U+fzft7eft41fFBERJ42UV2eE7xlcvjpbWjktOwmZpcYZmbNfbflixAnAPQP+OnHpdnFi5ZkL3p9y4qLQ8hKt+7vC2q8NIrlsqg62paSmQt4XSinqYeAC6F763H6DFTfQeifunZ2rI8i7+yH/Aq+oCFHHBIxf0q1/MSbIwQm3xwjcX7Kzz5oDkKKunEo+SlbPxZPE8n4w9cL9rH0E+Y78bNK8+itXSew9uKIPMVDgxM6lyt5wazfmQ2cClgiFDHN98FPAZwKfmjcFXnHhYtpeiw4vP9FkVLXURHGaUH5aKBWhn35rXjydQb+m9MfMJXEv97ZJXv3zn64uQ6FECZI3fmSvztrpBoXLF6swr/i0lFL8QQVwel8T+5fCe4rvnPRsntu2/2b4h9m0v3D/Kdlr6bH56H7Hw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tq4x3oJ9B2hBkE9PYoKhQVz8udkG5KtE2xSQH99ScpFgHRo3fGGczuztprf2QlJwwlsem1GYOMk5Qqfrep/me4rg7YnVYswworto3DykQ3zAqago3degjuRFcVn7EcfMo4orypmrphVYSP6YwMyzN1T3erRqP+W1XuIGMCWrhUxa5VElPmFWGbap5RL0WMMI+iBJjHsRe0+5ee8PRQyUltnaxZFgGz1ozzuadpuBoChjjGVZwm2om243MSMi8gEUU8z+AtZsia6tve5XJZXVrVNIs0U9d1TXc14RMyEh2rraNyM4Q+nabrdQfRlBKMYvKKJKk+8FkaKu04SjPCZ8kn0IZm6BK6AitcwYZNj1XtPUDB7ptIOyQzhipshowSbAhTyIBiUG6HflM9/l4H13tHGaJsmmYJ21v/jBLQBcTpHMIKKzMr2X0f8UC5WieAPZ/iOGdkAVdyTOYIA1NuMpiS1SVhYvhCphTtV1ZM/JFyygD/pC0n2jZXQV07UJ0uiYDx/9Oz7X6tUe5QnEMr6mYPpw4ko/75ILpd/c7uk37N78fOvd4sKGw7r0lt2v223h/WzWy9beob57c2erwYNurnr5P81jHR9U3twTHHFxw5p9R+CqzIj/UBGdYM6zKpmVdJv1+/mNVfJ8n9hKOM1u5+ReNg/hAfOS8ucVZ5wNJb/Vf/ohcNUj8aP+f92dOA1VeTyXj577JvdUfB/fifLtfHbnfIznpX0fz1EQ/1q6fkqX25IO3hEC+Obs8HeIStRXA+HARP4egeBs33nLZz2DWWkhDkk0fAvFzK8fC7ypnoF+Jfy4u0kLAyLVy9udQoxoFytSV3SWnxciFAJPREM9frttWwDdN1OzXXsmxD75y6bVP859qOcea2nVKD1iz2KHZSOiUyllTZ9fx8TRAnHgMaQlZZpDmeAVO/QOwijhSfDsXhSCmDUSpUvNtzO6ZzapwZVq1X654ZjTO75ridXs/qmJ1GR1WuUn5Nr7P2lEO2q+D1HQUfAiZzAlLm5ZwzMeiMi5I8o0XOY6O6QFUKubgIMqnFnmk7NY2RZB6DJKwlaZjHUJ3P5kWBNLb+FWqEWWElDM/TjKPYKI7hp1nufysLInxCIh2YTOkURFNh/0YyXK9W5vMhb/vgzVXCt/OQyNMmqsszgtdMdj+9D42cls3EbBLDzCi5b7b8EOIAgPYFP22/NJt44YJsRS9vWXFxCFlplf19RtXnar5Y5EVHG1IyMwGvCeU0tABwLnTvZZQ+AdU2ENq3rp0N673IG/suv5zPaMARh0TMn1Isv/HmCIDJN4cvzs/quw+anZCibhxW/JCtE4uniWT85esFe1j6CfON+FmmWfjergNYW3FEnuKhwQmN5EpeMC+fzAZOBSwRiphm2+CHAA4F3zVuirzhwsU0TXIOn39RpNQ1VYRxmlPud9XCsC2/BU/+Mgfv3ekDTCHxb3f2in16Z4/7l4EQwgSpG1/yd+cKKcYFgyqfBgWXproST1ARnEZbcv9GcFvxa726feo0nL8p/m4mrQ/mj5atmu6fh9Yf</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082061388236806238</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082061388236806238</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082021388236802123</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082041388236804357</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_082061388236806238</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1F645F88C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>71747E19C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>B3742299C5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9acd1c9a-5834-403b-b34f-a5ecbadf81b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true" id="08e03280-ae5b-49a7-ae90-b53d38c00203"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="29c5911f-9b6d-4461-8c1c-ca001cb9afc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>3774ED8AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547896FE3A46E0401F0A079931FF:2C589B86"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0820151388236815390</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>86740B7AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:86740B7AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:86740B7AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>3774ED8AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>9974FD1BC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7C7413DBC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:3774ED8AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:9974FD1BC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:7C7413DBC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jx0j2xgwnsAMGLJLExIWUkr6sqPK16DWlh1LBsOvX8nEBChJ053JDNH11bnnfuhIVxzHke31OIdM0IRpo0FH/9cMvrtOGDSMhmliwyGthuGGzbaBQ6sd1putNpBQ10ac5zBiXGAmOrptWnXDsg3bfbDqnm16llWrW843XZtDxiW0dKmZulbEEeNeGbaj5xnzEswp9xiOgXuCeLPe+NaTnh6uOOndqz3LMmDWXQmRegiRWgAEoojUSBKjK3TicxVwb0aXDIs8g+eYAe/oz3s3m01tU68l2RLZpmkis42kT8Dp8qPe/VBthmDEwmS/9jFLGCU4ojusSI1BrJJA60XLJKNiFb8CbSHLVNAGFMQglsM+6uglQMnunUgnJDOODb7CVgU2hRAyYAS0L9NRR//4vg7u9z5kmPEwyWJ+tv4zSsDWECUpBAavMqvYvR/xQrm6V0C8ESNRzuka7tSYpJgA1yYZhLS4pVwOX8C1sv1aweUfraYMyJ+05Qodc5XU0YXqDOgSuPg/PTvu1x5ljqMcuvVovm1n4H/FCPEghtV0iD5nUR/Nhp2SwrHzntSh3c/r82E9zNbzpt5uzuNJuHD+elxYcD2PFkvbun9a8/lX37ndfqXXAdw3W4FFb0xoZovZnRxLtFpeF3f9zU2TDjcPkzG06jtiLz7MLM7YVOxuWMHnN6sfn9xF4VxjM/nipmIWfNt9Ytulza3J9OdkmD6kn58e7XSD5/7EbLXF7lvwzw6w+/lxXjxuP8wGN+Mvj9a2+dgvzOLvn+Ox2XnJ6TiHU2MlCbP8+w8golqq8RgNtGvZLyzelhdloYERlq5eqjSKC2BC76pdSlq8XAoQDTzZzP263mo5w4Hb8xvtet2xTL/f7tnyv7bjWtftnltp0J7FGUU/YSFVsZTK7ufnbYIk9jiwADJjneRkBVx/A3GABdZGbCoPR8I4PCRSxYeu47pOs9Ec9oYDxzf7fqPvD0zfd9utul+3dO0uEffsPuuFArJTBW+eKPgUCE0pKJlXc87loHMhS/KE17mIrNoa1xjk8iLIlBZ7tuM2EKdxGoEijOIkyCOopau0LBDi+1/bwISXVspJmmQCR1Z5DF/N8vxbVRDpE1DlwFVKfZBNhQs3klnl83re7eO8K/heHlB12mR1RUbJnsnpp5ehUdNymJhDYoRbFffDlj+EuACA3uCHzktziBes6VH06paVF4eUlW7V3ydce6rl63VedrSlJDOT8Egqp4VmQHKpe9uH5CcwdIBA77p2DqzPIh/sp/xysWIzgQXEcv60cvmON8cMuHpzjOT5Kd77oDkJKesmoBCXbH4knyaK8ZuvF+IR5SfNE/mzSbLgpV0XsI7iyDzlQ0NQtlQrdcFsX5kNkkhYKhUxyY7BLwFcCn5qPBT5wEXIafqeC3j9i6akrqNjQpKcidFALw3H8lvyFNsUvBenX2BKiX++swv+6p29GN/OpBDGWD/40t87G7QcFwK6ehqUXDp6IZ+gMjhbHsn9M8FjxXebLcfst36r+KeZdH8x/2o5qun5eej+Bw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jx0j2xgwnsAMGLJLExIWUkr6sqPK16DWlh1LBsOvX8nEBChJ053JDNH11bnnfuhIVxzHke31OIdM0IRpo0FH/9cMvrtOGDSMhmliwyGthuGGzbaBQ6sd1putNpBQ10ac5zBiXGAmOrptWnXDsg3bfbDqnm16llWrW843XZtDxiW0dKmZulbEEeNeGbaj5xnzEswp9xiOgXuCeLPe+NaTnh6uOOndqz3LMmDWXQmRegiRWgAEoojUSBKjK3TicxVwb0aXDIs8g+eYAe/oz3s3m01tU68l2RLZpmkis42kT8Dp8qPe/VBthmDEwmS/9jFLGCU4ojusSI1BrJJA60XLJKNiFb8CbSHLVNAGFMQglsM+6uglQMnunUgnJDOODb7CVgU2hRAyYAS0L9NRR//4vg7u9z5kmPEwyWJ+tv4zSsDWECUpBAavMqvYvR/xQrm6V0C8ESNRzuka7tSYpJgA1yYZhLS4pVwOX8C1sv1aweUfraYMyJ+05Qodc5XU0YXqDOgSuPg/PTvu1x5ljqMcuvVovm1n4H/FCPEghtV0iD5nUR/Nhp2SwrHzntSh3c/r82E9zNbzpt5uzuNJuHD+elxYcD2PFkvbun9a8/lX37ndfqXXAdw3W4FFb0xoZovZnRxLtFpeF3f9zU2TDjcPkzG06jtiLz7MLM7YVOxuWMHnN6sfn9xF4VxjM/nipmIWfNt9Ytulza3J9OdkmD6kn58e7XSD5/7EbLXF7lvwzw6w+/lxXjxuP8wGN+Mvj9a2+dgvzOLvn+Ox2XnJ6TiHU2MlCbP8+w8golqq8RgNtGvZLyzelhdloYERlq5eqjSKC2BC76pdSlq8XAoQDTzZzP263mo5w4Hb8xvtet2xTL/f7tnyv7bjWtftnltp0J7FGUU/YSFVsZTK7ufnbYIk9jiwADJjneRkBVx/A3GABdZGbCoPR8I4PCRSxYeu47pOs9Ec9oYDxzf7fqPvD0zfd9utul+3dO0uEffsPuuFArJTBW+eKPgUCE0pKJlXc87loHMhS/KE17mIrNoa1xjk8iLIlBZ7tuM2EKdxGoEijOIkyCOopau0LBDi+1/bwISXVspJmmQCR1Z5DF/N8vxbVRDpE1DlwFVKfZBNhQs3klnl83re7eO8K/heHlB12mR1RUbJnsnpp5ehUdNymJhDYoRbFffDlj+EuACA3uCHzktziBes6VH06paVF4eUlW7V3ydce6rl63VedrSlJDOT8Egqp4VmQHKpe9uH5CcwdIBA77p2DqzPIh/sp/xysWIzgQXEcv60cvmON8cMuHpzjOT5Kd77oDkJKesmoBCXbH4knyaK8ZuvF+IR5SfNE/mzSbLgpV0XsI7iyDzlQ0NQtlQrdcFsX5kNkkhYKhUxyY7BLwFcCn5qPBT5wEXIafqeC3j9i6akrqNjQpKcidFALw3H8lvyFNsUvBenX2BKiX++swv+6p29GN/OpBDGWD/40t87G7QcFwK6ehqUXDp6IZ+gMjhbHsn9M8FjxXebLcfst36r+KeZdH8x/2o5qun5eej+Bw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7fv4JhPyMEUJGpznidTe+tvZ2+nIlhqemGxJKAdv/6k2Cxam13e2YcNYuVb33rwpccCZwmbtgVAjJJOTOiQdv812kGqDVtTaxgAg3L92LPmtQJsnAzBoyCRhD7sWlEQuQQMSExk23TdZBnIddygxvkha4TonoNocajadxBJhS0cqk5prFKEybCMmzbzDMWciyoCBlOQYSShOPu2WmoPENccTI7R2uWZcCsM5dyEdo2qcVAIElIjfDUPrJ3fI5iEY7pjGGZZ/AaMxZt83XvcrmsLb0az2a26ziO7bRs5RMLOvtpdn5UmyGO2JSv133MOKMEJ/QP1qTOQM55bHSTGc+onKcfQCMbORraghWxCPLZT9N+C1Cy+yLSDslMYEvMMarArmEKGTACxu111DZ/fq2D6703GWZiyrNU7K2/RwlYAQlfQGyJKrOK3dcRD5SrcwQkjBhJckELONdjssAEhHGZwZSuTqlQwxcLo2y/sRLqQ6spA/KdthzZ21wVdftAdQZ0BkL+n55t92uNcoeTHDr3qwYaOXk8XA7joTOjxa0nf8/vGL0j7ZLCtvOa1Kbdr+v9Yd3M1uumqxMkl7/P6437wZV/cVn8WRb51WiwXBx3X9IF3DpzfhIg++Hk1z+TIp8EXXp5NmLRjfoidjEKPLS6P7nntPfy8PAjOxZnsTNpng/HT41jH3y6SkRrKI6ns/ObtHgK4vxpGDfoVeDUySM96fePo8Gpe9sTfJV1o+fkMvWG49NL9njNf9z2o+Yv8evCo4lt58mdNyHtt5y2c9g1VpIwzidPQGS11OMRDYyR6heWn8uLttDYmpau4UJrlJDApNnRu7S0hLkSIBqHqpnrdavV9EcD1OvXW57nI6ffa3Vd9a/lB2jU6gaVBq1Z7FHsczalOpZW2fX8fE6QpKEAFkNmFTwncxDmJ4gDLLERsWv1cnAm4IYrFR94Q6+PhoHj+z235zUGrtt1vFYQ1F2n7jUapnHO5QW7yLpTCdmugjd2FPwaCF1Q0DKv51yoQRdSleQZF7lMUK3ANQa5OggyrcWh6wd1W9B0kYAmbKc8zhOoLeaLskC2WP+6FiaitFJBFjyTOEHla/hhlvvPqoIon5hqB6FT6oFqKhw4kZwqn3d5+wdPrgq+m8dUv22qujKjZM1k99Hb0Ohp2UzMJjEiUMV9s+WbEAcA7E/42ful2cSLC7oVvTpl1cGhZKVT9fcZ155reVHkZUebWjIzBW8r5UT2GEiudO/lhv8GZm8g7C8dOxvWe5E39l1+uZyzscQSUjV/Rrn8wp1jDELfOSL1/qy+eqHZCanqJmElD9n6ibqaaMaf3l5ISLSfMl+qnyXP3hI/hLUVR+WpLhqSsple6QPm5YPZIFzBUqWIPNsGPwRwKPiucVPkDReppmmSS/j4iaGlrm1iQnjOZDQwS8O2/JY85csCwjendzClxL+e2Svx4Zn9cHY6VkKYYnPjS//ubNFyXAiY+mpQcmmbK3UFVcHZbEvuXwluK37QaPpOr9n9m+LvZtJ5Z35v2arp/vvQ+Q8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3vr/C4jx3jazD2BGaMgYbmHkia5uUbIa9BxZYcSwaSX1/ZxAQISdNvJjNE69XZsxcd6ZijNLH8gHPIBWFUGfba6n+t2IphEsea7Rmx5ngT0DywPM2JPPAQiiBqmaoy5LyAIeUCUdFWLcO0NdPSrNbYtH3L8M1Ww2kaD6pyBzmX0NKlYajKKk0o96uwbbXIqc8QJ9ynKAXuC+yPgvMzX3r6qOakdo7XLKuAeWcmRObrOm5EgCFJcAOzVD/Wd3yOI+6PyJQiUeTwEjPibfVl73K5bCztBsunumUYhm54uvSJOJl+VTtf6s0QDWnM1usQUUYJRgl5RiWpcxAzFilBMmU5EbP0HWhTN40SWoMV1rDp0K+q/hqgYvdJpB2SOUcanyGzBruBGHKgGJTbm2Fb/fq5Dq73jnNEeczylO+t/40S0AUkLINI43VmNbvPIx4oV+cYsD+kOCk4WcBFOSYZwsCVqxxisjojXA5fxJWq/cqKyz9STxngf2nLsb7NVVLXD1SnR6bAxf/p2Xa/1ih3KCmgE/az3zNIwixyLRPfja/dm/RoVdyf9px2RWHbeU1q0+6X9f6wbmbrZdP47tfZvTmZ0oe7ZcLFqZfcdR+W5/0guH/Qx/OTZXhtu7eXg+nPZz4Ywf0vqzf/1nTsH8/Bye2Vw+/7pyZz4dYcPLhfRovrH/M0x9kJv/p+Zi8XlhWy3nc0X0Tz1vzk26OhX0CTdtPT52VYsMnjskgC/p310cCli4uWg69/Xrq/mixZRV+W35rNOAyGAzaZmCfhY5fg9mtO2znsGmtJGBWT34BFvSzHY9hTBrJfSHwsL6WFRFpcufpZqVFcABVqp9xVSotfSAEikS+buV67oeuYdq8bHnm27ZhG2PUCS/7nOS1z4AWtWoPWLPYohozGpIxVqux6fj4miFOfA40g1xaswDPg6geIPSSQMqQ38nAwymHMpIof2WG3a/dswzP6oWd4ptd3B2G/F7Zapnt05KrKBROX9DIPYgH5roI3dxT8BjDJCJQyX845l4POhSzJI1oUIjEbC9SgUMiLIC+12Lec1pHOSZolUBLWUxYVCTSyWVYVSOfrX0tDmFdWwnHGcoESszqG72a5/60uiPSJSOnAy5S6IJsKB24ko87nTd7OwZurhg+KiJSnTVZX5ASvmex+eh2aclo2E7NJDHOz5r7Z8o8QBwD0D/jp+6XZxIsWZCt6fcvKi0PKSqfu7yNqPDaKxaKoOuqWkplLeF0qp6mPABdS957GbA5U30Don7p2Nqz3Im/su/wKMaMjgQSkcv6UavmJN8cIePnmGMrzs/rsg2YnpKybgJU4ZAsT+TQpGX/4esE+Lv2k+Ur+LFkevbbrANZWHJmnfGgIQqflqrxgnt6ZDcwkLJGKyPJt8EMAh4LvGjdF3nARcpomhYD3vyil1LVVhDErqBj21MqwLb8VT/GUgf/q9AamkviXO3vF372z78/PRlIIU6RufMnfnTVSjQsGtXwaVFza6ko+QWVwOt2S+xeC24rfarqO0XWDvyn+biadN+a3lq2a7p+Hzh8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0820151388236815390</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0820151388236815390</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0820101388236810245</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0820121388236812551</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0820151388236815390</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>4774FD8AC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>A9742E1BC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>8C7433DBC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29c5911f-9b6d-4461-8c1c-ca001cb9afc6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true" id="eed38a5f-73cf-4e42-814c-ae2a07867767"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="15e41a60-413b-4cb6-9faa-5e377e3715ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>008402DCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547897213A46E0401F0A079931FF:EF905EBC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0820241388236824413</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>5F74AABCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:5F74AABCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:5F74AABCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>008402DCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>62844C6DC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4584270EC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:008402DCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:62844C6DC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4584270EC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1N6oZXSEWYqlXOqxQuoR335JqYbiLYpNCmgv/4kxSIgevSbYaZkd2fttS9dyRFDaWJ5PmOQc5JRJQxa6n9WAxkwbLqaAQ1Ds3HD1FzHjDUECLBtY8Mym6oSMlZASBlHlLdUyzDrmmlplntt1j3LEL/aYd19UJVbyJmAFi41Q1UWaUKZV4ZtqUVOvQwxwjyKUmAex97A70We8PRQxUltHy1ZlgHz9pjziafruBYDhiTBNZyl+pG+4XMUM29ARhTxIoe3mDFrqW975/N5bV6vZflItwzD0I2mLnxiRkb7anuv2gxxSIfZct1BNKMEo4S8IkmqB3ycxYqfjLKc8HH6CbSpm4aE1mCBNWzadF/V3wOU7L6JtEEyZ0hjY2RWYH0YQg4Ug3LTD1vq/vc6uNx7nSPKhlmesq31zygBnUGSTSDWWJVZxe77iDvK1T4C7IUUJwUjMziXYzJBGJhymcOQLCLCxPDFTCnbryyY+JFqygD/pC1H+jpXQV3fUZ2AjIDx/9Oz9X4tUW5RUkA7PWgEj3bGDq5uDh7TaxbdPk7CaPBcnF21SgrrzktSq3a/rbeHdTVbb5sC4yq4Kzpnp3FEOgk8XSTm8Fnvu4srxl7hwPnNLnU4bbid+UvvlE2d6PWPGz4b5uv0cBQd3py+OHVMo192EI343qw/JrPJpdUdoN9P4Jz3fpmWHYzwYmreXb+cnNe7f8zFQ8MO7u8vu+cNfG/djQ/GIbmJelmTOQ/R4Gl0m0evwVXvcO/q/lHv3x50p/f+/Zkzfc39ees9p/UcNo2VJAyKxyfAvFrK8QgDpSv6hfjX8iItJNaGpas3kRrFOFCutuUuKS1eIQSIxJ5o5nJtGK5tWEGn4zTrdds0OsdN3xL/mrZrdpu+W2nQksUWxU5Gh0TGkiq7nJ+vCeLUY0BjyLVZVuAxMPULxABxpIS0Lz6OjDK4zoSKnzh123W6tuGaftM2TuqG65q22+hYtmP5jq8q5xm/oBe5P+SQbyr44YaC9wGTCQEp83LOmRh0xkVJpmhW8MSszVCNQiEOglxqsWeJsDoj6SQBSVhPs7hIoDYZT8oC6Wz5tDSEWWklDE+ynKPELD/DT7PcflcVRPjERDowmdIxiKbCjhPJrPL5PO/met4VvF/ERH5toro8J3jJZPPV+9DIaVlNzCoxzMyK+2rLDyF2AOhf8NO3S7OKF8/IWvTqlBUHh5CVdtXfKapNa8VsVpQdbUjJzAW8LpTT1AeAC6F7L9fZM1B9BaF/69hZsd6KvLJv8iv4mA444pCK+VPK5TfuHANg8s4Riu9n8d0LzUZIUTcOC77L1knE1UQy/vL2gj0s/YT5UjzmWR6/t2sH1lockae4aHBCR3IlD5iXT2YDZwKWCEXM8nXwXQC7gm8aV0VeceFimh4LDp+/UaTUtVSEcVZQHgZqaViX35Inf5mA9+70AaaU+Lcze8E+PbPvetFACGGK1JUv+bezRspxwaDKq0HJpaUuxBVUBKejNbl/I7iu+E63Yfv+8T8VfzOT9gfzR8taTbe/h/Zf</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1N6oZXSEWYqlXOqxQuoR335JqYbiLYpNCmgv/4kxSIgevSbYaZkd2fttS9dyRFDaWJ5PmOQc5JRJQxa6n9WAxkwbLqaAQ1Ds3HD1FzHjDUECLBtY8Mym6oSMlZASBlHlLdUyzDrmmlplntt1j3LEL/aYd19UJVbyJmAFi41Q1UWaUKZV4ZtqUVOvQwxwjyKUmAex97A70We8PRQxUltHy1ZlgHz9pjziafruBYDhiTBNZyl+pG+4XMUM29ARhTxIoe3mDFrqW975/N5bV6vZflItwzD0I2mLnxiRkb7anuv2gxxSIfZct1BNKMEo4S8IkmqB3ycxYqfjLKc8HH6CbSpm4aE1mCBNWzadF/V3wOU7L6JtEEyZ0hjY2RWYH0YQg4Ug3LTD1vq/vc6uNx7nSPKhlmesq31zygBnUGSTSDWWJVZxe77iDvK1T4C7IUUJwUjMziXYzJBGJhymcOQLCLCxPDFTCnbryyY+JFqygD/pC1H+jpXQV3fUZ2AjIDx/9Oz9X4tUW5RUkA7PWgEj3bGDq5uDh7TaxbdPk7CaPBcnF21SgrrzktSq3a/rbeHdTVbb5sC4yq4Kzpnp3FEOgk8XSTm8Fnvu4srxl7hwPnNLnU4bbid+UvvlE2d6PWPGz4b5uv0cBQd3py+OHVMo192EI343qw/JrPJpdUdoN9P4Jz3fpmWHYzwYmreXb+cnNe7f8zFQ8MO7u8vu+cNfG/djQ/GIbmJelmTOQ/R4Gl0m0evwVXvcO/q/lHv3x50p/f+/Zkzfc39ees9p/UcNo2VJAyKxyfAvFrK8QgDpSv6hfjX8iItJNaGpas3kRrFOFCutuUuKS1eIQSIxJ5o5nJtGK5tWEGn4zTrdds0OsdN3xL/mrZrdpu+W2nQksUWxU5Gh0TGkiq7nJ+vCeLUY0BjyLVZVuAxMPULxABxpIS0Lz6OjDK4zoSKnzh123W6tuGaftM2TuqG65q22+hYtmP5jq8q5xm/oBe5P+SQbyr44YaC9wGTCQEp83LOmRh0xkVJpmhW8MSszVCNQiEOglxqsWeJsDoj6SQBSVhPs7hIoDYZT8oC6Wz5tDSEWWklDE+ynKPELD/DT7PcflcVRPjERDowmdIxiKbCjhPJrPL5PO/met4VvF/ERH5toro8J3jJZPPV+9DIaVlNzCoxzMyK+2rLDyF2AOhf8NO3S7OKF8/IWvTqlBUHh5CVdtXfKapNa8VsVpQdbUjJzAW8LpTT1AeAC6F7L9fZM1B9BaF/69hZsd6KvLJv8iv4mA444pCK+VPK5TfuHANg8s4Riu9n8d0LzUZIUTcOC77L1knE1UQy/vL2gj0s/YT5UjzmWR6/t2sH1lockae4aHBCR3IlD5iXT2YDZwKWCEXM8nXwXQC7gm8aV0VeceFimh4LDp+/UaTUtVSEcVZQHgZqaViX35Inf5mA9+70AaaU+Lcze8E+PbPvetFACGGK1JUv+bezRspxwaDKq0HJpaUuxBVUBKejNbl/I7iu+E63Yfv+8T8VfzOT9gfzR8taTbe/h/Zf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj1VwEgIkUUHieiaaMqVQeuHlyDgGTBM7xA6X+fpjh4YCpZ3OkSpR72yvvfbFy77mMI5sv8k5TgVhVAs6df3fmlO2cGhBY2qHyHDCsGpM4WxqIOwh2/JQtewhXQs4z3BAuYBU1HXbtMqGZRu2e2+Vfdv0badk295E1x5wyiW0dCmZuraNI8r9PGxdz1LqM8gJ9ymMMfcF8kfN/o0vPX1YcNIb13uWecC0sRAi8QFApRAjHEWohFgMrsGJz3XI/RGZUyiyFL/GDHldf9272WxKm3KJpXNgm6YJTA9In5CT+Xe98a3YjMOAzth+3YaUUYJgRH5DRaqPxYKFWjOas5SIRfwBtAUsU0EbeIsMZDn0uw7eAuTsvoh0QjLl0OALaBVgQzzDKaYIa+NhUNe/f62D+733KaR8xtKYn63/jhKmaxyxBIcGLzIr2H0d8UK5GtcY+QFFUcbJGv9SY5JAhLk2SPGMbG8Il8MXci1vv7bl8o8UU4bR37TlGhxzldTBhep0yBxz8X96dtyvPcoDjDLcuJrfJ6vBtpvWwI4CZJvL9giVNw/TKqvnFI6d96QO7X5dnw/rYbZeN9G7iZnBwBw8uagK+reT/mPwQLvPLxP7eTV4nj8/TMa1u1a6s662i38qW7c3nD+v+m7v0eoF5Y539WNz1apNa5XxyPtWm8yW5R+8/buNrLt1Us0GrFnrjDbD5SOKh2PmWk83u+cdGfWXzWC0vOo9PgW73c/Im66qdy8xcMbLJzf5wc311eLbzQCsx3e9PhhPNrfdZPUym9ffcjrO4dRYSMIomy4xEsVSjUfQ0XqyX1B8Li/KQkJjlrv6idIoLjAVekPtUtLiZ1KASOjLZu7XVdt1nHa106545bJjme2W17Tlf57jWj2v6RYatGdxRrHN6IyoWEpl9/PzOUEU+xzTEKfGmmVogbn+CWIHCqgFdCgPB6Mc3zOp4p7rds2KU+lWyk67Vuu27JbbqbqdbrvaNL2qo2u/mLilt2lzJnB6quDVEwUfYkQSgpXMqznnctC5kCVZwXUmIqu0hiWKM3kRpEqL5T63AjiJkwgrwiBmYRbhUrJI8gIBvv+1DYh4biUcJSwVMLLyY/hhluffioJIn5AoB65SamHZVHzhRrKKfN7l7Vy8uQr4ZhYSddpkdUVK0J7J6ae3oVHTcpiYQ2KIWwX3w5a/hLgAAD7hB85Lc4gXrslR9OKWlReHlJVG0d8VLK1K2Xqd5R2tKclMJTyQymmBEUaZ1L3dPXvBFBwgwJeunQPrs8gH+ym/TCzoSECBYzl/Wr78wptjhLl6cwTy/Gy/+qA5CSnrJvBWXLK1I/k0UYw/fb0gHyk/aR7Inw1Lw7d2XcA6iiPzlA8NQehcrdQFs/tgNhCTsEQqIkuPwS8BXAp+ajwU+cBFyGmaZgJ//EVTUlfXIUIsoyLo6LnhWH5znmKXYP/N6R1MLvGvd/aWf3hnP/VvRlIIY6gffMmfnQ2SjwvCunoa5Fzq+lY+QWVwOj+S+1eCx4pf6dWcZrPV/pPin2bSeGd+bzmq6fl5aPwH</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiU9A0oHWGGN3fr6q4K7rj3y52QnkK0TUuTQvXX36RYBERX74wzmNOT5zznJU9yynES236fc8gFTZkWjLr6v4Atz3RmHcNxo5nhzmzbmEW4aeBm5HkEY6vTdHUt4LyAgHGBmejqtmk5hmUbtje1HN82fdtrNNv2P7r2G3IuoaVLw9S1MokZ96uwXb3ImZ9iTrnPcALcF8Sf9C8vfOnp45qT3jvdsKwC5r2FEJmPEGmEQCCOSYOkCTpFez6nIfcndM6wKHJ4jhnyrv68d71eN9ZOI83nyDZNE5kdJH1CTudf9d6XejOEAYvSzXqIWcoowTF9worUJYhFGmr9eJ7mVCySN6AtZJkK2oCSGMRy2VcdvQSo2H0QaY9kzrHBF9iqwW4gghwYAe32JujqXz/Wwc3eaY4Zj9I84Qfrz1ECtoI4zSA0eJ1Zze7jiEfK1TsF4geMxAWnK/ipxiTDBLh2lUNEywvK5fCFXKvar5Vc/tF6yoB8pi2naJerpI6OVGdE58DF/+nZbr82KL9xXEDPLpxlK73BLAjH8iy0E8LC+L48+fM471YUdp03pLbtfl4fDut2tp43fVu2ccZvb8zfbdpZmpaV3XuL79f4+/g8zs6vycPIWo4TbMfmZYGumBdkyzt6Hk3HCc8u1/PLkxa4TwXcZeHT4gs+eaQD+jNBVisLvkHoebB+ur0f359Mi/vQvA3WzsXjt9X4D3lyrlbJeQuhYD2JHmJUOuVoWQ6vI7qcktkP87r8Ut7OL8gArbyT1QP9PqPnv9bdl5x2c9g31pIwKWb3QES9VOMRjLQz2S8s3pcXZaGhEVWufqY0igtgQu+pXUpa/EIKEA192czN2m16rt02x8Nmx3FcyxwOOn1b/tdxPeus0/dqDdqwOKA4TFlEVSylspv5eZ8gSXwOLITcWKUFWQDX30EcYYG1gN3Iw5EyDtNUqrjpeebgzBm7Z5bVdvotp9lpms2Waw3NgeUNbF37mYpf7FfejwTk+wre2lPwGyA0o6BkXs05l4POhSzJEq8KEVuNFW4wKORFkCst9m3XayJOkywGRRglaVjE0MgWWVUgxDe/toEJr6yUkyzNBY6t6hi+meXht7og0iekyoGrlAYgmwpHbiSrzudV3u7Rm6uG7xchVadNVlfklGyY7H96GRo1LduJ2SZGuFVz3275JMQRAPQOP3RYmm28cEV3ote3rLw4pKz06v4ucWPZKFaroupoW0lmLuGRVE4LTYAUUvcep+kDMLSFQB+6drasDyJv7fv8CrFgE4EFJHL+tGr5gTfHBLh6cwTy/JQffdDshZR1E1CKY7ZhLJ8mivG7rxfiE+UnzVfyZ53m4Uu7jmDtxJF5yoeGoGyuVuqCeXxjNkgqYalUxDTfBT8GcCz4vnFb5C0XIadpVgh4+4umpK6rY0LSgolgpFeGXfmteIrHDPwXp1cwlcQ/39klf/POvru8mEghTLC+9aV/dzZoNS4EdPU0qLh09VI+QWVwNt+R+2eCu4rfPGu7/f5g+DfF38+k98r82rJT08Pz0PsP</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0820241388236824413</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0820241388236824413</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0820191388236819479</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0820221388236822015</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0820241388236824413</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>108432DCC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>72849C6DC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>5584370EC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15e41a60-413b-4cb6-9faa-5e377e3715ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="2d90f6cd-846f-4459-b189-9446b8b5b03e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ffd6501d-b35a-4c45-b645-262fe9a8d8c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>D884B04FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547897473A46E0401F0A079931FF:35A8D443"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0820351388236835370</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>28845E2FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:28845E2FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:28845E2FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>D884B04FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>3B840E00D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7D8410B0D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:D884B04FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:3B840E00D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:7D8410B0D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrU+I8FP6+v6JTP+6UXiiXdoSZUtAFQVTE25d3QnqA7LZpbVJAf/0mhSIguvrOOIM5PXnOcy55klOGotByPcYg5SSmSrfdUP8r2xMT4SrWzMAyNbtsglYPbFOzbBOsyWRqo6CiKl3GMuhSxhHlDdUyzLJmWppVvzXLrmW4ZbNk1qpPqnIHKRPQwqVkqMoqCilz87ANNUupGyNGmEtRBMzl2B15g74rPF1UcFKbp2uWecC0Oec8cXUdlwLAEIa4hONIP9X3fE4D5o7IjCKepbCJGbCGutm7XC5Ly3IpTme6ZRiGbji68AkYmZ2ozR/FZgi6dBqv1z6iMSUYheQVSVID4PM4ULxwFqeEz6MPoE3dNCS0BiusYdOmJ6r+FiBn90WkPZIpQxqbI7MAu4EppEAxKOObbkM9+VoH13tvU0TZNE4jdrD+HiWgCwjjBAKNFZkV7L6OeKRczVPAbpfiMGNkAZdyTBKEgSlXKUzJqk+YGL6AKXn7lRUTf6SYMsDfacupvstVUNePVKdNZsD4/+nZbr/WKHcozKBJKq3lhb86N/hk9vo6vphf+E+9V/28d7Zs5BR2ndektu3erA+HdTtbm03jaJINB+znVej8Gq4eu6SF8MXUR89z70K/x2hwM34kLxlcD67R+YB5l46nP5w/9Sdjx+787PTYQ6U8Tx784VNl9aOPRo5/367oV71J1Z/V65zVWvbY9qLW9LHcIu3bVj+prPz59Dbq3KS98+R+XvPuA7//EFkjq3dXW1y3awNn+FL/9aM2MKZ3vb79JxzXfke94fPyuvGW024O+8ZCEkbZ5DdgXizleHTbypnoF+Kfy4u0kECb5q5uIjWKcaBcbcpdUlrcTAgQCVzRzPW6Xa/bLcM+8ytOuWybht9yPEv859h188zx6oUGrVkcUPRjOiUyllTZ9fx8ThBHLgMaQKot4gzPgamfILYRR0qX3ojDEVMGt7FQ8XrVadm1WqVaMTr1SvvM63Qc02sbrVan1vGrnqpcxnxIh6k35ZDuK3h1T8FvAJOEgJR5OedMDDrjoiTPaJHx0CwtUIlCJi6CVGqxa9n1is5IlIQgCetRHGQhlJJ5khdIZ+tfS0OY5VbCcBKnHIVmfgw/zPLwW1EQ4RMQ6cBkSi0QTYUjN5JV5PNx3s5u3gW8lwVEnjZRXZ4SvGay/+ltaOS0bCdmmxhmZsF9u+WbEEcA9E/46Yel2cYLFmQnenHLiotDyEqz6O8zKj2XssUiyztak5KZCnhdKKepjwBnQvdebuM/QPUthP6la2fL+iDy1r7PL+NzOuKIQyTmT8mXX3hzjIDJN0dXnJ/VVx80eyFF3Tis+DGbH4qniWT86esFu1j6CfOV+FnGafDWriNYO3FEnuKhwQmdyZW8YF4+mA0cC1giFDFOd8GPARwLvm/cFnnLhYtpmmQcPv6iSKlrqAjjOKO821Zzw6785jz5SwLum9M7mFziN3f2in14Zz8M+iMhhBFSt77k384ayccFgyqfBjmXhroST1ARnM525H5DcFfxLaH4lY71T8Xfz6T5zvzeslPTw/PQ/As=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU+I8FP6+v6JTP+6UXiiXdoSZUtAFQVTE25d3QnqA7LZpbVJAf/0mhSIguvrOOIM5PXnOcy55klOGotByPcYg5SSmSrfdUP8r2xMT4SrWzMAyNbtsglYPbFOzbBOsyWRqo6CiKl3GMuhSxhHlDdUyzLJmWppVvzXLrmW4ZbNk1qpPqnIHKRPQwqVkqMoqCilz87ANNUupGyNGmEtRBMzl2B15g74rPF1UcFKbp2uWecC0Oec8cXUdlwLAEIa4hONIP9X3fE4D5o7IjCKepbCJGbCGutm7XC5Ly3IpTme6ZRiGbji68AkYmZ2ozR/FZgi6dBqv1z6iMSUYheQVSVID4PM4ULxwFqeEz6MPoE3dNCS0BiusYdOmJ6r+FiBn90WkPZIpQxqbI7MAu4EppEAxKOObbkM9+VoH13tvU0TZNE4jdrD+HiWgCwjjBAKNFZkV7L6OeKRczVPAbpfiMGNkAZdyTBKEgSlXKUzJqk+YGL6AKXn7lRUTf6SYMsDfacupvstVUNePVKdNZsD4/+nZbr/WKHcozKBJKq3lhb86N/hk9vo6vphf+E+9V/28d7Zs5BR2ndektu3erA+HdTtbm03jaJINB+znVej8Gq4eu6SF8MXUR89z70K/x2hwM34kLxlcD67R+YB5l46nP5w/9Sdjx+787PTYQ6U8Tx784VNl9aOPRo5/367oV71J1Z/V65zVWvbY9qLW9LHcIu3bVj+prPz59Dbq3KS98+R+XvPuA7//EFkjq3dXW1y3awNn+FL/9aM2MKZ3vb79JxzXfke94fPyuvGW024O+8ZCEkbZ5DdgXizleHTbypnoF+Kfy4u0kECb5q5uIjWKcaBcbcpdUlrcTAgQCVzRzPW6Xa/bLcM+8ytOuWybht9yPEv859h188zx6oUGrVkcUPRjOiUyllTZ9fx8ThBHLgMaQKot4gzPgamfILYRR0qX3ojDEVMGt7FQ8XrVadm1WqVaMTr1SvvM63Qc02sbrVan1vGrnqpcxnxIh6k35ZDuK3h1T8FvAJOEgJR5OedMDDrjoiTPaJHx0CwtUIlCJi6CVGqxa9n1is5IlIQgCetRHGQhlJJ5khdIZ+tfS0OY5VbCcBKnHIVmfgw/zPLwW1EQ4RMQ6cBkSi0QTYUjN5JV5PNx3s5u3gW8lwVEnjZRXZ4SvGay/+ltaOS0bCdmmxhmZsF9u+WbEEcA9E/46Yel2cYLFmQnenHLiotDyEqz6O8zKj2XssUiyztak5KZCnhdKKepjwBnQvdebuM/QPUthP6la2fL+iDy1r7PL+NzOuKIQyTmT8mXX3hzjIDJN0dXnJ/VVx80eyFF3Tis+DGbH4qniWT86esFu1j6CfOV+FnGafDWriNYO3FEnuKhwQmdyZW8YF4+mA0cC1giFDFOd8GPARwLvm/cFnnLhYtpmmQcPv6iSKlrqAjjOKO821Zzw6785jz5SwLum9M7mFziN3f2in14Zz8M+iMhhBFSt77k384ayccFgyqfBjmXhroST1ARnM525H5DcFfxLaH4lY71T8Xfz6T5zvzeslPTw/PQ/As=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbTuM6FH2fr4gyj0epc2tJIlqpVyZcyqWZAc7Lkes4rSGxQ+y0ha8fOyWl7RQGjoRUvLO99toXL/uYwyy1gy7nuBCEUS0ctPX/kOvjqQWxYVnIMtw4nhq+Y/pGCzWhbba8xHcSXQs5L3FIuYBUtHXbtBzDsg3biywnsM3AcRtOy/1X137hgkto6dIwdW2VpZQHVdi2XhY0YJATHlCYYR4IFEy6F+eB9AxgzUnvHK9ZVgGLzlyIPAAANWKMcJqiBmIZOAY7PscxDyZkRqEoC/waM+Zt/XXvcrlsLJ0GK2bANk0TmD6QPjEns+9651u9GcchTdh63YeUUYJgSl6gInWBxZzFWjedsYKIefYOtAUsU0EbeIUMZLn0uw7eAlTsPom0Q7Lg0OBzaNVgNzjBBaYIaz9vwrb+/XMdXO+NCkh5woqM762/RgnTBU5ZjmOD15nV7D6PeKBcnWOMgpCitORkgcdqTHKIMNeuCpyQ1TnhcvhirlXt11Zc/pF6yjD6SluOwTZXSR0cqM6AzDAX/6dn2/1ao/yCaYk7N/Zzc/l0fRM9PbET8Hx1NL4uSvIwXg1Zu6Kw7bwmtWn363p/WDez9bqp17t3WtezNPJul9w7Ww6W17czf06myDv9OWiO8el97zFKTx/nzpmHPJGtrlbWHUPTq9bDo/WjjIfelbhO7tJxSr8lFyOR8Qle5hF47N/ePqDohzs+OpuAS9CbigcShb+S5sCLciuy8uLBOnP7ffDom6NstowLr3hhxBr5IT1vRd/80R04OXq5PbFPJsk/z/f0Z9h+y2k7h11jLQmTcvqAkaiXajzCgTaS/YLiY3lRFhIbSeUa5EqjuMBU6B21S0lLUEoBInEgm7leOz3PNYemOWj6juNaZr/nd235n+96MqGuV2vQmsUexT6jCVGxlMqu5+djgigLOKYxLowFK9Ecc/0DxAEUUAvpjTwcjHIcMani3X5rdDTwfd9pDgfdke8Nu5Y9bLlWqzfyJWldGzNxSS+LbiJwsavgrR0Fv8GI5AQrmVdzzuWgcyFL8gQXpUitxgI2KC7lRVAoLQ5s12sCTrI8xYowyFhcpriRz/OqQICvf20DIl5ZCUc5KwRMreoYvpvl/re6INInJsqBq5R6WDYVH7iR7Dqf9/P2t/Ou4btlTNRpk9UVBUFrJruf3oZGTctmYjaJIW7V3DdbvghxAAB8wA/sl2YTL16Qrej1LSsvDikrnbq/T7Dx1CgXi7Lq6JGSzELCA6mcFphgVErde47YI6ZgAwE+de1sWO9F3th3+ZViTicCCpzJ+dOq5SfeHBPM1ZsjlOdn9dkHzU5IWTeBV+KQrZ/Kp4li/OHrBQVI+UnzlfxZsiJ+a9cBrK04Mk/50BCEztRKXTDP78wGYhKWSEVkxTb4IYBDwXeNmyJvuAg5TdNS4Pe/aErq2jpEiJVUhAO9MmzLb8VTPOc4eHP6A6aS+Nc7e8XfvbPvLs4nUggzqG98yd+dDVKNC8K6ehpUXNr6Sj5BZXA625L7V4Lbim97ntsc2qP+XxR/N5POH+Y/LVs13T8Pnd8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/XgH+kIrpSPMFLpqFZQV9O71y52QnkKkJLVJAf31NykWAdF17wwzJacnz3nOS5/klKNFavsB55ALwqgWhW39XzcBjNyGXUMnzUnNmbhOzWtauIZNG7lJYtluHOtaxHkBEeUCUdHWbdNq1Cy7Zntjq+Hbpt/w6mbz5EHX7iHnElq61E1dWy9Syv0ybFsvcuozxAn3KVoA9wX2R8Gg70tPH1Wc9M7phmUZMO/MhMh8w8D1GDCkKa5jtjBOjT2f05j7IzKlSBQ5vMaMeVt/3btareqrRp3lU8M2TdMwW4b0iTmZftc736rNEEc0YZt1D1FGCUYpeUGK1ADEjMVakE5ZTsRs8QG0ZVimgq7BWpbPcuh33XgLULL7ItIeyZyjGp8hqwK7hQRyoBi0u9uorX//Wgc3e8c5ojxh+YIfrP+MEtAlpCyDuMarzCp2X0c8Uq7OKWA/ojgtOFnCtRqTDGHg2jCHhKz7hMvhi7lWtl9bc/kj1ZQB/pO2nBq7XCV140h1QjIFLv5Pz3b7tUG5R2kBnXSyvOMPRnfAXubu1dNq/NhIUnvet5nZLinsOm9Ibdv9uj4c1u1svW4aDKY38/XfL627k2H3Kg4uHoK7Hy5m19ej8Txb3mTh4/gM7ofur8glI/P+3P15P0sytrxsEdxvPkzCYWFGj81nM7j+lqzmyA7pWSvopeOnySBAJMZXZ4240X3IBhdR62G6CmP3pzme9//Kn1nPuRw5/5yLmx/ceRytLoIF6w/Dy5UJ5su3n3ZOz7Eznw6bd3HYzYee037LaTeHfWMlCaNi8ghYVEs1HlGoncl+IfG5vCgLiWtJ6epnSqO4ACr0jtqlpMUvpACR2JfN3KyboedYZtcM3VajIf/1uq3Alv9ajmfJcniVBm1YHFDsMZoQFUup7GZ+PieIFz4HGkNeW7ICz4DrnyCGSCAtorfy42CUw5hJFW9YjtMKTS8IvLDhWmeh03Obnn0SOKbV6p0EunbNxA29yYNEQL6v4Cd7Cn4LmGQElMyrOedy0LmQJXlCy0KkVn2J6hQKeRDkSot92/Fcg5NFloIibCxYXKRQz2ZZWSCDb55SnDAvrYTjjOUCpVb5GX6Y5eG7qiDSJybKgauUuiCbCkdOJLvK513eztGTq4IPipior01WV+QEb5jsv3obGjUt24nZJoa5VXHfbvlDiCMAxif8jMPSbOPFS7ITvTpl5cEhZaVT9fcJ1Z/qxXJZlB1tKsnMJbwhldMyRoALqXvPYzYHamwhjC8dO1vWB5G39n1+hZjRkUACFnL+tHL5hTvHCLi6c0Ty+1l/9UKzF1LWTcBaHLP1Unk1UYw/vb1gHys/aR7Kx4rlb4kfw9qJI/OUFw1B6FSt1AHz/MFsYCZhiVRElu+CHwM4FnzfuC3ylouQ0zQpBHz8RlNS19YRxqygIgr10rArvyVP8ZyB/+b0DqaU+Ncze80/PLN/DfojKYQLpG99ye+da6QcFwy6uhqUXNr6Wl5BZXA63ZH7V4K7im97nuP+sM96v1H8/Uw678zvLTs1PfweOv8B</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0820351388236835370</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0820351388236835370</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0820291388236829463</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0820321388236832678</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0820351388236835370</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E884D04FC5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>4B841E00D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>8D8430B0D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffd6501d-b35a-4c45-b645-262fe9a8d8c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="e8c4f5d0-a98e-4c90-b279-e18eab3eb574"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTHBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTHBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="79295ab9-f4a8-41c4-8989-57e269153436"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>019424A1D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E55ECBA0CE0401F0A05991749:8A082B98"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0820431388236843808</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>50947191D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:50947191D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:50947191D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>019424A1D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>6394E342D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A5947DB2D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:019424A1D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:6394E342D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:A5947DB2D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0P94pfaFg2xFmioCLV9QLrLh+uRPTU4i2aUlSQH/9TYpFYNF174wzmNOT5zznJU9yxlGaOEHIOTBBMqoNui39X7/uOHbc9A3kNTzDPY2x4dmOY8Tose67YMeWD7o24LyAAeUCUdHSHcuuG7ZjON7ErgeOFbhWreE0H3TtDhiX0NKlZunaOk0oD8qwLb1gNMgQJzygKAUeCByMw+FVID0DVHHS22cblmVA1p4LkQemiWsRYEgSXMNZap6Zez5nEQ/GZEaRKBi8xYx4S3/bu1qtaqt6LWMz07Esy7R8U/pEnMy+6e2TajNEAxpnm/U5ohklGCXkFSlSQxDzLNLCZJYxIubpB9C2aVsK2oA1NrDt0m+6+R6gZPdFpD2SjCODz5FdgY0gBgYUg/ZjNGjp377Wwc3eCUOUxxlL+cH6zygBXUKS5RAZvMqsYvd1xCPlap8BDgYUJwUnS7hWY5IjDFy7ZRCT9RXhcvgirpXt19Zc/pFqygD/SVvOzF2ukrp5pDpdMgMu/k/Pdvu1QblDSQHteeJJPg8v3b+Hr9PRBI3DC//1ezxsPuBWSWHXeUNq2+639eGwbmfrbdPrsHlvw4W7YtNk7eWzNOr81YmK56ew8/P2ebqas8fZHU96z4vXfDyzOqRXv52d86v7RTF9eLHmd3extYbB/VT8XJyMyOoS+lhOmFdcsJcb5+qigeszd97x+9dF0p30u3fpfNSrL24v/HV0ze305+WP5T+T/lN8g/Pvo26vm9OVeXM5nZ7cCM91Y2fFWc+FLFz0Sa/1ntNuDvvGShLGxeMTYFEt1XgMulpf9guJz+VFWUhkxKVrkCuN4gKo0Ntql5KWoJACRKJANnOztmzfddzQ7jb8et21rfOOHzryP9/17L4fepUGbVgcUDzPaExULKWym/n5nCBOAw40AmYsswLPgeufIHaRQNqAjuThyCiHSSZV3OlZDc+3w9O612x6YdjxfCfs2L7nuedWz3N07ToTN/SGhbEAtq/gzT0FHwEmOQEl82rOuRx0LmRJFmhZiMSuLVGNQiEvAqa0OHBcr2FykuYJKMJmmkVFArV8npcFMvnm1zEQ5qWVcJxnTKDELo/hh1kefqsKIn0iohy4SqkDsqlw5EaqV/l8nLe/m3cFHxYRUadNVlcwgjdM9j+9D42alu3EbBPD3K64b7f8IcQRAPMTfuZhabbxoiXZiV7dsvLikLLSrvq7QLVFrVgui7Kjp0oymYQ3pXLa5hhwIXXvZZI9AzW3EOaXrp0t64PIW/s+v0LM6VggAamcP61cfuHNMQau3hwDeX7WX33Q7IWUdROwFsds54l8mijGn75ecICVnzTfyp9VxqL3dh3B2okj85QPDUHoTK3UBfPywWzgTMISqYgZ2wU/BnAs+L5xW+QtFyGn6bEQ8PEXTUldS0cYZwUVg65eGnblt+QpXnII3p1+gSkl/u3OXvMP7+z74dVYCmGK9K0v+b2zQcpxwfLFKv1LLi19LZ+gMjid7cj9G8FdxW9Yvntq+79V/P1M2r+Yf7Xs1PTwPLT/Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0P94pfaFg2xFmioCLV9QLrLh+uRPTU4i2aUlSQH/9TYpFYNF174wzmNOT5zznJU9yxlGaOEHIOTBBMqoNui39X7/uOHbc9A3kNTzDPY2x4dmOY8Tose67YMeWD7o24LyAAeUCUdHSHcuuG7ZjON7ErgeOFbhWreE0H3TtDhiX0NKlZunaOk0oD8qwLb1gNMgQJzygKAUeCByMw+FVID0DVHHS22cblmVA1p4LkQemiWsRYEgSXMNZap6Zez5nEQ/GZEaRKBi8xYx4S3/bu1qtaqt6LWMz07Esy7R8U/pEnMy+6e2TajNEAxpnm/U5ohklGCXkFSlSQxDzLNLCZJYxIubpB9C2aVsK2oA1NrDt0m+6+R6gZPdFpD2SjCODz5FdgY0gBgYUg/ZjNGjp377Wwc3eCUOUxxlL+cH6zygBXUKS5RAZvMqsYvd1xCPlap8BDgYUJwUnS7hWY5IjDFy7ZRCT9RXhcvgirpXt19Zc/pFqygD/SVvOzF2ukrp5pDpdMgMu/k/Pdvu1QblDSQHteeJJPg8v3b+Hr9PRBI3DC//1ezxsPuBWSWHXeUNq2+639eGwbmfrbdPrsHlvw4W7YtNk7eWzNOr81YmK56ew8/P2ebqas8fZHU96z4vXfDyzOqRXv52d86v7RTF9eLHmd3extYbB/VT8XJyMyOoS+lhOmFdcsJcb5+qigeszd97x+9dF0p30u3fpfNSrL24v/HV0ze305+WP5T+T/lN8g/Pvo26vm9OVeXM5nZ7cCM91Y2fFWc+FLFz0Sa/1ntNuDvvGShLGxeMTYFEt1XgMulpf9guJz+VFWUhkxKVrkCuN4gKo0Ntql5KWoJACRKJANnOztmzfddzQ7jb8et21rfOOHzryP9/17L4fepUGbVgcUDzPaExULKWym/n5nCBOAw40AmYsswLPgeufIHaRQNqAjuThyCiHSSZV3OlZDc+3w9O612x6YdjxfCfs2L7nuedWz3N07ToTN/SGhbEAtq/gzT0FHwEmOQEl82rOuRx0LmRJFmhZiMSuLVGNQiEvAqa0OHBcr2FykuYJKMJmmkVFArV8npcFMvnm1zEQ5qWVcJxnTKDELo/hh1kefqsKIn0iohy4SqkDsqlw5EaqV/l8nLe/m3cFHxYRUadNVlcwgjdM9j+9D42alu3EbBPD3K64b7f8IcQRAPMTfuZhabbxoiXZiV7dsvLikLLSrvq7QLVFrVgui7Kjp0oymYQ3pXLa5hhwIXXvZZI9AzW3EOaXrp0t64PIW/s+v0LM6VggAamcP61cfuHNMQau3hwDeX7WX33Q7IWUdROwFsds54l8mijGn75ecICVnzTfyp9VxqL3dh3B2okj85QPDUHoTK3UBfPywWzgTMISqYgZ2wU/BnAs+L5xW+QtFyGn6bEQ8PEXTUldS0cYZwUVg65eGnblt+QpXnII3p1+gSkl/u3OXvMP7+z74dVYCmGK9K0v+b2zQcpxwfLFKv1LLi19LZ+gMjid7cj9G8FdxW9Yvntq+79V/P1M2r+Yf7Xs1PTwPLT/Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcxzPGVy72BGYMhNYtlwRomvTljCJvQKktEUvmkq8/kokJUJKmZyYzRNtba6990ZIuOUoTJwg5h0wQRrWo29T/RVW3iv3YN7y6bxueNWsY/qzqGU698eD5tbrViB90LeI8h4hygaho6o5lu4btGE5jaruBYwWeU6k1rJ+6dgsZl9DSpWLp2iZNKA+KsE09z2jAECc8oCgFHggcTMJBP5CeASo56a3LHcsiYNZaCLEMTBNXYsCQJLiCWWpemkc+lzEPJmROkcgzeIkZ86b+sne9XlfWboVlc9OxLMu0fFP6xJzMP+mti3IzxBGdsd26gyijBKOEPCNFagBiwWItTOYsI2KRvgFtm7aloA3YYAPbHv2km68BCnYfRDoimXFk8AWyS7AxzCADikH7Po6a+qePdXC3d5ohymcsS/nJ+u8oAV1BwpYQG7zMrGT3ccQz5WpdAg4iipOckxUM1ZgsEQauXWcwI5s+4XL4Yq4V7dc2XP6RcsoA/01bLs1DrpK6eaY6XTIHLv5Pzw77tUO5RUkOrc5iCI2bx5QiPu2F92J7Xe3G8Y8pg6tmQeHQeUdq3+6X9emw7mfrZdP3wc2jI3h8f1e7nY2/Dq74+GaThKPE73ejbQ6j6Jo/iuebr7PGVW/xpde77rP7h6dRz8/S229J6H8eETd7flwPxfbi7jOFLSx6d649cpOvY/uXyNb/XNXSbmjPn2/cTceaV69HwxWuO9+8+s9J2sePP2pP0YiS5XNom9N+WBuu17MhpRdVFqZf0nk0QMldHPfidp81X3M6zOHYWErCJH94BCzKpRqPqKv1ZL+QeF9elIXExqxwDZZKo7gAKvSW2qWkJcilAJE4kM3crWuu7125ntOt+q7r2Van7YeO/M/3GnbPDxulBu1YnFDsMDojKpZS2d38vE8QpwEHGkNmrFiOF8D1dxC7SCAtomN5OBjlMGVSxRu2ZdU7jbob2q5ntV037Dp+2O7YTs+/6rTbujZkYkRHWTgTkB0reO1IwceAyZKAknk151wOOheyJE9olYvErqxQhUIuL4JMaXHgeI2qyUm6TEARNlMW5wlUlotlUSCT734dA2FeWAnHS5YJlNjFMXwzy9NvZUGkT0yUA1cptUE2Fc7cSG6Zz9t5+4d5l/BhHhN12mR1RUbwjsnxp9ehUdOyn5h9YpjbJff9lr+EOANgvsPPPC3NPl68IgfRy1tWXhxSVlplf59Q5amSr1Z50dG6ksxMwptSOW1zAjiXuredsl9AzT2E+aFrZ8/6JPLefswvFws6EUhAKudPK5YfeHNMgKs3RyTPz+ajD5qjkLJuAjbinK2TyKeJYvzu6wUHWPlJ87X8WbMsfm3XGayDODJP+dAQhM7VSl0w2zdmAzMJS6QisuwQ/BzAueDHxn2R91yEnKaHXMDbXzQldU0dYcxyKqKuXhgO5bfgKbZLCF6dfoMpJP7lzt7wN+/su0F/IoUwRfrel/zZ2SDFuGDQ1dOg4NLUN/IJKoPT+YHcvxA8VPyq5Xt127f/pPjHmbR+M/9uOajp6Xlo/Qc=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvtBK2xFmCogyy6oL6tX9ciekB4i2CSYpoL/+JsUiILrunXEGc3rynOe85ElOBMozL06EAC4Jo0a/2zT/DdNxY1wHxwIvPbb8NMVW5ARILcNgDAjGkR+ZRl+IAvpUSERl0/Qct265nuWF12499pzYP64dB9Fv07gFLhS0cqk5prHKMyriMmzTLDiNGRJExBTlIGKJ41HycxArzxhVnMzWyZplGZC3ZlLOY9vGtRQwZBmuYZbbJ/aOz0kq4hGZUiQLDq8xU9E0X/cul8vasl5jfGp7juPYTmQrn1SQ6Xez9a3aDGmfTth63UGUUYJRRl6QJvUT5IylRpJNGSdyln8A7dquo6EtWGELuz79btpvAUp2X0TaIckFssQMuRXYECbAgWIwbob9pvn9ax1c773miIoJ47nYW/8dJaALyNgcUktUmVXsvo54oFytE8Bxn+KsEGQBF3pM5giDMK44TMhqQIQavlQYZfuNlVB/pJoywH/TlhN7m6uibh+oTpdMQcj/07Ptfq1RblFWQKud/zO7/HX2xHhxfD4Ctjz6PVmSxUtBwmZJYdt5TWrT7tf1/rBuZut10/ghSmSDTHnbHmT3We8hc0RwSo/mv5/TxCMeuh/euWNW4BW5vTxLx0l72SX+D5qFi+f8PLWvRD8fPE3qQxzIb93Gj4t+FmSnyX1vfsadNnkZZkGYLVguopekjW7QhD4ePw6uziePeHZ/JC942O7dTG4Yw2dn4VV98fgraYzvw9XsG3HQhd+B4u7sZuR5t6v7i7D5ltN2DrvGShJGxfgBsKyWejz6XaOn+oXk5/KiLSS1JqVrPNcaJSRQabb0Li0tcaEEiKSxauZ6nQSR3+i2vW4Q1eu+63TaUeKp/yI/dHtRElYatGaxR7HD6IToWFpl1/PzOUGcxwJoCtxaqM7MQJifIHaRREafDtXhYFTANVMq3mv4gRec9k7rfscL/LDTTeqef+q2/YbXbbSVFl8weUkveTKRwHcV/HhHwYeAyZyAlnk950INupCqJE9oUcjMrS1QjUKhLgKutTj2/DCwBcnnGWjCds7SIoPafDYvC2SL9a9nISxKKxF4zrhEmVseww+z3P9WFUT5pEQ7CJ1SG1RT4cCNVK/yeZe3f/DmquCTIiX6tKnqSk7wmsnup7eh0dOymZhNYli4FffNlr+EOABgf8LP3i/NJl66IFvRq1tWXRxKVlpVf59Q7alWLBZF2dGGlkyu4G2lnK49Alwo3Xu+Zo9A7Q2E/aVrZ8N6L/LGvsuvkDM6kkhCrubPKJdfeHOMQOg3R1+dn9VXHzQ7IVXdJKzkIVsnU08TzfjT1wuOsfZT5iv1s2Q8fWvXAaytOCpP9dCQhE71Sl8wzx/MBmYKlihFZHwb/BDAoeC7xk2RN1ykmqZxIeHjL4aWuqaJMGYFlf2uWRq25bfkKZ/nEL85vYMpJf71zl6JD+/su5+DkRLCHJkbX/JnZ4uU44LB1E+DkkvTXKknqApOp1ty/0pwW/EDRym+G7l/UvzdTFrvzO8tWzXdPw+t/wA=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0820431388236843808</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0820431388236843808</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0820391388236839273</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0820411388236841760</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0820431388236843808</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>119444A1D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>73940442D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>B5949DB2D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79295ab9-f4a8-41c4-8989-57e269153436</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="78b70e0b-ec96-483b-a6c9-fd08c067e2c9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="9c363c58-f36e-42c5-912b-cb76ac4c2db9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>3994F7C3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173E5339775E0401F0A07995A24:FD2E66F3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0820531388236853990</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>889417B3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:889417B3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:889417B3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>3994F7C3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>AB94B194D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">31A4FD35D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:3994F7C3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:AB94B194D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:31A4FD35D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SK9B2hBlubutWcQA96suZkC4g2qa1SaH6609SLAKiW8+MM5jVlW9965IvOWEojiy/wxhknCRUCfot9V/HqBuhbYDWaOCm5kxntobC+lSbzhzTNr1pY2ZjVQkYyyGgjCPKW6plmLZmWprlTkzbtwzf8WqWaTyoyi1kTEALl5qhKkUcUeaXYVtqnlE/QYwwn6IYmM+xP+5cXvjC00cVJ7V9smZZBszaC85TX9dxLQQMUYRrOIn1E33H5yRk/pjMKeJ5Bm8xQ9ZS3/auVqvayq4l2Vy3DMPQDU8XPiEj8yO1/avaDGFAZ8l63UM0oQSjiLwiSeoS+CIJlU40TzLCF/En0KZuGhJagwJr2HTokaq/ByjZfRNph2TGkMYWyKzARjCDDCgG5WYUtNSj73VwvXeSIcpmSRazvfXPKAFdQpSkEGqsyqxi933EA+VqnwD2A4qjnJElXMkxSREGplxnMCPFBWFi+EKmlO1XCib+SDVlgH/SlhN9m6ugrh+oTp/MgfH/07Ptfq1RblGUQxt7A7q47/NRMbyh/GoSNxtueHr2NOm6rZLCtvOa1Kbdb+v9Yd3M1tumIMxvIyswzRHl3eW8+wCxvVy9utkSpc93LLx3z/B0PpkkA31qxIWbr17zpdcvQn4V30yPmxP8lLq/B9dFFjR+Aa1f9+eXzt0FJ09P57kThI9wc//4cH9u5uPBCDMjMPPVkE1dd3URPV01/+hDVsweVvXXzmQxtKk1WA2P788Wi8Wv439S/vvcuRtNPfpKeufu/Kb1ntN2DrvGShLG+fQRMK+WcjyCvnIq+oX41/IiLSTUZqWrn0qNYhwoV9tyl5QWPxcCREJfNHO9tj3POW327H7ds23HNHpdr2OJ/zzHNU+9jltp0JrFHsVeQmdExpIqu56frwni2GdAQ8i0ZZLjBTD1C8Q+4kgJ6EgcjoQymCRCxZuO1+85bsdomAPPrvesXr/bswZOs+e6Ts+0VeUq4UM6zDozDtmugjd2FHwEmKQEpMzLOWdi0BkXJXlGy5xHZm2JahRycRFkUot9y3HrOiNxGoEkrMdJmEdQSxdpWSCdrX8tDWFWWgnDaZJxFJnlMfw0y/1vVUGET0ikA5MpdUE0FQ7cSHaVz+d5e9t5V/CdPCTytInq8ozgNZPdT+9DI6dlMzGbxDAzK+6bLT+EOACgf8FP3y/NJl64JFvRq1tWXBxCVtpVf59R7bmWL5d52dGmlMxMwOtCOU19DDgXuvcySZ6A6hsI/VvXzob1XuSNfZdfzhd0zBGHWMyfUi6/8eYYA5NvjkCcn+K7D5qdkKJuHAp+yNaLxNNEMv7y9YJ9LP2E+Vr8rJIsfG/XAaytOCJP8dDghM7lSl4wL5/MBk4ELBGKmGTb4IcADgXfNW6KvOHCxTRNcw6ff1Gk1LVUhHGSUx701dKwLb8lT/6Sgv/u9AGmlPi3O7tgn97Zd5cXYyGEMVI3vuTvzhopxwWDKp8GJZeWWognqAhO51ty/0ZwW/Fd13PMZvevir+bSfuD+aNlq6b756H9Hw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SK9B2hBlubutWcQA96suZkC4g2qa1SaH6609SLAKiW8+MM5jVlW9965IvOWEojiy/wxhknCRUCfot9V/HqBuhbYDWaOCm5kxntobC+lSbzhzTNr1pY2ZjVQkYyyGgjCPKW6plmLZmWprlTkzbtwzf8WqWaTyoyi1kTEALl5qhKkUcUeaXYVtqnlE/QYwwn6IYmM+xP+5cXvjC00cVJ7V9smZZBszaC85TX9dxLQQMUYRrOIn1E33H5yRk/pjMKeJ5Bm8xQ9ZS3/auVqvayq4l2Vy3DMPQDU8XPiEj8yO1/avaDGFAZ8l63UM0oQSjiLwiSeoS+CIJlU40TzLCF/En0KZuGhJagwJr2HTokaq/ByjZfRNph2TGkMYWyKzARjCDDCgG5WYUtNSj73VwvXeSIcpmSRazvfXPKAFdQpSkEGqsyqxi933EA+VqnwD2A4qjnJElXMkxSREGplxnMCPFBWFi+EKmlO1XCib+SDVlgH/SlhN9m6ugrh+oTp/MgfH/07Ptfq1RblGUQxt7A7q47/NRMbyh/GoSNxtueHr2NOm6rZLCtvOa1Kbdb+v9Yd3M1tumIMxvIyswzRHl3eW8+wCxvVy9utkSpc93LLx3z/B0PpkkA31qxIWbr17zpdcvQn4V30yPmxP8lLq/B9dFFjR+Aa1f9+eXzt0FJ09P57kThI9wc//4cH9u5uPBCDMjMPPVkE1dd3URPV01/+hDVsweVvXXzmQxtKk1WA2P788Wi8Wv439S/vvcuRtNPfpKeufu/Kb1ntN2DrvGShLG+fQRMK+WcjyCvnIq+oX41/IiLSTUZqWrn0qNYhwoV9tyl5QWPxcCREJfNHO9tj3POW327H7ds23HNHpdr2OJ/zzHNU+9jltp0JrFHsVeQmdExpIqu56frwni2GdAQ8i0ZZLjBTD1C8Q+4kgJ6EgcjoQymCRCxZuO1+85bsdomAPPrvesXr/bswZOs+e6Ts+0VeUq4UM6zDozDtmugjd2FHwEmKQEpMzLOWdi0BkXJXlGy5xHZm2JahRycRFkUot9y3HrOiNxGoEkrMdJmEdQSxdpWSCdrX8tDWFWWgnDaZJxFJnlMfw0y/1vVUGET0ikA5MpdUE0FQ7cSHaVz+d5e9t5V/CdPCTytInq8ozgNZPdT+9DI6dlMzGbxDAzK+6bLT+EOACgf8FP3y/NJl64JFvRq1tWXBxCVtpVf59R7bmWL5d52dGmlMxMwOtCOU19DDgXuvcySZ6A6hsI/VvXzob1XuSNfZdfzhd0zBGHWMyfUi6/8eYYA5NvjkCcn+K7D5qdkKJuHAp+yNaLxNNEMv7y9YJ9LP2E+Vr8rJIsfG/XAaytOCJP8dDghM7lSl4wL5/MBk4ELBGKmGTb4IcADgXfNW6KvOHCxTRNcw6ff1Gk1LVUhHGSUx701dKwLb8lT/6Sgv/u9AGmlPi3O7tgn97Zd5cXYyGEMVI3vuTvzhopxwWDKp8GJZeWWognqAhO51ty/0ZwW/Fd13PMZvevir+bSfuD+aNlq6b756H9Hw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuI6EH2fr3B5HqeMvLK4AlUsIfEMWS6QzJCXW4rcBmWMTCQZSL7+SiYmQEgmc6tSRdRunT696EgnAs9TN2wLAVzSjBlRr2n+6/oOgB80rMQHbPk28ayGl9iWD1WwIfCqJEhMIxIih4gJiZlsmq7teJbjWm597Hiha4eBV6lW63emcQtcKGjlUrFNYz1PmQiLsE0z5yzMsKAiZHgOIpQkHLUvBqHyDHHJyWydbFgWAXlrJuUiRIhUYiCQpqRCsjk6QXs+J7EIR3TKsMw5vMSMRdN82btarSorr5LxKXJt20Z2AymfWNDpV7P1pdwMccSSbLPuYpYxSnBKn7EmdQFylsVGO51mnMrZ/B1oBzm2hrZgTSzi+OyriV4DFOw+ibRHkgtsiRl2SrAhJMCBETBuhlHT/Pq5Dm72jjlmIsn4XBys/44SsCWk2QJiS5SZlew+j3ikXK0TIGHESJoLuoRLPSYLTEAY1xwSuh5QoYYvFkbRfmMt1B8tpwzI37TlBO1yVdTRker06BSE/D892+3XBuUWpzm0Js76Fu4HvP0YDzN2BZH/dFM/xxGf2M2Cwq7zhtS23S/rw2HdztbLJorQtzN00U286nN/9u3OY2R1ViO3vUntYhA9XgbPeDR9uFl5eBT3B4OHxmk0vsrzs7ss7UW96xt/nXwfD65H/9g4/lIduagrZkn7fijWYlp7mqDn9dWkc/6DXI7G58IZj6v84RsfTCe/+rcT8vvh3s6dh5h3r4Jkdv44IIufdHZW6/z+PvzSx883952+e35Xm7r2T9G/sJuvOe3msG8sJWGU3z8AkeVSj0fUM/qqX1h+LC/aQmMrKVzDhdYoIYFJs6V3aWkJcyVANA5VMzfrdqfhd5yG3wsanuc7drfTaLvqv4Zfd/qNdr3UoA2LA4rdjCVUx9Iqu5mfjwmSeSiAxcCtZZaTGQjzA8QeltiI2FAdjowJGGdKxU/dbs/rua59etoIql6vW6ud+nbg1QMn8LpB1zQuM3nFrng7kcD3Fby6p+BDIHRBQcu8nnOhBl1IVZJHvMxl6lSWuMIgVxcB11ocun49QILOFylowmiexXkKlcVsURQIic2va2EiCisVZJFxiVOnOIbvZnn4rSyI8ompdhA6pQ6opsKRG8kv83mTt3/05irh23lM9WlT1ZWckg2T/U+vQ6OnZTsx28SIcEru2y1/CXEEAH3ADx2WZhsvXtKd6OUtqy4OJSutsr+PuPJYyZfLvOhoTUsmV/BIKaeDRkBypXtP4+w3MLSFQJ+6drasDyJv7fv8cjljI4klzNX8GcXyE2+OEQj95ojU+Vl/9kGzF1LVTcJaHrN1U/U00Yw/fL2QkGg/Zb5WP6uMx6/tOoK1E0flqR4akrKpXukL5umd2SCZgqVKETO+C34M4FjwfeO2yFsuUk3TfS7h/S+GlrqmiQnJciajnlkYduW34CmfFhC+Or2BKST+5c5ei3fv7F8Xg5ESwjk2t770z84WLcaFgKmfBgWXprlWT1AVnE135P6F4K7i1+sN36l1vD8p/n4mrTfmt5admh6eh9Z/</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcuI4EH3PV7icxy3je7BdgSquG89AbmQySV62hNyAsrZsLBlIvn4lExMgJEO2iiqjduv06YuPdM5QEltBizHIOUmpEnYb6j91y0C24Y811xmPNSdyPM3H/kQbQ33i1CPXx8aZqoSMFRBSxhHlDdUyTFszLc3y7kw7sIzAPat5jvmkKveQMwEtXGqGqqySmLKgDNtQi5wGKWKEBRQlwAKOg1FrOAiEZ4AqTmrzfM2yDJg3Z5xnga7jWgQY4hjXcJro5/qOz3nEghGZUsSLHN5iRqyhvu1dLpe1pV1L86luGYahG74ufCJGpqdq86TaDFFIJ+l63UE0pQSjmLwiSWoIfJZGSiuepjnhs+QTaFM3DQmtwQpr2HToqaq/ByjZHYm0QzJnSGMzZFZgtzCBHCgG5ddt2FBPj+vgeu9djiibpHnC9tbfowR0AXGaQaSxKrOK3fGIB8rVPAcchBTHBSMLuJRjkiEMTLnOYUJWA8LE8EVMKduvrJj4kWrKAH+nLef6NldBXT9QnS6ZAuP/p2fb/Vqj3KO4gOYAOrFnWRfDG7P3WF/CK4akM5j+5nOjUVLYdl6T2rT7bb0/rJvZetuUe0+9p4eXCX/Jp/c3znMI6WOWkr/RvWvHQ6/Pf2DdcZOkNev9NuxocIMenQs/Grq94auZ29Fi/IyH5Nl/+qudnfjXLBnV7fhy9bMO1yEOB7d3vcv243099AfLebKIVxQejPrjePJ8Yc/qvxbdER3Ph8joDRftNrrrrG56D/32koySE898uByvXIePxHReZY8/w17jPaftHHaNlSSMivEzYF4t5XiEXaUv+oX41/IiLSTSJqVrkEmNYhwoV5tyl5SWoBACRKJANHO9ts2W0+/abtf1bdsxjU7bb1nin+94Zt9veZUGrVnsUeykdEJkLKmy6/n5miBOAgY0glxbpAWeAVO/QOwijpSQ3oqPI6UM7lKh4v1Wp++3267VMs5s03W9vnnmWb1Wp2uIn9FRlcuUX9GrvDXhkO8q+NmOgt8CJhkBKfNyzpkYdMZFSeZoUfDYrC1QjUIhDoJcanFgOZ6rM5JkMUjCepJGRQy1bJaVBdLZ+mlpCLPSShjO0pyj2Cw/w0+z3H9XFUT4REQ6MJlSG0RT4cCJ5FT5fMjbOXhyVfCtIiLyaxPV5TnBaya7r96HRk7LZmI2iWFmVtw3W74JcQBA/4Kfvl+aTbxoQbaiV6esODiErDSr/s5RbV4rFoui7GhdSmYu4HWhnKY+AlwI3Xu5S/8Fqm8g9KOOnQ3rvcgb+y6/gs/oiCMOiZg/pVwececYAZN3jlB8P6tjLzQ7IUXdOKz4IVsnFlcTyfjL2wsOsPQT5mvxWKZ59N6uA1hbcUSe4qLBCZ3KlTxgXj6ZDZwKWCIUMc23wQ8BHAq+a9wUecOFi2kaFxw+f6NIqWuoCOO0oDzsqqVhW35Lnvwlg+Dd6QNMKfFvZ/aKfXpmPwwHIyGECVI3vuTPzhopxwWDKq8GJZeGuhJXUBGcTrfk/o3gtuJ7nu+Y9bb9J8XfzaT5wfzRslXT/e+h+R8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0820531388236853990</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0820531388236853990</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0820481388236848057</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0820511388236851154</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0820531388236853990</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>499408C3D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>BB94C194D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>41A41E35D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c363c58-f36e-42c5-912b-cb76ac4c2db9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="7b67ffd0-01bc-47b6-b0c3-6d1db593cd55"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="7d8d8a02-ce41-406b-a2f8-af524af3ade0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>C4A40256D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973604500F1EE5E0401F0A059945A9:2F53E600"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082151388236865086</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>14A4CB26D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:14A4CB26D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:14A4CB26D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>C4A40256D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>27A42C07D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0AA4D4F7D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:C4A40256D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:27A42C07D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:0AA4D4F7D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH8+UfiK0I8wUEOUqyhFl1Jc7Id3QaJuWJgX019+kUARED94ZZzC7O2uv/ZGVnDEUR5bnMwYZJwlVep2G+u8YwEbGqa3ZTr2qOchxtDoejzVnEhhu1bUmQTVQlR5jOfQo44jyhmoZpq2ZlmbV703bswyv6lZqhvWsKiPImIAWLhVDVZZxRJlXhG2oeUa9BDHCPIpiYB7H3tDvX3vC00MlJ7V5tmJZBMyaIeepp+u4EgCGKMIVnMT6mb7jcxYwb0imFPE8g3XMgDXU9d7FYlFZ2JUkm+qWYRi64erCJ2BkeqI2f5WbIejRSbJatxFNKMEoIu9IkuoDD5NA8aNpkhEexl9Am7ppSGgNlljDpkNPVP0jQMHuSKQdkhlDGguRWYLdwQQyoBiUh7teQz05roOrvfcZomySZDHbW/+MEtA5REkKgcbKzEp2xyMeKFfzDLDXozjKGZnDjRyTFGFgyiCDCVleEyaGL2BK0X5lycQfKacM8E/acqZvcxXU9QPV6ZApMP5/erbdrxXKCEU5NN1leL4AY/peu0iu+2/RS5xakdt2bglrFBS2nVekNu1er/eHdTNb600t4/Zyed92oqh6NVpehLb7+3k6y6OL0K/nY3AGrTC2Alp9ekAduxa+Pr/P0lHaernQh0+vN+xPC1nh5dXA7fw5tX8tcI8kd08X/PSx/89s9FwbXgV6y7g2rjL03J/Vz+vTsUhoXlvyQecyvA0Hvj285FB7Gf2ePtdd/ub3Zi96QC5t61caGtXH8fyR3OjnQfflokofGh85beewaywlYZiPXwDzcinHo9dRuqJfiH8vL9JCAm1SuHqp1CjGgXK1KXdJafFyIUAk8EQzV+u24zuGVT3tVF3bdkyj3XJ9S/znOnWz6/r1UoNWLPYothM6ITKWVNnV/HxPEMceAxpAps2THIfA1G8QO4gjpUfvxOFIKIP7RKj4ebd+blmtlt3pdpy2f17tOr7V9k+drmXXHaurKjcJv6W3mT/hkO0q+OmOgt8BJikBKfNyzpkYdMZFSWZonvPIrMxRhUIuLoJMarFnCc3RGYnTCCRhPU6CPIJKGqZFgXS2+rU0hFlhJQynScZRZBbH8Mss97+VBRE+AZEOTKbUAtFUOHAjOWU+X+ftbuddwvt5QORpE9XlGcErJrufPoZGTstmYjaJYWaW3DdbfghxAED/hp++X5pNvGBOtqKXt6y4OISsNMv+zlBlVsnn87zoaE1KZibgdaGcpj4EnAvde7tPXoHqGwj9qGtnw3ov8sa+yy/nIR1yxCEW86cUyyPeHENg8s3RE+dneeyDZiekqBuHJT9ka0fiaSIZf/t6wR6WfsI8ED+LJPtI/BDWVhyRp3hocEKnciUvmLcvZgMnApYIRUyybfBDAIeC7xo3Rd5w4WKaxjmHr78oUuoaKsI4ySnvddTCsC2/BU/+loL34fQJppD49Z29ZF/e2Y/966EQwhipG1/yd2eNFOOCQZVPg4JLQ12KJ6gITqdbcr8muK34plD8dsv6q+LvZtL8ZP5s2arp/nlo/gc=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH8+UfiK0I8wUEOUqyhFl1Jc7Id3QaJuWJgX019+kUARED94ZZzC7O2uv/ZGVnDEUR5bnMwYZJwlVep2G+u8YwEbGqa3ZTr2qOchxtDoejzVnEhhu1bUmQTVQlR5jOfQo44jyhmoZpq2ZlmbV703bswyv6lZqhvWsKiPImIAWLhVDVZZxRJlXhG2oeUa9BDHCPIpiYB7H3tDvX3vC00MlJ7V5tmJZBMyaIeepp+u4EgCGKMIVnMT6mb7jcxYwb0imFPE8g3XMgDXU9d7FYlFZ2JUkm+qWYRi64erCJ2BkeqI2f5WbIejRSbJatxFNKMEoIu9IkuoDD5NA8aNpkhEexl9Am7ppSGgNlljDpkNPVP0jQMHuSKQdkhlDGguRWYLdwQQyoBiUh7teQz05roOrvfcZomySZDHbW/+MEtA5REkKgcbKzEp2xyMeKFfzDLDXozjKGZnDjRyTFGFgyiCDCVleEyaGL2BK0X5lycQfKacM8E/acqZvcxXU9QPV6ZApMP5/erbdrxXKCEU5NN1leL4AY/peu0iu+2/RS5xakdt2bglrFBS2nVekNu1er/eHdTNb600t4/Zyed92oqh6NVpehLb7+3k6y6OL0K/nY3AGrTC2Alp9ekAduxa+Pr/P0lHaernQh0+vN+xPC1nh5dXA7fw5tX8tcI8kd08X/PSx/89s9FwbXgV6y7g2rjL03J/Vz+vTsUhoXlvyQecyvA0Hvj285FB7Gf2ePtdd/ub3Zi96QC5t61caGtXH8fyR3OjnQfflokofGh85beewaywlYZiPXwDzcinHo9dRuqJfiH8vL9JCAm1SuHqp1CjGgXK1KXdJafFyIUAk8EQzV+u24zuGVT3tVF3bdkyj3XJ9S/znOnWz6/r1UoNWLPYothM6ITKWVNnV/HxPEMceAxpAps2THIfA1G8QO4gjpUfvxOFIKIP7RKj4ebd+blmtlt3pdpy2f17tOr7V9k+drmXXHaurKjcJv6W3mT/hkO0q+OmOgt8BJikBKfNyzpkYdMZFSWZonvPIrMxRhUIuLoJMarFnCc3RGYnTCCRhPU6CPIJKGqZFgXS2+rU0hFlhJQynScZRZBbH8Mss97+VBRE+AZEOTKbUAtFUOHAjOWU+X+ftbuddwvt5QORpE9XlGcErJrufPoZGTstmYjaJYWaW3DdbfghxAED/hp++X5pNvGBOtqKXt6y4OISsNMv+zlBlVsnn87zoaE1KZibgdaGcpj4EnAvde7tPXoHqGwj9qGtnw3ov8sa+yy/nIR1yxCEW86cUyyPeHENg8s3RE+dneeyDZiekqBuHJT9ka0fiaSIZf/t6wR6WfsI8ED+LJPtI/BDWVhyRp3hocEKnciUvmLcvZgMnApYIRUyybfBDAIeC7xo3Rd5w4WKaxjmHr78oUuoaKsI4ySnvddTCsC2/BU/+loL34fQJppD49Z29ZF/e2Y/966EQwhipG1/yd2eNFOOCQZVPg4JLQ12KJ6gITqdbcr8muK34plD8dsv6q+LvZtL8ZP5s2arp/nlo/gc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSx1HIFUiigkShnMkMvUJvvBwZZwNuEzuNHaDz9ccODQVKO50jIQXvbK+99iXLPuYoTZywwznkgjCqRb2W/q/lwwTcKRgQO57hYd82Ase2jDj2cRDEPljTia5FnBcQUS4QFS3dsWzXsB3D8Ue2Gzp2aHk133XHunYLOZfQ0qVm6doqTSgPy7AtvchpyBAnPKQoBR4KHA47Z4NQeoao4qS3j9csy4B5ey5EFpomrsWAIUlwDbPUPDZ3fI5jHg7JjCJR5PAaM+Yt/XXvcrmsLd0ay2emY1mWaQWm9Ik5mR3p7W/VZogjOmXrdRdRRglGCfmNFKkzEHMWa51kxnIi5ukH0LZpWwragBU2sO3RI918C1Cy+yLSDsmcI4PPkV2BXcMUcqAYtJvrqKUffa2D672jHFE+ZXnK99Z/RwnoAhKWQWzwKrOK3dcRD5SrfQw4jChOCk4WcK7GJEMYuHaZw5SsBoTL4Yu5VrZfW3H5I9WUAf6bthyb21wldfNAdXpkBlz8n55t92uNcouSAtrjf5bO+Lt3jyZn8yfPe0rv7h6XPn4U41mrpLDtvCa1affren9YN7P1uml8Ou4Mb86vukmXnl5E54NJv/vzx0Ns08HdQMDq++RuwZ977hn9eWHdjvhc1FHkXkWNp6v0Jhk7fYsFD83fC29CXr6JxmU26vBBcPvL7Daeln7/x1Uwa2QW+jk2x4/12/gRzi4I/c6yG5Y/2m73ZYTq88XDfQIP9+cj6+U0SBz6xMa/F9/mLB1nN9b1QzLvQxLc8jhqveW0ncOusZKEYTF5BCyqpRqPqKf1Zb+Q+FxelIXExrR0DTOlUVwAFXpb7VLSEhZSgEgcymau106z4zldq9mrB67r2Vb3JOg48l/g+XY/6PiVBq1Z7FHsMjolKpZS2fX8fE4QpyEHGkNuLFiB58D1TxB7SCAtotfy42CUw4hJFT85aTZtz266Xj3w+6cNt2/5XatXl78TK+jVde2ciQt6kXemAvJdBW/sKPg1YJIRUDKv5pzLQedCluQZLQqR2LUFqlEo5EGQKy0OHc+vm5ykWQKKsJmyuEigls2zskAmXz8dA2FeWgnHGcsFSuzyM/wwy/13VUGkT0yUA1cpnYBsKrw7kaywXuXzLm/v4MlVwXeKmKivTVZX5ASvmey+ehsaNS2bidkkhrldcd9s+UuIAwDmJ/zM/dJs4sULshW9OmXlwSFlpV319xnVnmvFYlGUHW0qycwlvCmV0zaHgAupey8j9gTU3ECYXzp2Nqz3Im/su/wKMadDgQSkcv60cvmFO8cQuLpzRPL7WX31QrMTUtZNCqM4ZOsm8mqiGH96e8EhVn7SfCkfS5bHb+06gLUVR+YpLxqC0JlaqQPm5YPZwEzCEqmILN8GPwRwKPiucVPkDRchp2lSCPj4jaakrqUjjFlBRdTTS8O2/JY8xUsG4ZvTO5hS4l/P7BX/8My+PxsMpRCmSN/4kj87G6QcFwy6uhqUXFr6Sl5BZXA625L7V4Lbim97Ha974jT+pPi7mbTfmd9btmq6/z20/wM=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH8+U3iiXjjBTKbjrBmVAPZ79ciamaYm2SU1SQH/9SYpFQHTrmXEGs7ryrW9d8iWnHOSZ4wecIyYwJVoU9vR/HQRB7Dqe0UqAazRRt2l0Wh3L6FqwBcG92+q4SNcizksUES4AET3dsWzXsB3D6Vzbru/YvtVueO3Wb127RYxLaOnSsHRtnWeE+1XYnl4y4lPAMfcJyBH3BfTnwWTsS08f1Jz0/umGZRWQ9RdCFL5pwkaMIMoy2IA0N0/NPZ/TmPtznBIgSoZeY8a8p7/uXa1WjZXboCw1HcuyTKtrSp+Y4/RE7/+oN6M4IgndrAeAUIIhyPALUKQmSCxorAVZShkWi/wDaNu0LQVtoDU0oN0kJ7r5FqBi90WkPZKMA4MvgF2DzVCCGCIQaTezqKeffK2Dm73XDBCeUJbzg/X3KCGyRBktUGzwOrOa3dcRj5Srf4qgHxGYlRwv0aUakwJAxLUpQwlejzGXwxdzrWq/tubyD9dThuB32nJq7nKV1M0j1Qlxirj4Pz3b7dcG5RZkJeq3V7fTNFv8FV9Y5h2ZmsmN7cYvLvwnj3oVhV3nDaltu1/Xh8O6na3XTfObcP33Ym4G8/HE9MaLX+hMRN6ld5Mlw3S96ornLm8P4mmKnZur8O7hkQUvP8cDvnykNpzAYkqtZWcgLsLsIfmRs3Bo3y6vJuvOYvJzhuBwPsMse47O02AUts+fX0IqzmazIbyyi2FxZ1/wMyGuLrxhCDvL9NFyYJmMcms1+9368Zgye9q2XxKYjMvm+cC6tnpvOe3msG+sJWFe3j8gKOqlGo8o1EayX0B8Li/KgmMjqVz9QmkUF4gIva92KWnxSylAOPZlMzdrKwiaYXPUDr2u6zZta3DWDRz5X7fZsUfdoFNr0IbFAcUBJQlWsZTKbubnc4Iw9zkiMWLGkpZwgbj+CWIIBNAiMpOHgxKOrqlUcXcY2KOwZQWjkRW4XjgcdLyBYzsjz+uOWt2Brl1ScUWuWJAIxPYVvLWn4LLJuMBIybyacy4HnQtZkiewLEVmN5agQVApLwKmtNh3mh3P5DgvMqQImzmNyww1ikVRFcjkm1/HAJBXVsxhQZkAmV0dww+zPPxWF0T6xFg5cJXSGZJNRe9uJMv36nze5d08enPV8EEZY3XaZHUFw3DDZP/T29CoadlOzDYxyO2a+3bLNyGOAJif8DMPS7ONFy/xTvT6lpUXh5SVft3fJ9B4apTLZVl1tK0kk0l4Uyqnbc4RLKXuPV/TR0TMLYT5pWtny/og8ta+z68UCzIXQKBczp9WLb/w5pgjrt4ckTw/668+aPZCyroJtBbHbINMPk0U409fL9CHyk+ap/JnRVn81q4jWDtxZJ7yoSEwSdVKXTDPH8wGpBIWS0WkbBf8GMCx4PvGbZG3XIScpvtSoI+/aErqejqAkJZERKFeGXblt+Ipngvkvzm9g6kk/vXOXvMP7+y7yXguhTAH+tYX/9nZwNW4QPlilf4Vl56+lk9QGZykO3L/SnBX8e1m0BycOa0/Kf5+Jv135veWnZoenof+fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082151388236865086</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082151388236865086</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0820581388236858354</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082111388236861381</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_082151388236865086</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>D4A42256D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>37A43C07D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>1AA4E4F7D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d8d8a02-ce41-406b-a2f8-af524af3ade0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="1026bc6c-d6c5-4106-83b1-4fde62cd231b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1fdbc8c4-ad48-432a-89cf-62c0ba30db83"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>9DA4D1E8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B407C861C7E0401F0A0799472F:7CD38CC8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0821111388236871846</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>ECA407C8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:ECA407C8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:ECA407C8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>9DA4D1E8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FFA47E99D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:9DA4D1E8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FFA47E99D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZc9o8FH3vr/C4jx3jhcXLBGYcnLSUhjSQpcnLN4p8ARFbIpIMpL++kokJEJKm30xmiK6vzj130ZGOBMozL4qFAC4Jo0YvaZv/paHXwC0HrHun6VsNt+Vb9x5Clj+uB43UTeuoGZpGT4gCelRIRGXb9By3brme5QWXbj3y3Mh1al49uDONa+BCQSuXmmMaqzyjIirDts2C04ghQUREUQ4ikjgaxWc/IuUZoYqT2TlasywD8s5Uynlk27iWAoYswzXMcvvI3vE5SkU0IhOKZMHhOWYq2ubz3uVyWVvWa4xPbM9xHNsJbeWTCjL5bHY+VZsh7dExW6+7iDJKMMrIb6RJnYGcstSIswnjRE7zN6Bd23U0tAUrbGG3QT+b9kuAkt0HkXZIcoEsMUVuBTaEMXCgGIyrYa9tfv5YB9d7LzmiYsx4LvbW/0YJ6AIyNofUElVmFbuPIx4oV+cIcNSjOCsEWcBAj8kcYRDGTw5jsvpBhBq+VBhl+42VUH+kmjLA/9KWI3ubq6JuH6hOQiYg5P/p2Xa/1ijXKCugk8f15c3Vw+BxBv3bx68z+3YG8vb7zBs32iWFbec1qU27n9f7w7qZredNF7/vv7FL7iwHx1e214rrxD7F3QzTXiZvBv4DuZhcLOBmODp3mH38ACxzZmcXvWA4S8YtdrcY9n/dBNN4EiYz/GlYLJ7O+rjfF/mTT792vw2fGrdfzr1rfi5+u4lLW3G/yB/SOb+/jvuNCffG/i/35Hs6YHeOw9JV62RyGaPzLv8iP7ldPx5cn9WLi8c71yc3+GfQfslpO4ddYyUJo+J+BlhWSz0evcQ4Vf1C8n150RaSWuPSNZprjRISqDQ7epeWlqhQAkTSSDVzvQ6TuJG4J0HSDOv1hut0j8PYU/+FjcA9DeOg0qA1iz2KXUbHRMfSKruen/cJ4jwSQFPg1oIVeArCfAcxQRIZPTpUh4NRAZdMqXhwWk/cZpD4fiMIT7peN2ieHCtT6Cde2AyOTWPA5Dk95/FYAt9V8NaOgg8BkzkBLfN6zoUadCFVSR7RopCZW1ugGoVCXQRca3HkNYKmLUg+z0ATtnOWFhnU5tN5WSBbrH89C2FRWonAc8YlytzyGL6Z5f63qiDKJyXaQeiUjkE1FQ7cSE6Vz9t5h9t5V/BxkRJ92lR1JSd4zWT308vQ6GnZTMwmMSzcivtmyz9CHACw3+Fn75dmEy9dkK3o1S2rLg4lK52qv4+o9lgrFoui7KivJZMreFspp2uPABdK954u2QNQewNhf+ja2bDei7yx7/Ir5JSOJJKQq/kzyuUH3hwjEPrN0VPnZ/XRB81OSFU3CSt5yNbN1NNEM3739YIjrP2U+af6WTKevrTrANZWHJWnemhIQid6pS+YpzdmAzMFS5QiMr4NfgjgUPBd46bIGy5STdN9IeHtL4aWuraJMGYFlb3ELA3b8lvylE9ziF6cXsGUEv98Z6/Em3f2r7MfIyWEOTI3vuTvzhYpxwWDqZ8GJZe2uVJPUBWcTrbk/pngtuKfdOOG43f/qvi7mXRemV9btmq6fx46fwA=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZc9o8FH3vr/C4jx3jhcXLBGYcnLSUhjSQpcnLN4p8ARFbIpIMpL++kokJEJKm30xmiK6vzj130ZGOBMozL4qFAC4Jo0YvaZv/paHXwC0HrHun6VsNt+Vb9x5Clj+uB43UTeuoGZpGT4gCelRIRGXb9By3brme5QWXbj3y3Mh1al49uDONa+BCQSuXmmMaqzyjIirDts2C04ghQUREUQ4ikjgaxWc/IuUZoYqT2TlasywD8s5Uynlk27iWAoYswzXMcvvI3vE5SkU0IhOKZMHhOWYq2ubz3uVyWVvWa4xPbM9xHNsJbeWTCjL5bHY+VZsh7dExW6+7iDJKMMrIb6RJnYGcstSIswnjRE7zN6Bd23U0tAUrbGG3QT+b9kuAkt0HkXZIcoEsMUVuBTaEMXCgGIyrYa9tfv5YB9d7LzmiYsx4LvbW/0YJ6AIyNofUElVmFbuPIx4oV+cIcNSjOCsEWcBAj8kcYRDGTw5jsvpBhBq+VBhl+42VUH+kmjLA/9KWI3ubq6JuH6hOQiYg5P/p2Xa/1ijXKCugk8f15c3Vw+BxBv3bx68z+3YG8vb7zBs32iWFbec1qU27n9f7w7qZredNF7/vv7FL7iwHx1e214rrxD7F3QzTXiZvBv4DuZhcLOBmODp3mH38ACxzZmcXvWA4S8YtdrcY9n/dBNN4EiYz/GlYLJ7O+rjfF/mTT792vw2fGrdfzr1rfi5+u4lLW3G/yB/SOb+/jvuNCffG/i/35Hs6YHeOw9JV62RyGaPzLv8iP7ldPx5cn9WLi8c71yc3+GfQfslpO4ddYyUJo+J+BlhWSz0evcQ4Vf1C8n150RaSWuPSNZprjRISqDQ7epeWlqhQAkTSSDVzvQ6TuJG4J0HSDOv1hut0j8PYU/+FjcA9DeOg0qA1iz2KXUbHRMfSKruen/cJ4jwSQFPg1oIVeArCfAcxQRIZPTpUh4NRAZdMqXhwWk/cZpD4fiMIT7peN2ieHCtT6Cde2AyOTWPA5Dk95/FYAt9V8NaOgg8BkzkBLfN6zoUadCFVSR7RopCZW1ugGoVCXQRca3HkNYKmLUg+z0ATtnOWFhnU5tN5WSBbrH89C2FRWonAc8YlytzyGL6Z5f63qiDKJyXaQeiUjkE1FQ7cSE6Vz9t5h9t5V/BxkRJ92lR1JSd4zWT308vQ6GnZTMwmMSzcivtmyz9CHACw3+Fn75dmEy9dkK3o1S2rLg4lK52qv4+o9lgrFoui7KivJZMreFspp2uPABdK954u2QNQewNhf+ja2bDei7yx7/Ir5JSOJJKQq/kzyuUH3hwjEPrN0VPnZ/XRB81OSFU3CSt5yNbN1NNEM3739YIjrP2U+af6WTKevrTrANZWHJWnemhIQid6pS+YpzdmAzMFS5QiMr4NfgjgUPBd46bIGy5STdN9IeHtL4aWuraJMGYFlb3ELA3b8lvylE9ziF6cXsGUEv98Z6/Em3f2r7MfIyWEOTI3vuTvzhYpxwWDqZ8GJZe2uVJPUBWcTrbk/pngtuKfdOOG43f/qvi7mXRemV9btmq6fx46fwA=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0TpIwrODUgiQApQOMyUlim9zsuR6xjwNHFS2wHK1x87NBQo7bRHqkS9s7322hcvu8lhEttByDlmgqRUG/Za+r8Otmve1GsYjvNoG66JG4YfOb5Rn9YRatQdz/NcXRtynuMh5QJS0dJt03IMyzZs79pyAtsKLLfquuZvXbvFjEto6VI1dW2VxJQHRdiWnjMapJATHlCYYB4IFEzC0XkgPQNYctLbzQ3LIiBrz4XIAgBQNcIIxzGqojQBTbDn04x4MCEzCkXO8GvMiLf0173L5bK6dKopmwHbNE1g+kD6RJzMTvX2SbkZR0M6TTfrLqQpJQjGZA0VqREW8zTSwniWMiLmyQfQFrBMBW3gFTKQ5dJTHbwFKNh9EWmPJOPQ4HNolWBXeIoZpghrN1fDln76tQ5u9l4zSPk0ZQk/WH+PEqYLHKcZjgxeZlay+zrikXK1mxgFQ4rinJMFvlBjkkGEuTZmeEpW54TL4Yu4VrRfW3H5R8opw+g7bWmCXa6SOjhSnR6ZYS7+T892+7VBuYVxjtv11bp+M6gnFmA/a4N1MnhAE3gTJ07joVVQ2HXekNq2+3V9OKzb2XrddH87xcIf3Q8BuuoAdwEr/bVL3d710zxNzsfwnI2yQW/URz8qTu0hHS+yNasM7tbxBbjAg0oOo7twNR9GM3D2dLK0RqjzSEaXYeWO/kjPQtOddPjS9x5Ypd55qoX5+Gla661Xf35NbqHAlYHoXozH9I6ym1p0a9efl7+7M5rQX93shOeT+0nn+ukfyP3LeSPORqPWW067OewbS0mY5I9/MBLlUo3HsKf1Zb+g+FxelIVExrRwDTKlUVxgKvS22qWkJcilAJEokM3crPv90G2c+X6v5juOa5ndjh/a8j/f9ay+H3qlBm1YHFDspnRKVCylspv5+ZwgSgKOaYSZsUhzNMdc/wSxBwXUhvRKHo6UcnydShXvnNU9ywwt0+zXzIbXcPthzeu73Zpj+pbdDXXtIhWX9JKFU4HZvoLX9xT8CiOSEaxkXs05l4POhSzJM1zkIraqC1ilOJcXAVNaHNiuVwOcJFmMFWGQpFEe42o2z4oCAb75tQ2IeGElHGUpEzC2imP4YZaH38qCSJ+IKAeuUupg2VR85EYyy3ze5e0evblK+DCPiDptsrqCEbRhsv/pbWjUtGwnZpsY4lbJfbvlmxBHAMAn/MBhabbxogXZiV7esvLikLLSLvv7DKvP1XyxyIuONpRkMgkPpHJaYIJRLnXv5Tp9whRsIcCXrp0t64PIW/s+v1zM6URIHUnk/GnF8gtvjgnm6s0xlOdn9dUHzV5IWTeBV+KYrRvLp4li/OnrBQVI+UnzWP4sUxa9tesI1k4cmad8aAhCZ2qlLpiXD2YDpRKWSEVM2S74MYBjwfeN2yJvuQg5TY+5wB9/0ZTUtXSIUJpTMezphWFXfgue4iXDwZvTO5hC4l/v7BX/8M6+H51PpBAmUN/6kr87G6QYF4R19TQouLT0lXyCyuB0tiP3rwR3Ff+sG7pmo+v9TfH3M2m/M7+37NT08Dy0/wM=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0821111388236871846</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0821111388236871846</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082181388236868844</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0821111388236871846</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>ADA4E1E8D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>00B49E99D5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fdbc8c4-ad48-432a-89cf-62c0ba30db83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="721a9832-d890-4eaf-ae35-7fa0e3462a9f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="e0085640-07c5-423b-875d-7c40049ad8c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>83B4C88AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE985478984F3A46E0401F0A079931FF:C4E28C4E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0821201388236880763</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>D2B44A6AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:D2B44A6AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:D2B44A6AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>83B4C88AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5B4A12BD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E7B4D3CBD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:83B4C88AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5B4A12BD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E7B4D3CBD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+I6FH7vr4jSxypkZYsKUthmMl3F0mHm5cp1DuDexA6xA7S//tqhoUBpp3OlStQnx9/5zuLPvuQoiR0/4BwyQRjVwl5L/6dmNQBcCxszsB3Ds1FkPFoYG15kNW0vQp5Xx7oWcp5DSLlAVLR0x7JdQ3o7jbHt+o7t27VKrV77rWsPkHEJLV0qlq5tkphyvwjb0vOM+gxxwn2KEuC+wP4ouLn2paePSk56+3LLsgiYtRdCpL5p4koEGOIYVzBLzEvzwOcy4v6IzCkSeQavMSPe0l/3rtfrytqtsGxuOpZlmVbTlD4RJ/NzvX1WboYopDO2XXcRZZRgFJMXpEjdgFiwSAviOcuIWCQfQNumbSloAzbYwLZHz3XzLUDB7otIByQzjgy+QHYJNoQZZEAxaJNh2NLPv9bB7d5xhiifsSzhR+u/owR0BTFLITJ4mVnJ7uuIJ8rVvgTshxTHOScruFVjkiIMXLvPYEY214TL4Yu4VrRf23D5R8opA/w3bbk097lK6uaJ6vTIHLj4Pz3b79cW5QHFObTvUO5Ovlen2QyqmXXlso4YTsfLwQT3WwWFfectqV27X9fHw7qbrddNaRBbL5swmQ27+MKe3qQpcn4+3ibfv1vXv+vT7nV+RShlgo+exk+m+200/Bmyeeos1o5Dr/uTl9vGgzd4gQ3vDs7WTRpVLzqPNJoM6sGo7vTvJz8dbynCdYDoepRN7HHNHE4sPDb7g2/TmjlFnZkzHEaN+y5OL243TRhe3Q5qd73l2QpNvl39Wl4ky7X74ypL3F+s9ZbTfg6HxlISRvnjE2BRLtV4hD1tIPuFxOfyoiwkMmaFq58qjeICqNDbapeSFj+XAkQiXzZzu264Ha/baAS9atN1PdvqdpqBI/9reg170AwapQZtWRxR7DI6IyqWUtnt/HxOECc+BxpBZqxYjhfA9U8Qe0ggLaRDeTgY5TBmUsWDfuDU6w2v41jeoO95Qb3f7DUt1+s3moNqtaNrt0zc0bssmAnIDhW8dqDgQ8AkJaBkXs05l4POhSzJEq1yEduVFapQyOVFkCkt9h2vUTU5SdIYFGEzYVEeQyVdpEWBTL79dQyEeWElHKcsEyi2i2P4YZbH38qCSJ+IKAeuUuqAbCqcuJGsMp+P827u513CB3lE1GmT1RUZwVsmh5/ehkZNy25idolhbpfcd1v+EuIEgPkJP/O4NLt40YrsRS9vWXlxSFlpl/1dosqykq9WedHRupLMTMKbUjltcwQ4l7r3PGb/AjV3EOaXrp0d66PIO/shv1ws6EggAYmcP61YfuHNMQKu3hyhPD+brz5oDkLKugnYiFO2biyfJorxp68X7GPlJ8338mfNsuitXSew9uLIPOVDQxA6Vyt1wTx/MBuYSVgiFZFl++CnAE4FPzTuirzjIuQ0PeYCPv6iKalr6QhjllMR9vTCsC+/BU/xnIL/5vQOppD41zt7wz+8s6c31yMphAnSd77kz84GKcYFg66eBgWXlr6RT1AZnM735P6V4L7i95yO1M3aHxX/MJP2O/N7y15Nj89D+z8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+I6FH7vr4jSxypkZYsKUthmMl3F0mHm5cp1DuDexA6xA7S//tqhoUBpp3OlStQnx9/5zuLPvuQoiR0/4BwyQRjVwl5L/6dmNQBcCxszsB3Ds1FkPFoYG15kNW0vQp5Xx7oWcp5DSLlAVLR0x7JdQ3o7jbHt+o7t27VKrV77rWsPkHEJLV0qlq5tkphyvwjb0vOM+gxxwn2KEuC+wP4ouLn2paePSk56+3LLsgiYtRdCpL5p4koEGOIYVzBLzEvzwOcy4v6IzCkSeQavMSPe0l/3rtfrytqtsGxuOpZlmVbTlD4RJ/NzvX1WboYopDO2XXcRZZRgFJMXpEjdgFiwSAviOcuIWCQfQNumbSloAzbYwLZHz3XzLUDB7otIByQzjgy+QHYJNoQZZEAxaJNh2NLPv9bB7d5xhiifsSzhR+u/owR0BTFLITJ4mVnJ7uuIJ8rVvgTshxTHOScruFVjkiIMXLvPYEY214TL4Yu4VrRf23D5R8opA/w3bbk097lK6uaJ6vTIHLj4Pz3b79cW5QHFObTvUO5Ovlen2QyqmXXlso4YTsfLwQT3WwWFfectqV27X9fHw7qbrddNaRBbL5swmQ27+MKe3qQpcn4+3ibfv1vXv+vT7nV+RShlgo+exk+m+200/Bmyeeos1o5Dr/uTl9vGgzd4gQ3vDs7WTRpVLzqPNJoM6sGo7vTvJz8dbynCdYDoepRN7HHNHE4sPDb7g2/TmjlFnZkzHEaN+y5OL243TRhe3Q5qd73l2QpNvl39Wl4ky7X74ypL3F+s9ZbTfg6HxlISRvnjE2BRLtV4hD1tIPuFxOfyoiwkMmaFq58qjeICqNDbapeSFj+XAkQiXzZzu264Ha/baAS9atN1PdvqdpqBI/9reg170AwapQZtWRxR7DI6IyqWUtnt/HxOECc+BxpBZqxYjhfA9U8Qe0ggLaRDeTgY5TBmUsWDfuDU6w2v41jeoO95Qb3f7DUt1+s3moNqtaNrt0zc0bssmAnIDhW8dqDgQ8AkJaBkXs05l4POhSzJEq1yEduVFapQyOVFkCkt9h2vUTU5SdIYFGEzYVEeQyVdpEWBTL79dQyEeWElHKcsEyi2i2P4YZbH38qCSJ+IKAeuUuqAbCqcuJGsMp+P827u513CB3lE1GmT1RUZwVsmh5/ehkZNy25idolhbpfcd1v+EuIEgPkJP/O4NLt40YrsRS9vWXlxSFlpl/1dosqykq9WedHRupLMTMKbUjltcwQ4l7r3PGb/AjV3EOaXrp0d66PIO/shv1ws6EggAYmcP61YfuHNMQKu3hyhPD+brz5oDkLKugnYiFO2biyfJorxp68X7GPlJ8338mfNsuitXSew9uLIPOVDQxA6Vyt1wTx/MBuYSVgiFZFl++CnAE4FPzTuirzjIuQ0PeYCPv6iKalr6QhjllMR9vTCsC+/BU/xnIL/5vQOppD41zt7wz+8s6c31yMphAnSd77kz84GKcYFg66eBgWXlr6RT1AZnM735P6V4L7i95yO1M3aHxX/MJP2O/N7y15Nj89D+z8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb9o8FL7fr4iyyyrkgwSSqCCFpt3SlnYDRtfdvDKOCW4TO8ROCvv1s0NDgdGufaVK1CfHz3nOhx/7lIEstfyAMVRwTIkShT31P8/23I7jWloXuJ5mx3OkuXAGta43Q8DtuM4shqoSMVaiiDAOCO+plmG2NdPSLHditn3L9E2v5XjOL1WZooIJaOHSMlRllaWE+XXYnloWxKeAYeYTkCHmc+iPg+G1Lzx90HBS+6cblnXAor/gPPd1HbZiBFGawhakmX6q7/mcxswf44QAXhboOWbMeurz3qenp9ZTu0WLRLcMw9ANTxc+McPJZ7X/qdmM4ojM6WZ9BgglGIIU/waS1BDxBY2VIE1ogfkiewXa1E1DQmtoBTVo2uSzqr8EqNm9E2mPZMGAxhbAbMBGaI4KRCBSfoyinvr5fR3c7J0UgLA5LTJ2sP4YJUQqlNIcxRprMmvYvR/xSLn6pwj6EYFpyXCFbuSY5AAipnwr0ByvrjETwxczpW6/smLiDzdThuBH2nKq73IV1PUj1Qlxghj/Pz3b7dcGZQrSEvWjkTmgy/nUmXxZP3UurXz9kIQnxQ/v7nuvprDrvCG1bffz+nBYt7P1vGl1Va1n7QCT0YRO9BiQh+l9Zp/fDt1Zdt4B4eBkxLu8+nrL4Oix+gmc66u7+1ycbfrzgV2tL35dm2zYdXM+WHc+Le9+u85lcZZPXZDPTNPsWJdwMfFihy3uqPl1WCV5zkZf7o2Ez69RZ0aSy2QUeF+tjBiPVZSi7z+uUHKzbE+vPt2sT4Y30e+7lTs8+TZdrrht9F5y2s1h39hIwricPSDIm6UcjyhULkS/AH9bXqQFx9q8dvVzqVGMI8LVvtwlpcUvhQDh2BfN3KzPnYEdmNYgdLx22zaNs4EXWOI/z3bNCy9wGw3asDigeEbJHMtYUmU38/M2QZj5DJEYFVpFS7hATH0DMQQcKBEZicNBCUMTKlR8YJsDt+u5baPjhbYTds/D7mBwFoSO5XimFajKDeW35LYI5hwV+wre2VPwEYI4x0jKvJxzJgadcVGSJahKnpqtCrQIKsVFUEgt9i3bdXSGszxFkrCe0bhMUStf5HWBdLb5tTQAWW3FDOa04CA162P4apaH35qCCJ8YSwcmUxog0VR05EYymnxez9vbzbuBD8oYy9MmqssLDDdM9j+9DI2clu3EbBODzGy4b7d8EOIIgP4GP/2wNNt4cYV3oje3rLg4hKz0m/4uQWvZKquqrDvalZJZCHhdKKepjxEshe6tJ/QREX0Lob/r2tmyPoi8te/zK/mCjDngKBPzp9TLd7w5xojJN0ckzs/qvQ+avZCibhyt+DHbWSqeJpLxm68X6EPpJ8zfxM8TLeKXdh3B2okj8hQPDY5JIlfyglm/MhuQClgsFJEWu+DHAI4F3zdui7zlwsU0zUqOXv+iSKnrqQBCWhIehWpt2JXfmidf58h/cfoLppb45zt7xV69s38Or8dCCDOgbn3xv501XI8LRKp8GtRceupKPEFFcJLsyP0zwV3FD62BbQed4F+Kv59J/y/z35admh6eh/4f</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eU0tJC6QAz5eIRt6KCetCXMyFdhUibQpNy2b9+J4UiILrxzDiDWV351rcu+ZIaQ1Fouh5jkHASU6Xbrqv/QVAx7EqxrJm2b2uW74y0aqloa7hkVwGNqsgqW6rSZSyFLmUcUV5XzaJR0gxTM51Ho+SahmuWCk7FeFWVZ0iYgBYuhaKqrKKQMjcLW1fThLoxYoS5FEXAXI7dgXd74wpPF+Wc1EZtwzILmDQmnM9cXccFHzCEIS7gONJr+oFPzWfugIwp4mkC25g+q6vbvcvlsrAsFeJkrJvFYlEvVnXh4zMyvlAbP/LN4HdpEG/WLURjSjAKyW8kSd0Cn8S+4oXjOCF8En0CbehGUUJrsMIaNix6oervATJ2ZyIdkEwY0tgEGTlYHwJIgGJQnvrdunpxXgc3ex8TRFkQJxE7Wn+PEtAFhPEMfI3lmeXszkc8Ua5GDbDbpThMGVlAT47JDGFgyn0CAVndECaGz2dK1n5lxcQfyacM8HfaUtP3uQrq+onqtMkYGP8/Pdvv1wblGYUpNG7Mq3FQtn8Vf5Fk/fJitKK3ZXT1Gnqc1TMK+84bUrt2b9fHw7qbre0mWPv9DuqsmnjozSfXcx0Hq2py/ZJa4duMjWYD6qzif4I7ff30PGxNRv35Aj1M+GPQH6Dqw9isdG6frq+j6Wsvvv8xnlNjyjrVyUtvOaxEfv++XAnmA9YMWk80uBqXPA9+mm+X/y70XncY9T3eCp7KyZUNaPizX3bKwRKmfd9JWTD+Yf++BYcN6cPAeO715vPydFp/z2k/h0NjLgmDdPQGmOdLOR7dtnIp+oX41/IiLcTXgszVnUmNYhwoVxtyl5QWNxUCRHxXNHOz7lSaVrvUarbtaqlkGcVWs+qZ4r+q5RiXVc/JNWjD4ohiK6YBkbGkym7m52uCOHIZUB8SbRGneAJM/QKxjThSurQvDkdMGTzGQsUdx2ibRfOyYnaqnbLddGyz7Bi2Ybc7zYptdVSlF/M7epd4AYfkUMHLBwreB0xmBKTMyzlnYtAZFyWZo0XKQ6OwQAUKqbgIEqnFrmk5ts5INAtBEtaj2E9DKMwms6xAOtv8mhrCLLMShmdxwlFoZMfw0yyPv+UFET4+kQ5MptQE0VQ4cSMZeT4f8rZO3lw5vJf6RJ42UV2eELxhcvjpfWjktOwmZpcYZkbOfbflmxAnAPQv+OnHpdnF8xdkL3p+y4qLQ8hKI+/vHBXmhXSxSLOOVqRkJgJeF8pp6APAqdC99WM8BarvIPSzrp0d66PIO/shv5RP6IAjDpGYPyVbnvHmGACTb46uOD+rcx80ByFF3Tis+ClbKxRPE8n4y9cLdrH0E+Z78bOME/+9XSew9uKIPMVDgxM6lit5waw/mQ0cC1giFDFO9sFPAZwKfmjcFXnHhYtpGqUcPv+iSKmrqwjjOKW821Yzw778Zjz5egbuu9MHmEzit3f2in16Zw9vbwZCCCOk7nzJ3501ko0LBlU+DTIudXUlnqAiOB3vyf2W4L7it82mZXll72+Kf5hJ44P5o2WvpsfnofEH</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0821201388236880763</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0821201388236880763</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0821151388236875568</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0821181388236878095</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0821201388236880763</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>93B4D88AD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F5B4B12BD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F7B414CBD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e0085640-07c5-423b-875d-7c40049ad8c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="febf05ef-9914-4914-9bc4-55827b992059"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="42f893fc-3d6b-4c51-9918-4391022565dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>7BB447DCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173E5999775E0401F0A07995A24:CB144D1E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0821301388236890615</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>CAB49EBCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:CAB49EBCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:CAB49EBCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>7BB447DCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>DDB4D0ADD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DFB4233ED5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:7BB447DCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:DDB4D0ADD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:DFB4233ED5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+I8FL7fX9GplzulH4CUjjDTFtDuKjqAqHvzTkwPEG0TTFJAf/2mxSIguvrOOIM5PXnOcz7yJCcCpYnj+UIAl4RRLeq09P/c+sSKkWMZNrabRu0Yqgaa2JYBzSbYqIEm4ICuRUJkEFEhEZUt3bHsqmE7huOO7Krn2J7TqFRt54+ujYELBa1cKpaurdKECq8I29IzTj2GBBEeRSkIT2Jv6F+ce8rTQyUnvX2yZlkE5O2ZlHPPNHElBgxJgiuYpeaJueNzEgtvSKYUyYzDa8xYtPTXvcvlsrKsVhifmo5lWabVNJVPLMj0SG//KDdDHNEJW69DRBklGCXkBeWkLkDOWKz5yZRxImfpB9C2aVs5tAErbGC7Ro908y1Awe6LSDskuUCGmCG7BBvABDhQDNr1IGrpR1/r4HrviCMqJoynYm/9PUpAF5CwOcSGKDMr2X0d8UC52ieAvYjiJBNkAf18TOYIg9CuOEzI6pwINXyx0Ir2ayuh/kg5ZYC/05YTc5urom4eqE6HTEHI/9Oz7X6tUcYoyaDd57Lnmrd3yGWP5OXXz/RmkAa/T+MQrlsFhW3nNalNu1/X+8O6ma3XTZ3bhzt/FPyZyv781/jy6eLGCSMW+T+Xbs0/tsJbaQ/jgez3x+6wepEcj7PlrD5qjLh/83g2vlqsGpaLppf39NKq/QgvHwJ0LUfOYNmt+pBlC3q+kqvh+Xia4sSd+g9ucBrK00eWdl/69xP5eCaD1Fn2RrJ59UzcdNi9+30cWOM7RH48vExq3Lzp9q96IY+Ts+jsrvWW03YOu8ZSEobZ/QNgWS7z8Yg6Wk/1C8nP5SW3kNiYFK7ePNcoIYFKvZ3vyqXFy5QAkdhTzVyvG0FQqzU6YaferFZrthUGTd9R/zVrrt1r+m6pQWsWexRDRickj5Wr7Hp+PieIU08AjYEbC5bhGQj9E8QOkkiL6EAdDkYFjJhS8V4zqDq1btd3usFx0Og1uvV62KgHjuXbnXq3q2t9Ji/pJfcnEviugh/vKPgAMJkTyGU+n3OhBl1IVZIntMhkYlcWqEIhUxcBz7XYc2pu3RQknSeQEzZTFmcJVOazeVEgU6x/HQNhUViJwHPGJUrs4hh+mOX+t7IgyicmuYPIUwpANRUO3Eh2mc/HeTe38y7h/Swm+WlT1ZWc4DWT3U9vQ5NPy2ZiNolhYZfcN1u+CXEAwPyEn7lfmk28eEG2ope3rLo4lKy0y/4+ocpTJVsssqKjjVwyuYI3lXLa5hBwpnTvecQegZobCPNL186G9V7kjX2XXyZndCiRhFTNn1Ysv/DmGILI3xyROj+rrz5odkKquklYyUO2MFFPk5zxp68X7OHcT5mv1M+S8fitXQewtuKoPNVDQxI6zVf5BfP8wWxgpmCJUkTGt8EPARwKvmvcFHnDRappus8kfPxFy6WupSOMWUZl1NELw7b8Fjzl8xy8N6d3MIXEv97ZK/HhnX17cT5UQpgifeNL/u1skGJcsHqxKv+CS0tfqSeoCk6nW3L/SnBb8UM/qDW7wT8VfzeT9jvze8tWTffPQ/sv</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+I8FL7fX9GplzulH4CUjjDTFtDuKjqAqHvzTkwPEG0TTFJAf/2mxSIguvrOOIM5PXnOcz7yJCcCpYnj+UIAl4RRLeq09P/c+sSKkWMZNrabRu0Yqgaa2JYBzSbYqIEm4ICuRUJkEFEhEZUt3bHsqmE7huOO7Krn2J7TqFRt54+ujYELBa1cKpaurdKECq8I29IzTj2GBBEeRSkIT2Jv6F+ce8rTQyUnvX2yZlkE5O2ZlHPPNHElBgxJgiuYpeaJueNzEgtvSKYUyYzDa8xYtPTXvcvlsrKsVhifmo5lWabVNJVPLMj0SG//KDdDHNEJW69DRBklGCXkBeWkLkDOWKz5yZRxImfpB9C2aVs5tAErbGC7Ro908y1Awe6LSDskuUCGmCG7BBvABDhQDNr1IGrpR1/r4HrviCMqJoynYm/9PUpAF5CwOcSGKDMr2X0d8UC52ieAvYjiJBNkAf18TOYIg9CuOEzI6pwINXyx0Ir2ayuh/kg5ZYC/05YTc5urom4eqE6HTEHI/9Oz7X6tUcYoyaDd57Lnmrd3yGWP5OXXz/RmkAa/T+MQrlsFhW3nNalNu1/X+8O6ma3XTZ3bhzt/FPyZyv781/jy6eLGCSMW+T+Xbs0/tsJbaQ/jgez3x+6wepEcj7PlrD5qjLh/83g2vlqsGpaLppf39NKq/QgvHwJ0LUfOYNmt+pBlC3q+kqvh+Xia4sSd+g9ucBrK00eWdl/69xP5eCaD1Fn2RrJ59UzcdNi9+30cWOM7RH48vExq3Lzp9q96IY+Ts+jsrvWW03YOu8ZSEobZ/QNgWS7z8Yg6Wk/1C8nP5SW3kNiYFK7ePNcoIYFKvZ3vyqXFy5QAkdhTzVyvG0FQqzU6YaferFZrthUGTd9R/zVrrt1r+m6pQWsWexRDRickj5Wr7Hp+PieIU08AjYEbC5bhGQj9E8QOkkiL6EAdDkYFjJhS8V4zqDq1btd3usFx0Og1uvV62KgHjuXbnXq3q2t9Ji/pJfcnEviugh/vKPgAMJkTyGU+n3OhBl1IVZIntMhkYlcWqEIhUxcBz7XYc2pu3RQknSeQEzZTFmcJVOazeVEgU6x/HQNhUViJwHPGJUrs4hh+mOX+t7IgyicmuYPIUwpANRUO3Eh2mc/HeTe38y7h/Swm+WlT1ZWc4DWT3U9vQ5NPy2ZiNolhYZfcN1u+CXEAwPyEn7lfmk28eEG2ope3rLo4lKy0y/4+ocpTJVsssqKjjVwyuYI3lXLa5hBwpnTvecQegZobCPNL186G9V7kjX2XXyZndCiRhFTNn1Ysv/DmGILI3xyROj+rrz5odkKquklYyUO2MFFPk5zxp68X7OHcT5mv1M+S8fitXQewtuKoPNVDQxI6zVf5BfP8wWxgpmCJUkTGt8EPARwKvmvcFHnDRappus8kfPxFy6WupSOMWUZl1NELw7b8Fjzl8xy8N6d3MIXEv97ZK/HhnX17cT5UQpgifeNL/u1skGJcsHqxKv+CS0tfqSeoCk6nW3L/SnBb8UM/qDW7wT8VfzeT9jvze8tWTffPQ/sv</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxzPGF4yxPYEZG5OWpNAkJk2TlzNC3oAaWyaWzKVffyQTEyAkTc9MZoi2t9Ze+6IlnTGUpZYfMAYFJzlVBlFH/bfd8mxvYpmaZdiuZtumq02a0NacyQR702bbmVoTVRkwVsKAMo4o76iWYTY109Isd2w2fcv0La/RtpoPqvIDCiaghUvDUJV1llLmV2E7allQP0eMMJ+iDJjPsR8Hw2++8PRRzUntnm1ZVgGL7pzzha/ruJEAhjTFDZxn+pl+4HOWMD8mM4p4WcBzzIR11Oe9q9WqsWo28mKmW4Zh6IanC5+Ekdlntfup3gzJgE7z7bqHaE4JRin5jSSpIfB5nihBOssLwufZG9CmbhoSWoM11rBp08+q/hKgYvdBpAOSBUMamyOzBruBKRRAMSi3N4OO+vljHdzuHReIsmleZOxo/XeUgC4hzReQaKzOrGb3ccQT5eqeAfYHFKclI0sYyTFZIAxMuSpgStbfCBPDlzClar+yZuKP1FMG+G/acqbvcxXU9RPVicgMGP8/Pdvv1xblB0pL6LYuzu/D29FD+dX+NftK7510PJy0yk3g3HcqCvvOW1K7dj+vj4d1N1vPm4J/nCw07sjNfNxGT645iorND/N68HBnLJHjXDrxZLjqmdZ5OC7Cq9ssbI709u0v74vRir+a2V0QOMN0ORvnbePyk7km1/3H5O4C2a05iQbNiztk29mTjWH+dO5MUBxeA8fMmrnDcfbw8PM2jnr65m7e6t9T+7f9OHBH4F4N40cBFodf+ucXlxu9HMbj1WgyWfU7Lznt53BorCUhLie/APN6KcdjECnnol+Ivy8v0kISbVq5+gupUYwD5WpX7pLS4pdCgEjii2Zu11EU2pERRFHLazZt0+iFXmCJ/zzbNc+9wK01aMviiGIvp1MiY0mV3c7P+wRx5jOgCRTaMi/xHJj6DmKEOFIG9EYcjpwyGOdCxb2wZVuR1Tccu9W0e72+3bP6ttN3247lNk1XVUY5/06/F8GUQ3Go4M6Bgt8AJgsCUublnDMx6IyLkjyhZclTs7FEDQqluAgKqcW+ZbstnZFskYIkrGd5UqbQWMwXVYF0tv21NIRZZSUML/KCo9SsjuGbWR5/qwsifBIiHZhMKQTRVDhxI5l1Pm/n7e3nXcMHZULkaRPV5QXBWyaHn16GRk7LbmJ2iWFm1tx3W/4S4gSA/g4//bg0u3jJkuxFr29ZcXEIWenW/X1CjadGuVyWVUfbUjILAa8L5TT1GHApdG8zzh+B6jsI/UPXzo71UeSd/ZBfyec05ohDJuZPqZYfeHPEwOSbYyDOz/qjD5qDkKJuHNb8lK2XiqeJZPzu6wX7WPoJ85X4WeVF8tKuE1h7cUSe4qHBCZ3JlbxgNm/MBs4FLBGKmBf74KcATgU/NO6KvOPCxTRNSg5vf1Gk1HVUhHFeUj6I1MqwL78VT75ZgP/i9AqmkvjnO3vN3ryzfw6/xUIIM6TufMmfnTVSjQsGVT4NKi4ddS2eoCI4ne3J/TPBfcXvBaHt9cPenxT/MJPuK/Nry15Nj89D9z8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj0chVxqIClIgMMP0QqfQzqgvR8bZEJfESWMnQL/+2KGhQGmnc6RK1Dvba6998bLPGUpiy/MZg5yTlCqjoKP+67adsNkErLmGhTXnbI60GbTm4r+W1XRNKwzRTFVGjBUwoowjyjuqZZi2Zlqa1ZqatmeZnm03mqb7oCr3kDMBLVwahqqsk5gyrwrbUYuceilihHkUJcA8jr2Jf3XpCU8P1ZzU7vmWZRUw70acZ56u40YIGOIYN3Ca6Of6gc95yLwJWVDEixxeYoaso77sXa1WjZXdSPOFbhmGoRttXfiEjCy+qt0v9WYIR3Sebtd9RFNKMIrJM5KkroBHaaj48SLNCY+Sd6BN3TQktAZrrGHToV9V/TVAxe6TSAckc4Y0FiGzBruFOeRAMSh3t6OO+vVzHdzuneaIsnmaJ+xo/XeUgJYQpxmEGqszq9l9HvFEubrngL0RxXHBSAnXckwyhIEpNznMyfqSMDF8IVOq9itrJv5IPWWA/6Yt5/o+V0FdP1GdgCyA8f/Ts/1+bVHuUVxAN57P6MBMnqf91v2iXP4efb9coKkdhGzZqSjsO29J7dr9sj4e1t1svWwqHy8ek9Wv54sFKv1vps1betrb3N1adv9uPPxhLpvzp82Qr6x45n+LZia+zs7Gyyiwn9HvxQNvfSPG9Olh5tLLLPiy2fxYQu/7FI+obxT+9fefPHpon80N5yYu+pMN/HRvePD0fPfYu7oa//MQkVW0HEP5WPSi0vDvkwuDRr3re7yeD7+Me8m6bZvlL6fHJ2dXN9mvVuc1p/0cDo21JEyK2SNgXi/leIwCZSj6hfjH8iItJNTmlauXSY1iHChXu3KXlBavEAJEQk80c7sOhj3Hsu1B0GzbtmMa/V7bF2un7bTMYdtv1Rq0ZXFEsZ/SOZGxpMpu5+djgjjxGNAQcq1MCxwBUz9ADBBHyojeisORUgbTVKi4bZlt1+kHQ9tw3UG777iuMfAHgeG0nIFhu6pynfIxHef+nEN+qOBnBwp+C5hkBKTMyzlnYtAZFyV5QmXBY7NRogaFQlwEudRiz3JaTZ2RJItBEtaTNCxiaGRRVhVIZ9tfS0OYVVbCcJbmHMVmdQzfzfL4W10Q4RMS6cBkSj0QTYUTN5JV5/Mmb+fkzVXD+0VI5GkT1eU5wVsmh59eh0ZOy25idolhZtbcd1v+EuIEgP4BP/24NLt4YUn2ote3rLg4hKx06/4+ocZToyjLouqoKyUzF/C6UE5TnwAuhO5tpukSqL6D0D917exYH0Xe2Q/5FTyiE444JGL+lGr5iTfHBJh8c4zE+Vl/9kFzEFLUjcOan7L1Y/E0kYw/fL1gD0s/Yb4RP6s0D1/bdQJrL47IUzw0OKELuZIXzOad2cCpgCVCEdN8H/wUwKngh8ZdkXdcuJimWcHh/S+KlLqOijBOC8pHgVoZ9uW34sk3GXivTm9gKol/ubPX7N07+/fV5UQIYYLUnS/5s7NGqnHBoMqnQcWlo67FE1QEp4s9uX8huK/4fb/ntAe9/p8U/zCT7hvzW8teTY/PQ/c/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0821301388236890615</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0821301388236890615</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0821251388236885178</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0821281388236888391</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0821301388236890615</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>8BB457DCD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EDB4F0ADD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>EFB4633ED5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42f893fc-3d6b-4c51-9918-4391022565dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true" id="69c9f9e7-7e4e-44cf-892c-71f196fcf25d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="596fac05-9dc7-4f02-8dec-12ddbfc18cbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>63C46B2FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547898A93A46E0401F0A079931FF:9A058E7C"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0821391388236899018</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>B2C4471FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:B2C4471FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:B2C4471FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>63C46B2FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>C5C417CFD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C7C4FF30E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:63C46B2FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:C5C417CFD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:C7C4FF30E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4yRL1xsT2DGgXIKJRdCSNK+nBHyNlZqy8SSgeTrj2RiApSkyZnJDNH21tprX7SkU47TxPYDziEXNGPaoNfW/8VRw7UBTMP03JZRd83IwKaNjZkzI049Clte09S1AecFDBgXmIm2bpuWY1i2Ybs3luPblu80aq1G65eu3ULOJbR0qcld6zRh3C/DtvUiZ36GOeU+wylwXxB/EpyPfOnp44qT3jndsCwD5p1YiIWPEKmFQCBJSI1kKTpFez6nIfcndM6wKHJ4iRnytv6yd7Va1VZOLcvnyDZNE5kekj4hp/OveudLtRnCAYuyzbqLWcYowQl9xorUOYg4C7UgmWc5FXH6BrSFLFNBG7AmBrHq7KuOXgOU7D6ItEcy59jgMbYqsGuIIAdGQJteD9r61491cLP3JseMR1me8oP15ygBW0KSLSA0eJVZxe7jiEfK1TkF4g8YSQpOl3ChxmSBCXDtKoeIrkeUy+ELuVa2X1tz+UerKQPymbacol2ukjo6Up0enQMX/6dnu/3aoNzipIDOeOV57Lzljm+f0/HPm3/sdJ1Mn3lxEY7bJYVd5w2pbbtf1ofDup2tl039u9791a84yR6GOWq6SfK9GPafH/oB8ibjWVp852hljTLLu8cXjenq29iaYhMCO3hypid2/wQh0RKNqHX9LZl/eR6fBNgatYDMgiL28rsLEUc3y0trMGzE1sO9NJ47P+9m5/Hwx8PD5FoE5Dbi9XRhBr8nTu/p1xC7s8dkMl+upl/S5Xy4eIzv8mm3sEbifnS7ar/mtJvDvrGShEkxewAiqqUaj0FP68t+YfG+vCgLDY2odPUXSqO4ACb0jtqlpMUvpADR0JfN3KybTrfePLP7vYbnOHXL7J55gS3/8+qu1fcCt9KgDYsDit2MRVTFUiq7mZ/3CZLU58BCyI1lVpAYuP4OYg8LrA3YtTwcGeNwk0kVdx1XTnrLcbvNs7PAazRdt9lo9fpW0G82bc/WtYtMXLLLPIgE5PsK3txT8GsgdEFBybyacy4HnQtZkke8LERi1Za4xqCQF0GutNi3624DcZouElCEUZqFRQK1RbwoC4T45tc2MOGllXKyyHKBE6s8hm9mefitKoj0Caly4CqlM5BNhSM3kl3l83be3m7eFXxQhFSdNlldkVOyYbL/6XVo1LRsJ2abGOFWxX275ZMQRwDQO/zQYWm28cIl3Yle3bLy4pCy0qn6+4hrj7ViuSzKjraUZOYSHknltNAESCF17+km+w0MbSHQh66dLeuDyFv7Pr9CxGwisIBUzp9WLj/w5pgAV2+OgTw/648+aPZCyroJWItjtm4inyaK8buvF+IT5SfNV/JnleXha7uOYO3EkXnKh4agbK5W6oJ5emM2SCZhqVTELN8FPwZwLPi+cVvkLRchp2lWCHj7i6akrq1jQrKCiUFPLw278lvyFE8L8F+d/oApJf7lzl7zN+/s+/PRRAphivWtL/27s0HLcSGgq6dByaWtr+UTVAZn8x25fyG4q/hndrdeb1l/Vfz9TDp/mP+07NT08Dx0/gM=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4yRL1xsT2DGgXIKJRdCSNK+nBHyNlZqy8SSgeTrj2RiApSkyZnJDNH21tprX7SkU47TxPYDziEXNGPaoNfW/8VRw7UBTMP03JZRd83IwKaNjZkzI049Clte09S1AecFDBgXmIm2bpuWY1i2Ybs3luPblu80aq1G65eu3ULOJbR0qcld6zRh3C/DtvUiZ36GOeU+wylwXxB/EpyPfOnp44qT3jndsCwD5p1YiIWPEKmFQCBJSI1kKTpFez6nIfcndM6wKHJ4iRnytv6yd7Va1VZOLcvnyDZNE5kekj4hp/OveudLtRnCAYuyzbqLWcYowQl9xorUOYg4C7UgmWc5FXH6BrSFLFNBG7AmBrHq7KuOXgOU7D6ItEcy59jgMbYqsGuIIAdGQJteD9r61491cLP3JseMR1me8oP15ygBW0KSLSA0eJVZxe7jiEfK1TkF4g8YSQpOl3ChxmSBCXDtKoeIrkeUy+ELuVa2X1tz+UerKQPymbacol2ukjo6Up0enQMX/6dnu/3aoNzipIDOeOV57Lzljm+f0/HPm3/sdJ1Mn3lxEY7bJYVd5w2pbbtf1ofDup2tl039u9791a84yR6GOWq6SfK9GPafH/oB8ibjWVp852hljTLLu8cXjenq29iaYhMCO3hypid2/wQh0RKNqHX9LZl/eR6fBNgatYDMgiL28rsLEUc3y0trMGzE1sO9NJ47P+9m5/Hwx8PD5FoE5Dbi9XRhBr8nTu/p1xC7s8dkMl+upl/S5Xy4eIzv8mm3sEbifnS7ar/mtJvDvrGShEkxewAiqqUaj0FP68t+YfG+vCgLDY2odPUXSqO4ACb0jtqlpMUvpADR0JfN3KybTrfePLP7vYbnOHXL7J55gS3/8+qu1fcCt9KgDYsDit2MRVTFUiq7mZ/3CZLU58BCyI1lVpAYuP4OYg8LrA3YtTwcGeNwk0kVdx1XTnrLcbvNs7PAazRdt9lo9fpW0G82bc/WtYtMXLLLPIgE5PsK3txT8GsgdEFBybyacy4HnQtZkke8LERi1Za4xqCQF0GutNi3624DcZouElCEUZqFRQK1RbwoC4T45tc2MOGllXKyyHKBE6s8hm9mefitKoj0Caly4CqlM5BNhSM3kl3l83be3m7eFXxQhFSdNlldkVOyYbL/6XVo1LRsJ2abGOFWxX275ZMQRwDQO/zQYWm28cIl3Yle3bLy4pCy0qn6+4hrj7ViuSzKjraUZOYSHknltNAESCF17+km+w0MbSHQh66dLeuDyFv7Pr9CxGwisIBUzp9WLj/w5pgAV2+OgTw/648+aPZCyroJWItjtm4inyaK8buvF+IT5SfNV/JnleXha7uOYO3EkXnKh4agbK5W6oJ5emM2SCZhqVTELN8FPwZwLPi+cVvkLRchp2lWCHj7i6akrq1jQrKCiUFPLw278lvyFE8L8F+d/oApJf7lzl7zN+/s+/PRRAphivWtL/27s0HLcSGgq6dByaWtr+UTVAZn8x25fyG4q/hndrdeb1l/Vfz9TDp/mP+07NT08Dx0/gM=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxzPGF8zFnsCMsZMOLblwadrk5YyQt0GpLRlLBpOvP7KJCVCSpmcmM0TbW2uvfdGSLjhKYsv1OIdMEEaVYdBT/212EDYcy9bmrXlHs+35XJtD09QsM7KjdtOJnA6oypDzHIaUC0RFT7UMs6mZlmZ1Z2bTtUy32W0Y3dajqtxDxiW0dGkYqlIkMeVuFban5hl1GeKEuxQlwF2B3al3PXKlp4tqTmr/YseyCpj1l0Kkrq7jRggY4hg3MEv0C/3I5yLk7pQsKBJ5Bi8xQ95TX/ZuNpvGptlg2UK3DMPQDUeXPiEni89q/1O9GcIhjdhu7SPKKMEoJs+oJHUNYslCxYsXLCNimbwBbeqmUUJrUGANmzb9rOqvASp2H0Q6IplxpPElMmuwCUSQAcWgfJ8Me+rnj3Vwt3eWIcojliX8ZP13lICuIWYphBqvM6vZfRzxTLn6F4DdIcVxzskabsoxSREGrtxlEJFiRLgcvpArVfuVgss/Uk8Z4L9py4V+yFVS189UJyAL4OL/9OywXzuUexTn0B/cJO0Vt9b53dimk2i47UxnTcZWzOK9isKh847Uvt0v69Nh3c/Wy6YxK0Zjq0XypxvUWT6NUbydJvPvM/35+eujNxn9Qovnu1Ha8oovX8fC9x+/toB9x2Nj4v9aju5ifWqbLKTpD4vTT08BvxzfxNOm8M32qLP5gu4GLMpXZhKg5fbKmCHbaC2c6CF0fnpP6T+Ai5/fNjo8bPMvS5t7q0e4LuIf97e0WHwaRHj40IkfFt/aN+N0ep96495rToc5HBtrSZjm8yfAol6W4zEMlCvZLyTel5fSQkItqlzdtNQoLoAKtV/uKqXFzaUAkdCVzdyt/ZZvmx3/Kmg5zaZtGv7A8Sz5n2N3zSvH69YatGNxQtFnNCJlrFJld/PzPkGcuBxoCJm2ZjleAlffQQyQQMqQTuThYJTDjEkV7w6cQefKCq4uAyMw26bhtAOvfdm6bAVG1x/YqnLDxC29zbxIQHas4O0jBZ8AJimBUubLOedy0LmQJVmhdS5is7FGDQq5vAiyUotdy+62dE6SNIaSsJ6wMI+hkS7TqkA63/1aGsK8shKOU5YJFJvVMXwzy9NvdUGkT0hKB16mNADZVDhzI1l1Pm/n7RzmXcN7eUjK0yarKzKCd0yOP70OTTkt+4nZJ4a5WXPfb/lLiDMA+jv89NPS7OOFa3IQvb5l5cUhZaVf93eFGqtGvl7nVUc7pWRmEl6XymnqU8C51L3tjP0Cqu8h9A9dO3vWJ5H39mN+uVjSqUACEjl/SrX8wJtjCrx8cwzl+Sk++qA5CinrJqAQ52x+LJ8mJeN3Xy/YxaWfNN/Jnw3Lwtd2ncE6iCPzlA8NQeiiXJUXzPaN2cBMwhKpiCw7BD8HcC74sXFf5D0XIadpngt4+4tSSl1PRRiznIphoFaGQ/mteIptCu6r028wlcS/3NkFf/PO/nk9mkohTJC69yV/dtZINS5Yvlilf8WlpxbyCSqD08WB3L8QPFT8geXbdsf8o+IfZ9L/zfy75aCmp+eh/x8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1P6qdAOMFNae08VRChwxZc7MQ0QT0mxSQHvr79JoQiIHrwzzmB2d9Ze+yMrqVMwTwzHpRRlDKdECv2G/I8ZW7Yx0aqKAW8sxTJNQ7EN/UaZmC+1a7sKqjUAZCmkNEchoQwQ1pANTTcV3VCM2kA3HUN3LL1i3tSeZWmEMsqhuUtFk6X1PCHUKcI25DwjTgoopg4Bc0QdBp3I7bQd7umAkpPcrG9YFgGz5oyxhaOqsBIjiJIEVmA6V+vqgU89pk6EpwSwPEPbmDFtyNu9q9WqsjIraTZVDU3TVM1WuU9M8fRSbl6Um1Eckkm6WXuApARDkOB/gSDVQWyWxpKbTNMMs9n8C2hd1TUBraA1VKBukUtZ/QhQsDsT6YBkRoFCZ0AvwfpogjJEIJKG/bAhX57Xwc3eQQYInaTZnB6tf0YJkSVK0gWKFVpmVrI7H/FEuZp1BJ2QwCSneIkexJgsAERUeszQBK/bmPLhi6lUtF9aU/6HyylD8Cdtqav7XDl19UR1fDxFlP2fnu33a4MyAkmOmu1pRxtOo+shHt9ltN0Ppgg9aN3a82+3UVDYd96Q2rV7uz4e1t1sbTfliz40u2ug992rWUiH0fCagJFvLYdWRKpvV3Z39OtJm4E7UvOiXm/y8rf1qt3WvHDZafdUNov7T8lT0DYhHvsX2u/ADe7HbYO1e6tseFt9aA16v3rjgfmX4Uc1723c7rVe7k3s3nXeZ8Hw8VV1R61afPO8MK/cGR099wY0DOwHQ+1evPaxF7y4nbv7VvSsw3wZjBsfOe3ncGgsJSHKX14RZOVSjEfoSwHvF2Dfy4uw4FiZFK7OQmgUZYgwuSl2CWlxci5AOHZ4Mzdrr+pZQWBqt9e2aVq65rVs1+D/2VZND2y3VmrQhsURRS8lEyxiCZXdzM/3BOHcoYjEKFOWaQ5niMrfIPqAASkkfX44UkLRIOUqXrU169b0Lf/GvuUcdc0Ngqrv+de+bXrVIJClh5R1STdzJwxlhwp+c6DgfQTxAiMh82LOKR90ynhJ3sAyZ4leWYIKQTm/CDKhxY5h1a5ViueLBAnC6jyN8wRVFrNFUSCVbn4NBUBaWDGFizRjINGLY/hllsffyoJwnxgLBypSaiHeVHTiRjLLfD7lbZ28uUp4N4+xOG28uizDcMPk8NPH0Ihp2U3MLjFI9ZL7bssPIU4AqN/wU49Ls4sXL/Fe9PKW5RcHl5Vm2d83UHmr5MtlXnS0KiQz4/AqV05djRDMue69D9LfiKg7CPWsa2fH+ijyzn7IL2czEjHA0JzPn1Qsz3hzRIiKN0fIz8/63AfNQUheN4bW7JTNS/jTRDD+9vUCHSj8uPmR/6zSLP5o1wmsvTg8T/7QYJhMxUpcMO9fzAZMOSzmiphm++CnAE4FPzTuirzjwvg0veQMff1FElLXkAGEaU5Y6MuFYV9+C57sfYGcD6dPMIXEb+/sNf3yzn7qtCMuhHMg73zxn50VXIwLRLJ4GhRcGvKaP0F5cDLdk/stwX3FbxmeZVX1wP+D4h9m0vxk/mzZq+nxeWj+Bw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0821391388236899018</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0821391388236899018</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0821341388236894726</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0821371388236897105</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0821391388236899018</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>73C47B2FD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>D5C427CFD5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>D7C40040E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>596fac05-9dc7-4f02-8dec-12ddbfc18cbf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="95740421-8d55-4c01-8457-8c42c934ad02"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthSAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthSAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="55441df8-53cf-49ee-8a25-b9a697f36b35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5BC41511E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547898C33A46E0401F0A079931FF:22BA3BBE"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0821481388236908023</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>AAC4ECF0E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:AAC4ECF0E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:AAC4ECF0E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5BC41511E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>BDC42AE1E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FFC49072E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5BC41511E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:BDC42AE1E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:FFC49072E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlBe2hFmCiyK17e16rJ+uRPTU4i2CSYpoL/+JsUiILrunXEGc3rynOe85EkOBcozL4yEAC4Jo8Zo0DH/ddN7J0BBYCVpM7V8v4UsFLTaVjNteoEfJNiHwDRGQhQwokIiKjum57h1y/Usr33t1kPPDX2/1vCCO9O4BS4UtHKpOaaxzDMqwjJsxyw4DRkSRIQU5SBCicM4OjsNlWeIKk5m93DFsgzIu1MpZ6Ft41oCGLIM1zDL7UN7y+cwEWFMJhTJgsNrzER0zNe9i8WitqjXGJ/YnuM4thPYyicRZPLd7H6rNkMyoilbrfuIMkowysgL0qTOQE5ZYkTZhHEip/kH0K7tOhragiW2sOvT76b9FqBk90WkLZJcIEtMkVuBXUEKHCgG4+Zq1DG/f62Dq73XHFGRMp6LnfXfUQI6h4zNILFElVnF7uuIe8rVPQQcjijOCkHmcK7HZIYwCOOSQ0qWp0So4UuEUbbfWAr1R6opA/w3bTm0N7kq6vae6gzIBIT8Pz3b7NcK5RZlBXT9i5tlw29ewXB+vDyWnL088vv4ftDKcaeksOm8IrVu9+t6d1jXs/W6ST7UX3h8CwcHvWadtPmtfxD15Njlv2NRJwN8EZ3l/5x5g6ywD7yX1s385+Lo7mR8fYvyKTpF+Cg5PolfZo93UQHf5EUP3N8Pw8Xg6Lw5jcUTTd2D9DYaPcmTrH1yyY8vfo6dVur3vfpd9sv/dXTiPNrL89PxffbwnGWLoj1ppuM5m8x73+TPoX2Oj6f5cYtGyziQY9Z5y2kzh21jJQlxcf8AWFZLPR6jgTFU/ULyc3nRFpJYaekazrRGCQlUml29S0tLWCgBIkmomrlaN3p932247o9GUK/7rtPvBZGn/gv8tjsMonalQSsWOxT7jKZEx9Iqu5qfzwniPBRAE+DWnBV4CsL8BHGAJDJG9EodDkYFXDOl4l6z3gqcRnPoD/xhu98cNJyW2xg4vjP03VY9Mo1zJi/oBY9SCXxbwZtbCn4FmMwIaJnXcy7UoAupSvKE5oXM3Noc1SgU6iLgWotDz283bEHyWQaasJ2zpMigNpvOygLZYvXrWQiL0koEnjEuUeaWx/DDLHe/VQVRPgnRDkKn1APVVNhzI9WrfD7OO9jMu4KPioTo06aqKznBKybbn96GRk/LemLWiWHhVtzXW/4SYg+A/Qk/e7c063jJnGxEr25ZdXEoWelW/X1CtadaMZ8XZUdbWjK5greVcrp2DLhQuvd8zR6B2msI+0vXzpr1TuS1fZtfIac0lkhCrubPKJdfeHPEIPSbY6TOz/KrD5qtkKpuEpZyn62fqaeJZvzp6wWHWPsp86X6WTCevLVrD9ZGHJWnemhIQid6pS+Y5w9mAzMFS5QiMr4Jvg9gX/Bt47rIay5STdN9IeHjL4aWuo6JMGYFlaOBWRo25bfkKZ9nEL45vYMpJf71zl6KD+/s8dlprIQwR+bal/zZ2SLluGAw9dOg5NIxl+oJqoLTyYbcvxLcVPwo6vs/+kPnT4q/nUn3nfm9ZaOmu+eh+x8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlBe2hFmCiyK17e16rJ+uRPTU4i2CSYpoL/+JsUiILrunXEGc3rynOe85EkOBcozL4yEAC4Jo8Zo0DH/ddN7J0BBYCVpM7V8v4UsFLTaVjNteoEfJNiHwDRGQhQwokIiKjum57h1y/Usr33t1kPPDX2/1vCCO9O4BS4UtHKpOaaxzDMqwjJsxyw4DRkSRIQU5SBCicM4OjsNlWeIKk5m93DFsgzIu1MpZ6Ft41oCGLIM1zDL7UN7y+cwEWFMJhTJgsNrzER0zNe9i8WitqjXGJ/YnuM4thPYyicRZPLd7H6rNkMyoilbrfuIMkowysgL0qTOQE5ZYkTZhHEip/kH0K7tOhragiW2sOvT76b9FqBk90WkLZJcIEtMkVuBXUEKHCgG4+Zq1DG/f62Dq73XHFGRMp6LnfXfUQI6h4zNILFElVnF7uuIe8rVPQQcjijOCkHmcK7HZIYwCOOSQ0qWp0So4UuEUbbfWAr1R6opA/w3bTm0N7kq6vae6gzIBIT8Pz3b7NcK5RZlBXT9i5tlw29ewXB+vDyWnL088vv4ftDKcaeksOm8IrVu9+t6d1jXs/W6ST7UX3h8CwcHvWadtPmtfxD15Njlv2NRJwN8EZ3l/5x5g6ywD7yX1s385+Lo7mR8fYvyKTpF+Cg5PolfZo93UQHf5EUP3N8Pw8Xg6Lw5jcUTTd2D9DYaPcmTrH1yyY8vfo6dVur3vfpd9sv/dXTiPNrL89PxffbwnGWLoj1ppuM5m8x73+TPoX2Oj6f5cYtGyziQY9Z5y2kzh21jJQlxcf8AWFZLPR6jgTFU/ULyc3nRFpJYaekazrRGCQlUml29S0tLWCgBIkmomrlaN3p932247o9GUK/7rtPvBZGn/gv8tjsMonalQSsWOxT7jKZEx9Iqu5qfzwniPBRAE+DWnBV4CsL8BHGAJDJG9EodDkYFXDOl4l6z3gqcRnPoD/xhu98cNJyW2xg4vjP03VY9Mo1zJi/oBY9SCXxbwZtbCn4FmMwIaJnXcy7UoAupSvKE5oXM3Noc1SgU6iLgWotDz283bEHyWQaasJ2zpMigNpvOygLZYvXrWQiL0koEnjEuUeaWx/DDLHe/VQVRPgnRDkKn1APVVNhzI9WrfD7OO9jMu4KPioTo06aqKznBKybbn96GRk/LemLWiWHhVtzXW/4SYg+A/Qk/e7c063jJnGxEr25ZdXEoWelW/X1CtadaMZ8XZUdbWjK5greVcrp2DLhQuvd8zR6B2msI+0vXzpr1TuS1fZtfIac0lkhCrubPKJdfeHPEIPSbY6TOz/KrD5qtkKpuEpZyn62fqaeJZvzp6wWHWPsp86X6WTCevLVrD9ZGHJWnemhIQid6pS+Y5w9mAzMFS5QiMr4Jvg9gX/Bt47rIay5STdN9IeHjL4aWuo6JMGYFlaOBWRo25bfkKZ9nEL45vYMpJf71zl6KD+/s8dlprIQwR+bal/zZ2SLluGAw9dOg5NIxl+oJqoLTyYbcvxLcVPwo6vs/+kPnT4q/nUn3nfm9ZaOmu+eh+x8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdb9o8FL7fr4iyyyrkE0iigpRC2eiAdoHSaTevjHMCbhMbYgfofv2c0FBgtOteqRL1yfFznvPhx77kKE0sP+AcMkEYVfrdlvofoGbds3Csgde0NWcWNTWv4TQ1w2lAvWHFOEYNVelznkOfcoGoaKmWYdqaaWmWOzFt3zJ9p1kzXO+nqkwh4xJautQMVdmmCeV+Gbal5hn1GeKE+xSlwH2B/XEwHPjS00cVJ7V9uWNZBszaCyGWvq7jWgQYkgTXMEv1S/3I5zLi/pjMKRJ5Bi8xI95SX/ZuNpvaxq6xbK5bhmHohqdLn4iT+We1/anaDFGfxmy37iDKKMEoIb9QQWoIYsEiJUjmLCNikb4BbeqmUUBrsMUaNh36WdVfA5TsPoh0RDLjSOMLZFZgIcSQAcWg3If9lvr5Yx3c7Z1kiPKYZSk/Wf8bJaBrSNgSIo1XmVXsPo54plztS8B+n+Ik52QNo2JMlggDV+4yiMl2QLgcvogrZfuVLZd/pJoywP/Slkv9kKukrp+pTpfMgYv/07PDfu1QpijJoU3nYTcfPH5DzpfuwL2/D389rodmXeAxa5UUDp13pPbtflmfDut+tl42hT2zG0DvohF9YePrxvONsyRistKbbv4VzZ7ibeNHIix9PX0aThbOfZKZ2ws9nYV2/eH+69qy78LR4GbEpm48u/j0A4WjeeoknWAb3g5/hjeTx9nDYGXe2NyobyYDmK5S6+EhvlhNbM8y2TKwkZfg0e3q2Y15fNddTR+/58N4HRqjT9Ob+gZNUJ02radkcPttMfnees3pMIdjYyUJ43z2CFhUy2I8+l2lJ/uFxPvyUlhIpMWlq78sNIoLoEJtF7sKafFzKUAk8mUzd+urbsexgmvzuu7ZtmManSsvsOR/nuOaPS9wKw3asTih2GE0JkWsQmV38/M+QZz6HGgEmbZmOV4AV99B7CKBlD4N5eFglMOESRW3O9eu5zSMIDCbvXrDbVh21/J63tW163Zc60pVRkzc0tssiAVkxwreOFLwEDBZEihkvphzLgedC1mSFVrnIjFra1SjkMuLICu02Lcct65zki4TKAjrKYvyBGrLxbIskM53v5aGMC+thOMlywRKzPIYvpnl6beqINInIoUDL1K6AtlUOHMj2VU+b+ftHeZdwQd5RIrTJqsrMoJ3TI4/vQ5NMS37idknhrlZcd9v+UeIMwD6O/z009Ls40VrchC9umXlxSFlpV31d4Vqq1q+XudlR5uFZGYSXpfKaepjwLnUvecJewKq7yH0D107e9Ynkff2Y365WNCxQAJSOX9KufzAm2MMvHhz9OX52X70QXMUUtZNwFacs3US+TQpGL/7esE+Lvyk+U7+bFgWvbbrDNZBHJmnfGgIQufFqrhgnt+YDcwkLJGKyLJD8HMA54IfG/dF3nMRcppmuYC3vyiF1LVUhDHLqeh31dJwKL8lT/G8BP/V6Q+YUuJf7uwtf/PO/jEcjKUQpkjd+5K/O2ukHBcMavE0KLm01K18gsrgdH4g9y8EDxU/CDrOdadn/E3xjzNp/2H+03JQ09Pz0P4N</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqc2lTCoWOMMPVw4g3UM/Rl29CuoFoSUqTcvHXn6RYBESPfjPMlOzurL32pSs5E3gWuUFDCEgk5czotWvmf0WE/JEX+lZlRDzL80fIwmWHWOPQK4VeuUS8smcaPSFS6DEhMZM103VQ0UKu5VbuUDFwUVByChXffTKNB0iEglYuBcc0VrOIiSALWzPThAUcCyoChmcgAkmCYeOyHyjPAOeczPrZhmUWMKlPpYwD2yaFEAhEESkQPrPP7D2fs1AEQzphWKYJvMUMRc1827tcLgvLYoEnE9t1HMd2qrbyCQWdnJr1k3wzhD025pt1CzPOKMERfcWa1CXIKQ+NRjThCZXT2SfQyEaOhrZgRSyCPHZq2u8BMnbfRNojmQhsiSlGOdgAxpAAI2DcD3o18/R7HdzsvUswE2OezMTB+meUgC0g4jGElsgzy9l9H/FIuepnQIIeI1Eq6AKu9JjEmIAwbhIY01WfCjV8oTCy9hsroX40nzIgP2nLmb3LVVG3j1SnTScg5P/p2W6/NigPOEqh7nY6sMCDi+Utm7bXAz53V8KPyved4bKWUdh13pDatvttfTis29l62zS4br5KhH6pxzrEzZsnNJpfv3Tp/E9xOOJx837tv16+SructtvJ+dXjZY+VlmR6dfv0MPden+atqV+Mk7JN7y/WJ/PqzWNx8Dw/HyHaEqPhCF7uEg/57Lwix2vaSHl1OfGeGXXmczx+vFj+cteTX7ej1/Pbq9ZvgTAfRs+/72DS596JVxqgq6Y7Ht/Es/7jzcWi/1J7z2k3h31jLgnDdPQMROZLPR69ttFV/cLya3nRFhpa48w1iLVGCQlMmnW9S0tLkCoBomGgmrlZd7str+r4bqdULRY95LSa1Yar/lW9CupWG5VcgzYsDii2OBtTHUur7GZ+viZIZoEAFkJiLXhKpiDMLxDbWGKjxwbq4+BMwB1XKo6qJbfjtf1usdEqec1SBTntMvLcTsVvdqsl3zSuuLxm10ljLCHZV/DynoIPgNCYgpZ5PedCDbqQqiRzvEhlhAoLXGCQqoMg0VocuF6lZAs6iyPQhO0ZD9MICvE0zgpki83TtTARmZUKEvNE4ghln+GnWR6+ywuifEKqHYROqQmqqXDkRPLyfD7k7R09uXL4RhpS/bWp6sqEkg2T/VfvQ6OnZTsx28SIQDn37ZYfQhwBsL/gZx+WZhsvXNCd6Pkpqw4OJSv1vL9zXJgX0sUizTrqa8lMFLytlBPZQyCp0r31HX8BZm8h7G8dO1vWB5G39n1+qZyyocQSZmr+jGz5jTvHEIS+c/TU97P67oVmL6Sqm4SVPGZrRepqohl/eXshAdF+ynyjHkuehO/tOoK1E0flqS4akrKJXukDZv3JbBCuYKlSRJ7sgh8DOBZ837gt8paLVNM0SiV8/sbQUlczMSE8ZbLXNjPDrvxmPOU6huDd6QNMJvFvZ/ZKfHpm/7nsD5UQzrC59aX/drZoNi4ETH01yLjUzJW6gqrgbLIj928EdxW/0Wh5nVbX+Zfi72dS/2D+aNmp6eH3UP8L</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0821481388236908023</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0821481388236908023</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0821421388236902500</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0821451388236905814</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0821481388236908023</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6BC42511E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>CDC43AE1E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>00D4B072E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55441df8-53cf-49ee-8a25-b9a697f36b35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="110cf0b5-e134-4e41-9962-f8092b34a3ab"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YouthBAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create -YouthBAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ad9564f3-b00a-43c7-bb1b-30aea8c3ac43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>83D4B063E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360450FD1EE5E0401F0A059945A9:4C1730EC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0821561388236916318</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>D2D4FA43E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:D2D4FA43E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:D2D4FA43E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>83D4B063E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5D4D0F3E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">28D49674E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:83D4B063E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5D4D0F3E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:28D49674E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlNGNpiLXYEqG4cdZsllgGQzedkSUgMabJlYMpB8/UomJsCQTLJVqSJqt06fvuhI5wIncdUPhIBMspQb/aht/utMSQPT2sSCGjQtF9eo5U0axIIpmdik4bYaDcc0+kLk0OdCYi7bZtV2apZTtaqtsVPzq45fr1Y8x3swjTvIhIJWLhXbNDZJzIVfhG2becb9FAsmfI4TEL4k/ii4HPjK08clJ7NzvmVZBMw6cymXPkKkQoFAHJMKSRN0jg58zqnwR2zGscwzeIlJRdt82bteryvrWiXNZqhq2zayPaR8qGCzr2bnS7kZaJ9P0+26i3nKGcExe8aa1CXIeUqNIJ6lGZPz5A1oBzm2hrZgQyziuPyriV4DFOw+iHRAMhPYEnPslGBDmEIGnIBxO+y3za8f6+B27zjDXEzTLBFH689RAr6COF0CtUSZWcnu44gnytU5B+L3OYlzwVZwpcdkiQkI4yaDKdsMmFDDR4VRtN/YCPXHyikD8pm2nKN9roo6OlGdiM1AyP/Ts/1+bVHucJxD5yH+0fDONox9Ry617ac5JSNRDxYcL9oFhX3nLaldu1/Wx8O6m62XTdc3rvNIvX++NVebQR8Jh87v784uLhuLBe0PrgbROllcRM+PyTfyFNYxpePAe06XNOzO1uHPnvvXrftLrj07Cc7CL6ubYL6+6WaI5PFtRJwnSRMPeuHD5TxD3eE93DZ74xDb8tvDHVo8EA58nU3yJGzW3NH9VXwFP56vB3+nvXlt/EXw4fN0MbzPfz7X6Rp/H04W7dec9nM4NJaSMMonv4DIcqnHox8ZPdUvLN+XF21h1JoWrv5Sa5SQwKXZ0bu0tPi5EiBGfdXM7bpVi9zQbtQu6l6t5jp2N/SCqvrPc1tOzwtapQZtWRxR7KZ8ynQsrbLb+XmfIEl8AZxCZq3SnMxBmO8gRlhio8+H6nCkXMA4VSruul4Yul7keM1WWO96TjO4uPCqgR02umEzck3jKpXX/DoLphKyQwVvHCj4EAhbMtAyr+dcqEEXUpXkEa9yGTuVFa5wyNVFkGkt9qtuq44ES5YxaMIoSWkeQ2U5XxYFQmL7W7UwEYWVCbJMM4ljpziGb2Z5/K0siPKhTDsInVIIqqlw4kZyy3zeztvbz7uED3LK9GlT1ZUZI1smh59eh0ZPy25idokR4ZTcd1s+CXECAL3DDx2XZhePrthe9PKWVReHkpVO2d9HXHms5KtVXnS0qSUzU/BIKaeDRkBypXtP43QBHO0g0IeunR3ro8g7+yG/XM75SGIJiZo/o1h+4M0xAqHfHH11fjYffdAchFR1k7CRp2zdWD1NNON3Xy/EJ9pPmW/UzzrN6Gu7TmDtxVF5qoeGZHymV/qCeXpjNkiqYJlSxDTbBz8FcCr4oXFX5B0XqaZpkkt4+4uhpa5tYkLSnMt+ZBaGffkteMqnJfivTr/BFBL/cmdvxJt39v3lYKSEMMHmzpf92dlixbgQMPXToODSNjfqCaqC89me3L8Q3Ff8qBq5vcD9o+IfZtL5zfy7Za+mx+eh8x8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlNGNpiLXYEqG4cdZsllgGQzedkSUgMabJlYMpB8/UomJsCQTLJVqSJqt06fvuhI5wIncdUPhIBMspQb/aht/utMSQPT2sSCGjQtF9eo5U0axIIpmdik4bYaDcc0+kLk0OdCYi7bZtV2apZTtaqtsVPzq45fr1Y8x3swjTvIhIJWLhXbNDZJzIVfhG2becb9FAsmfI4TEL4k/ii4HPjK08clJ7NzvmVZBMw6cymXPkKkQoFAHJMKSRN0jg58zqnwR2zGscwzeIlJRdt82bteryvrWiXNZqhq2zayPaR8qGCzr2bnS7kZaJ9P0+26i3nKGcExe8aa1CXIeUqNIJ6lGZPz5A1oBzm2hrZgQyziuPyriV4DFOw+iHRAMhPYEnPslGBDmEIGnIBxO+y3za8f6+B27zjDXEzTLBFH689RAr6COF0CtUSZWcnu44gnytU5B+L3OYlzwVZwpcdkiQkI4yaDKdsMmFDDR4VRtN/YCPXHyikD8pm2nKN9roo6OlGdiM1AyP/Ts/1+bVHucJxD5yH+0fDONox9Ry617ac5JSNRDxYcL9oFhX3nLaldu1/Wx8O6m62XTdc3rvNIvX++NVebQR8Jh87v784uLhuLBe0PrgbROllcRM+PyTfyFNYxpePAe06XNOzO1uHPnvvXrftLrj07Cc7CL6ubYL6+6WaI5PFtRJwnSRMPeuHD5TxD3eE93DZ74xDb8tvDHVo8EA58nU3yJGzW3NH9VXwFP56vB3+nvXlt/EXw4fN0MbzPfz7X6Rp/H04W7dec9nM4NJaSMMonv4DIcqnHox8ZPdUvLN+XF21h1JoWrv5Sa5SQwKXZ0bu0tPi5EiBGfdXM7bpVi9zQbtQu6l6t5jp2N/SCqvrPc1tOzwtapQZtWRxR7KZ8ynQsrbLb+XmfIEl8AZxCZq3SnMxBmO8gRlhio8+H6nCkXMA4VSruul4Yul7keM1WWO96TjO4uPCqgR02umEzck3jKpXX/DoLphKyQwVvHCj4EAhbMtAyr+dcqEEXUpXkEa9yGTuVFa5wyNVFkGkt9qtuq44ES5YxaMIoSWkeQ2U5XxYFQmL7W7UwEYWVCbJMM4ljpziGb2Z5/K0siPKhTDsInVIIqqlw4kZyy3zeztvbz7uED3LK9GlT1ZUZI1smh59eh0ZPy25idokR4ZTcd1s+CXECAL3DDx2XZhePrthe9PKWVReHkpVO2d9HXHms5KtVXnS0qSUzU/BIKaeDRkBypXtP43QBHO0g0IeunR3ro8g7+yG/XM75SGIJiZo/o1h+4M0xAqHfHH11fjYffdAchFR1k7CRp2zdWD1NNON3Xy/EJ9pPmW/UzzrN6Gu7TmDtxVF5qoeGZHymV/qCeXpjNkiqYJlSxDTbBz8FcCr4oXFX5B0XqaZpkkt4+4uhpa5tYkLSnMt+ZBaGffkteMqnJfivTr/BFBL/cmdvxJt39v3lYKSEMMHmzpf92dlixbgQMPXToODSNjfqCaqC89me3L8Q3Ff8qBq5vcD9o+IfZtL5zfy7Za+mx+eh8x8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZcuI6EH2fr3B5Hm8ZWQazuAJVBIeJZ8jGku3llpAb0I0tO5ZESL5+ZBMTICSTuVUUoHbr9OnFRzoSJI4crysEZJIl3Aj8tvmv3XRauDYFa9og2KrVp441tRu2VW3Q6swBPIUWNo1ACAUBF5Jw2TYdG1ct7FhOc4yrnoM9163gevPeNK4hExpau1Rs01jFERdeEbZtqox7CRFMeJzEIDxJvVH3bOBpT4+UnMzO0ZplETDrLKRMPYRoJQQKUUQrNInREdrxOQqFN2JzTqTK4DVmKNrm696np6fKU7WSZHPk2LaN7BbSPqFg8+9m51u5GcKAz5L1ukd4whklEXshOakzkIskNLrRPMmYXMQfQGOE7RzaghW1KK7x7yZ6C1Cw+yLSDslMEEssCC7BhjCDDDgFYzIM2ub3r3VwvXecES5mSRaLvfXfUQK+hChJIbREmVnJ7uuIB8rVOQLqBZxGSrAlnOdjkhIKwrjMYMZWAyb08IXCKNpvrIT+sHLKgP5NW47QNldNHR2ojs/mIOT/6dl2v9Yo1yRS0Hn0Z+7dMA0mg4V7oezscoJYrUEcKh/aBYVt5zWpTbtf1/vDupmt100ENy8vXy5OZ426Cq+f737c/Dh15z/RzUPUFzSeTP4ZPz8Oxzf2LxScO5i554NLclvn7u1EfwMfuGFs27END78W3xR3JvPJ0v9RP7lJr87I7Rie+7MrR5zcvfj4pVlX0xo4TvpzmDwcPwwCpORFcByrs4F7Gt+Pbxo+uq+eKnR1z0bfhkvl/Oxfxe7dy6Q1QKtFt9t+y2k7h11jKQkjNf0PqCyX+XgEvtHX/SLyc3nJLSy0ZoWrl+YaJSRwaXbyXbm0eEoLEAs93cz1+sT1a77dr564rWq1hu3ecavr6H+tWhP3W91mqUFrFnsUewmfsTxWrrLr+fmcII09ATyEzFomii5AmJ8g+kQSI+BD/XIkXMA40Spe7/WbjWrXOem1etj3j5u9Rs/GNq5jHze7vappnCfygl9k3ZmEbFfB6zsKPgTKUga5zOdzLvSgC6lL8kiWSka4siQVDkofBFmuxZ5Ta7pIsDiNICeM4iRUEVTSRVoUCIn1r2MRKgorEzRNMkkiXLyGH2a5/6wsiPYJWe4g8pSOQTcVDpxItTKfj/NubeddwndVyPK3TVdXZoyumew+ehuafFo2E7NJjApcct9s+UuIAwDoE35ovzSbeOGSbUUvT1l9cGhZ6ZT9fSSVx4paLlXR0UYumZmGR1o5MRoBVVr3nsfJA3C0gUBfOnY2rPcib+y7/JRc8JEkEmI9f0ax/MKdYwQiv3ME+v1ZffVCsxNS103CSh6y9SJ9NckZf3p7oR7N/bT5Uv88JVn41q4DWFtxdJ76oiEZn+er/IB5/mA2aKJhmVbEJNsGPwRwKPiucVPkDRepp2mqJHz8xMilrm0SShPFZeCbhWFbfgue8jkF783pHUwh8a9n9kp8eGbfng1GWghjYm582Z+dLVaMCwUzvxoUXNrmSl9BdXA+35L7V4Lbiu87fq3frf1R8Xcz6bwzv7ds1XT/fej8Bg==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH++U0lKg7QgzFUS5onIBPerLnZBuaLRNapMC+utvUiwCokfvjDOY3Z211/7ISo45SmLbDziHTBBGtX63pf/bcMNZFSHbQGGjZjgwBcNFUDUcNEUYPKc586q61uc8hz7lAlHR0u2qVTMs27DdiVXzbcuvexXXdR907RYyLqGlS0XuWiUx5X4RtqXnGfUZ4oT7FCXAfYH9cXA58KWnj0pOevt4zbIImLUjIVLfNHElBAxxjCuYJeaxueNzHHJ/TOYUiTyDt5ghb+lve5fLZWVZq7BsbtrVatWseqb0CTmZH+ntX+VmCPt0xtbrDqKMEoxi8ooUqUsQEQu1IJ6zjIgo+QTaMq2qgjZghQ1sOfRIN98DFOy+ibRDMuPI4BGySrARzCADikG7GfVb+tH3OrjeO8kQ5TOWJXxv/TNKQBcQsxRCg5eZley+j3igXO1jwH6f4jjnZAFXakxSmQLXhhnMyGpAuBy+kGtF+7UVl3+knDLAP2nLsbnNVVI3D1SnS+bAxf/p2Xa/1ii3KM6hfX62Ouer33fjnKXnQXrxXPMm4+QeiYnbKihsO69Jbdr9tt4f1s1svW2i4uXvaeA5TvN6Mryx7/BgVYvqZPyUPJjXo+t/oh56vH+wnb9e+YiOIjTrRM/uIJnPV6fshtbEjRO61kUQDa4W0a9e9/ekn10kJ5cDdNnDnbunB2s5rT/HaXO4zLLhQFwT++x1GHRYves+xfdn44F7e/cSpHN+Bbm1yMNx9+ZlOj8j6NfZ48gCfhOIxcXktW9OesN56z2n7Rx2jaUkjPPpI2BRLtV49LtaT/YLia/lRVlIaMwKVz9VGsUFUKG31S4lLX4uBYiEvmzmem27XcdrNJ3TulerOVa1c+IFtvzPc1yr5wVuqUFrFnsUO4zOiIqlVHY9P18TxInPgYaQGQuW4wi4/gViFwmk9elIHg5GOUyYVPGOW7fs027dPT1tNJq9umN7jZNeLah7VffEChq6dsXENb3OgpmAbFfBGzsKPgJMUgJK5tWccznoXMiSPKNFLmKrskAVCrm8CDKlxb7tuHWTkySNQRE2ExbmMVTSKC0KZPL1rxQnzAsr4ThlmUCxVRzDT7Pc/1YWRPqERDlwldIJyKbCgRvJKfP5kLdz8OYq4YM8JOq0yeqKjOA1k91P70OjpmUzMZvEMLdK7pstP4Q4AGB+wc/cL80mXrggW9HLW1ZeHFJW2mV/n1HluZIvFnnR0aaSzEzCm1I5LXMMOJe69zJhT0DNDYT5rWtnw3ov8sa+yy8XER0LJCCR86cVy2+8OcbA1ZujL8/P6rsPmp2Qsm4CVuKQrRPLp4li/OXrBftY+UnzUP4sWRa+t+sA1lYcmad8aAhC52qlLpiXT2YDMwlLpCKybBv8EMCh4LvGTZE3XIScpmku4PMvmpK6lo4wZjkV/a5eGLblt+ApXlLw350+wBQS/3Znr/ind/bd5WAshTBB+saX/NnZIMW4YNDV06Dg0tJX8gkqg9P5lty/EdxW/K7ddXqBU/uT4u9m0v5g/mjZqun+eWj/Bw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0821561388236916318</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0821561388236916318</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0821511388236911934</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0821541388236914222</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0821561388236916318</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>93D4C063E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F5D4F0F3E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>38D4B674E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4830d9c-88ec-4c42-ae57-ec8dbcee4bfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad9564f3-b00a-43c7-bb1b-30aea8c3ac43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="cf17c7cf-04a3-4cee-b875-e4d896be5b68"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="46657672-b144-410a-a5b4-3bf4351c8c5a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>BBD45BA5E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973173E62D9775E0401F0A07995A24:4332E07B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082271388236927971</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>0BD4C885E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0BD4C885E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:0BD4C885E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>BBD45BA5E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1ED4B476E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F0E4DC47E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:BBD45BA5E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1ED4B476E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F0E4DC47E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1N6oUDbEWa4alWUA17O8eWbkAaItgkmaUF//UkKRUD06DfjDGZ3Z+21L1nJKQdJ7ARNzhETmBIt7NT1/8aeC3zXsgw0tseG6zkTwwPjquFMoGU57rhi+1VdCzlPUUi4AETUdceyy4btGI53a5cDxwksp1T1a4+6do8Yl9DSpWTp2jKJCQ/ysHU9ZSSggGMeEJAgHggYjJr9q0B6BqDgpDdOVyzzgKwxE2IemCYsRQiiOIYlSBPz1NzxOY14MMJTAkTK0DpmxOv6eu9isSgtyiXKpqZjWZZp+ab0iTieHuuNo2IzikIyoat1GxBKMAQxfgOKVB+JGY20ZjylDItZ8gm0bdqWgjbQEhrQdsmxbr4HyNl9E2mHJOPA4DNgF2BDNEEMEYi0u2FY14+/18HV3lsGCJ9QlvC99c8oIZKhmM5RZPAis4Ld9xEPlKtximAQEhinHGfoWo3JHEDEtQFDE7y8wlwOX8S1vP3akss/XEwZgj9py6m5zVVSNw9Up4OniIv/07Ptfq1Q7kGcokaS3ppj5/Wsf/Z0ORaea9lwvrjslVtTq55T2HZekdq0e73eH9bNbK038bY9tKbl7tvFTf8aNK0arOEeGLbJb8Qc92rUZmG7jKPzbsW7uXMxvqPd8z/3b78qC+qF9u19j7+cPGTnC9Abz45eu9lYMPPP3dk4YSeZiB8qw8sBZRniw+7y6b43X5w9NKs9Px3wbvvXw+zm6eURhlmNzZ5jctK/rD4P7txB/6J1mR2VW+DaOn+MxPCEX168nsNoWn/PaTuHXWMhCaN0/ISgKJZqPMKO1pP9AuJreVEWHBmT3DWYK43iAhGhN9QuJS1BKgUIR4Fs5mrdanXcSqtZ6Vb8ctm1rXbLbzryP9/17J7f9AoNWrHYo9imZIJVLKWyq/n5miBMAo5IhJiR0RTOENe/QOwAAbSQDOXhoISjWypVvNX1e82O17J8t9v2mlKfK65fbfe6drfjtyo1Xbum4obcsOZEILar4NUdBR8iiOcYKZlXc87loHMhS/ICslTEdikDJYJSeREwpcWB43oVk+NkHiNF2ExolMaoNJ/N8wKZfPXrGADy3Io5nFMmQGznx/DTLPe/FQWRPhFWDlyl1EKyqejDjWQHlSKfz/P2t/Mu4JtphNVpk9UVDMMVk91P70OjpmUzMZvEILcL7pstP4Q4AGB+wc/cL80mXpThrejFLSsvDikrjaK/L6D0UkqzLM07WlOSySS8KZXTNkcIplL3Xm/pMyLmBsL81rWzYb0XeWPf5ZeKGRkJIFAi50/Ll994c4wQV2+OUJ6f5XcfNDshZd0EWopDtnYsnyaK8ZevFxhA5SfNA/mzoCx6b9cBrK04Mk/50BCYTNVKXTCvn8wGpBIWS0WkbBv8EMCh4LvGTZE3XIScpnEq0OdfNCV1dR1ASFMiwo6eG7blN+cpXucoeHf6AJNL/PrOXvJP7+zf/auRFMIE6Btf/G9nA+fjApGungY5l7q+lE9QGZxMt+R+TXBb8S2p+G3P+6fi72bS+GD+aNmq6f55aPwF</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1N6oUDbEWa4alWUA17O8eWbkAaItgkmaUF//UkKRUD06DfjDGZ3Z+21L1nJKQdJ7ARNzhETmBIt7NT1/8aeC3zXsgw0tseG6zkTwwPjquFMoGU57rhi+1VdCzlPUUi4AETUdceyy4btGI53a5cDxwksp1T1a4+6do8Yl9DSpWTp2jKJCQ/ysHU9ZSSggGMeEJAgHggYjJr9q0B6BqDgpDdOVyzzgKwxE2IemCYsRQiiOIYlSBPz1NzxOY14MMJTAkTK0DpmxOv6eu9isSgtyiXKpqZjWZZp+ab0iTieHuuNo2IzikIyoat1GxBKMAQxfgOKVB+JGY20ZjylDItZ8gm0bdqWgjbQEhrQdsmxbr4HyNl9E2mHJOPA4DNgF2BDNEEMEYi0u2FY14+/18HV3lsGCJ9QlvC99c8oIZKhmM5RZPAis4Ld9xEPlKtximAQEhinHGfoWo3JHEDEtQFDE7y8wlwOX8S1vP3akss/XEwZgj9py6m5zVVSNw9Up4OniIv/07Ptfq1Q7kGcokaS3ppj5/Wsf/Z0ORaea9lwvrjslVtTq55T2HZekdq0e73eH9bNbK038bY9tKbl7tvFTf8aNK0arOEeGLbJb8Qc92rUZmG7jKPzbsW7uXMxvqPd8z/3b78qC+qF9u19j7+cPGTnC9Abz45eu9lYMPPP3dk4YSeZiB8qw8sBZRniw+7y6b43X5w9NKs9Px3wbvvXw+zm6eURhlmNzZ5jctK/rD4P7txB/6J1mR2VW+DaOn+MxPCEX168nsNoWn/PaTuHXWMhCaN0/ISgKJZqPMKO1pP9AuJreVEWHBmT3DWYK43iAhGhN9QuJS1BKgUIR4Fs5mrdanXcSqtZ6Vb8ctm1rXbLbzryP9/17J7f9AoNWrHYo9imZIJVLKWyq/n5miBMAo5IhJiR0RTOENe/QOwAAbSQDOXhoISjWypVvNX1e82O17J8t9v2mlKfK65fbfe6drfjtyo1Xbum4obcsOZEILar4NUdBR8iiOcYKZlXc87loHMhS/ICslTEdikDJYJSeREwpcWB43oVk+NkHiNF2ExolMaoNJ/N8wKZfPXrGADy3Io5nFMmQGznx/DTLPe/FQWRPhFWDlyl1EKyqejDjWQHlSKfz/P2t/Mu4JtphNVpk9UVDMMVk91P70OjpmUzMZvEILcL7pstP4Q4AGB+wc/cL80mXpThrejFLSsvDikrjaK/L6D0UkqzLM07WlOSySS8KZXTNkcIplL3Xm/pMyLmBsL81rWzYb0XeWPf5ZeKGRkJIFAi50/Ll994c4wQV2+OUJ6f5XcfNDshZd0EWopDtnYsnyaK8ZevFxhA5SfNA/mzoCx6b9cBrK04Mk/50BCYTNVKXTCvn8wGpBIWS0WkbBv8EMCh4LvGTZE3XIScpnEq0OdfNCV1dR1ASFMiwo6eG7blN+cpXucoeHf6AJNL/PrOXvJP7+zf/auRFMIE6Btf/G9nA+fjApGungY5l7q+lE9QGZxMt+R+TXBb8S2p+G3P+6fi72bS+GD+aNmq6f55aPwF</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+I8FP2+v6LT/eiUvgKlI8xAK8iuqAuKL1+eCekFom2KTQplf/0mxSIguu4z4wzm9ubcc19yklOG4sjy2oxByklClX7QVP+bTEMndBugYbdR05wanmqu5diaYbgTaDRgMnFtVekzlkGfMo4ob6qWYdqaaWmWe2PanmV5Rr1SrRuPqjKGlAlo4VIxVCWPI8q8ImxTzVLqJYgR5lEUA/M49kbtwYUnPD1UclJbpxuWRcC0Ned84ek6roSAIYpwBSexfqrv+ZyGzBuRGUU8S+E1Zsia6uve1WpVWdmVJJ3plmEYutHQhU/IyOy72vpWboawT6fJZu0jmlCCUUR+I0lqAHyehEo7miUp4fP4A2hTNw0JrUGONWw69LuqvwUo2H0RaY9kypDG5sgswYYwhRQoBuV22G+q37/Wwc3emxRRNk3SmB2s/40S0CVEyQJCjZWZley+jnikXK1TwF6f4ihjZAmXckwWCANTrlOYkvyCMDF8IVOK9is5E3+knDLA/9KWU32Xq6CuH6lOQGbA+P/p2W6/NihjFGXQ+qHnjzX/nAa3aPirlj/Fv8bhL2MwH9v9ZkFh13lDatvu1/XhsG5n63VT76FGk3lsG/ShHtdO3LPJU9B9PPmRnnQozKptB/Xu9MGl1X/wX7KzRj0f9abX9bVNr6iOUWLbD4voyr96QuFL79v9cpxdrOn6gsfdWXDJ8M+2a/nDO6feW3cbw9/LUX/Jbjvp3ej88uGHP76fPT+f+YOf8JD/vCZBlvdmY98ddDr2c/rtenT+2HPNk/rz/f35xFivVknzLafdHPaNpSSMsskTYF4u5Xj0A6Ur+oX45/IiLSTUpoWrt5AaxThQrrbkLiktXiYEiISeaOZmbZ4FTsep186qDdt2TMPvNNqW+K/huGa30XZLDdqwOKDoJ3RKZCypspv5+Zwgjj0GNIRUWyYZngNTP0EMEEdKnw7F4Ugog5tEqHi149aNdrUanHVdq27X27bhmh2/2/H9Ri0IHFW5TPgVvUrbUw7pvoLX9hR8CJgsCEiZl3POxKAzLkrygpYZj8zKElUoZOIiSKUWe5bjVnVG4kUEkrAeJ2EWQWUxXxQF0tnm19IQZoWVMLxIUo4isziGH2Z5+K0siPAJiXRgMqUOiKbCuxvJ9KplPu/ydo7eXCV8OwuJPG2iujwleMNk/9Pb0Mhp2U7MNjHMzJL7dss/QhwB0D/hpx+WZhsvXJKd6OUtKy4OISutsr8vqPJSyZbLrOhoXUpmKuB1oZymPgKcCd1b3yTPQPUthP6la2fL+iDy1r7PL+NzOuKIQyzmTymWX3hzjIDJN0dfnJ/8qw+avZCibhxyfszmR+JpIhl/+nrBHpZ+wnwtflZJGr616wjWThyRp3hocEJnciUvmPUHs4ETAUuEIibpLvgxgGPB943bIm+5cDFNk4zDx18UKXVNFWGcZJT3A7Uw7MpvwZOvF+C9Ob2DKST+9c7O2Yd39v3gYiSEMEbq1pf83VkjxbhgUOXToODSVHPxBBXB6WxH7l8J7iq+0Qkc33Wrf1P8/Uxa78zvLTs1PTwPrT8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxlZsnMAMYp24hZIA2PXk5I+SNUWrLjiVz6dcfycQECEnTM5MZou2ttde+aEnXDCWx5fYYg5yTlCqB11H/NY0Gdoz6QgubBtKcuhFqbbONtSZGhr1ooHrdNlQlYKyAgDKOKO+olmHammlpVmtu2q5luaZRE24PqvIDciaghUtN7NomMWVuGbajFjl1U8QIcylKgLkcu7PeeOQKTxdVnNTu9Z5lGTDvrjjPXF3HtRAwxDGu4TTRr/UTn+uQuTMSUcSLHJ5jhqyjPu/dbDa1jV1L80i3DMPQjbYufEJGos9q91O1GcKALtP9eoBoSglGMfmNJKkx8FUaKr04SnPCV8kb0KZuGhJagy3WsOnQz6r+EqBk90GkE5I5QxpbIbMCm8IScqAYlO/ToKN+/lgH93vnOaJsmeYJO1v/HSWga4jTDEKNVZlV7D6OeKFc3WvAbkBxXDCyhls5JhnCwJS7HJZkOyJMDF/IlLL9ypaJP1JNGeC/acu1fsxVUNcvVMcjETD+f3p23K89yg8UF9BtzPNkZNLxZMp29tgO2vfcf0qC6PZh3CkpHDvvSR3a/bw+H9bDbD1vwpE/XWW+P7laG/1HP/uy+DYa3w2fprvWt/bX7WT5aK2h3Xv06342vcXmwmr0hwFDs+J+581+za9Y+NvRp3Azsfgn2ij0f6ZjEu1Ww1Zk0jycjx6++D+j77NJf3u3vGlAs958cmLImsvWuFVsRv0x30ExvQvML/dzbhf3Cb9nZnEVfQpG+vp2aieb+eYG1+3FVS/tvOR0nMOpsZKEWbF4BMyrpRyPwFN80S/E35cXaSGhtixd3UxqFONAudqVu6S0uIUQIBK6opn7tW8MHW/gNIf1tm07pjHot3uW+K/ttEy/3WtVGrRncUZxkNIlkbGkyu7n532COHEZ0BBybZ0WeAVMfQfRQxwpAZ2Kw5FSBvNUqHjPrg/7ntFuekNn4AwMf+A5Vs+rD72G3/S8nqrcpnxCJ3lvySE/VfDGiYJPAZOMgJR5OedMDDrjoiRPaF3w2KytUY1CIS6CXGqxazmtus5IksUgCetJGhYx1LJVVhZIZ/tfS0OYlVbCcJbmHMVmeQzfzPL8W1UQ4RMS6cBkSn0QTYULN5JR5fMqb+fizVXB94qQyNMmqstzgvdMTj+9DI2clsPEHBLDzKy4H7b8JcQFAP0dfvp5aQ7xwjU5il7dsuLiELLSrfr7hGpPtWK9LsqONqVk5gJeF8pp6jPAhdC93Tz9BVQ/QOgfunYOrM8iH+yn/Aq+ojOOOCRi/pRy+YE3xwyYfHME4vxsP/qgOQkp6sZhyy/ZBrF4mkjG775esIulnzDfiZ9Nmocv7bqAdRRH5CkeGpzQSK7kBbN7YzZwKmCJUMQ0Pwa/BHAp+KnxUOQDFy6maVFwePuLIqWuoyKM04LywFNLw7H8ljz5LgP3xekVTCnxz3f2lr15Z/8cj2ZCCBOkHnzJn501Uo4LBlU+DUouHXUrnqAiOI2O5P6Z4LHiG33PGbRa9T8p/mkm3Vfm15ajmp6fh+5/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082271388236927971</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082271388236927971</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082211388236921249</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082241388236924492</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_082271388236927971</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>CBD46BA5E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>2ED4D476E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>01E4EC47E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46657672-b144-410a-a5b4-3bf4351c8c5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="192e0d44-14f0-408b-a092-20d51ed7572e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="68af19d4-89b5-4957-a183-0373044c00a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>84E41CD8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E563BBA0CE0401F0A05991749:B8C75342"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0822201388236940389</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>D3E461B8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:D3E461B8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:D3E461B8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>84E41CD8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6E41989E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C9E47C5AE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:84E41CD8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6E41989E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:C9E47C5AE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlchJCFAooLEJVQZ2mm39Lb7sjLOCbgkDtgOZPj1Y4eGAkM7nZUqUZ8cf+c7F3/2BUdpYvs9zoEJklEtHHb0/5pW03atemy0pu260fDcqeG1pi0Du63YdhpTiBqeroWc5xBSLhAVHd2uW45h2Ybdvrcc37Z9y625bedfXXsExiW0dKnVda1IE8r9MmxHzxn1M8QJ9ylKgfsC+5Pe9ZUvPX1UcdK7FzuWZUDWnQux9E0T1yLAkCS4hrPUvDCPfC4i7k/IjCKRM3iNGfGO/rp3s9nUNk4tYzPTrtfrZt0zpU/Eyeyr3v1SbYYopHG2Ww8QzSjBKCFbpEhdg5hnkdZLZhkjYp6+A22ZVl1BG1BgA1sN+lU33wKU7D6JdESScWTwObIqsDuIgQHFoD3chR396+c6uNt7zxDlccZSfrL+M0pA15BkS4gMXmVWsfs84plydS8A+yHFSc7JGr6rMVkiDFy7ZRCT4opwOXwR18r2awWXf6SaMsB/0pYL85CrpG6eqc6QzICL/9Ozw37tUB5RkkP3MniCu+sp0AezESbPqTPOabyxh6tvi05J4dB5R2rf7tf16bDuZ+t1Ex0H8RPehusM9cR43dr+ZfPWdb5qZzn/PnH5YzEuJsvmQ/jssu3i3i7y4U0B0TP0Ydq7aY2vV9/6LyjfpqOw/uXWmU8mi9n4/ioNXG8ALifMC/5ebOPF5WWruG33FuIWjfp0HRUP7rd5sBpOknjtLuaP238C1hyMLWQ+9zc2C6wvL+ipv+29NFficjQKl08bvOm85XSYw7GxkoRJPn0BLKqlGo9wqI1kv5D4WF6UhURGXLr6S6VRXAAVelftUtLi51KASOTLZu7W7UbQsAbDtkzbcRpWfdD3erb8z2u0rZHXa1catGNxQnGQ0ZioWEpld/PzMUGc+hxoBMxYZzmeA9c/QBwigbSQ3snDkVEO95lUcSdwewPHcu2g7QSW4w08u20H/X7gjjx7YEst/p6JG3rDerEAdqzgzSMFvwNMlgSUzKs553LQuZAlWaF1LhKrtkY1Crm8CJjSYt9utF2Tk3SZgCJsplmUJ1BbzpdlgUy++7UNhHlpJRwvMyZQYpXH8N0sT79VBZE+EVEOXKXUB9lUOHMj1at83s/bO8y7gu/lEVGnTVZXMIJ3TI4/vQ2Nmpb9xOwTw9yquO+3/CHEGQDzA37maWn28aI1OYhe3bLy4pCy0q36u0K1VS1fr/Oyoy0lmUzCm1I5LXMCOJe69+M+WwA19xDmp66dPeuTyHv7Mb9czOlEIAGpnD+tXH7izTEBrt4coTw/xWcfNEchZd0EFOKcbZDIp4li/OHrBftY+UnzrfzZZCx6a9cZrIM4Mk/50BCEztRKXTA/3pkNnElYIhUxY4fg5wDOBT827ou85yLkNE1zAe9/0ZTUdXSEcZZTEQ710nAovyVP8WMJ/pvTLzClxL/e2QV/985+vr6aSCFMkb73Jb93Nkg5Lhh09TQouXT0Qj5BZXA6O5D7V4KHij90gkbT6v9W8Y8z6f5i/tVyUNPT89D9CQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHlchJCFAooLEJVQZ2mm39Lb7sjLOCbgkDtgOZPj1Y4eGAkM7nZUqUZ8cf+c7F3/2BUdpYvs9zoEJklEtHHb0/5pW03atemy0pu260fDcqeG1pi0Du63YdhpTiBqeroWc5xBSLhAVHd2uW45h2Ybdvrcc37Z9y625bedfXXsExiW0dKnVda1IE8r9MmxHzxn1M8QJ9ylKgfsC+5Pe9ZUvPX1UcdK7FzuWZUDWnQux9E0T1yLAkCS4hrPUvDCPfC4i7k/IjCKRM3iNGfGO/rp3s9nUNk4tYzPTrtfrZt0zpU/Eyeyr3v1SbYYopHG2Ww8QzSjBKCFbpEhdg5hnkdZLZhkjYp6+A22ZVl1BG1BgA1sN+lU33wKU7D6JdESScWTwObIqsDuIgQHFoD3chR396+c6uNt7zxDlccZSfrL+M0pA15BkS4gMXmVWsfs84plydS8A+yHFSc7JGr6rMVkiDFy7ZRCT4opwOXwR18r2awWXf6SaMsB/0pYL85CrpG6eqc6QzICL/9Ozw37tUB5RkkP3MniCu+sp0AezESbPqTPOabyxh6tvi05J4dB5R2rf7tf16bDuZ+t1Ex0H8RPehusM9cR43dr+ZfPWdb5qZzn/PnH5YzEuJsvmQ/jssu3i3i7y4U0B0TP0Ydq7aY2vV9/6LyjfpqOw/uXWmU8mi9n4/ioNXG8ALifMC/5ebOPF5WWruG33FuIWjfp0HRUP7rd5sBpOknjtLuaP238C1hyMLWQ+9zc2C6wvL+ipv+29NFficjQKl08bvOm85XSYw7GxkoRJPn0BLKqlGo9wqI1kv5D4WF6UhURGXLr6S6VRXAAVelftUtLi51KASOTLZu7W7UbQsAbDtkzbcRpWfdD3erb8z2u0rZHXa1catGNxQnGQ0ZioWEpld/PzMUGc+hxoBMxYZzmeA9c/QBwigbSQ3snDkVEO95lUcSdwewPHcu2g7QSW4w08u20H/X7gjjx7YEst/p6JG3rDerEAdqzgzSMFvwNMlgSUzKs553LQuZAlWaF1LhKrtkY1Crm8CJjSYt9utF2Tk3SZgCJsplmUJ1BbzpdlgUy++7UNhHlpJRwvMyZQYpXH8N0sT79VBZE+EVEOXKXUB9lUOHMj1at83s/bO8y7gu/lEVGnTVZXMIJ3TI4/vQ2Nmpb9xOwTw9yquO+3/CHEGQDzA37maWn28aI1OYhe3bLy4pCy0q36u0K1VS1fr/Oyoy0lmUzCm1I5LXMCOJe69+M+WwA19xDmp66dPeuTyHv7Mb9czOlEIAGpnD+tXH7izTEBrt4coTw/xWcfNEchZd0EFOKcbZDIp4li/OHrBftY+UnzrfzZZCx6a9cZrIM4Mk/50BCEztRKXTA/3pkNnElYIhUxY4fg5wDOBT827ou85yLkNE1zAe9/0ZTUdXSEcZZTEQ710nAovyVP8WMJ/pvTLzClxL/e2QV/985+vr6aSCFMkb73Jb93Nkg5Lhh09TQouXT0Qj5BZXA6O5D7V4KHij90gkbT6v9W8Y8z6f5i/tVyUNPT89D9CQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3TqpVP6iaUdYQYE1iq6CiquN+/E9ADRkkCTQt1fv0mxCIiu+844gzk9ec5zPvIkJxxNEydscg6pIIxqUbuu/1et+QgHATLsql0zPOyNDGRVXcMeuceAqg72sKtrEecZRJQLREVddyxbOjiGU7u13dBxQseqWL77qGv3kHIJLV0qlq7l04TysAhb17OUhgxxwkOKpsBDgcNB87IXSs8QlZz0xsmKZREwbUyEmIWmiSsxYEgSXMFsap6YWz4nMQ8HZEyRyFJ4ixnzuv62d7lcVpZuhaVj07Esy7QCU/rEnIwP9cZBuRniiI7Yan2KKKMEo4T8RorUJYgJi7VmMmYpEZPpJ9C2aVsK2oAcG9j26KFuvgco2H0TaYtkypHBJ8guwfowghQoBu2uH9X1w+91cLX3NkWUj1g65Tvrf6MEdAEJm0Fs8DKzkt33EfeUq3ECOIwoTjJOFnClxmSGMHDtOoURyXuEy+GLuVa0X8u5/CPllAH+l7acmJtcJXVzT3XaZAxc/J+ebfZrhXKPkgwa0YXT+23/bLVn4mpxs8xw58nxvOnwGVv1gsKm84rUut1v691hXc/W26azaGD5dJh1Rw/Juf3s+cts3vdvnwX2WrMaa+bQHsU/qkfW2Y3Zf/n9+uifL+J5b8jJY7U1fnAgefSSgc+fxOTswL2ORsHw4m5w9iMfNn/dPUT0dejeVKPqLx68DMdW13aesuh8Tp4xXN2c9VqDznGTUriaB3ZO/aMuyX/dRTS/6vcPUt9id/f3fo02j8yji96TzervOW3msG0sJWGQPT0DFuVSjUfU1rqyX0h8LS/KQmJjVLiGM6VRXAAVekPtUtISZlKASBzKZq7WneOOZwe1oFMNXNezrdNW0HTkf4FXs7tBs1Zq0IrFDsVTRkdExVIqu5qfrwniaciBxpAaC5bhCXD9C8Q2EkiLaF8eDkY53DKp4u1aq9Vs+2636/huq9PpeKdOxwu6p8etWtfzbV27YuIn/Zk2RwLSbQU/3lLwPmAyI6BkXs05l4POhSzJHC0ykdiVBapQyORFkCotDh2vVjU5mc4SUITNKYuzBCqzyawokMlXv46BMC+shOMZSwVK7OIYfprl7reyINInJsqBq5RaIJsKe24ku8znQ97e3purhG9mMVGnTVZXpASvmGx/eh8aNS3riVknhrldcl9v+UeIPQDmF/zM3dKs48ULshG9vGXlxSFlpVH2d44q80q2WGRFR30lmamEN6Vy2uYAcCZ17/WWvQA11xDmt66dNeudyGv7Nr9MTOhAIAFTOX9asfzGm2MAXL05Inl+8u8+aLZCyroJyMU+22kinyaK8ZevFxxi5SfN1/JnydL4vV17sDbiyDzlQ0MQOlYrdcG8fjIbmElYIhWRpZvg+wD2Bd82rou85iLkND1lAj7/oimpq+sIY5ZREbX1wrApvwVP8TqD8N3pA0wh8W93ds4/vbMfLnsDKYRTpK99yd+dDVKMCwZdPQ0KLnU9l09QGZyON+T+jeCm4rfdjndst2p/U/ztTBofzB8tGzXdPQ+NPw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3vr/C4jx1jyxhjPIEZbmlp7kBS0pdvFHkNam2ZSDKX/PpKJiZASJp+M5khWq/Onr3oSCcCp4kbtoUALmnGjEGvaf7nxQ9xzXvwrHqAfMsjQWA1fOxbmMR1H/w4VgvTGAiRw4AJiZlsmq6DqhZyLTcYo2rouqFbrfh176dp3AEXClq5VBzTWKUJE2ERtmnmnIUZFlSEDKcgQknCUfviPFSeIS45ma2TDcsiIG/NpJyHtk0qERBIElIhWWqf2Hs+J5EIR3TKsMw5PMeMRNN83rtcLivLaiXjU9t1HMd2GrbyiQSdfjZbn8rNEA1YnG3WXcwyRglO6BPWpC5AzrLIaCfTjFM5S9+ARjZyNLQFK2IR5LHPpv0SoGD3QaQ9klxgS8wwKsGGEAMHRsC4HQ6a5uePdXCzd8wxE3HGU3Gw/jdKwBaQZHOILFFmVrL7OOKRcrVOgIQDRpJc0AVc6jGZYwLCuOYQ09U5FWr4ImEU7TdWQv3RcsqA/EtbTuxdroq6faQ6PToFIf9Pz3b7tUG5w0kOrQSlnadJgqg9qI/dOoN6l1V/ry/PqrfNgsKu84bUtt3P68Nh3c7W86bsxxS+fXm8GNxdU+F7qxnl9PvE9fr3P5JlV9ZgeX09HiJnGIye+OIe5FfSQDc/v9+e1eLZiK/Px140USyTZeB8+vFr7WZn5Pw3ureXtfhm+ZOMsvvq5ReICbrsr1Fq21+du/iOn6+TG3abNBa44z9NJuur+fTbaSPoX3Hn29Vw0r+2P9UuHwM2XJxmM3ozJ/e/burT5ktOuznsG0tJGOUPv4DIcqnHY9AzTlW/sHxfXrSFRlZcuIZzrVFCApNmS+/S0hLmSoBoFKpmbtbdRt+rd2vtfq1RrXrI6XYabVf91/ACdNpoB6UGbVgcUOxmLKY6llbZzfy8T5CkoQAWAbcWWU5mIMx3EHtYYmPAhupwZEzAOFMqftp3UMevVXvVoNPv1fuB1+v6nR5y+67XbfvINC4zecWueDuWwPcV3N9T8CEQOqegZV7PuVCDLqQqySNe5DJBlQWuMMjVRcC1FoeuF9RsQdN5ApqwnWZRnkBlPpsXBbLF5tdVaiQKKxVknnGJE1QcwzezPPxWFkT5RFQ7CJ1SB1RT4ciNhMp8XuXtHb25Svh2HlF92lR1Jadkw2T/08vQ6GnZTsw2MSJQyX275R8hjgDY7/CzD0uzjRct6E708pZVF4eSlVbZ30dceazki0VedLSuJZMreFspJ7JHQHKle+tx9huYvYWwP3TtbFkfRN7a9/nlcsZGEktI1fwZxfIDb44RCP3mGKjzs/rog2YvpKqbhJU8Zusm6mmiGb/7eiEh0X7KfK1+lhmPXtp1BGsnjspTPTQkZVO90hfM+o3ZIJmCpUoRM74LfgzgWPB947bIWy5STdNDLuHtL4aWuqaJCclyJgc9szDsym/BU67nEL44vYIpJP75zl6JN+/sycX5SAlhis2tL/27s0WLcSFg6qdBwaVprtQTVAVn0x25fya4q/i9at/zUSf4m+LvZ9J6ZX5t2anp4Xlo/QE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0822201388236940389</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0822201388236940389</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0822141388236934320</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0822171388236937033</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0822201388236940389</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>94E45CD8E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F6E42989E5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>D9E48C5AE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>68af19d4-89b5-4957-a183-0373044c00a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="757ade0b-6900-4632-9017-6e1d59129c31"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="cd9476db-73d1-40a6-9f55-84a7d899ccce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>5DE40A7BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B408EC61C7E0401F0A0799472F:35AAE9F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0822291388236949224</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>ACE45E4BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:ACE45E4BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:ACE45E4BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5DE40A7BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>BFE4408CE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5DE40A7BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:BFE4408CE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+I6FH7vr4jSx1HIQlgSAVLYeplS6LB0e7kyjgOeSew0dlj6668dCAUKnfZKlahPjr/zncWfXWMgCi3XYwwlHFOi9Np19d9idWaZM7ukoVJganbF8LVZ2Qo0swJKtl+GZduwVKXHWIp6hHFAeF21DLOomZZmVSdm0bUs16oUSlXzRVUeUMIEtHApGKqyjkLC3CxsXU0T4lLAMHMJiBBzOXTH3l3fFZ4uyDmpjdqWZRYwaSw4j11dhwUfQRSGsABppNf0I5+az9wxnhPA0wTtYvqsru72rlarwqpYoMlctwzD0A1HFz4+w/NrtXGVb0Z+jwR0u24BQgmGIMRvQJK6Q3xBfcUL5zTBfBFdgDZ105DQGlpDDZo2uVb19wAZuy8iHZFMGNDYApg52AgFKEEEImU66tXV6691cLt3kgDCAppE7GT9PUqILFFIY+RrLM8sZ/d1xDPlatQQdHsEhinDSzSQYxIDiJhyn6AAr/uYieHzmZK1X1kz8YfzKUPwO22p6YdcBXX9THXaeI4Y/z89O+zXFuUBhClqDMZvMJnDYj/60fLuxkHpfvE8ffRW2IL1jMKh85bUvt279emw7mdrt6lT5UGr8md881R9+FF67N8+lmPrZrh89m7enoZhezTteA8voTlpOnQ+KA/0aXJLu2+0j6f410tzljbfXipxczRaOoOrEp7cOL86xNJXQWXQ6peGL0Y1vaVs8LxpJpuFZVkD/bFo/mHltDcz/X9WbbuHp5tVd/27We7fmpsw8sp9Hq86wyuQpqvnUbUz5w+z6DEuBz/t+ntOhzkcG3NJGKez3wjyfCnHo9dWuqJfgH8uL9KCfS3IXN1YahTjiHC1IXdJaXFTIUDYd0Uzt+tSu2MbXqXZKTnFom0arabjWeI/x66aXcer5hq0ZXFCsUVJgGUsqbLb+fmcIIxchoiPEm1JU7hATP0EsQ04UHpkJA4HJQxNqFDxsmM7ZsWwjYrhdZxK03Ycq9opdm3babVtr6sqA8qHZJh4AUfJsYKXjxR8hCCOMZIyL+eciUFnXJTkFSxTHpqFJSgQlIqLIJFa7Fp2taQzHMUhkoT1iPppiArxIs4KpLPtr6UByDIrZjCmCQehmR3Di1mefssLInx8LB2YTKmJRFPRmRvJzPO5nLdzmHcO76U+lqdNVJcnGG6ZHH96Hxo5LfuJ2ScGmZlz32/5JsQZAP0Tfvppafbx/CU+iJ7fsuLiELLSyPv7CgqvhXS5TLOOVqRkJgJeF8pp6mMEU6F7mwn9g4i+h9C/dO3sWZ9E3tuP+aV8QcYccBSJ+VOy5RfeHGPE5JujJ87P+qsPmqOQom4crfk5WysUTxPJ+NPXC3Sh9BPme/Gzoon/3q4zWAdxRJ7iocExmcuVvGA2F2YDUgGLhSLS5BD8HMC54MfGfZH3XLiYplnK0eUvipS6ugogpCnhvbaaGQ7lN+PJNzFy350+wGQSv7uz1+zinf101x8LIYyAuvfFf3fWcDYuEKnyaZBxqatr8QQVwcn8QO53BA8V32t17FLH/qviH2fS+GD+aDmo6el5aPwH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+I6FH7vr4jSx1HIQlgSAVLYeplS6LB0e7kyjgOeSew0dlj6668dCAUKnfZKlahPjr/zncWfXWMgCi3XYwwlHFOi9Np19d9idWaZM7ukoVJganbF8LVZ2Qo0swJKtl+GZduwVKXHWIp6hHFAeF21DLOomZZmVSdm0bUs16oUSlXzRVUeUMIEtHApGKqyjkLC3CxsXU0T4lLAMHMJiBBzOXTH3l3fFZ4uyDmpjdqWZRYwaSw4j11dhwUfQRSGsABppNf0I5+az9wxnhPA0wTtYvqsru72rlarwqpYoMlctwzD0A1HFz4+w/NrtXGVb0Z+jwR0u24BQgmGIMRvQJK6Q3xBfcUL5zTBfBFdgDZ105DQGlpDDZo2uVb19wAZuy8iHZFMGNDYApg52AgFKEEEImU66tXV6691cLt3kgDCAppE7GT9PUqILFFIY+RrLM8sZ/d1xDPlatQQdHsEhinDSzSQYxIDiJhyn6AAr/uYieHzmZK1X1kz8YfzKUPwO22p6YdcBXX9THXaeI4Y/z89O+zXFuUBhClqDMZvMJnDYj/60fLuxkHpfvE8ffRW2IL1jMKh85bUvt279emw7mdrt6lT5UGr8md881R9+FF67N8+lmPrZrh89m7enoZhezTteA8voTlpOnQ+KA/0aXJLu2+0j6f410tzljbfXipxczRaOoOrEp7cOL86xNJXQWXQ6peGL0Y1vaVs8LxpJpuFZVkD/bFo/mHltDcz/X9WbbuHp5tVd/27We7fmpsw8sp9Hq86wyuQpqvnUbUz5w+z6DEuBz/t+ntOhzkcG3NJGKez3wjyfCnHo9dWuqJfgH8uL9KCfS3IXN1YahTjiHC1IXdJaXFTIUDYd0Uzt+tSu2MbXqXZKTnFom0arabjWeI/x66aXcer5hq0ZXFCsUVJgGUsqbLb+fmcIIxchoiPEm1JU7hATP0EsQ04UHpkJA4HJQxNqFDxsmM7ZsWwjYrhdZxK03Ycq9opdm3babVtr6sqA8qHZJh4AUfJsYKXjxR8hCCOMZIyL+eciUFnXJTkFSxTHpqFJSgQlIqLIJFa7Fp2taQzHMUhkoT1iPppiArxIs4KpLPtr6UByDIrZjCmCQehmR3Di1mefssLInx8LB2YTKmJRFPRmRvJzPO5nLdzmHcO76U+lqdNVJcnGG6ZHH96Hxo5LfuJ2ScGmZlz32/5JsQZAP0Tfvppafbx/CU+iJ7fsuLiELLSyPv7CgqvhXS5TLOOVqRkJgJeF8pp6mMEU6F7mwn9g4i+h9C/dO3sWZ9E3tuP+aV8QcYccBSJ+VOy5RfeHGPE5JujJ87P+qsPmqOQom4crfk5WysUTxPJ+NPXC3Sh9BPme/Gzoon/3q4zWAdxRJ7iocExmcuVvGA2F2YDUgGLhSLS5BD8HMC54MfGfZH3XLiYplnK0eUvipS6ugogpCnhvbaaGQ7lN+PJNzFy350+wGQSv7uz1+zinf101x8LIYyAuvfFf3fWcDYuEKnyaZBxqatr8QQVwcn8QO53BA8V32t17FLH/qviH2fS+GD+aDmo6el5aPwH</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtc6I8FP2+v4KhHzvIi6DIqDOKumXHvonttv3yTBqCZItBSUDsr98Exaq13faZ6YzN5ebcc19ykjYF89hwepSilOGESN6gI//XajVQsx7qSvCMQsUMtWcFBBZUbGhAo260gNkKZMmjNEMeoQwQ1pENTa8ruqEY9lSvO4bh1PWabVlPsnSPUsqhuUtNk6ViHhPqlGE7cpYSJwEUU4eAOaIOg47fuxw73NMBFSe5296wLAOm3YixhaOqsBYgiOIY1mAyV9vqgU87oI6PZwSwLEXbmAHtyNu9q9WqtqrXknSmGpqmqVpL5T4BxbMzufuj2owCj4TJZu0CkhAMQYxfgSB1iViUBFIvniUpZtH8A2hd1TUBraACKlA3yZmsvgUo2X0R6YBkSoFCI6BXYBMUohQRiKS7ideRz77Wwc3eaQoIDZN0To/W36OESI7iZIEChVaZVey+jniiXN02go5HYJxRnKMrMSYLABGVblIU4mKMKR++gEpl+6WC8j9cTRmC32lLW93nyqmrJ6ozwDNE2f/p2X6/Nij3IM5Ql/0e9Y3x9IV5i3urT6+jle8Pde38Zz7slBT2nTekdu3ero+HdTdb200PeGrVQXi7ZmAQsYeLvBFH06swvru/GnuDc7KE1mJk+5Oby5sHbTl6bGD9Lr3wLfBSpNnkNho28VPwiC8Kb/70I722ny7o5a9oNNJfWbM/adxm1yjL/XNbdSNXn72evz5mvaUP2au7ioL17LcL3UB7WY6unv6slu66cX73U81fisb6x31h52ae30zC8Nd4MG6u49vOW077ORwaK0nws+c/CLJqKcbDG0gj3i/APpcXYcGBEpauzkJoFGWIMLkrdglpcTIuQDhweDM36/5oaJqa7Q6tVr1u6prbb/UM/l/LtPVRq2dXGrRhcUTRTUiIRSyhspv5+ZwgnDsUkQClSp5kMEJU/gRxABiQPDLhhyMhFE0TruK2ael1fWAN+26v0bJHPWvQ0l1jOGqMLKveasrSVcKuyXXaCxlKDxW8caDgEwTxAiMh82LOKR90ynhJliDPWKzXclAjKOMXQSq02DFM21Ipni9iJAir8yTIYlRbRIuyQCrd/BoKgLS0YgoXScpArJfH8MMsj79VBeE+ARYOVKTUR7yp6MSNZFT5vMvbPHlzVfC9LMDitPHqshTDDZPDT29DI6ZlNzG7xCDVK+67Ld+EOAGgfsJPPS7NLl6Q473o1S3LLw4uK92qv0tQW9ayPM/KjjaFZKYcXuXKqas+ghnXvfU0eUFE3UGoX7p2dqyPIu/sh/wyFhGfAYbmfP6kcvmFN4ePqHhzePz8FF990ByE5HVjqGCnbG7MnyaC8aevF+hA4cfNN/xnlaRviZ/C2ovD8+QPDYbJTKzEBbP+YDZgwmExV8Qk3Qc/BXAq+KFxV+QdF8an6Tlj6OMvkpC6jgwgTDLCvIFcGvblt+TJ1gvkvDm9gyklfntnF/TDO/vhcuxzIZwDeeeL/+2s4HJcIJLF06Dk0pEL/gTlwclsT+63BPcVv+cOTWto9v+l+IeZdN+Z31v2anp8Hrp/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0822291388236949224</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0822291388236949224</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0822241388236944928</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0822291388236949224</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6DE41A7BE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>CFE4508CE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd9476db-73d1-40a6-9f55-84a7d899ccce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="b228d550-0627-4181-a846-9706cac6958f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for NonCLG"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - NonCLG"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="87669356-477d-4a9b-9ebe-1a16efa90ad6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>43F4D56DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B4093461C7E0401F0A0799472F:7AB10585"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0822381388236958200</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>92F4C25DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:92F4C25DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:92F4C25DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>43F4D56DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>A5F4832EE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A7F46DAEE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:43F4D56DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:A5F4832EE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:A7F46DAEE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvkJLR5ipRZRVWAUvvny5E9MDZG0TbFKE/fU3KRYB0XXvjDOY05PnPOclT3LMUZY6YcQ55IIwqvU6Lf1fjO0gsHzbgMTzDM/xwHjE2DOspu97Fk5Qs4F1rcd5AT3KBaKipTuW7Rq2YzjBje2GjhO6Xs2r2w+6NoacS2jpUrN0bZmllIdl2JZe5DRkiBMeUpQBDwUOR1H/MpSeIao46e3jNcsyYN6eCTEPTRPXEsCQpriGWWYemzs+xwkPR2RKkShyeI2Z8Jb+uvfl5aX24tZYPjUdy7JMq2lKn4ST6Xe9/a3aDEmPTth6HSPKKMEoJb+RItUHMWOJFqVTlhMxyz6Atk3bUtAGLLGBbY9+1823ACW7LyLtkMw5MvgM2RXYECaQA8Wg/TPstfTvX+vgeu9NjiifsDzje+u/owR0ASmbQ2LwKrOK3dcRD5SrfQw47FGcFpwsYKDGZI4wcO0qhwlZXhIuhy/hWtl+bcnlH6mmDPDftOXY3OYqqZsHqtMhU+Di//Rsu19rlDFKC2hf3q6ifn1xXsfucjQ8f/AfMuchYN17cd0qKWw7r0lt2v263h/WzWy9bppd1CdnTjQ4uif07uLpzARn6g+myfLMmaHF6aV5l94HLOMIdfgJDFYrfzWxrpIgYXdF8Csunh+j3t2gL5bs5Pqbe5NenAsI0si+usax0xiLp/7TFb/Dwhzz8VFnefbLQ27x42LlDs+H04JY9cEtOxfBkUt/jE+v88Yl3Bfp7e8b/xv2O/HRIiAP/Mxujuu/ab3festpO4ddYyUJo+LxF2BRLdV49DpaV/YLic/lRVlIYkxK13CuNIoLoEJvq11KWsJCChBJQtnM9dpzu16n3uic1puu69lWfNKMHPlf0wvsbjMKKg1as9ijGDM6ISqWUtn1/HxOEGchB5pAbixYgWfA9U8QO0ggrUeH8nAwyuGGSRW3HL8Ze3YQW6encez7jajreI1Gw7WbfhxEXV0bMPGT/syjiYB8V8EbOwo+BEzmBJTMqznnctC5kCV5RotCpHZtgWoUCnkR5EqLQ8cL6iYn2TwFRdjMWFKkUJvP5mWBTL7+dQyEeWklHM9ZLlBql8fwwyz3v1UFkT4JUQ5cpXQCsqlw4EZyqnw+zru5nXcFHxUJUadNVlfkBK+Z7H56Gxo1LZuJ2SSGuV1x32z5S4gDAOYn/Mz90mziJQuyFb26ZeXFIWWlXfX3GdWea8ViUZQd9ZVk5hLelMppmyPAhdS91Q17AmpuIMwvXTsb1nuRN/ZdfoWY0ZFAAjI5f1q5/MKbYwRcvTl68vwsv/qg2Qkp6yZgKQ7Z4lQ+TRTjT18vOMTKT5qv5M8Ly5O3dh3A2ooj85QPDUHoVK3UBbP6YDYwk7BEKiLLt8EPARwKvmvcFHnDRchpeiwEfPxFU1LX0hHGrKCi19FLw7b8ljzFag7hm9M7mFLiX+/sJf/wzr7rX46kEGZI3/iSPzsbpBwXDLp6GpRcWvpSPkFlcDrdkvtXgtuK33S6XuzU/6j4u5m035nfW7Zqun8e2v8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvkJLR5ipRZRVWAUvvny5E9MDZG0TbFKE/fU3KRYB0XXvjDOY05PnPOclT3LMUZY6YcQ55IIwqvU6Lf1fjO0gsHzbgMTzDM/xwHjE2DOspu97Fk5Qs4F1rcd5AT3KBaKipTuW7Rq2YzjBje2GjhO6Xs2r2w+6NoacS2jpUrN0bZmllIdl2JZe5DRkiBMeUpQBDwUOR1H/MpSeIao46e3jNcsyYN6eCTEPTRPXEsCQpriGWWYemzs+xwkPR2RKkShyeI2Z8Jb+uvfl5aX24tZYPjUdy7JMq2lKn4ST6Xe9/a3aDEmPTth6HSPKKMEoJb+RItUHMWOJFqVTlhMxyz6Atk3bUtAGLLGBbY9+1823ACW7LyLtkMw5MvgM2RXYECaQA8Wg/TPstfTvX+vgeu9NjiifsDzje+u/owR0ASmbQ2LwKrOK3dcRD5SrfQw47FGcFpwsYKDGZI4wcO0qhwlZXhIuhy/hWtl+bcnlH6mmDPDftOXY3OYqqZsHqtMhU+Di//Rsu19rlDFKC2hf3q6ifn1xXsfucjQ8f/AfMuchYN17cd0qKWw7r0lt2v263h/WzWy9bppd1CdnTjQ4uif07uLpzARn6g+myfLMmaHF6aV5l94HLOMIdfgJDFYrfzWxrpIgYXdF8Csunh+j3t2gL5bs5Pqbe5NenAsI0si+usax0xiLp/7TFb/Dwhzz8VFnefbLQ27x42LlDs+H04JY9cEtOxfBkUt/jE+v88Yl3Bfp7e8b/xv2O/HRIiAP/Mxujuu/ab3festpO4ddYyUJo+LxF2BRLdV49DpaV/YLic/lRVlIYkxK13CuNIoLoEJvq11KWsJCChBJQtnM9dpzu16n3uic1puu69lWfNKMHPlf0wvsbjMKKg1as9ijGDM6ISqWUtn1/HxOEGchB5pAbixYgWfA9U8QO0ggrUeH8nAwyuGGSRW3HL8Ze3YQW6encez7jajreI1Gw7WbfhxEXV0bMPGT/syjiYB8V8EbOwo+BEzmBJTMqznnctC5kCV5RotCpHZtgWoUCnkR5EqLQ8cL6iYn2TwFRdjMWFKkUJvP5mWBTL7+dQyEeWklHM9ZLlBql8fwwyz3v1UFkT4JUQ5cpXQCsqlw4EZyqnw+zru5nXcFHxUJUadNVlfkBK+Z7H56Gxo1LZuJ2SSGuV1x32z5S4gDAOYn/Mz90mziJQuyFb26ZeXFIWWlXfX3GdWea8ViUZQd9ZVk5hLelMppmyPAhdS91Q17AmpuIMwvXTsb1nuRN/ZdfoWY0ZFAAjI5f1q5/MKbYwRcvTl68vwsv/qg2Qkp6yZgKQ7Z4lQ+TRTjT18vOMTKT5qv5M8Ly5O3dh3A2ooj85QPDUHoVK3UBbP6YDYwk7BEKiLLt8EPARwKvmvcFHnDRchpeiwEfPxFU1LX0hHGrKCi19FLw7b8ljzFag7hm9M7mFLiX+/sJf/wzr7rX46kEGZI3/iSPzsbpBwXDLp6GpRcWvpSPkFlcDrdkvtXgtuK33S6XuzU/6j4u5m035nfW7Zqun8e2v8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xBczFE5hxMLQu5HJCkjZ5OSPkbVBqJCLJ4OTrj2RiApSk6ZnJDNH21tprX7SkE4EWmReEQgCXhFEjjrrmvym4U7edIAtcP7EaqdOwpg2UWL5Td3Hi+JC2m6YRC5FDTIVEVHZNz3HrlutZXvvarQeeF9RbNc9v35vGLXChoJVLzTGNYpFREZRhu2bOacCQICKgaAEikDiYhGfjQHkGqOJk9k42LMuAvDeXchnYNq4lgCHLcA2zhX1i7/mcJCKYkBlFMufwEjMRXfNl73q9rq3rNcZntuc4ju10bOWTCDL7bPY+VZshiWnKNus+oowSjDLyjDSpM5BzlhhhNmOcyPniDWjXdh0NbUGBLew26GfTfg1Qsvsg0h5JLpAl5sitwK4gBQ4Ug3FzFXfNzx/r4GbvNUdUpIwvxMH67ygBXUHGlpBYosqsYvdxxCPl6p0ADmKKs1yQFZzrMVkiDMK45JCSYkyEGr5EGGX7jUKoP1JNGeC/acuJvctVUbePVCciMxDy//Rst18blFuU5dC7H7Zl8TSi086XQYvf5M2rkevNfkxvJu1uSWHXeUNq2+6X9eGwbmfrZdOlO8FxPKrzQjbn/UfZf7hz2W3eadbT6J9kGq5YescUh+b6NvxSXJx+y+4nzGnd/Vp1Bq07f/lz5NyNL4rZ12xNPvkPLTFOiqdH3/2Vrx9ksUhvBt/jaR6O8tuiGK7xzajlX5/dnzf98/X9LJmnz8X5mPeXp9J5Tqb8mT78+Oav+/589in3rr4Pvg4Ht9fn03HrcvTVcbqvOe3msG+sJGGSTx8Ay2qpxyOOjKHqF5Lvy4u2kMRKS9dgqTVKSKDS7OldWlqCXAkQSQLVzM069IeNdt0bDPxOvd5wnf5pJ/TUf51G2x12wnalQRsWBxT7jKZEx9Iqu5mf9wniRSCAJsCtFcvxHIT5DmKEJDJieqUOB6MCrplS8UjRi+qh5/l1pxE1otYw6rjDtuP4Ld8Po6FpnDN5QS94mErg+wre3FPwK8BkSUDLvJ5zoQZdSFWSR7TKZebWVqhGIVcXAddaHHiNtm8LslhmoAnbC5bkGdSW82VZIFtsfj0LYVFaicBLxiXK3PIYvpnl4beqIMonIdpB6JROQTUVjtxIXpXP23l3dvOu4MM8Ifq0qepKTvCGyf6n16HR07KdmG1iWLgV9+2Wv4Q4AmC/w88+LM02XrIiO9GrW1ZdHEpWelV/H1HtsZavVnnZ0ZaWTK7gbaWcrj0BnCvde7pmv4DaWwj7Q9fOlvVB5K19n18u53QikYSFmj+jXH7gzTEBod8csTo/xUcfNHshVd0kFPKYrZ+pp4lm/O7rBQdY+ynzpfpZM568tusI1k4clad6aEhCZ3qlL5inN2YDMwVLlCIyvgt+DOBY8H3jtshbLlJN0zSX8PYXQ0td10QYs5zKODJLw678ljzl0xKCV6ffYEqJf7mzC/Hmnf3zbDxRQrhA5taX/NnZIuW4YDD106Dk0jUL9QRVwelsR+5fCO4qfscbNvqeH/1J8fcz6f1m/t2yU9PD89D7Dw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0PzqlLxQoHWEGC7hdEV1Rr+uXOyE9QLxtWpO0oL9+k2IREF33zjBTcnrynOe89ElOOEpix+9xDkyQlGphv6P/O7XwDDu2Z0QRcgy3YdsGajYbRgs87E6b0ymeeboWcp5DSLlAVHR0x7Lrhu0Yjndj133H8V271my5D7p2B4xLaOlSs3RtlcSU+2XYjp4z6qeIE+5TlAD3BfYnvYuRLz19VHHSuydrlmVA1l0IkfmmiWsRYIhjXMNpYp6YOz4nEfcnZE6RyBm8xox4R3/du1wua8t6LWVz07Esy7TapvSJOJl/07tH1WaIQjpL1+sA0ZQSjGLyghSpCxCLNNJ68TxlRCySD6Bt07YUtAErbGDbpd908y1Aye6LSDskGUcGXyC7AruGGTCgGLTb67Cjf/taB9d7bxiifJayhO+t/44S0ALiNIPI4FVmFbuvIx4oV/cEsB9SHOecFDBWY5IhDFy7YjAjqxHhcvgirpXt11Zc/kg1ZYD/pi0n5jZXSd08UJ0+mQMX/6dn2/1ao9yhOIfuy/GvedC+YsgaJYKNbwvv+L4l2on3NOiUFLad16Q27X5d7w/rZrZeNz0WTtNjmdOaDc6+w8irn0X50zi2MGUsvLm8WDzSK7iyfzSiht08DRc/xg14ur1ll9nortleXh0/Dsbj84v5WZD9c3TvnF/Wn/nDirnn352L0/O8/XL8yJbz24Vz/XiOU6Dw4OBfMDgms6Kg1x43rWBlT4fN6f20wD9ffrqjEQ3Gd07raLKYjs9ul8+uJ/9Mwpvg+7LzltN2DrvGShIm+fQRsKiWajzCvjaU/ULic3lRFhIZs9LVz5RGcQFU6F21S0mLn0sBIpEvm7le91pDt9nvDQaNdr3u2lZw2u458l/b9exhu+dVGrRmsUcxSOmMqFhKZdfz8zlBnPgcaATMKNIcL4DrnyD2kUBaSK/lx5FSDjepVPGh7QSn3rDvNgdWr+EF/UF7OBhaXqtp9YdB0NK1cSou6SXrzQSwXQVv7ij4NWCSEVAyr+acy0HnQpbkCRW5iO1agWoUcnkQMKXFvuN6DZOTJItBETaTNMpjqGWLrCyQyddPx0CYl1bCcZYygWK7/Aw/zHL/XVUQ6RMR5cBVSqcgmwoHTqR6lc+7vN2DJ1cF38sjor42WV3BCF4z2X31NjRqWjYTs0kMc7vivtnylxAHAMxP+Jn7pdnEiwqyFb06ZeXBIWWlW/X3CdWeanlR5GVHW0oymYQ3pXLa5gRwLnXv+Sb9D6i5gTC/dOxsWO9F3th3+eViQScCCUjk/Gnl8gt3jglwdecI5fez+uqFZiekrJuAlThkC2J5NVGMP729YB8rP2m+ko9lyqK3dh3A2ooj85QXDUHoXK3UAfP8wWzgVMISqYgp2wY/BHAo+K5xU+QNFyGnaZoL+PiNpqSuoyOM05yKsK+Xhm35LXmK5wz8N6d3MKXEv57ZK/7hmX1/MZpIIUyQvvElf3Y2SDkuGHR1NSi5dPSVvILK4HS+JfevBLcVv+0M3cBp9P+k+LuZdN+Z31u2arr/PXR/Aw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0822381388236958200</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0822381388236958200</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0822331388236953020</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0822351388236955903</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0822381388236958200</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>53F4066DE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>B5F4B32EE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>B7F48DAEE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>87669356-477d-4a9b-9ebe-1a16efa90ad6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="9a530dbd-2f4e-4849-93e7-64ca90685d83"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="73c33b2b-95a5-4c51-870a-db9638c2048a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>3BF4FFCFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360451B71EE5E0401F0A059945A9:2749E19C"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0822471388236967516</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>8AF4A6BFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:8AF4A6BFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:8AF4A6BFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>3BF4FFCFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>9DF4EC70F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9FF4D8F0F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:3BF4FFCFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:9DF4EC70F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:9FF4D8F0F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlPGFwzBrkCVMZA4GxImMNnMvGwJuQ3a2BKxZC75+pVMTIAhmcxWUWXUbp0+ffGRLjjKUscPOIdcEEa1qNfW/3E8sBNs2waST8P1cMuYupZlNJDnNWMMCSRTXYs4LyCiXCAq2rpj2XXDdgynNbHrvuP4br3mOY2fuvYAOZfQ0qVm6do6Syn3y7BtvcipzxAn3KcoA+4L7I+D4Y0vPX1UcdI7F1uWZcC8Mxdi4ZsmrsWAIU1xDbPMvDAPfC5i7o/JjCJR5PAaM+Zt/XXvarWqreo1ls9Mx7Is0/JM6RNzMvuqd75UmyGOaMK26xBRRglGKXlBitQQxJzFWpDOWE7EPHsH2jZtS0EbsMYGtl36VTffApTsPol0QDLnyOBzZFdg97IlOVAM2vf7qK1//VwHt3snOaI8YXnGj9Z/RgnoElK2gNjgVWYVu88jnihX5wKwH1GcFpws4VaNyQJh4Nooh4SsbwiXwxdzrWy/tubyR6opA/wnbbkw97lK6uaJ6vTIDLj4Pz3b79cW5QGlBXTICx+vX9J4ePmQiO5tjwbN3iVcPU14v11S2Hfektq1+3V9PKy72XrdNLv/XkyDvMhgXnyfinXWHJ3TJ5ctfuaj/lnc6D5FjzdJ15tMNoMNur6+ujKbUfa8TB8WTRrip+7Z7Z0zFMF8sr770mfOKgn7UB+612I0yb5d9taWGPXZt7vHn62nbz8ajeH5X5u0N2vaeDyynr3bjdUM5wI344chYj/G02Gyint/D3p3X57Ns2jY/VEwnkfxy4Pl2MP2W077ORwaK0kYF9N/AYtqqcYj6mkD2S8kPpYXZSGxkZSu/kJpFBdAhd5Ru5S0+IUUIBL7spnbdb07cAeDcNBvePW6a1th1wsc+c9zW/bAC1qVBm1ZHFEMGU2IiqVUdjs/HxPEmc+BxpAbS1bgOXD9A8QeEkiL6L38OBjlMGFSxUPbbjRaYTdsNZteo+ueu2Er6LX6lmdZ4aAe6totE3f0Lg8SAfmhgjcPFPweMFkQUDKv5pzLQedCluQZLQuR2rUlqlEo5EGQKy32HbfVMDnJFikowmbG4iKF2mK+KAtk8u3TMRDmpZVwvGC5QKldfobvZnn8riqI9ImJcuAqpS7IpsKJE6le5fN+3t5+3hV8UMREfW2yuiIneMvk8NXb0Khp2U3MLjHM7Yr7bssfQpwAMD/gZx6XZhcvXpK96NUpKw8OKSudqr/PqPZcK5bLouzouZLMXMKbUjltcwy4kLq3mbAnoOYOwvzUsbNjfRR5Zz/kV4g5HQskIJPzp5XLT9w5xsDVnSOS38/6sxeag5CybgLW4pQtTOXVRDH+8PaCfaz8pHkkHyuWx2/tOoG1F0fmKS8agtCZWqkDZvPObGAmYYlURJbvg58COBX80Lgr8o6LkNM0LQS8/0ZTUtfWEcasoCLq6aVhX35LnmKzAP/N6ReYUuJfz+w1f/fMfhzejKUQZkjf+ZLfOxukHBcMuroalFza+lpeQWVwOtuT+1eC+4rfCgZu0Oz+VvEPM+n8Yv7VslfT4++h8x8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlPGFwzBrkCVMZA4GxImMNnMvGwJuQ3a2BKxZC75+pVMTIAhmcxWUWXUbp0+ffGRLjjKUscPOIdcEEa1qNfW/3E8sBNs2waST8P1cMuYupZlNJDnNWMMCSRTXYs4LyCiXCAq2rpj2XXDdgynNbHrvuP4br3mOY2fuvYAOZfQ0qVm6do6Syn3y7BtvcipzxAn3KcoA+4L7I+D4Y0vPX1UcdI7F1uWZcC8Mxdi4ZsmrsWAIU1xDbPMvDAPfC5i7o/JjCJR5PAaM+Zt/XXvarWqreo1ls9Mx7Is0/JM6RNzMvuqd75UmyGOaMK26xBRRglGKXlBitQQxJzFWpDOWE7EPHsH2jZtS0EbsMYGtl36VTffApTsPol0QDLnyOBzZFdg97IlOVAM2vf7qK1//VwHt3snOaI8YXnGj9Z/RgnoElK2gNjgVWYVu88jnihX5wKwH1GcFpws4VaNyQJh4Nooh4SsbwiXwxdzrWy/tubyR6opA/wnbbkw97lK6uaJ6vTIDLj4Pz3b79cW5QGlBXTICx+vX9J4ePmQiO5tjwbN3iVcPU14v11S2Hfektq1+3V9PKy72XrdNLv/XkyDvMhgXnyfinXWHJ3TJ5ctfuaj/lnc6D5FjzdJ15tMNoMNur6+ujKbUfa8TB8WTRrip+7Z7Z0zFMF8sr770mfOKgn7UB+612I0yb5d9taWGPXZt7vHn62nbz8ajeH5X5u0N2vaeDyynr3bjdUM5wI344chYj/G02Gyint/D3p3X57Ns2jY/VEwnkfxy4Pl2MP2W077ORwaK0kYF9N/AYtqqcYj6mkD2S8kPpYXZSGxkZSu/kJpFBdAhd5Ru5S0+IUUIBL7spnbdb07cAeDcNBvePW6a1th1wsc+c9zW/bAC1qVBm1ZHFEMGU2IiqVUdjs/HxPEmc+BxpAbS1bgOXD9A8QeEkiL6L38OBjlMGFSxUPbbjRaYTdsNZteo+ueu2Er6LX6lmdZ4aAe6totE3f0Lg8SAfmhgjcPFPweMFkQUDKv5pzLQedCluQZLQuR2rUlqlEo5EGQKy32HbfVMDnJFikowmbG4iKF2mK+KAtk8u3TMRDmpZVwvGC5QKldfobvZnn8riqI9ImJcuAqpS7IpsKJE6le5fN+3t5+3hV8UMREfW2yuiIneMvk8NXb0Khp2U3MLjHM7Yr7bssfQpwAMD/gZx6XZhcvXpK96NUpKw8OKSudqr/PqPZcK5bLouzouZLMXMKbUjltcwy4kLq3mbAnoOYOwvzUsbNjfRR5Zz/kV4g5HQskIJPzp5XLT9w5xsDVnSOS38/6sxeag5CybgLW4pQtTOXVRDH+8PaCfaz8pHkkHyuWx2/tOoG1F0fmKS8agtCZWqkDZvPObGAmYYlURJbvg58COBX80Lgr8o6LkNM0LQS8/0ZTUtfWEcasoCLq6aVhX35LnmKzAP/N6ReYUuJfz+w1f/fMfhzejKUQZkjf+ZLfOxukHBcMuroalFza+lpeQWVwOtuT+1eC+4rfCgZu0Oz+VvEPM+n8Yv7VslfT4++h8x8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxFTCewIwJuCUNSU4gN17OGHkDamzJkWQg/fojmZgAJWl6ZjJDtL219toXLemUx1nqBCHnwASmRBv02vq/nuNPk1biG5aL6oY3q1vGtAGJgXzL9qdgNxvg69qA8wIGhIuYiLbuWLZr2I7h+GPbDRwn8Bq1pmNNdO0OGJfQ0qVm6do6SwkPyrBtvWAkoDHHPCBxBjwQKBiFw4tAegZxxUnvnG5YlgFZZyFEHpgmqiWAIE1RDdHMPDX3fE4THozwnMSiYPAaM+Ft/XXvarWqrdwaZXPTsSzLtFqm9Ek4nn/VO1+qzZAMyIxu1mcxoQSjOMW/YkVqCGJBEy1M55RhscjegbZN21LQBqyRgWyPfNXNtwAlu08i7ZFkPDb4IrYrsBuYAQOCQLu9GbT1r5/r4GbvmMWEzyjL+MH67ygBWUJKcxmDV5lV7D6PeKRcnVNAwYCgtOB4CZdqTPIYAdeuGczw+gJzOXwJ18r2a2su/3A1ZYD+pi2n5i5XSd08Up0engMX/6dnu/3aoNzFaQGdhvXtlg8fu10/Ksat+sn0kcLw1+TB7N+2Swq7zhtS23a/rg+HdTtbr5uustW4KOyn5nwS8Yd0ln/rWoP75OV+dI6bt1erdfQCYPuPw/S73X30h87Qcy6vz0cXT3Xr5Pw5+oEYTE/wpYUo+nJ3j9Akuk4nzdk/k9FJ4xefXzKEpzfN9eRhLKvPlk/dgVeHLr76+R3V2fBnMZ7du3ceHd3N8+W3+nA+fVw9rN3JyZesiR69J/P7y7Pwevf13G+G7becdnPYN1aSMCqmPwGJaqnGY9DTItmvWHwsL8qCE2NWuga50igugAi9o3YpaQkKKUA4CWQzN+tWL/L6Z00rqrdc17Ots24rdOR/Lc+3o1boVxq0YXFA8YySGVaxlMpu5udjgigLOJAEmLGkBVoA1z9A7MUi1gbkRh4OSjiMqVRx14vs0OrXXfes2+xG/bDbtdy+H/bqbsuK+n1du6TiilyxcCaA7St4Y0/BbwDhHIOSeTXnXA46F7Ikz/GyEKldW8Y1AoW8CJjS4sDx/LrJcZanoAibGU2KFGr5Ii8LZPLNr2PEiJdWzFFOmYhTuzyG72Z5+K0qiPRJsHLgKqUuyKbCkRvJrfJ5P+/Wbt4VfFgkWJ02WV3BMNow2f/0NjRqWrYTs00Mcbvivt3ylxBHAMwP+JmHpdnGS5Z4J3p1y8qLQ8pKp+rvc1x7rhXLZVF2tKkkk0l4UyqnbY4AFVL3Xsb0CYi5hTA/de1sWR9E3tr3+RViQUYiFpDJ+dPK5SfeHCPg6s0xkOdn/dkHzV5IWTcBa3HMdpbKp4li/OHrBQVI+UnztfxZUZa8tesI1k4cmad8aAhM5mqlLpiXd2YDUQmLpSJStgt+DOBY8H3jtshbLkJO07QQ8P4XTUldW48RogURg55eGnblt+QpXnII3px+gykl/vXOXvN37+yH4cVICmEW61tf/GdnA5fjgkBXT4OSS1tfyyeoDE7mO3L/SnBX8f0w8sKG1M4/KP5+Jp3fzL9bdmp6eB46/wE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbZUuM4FH3nK1zmkXK8m9hFUpXN3WbYhgDTnZcpIcmJwJEcS87C14/k4JCEQMNUURV0fXXuuYuOdMbBNHOiDue4EIRRLem39H8dcApR6gHDtSEwPNf1DBAElpH6buhbfmrLb7qWcF7ihHIBqGjpjmW7hu0YTvPOdiPHiXyrYfnuSNcecMEltHRpWLq2nGaUR1XYll4WNGKAEx5RMMU8EjAadi4vIukZgZqT3j5bs6wCFu2JEHlkmrCBMMRZBhuQTc0zc8fnDPFoSMYUiLLArzERb+mvexeLRWPhNlgxNh3LskwrNKUP4mR8rLeP6s0YJTRl63UPUEYJBBl5AYrUJRYThrRONmYFEZPpB9C2aVsK2sBLaEDbo8e6+RagYvdFpB2SBQcGnwC7BrvFKS4whVi7v01a+vHXOrjee1cAylNWTPne+nuUMJ3jjOUYGbzOrGb3dcQD5WqfYRglFGYlJ3N8pcYkBxBz7abAKVleEC6HD3Gtar+25PKP1FOG4XfacmZuc5XUzQPV6ZMx5uL/9Gy7X2uUB5CVuF3ezOK5jU9oisAFyFcOPU9GfQLPs8tWRWHbeU1q0+7X9f6wbmbrdRN7LpqLTLz8tMQVHaETlIysIngKPP4jnVkPYBg8LdFfoeVxxLymGZyKu3B5H9yMSN5c/f2IM7s3G8/uHy4nv2dH3XMMf8zSDngG5mpGcmRyhsxR8w6U2XQxDPLhCxKDMD6fT35eha64GMlJvF3YRfLy8ks4fMTzQem4yT/ZafdoYE2uh79PTiC1AxiepMNV0nrLaTuHXWMtCcPy8QlDUS/VeCR9LZb9AuJzeVEWgoy0co1ypVFcYCr0ttqlpCUqpQARFMlmrtdhHHv9ZmzFfigPlG31umHHkf+FXtOOw06z1qA1iz2KPUZTomIplV3Pz+cE4TTimCJcGHNWwgnm+ieIfSCAltBbeTgY5fiOSRXv2U6/43dP/UHgu5YfB6HrO1Yzdk8HsdMNfF27YuKaXhedVOBiV8GDHQW/xZDkBCuZV3PO5aBzIUsyA/NSZHZjDhoUl/IiKJQWR47X9E1OpnmGFWFzylCZ4UY+yasCmXz96xgA8spKOMxZIUBmV8fwwyz3v9UFkT6IKAeuUupi2VR84Eby6nze5e0dvLlq+E6JiDptsrqiIHDNZPfT29CoadlMzCYxyO2a+2bLNyEOAJif8DP3S7OJh+ZkK3p9y8qLQ8pKu+7vDDRmjXI+L6uOnirJLCS8KZXTNocYllL3VnfsGVNzA2F+6drZsN6LvLHv8ivFhA4FEHgq50+rll94cwwxV2+ORJ6f5VcfNDshZd0EXopDtl4mnyaK8aevFxhB5SfNN/JnwQr01q4DWFtxZJ7yoSEIHauVumBWH8wGZBKWSEVkxTb4IYBDwXeNmyJvuAg5TY+lwB9/0ZTUtXQAISupSPp6ZdiW34qnWOU4enN6B1NJ/OudveQf3tm/Li+GUginQN/4kj87G6QaF4h19TSouLT0pXyCyuB0vCX3rwS3Fb/Zib1O0I0Hf1D83Uza78zvLVs13T8P7f8A</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0822471388236967516</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0822471388236967516</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0822421388236962883</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0822451388236965478</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0822471388236967516</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>4BF400DFE5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>ADF4FC70F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>AFF4E8F0F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>73c33b2b-95a5-4c51-870a-db9638c2048a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true" id="6ceabf55-1e65-455c-85d0-ffa8f7e43fdb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult_BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult_BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="5aacb852-19bb-45fe-b048-8d350af8d6dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>230505D1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E56D5BA0CE0401F0A05991749:E851DB99"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0822551388236975475</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>72055BB1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:72055BB1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:72055BB1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>230505D1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>85054F62F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">87051AE2F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:230505D1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:85054F62F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87051AE2F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZT+M8FH2fXxGFR5RmaUKbiFbqQodAWVsGhpdPxrlpPSROsJ0u/PqxU1LaTmGYT0Iqvrk+99zFxz7mKE2coMM5MEEyqoX9lv6f53nuk+88GVa93jDcutM0mlEDGy5ynhoNAIgboGsh5wWElAtERUt3LLtu2I7hNMd2PXCcwHNqdtN71LUfwLiEli41S9cWaUJ5UIZt6QWjQYY44QFFKfBA4GDUuRgG0jNAFSe9fbxiWQZk7akQeWCauBYBhiTBNZyl5rG55XMc8WBEJhSJgsFbzIi39Le98/m8Nq/XMjYxHcuyTMs3pU/EyeRAb3+rNkMU0jhbrXuIZpRglJBXpEhdgJhmkdZJJhkjYpp+AG2btqWgDVhgA9suPdDN9wAluy8ibZFkHBl8iuwK7BZiYEAxaHe3YUs/+FoHV3vHDFEeZyzlO+t/owR0BkmWQ2TwKrOK3dcR95SrfQw4CClOCk5mcKnGJEcYuHbNICaLIeFy+CKule3XFlz+kWrKAP9LW47NTa6SurmnOn0yAS7+T882+7VC+YGSAtpHCXH9zml0czoYNM85vF6bjDP35Mi6aJUUNp1XpNbtflvvDut6tt42jfHd9/m1HTe6xWwynx/Wr90eK1winKvoITm8mTPWN4X9HN4sT1E8eLnzL2Byuvhl58/i/Pzqx/3jyeMZirribjD8No7j4fT6MX8teol1dPZq5z9ddNbtj5deeoKGaRY/FK/OZf+5eze7fxr69zGE904xeundjQc/ReS4N7j5veOeLy6b32bFIV2SuNugeBkus6L70my957SZw7axkoRR8fQLsKiWajzCvjaQ/ULic3lRFhIZceka5EqjuAAq9LbapaQlKKQAkSiQzVytnbrlWV7fHnh+ve7aVq/rdxz5n+827YHfaVYatGKxQ7GX0ZioWEplV/PzOUGcBhxoBMyYZQWeAtc/QewjgbSQ3srDkVEO40ypeOfItnv+4KQ36HgN33WsE8t1B/ag43vdhlPXtctMXNEr1okFsG0FP9pS8FvAJCegZF7NOZeDzoUsyQuaFSKxazNUo1DIi4ApLQ4ct+mZnKR5AoqwmWZRkUAtn+ZlgUy++nUMhHlpJRznGRMosctj+GGWu9+qgkifiCgHrlLqgmwq7LmR3Cqfj/P2N/Ou4DtFRNRpk9UVjOAVk+1P70OjpmU9MevEMLcr7ust/wixB8D8hJ+5W5p1vGhGNqJXt6y8OKSstKv+vqDaS62YzYqyow0lmUzCm1I5bXMEuJC6txxnz0DNNYT5pWtnzXon8tq+za8QUzoSSEAq508rl194c4yAqzdHKM/P4qsPmq2Qsm4CFmKfrZfIp4li/OnrBQdY+UnztfyZZyx6b9cerI04Mk/50BCETtRKXTDLD2YDZxKWSEXM2Cb4PoB9wbeN6yKvuQg5TU+FgI+/aErqWjrCOCuoCPt6adiU35KnWOYQvDv9AVNK/NudveAf3tkPF8ORFMIU6Wtf8ndng5TjguWLVfqXXFr6Qj5BZXA62ZD7N4Kbit9wLM/rdv+q+NuZtP8w/2nZqOnueWj/Bg==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZT+M8FH2fXxGFR5RmaUKbiFbqQodAWVsGhpdPxrlpPSROsJ0u/PqxU1LaTmGYT0Iqvrk+99zFxz7mKE2coMM5MEEyqoX9lv6f53nuk+88GVa93jDcutM0mlEDGy5ynhoNAIgboGsh5wWElAtERUt3LLtu2I7hNMd2PXCcwHNqdtN71LUfwLiEli41S9cWaUJ5UIZt6QWjQYY44QFFKfBA4GDUuRgG0jNAFSe9fbxiWQZk7akQeWCauBYBhiTBNZyl5rG55XMc8WBEJhSJgsFbzIi39Le98/m8Nq/XMjYxHcuyTMs3pU/EyeRAb3+rNkMU0jhbrXuIZpRglJBXpEhdgJhmkdZJJhkjYpp+AG2btqWgDVhgA9suPdDN9wAluy8ibZFkHBl8iuwK7BZiYEAxaHe3YUs/+FoHV3vHDFEeZyzlO+t/owR0BkmWQ2TwKrOK3dcR95SrfQw4CClOCk5mcKnGJEcYuHbNICaLIeFy+CKule3XFlz+kWrKAP9LW47NTa6SurmnOn0yAS7+T882+7VC+YGSAtpHCXH9zml0czoYNM85vF6bjDP35Mi6aJUUNp1XpNbtflvvDut6tt42jfHd9/m1HTe6xWwynx/Wr90eK1winKvoITm8mTPWN4X9HN4sT1E8eLnzL2Byuvhl58/i/Pzqx/3jyeMZirribjD8No7j4fT6MX8teol1dPZq5z9ddNbtj5deeoKGaRY/FK/OZf+5eze7fxr69zGE904xeundjQc/ReS4N7j5veOeLy6b32bFIV2SuNugeBkus6L70my957SZw7axkoRR8fQLsKiWajzCvjaQ/ULic3lRFhIZceka5EqjuAAq9LbapaQlKKQAkSiQzVytnbrlWV7fHnh+ve7aVq/rdxz5n+827YHfaVYatGKxQ7GX0ZioWEplV/PzOUGcBhxoBMyYZQWeAtc/QewjgbSQ3srDkVEO40ypeOfItnv+4KQ36HgN33WsE8t1B/ag43vdhlPXtctMXNEr1okFsG0FP9pS8FvAJCegZF7NOZeDzoUsyQuaFSKxazNUo1DIi4ApLQ4ct+mZnKR5AoqwmWZRkUAtn+ZlgUy++nUMhHlpJRznGRMosctj+GGWu9+qgkifiCgHrlLqgmwq7LmR3Cqfj/P2N/Ou4DtFRNRpk9UVjOAVk+1P70OjpmU9MevEMLcr7ust/wixB8D8hJ+5W5p1vGhGNqJXt6y8OKSstKv+vqDaS62YzYqyow0lmUzCm1I5bXMEuJC6txxnz0DNNYT5pWtnzXon8tq+za8QUzoSSEAq508rl194c4yAqzdHKM/P4qsPmq2Qsm4CFmKfrZfIp4li/OnrBQdY+UnztfyZZyx6b9cerI04Mk/50BCETtRKXTDLD2YDZxKWSEXM2Cb4PoB9wbeN6yKvuQg5TU+FgI+/aErqWjrCOCuoCPt6adiU35KnWOYQvDv9AVNK/NudveAf3tkPF8ORFMIU6Wtf8ndng5TjguWLVfqXXFr6Qj5BZXA62ZD7N4Kbit9wLM/rdv+q+NuZtP8w/2nZqOnueWj/Bg==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tq45nSG+XSEWa4iFRRUJDt9uVMSANk2yYlSQH99ScpFgHRjWfGGczqyre+dcmXXHAQR47f4BwxgSnRgnZN/9dyJ9CyXGA4njsxirYDDGB5E6Nkg4kVThACnq1rAecpCggXgIia7li2a9iO4VRGtus7ju8VC8Wi96xrY8S4hJYuBUvX1nFEuJ+FrekpIz4FHHOfgBhxX0B/2Ljt+dLTBzknvX6xYZkFZPW5EIlvmrAQIoiiCBYgjc0Lc8/nIuT+EM8IEClD7zFDXtPf965Wq8LKLVA2Mx3LskyrakqfkOPZuV4/yzejMCBTulm3AKEEQxDhN6BI3SIxp6HWiGaUYTGPv4C2TdtS0AZaQwPaRXKumx8BMnYnIu2RZBwYfA7sHOwBTRFDBCLt8SGo6eendXCzd8QA4VPKYn6w/hklRJYoogkKDZ5nlrM7HfFIueoXCPoBgVHK8RLdqTFJAERcGzA0xese5nL4Qq5l7dfWXP7hfMoQ/ElbLsxdrpK6eaQ6bTxDXPyfnu32a4MyBlGK6n3qBOnDlIzMGXCfwukVa1WDJvvdHlu1jMKu84bUtt3v68Nh3c7W+6bGNVxBct+iTpcP/ilXpqtS9y2Z0vl0kPbvlpXoF3vr4cduDINq6b6CyOhm7iXL57QyZt3+Yy++KnoTPMR/yovu2eVL76mNw7h/fzXxngBPW6Wr9fOiczOe/cbe7dvgcbAoE9rvrtbdRzq4q7xc2vMZc15J/3oJwWiZ3pR/zfpecuvis8nL7XUAr/nYnYChOYxnD6vaR067Oewbc0kYppM/CIp8qcYjaGsd2S8gvpcXZcGhMc1c/URpFBeICL2udilp8VMpQDj0ZTM364pnecVOyel4Vdct2larWW048r9qsWJ3qo1KrkEbFgcUW5RMsYqlVHYzP98ThLHPEQkRM5Y0hXPE9W8Q20AALSAP8nBQwtGIShV3Lt1S59KyOo7ldartctVuN5udlu16brntNpq6dkdFn/RZYyoQ21fw0p6CPyCIE4yUzKs553LQuZAlWYBlKiK7sAQFglJ5ETClxb5TrHgmx3ESIUXYjGmYRqiQzJOsQCbf/DoGgDyzYg4TygSI7OwYfpnl4be8INInxMqBq5SaSDYVHbmRink+X+dd3c07h2+kIVanTVZXMAw3TPY/fQyNmpbtxGwTg9zOuW+3/BDiCID5DT/zsDTbeOES70TPb1l5cUhZqef9XYDCopAul2nW0bKSTCbhTamctjlEMJW69zqiL4iYWwjzpGtny/og8ta+zy8VczIUQKBYzp+WLU94cwwRV2+OQJ6f9akPmr2Qsm4CrcUxWyuSTxPF+NvXC/Sh8pPmgfxZURZ+tOsI1k4cmad8aAhMZmqlLpjXL2YDUgmLpSJStgt+DOBY8H3jtshbLkJO0yQV6OsvmpK6mg4gpCkRQVvPDLvym/EUrwnyP5w+wWQS/35nr/mXd/bTbW8ohTAG+tYX/93ZwNm4QKSrp0HGpaav5RNUBiezHbl/J7ir+GUpnV6zaf9N8fczqX8yf7bs1PTwPNT/Aw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6JTP+6UtIVS2hFmCsjeroqsCKv75U5IUwi0KSYpoL/+JsUiILp6Z5zBnJ485zkveZJzDtPE9gPOMRMko1rYber/2vWJO6m50PAm9cio1aFteG5UMzCOq1XXq8eR4+layHmOQ8oFpKKp26ZVNSzbsBt3VtW3bd9pVBzT/qNrY8y4hJYuFVPXNmlCuV+Ebeo5o34GOeE+hSnmvkD+MLi+8qWnD0tOeut8y7IIyFozIZY+AKgSYYSTBFVQloJzcOBzHnF/SKYUipzhl5gRb+ove9frdWVdrWRsCmzTNIHpAekTcTI901vfys04CmmcbdcdSDNKEEzIM1SkrrGYZZEWJNOMETFL34G2gGUqaANvkIGsGj3TwWuAgt0nkQ5IMg4NPoNWCXaLY8wwRVgb3YZN/exzHdzuvWOQ8jhjKT9af40SpiucZEscGbzMrGT3ecQT5WqdY+SHFCU5JyvcV2OyhAhzbcBwTDZXhMvhi7hWtF/bcPlHyinD6CttOQf7XCV1cKI6XTLFXPyfnu33a4syhkmOW+OHS3OSMtH2Gr8vxpldB+YDdSwv/nXRLCjsO29J7dr9sj4e1t1svWxKRvfWr8EAXCTox8+n0Bn1B32yxHl9vLZHZszdnz3Rcc10+bwGsX27Xuczlk2SxWUa1TsJuHEb3IL5LJ4nz4Nvve7F6Ecerb7fLSYPs4XLrhqr2uPikj733WQ+i9ni9xw1RsEiDABwV/Vp+zEffb+cW/fVhZjjP7O+lZD4H2++eKp9y+9GYGw9pL3nzrjbCYfMGzVfc9rP4dBYSsIwn8wxEuVSjUfY1XqyX1B8LC/KQiIjLlz9pdIoLjAVekvtUtLi51KASOTLZm7XDdd0rODC7jletVqzzE7bC2z5n1drWD0vaJQatGVxRLGT0ZioWEplt/PzMUGU+hzTCDNjleVohrn+AWIXCqiF9FYejoxyfJdJFe+6Ts3utAOnV7WcTr3TcdvBRbdre0692ws8W9f6mbihNyyIBWaHCl4/UPBbjMiSYCXzas65HHQuZEke4SoXiVVZwQrFubwImNJi3641HMBJukywIgzSLMoTXFnOlkWBAN/+2gZEvLASjpYZEzCximP4bpbH38qCSJ+IKAeuUmpj2VR84kaqlfm8ybt28uYq4YM8Iuq0yeoKRtCWyeGn16FR07KbmF1iiFsl992WL0KcAAAf8APHpdnFi1ZkL3p5y8qLQ8pKq+zvI6w8VvLVKi866irJZBIeSOW0wBCjXOre0122wBTsIMCnrp0d66PIO/shv1zM6FBAgVM5f1qx/MSbY4i5enOE8vxsPvugOQgp6ybwRpyydRL5NFGMP3y9IB8pP2keyJ91xqLXdp3A2osj85QPDUHoVK3UBfP0zmygTMISqYgZ2wc/BXAq+KFxV+QdFyGnaZIL/P4XTUldU4cIZTkVYVcvDPvyW/AUT0vsvzq9gSkk/uXO3vB37+z766uhFMIU6jtf8ndngxTjgrCungYFl6a+kU9QGZxO9+T+heC+4ru26TjttvU3xT/MpPXG/NayV9Pj89D6Dw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0822551388236975475</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0822551388236975475</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0822511388236971106</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0822531388236973581</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0822551388236975475</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>330525D1F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>95056F62F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>97053AE2F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8d70d7c-e4e3-4372-8a03-222427f07689</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5aacb852-19bb-45fe-b048-8d350af8d6dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true" id="80127eb6-235b-41a3-9ffe-398ee10fec48"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="0895f2bd-0a35-44c0-838c-74e69db91bdd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>1B0588E3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B4098A61C7E0401F0A0799472F:E208D68D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082311388236981960</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>6A0504D3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:6A0504D3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:6A0504D3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1B0588E3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>7D058E74F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1B0588E3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:7D058E74F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+I6FH6fXxFlHquQjZBFBYmtc2npMiwd2pcr4xgwTezUdoDOr792aChQ2ulcqRL1yfF3vrP4s885SBMnanKOmMCUaL1OXf/Xn/l+1YaBYfm2a1RdFBjAsT1jVp2B2Alrdhh7utbjPEc9wgUgoq47lnS1HcMJRrYbOW5kWZXArT3q2j1iXEJLl4qla5s0ITwqwtb1nJGIAo55RECKeCRgNGxe9yPpGYGSk94437IsArLGQogsMk1YiRFESQIrkKbmuXngcx7zaIjnBIicodeYMa/rr3vX63Vl7VYom5uOZVmmFZrSJ+Z4/l1vfCs3o7hHZnS7bgNCCYYgwb+BInWNxILGWjOZU4bFIv0A2jZtS0EbaAMNaFfJd918C1Cw+yLSAUnGgcEXwC7BBmiGGCIQaeNBr65//1oHt3tHDBA+oyzlR+u/o4TICiU0Q7HBy8xKdl9HPFGuxjmCUY/AJOd4hW7UmGQAIq7dMTTDmz7mcvhirhXt1zZc/uFyyhD8m7acm/tcJXXzRHU6eI64+D892+/XFuUeJDlqzG4S1vV/Znd5MGnWWq2b9m/Ts6276UO1XlDYd96S2rX7dX08rLvZet10FYxobTUOyPqXv6hZZ3dZurzqTh/GP7LLq37qPl79yM3V9fxs3n28elwPun1wO54Oujkb2bVkPMGT+35zMng+45fjb/P45yS+HrnWw8OUXban/2QwXsLrMFzGYbf/a0WSxa+Oe/tidW+96o/7HrXEkj23J0+m/fRM+GM2DVfQ3LT8K0q/nXn+cvMULi/8x/Hvwc+nIO/W33Laz+HQWErCMJ8uERTlUo1Hr6NdyH4B8bm8KAuOjVnhGmVKo7hAROgNtUtJS5RLAcJxJJu5XdstywuCrnvhha5bta12K2w68r+wGtgXYTMoNWjL4ohim5IZVrGUym7n53OCMI04IjFixormcIG4/gliBwig9chAHg5KOBpRqeItyw9sr2uHoeU17YtqO3Q8x/ODmuv77a7j6NoNFbfkljVnArFDBa8dKPgAQZxhpGRezTmXg86FLMkzWOUisSsrUCEolxcBU1ocOdXAMzlOswQpwmZK4zxBlWyRFQUy+fbXMQDkhRVzmFEmQGIXx/DDLI+/lQWRPjFWDlyl1EKyqejdjeREXpnPx3mH+3mX8M08xuq0yeoKhuGWyeGnt6FR07KbmF1ikNsl992Wv4Q4AWB+ws88Ls0uXrzCe9HLW1ZeHFJWGmV/n0HluZKvVnnRUV9JJpPwplRO2xwimEvdexnRJ0TMHYT5pWtnx/oo8s5+yC8XCzIUQKBUzp9WLL/w5hgirt4cPXl+Nl990ByElHUTaCNO2dqJfJooxp++XmAElZ8038mfNWXxW7tOYO3FkXnKh4bAZK5W6oJ5+WA2IJWwWCoiZfvgpwBOBT807oq84yLkNE1zgT7+oimpq+sAQpoT0evohWFffgue4iVD0ZvTO5hC4l/v7A3/8M6eXPeHUghToO988Z+dDVyMC0S6ehoUXOr6Rj5BZXAy35P7V4L7il9rWp5V7fxR8Q8zabwzv7fs1fT4PDT+Aw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+I6FH6fXxFlHquQjZBFBYmtc2npMiwd2pcr4xgwTezUdoDOr792aChQ2ulcqRL1yfF3vrP4s885SBMnanKOmMCUaL1OXf/Xn/l+1YaBYfm2a1RdFBjAsT1jVp2B2Alrdhh7utbjPEc9wgUgoq47lnS1HcMJRrYbOW5kWZXArT3q2j1iXEJLl4qla5s0ITwqwtb1nJGIAo55RECKeCRgNGxe9yPpGYGSk94437IsArLGQogsMk1YiRFESQIrkKbmuXngcx7zaIjnBIicodeYMa/rr3vX63Vl7VYom5uOZVmmFZrSJ+Z4/l1vfCs3o7hHZnS7bgNCCYYgwb+BInWNxILGWjOZU4bFIv0A2jZtS0EbaAMNaFfJd918C1Cw+yLSAUnGgcEXwC7BBmiGGCIQaeNBr65//1oHt3tHDBA+oyzlR+u/o4TICiU0Q7HBy8xKdl9HPFGuxjmCUY/AJOd4hW7UmGQAIq7dMTTDmz7mcvhirhXt1zZc/uFyyhD8m7acm/tcJXXzRHU6eI64+D892+/XFuUeJDlqzG4S1vV/Znd5MGnWWq2b9m/Ts6276UO1XlDYd96S2rX7dX08rLvZet10FYxobTUOyPqXv6hZZ3dZurzqTh/GP7LLq37qPl79yM3V9fxs3n28elwPun1wO54Oujkb2bVkPMGT+35zMng+45fjb/P45yS+HrnWw8OUXban/2QwXsLrMFzGYbf/a0WSxa+Oe/tidW+96o/7HrXEkj23J0+m/fRM+GM2DVfQ3LT8K0q/nXn+cvMULi/8x/Hvwc+nIO/W33Laz+HQWErCMJ8uERTlUo1Hr6NdyH4B8bm8KAuOjVnhGmVKo7hAROgNtUtJS5RLAcJxJJu5XdstywuCrnvhha5bta12K2w68r+wGtgXYTMoNWjL4ohim5IZVrGUym7n53OCMI04IjFixormcIG4/gliBwig9chAHg5KOBpRqeItyw9sr2uHoeU17YtqO3Q8x/ODmuv77a7j6NoNFbfkljVnArFDBa8dKPgAQZxhpGRezTmXg86FLMkzWOUisSsrUCEolxcBU1ocOdXAMzlOswQpwmZK4zxBlWyRFQUy+fbXMQDkhRVzmFEmQGIXx/DDLI+/lQWRPjFWDlyl1EKyqejdjeREXpnPx3mH+3mX8M08xuq0yeoKhuGWyeGnt6FR07KbmF1ikNsl992Wv4Q4AWB+ws88Ls0uXrzCe9HLW1ZeHFJWGmV/n0HluZKvVnnRUV9JJpPwplRO2xwimEvdexnRJ0TMHYT5pWtnx/oo8s5+yC8XCzIUQKBUzp9WLL/w5hgirt4cPXl+Nl990ByElHUTaCNO2dqJfJooxp++XmAElZ8038mfNWXxW7tOYO3FkXnKh4bAZK5W6oJ5+WA2IJWwWCoiZfvgpwBOBT807oq84yLkNE1zgT7+oimpq+sAQpoT0evohWFffgue4iVD0ZvTO5hC4l/v7A3/8M6eXPeHUghToO988Z+dDVyMC0S6ehoUXOr6Rj5BZXAy35P7V4L7il9rWp5V7fxR8Q8zabwzv7fs1fT4PDT+Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jx3jOzaewIwxDTG3dIFkaV92VFkGZW2ZWLJx+utXMjEBQtJ0ZzJDdHz0ne9c9ElXFKSJ4fmUopzhjEjhoCv/o5k2tGzXVgwLdhSrY7qKa3Q0JdYdZFsxNE09lqWQ0gKFhDJAWFc2NN1UdEMx3KVueobpaVarY1g/ZOke5ZRDc5eWJktVmhDq1WG7cpETLwMUU4+AFFGPQW/hTyce9/RAw0nuXe1Z1gHz3oaxraeqsBUhiJIEtmCWqlfqic9VRL0FXhPAihw9x4xoV37eu9vtWjuzleVr1dA0TdU6KveJKF5/lnufms0oCkmc7dcBIBnBECT4FxCkpohtskjyk3WWY7ZJ34DWVV0T0AqqoAJ1i3yW1ZcANbsPIp2QzClQ6AboDdgcxShHBCLpbh525c8f6+B+7zIHhMZZntKz9Z9RQqRESbZFkUKbzBp2H0e8UK7eFYJeSGBSUFyimRiTLYCISt9yFONqgikfvohKdfulivI/3EwZgn/Sliv1mCunrl6ozgCvEWX/p2fH/dqj3IOkQL3RcIbKxXLV+TlcfdWDx3a48B3s0JFLuzWFY+c9qUO7n9fnw3qYredN/ZX6V/B9spuUKZ1ts7YBjLtv6Ha0yK/tyuhbt7fjWaH2g2pFipvVPE3Cm/CrYxWz21FnaY6Gk8GN9bfjD5c6Bp9Wdjz8ZZBKLePsITB+TMbfw+ndsD+d5f0vzKl2lW8ORuPh1HGM4SyAyY/qaTwurX7Wn0+/34+08RyXDkbjeDn+RNKHmxVpD6jvWg9b8AVG6+5LTsc5nBobSVgUPx8QZM1SjEc4kK55vwB7X16EBUdKXLt6W6FRlCHC5J7YJaTFK7gA4cjjzdyvnYFmu7wu13bHNC1dC/od3+D/dSxXv+74bqNBexZnFIOMxFjEEiq7n5/3CcLUo4hEKFfKrIAbROV3EAeAASkkc344MkLRMuMqHtiuNnB933dcu33ddvqdwB84thOYX93AaV/L0ixjt+Q292OG8lMFb58o+BxBvMVIyLyYc8oHnTJekkdQFizRWyVoEVTwiyAXWuwZlmurFKfbBAnCappFRYJa2822LpBK97+GAiCtrZjCbZYzkOj1MXwzy/NvTUG4T4SFAxUp9RFvKnp1Ixme3eTzKm/r4s3VwPtFhMVp49VlOYZ7JqefXoZGTMthYg6JQao33A9b/hDiAoD6Dj/1vDSHeFGJj6I3tyy/OLis9Jr+PoLWY6soy6LuqCMkM+fwKldOXV0gWHDde1pm/yKiHiDUD107B9ZnkQ/2U34F25AFAwylfP6kevmBN8cCUfHmCPn5qT76oDkJyevGUMUu2YKEP00E43dfL9CDwo+bv/GfXZZHL+26gHUUh+fJHxoMk7VYiQvm6Y3ZgBmHxVwRs/wY/BLApeCnxkORD1wYn6afBUNvf5GE1HVlAGFWEBYO5NpwLL81T/a0Rd6L0yuYWuKf7+yKvnlnr6aTBRfCFMgHX/x7ZwXX4wKRLJ4GNZeuXPEnKA9O1kdy/0zwWPHbvmZr1sD8neKfZtJ7ZX5tOarp+Xno/Qc=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082311388236981960</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082311388236981960</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0822591388236979691</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082311388236981960</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>2B05A8E3F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>8D059E74F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0895f2bd-0a35-44c0-838c-74e69db91bdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true" id="6909612e-90b1-4aee-a70a-a171be8d97ff"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:tou");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="d924c32c-e95e-4528-8737-d35b32d12b8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","CHILD");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>01151195F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E5709BA0CE0401F0A05991749:3DF51D7E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082381388236988578</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>50151965F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:50151965F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:50151965F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>01151195F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>63157A16F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:01151195F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:63157A16F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH8+U3qi2HWGmgLjrFnWL4uXlTEgXEG1TSFLA/etPUiwColvPjDOY1ZVvfeuSLznmKEudMOIcmCA51eJOQ//Xd1GA6wgM33E8o+6ODg2/HgwNHxxs4WEwdL0jXYs5LyCmXCAqGrpj2a5hO4bj39hu6LihdVTzbPdR1wbAuISWLjVL15ZZSnlYhm3oBaNhjjjhIUUZ8FDgsB/1zkPpGaKKk948XrEsA7LmRIhpaJq4lgCGNMU1nGfmsbnlc5zwsE/GFImCwWvMhDf0172LxaK2cGs5G5uOZVmmFZjSJ+FkfKA3f1SbIYnpKF+t24jmlGCUkj9IkeqBmOSJFqXjnBExyT6Atk3bUtAGLLGB7To90M23ACW7LyJtkWQcGXyC7ArsGkbAgGLQbq/jhn7wtQ6u9t4wRPkoZxnfWX+PEtA5pPkUEoNXmVXsvo64p1zNY8BhTHFacDKHCzUmU4SBa1cMRmR5TrgcvoRrZfu1JZd/pJoywN9py7G5yVVSN/dUp0PGwMX/6dlmv1YoA5QW0PSiX9jq+OnQql+wwbPVZ9z+ja5s5PQaJYVN5xWpdbtf17vDup6t102zy1nx+8kcOeObX7Rtsjs6/TlbxhNvfs9GAbk97bh8Ejkwjr3n8d3gduBSH7yLZw+uu+2Xx+C6OMSH9/ifOOAPP24c5JJ2a+5ndq/ePUrSYe+WnS7u/ljzs/Pe4k7c0cfL4KiVnZ62Bk+ji7iLznzqReZD75Q/mXfL7Ki76L2QmcMmP9Ig6V++PCziwUn956W5ODm7bbzltJnDtrGShH4xfAIsqqUaj7ijdWW/kPhcXpSFJMaodA2nSqO4ACr0ptqlpCUspACRJJTNXK0t2/ZsO/C6XuC6ddtqt4LIkf8Fdd/uBpFfadCKxQ7Fdk5HRMVSKruan88J4izkQBNgxjwv8AS4/gliBwmkxfRaHo6ccrjJpYp7fmC1o5OTru+etKxO5Lpe3bHdTvuk5UZep61rF7m4pJcsGglg2wp+uKXg14DJlICSeTXnXA46F7IkMzQvRGrX5qhGoZAXAVNaHDp13zM5yaYpKMJmlidFCrXpZFoWyOSrX8dAmJdWwvE0ZwKldnkMP8xy91tVEOmTEOXAVUotkE2FdzeSE3pVPh/nHWzmXcFHRULUaZPVFYzgFZPtT29Do6ZlPTHrxDC3K+7rLd+E2ANgfsLP3C3NOl4yJxvRq1tWXhxSVppVf2eoNqsV83lRdvRISSaT8KZUTtvsAy6k7r3c5M9AzTWE+aVrZ816J/Lavs2vEBPaF0hAJudPK5dfeHP0gas3RyzPz/KrD5qtkLJuApZin62dyqeJYvzp6wWHWPlJ85X8WeQseWvXHqyNODJP+dAQhI7VSl0wLx/MBs4lLJGKmLNN8H0A+4JvG9dFXnMRcpqGhYCPv2hK6ho6wjgvqIg7emnYlN+Sp3iZQvjm9A6mlPjXO3vJP7yz73vnfSmEGdLXvuTvzgYpxwWDrp4GJZeGvpRPUBmcjjfk/pXgpuJ7llT84PCvir+dSfOd+b1lo6a756H5Hw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH8+U3qi2HWGmgLjrFnWL4uXlTEgXEG1TSFLA/etPUiwColvPjDOY1ZVvfeuSLznmKEudMOIcmCA51eJOQ//Xd1GA6wgM33E8o+6ODg2/HgwNHxxs4WEwdL0jXYs5LyCmXCAqGrpj2a5hO4bj39hu6LihdVTzbPdR1wbAuISWLjVL15ZZSnlYhm3oBaNhjjjhIUUZ8FDgsB/1zkPpGaKKk948XrEsA7LmRIhpaJq4lgCGNMU1nGfmsbnlc5zwsE/GFImCwWvMhDf0172LxaK2cGs5G5uOZVmmFZjSJ+FkfKA3f1SbIYnpKF+t24jmlGCUkj9IkeqBmOSJFqXjnBExyT6Atk3bUtAGLLGB7To90M23ACW7LyJtkWQcGXyC7ArsGkbAgGLQbq/jhn7wtQ6u9t4wRPkoZxnfWX+PEtA5pPkUEoNXmVXsvo64p1zNY8BhTHFacDKHCzUmU4SBa1cMRmR5TrgcvoRrZfu1JZd/pJoywN9py7G5yVVSN/dUp0PGwMX/6dlmv1YoA5QW0PSiX9jq+OnQql+wwbPVZ9z+ja5s5PQaJYVN5xWpdbtf17vDup6t102zy1nx+8kcOeObX7Rtsjs6/TlbxhNvfs9GAbk97bh8Ejkwjr3n8d3gduBSH7yLZw+uu+2Xx+C6OMSH9/ifOOAPP24c5JJ2a+5ndq/ePUrSYe+WnS7u/ljzs/Pe4k7c0cfL4KiVnZ62Bk+ji7iLznzqReZD75Q/mXfL7Ki76L2QmcMmP9Ig6V++PCziwUn956W5ODm7bbzltJnDtrGShH4xfAIsqqUaj7ijdWW/kPhcXpSFJMaodA2nSqO4ACr0ptqlpCUspACRJJTNXK0t2/ZsO/C6XuC6ddtqt4LIkf8Fdd/uBpFfadCKxQ7Fdk5HRMVSKruan88J4izkQBNgxjwv8AS4/gliBwmkxfRaHo6ccrjJpYp7fmC1o5OTru+etKxO5Lpe3bHdTvuk5UZep61rF7m4pJcsGglg2wp+uKXg14DJlICSeTXnXA46F7IkMzQvRGrX5qhGoZAXAVNaHDp13zM5yaYpKMJmlidFCrXpZFoWyOSrX8dAmJdWwvE0ZwKldnkMP8xy91tVEOmTEOXAVUotkE2FdzeSE3pVPh/nHWzmXcFHRULUaZPVFYzgFZPtT29Do6ZlPTHrxDC3K+7rLd+E2ANgfsLP3C3NOl4yJxvRq1tWXhxSVppVf2eoNqsV83lRdvRISSaT8KZUTtvsAy6k7r3c5M9AzTWE+aVrZ816J/Lavs2vEBPaF0hAJudPK5dfeHP0gas3RyzPz/KrD5qtkLJuApZin62dyqeJYvzp6wWHWPlJ85X8WeQseWvXHqyNODJP+dAQhI7VSl0wLx/MBs4lLJGKmLNN8H0A+4JvG9dFXnMRcpqGhYCPv2hK6ho6wjgvqIg7emnYlN+Sp3iZQvjm9A6mlPjXO3vJP7yz73vnfSmEGdLXvuTvzgYpxwWDrp4GJZeGvpRPUBmcjjfk/pXgpuJ7llT84PCvir+dSfOd+b1lo6a756H5Hw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o4FH3vr/C4jxljyzYGewIzBpbWDWmaQJJuX3aELEDBSEaSgeTXVzIxAULSdGcyQ3R9de65HzrSuYCLzI1iITCXhFEj6bXM/3zQCJEDoDX2Ut/yx3BswRQDKwiw7/kB8MKgYRqJEAVOqJCQypbpOsCzgGu5zRHwIteLgFMLG+4v07jDXCho5VJzTGOzyKiIyrAts+A0YlAQEVG4wCKSKBrGl4NIeUaw4mS2z7csy4C8PZMyj2wb1VKMcJahGmIL+9w+8DlPRTQkUwplwfFzzFS0zOe96/W6tvZqjE9t13Ec2wlt5ZMKMv1stj9Vm3Ga0AnbrruQMkoQzMgT1KQusZyx1IizKeNEzhZvQAMbOBrawhtkIeDTz6b9EqBk90GkA5JcQEvMIKjAbvAEc0wRNm5vkpb5+WMd3O4dcUjFhPGFOFr/HSVMVzhjOU4tUWVWsfs44olytc8xihKKskKQFf6uxySHCAvjB8cTshkQoYYvFUbZfmMj1B+ppgyjv2nLub3PVVG3T1SnR6ZYyP/Ts/1+bVHuYFbgNu/Hwb/zpzt/NOcPc6dz7ZGzxDtbxw/NVklh33lLatfu5/XxsO5m63nTzy89Ed557uzJna+XGc/CsferG1/dXnB4u/wySuRPMAUXKA385ah3VqSdb49i3Bh3N/ZFKigeJps5mD5suDNiny6WsnPtTodZHm6aDd77Ft9n897X7iLM/SW4HiTjcPw199If+f2M3+dj/OuLYOvOQx/ej+v39IzC6bCeDW4ag6/80/ouSH3K7tgAUleC2QNBrZec9nM4NFaSMCzGDxjJaqnHI+kZfdUvKN+XF20hqTUpXaNca5SQmEqzrXdpaYkKJUAkjVQzt+vAA/VGDIJ+PfQ8HzjdThi76r/Qb4J+GDcrDdqyOKLYZXRCdCytstv5eZ8gWkQC0xRza8UKNMPCfAexByU0EnqjDgejAo+YUvHAC90eiJtOx2k49b7rBv/0+v1uHINO3el3+6bxnckresXjicT8UMGDAwW/wYjkBGuZ13Mu1KALqUqyhKtCZqC2gjWKC3URcK3Fkes367YgizzDmrC9YGmR4Vo+y8sC2WL761oQidJKBMoZlzAD5TF8M8vjb1VBlE9KtIPQKXWwaio+cSM5VT6v8vZP3lwVfFykRJ82VV3JCdoyOfz0MjR6WnYTs0sMCVBx3235S4gTAPY7/Ozj0uzipSuyF726ZdXFoWSlXfV3CWvLWrFaFWVHG1oyuYK3lXICe4hRoXTvccTmmNo7CPtD186O9VHknf2QXyFndCihxAs1f0a5/MCbY4iFfnMk6vxsPvqgOQip6ibxRp6ydTP1NNGM3329oAhpP2X+oX7WjKcv7TqBtRdH5akeGpLQqV7pC+bxjdlATMESpYiM74OfAjgV/NC4K/KOi1TTNC4kfvuLoaWuZUKEWEFl0jNLw778ljzlY46jF6dXMKXEP9/ZG/Hmnf3zcjBUQriA5s6X/NnZIuW4IGzqp0HJpWVu1BNUBafTPbl/Jriv+HUH1EEY1P+k+IeZtF+ZX1v2anp8Htq/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082381388236988578</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082381388236988578</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082361388236986250</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082381388236988578</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>11153195F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>73158A16F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>027aba9f-4602-45c5-b486-7ebd54fae0f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d924c32c-e95e-4528-8737-d35b32d12b8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true" id="cbc3011c-708c-4e9a-913b-7b90181996b9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="eb76437e-3e7b-489b-9b17-6d5d3e9e20f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","CHILD");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-15</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_620139dd-bca5-4ba9-9ed4-a445cbeca280</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>F61592F6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-13</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973604524D1EE5E0401F0A059945A9:C30DC418"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0823141388236994965</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E6085227310DC880E0401F0A059906E4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>461591E6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:461591E6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:461591E6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F61592F6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>5915D9A7F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F61592F6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:5915D9A7F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E61862CE0C832255E0401F0A079902DE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1PSC7d2gJlK5ew6oshFHF7OxDSU7NMm2KSA/vqdFIuA6NYz4wxmdeVb37rkS1ocpont+ZzjTBBGtTBo6/82HRPW3Dk2ak7DNKq2axtuw24aDadeM03oNGAD61rIeY5DygWkoq3bpuUYlm3YzbHleLbjWU7FbNZmuvaAMy6hpUvF1LVNmlDuFWHbep5Rj0FOuEdhirknkDfy+zee9PRgyUnvtLYsi4BZZyHE0gMAVSKMcJKgCmIpaIEDn1bEvRGJKRR5ht9iRrytv+1dr9eVtVNhWQxs0zSB6QLpE3ESn+uds3IzjkI6Z9t1F1JGCYIJeYWKVB+LBYs0P4lZRsQi/QTaApapoA28QQayqvRcB+8BCnbfRDogmXFo8AW0SrAhnuMMU4S1yTBs6+ff6+B27ziDlM9ZlvKj9c8oYbrCCVviyOBlZiW77yOeKFenhZEXUpTknKzwrRqTJUSYa4MMz8nmhnA5fBHXivZrGy7/SDllGP2kLS2wz1VSByeqE5AYc/F/erbfry3KA0xy3JmBNO5Oe2K9mdZWg7slx/5wKq4XOblvFxT2nbekdu1+Wx8P62623jax8PIieHbDjXP7DGPqT9Ajvgf93sQfDG7i63rzLh4/XLzOLybx48SJ+tMYhE4yf1quV4FbnV2Pg9n9oPm4uDRnF2fz+OolYWEDAQHZa1cMzdzv3w/H8SXvJs7keXqbJq8LiwAxvqVTaIn6bHA3jn4Hq4dg9lK9vBe/wtnNP5vwxU/PkPhVm0b9QdSwx/w+mEePqP2e034Oh8ZSEkb502+MRLlU4xEGWk/2C4qv5UVZSGTMC1dvqTSKC0yF3lG7lLR4uRQgEnmymdt1r27VXLtX79Vcx6laZvfS9W35n1ttWj3Xb5YatGVxRLHL6JyoWEplt/PzNUGUehzTCGfGiuVogbn+BWIABdRCOpSHg1GOx0yquO/bfrdnO1dB03Kb9Wrzqh74llrYZtAIHF27ZeKO3mX+XODsUMHrBwo+xIgsCVYyr+acy0HnQpbkGa5ykViVFaxQnMuLIFNa7NnVZg1wki4TrAiDlEV5givLxbIoEODbX9uAiBdWwtGSZQImVnEMP83y+FtZEOkTEeXAVUqXWDYVn7iRzDKfz/N29/Mu4f08Iuq0yeqKjKAtk8NP70OjpmU3MbvEELdK7rstP4Q4AQC+4AeOS7OLF63IXvTylpUXh5SVTtnfZ1h5ruSrVV50tKEkM5PwQCqnBUYY5VL3XsbsP0zBDgJ869rZsT6KvLMf8svFgo4EFDiV86cVy2+8OUaYqzdHKM/P5rsPmoOQsm4Cb8QpWzeRTxPF+MvXC/KQ8pPmgfxZsyx6b9cJrL04Mk/50BCExmqlLpiXT2YDMQlLpCKybB/8FMCp4IfGXZF3XIScpqdc4M+/aErq2jpEiOVUhIFeGPblt+ApXpbYe3f6AFNI/NudveGf3tmP/ZuRFMIU6jtf8ndngxTjguSLVfoXXNr6Rj5BZXAa78n9G8F9xa8qxbeu/qr4h5l0Ppg/WvZqenweOn8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1PSC7d2gJlK5ew6oshFHF7OxDSU7NMm2KSA/vqdFIuA6NYz4wxmdeVb37rkS1ocpont+ZzjTBBGtTBo6/82HRPW3Dk2ak7DNKq2axtuw24aDadeM03oNGAD61rIeY5DygWkoq3bpuUYlm3YzbHleLbjWU7FbNZmuvaAMy6hpUvF1LVNmlDuFWHbep5Rj0FOuEdhirknkDfy+zee9PRgyUnvtLYsi4BZZyHE0gMAVSKMcJKgCmIpaIEDn1bEvRGJKRR5ht9iRrytv+1dr9eVtVNhWQxs0zSB6QLpE3ESn+uds3IzjkI6Z9t1F1JGCYIJeYWKVB+LBYs0P4lZRsQi/QTaApapoA28QQayqvRcB+8BCnbfRDogmXFo8AW0SrAhnuMMU4S1yTBs6+ff6+B27ziDlM9ZlvKj9c8oYbrCCVviyOBlZiW77yOeKFenhZEXUpTknKzwrRqTJUSYa4MMz8nmhnA5fBHXivZrGy7/SDllGP2kLS2wz1VSByeqE5AYc/F/erbfry3KA0xy3JmBNO5Oe2K9mdZWg7slx/5wKq4XOblvFxT2nbekdu1+Wx8P62623jax8PIieHbDjXP7DGPqT9Ajvgf93sQfDG7i63rzLh4/XLzOLybx48SJ+tMYhE4yf1quV4FbnV2Pg9n9oPm4uDRnF2fz+OolYWEDAQHZa1cMzdzv3w/H8SXvJs7keXqbJq8LiwAxvqVTaIn6bHA3jn4Hq4dg9lK9vBe/wtnNP5vwxU/PkPhVm0b9QdSwx/w+mEePqP2e034Oh8ZSEkb502+MRLlU4xEGWk/2C4qv5UVZSGTMC1dvqTSKC0yF3lG7lLR4uRQgEnmymdt1r27VXLtX79Vcx6laZvfS9W35n1ttWj3Xb5YatGVxRLHL6JyoWEplt/PzNUGUehzTCGfGiuVogbn+BWIABdRCOpSHg1GOx0yquO/bfrdnO1dB03Kb9Wrzqh74llrYZtAIHF27ZeKO3mX+XODsUMHrBwo+xIgsCVYyr+acy0HnQpbkGa5ykViVFaxQnMuLIFNa7NnVZg1wki4TrAiDlEV5givLxbIoEODbX9uAiBdWwtGSZQImVnEMP83y+FtZEOkTEeXAVUqXWDYVn7iRzDKfz/N29/Mu4f08Iuq0yeqKjKAtk8NP70OjpmU3MbvEELdK7rstP4Q4AQC+4AeOS7OLF63IXvTylpUXh5SVTtnfZ1h5ruSrVV50tKEkM5PwQCqnBUYY5VL3XsbsP0zBDgJ869rZsT6KvLMf8svFgo4EFDiV86cVy2+8OUaYqzdHKM/P5rsPmoOQsm4Cb8QpWzeRTxPF+MvXC/KQ8pPmgfxZsyx6b9cJrL04Mk/50BCExmqlLpiXT2YDMQlLpCKybB/8FMCp4IfGXZF3XIScpqdc4M+/aErq2jpEiOVUhIFeGPblt+ApXpbYe3f6AFNI/NudveGf3tmP/ZuRFMIU6jtf8ndngxTjguSLVfoXXNr6Rj5BZXAa78n9G8F9xa8qxbeu/qr4h5l0Ppg/WvZqenweOn8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6JTP+6UNuW1HWGGArq9K76B7q5f7oT0FKJtgk0K6K+/SbEIiK7eGWcwpyfPec5LnuRY4DRx/a4QkEnKmRH22+a/VeLWI6giy2s0q1Ytgro1AQ9bTcdtRgQacaOFTCMUIoeQCYmZbJuug6oWci23NUZV3636qFVBDXRnGreQCQWtXCqOaazShAm/CNs284z5HAsqfIZTEL4k/qg7PPOVp49LTmbneM2yCJh1ZlLOfdsmlQgIJAmpEJ7ax/aOz3Ek/BGdMizzDF5iRqJtvuxdLpeVZbXCs6ntOo5jO56tfCJBp0dm51u5GaKQxXy97mHGGSU4oc9YkxqCnPHI6CZTnlE5S9+BRjZyNLQFK2IRVGNHpv0aoGD3SaQdkpnAlphhVIJdQwwZMALGzXXYNo8+18H13nGGmYh5loq99dcoAVtAwucQWaLMrGT3ecQD5eocA/FDRpJc0AWc6zGZYwLCuMwgpqszKtTwRcIo2m+shPqj5ZQB+Upbju1troq6faA6fToFIf9Pz7b7tUa5xUkOnfh0eBFUB2JIxveEJmOErqb99HYWzZ12QWHbeU1q0+6X9f6wbmbrZdNoev4Y08s+Hj9OfniLBvu1WorhLY48O19B9j2pn/1cyviKxz+uyWxxN7Fxo3vaXN08J97N5Hcfnp/+sJsUDaqt4NsszVqnFw52n+p/7n6xRQhikcY86J08XN7fPJ1H9/ZD+phPw2oUPPeCVtZy2TAIg9NMut+TEEZXXa9x9U88vrufffv5MLYHl5434TW+un+gOQrbrzlt57BrLCVhlE/ugchyqccj7Bsnql9Yfiwv2kIjKy5c/bnWKCGBSbOjd2lp8XMlQDTyVTPX67qH6n2v2zype9VqDTm9wOu66j+v1kInXrdVatCaxR7FHmcx1bG0yq7n52OCJPUFsAgya8FzMgNhfoDYxxIbIbtWh4MzAWOuVLxbP6n1T9xGqz5AQXcw6NWCoN5UhIOWE3ie0uJzLi/YRdaNJWS7Ct7YUfBrIHROQcu8nnOhBl1IVZJHvMhlgioLXGGQq4sg01rsu7VW3RY0nSegCdspj/IEKvPZvCiQLda/roWJKKxUkDnPJE5QcQzfzXL/W1kQ5RNR7SB0SgGopsKBG8kp83mTd+3gzVXCd/OI6tOmqiszStZMdj+9Do2els3EbBIjApXcN1u+CHEAwP6An71fmk28aEG3ope3rLo4lKx0yv4+4spjJV8s8qKjTS2ZmYK3lXIiewQkV7r3NOYPwOwNhP2pa2fDei/yxr7LL5czNpJYQqrmzyiWn3hzjEDoN0eozs/qsw+anZCqbhJW8pCtl6iniWb84euF+ET7KfOl+lnyLHpt1wGsrTgqT/XQkJRN9UpfME/vzAbhCpYqReTZNvghgEPBd42bIm+4SDVNk1zC+18MLXVtExPCcybDvlkYtuW34Cmf5uC/Or2BKST+5c5eiXfv7N/Ds5ESwhSbG1/6d2eLFuNCwNRPg4JL21ypJ6gKzqZbcv9CcFvxaw2kRH/Q+Jvi72bSeWN+a9mq6f556PwH</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBQFFRUVxv3sJhWJRNBgT99e+g0ZPkJOfL+13p9PR0P73Q88wzNnyP7QCMUZy4YVBWxJfKP4jmmyxs72oWjxo1rl63am0G0rVmq2mxLGxwnNGulBWMU6QEODGC5KXC0ky9RvM1htHpdodtd2j2qcHz20p5iWJMTBOVJ7pSzn0vwJ2r25dKGged0MAu7gSGj3AngZ05UEcdotkx7pgqr883lFeH8auTJFGHouCTiSDyPPgEQ596pj7oPJu4M3ftwEjSGL35NPFL5e1slmVPWf0pjG2KpWmaonmK6JjYtX9VXkv3w8hUAiu8rbtGEAYuNDz3YhSgVJQ4oVkGnh3GbuL435hmKIYuTNdQDmuQ4YJfFeq3gyu6H1r6ADLGRg07BnM3NkMWilEAUXkxU14qv35WwdtZPTYCbIWxjz+t/xskFJyQF0bIrOF7ZHd0P7f4RbpenxHsKAH0Uuye0Lhok8iACJenMbLcfORi0nwmLl/LX87xvcMQ/C8leabe4ySwqS8yI7o2wsn/U6/3tbpZWRpeil5blwyeTFEculv5wp3kbh6zwGnScbR4uUJ4r3wD9Sj12/pzoz766u0Q4DjNEpgRs4K2FYLxBmssNrdwYtTrqT1hgh43dph0j1J301jlYp83dH0MjopfdTQbL4Xj0hq7DXNwXtClXnecN3x+OTWO/HoA0mUrsLut+HyOrD7L5xdtQqdMc6oM4hbHD3asQTmDY3thaht3oPXhgePp3TjzGpvQ2ZcGvfk08BZjcODi9VbGIYNffsf0PoYiriE6X4Ms/q8bNC8aifFYdItJYZHPM0GvqqJ0q2K3C1DXBpkiAFsRRhcwFuzD0Tm4PT6jBaAtZCCCszoDmWhvxKWmDaXMXC697VKRZUGdcVkfbMQS2RClfClu1wPaWG2jDSvT27kgmOtZuKsPIrN/yPoOHKu6mo115azupXysS/TqKrNzsr6oe5WZ6It6abUXeHUmZWJ29ShKmTPermbRZsFn8CJpKuB6gFlIXUft6/6SgfWZA/fSSAWHq1xw1O5yqeaSDqYlwR4vSWx6V95G0Dejne8574z3iXHd7C3Pu56Xbi/SXu1Kve782Jsru7qoSQMw2yx2q+XBWMmnEuyPwe7u0W24xjrM7G07E7XNYBhuFecEx0CTBEEDJF00UJXeAIQ9AagccPNLdy80w64pZ9SAxaUq7/Wa67N7XGOjR3sG024zm9GqOT02RSmobofpbu+ozlqeVIdz87TgE/6ywafqqWm4DMwjS1tL/WSYW31tXtpNxXwN+1XTHlDehZdjtTUA8eXseKo9S1bNCT7vXMtaCesJ57UsT63PIsuzojOu6qF2iOmmgOostTmfhkkJ2KoAQG+/2AuaKrSLpJpKpm1UwQCylKTgsmeTIbs8DvonD27qIMyHq8n+8FYYU8wkgco0ibSVVGqLwCyK0J8vJHkPFoJtx4ItyYIGRaBtlGG2Ifla9Iny5zzK1zzakgCk+hY0+X6pvqD5ZJLMOQ6cA2ERyLyjHvOV2fTp1hFJo/k44jIVj61guwoPqu/GizidL4bD8Sjf6WnvsCezyqLnw1N9W5JOhwi446HuHMRQNKbRZpNE1QDGMFEiX1Xyy2SL921359ODaoMRprQIW+zC32WLniFth7E9Z4b9WTCtt/gSTq1z36/u29mqqs+bUcvsBpZ4PlPbeEmHIJT5WeNo5ix7cBbZqJlZA3DYGew493jhzEvDrQ6zmTZczf1qo9Q4jUY+fdEpbhxNsnkv4yRNq9ZNQe/rOIrdTdq283gSmOzGSJqnLb1supF34Nn0oHNRfWn7pFjTkxm11GlJ49Zw69utCA6oGXUCUssaKb3z7mJcIn8CbwP083R4CG/zg3o/WT6MnjvpmJNuRTC5L4sLSBHLMrkVjOTvBKaQuGbNuqp2ooIF4QQFSeW1OFWQl05KKI5rdsiVcVtLTabdZLsS3W3XWbbRkGiOZmQa0C2ep1lRurOcG4pPELthYLmFr4LH3W6pvwOEfgejwERx7RSm0EG48heLRb7KSjAj128YYKSHhCfScotj5QbTrTfarEgLNFsHcotuy802XZeZVqU8DpNJMImBlaD4A0dkmA8ccYagG7moIJLFbYrJdYoTkpKjcUoTj3k6GU8BSgnVjAu212G5doPCrh95qABM+aGZeugpcqJrgih8+2VrBsRX6UzS/1Hm3etN/22In/fu2SA6plso4CIeAZGKoj8Ib6vTuAfzfdDc+6Dv5kFqusWFTlKbxC68Ifm49btjilZ5tAuJ6g75oflZ8MEq9TmghyPz5MJHzz+eA4RNEr7xei/J0Xg6PqWnU3otQqvgUjExTzEU3aLmCKaEEJ318IAC6mGC+hEXfaD+5Pkh/4gvTZxgnpDv2SctU74uf/AQmSNcPEQU0vL5T185H1ySvCUoT76SdT3yXikQ//VJAzuw0CPiKfnJwtj8Xa4vbL3zQ+IsBpgb2MWqYJ7nb5oChsSsS4ZYGL83/pWBr5x/FD6S/MCSkG7apQn6fqdcTKeXigFhmAaJIlaugvcT84ozOUeo81vpDzNX7vdG5nP8LZlfq6M5mV2+UXnouv9bueZe2wUicgq7VywvlZy8S4nzwH43od8Afjmk22T6/WVIf4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0823141388236994965</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0823141388236994965</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823121388236992054</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823141388236994965</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130911_020045</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E608A05B1127BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0715A2F6F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>69150AA7F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E61862CE0C842255E0401F0A079902DE</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD3</con:name><con:value>urn:dece:userid:org:dece:E61847F4FE71FB9FE0401F0A07995289</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08adc646-1311-416b-b5ab-b8f23f07cecf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bea2c7bc-9454-4c3d-9c8f-ebcb7147b934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c029175-97df-4aa3-bd58-e56abdbe6027</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56e84f74-144a-4609-8df5-0421d96f3cac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>364e1d9f-ffdd-4500-bb2a-1f7c4fe293a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e128cdb7-2033-4571-9481-b741edbfbc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb76437e-3e7b-489b-9b17-6d5d3e9e20f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true" id="73e3dd9e-be40-4e6a-891f-3208b256974d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="c1188f0f-8aca-4d6c-a1d6-9512a9f20737"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98547899303A46E0401F0A079931FF:63B86045"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0823211388237001975</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3C15FAA8F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3C15FAA8F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3C15FAA8F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EC1591C8F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4F152069F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EC1591C8F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4F152069F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o8FH0/v6JTH53SK1A6wEwFQRREARV9+SakAaJtCk3KxV9/kkIrIHjwm2GA7O6svfalKylTEPiG41KKIoZDIrXqFfm/gjca6UXDVCzNthTL1vIKAPwLWcaolNdHZnFkylKL0hi1CGWAsIpsaLqp6IZi2APddAz+0XL5QvFNlp5RRDk0d8lpsrQKfEKdJGxFjiPihIBi6hAQIOow6PTdTtvhng5IOcnV8oZlEjCqThmbOaoKcx6CyPdhDoaBWlb3fMoedfp4QgCLI7SN6dGKvN27XC5zSzMXRhPV0DRN1Uoq9/EonlzI1T/pZuS1yDjcrGuAhARD4ONPIEh1EJuGnuT6kzDCbBqcgNZVXRPQClpBBeoWuZDVrwAJuzOR9khGFCh0CvQUrIfGKEIEIump16rIF+d1cLN3EAFCx2EU0IP17yghskB+OEOeQtPMUnbnIx4pV7WMoNMi0I8pXqB7MSYzABGVHiI0xqs2pnz4PCol7ZdWlH9wOmUI/qYtZXWXK6euHqlOHU8QZf+nZ7v92qA8Az9G1cFz/XHeXBZebqZW44aMg3UjHsy1gV94rCQUdp03pLJ2b9eHw5rN1nbTTfepcFlqDoJFKVo2LnuPzWH73e7cfuR7wYvXNzB+Zh+f5v1j8e32qTfs1B9W6u3abxfvXmKt2Jzf5t/GvXU3frEH8z/sA9gf/t1j+6bWfWWLy+GTtWq+1meu2b336xM4evONYT+YXsMbjTbcUevpsz28QfF8Mp8+5F/uoXn3WuyE8PqSdv6syOdaey8uYCNvX5Nmy/6Ela+cdnPYN6aS0I9H7wiydCnGo1WXGrxfgP0sL8KCPWWcuDozoVGUIcLkqtglpMWJuQBhz+HN3Kyva3q+pNfsRr5kmpau1a5KrsH/lSxbb5RcO9WgDYsDirWQjLGIJVR2Mz8/E4SBQxHxUKQswhhOEZV/QKwDBqQW6fGXIyQUDUKu4vm8pbmNmmUYNdN2zVq9aF5b2tVVyS7pVqHRkKX7kHVJN3LHDEX7Cl7YU/AegniGkZB5MeeUDzplvCRzsIiZr+cWIEdQzA+CSGixY1h2XqU4mPlIEFaD0It9lJtNZ0mBVLr5NRQAaWLFFM7CiAFfT17Dk1kePksLwn08LByoSOkK8aaiIyeSnuZzOu/Sbt4pvBt7WLxtvLoswnDDZP/R19CIackmJksMUj3lnm35JcQRAPUHfuphabJ43gLvRE9PWX5wcFmppv2dg9w8Fy8WcdLRopDMiMOrXDl1tY9gzHVvPQg/EFEzCPWsYydjfRA5s+/zi9mU9BlgKODzJyXLM+4cfUTFnaPF35/VuReavZC8bgyt2DFbzedXE8H4x9sLdKDw4+YH/rMMI++rXUewduLwPPlFg2EyEStxwKxPzAYMOSzmihhGu+DHAI4F3zdmRc64MD5No5ih008kIXUVGUAYxoS16nJi2JXfhCdbz5Dz5fQNJpH47Zm9oifP7GGn3edCGAA588X/dlZwMi4QyeJqkHCpyCt+BeXByWRH7rcEdxXf5IrfcN1/Kv5+JtVv5u+WnZoevg/Vvw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o8FH0/v6JTH53SK1A6wEwFQRREARV9+SakAaJtCk3KxV9/kkIrIHjwm2GA7O6svfalKylTEPiG41KKIoZDIrXqFfm/gjca6UXDVCzNthTL1vIKAPwLWcaolNdHZnFkylKL0hi1CGWAsIpsaLqp6IZi2APddAz+0XL5QvFNlp5RRDk0d8lpsrQKfEKdJGxFjiPihIBi6hAQIOow6PTdTtvhng5IOcnV8oZlEjCqThmbOaoKcx6CyPdhDoaBWlb3fMoedfp4QgCLI7SN6dGKvN27XC5zSzMXRhPV0DRN1Uoq9/EonlzI1T/pZuS1yDjcrGuAhARD4ONPIEh1EJuGnuT6kzDCbBqcgNZVXRPQClpBBeoWuZDVrwAJuzOR9khGFCh0CvQUrIfGKEIEIump16rIF+d1cLN3EAFCx2EU0IP17yghskB+OEOeQtPMUnbnIx4pV7WMoNMi0I8pXqB7MSYzABGVHiI0xqs2pnz4PCol7ZdWlH9wOmUI/qYtZXWXK6euHqlOHU8QZf+nZ7v92qA8Az9G1cFz/XHeXBZebqZW44aMg3UjHsy1gV94rCQUdp03pLJ2b9eHw5rN1nbTTfepcFlqDoJFKVo2LnuPzWH73e7cfuR7wYvXNzB+Zh+f5v1j8e32qTfs1B9W6u3abxfvXmKt2Jzf5t/GvXU3frEH8z/sA9gf/t1j+6bWfWWLy+GTtWq+1meu2b336xM4evONYT+YXsMbjTbcUevpsz28QfF8Mp8+5F/uoXn3WuyE8PqSdv6syOdaey8uYCNvX5Nmy/6Ela+cdnPYN6aS0I9H7wiydCnGo1WXGrxfgP0sL8KCPWWcuDozoVGUIcLkqtglpMWJuQBhz+HN3Kyva3q+pNfsRr5kmpau1a5KrsH/lSxbb5RcO9WgDYsDirWQjLGIJVR2Mz8/E4SBQxHxUKQswhhOEZV/QKwDBqQW6fGXIyQUDUKu4vm8pbmNmmUYNdN2zVq9aF5b2tVVyS7pVqHRkKX7kHVJN3LHDEX7Cl7YU/AegniGkZB5MeeUDzplvCRzsIiZr+cWIEdQzA+CSGixY1h2XqU4mPlIEFaD0It9lJtNZ0mBVLr5NRQAaWLFFM7CiAFfT17Dk1kePksLwn08LByoSOkK8aaiIyeSnuZzOu/Sbt4pvBt7WLxtvLoswnDDZP/R19CIackmJksMUj3lnm35JcQRAPUHfuphabJ43gLvRE9PWX5wcFmppv2dg9w8Fy8WcdLRopDMiMOrXDl1tY9gzHVvPQg/EFEzCPWsYydjfRA5s+/zi9mU9BlgKODzJyXLM+4cfUTFnaPF35/VuReavZC8bgyt2DFbzedXE8H4x9sLdKDw4+YH/rMMI++rXUewduLwPPlFg2EyEStxwKxPzAYMOSzmihhGu+DHAI4F3zdmRc64MD5No5ih008kIXUVGUAYxoS16nJi2JXfhCdbz5Dz5fQNJpH47Zm9oifP7GGn3edCGAA588X/dlZwMi4QyeJqkHCpyCt+BeXByWRH7rcEdxXf5IrfcN1/Kv5+JtVv5u+WnZoevg/Vvw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyoYJ4GGqCClYehQAWW49PZyZBwD7iQ2jR2g/fqxQ0OB0k57JAR4Z3vttS9Z9rlASWz7gRAklZQzo92sm/8hD05cp4Itd4LUF54Sa1KtuNYZqlYxVP8QhKbRFiIjbSYkYrJu2mXoWNC2bG8EHd/Wn1LZ8R5M44akQkErl1LZNNZJzISfh62bWcp8jgQVPkMJEb7E/jDodnzl6aOCk9k437DMA6aNuZQLHwBciggmcYxLmCfgHOz5nEfCH9IZQzJLyWvMSNTN172r1aq0cko8nQG7XC6Dcg0on0jQ2YnZ+FFsJlGbTflmHSLGGcUopi9Ik+oSOeeREcQznlI5Tz6AhgCWNbRF1tjC0GUnJngLkLP7ItIeyVQgS8wRLMAGZEpSwjAxxoN23Tz5Wgc3e0cpYmLK00QcrL9HibAlifmCRJYoMivYfR3xSLka5wT7bYbjTNAl6ekxWSBMhNFPyZSuO1So4YuEkbffWAv1ocWUEfydtpyDXa6KOjhSnSadESH/T892+7VBuUFxRhqVRzx67mVZFyxjG6xPq71J4ki7PQ9/13MKu84bUtt2v64Ph3U7W6+b0OjhLCrj8E9f3uOfg9WU96rR5bhlo24ohzMwnsHKY495Z9CWdzV7zkaCv4xRtH64PYWDp6Z9WVmOuxNKMxb+uL9za5mYXTFw0wniS4/ym5fVeHT9cB9fteFgPus/NjOvf926FL878Ori1rNP76foopPYp0nYv43t/i+HP94tF9ndD7GKQQAe3XErwvTXehamP+tvOe3msG8sJGGYTR4JlsVSj0e7abRUv5D8XF60hUbWNHf1F1qjhCRMmg29S0uLnykBopGvmrlZuy1YscvVWqtScxwXlsOLWmCrfzXXg61a4BUatGFxQDHkbEp1LK2ym/n5nCBOfEFYRFJryTM8J8L8BLGJJDLabKBeDs4EGXGl4h4Mmq6ieuFUnZoX1GBYaTZhEDpN22mFrmsaPS6v2XUaTCVJ9xW8uqfgA4LpghIt83rOhRp0IVVJntAykzEsLVGJkUwdBKnWYt92vQoQNFnERBMGCY+ymJQW80VeICA2v7aFsMitVOAFTyWKYf4afpjl4bOiIMonotpB6JQuiGoqOXIiwSKfj/Ou7eZdwAdZRPXbpqorU4o3TPYfvQ2NnpbtxGwTwwIW3LdbvglxBAB8wg8clmYbL1rSnejFKasODiUrjaK/T6j0VMqWyyzv6JmWzFTBA6WcEAwJzpTuPY/4H8LAFgJ86djZsj6IvLXv88vknA0lkiRR82fkyy/cOYZE6DtHW70/669eaPZCqrpJspbHbGGsriaa8ae3F+xj7afMffWz4mn01q4jWDtxVJ7qoiEpm+mVPmCeP5gNzBUsVYrI013wYwDHgu8bt0XecpFqmiaZJB8/MbTU1U2EMc+YbDfN3LArvzlP+bwg/pvTO5hc4l/P7LX48My+63aGSggTZG596b+dLZqPCyamvhrkXOrmWl1BVXA225H7V4K7iu+EsNIKAu9fir+fSeOd+b1lp6aH70PjLw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0823211388237001975</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0823211388237001975</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823191388236999444</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823211388237001975</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC15A1C8F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5F153069F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1188f0f-8aca-4d6c-a1d6-9512a9f20737</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true" id="b10baad0-0fd8-47e8-864b-5a9eacfa771f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1fe27f9c-7781-4b22-859b-f91192d8f4bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E5761BA0CE0401F0A05991749:15D2F99B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0823281388237008769</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>812511F9F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:812511F9F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:812511F9F5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>3225DE0AF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>9425060BF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:3225DE0AF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:9425060BF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tq457SC5VLR5gpgsd6A0HZbl7OxDSFYJuUJAX015+kWAQEN54ZBsjqyre+demXnHOQxI7nc46YwJRoQbuh/1uFtUrdqdQMt/4CDdeVXzUQvhgVEIYAVKpWOUK6FnCeoYBwAYho6I5llw3bMZzao132HPmplhy3MtK1IWJcQkuXkqVryyQm3MvDNvSMEY8CjrlHQIK4J6A38O9uPenpgYKT3jxfscwDsuZEiNQzTVgKEURxDEuQJua5ueVzHnJvgMcEiIyhj5ghb+gfexeLRWlRLlE2Nh3LskyrbkqfkOPxqd48KTajMCARXa0vAKEEQxDjd6BI3SExoaHmx2PKsJgkB6Bt07YUtIGW0IC2S0518zNAzu5IpC2SjAODT4BdgPVRhBgiEGlP/aChnx7XwdXeRwYIjyhL+M76Z5QQmaOYpig0eJFZwe54xD3lap4j6AUExhnHc3SvxiQFEHGtx1CEl7eYy+ELuZa3X1ty+cHFlCH4k7acm5tcJXVzT3XaeIy4+D892+zXCmUI4gw1r/ohcZYTX9y93wPmd53ezSJ1W4+j338aOYVN5xWpdbs/1rvDup6tj03Xk+Xo6j126xFLe6PnZ6tKR1YSjNJs2hVokSyGl/V/4k76YE/gr/FT/yq4qE3p0BrUKUOMxenyPZ049nQw7fKTRYcspv0bMY16/BkOz4a9CMzc63d7/HsYPE/fbu6DaBCAX7f9yeto6PzhXce5j1jLj2f09YnjhwfHYXTAgyv79eTpcfo0feq9wVnM/OHr4jpeND5z2sxh21hIwiB7mSIoiqUaj6CtXcp+AfG9vCgLDo0od/VSpVFcICL0ptqlpMXLpADh0JPNXK3LjnPW7lj+5Vm9XHZt66JV9x35r+7W7Mu6Xys0aMVih+IFJRFWsZTKrubne4Iw8TgiIWLGnGZwgrj+DWIbCKAFpC9fDko4eqRSxVttt94qyzHsOG7b9atuu9O5dMq1S/esXGnbtq7dU9ElXeZHArFtBa9sKXgfQZxipGRezTmXg86FLMkMzDMR26U5KBGUyYOAKS32HLd2ZnKcpDFShM2EhlmMSukkzQtk8tWvYwDIcyvmMKVMgNjOX8ODWe4+KwoifUKsHLhKqYVkU9GeE8ku8jmcd30z7wLez0Ks3jZZXcEwXDHZfvQ5NGpa1hOzTgxyu+C+3vJDiD0A5jf8zN3SrOOFc7wRvThl5cEhZaVZ9HcGSrNSNp9neUerSjKZhDelctrmAMFM6t7bI31FxFxDmEcdO2vWO5HX9m1+mZiQgQACJXL+tHx5xJ1jgLi6cwTy/Vkee6HZCinrJtBS7LNdxPJqohh/e3uBHlR+0tyTPwvKws927cHaiCPzlBcNgclYrdQB83ZgNiCVsFgqImWb4PsA9gXfNq6LvOYi5DS9ZAIdfqIpqWvoAEKaERG09dywKb85T/GWIu/T6QtMLvEfZ/aSHzyzn+9uB1IIE6CvffHfnQ2cjwuUN1bpn3Np6Et5BZXByXhD7j8Ibip+zXbObKntf1P87UyaX8xfLRs13X0fmv8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tq457SC5VLR5gpgsd6A0HZbl7OxDSFYJuUJAX015+kWAQEN54ZBsjqyre+demXnHOQxI7nc46YwJRoQbuh/1uFtUrdqdQMt/4CDdeVXzUQvhgVEIYAVKpWOUK6FnCeoYBwAYho6I5llw3bMZzao132HPmplhy3MtK1IWJcQkuXkqVryyQm3MvDNvSMEY8CjrlHQIK4J6A38O9uPenpgYKT3jxfscwDsuZEiNQzTVgKEURxDEuQJua5ueVzHnJvgMcEiIyhj5ghb+gfexeLRWlRLlE2Nh3LskyrbkqfkOPxqd48KTajMCARXa0vAKEEQxDjd6BI3SExoaHmx2PKsJgkB6Bt07YUtIGW0IC2S0518zNAzu5IpC2SjAODT4BdgPVRhBgiEGlP/aChnx7XwdXeRwYIjyhL+M76Z5QQmaOYpig0eJFZwe54xD3lap4j6AUExhnHc3SvxiQFEHGtx1CEl7eYy+ELuZa3X1ty+cHFlCH4k7acm5tcJXVzT3XaeIy4+D892+zXCmUI4gw1r/ohcZYTX9y93wPmd53ezSJ1W4+j338aOYVN5xWpdbs/1rvDup6tj03Xk+Xo6j126xFLe6PnZ6tKR1YSjNJs2hVokSyGl/V/4k76YE/gr/FT/yq4qE3p0BrUKUOMxenyPZ049nQw7fKTRYcspv0bMY16/BkOz4a9CMzc63d7/HsYPE/fbu6DaBCAX7f9yeto6PzhXce5j1jLj2f09YnjhwfHYXTAgyv79eTpcfo0feq9wVnM/OHr4jpeND5z2sxh21hIwiB7mSIoiqUaj6CtXcp+AfG9vCgLDo0od/VSpVFcICL0ptqlpMXLpADh0JPNXK3LjnPW7lj+5Vm9XHZt66JV9x35r+7W7Mu6Xys0aMVih+IFJRFWsZTKrubne4Iw8TgiIWLGnGZwgrj+DWIbCKAFpC9fDko4eqRSxVttt94qyzHsOG7b9atuu9O5dMq1S/esXGnbtq7dU9ElXeZHArFtBa9sKXgfQZxipGRezTmXg86FLMkMzDMR26U5KBGUyYOAKS32HLd2ZnKcpDFShM2EhlmMSukkzQtk8tWvYwDIcyvmMKVMgNjOX8ODWe4+KwoifUKsHLhKqYVkU9GeE8ku8jmcd30z7wLez0Ks3jZZXcEwXDHZfvQ5NGpa1hOzTgxyu+C+3vJDiD0A5jf8zN3SrOOFc7wRvThl5cEhZaVZ9HcGSrNSNp9neUerSjKZhDelctrmAMFM6t7bI31FxFxDmEcdO2vWO5HX9m1+mZiQgQACJXL+tHx5xJ1jgLi6cwTy/Vkee6HZCinrJtBS7LNdxPJqohh/e3uBHlR+0tyTPwvKws927cHaiCPzlBcNgclYrdQB83ZgNiCVsFgqImWb4PsA9gXfNq6LvOYi5DS9ZAIdfqIpqWvoAEKaERG09dywKb85T/GWIu/T6QtMLvEfZ/aSHzyzn+9uB1IIE6CvffHfnQ2cjwuUN1bpn3Np6Et5BZXByXhD7j8Ibip+zXbObKntf1P87UyaX8xfLRs13X0fmv8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcR8b4BsT2BGYck5w6hdwg6WlezijyNii1JbBkIPn6SiYmQEmanhlmjLa31l774iWdcJRnThByDoUgjGpxv6v/l6SAUpR4BoKOZbSgDYaPwTX8R+xavud6Dkp0Lea8hJhygajo6o5lu4btGI43tt3AkT+/6VnOg67dQ8EltHRpWrq2yjPKgypsVy8LGjDECQ8oyoEHAgejcDgIpGeAak5672TNsgpY9KZCzALTxM0EMGQZbmKWmyfmjs9JwoMRmVAkygJeYya8q7/uXS6XzaXbZMXEdCzLMi3flD4JJ5Mveu+o3gxJTFO2XkeIMkowysgLUqSGIKYs0cJswgoipvk70LZpWwragBU2sN2iX3TzLUDF7pNIOyQLjgw+RXYNdgspFEAxaHe3cVf/8rkOrveOC0R5yoqc763/jhLQBWRsBonB68xqdp9HPFCu3gngIKY4KzlZwKUakxnCwLXrAlKyGhAuhy/hWtV+bcXlj9RTBvhv2nJibnOV1M0D1emTCXDxf3q23a81yj3KSuhRlwyGd5Ozxk0RPUTe3dXNsOSOd3Zmx92KwrbzmtSm3a/r/WHdzNbrpm8lvESN8sfj4Of98G70guf8qzsafA1T4lmN6HbWebruP/4T2fH4Muuk/QZ+iQTGl8PSa8y/36cjmCxozLynBlwcPYD/FT2fouUqcu/5JDezxnIUnmcsspNoZZrX6bxhtaLL+fPDxcN0nJrs6Tq07IvneTG99LJFMfh++j1MynJ6PT5aNDr5zQWLfnxLSvZIHXOEu285beewa6wlYVQ+PgEW9VKNR9zXzmW/kPhYXpSFJEZauQYzpVFcABV6T+1S0hKUUoBIEshmrtd+y2lbHev0vO27bsu2olM/dOQ/v+XZ537o1Rq0ZrFHMWI0JSqWUtn1/HxMEOcBB5pAYSxYiafA9Q8Q+0ggLaa38uNglMOYSRV3W62o7x+7Vttq+e2W4/rHvtdqh26747TDjqNrl0xc0asiTAUUuwre2VHwW8BkRkDJvJpzLgedC1mSOVqUIrObC9SkUMqDoFBaHDgtr21yks8yUITNnCVlBs3ZdFYVyOTrp2MgzCsr4XjGCoEyu/oM381y/11dEOmTEOXAVUqnIJsKB04ku87n/bz97bxr+LBMiPraZHVFQfCaye6rt6FR07KZmE1imNs1982Wv4Q4AGB+wM/cL80mXrIgW9HrU1YeHFJWenV/56g5b5aLRVl19FhJZiHhTamctjkCXErdex6zn0DNDYT5qWNnw3ov8sa+y68UUzoSSEAu50+rlp+4c4yAqztHLL+f1WcvNDshZd0ErMQhW5TJq4li/OHtBQdY+UnztXwsWfGW+CGsrTgyT3nREIRO1EodMM/vzAZmEpZIRWTFNvghgEPBd42bIm+4CDlNj6WA999oSuq6OsKYlVTEfb0ybMtvxVM8zyB4c/oNppL41zN7xd89s/8dDkZSCHOkb3zJn50NUo0LBl1dDSouXX0lr6AyOJ1syf0rwW3F92ynbUtt/5Pi72bS+838u2WrpvvfQ+8X</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0823281388237008769</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0823281388237008769</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823241388237004731</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823281388237008769</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>4225EE0AF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>A425260BF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fe27f9c-7781-4b22-859b-f91192d8f4bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true" id="02e094af-568d-44ec-b459-18519a882ecc"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1bafefa1-87f5-40e3-9884-86858efb9953"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE988A2E5787BA0CE0401F0A05991749:BC5BDAB1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0823351388237015116</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>D6253E9BF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:D6253E9BF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:D6253E9BF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>8725F2DBF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E925D09CF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:8725F2DBF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E925D09CF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E607201723122613E0401F0A059919BB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlGgHWEGqNztrq5KUXS/3AnpKWQtaW1SLP76mxSLgOi6d4YZyOHkOc95yZOcMrRMLK/PGOScpFQJ/K76bye2Y8s2m5rTwTOtCUZLc1viV8eIZi3HarnRzFSVgLECAso4oryrWoZpa6alWZ2JaXuW7dl2w2o7v1TlFnImoIVLw1CVcplQ5lVhu2qRUy9FjDCPoiUwj2Mv7F+ce8LTQzUntXe6YVkFzHsLzjNP13EjAgxJghs4Xeqn+p7PacS8kMwp4kUOLzEj1lVf9j49PTWe7Eaaz3XLMAzdcHXhEzEy/6r2vtSbIQponG7WQ0RTSjBKyDOSpC6AL9JI6SfzNCd8sXwH2tRNQ0JrUGINm036VdVfA1TsPom0RzJnSGMLZNZgY4ghB4pBuRkHXfXr5zq42TvJEWVxmi/ZwfrvKAFdQZJmEGmszqxm93nEI+XqnQL2AoqTgpEV/JRjkiEMTLnKISblOWFi+CKmVO1XSiY+pJ4ywH/TllN9l6ugrh+pjk/mwPj/6dluvzYotygpoGe2FxzZwbff0+/s+SaejPgDQ+jamWU33YrCrvOG1LbdL+vDYd3O1sum21J/no7jdckhn8DYOrmaoHR6UbAVDr7jk+nlP1l4OV8+T6+b2XXSmugnyfNV+/6u+PUAZH19wcPp2j+bhY9WrH+xzp/7g6HFf3FnUFLjfoBbk045W4/TqB3eTa7EYY91dtJ+mPrObXTvtL4l1tX5PX9YQhvc+5OMf/dHqX8fjIY3X5wfwaJTuvgpnLOx02R5iLuvOe3msG+sJSEsZr8B83opxyPwlZHoF+Ify4u0kEiLK1cvkxrFOFCu9uQuKS1eIQSIRJ5o5mbdaVvOyPIHI8e17aZpDAdu3xK/3GbHHLn9Tq1BGxYHFIcpjYmMJVV2Mz8fE8RLjwGNINdWaYEXwNQPEH3EkRLQsTgcKWUwSYWKt42RMbKb9pk99H13OOi03L7bOhsM3daoPzDaqvIz5Zf0Mu/HYi72Fby1p+BjwCQjIGVezjkTg864KMkjWhU8MRsr1KBQiIsgl1rsWc2OozOyzBKQhPVlGhUJNLJFVhVIZ5tvS0OYVVbCcJbmHCVmdQzfzfLwv7ogwici0oHJlAYgmgpHbiSrzuf9vN3dvGv4fhERedpEdXlO8IbJ/l+vQyOnZTsx28QwM2vu2y1/CXEEQP+An35Ymm28aEV2ote3rLg4hKz06v4+osZjo1itiqqjbSmZuYDXhXKaegi4ELq3nqQPQPUthP6pa2fL+iDy1r7Pr+ALGnLEYSnmT6mWn3hzhMDkmyMQ56f87INmL6SoG4eSH7MNE/E0kYw/fL1gD0s/Yb4SX09pHr226wjWThyRp3hocELnciUvmPU7s4FTAUuEIqb5LvgxgGPB943bIm+5cDFNs4LD+/8oUuq6KsI4LSgPfLUy7MpvxZOvM/Bend7AVBL/cmeX7N07++7iPBRCuETq1pf82Vkj1bhgUOXToOLSVUvxBBXB6XxH7l8I7iq+37Ic+8z9o+LvZ9J7Y35r2anp4Xno/Qc=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlGgHWEGqNztrq5KUXS/3AnpKWQtaW1SLP76mxSLgOi6d4YZyOHkOc95yZOcMrRMLK/PGOScpFQJ/K76bye2Y8s2m5rTwTOtCUZLc1viV8eIZi3HarnRzFSVgLECAso4oryrWoZpa6alWZ2JaXuW7dl2w2o7v1TlFnImoIVLw1CVcplQ5lVhu2qRUy9FjDCPoiUwj2Mv7F+ce8LTQzUntXe6YVkFzHsLzjNP13EjAgxJghs4Xeqn+p7PacS8kMwp4kUOLzEj1lVf9j49PTWe7Eaaz3XLMAzdcHXhEzEy/6r2vtSbIQponG7WQ0RTSjBKyDOSpC6AL9JI6SfzNCd8sXwH2tRNQ0JrUGINm036VdVfA1TsPom0RzJnSGMLZNZgY4ghB4pBuRkHXfXr5zq42TvJEWVxmi/ZwfrvKAFdQZJmEGmszqxm93nEI+XqnQL2AoqTgpEV/JRjkiEMTLnKISblOWFi+CKmVO1XSiY+pJ4ywH/TllN9l6ugrh+pjk/mwPj/6dluvzYotygpoGe2FxzZwbff0+/s+SaejPgDQ+jamWU33YrCrvOG1LbdL+vDYd3O1sum21J/no7jdckhn8DYOrmaoHR6UbAVDr7jk+nlP1l4OV8+T6+b2XXSmugnyfNV+/6u+PUAZH19wcPp2j+bhY9WrH+xzp/7g6HFf3FnUFLjfoBbk045W4/TqB3eTa7EYY91dtJ+mPrObXTvtL4l1tX5PX9YQhvc+5OMf/dHqX8fjIY3X5wfwaJTuvgpnLOx02R5iLuvOe3msG+sJSEsZr8B83opxyPwlZHoF+Ify4u0kEiLK1cvkxrFOFCu9uQuKS1eIQSIRJ5o5mbdaVvOyPIHI8e17aZpDAdu3xK/3GbHHLn9Tq1BGxYHFIcpjYmMJVV2Mz8fE8RLjwGNINdWaYEXwNQPEH3EkRLQsTgcKWUwSYWKt42RMbKb9pk99H13OOi03L7bOhsM3daoPzDaqvIz5Zf0Mu/HYi72Fby1p+BjwCQjIGVezjkTg864KMkjWhU8MRsr1KBQiIsgl1rsWc2OozOyzBKQhPVlGhUJNLJFVhVIZ5tvS0OYVVbCcJbmHCVmdQzfzfLwv7ogwici0oHJlAYgmgpHbiSrzuf9vN3dvGv4fhERedpEdXlO8IbJ/l+vQyOnZTsx28QwM2vu2y1/CXEEQP+An35Ymm28aEV2ote3rLg4hKz06v4+osZjo1itiqqjbSmZuYDXhXKaegi4ELq3nqQPQPUthP6pa2fL+iDy1r7Pr+ALGnLEYSnmT6mWn3hzhMDkmyMQ56f87INmL6SoG4eSH7MNE/E0kYw/fL1gD0s/Yb4SX09pHr226wjWThyRp3hocELnciUvmPU7s4FTAUuEIqb5LvgxgGPB943bIm+5cDFNs4LD+/8oUuq6KsI4LSgPfLUy7MpvxZOvM/Bend7AVBL/cmeX7N07++7iPBRCuETq1pf82Vkj1bhgUOXToOLSVUvxBBXB6XxH7l8I7iq+37Ic+8z9o+LvZ9J7Y35r2anp4Xno/Qc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6B9oRZip4YW+8bEAP+nImpAuItikmKaC//iTFIiC69cw4g1ld+da3LvmSY47SxAkjzoEJklGt027o/zrIw25t5BloFHiGZ9ViY1RzXQOPfDx27CpgH3Stw3kOHcoFoqKhO5btGrZjOPWB7YaOG7rVil21HnTtDhiX0NKlYunaMk0oD4uwDT1nNMwQJzykKAUeChz2o8tuKD1DVHLSm8crlkVA1pwKMQtNE1diwJAkuIKz1Dw2t3yOYx72yYQikTN4ixnzhv62d7FYVBZuJWMT07Esy7QCU/rEnEwO9eZBuRniDh1nq3UL0YwSjBLyihSpSxDTLNaiZJIxIqbpJ9C2aVsK2oAlNrDt0UPdfA9QsPsm0hZJxpHBp8guwXowBgYUg3bb6zT0w+91cLV3wBDl44ylfGf9M0pA55BkM4gNXmZWsvs+4p5yNY8Bhx2Kk5yTOVypMZkhDFy7YTAmyy7hcvhirhXt15Zc/pFyygD/pC3H5iZXSd3cU502mQAX/6dnm/1aodyhJIfmePpALyN2e1EdL4YO6V2NBu41Tas1zhsFhU3nFal1u9/Wu8O6nq23TXdZV6Dq/eT8NHm4bDnVs9ZT27egzkiS/Bm4g5P7GA2PHp2n19HvoNd2btpxq+qn9k0fp93HV7vWHQS/qxEa8JP04D6+jtIEjjxvOpjg4fDJty4Z+pNe9E9ad/VndH3X/Wf5OFiMJk+/zrm4+pX499NZ96qDGOrdjrrD+K59djR5fO5ekINo3kcL8mpmt/7y6fxxfhXVG+85beawbSwloZ+PHgGLcqnGo9PWzmS/kPhaXpSFxMa4cA1nSqO4ACr0ptqlpCXMpQCROJTNXK1PA8dvW0HrzA9c17Ot1kkQOfK/wKvbZ0FULzVoxWKHYiujY6JiKZVdzc/XBHEacqAxMGOe5XgKXP8CsY0E0jq0Jw9HRjkMMqniXr1tRcFZ4Nqnjud5tbrV8iKrZXuubftVv65rV5m4ptcsGgtg2wpe3VLwHmAyI6BkXs05l4POhSzJM5rnIrErc1ShkMuLgCktDh2v7pucpLMEFGEzzeI8gcpsOisKZPLVr2MgzAsr4XiWMYESuziGn2a5+60siPSJiXLgKqUTkE2FPTeSU+bzed7BZt4lfJTHRJ02WV3BCF4x2f70PjRqWtYTs04Mc7vkvt7yQ4g9AOYX/Mzd0qzjxXOyEb28ZeXFIWWlWfb3GVWeK/l8nhcdrSnJZBLelMppm33AudS9l0H2BNRcQ5jfunbWrHcir+3b/HIxpX2BBKRy/rRi+Y03Rx+4enN05PlZfvdBsxVS1k3AUuyztRL5NFGMv3y94BArP2m+kT+LjMXv7dqDtRFH5ikfGoLQiVqpC+blk9nAmYQlUhEztgm+D2Bf8G3jushrLkJO0ygX8PkXTUldQ0cYZzkVnbZeGDblt+ApXmYQvjt9gCkk/u3OXvJP7+zhZbcvhTBF+tqX/N3ZIMW4YPlilf4Fl4a+lE9QGZxONuT+jeCm4rerju+eBid/U/ztTJofzB8tGzXdPQ/N/wA=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxieR8NmExFjuiMKQUXFDfeXE1gUi7JJsemvP4XdOnafnrlzboQRWElW5pcLWV/9wIbvsR2AMYoTNwyqqvxa+5sXBZ4zuUMDiU2u0eR5tiGKsN3gWpZ1gC2LgzRfq6oYp0gNcGIEyWuNpRmuQYsNhl4yTIcnP/alybL7WnWNYkxME5UXulYtfC/AnZvb11oaB53QwC7uBIaPcCeBHR1o4w7R7Bh3TLW3H+8obw7jNydJog5FwRcTQeR58AWGPvWD+qTzw8Qd3bUDI0lj9OHTxK+1j715nr/k3EsY2xRL0zRFixTRMbFr/1V7q9w3I1MNrPB93TWCMHCh4blXowSlocQJzSrw7DB2E8f/hWmGYujSdAMVsAGZZvBXjfrp4IbuDy19Ahljo4Edg7kbWyALxSiAqLpaqK+1v/6sgu97l7ERYCuMffxl/d8goSBDXhghs4Hvkd3R/bnFb9L19gPBjhpAL8VuhiZlm0QGRLg6i5HlFmMXk+YzcfVW/mqB7x2G4H8pyQ/qGSeBTX2TGdm1EU7+n3o91+rdytrwUvRm1C+51D5ch4dTT3CiNWLX07Hht9kwfL1BeFZ+B/Uo9cf6a6M++upjk7Ucj1f9vTxL47NXrEfaYrLb9/yLinB2tlpcL5ZUIVGOttRuXwTAqENnNd0JfWErOofNQt/Z7pifzi+y4EwrgwMyjxpFR1KvvZjOjhIfSdP2UOjrOqK1ka0Nzx67DbShuldW8/rYkE/N4+qqWetdMh5tiyyV5WxgjmhlO664+inczA6tMbEmZ/xlVl+9/ozpOYYyrhG63IIs/295WpSNxHgsuuWksMjnmaA3TVW7dbnbBahrg1yVgK1K4yuYSPbp7JzcvpjTEpivekAGF20Bctneyev5fKTk5nrt7ddqrydpi2Y+ADu5Ql7ISrGW99shbWz20Y7t0XtdksztIjxww8gcnPKBAyfaUssnS/WiHZVislTozU1mF2R91Y4aM12uuMrmKInaQsnl/OZRVnJnst8sot1KzOFVmWug2QfMSuk62mDprxnILRx4VMYaON3kkqN112utUJZgVpHsyZrEtuz29hH0zejge86T8QExvjT768uh76X7q3LUukq/q5/7unrg5LkyBIvd6rBZn4xNL6vAwQQc7h5d3jW2YW7v27k83w1H4V51MjgBc0WS5oCkiwaa2h+CsC8BrQnc4to9Sq2wa/ZyasjiSl30+q3txT1vsdGnPYNpt5ndeNOanVuyEtT3o/RwdDRn25vWR7qZrcREvO5wVs9ahsvAIrLmW2WQjAprMNcrh5lcbOGgbtpDyruKvVgThiC+XhxPsxfJpjXFl4NrWRtpO216guVp3CKyPCu64PoynJ9iuiUhjqV2l2yUVICtSQD0j6ujNNekdplUU83nO00yQE9JUnA9ssmIXZ+Hg8yDOw6ExWgzPZ4+CmPKuSJR+VwhbaVU2jIwyyIM9JXSO4KVZNuxZCs9aQ5lMN+po3xH8rUaEOWveezd8mgrElC4PWiJgwq3osVkmujNJrgE0iroiY52LjZmy6eFM1LG+iRq5hqeWMF+E540341XcaqvRqPJuDgs0/7pSGaVReujjNtXlOwUAXcyWjonOZSNWbTbJVE9gDFM1MjX1OI63eNj2z349LDOM9KMlqHArvxDvuobyn4U2zozGiyCGSeIFZxal4FfP7bzTX2ptyLB7AaWfLlQ+3hNhyDsiQv+bBYse3JW+biVW0NwOhjspPBE6SIqo/0S5ov5aKP7db7CZ+OxT1+XVHMSTXO9nzeV+bzOmdJysMRR7O7Stl3E08Bkd0bSyvb0uuVG3klk09OyGXFr2yfFmmVmJGizyry5hXvfFiI4pBZUBhTBGqv9y+FqXCN/Ct8H6Nfp8BC+zw/qebJ8Gj130qGTbkUwuS/LA0iVqz1yKhjJ7wlMKXHNhnVT7UQlC8IJCpLaW7mrJC+dlFAc1+yQI+N9rbRogRApgeUYlm0xnEI3aaZHA5oXRUaUpDvLeUfxBWI3DCy39FXyuPdT6vcAod/BKDBR3MjCFDoI135jscxXVQ0W5PgNA4yWIeGJnMAxIujyNM+32rzMdMUW1+UZWhHpNs3LSq06CZNpMI2BlaD4M0dsfuKICwTdyEUlkSxPU0yOU5yQlJyNLE085iUzXgKUEqoZl2yvwzbbPIVdP/JQCZjyQzP10EvkRLcEUfj9yTYMiG/ShbL8W9W7t5P+lyF+fXfPBtEx3VIBl/FIiFQUfUN4m/dgfh208Bz03TxITbc80Elqk9iF70g+v/rZMWWrPNqFRHWH/ND8Kvhklfoa0MORmbnw0fOP6wBhk4RvvN1LcjZezi9plqW3Iggll4qJeYqhaIHSEUwJIboswxMKqIcJ6o+46AP1F88P+Wd8aeIEekK+Z5+0TPW2/IOLiI5weRFRScsXf3rL+eSS5C1BRfKdrOuR+0qJ+LdXGtiBpR4Rz8gjD2PzZ7m+sfXkh8RZDjA3sMtVyTwvv2gKGBKzLhliYfxs/DsD3zn/LHwk+YElId10SBP06zfVcjq91gwIwzRIVLl2EzxPzBvO5BKhzk+lf5m5cb8PMl/gX5L5rTbWyezyjdpD1/3fyg331i4QkV3YvWF5rRXkXkqcB/bThP4A+HVIM4LMKjwHWizfeh7StAAeQ/pzJG//Ev9b8pTTr9/D2z8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0823351388237015116</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0823351388237015116</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823321388237012042</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823351388237015116</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_052433</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>972513DBF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F925F09CF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E607201723132613E0401F0A059919BB</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1bafefa1-87f5-40e3-9884-86858efb9953</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true" id="2537f18c-1abc-465b-aa22-db08084629ad"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="56491c9a-a157-45c9-896c-631d06377629"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360452A81EE5E0401F0A059945A9:463399DD"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0823431388237023806</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>2C255E3DF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:2C255E3DF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:2C255E3DF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>DC25675DF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>3F257B1EF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">313561BEF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:DC25675DF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:3F257B1EF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:313561BEF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcx44xtjHBnsAM19ZJyA2SHPpyRkgbUGNLxpIJ7dcfycQEKEmTM5MZou2ttde+aElnAiWxG7aFgExSzoyo1zT/bfgNj7g13wqqDWLVTp26FZwCsvx64E3Bm2KoYdOIhMghYkIiJpumW3U8y3EttzF2vND1Qi+o+F7wwzQeIBMKWrlUqqaxTmImwiJs08wzFnIkqAgZSkCEEoej9vAyVJ4hKjmZrbMNyyJg1lpImYa2jSsEMMQxrmCe2Gf2ns8ZEeGIzhmSeQYvMYlomi97n5+fK89ehWdz261Wq3Y1sJUPEXT+xWydlJuBRGzGN+suYpxRjGL6G2lSQ5ALTox2POcZlYvkDWjHdqoa2oI1trBTY19M+zVAwe6DSHskM4EssUBOCXYHM8iAYTDu76Km+eVjHdzsHWeIiRnPEnGw/hwlYCuIeQrEEmVmJbuPIx4pV+sMcBgxHOeCruBKj0mKMAjjJoMZXV9SoYaPCKNov7EW6o+WUwb4M205s3e5Kur2ker06ByE/D892+3XBuUBxTm0zqdsej4JJvL7NxBjEE5nPshuyfVs+tQsKOw6b0ht2/2yPhzW7Wy9bPrOF10W3HfWyy7pz6c+aXfwfGw/Por7YB6l0Wo4pPSWPaWD6+va5Amto4s6kZ6sT+8aw/slcSfBqD/5+buXJ79PHvujmx+du+y+/r1qj9Cajknk+Q0s+42oQf3b6cXjZew8fLuIk6+PAV862fn98nbc/3rDz9OV0w+8lOSTfv95vqQnvSuWDq+eRpOHixqe3qzxKGq+5rSbw76xlIRRPv0JWJZLPR5RzxiofiH5vrxoCyXWrHANU61RQgKTZkvv0tIS5kqAKAlVMzfrXtf166d+b+AHnldzqt1O0HbVf0Gt4QyCdqPUoA2LA4pdzmZUx9Iqu5mf9wniJBTACGTWiud4AcJ8B7GHJDIidqcOB2cCxlyruOe3u9W223HdQcftub7v1gZtxbla6/dPTx3TuOLyml1n7ZmEbF/B63sKfgeYphS0zOs5F2rQhVQlWaJVLmOnskIVBrm6CDKtxaFba/i2oEkagyZsJ5zkMVTSRVoUyBabX9dCWBRWKnDKM4lipziGb2Z5+K0siPIhVDsInVIHVFPhyI3klvm8nXewm3cJ384J1adNVVdmFG+Y7H96HRo9LduJ2SaGhVNy3275JMQRAPsdfvZhabbxyIruRC9vWXVxKFlplf1dosqykq9WedHRUy2ZmYK3lXI69ghwrnTv15g/AbO3EPaHrp0t64PIW/s+v1wu2EgiCYmaP6NYfuDNMQKh3xyROj/rjz5o9kKquklYy2O2bqyeJprxu68XHGLtp8w36ueZZ+S1XUewduKoPNVDQ1I21yt9wfx6YzYwV7BUKSLPdsGPARwLvm/cFnnLRappmuYS3v5iaKlrmghjnjMZ9czCsCu/BU/5K4Xw1ekPmELiX+7stXjzzv5neDlSQpggc+tL/+5s0WJcMJj6aVBwaZpr9QRVwdl8R+5fCO4qvqsU3+97f1X8/Uxaf5j/tOzU9PA8tP4D</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3PV3jcx44xtjHBnsAM19ZJyA2SHPpyRkgbUGNLxpIJ7dcfycQEKEmTM5MZou2ttde+aElnAiWxG7aFgExSzoyo1zT/bfgNj7g13wqqDWLVTp26FZwCsvx64E3Bm2KoYdOIhMghYkIiJpumW3U8y3EttzF2vND1Qi+o+F7wwzQeIBMKWrlUqqaxTmImwiJs08wzFnIkqAgZSkCEEoej9vAyVJ4hKjmZrbMNyyJg1lpImYa2jSsEMMQxrmCe2Gf2ns8ZEeGIzhmSeQYvMYlomi97n5+fK89ehWdz261Wq3Y1sJUPEXT+xWydlJuBRGzGN+suYpxRjGL6G2lSQ5ALTox2POcZlYvkDWjHdqoa2oI1trBTY19M+zVAwe6DSHskM4EssUBOCXYHM8iAYTDu76Km+eVjHdzsHWeIiRnPEnGw/hwlYCuIeQrEEmVmJbuPIx4pV+sMcBgxHOeCruBKj0mKMAjjJoMZXV9SoYaPCKNov7EW6o+WUwb4M205s3e5Kur2ker06ByE/D892+3XBuUBxTm0zqdsej4JJvL7NxBjEE5nPshuyfVs+tQsKOw6b0ht2/2yPhzW7Wy9bPrOF10W3HfWyy7pz6c+aXfwfGw/Por7YB6l0Wo4pPSWPaWD6+va5Amto4s6kZ6sT+8aw/slcSfBqD/5+buXJ79PHvujmx+du+y+/r1qj9Cajknk+Q0s+42oQf3b6cXjZew8fLuIk6+PAV862fn98nbc/3rDz9OV0w+8lOSTfv95vqQnvSuWDq+eRpOHixqe3qzxKGq+5rSbw76xlIRRPv0JWJZLPR5RzxiofiH5vrxoCyXWrHANU61RQgKTZkvv0tIS5kqAKAlVMzfrXtf166d+b+AHnldzqt1O0HbVf0Gt4QyCdqPUoA2LA4pdzmZUx9Iqu5mf9wniJBTACGTWiud4AcJ8B7GHJDIidqcOB2cCxlyruOe3u9W223HdQcftub7v1gZtxbla6/dPTx3TuOLyml1n7ZmEbF/B63sKfgeYphS0zOs5F2rQhVQlWaJVLmOnskIVBrm6CDKtxaFba/i2oEkagyZsJ5zkMVTSRVoUyBabX9dCWBRWKnDKM4lipziGb2Z5+K0siPIhVDsInVIHVFPhyI3klvm8nXewm3cJ384J1adNVVdmFG+Y7H96HRo9LduJ2SaGhVNy3275JMQRAPsdfvZhabbxyIruRC9vWXVxKFlplf1dosqykq9WedHRUy2ZmYK3lXI69ghwrnTv15g/AbO3EPaHrp0t64PIW/s+v1wu2EgiCYmaP6NYfuDNMQKh3xyROj/rjz5o9kKquklYy2O2bqyeJprxu68XHGLtp8w36ueZZ+S1XUewduKoPNVDQ1I21yt9wfx6YzYwV7BUKSLPdsGPARwLvm/cFnnLRappmuYS3v5iaKlrmghjnjMZ9czCsCu/BU/5K4Xw1ekPmELiX+7stXjzzv5neDlSQpggc+tL/+5s0WJcMJj6aVBwaZpr9QRVwdl8R+5fCO4qvqsU3+97f1X8/Uxaf5j/tOzU9PA8tP4D</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3A5j1PG+MbFFagCm+x6JmQSYHJ72RJyA5qxJWLJ4OzXr2QwAUIyyValiqjdOn36oiOdc5Qmtt/jHDJBGNWisKP/M/Wmno0cZDQa2DNcx3YM1GxPjXrLqbsx4FncbutaxHkOEeUCUdHR7brlGJZt2K2J5fi247t2zXPdR127hYxLaOlSq+takSaU+2XYjp5n1GeIE+5TlAL3BfbHveGlLz19VHHSu+cblmXArLsQYumbJq5JJpAkuIZZap6bBz7nMffHZE6RyDPYxox5R9/uXa/XtbVTY9nctOv1ullvm9In5mR+pne/VJshjuiMbdYBoowSjBLyL1KkhiAWLNZ6yZxlRCzSN6At06oraAMKbGDLpWe6+RKgZPdBpAOSGUcGXyCrAhvBDDKgGLSfo6ijn32sg5u9kwxRPmNZyo/Wn6MEdAUJW0Js8Cqzit3HEU+Uq3sO2I8oTnJOVnClxmSJMHDtOoMZKS4Jl8MXc61sv1Zw+UeqKQP8mbacm/tcJXXzRHVCMgcu/k/P9vu1QblFSQ7dwaoPrSCxG5e3/cuvdjh1J+x5/TANb4edksK+84bUrt3b9fGw7mZru4kybsEjdRfeYPLQmnyf3A8fstYM6NCOivDmPurldIJGwXTRdxch+mYRNlhdi0kRP0E0GwqMROH85eIlsosvC44DNHKtdDgKGJvex6PCvAkb7YF3mc6/D/jKuxvS50do0bT4m+c953ouiiLE7mLoTu+u7n6KYVAv7gaz/q/iSysR4/DmaTiefbO/jgfO79W885LTfg6HxkoSxvn0F2BRLdV4RKF2IfuFxPvyoiwkNmalq79UGsUFUKF31S4lLX4uBYjEvmzmZu1c2F6zbw0uvLbjuFY96Ld7tvyv7basi3avVWnQhsURxYDRGVGxlMpu5ud9gjj1OdAYMmPFcrwArr+DGCKBtIiO5OFglMOESRXvNZ2Li6Zb77UGTa/hBk7QD5yWFfS9htcIXEfXrpj4QX9kvZmA7FDBGwcKPgJMlgSUzKs553LQuZAleUKrXCRWbYVqFHJ5EWRKi33bbXkmJ+kyAUXYTFmcJ1BbLpZlgUy++bUNhHlpJRwvWSZQYpXH8M0sj79VBZE+MVEOXKXUB9lUOHEjOVU+b+fd3s+7gu/lMVGnTVZXZARvmBx+ehkaNS27idklhrlVcd9t+STECQDzHX7mcWl28eIV2Yte3bLy4pCy0q36+4RqT7V8tcrLjjaVZGYS3pTKaZljwLnUvecJ+w3U3EGYH7p2dqyPIu/sh/xysaBjgQSkcv60cvmBN8cYuHpzRPL8FB990ByElHUTUIhTtiCRTxPF+N3XC/ax8pPma/mzZln80q4TWHtxZJ7yoSEInauVumCe35gNzCQskYrIsn3wUwCngh8ad0XecRFymqa5gLe/aErqOjrCmOVURKFeGvblt+Qpnpfgvzi9giklfntnF/zNO/t+eDmWQpgifedL/uxskHJcMOjqaVBy6eiFfILK4HS+J/dbgvuKbwe25w2c8E+Kf5hJ95X5tWWvpsfnofsf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH51S2lKgHWEGKGiPIip+nOvLnZBuINqmkKSA/vqbFIuA6NE7wwDZ3Vl77Y+u5ISjJLb9FufABEmpFgYN/d9aFY+rFQsZlbGrvhAy6rYzNkZ1q1yr12BUj1xdCznPIKRcICoaul22HMOyDbt+azm+7fgVt2RZ3qOu3QPjElq6lMq6tkpiyv08bEPPGPVTxAn3KUqA+wL7w1b/wpeePio46c2TNcs8IGtOhZj5polLEWCIY1zCaWKemDs+JxH3h2RCkcgYvMWMeEN/27tcLktLp5SyiWmXy2Wz7JnSJ+JkcqQ3fxWbIQrpOF2vO4imlGAUk1ekSPVBTNNIa8WTlBExTT6BtkyrrKANWGEDWxV6pJvvAXJ230TaIck4MvgUWQXYDYyBAcWg3d2EDf3oex1c771liPJxyhK+t/4ZJaALiNMZRAYvMivYfR/xQLmaJ4D9kOI442QBl2pMZggD164YjMnqgnA5fBHX8vZrKy4/pJgywD9py4m5zVVSNw9UJyAT4OL/9Gy7X2uUexRn0FzcmnOPzB3rdysz0WPQSqNFZj8Mp9fPjZzCtvOa1Kbdb+v9Yd3M1tsmyqv/rB7s894pT+hN9ezuZrmc3vXjs5W1PFs+1JzB8j68ROagcn7az55bz0PnOnNJOxmXIZ66t3PqhUsxX7DeWecXrQfs1e4/PQ7OZt5pZ3iJO061E0Z4JCr2qhdfvXbaaffP68vQu8blY3c1Y/a0Ow7As+v1B2B00Hlwnp6ez3uB92sZxlM+7Ld7F5f3vePjEaa48Z7Tdg67xkIShtnoCbAolmo8wkDryX4h8bW8KAuJjHHu6s+URnEBVOhNtUtJi59JASKRL5u5XjuW41atdrfneo5Tscqdttey5T+vUrd6XqteaNCaxR7FTkrHRMVSKruen68J4sTnQCNgxiLN8BS4/gVigATSQnojX46UcrhNpYq3gqDuuVbgWNWu3e7ZnV7NrXRbbq1dDWq26+naZSoGdMBaYwFsV8GrOwp+A5jMCCiZV3PO5aBzIUsyR4tMxFZpgUoUMnkQMKXFvl2puyYnySwGRdhM0iiLoTSbzvICmXz9axsI89xKOJ6lTKDYyl/DT7Pcf1YURPpERDlwlVIbZFPhwInkFPl8nre3nXcB38oiot42WV3BCF4z2X30PjRqWjYTs0kMc6vgvtnyQ4gDAOYX/Mz90mziRQuyFb04ZeXBIWWlWfR3jkrzUrZYZHlHa0oymYQ3pXJa5hBwJnXv5TZ9BmpuIMxvHTsb1nuRN/ZdfpmY0qFAAhI5f1q+/MadYwhc3TlC+f6svnuh2Qkp6yZgJQ7ZOrG8mijGX95esI+VnzRfyZ9lyqL3dh3A2ooj85QXDUHoRK3UAfPyyWzgVMISqYgp2wY/BHAo+K5xU+QNFyGnaZQJ+PyJpqSuoSOM04yKMNBzw7b85jzFywz8d6cPMLnEv53ZK/7pmf2nfzGUQpggfeNL/u5skHxcMOjqapBzaegreQWVwelkS+7fCG4rvt2xXbfrBH9T/N1Mmh/MHy1bNd1/H5r/AQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0823431388237023806</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0823431388237023806</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823381388237018225</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823411388237021396</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0823431388237023806</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EC25775DF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>4F259B1EF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>413581BEF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56491c9a-a157-45c9-896c-631d06377629</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true" id="55286ce4-495b-4543-b78b-c9680d7e9b6b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Adult BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ecb894c9-ae61-472f-a249-99614f8686d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E57B3BA0CE0401F0A05991749:13A83F66"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0823521388237032669</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>73354D5FF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:73354D5FF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:73354D5FF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>2435A27FF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>8635D84006933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">88359ED006933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:2435A27FF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:8635D84006933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:88359ED006933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6LT/eiUXpG2I8xwUenZim7By/ByJqarEGnT0qSA/PqTFIvARreeGWcwqyvf+tYlX3LGUBJbfpsxyDlJqRL0muq/keF4Btiu5j67juYYhqV5EEUaGBF4DdOsW6fPqhIwVkBAGUeUN1XLMG3NtDTLHZm2b9m+06g1Tq2xqjxAzgS0cKkZqrJKYsr8MmxTLXLqp4gR5lOUAPM59oft6ytfePqo4qS2zjYsy4B5a8p55us6roWAIY5xDaeJfqbv+ZyFzB+SCUW8yOEtZsia6tve5XJZW9q1NJ/olmEYuuHpwidkZPJTbf2oNkMY0CjdrLuIppRgFJM1kqSugU/TUGnHkzQnfJp8AG3qpiGhNVhhDZsO/anq7wFKdl9E2iOZM6SxKTIrsDuIIAeKQbm/C5rqz691cLN3lCPKojRP2MH6e5SALiBOMwg1VmVWsfs64pFytc4A+wHFccHIAgZyTDKEgSm3OURkdUWYGL6QKWX7lRUTf6SaMsDfacuZvstVUNePVKdHJsD4/+nZbr82KA8oLqD12Ce4YcWjfhwkVwY3uvE8m4yn573+sllS2HXekNq2+219OKzb2XrbNM/OXWKO6Xxp60//3Ljt2+5sGY+MX9d2Pyb3D1crsl6vZ8i86D6tZ40xmQVpz7yfrFEnoYSRftY+uYz5oj/u0B/OqzO4zHk6ss9Pbpf5rMPmd/rDMo2eXOvlGReuMXg5mY+jx8vB4rQRLQyE7ua/p0Hnxbh5sK5vzwf9+9n4MXpdrE9+dO3BQ+a9XBW/eF8PL9H6t9N8z2k3h31jJQnD4vkFMK+WcjyCnnIh+oX45/IiLSTUotLVz6RGMQ6Uqy25S0qLXwgBIqEvmrlZW45db1uNi4u6Z9uOaXQ7XtsS/3mOa154bbfSoA2LA4rdlEZExpIqu5mfzwnixGdAQ8i1RVrgKTD1E8Qe4kgJ6J04HCllMEqFivc6RqfteYbl1o3zXq9reudOwzLsrtU5Pe16rqoMUn5Db/J2xCHfV/DTPQW/A0wyAlLm5ZwzMeiMi5LM0aLgsVlboBqFQlwEudRiUSe3rjOSZDFIwnqShkUMtWyalQXS2ebX0hBmpZUwnKU5R7FZHsMPszz8VhVE+IREOjCZUgdEU+HIjWRX+Xyct7ebdwXfLkIiT5uoLs8J3jDZ//Q+NHJathOzTQwzs+K+3fJNiCMA+if89MPSbOOFC7ITvbplxcUhZKVV9XeOavNasVgUZUcbUjJzAa8L5TT1IeBC6N7rKJ0B1bcQ+peunS3rg8hb+z6/gk/pkCMOiZg/pVx+4c0xBCbfHIE4P6uvPmj2Qoq6cVjxY7ZuLJ4mkvGnrxfsY+knzLfiZ5nm4Xu7jmDtxBF5iocGJ3QiV/KCef1gNnAqYIlQxDTfBT8GcCz4vnFb5C0XLqbpueDw8RdFSl1TRRinBeVBTy0Nu/Jb8uSvGfjvTn/AlBL/dmev2Id39tP11VAIYYLUrS/5u7NGynHBoMqnQcmlqa7EE1QEp5MduX8juKv4DduuO736XxV/P5PWH+Y/LTs1PTwPrf8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6LT/eiUXpG2I8xwUenZim7By/ByJqarEGnT0qSA/PqTFIvARreeGWcwqyvf+tYlX3LGUBJbfpsxyDlJqRL0muq/keF4Btiu5j67juYYhqV5EEUaGBF4DdOsW6fPqhIwVkBAGUeUN1XLMG3NtDTLHZm2b9m+06g1Tq2xqjxAzgS0cKkZqrJKYsr8MmxTLXLqp4gR5lOUAPM59oft6ytfePqo4qS2zjYsy4B5a8p55us6roWAIY5xDaeJfqbv+ZyFzB+SCUW8yOEtZsia6tve5XJZW9q1NJ/olmEYuuHpwidkZPJTbf2oNkMY0CjdrLuIppRgFJM1kqSugU/TUGnHkzQnfJp8AG3qpiGhNVhhDZsO/anq7wFKdl9E2iOZM6SxKTIrsDuIIAeKQbm/C5rqz691cLN3lCPKojRP2MH6e5SALiBOMwg1VmVWsfs64pFytc4A+wHFccHIAgZyTDKEgSm3OURkdUWYGL6QKWX7lRUTf6SaMsDfacuZvstVUNePVKdHJsD4/+nZbr82KA8oLqD12Ce4YcWjfhwkVwY3uvE8m4yn573+sllS2HXekNq2+219OKzb2XrbNM/OXWKO6Xxp60//3Ljt2+5sGY+MX9d2Pyb3D1crsl6vZ8i86D6tZ40xmQVpz7yfrFEnoYSRftY+uYz5oj/u0B/OqzO4zHk6ss9Pbpf5rMPmd/rDMo2eXOvlGReuMXg5mY+jx8vB4rQRLQyE7ua/p0Hnxbh5sK5vzwf9+9n4MXpdrE9+dO3BQ+a9XBW/eF8PL9H6t9N8z2k3h31jJQnD4vkFMK+WcjyCnnIh+oX45/IiLSTUotLVz6RGMQ6Uqy25S0qLXwgBIqEvmrlZW45db1uNi4u6Z9uOaXQ7XtsS/3mOa154bbfSoA2LA4rdlEZExpIqu5mfzwnixGdAQ8i1RVrgKTD1E8Qe4kgJ6J04HCllMEqFivc6RqfteYbl1o3zXq9reudOwzLsrtU5Pe16rqoMUn5Db/J2xCHfV/DTPQW/A0wyAlLm5ZwzMeiMi5LM0aLgsVlboBqFQlwEudRiUSe3rjOSZDFIwnqShkUMtWyalQXS2ebX0hBmpZUwnKU5R7FZHsMPszz8VhVE+IREOjCZUgdEU+HIjWRX+Xyct7ebdwXfLkIiT5uoLs8J3jDZ//Q+NHJathOzTQwzs+K+3fJNiCMA+if89MPSbOOFC7ITvbplxcUhZKVV9XeOavNasVgUZUcbUjJzAa8L5TT1IeBC6N7rKJ0B1bcQ+peunS3rg8hb+z6/gk/pkCMOiZg/pVx+4c0xBCbfHIE4P6uvPmj2Qoq6cVjxY7ZuLJ4mkvGnrxfsY+knzLfiZ5nm4Xu7jmDtxBF5iocGJ3QiV/KCef1gNnAqYIlQxDTfBT8GcCz4vnFb5C0XLqbpueDw8RdFSl1TRRinBeVBTy0Nu/Jb8uSvGfjvTn/AlBL/dmev2Id39tP11VAIYYLUrS/5u7NGynHBoMqnQcmlqa7EE1QEp5MduX8juKv4DduuO736XxV/P5PWH+Y/LTs1PTwPrf8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpYxWcK5cIkLgMZ+iBnhYo0+FlZBxD3JM4EDvh8vVjB0KBUoaOVIl6Z3vttS9edpXBMDDdBmM45iSiSrddU/8p21Or7JmeppdKlmZj3dAq01JFK1mwbNiWYRrIUpUuYwnuUsYh5TXV1A1LM0zNLI8MyzUt1zEKZsWeqMoYx0xAC5eCrirrMKDMzcLW1CSmbgQZYS6FIWYuR+6w0e+5wtOFOSe1Xt2xzALGdZ/zhQsAKngY4SBABRSFoApOfKoec4dkTiFPYryP6bGaut+7Wq0KK6sQxXNg6roO9AoQPh4j83u1fpdvxl6XzqLdugVpRAmCAdlCSaqPuR95SiOYRzHhfvgFtAEMXUJreI00ZNj0XgUfATJ2NyKdkIwZ1JgPjRxsgGc4xhRh5XXQran3t3Vwt3cUQ8pmURyys/X3KGGa4iBaYE9jeWY5u9sRL5SrXsXI7VIUJIyk+EmOyQIizJTnGM/IukeYGD6PKVn7lTUTfySfMoy+05YqOOYqqIML1WmTOWb8//TsuF87lDEMElxPkpa1Xb60t7OncWPhPDrNOQrnQ/qyQbWMwrHzjtSh3fv1+bAeZmu/aePMfnQC4zdzSo0kxOZ0bYCm15iMQVrspdPnH1O/DP23cN362Q96pvcKHmfxcvsQvvcm43i1SLqvj743bqyawLwjPv8bpTMb0cpDcVX0fNC3f4ZJOl3pUSn9649uQrjjvAzfJtuHif1cnBnPjfY7eVkS29/Q39uwg8yQoD/LQRDcTVYcvfTpYD4aDfpFazX05rWPnI5zODXmkjBMpu8Y8Xwpx6PbVjqiX5BflxdpIZ42y1zdhdQoxjHlal3uktLiJkKAiOeKZu7W5aLltMu2rhcrlmUbeqtZaZjiv4pdNjqVRjnXoB2LM4qtiM6IjCVVdjc/1wmi0GWYejjW0ihBPmbqFcQ25FDp0oE4HBFleBQJFa+Um7Zd7FilUtMxOi3T6ehN02gWK82mbbYsQ1WeIv6L/oobM47jUwUvnij4ACOyIFjKvJxzJgadcVGSJUwTHhiFFBYoTsRFEEstdk277ABGwkWAJWEQRl4S4MLCX2QFAmz3a2oQscxKGFpEMYeBkR3DL7M8/5YXRPh4RDowmVITi6biCzeSnefzdd6V47xz+EbiEXnaRHV5TNCOyemnj6GR03KYmENiiBk598OWb0JcAABX+IHz0hzieSk5ip7fsuLiELJSz/u7hIVlIUnTJOtoSUpmLOCBUE4DDDFKhO5tRtFvTMEBAtx07RxYn0U+2E/5JdynQw45DsX8KdnyhjfHEDP55uiK87O+9UFzElLUjeM1v2RrBeJpIhlffb0gF0k/YX4WP6so9j7adQHrKI7IUzw0OKFzuZIXzOaL2UCRgCVCEaP4GPwSwKXgp8ZDkQ9cuJimacLx118UKXU1FSIUJZR322pmOJbfjCffLLD74fQJJpP4/Z29Zl/e2W/93lAIYQjVgy/5b2eNZOOCsCqfBhmXmroWT1ARnM6P5H5P8FjxS5bl2G2n03GuK/5pJvVP5s+Wo5qen4f6vw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlFsO8IMtqBcFVzw5eqXOyE9QHbbpDYp4v76mxSLwKJX74wzmNOT5zznJU9ywlGWOmGXcygEYVQbxG39H9f2bctxPcNBycxo2nBs+ABNw7VR4tlJgBPs69qA8xIGlAtERVt3LNs1bMdw/BvbDR039NxG4DiPunYHBZfQ0qVh6doqSykPq7BtvSxoyBAnPKQoAx4KHE66V5eh9AxRzUnvnKxZVgGLzkKIPDRN3EgAQ5riBmaZeWLu+JwkPJyQOUWiLOA1ZsLb+uve5+fnxrPbYMXcdCzLMq3AlD4JJ/PveudbvRmSAZ2x9TpClFGCUUp+I0XqCsSCJVo3nbOCiEX2DrRt2paCNmCFDWw36XfdfAtQsfsk0g7JgiODL5Bdg41hBgVQDNrteNDWv3+ug+u9NwWifMaKjO+tv0YJ6BJSlkNi8Dqzmt3nEQ+Uq3MCOBxQnJacLGGoxiRHGLh2XcCMrC4Jl8OXcK1qv7bi8o/UUwb4K205Mbe5SurmgerEZA5c/J+ebfdrjXKH0hI6MHSc08Aapq0pfxwOx2mv+TBKzeHTOWtXFLad16Q27X5d7w/rZrZeNz01H4nIH5eRHV1Nf/Tx2XTRneejyT3qLf6CPIgmxfVsnNosEjf86Kx17rw8XGeCLZfnT+zstt+bH92dXlzg3w+t6NvFw+X0OL6crrrHyzt2ezTyeteZ2+oV1sNwMFjFcTb/4QVZ79abL6/yc3CQNe26Z8VZcnvfLNzU6xejy+ZRa5Zh8m2U//x5fxdH6G6YP45/xQ+38/ZbTts57BprSZiU05+ARb1U4zGItb7sFxIfy4uykMSYVa5hrjSKC6BC76hdSlrCUgoQSULZzPXa910v6MWW1Qpct2lb0WnQdeR/QdO3+0HXrzVozWKPYsTojKhYSmXX8/MxQZyFHGgChbFkJV4A1z9AjJFA2oCO5eFglMMNkyrue/2o5wdObLneac/px7YX+ZHVcmK/ZUVOoGtDJkZ0VHRnAopdBW/tKPgYMMkJKJlXc87loHMhS/KElqVI7cYSNSiU8iIolBaHTtP3TE6yPAVF2MxYUqbQyBd5VSCTr38dA2FeWQnHOSsESu3qGL6b5f63uiDSJyHKgauUTkE2FQ7cSM06n/fzDrbzruG7ZULUaZPVFQXBaya7n96GRk3LZmI2iWFu19w3W74IcQDA/ICfuV+aTbxkSbai17esvDikrHTq/j6hxlOjXC7LqqPHSjILCW9K5bTNCeBS6t7LDfsF1NxAmJ+6djas9yJv7Lv8SrGgE4EEZHL+tGr5iTfHBLh6cwzk+Vl99kGzE1LWTcBKHLJFqXyaKMYfvl5wiJWfNF/Ln2dWJG/tOoC1FUfmKR8agtC5WqkL5uWd2cBMwhKpiKzYBj8EcCj4rnFT5A0XIadpWgp4/4umpK6tI4xZScUg1ivDtvxWPMVLDuGb0x8wlcS/3tkr/u6d/ffV5UQKYYb0jS/5b2eDVOOCQVdPg4pLW1/JJ6gMTudbcv9KcFvxj13Xa8Zev+99rPi7mXT+MP9p2arp/nno/As=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0823521388237032669</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0823521388237032669</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823461388237026930</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823501388237030331</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0823521388237032669</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>3435B27FF5933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>9635E84006933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>9835AED006933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ecb894c9-ae61-472f-a249-99614f8686d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true" id="b84c42ac-dbb6-41bb-a56e-f99656cbf7bf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="afdda972-24e0-4276-b0d1-143c8ca932f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E57C4BA0CE0401F0A05991749:13C0C4DD"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082421388237042051</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>CA35578106933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:CA35578106933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:CA35578106933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>7B3528A106933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>DD35BA7206933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1045252306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:7B3528A106933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:DD35BA7206933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:1045252306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZbuo6FH3vV6D08ShkZEhUkFIo59KJlkCnlyvX2YB7Extih6Fff+zQUKC0p71SJeqd7bXXHrzsE46S2PYDziEVhNFSt93Q/h1Vo/rIdE29ElmO7jrPnv5ct129ghxzVImqYDumVupynkGXcoGoaGi2KV0tW7frA8vxbcev1MpmzX3SSneQcgktXcpy1zKJKffzsA0tS6nPECfcpygB7gvsh8HVpS89fVRw0pona5Z5wLQ5EWLqGwYuR4AhjnEZs8Q4MXZ8TiLuh2RMkchSeIsZ8Yb2tnexWJQXTpmlY8M2TdMwPUP6RJyMj7XmUbEZoi4dsfW6hSijBKOYvCJF6grEhEWlIB6zlIhJ8gm0ZVimgtZhiXVsufRYM94D5Oy+ibRDMuVI5xNkFWB9GEEKFENp2O82tOPvdXC9d5AiykcsTfje+meUgM4hZlOIdF5kVrD7PuKBcjVPAPtdiuOMkzlcqzGZIgy8dJPCiCwvCZfDF/FS3v7Skss/UkwZ4J+05cTY5iqpGweq0yZj4OL/9Gy7X2uUOxRn0Jz1Bjfhw9J56ruP/Y5tQegMg/FMgDds5BS2ndekNu1+W+8P62a23jY9hT0e3A/vwwmZ9HvzevLCxDCzrv753aNsIQL0lHj2+eo2XMxSunBYNFstKxdjs2o8Vzutx9FiOb8Qs1OErhado2CxerlGg1din994XnQb/Xp5Oj2fD0YV4qaDMal1ghW/dG+HD1ev5xfVx8r8EqPsoV3N+vdhe3r2+76dkaDauWsNLo965Pxsej+EX/WbzuqOe8P7euM9p+0cdo2FJITZ8wtgUSzVeHTbpY7sFxJfy4uykEgf5a7+VGkUF0CF1lS7lLT4mRQgEvmymet17dSp2PXAMque47iW2Tr1Alv+57l1q+MF9UKD1iz2KLYYHREVS6nsen6+JogTnwONINXnLMMT4NoXiG0kUKlL+/JwMMphwKSKe7XameO2Lbcq6XUqVtutB0FHtue0VWt5rtTiayZ6tJcGIwHproJXdxS8D5hMCSiZV3PO5aBzIUsyQ/NMxFZ5jsoUMnkRpEqLfdutVwxOkmkMirCRsCiLoTydTPMCGXz9a+sI89xKOJ6yVKDYyo/hp1nufysKIn0iohy4SukUZFPhwI3kFvl8nre3nXcBH2QRUadNVlekBK+Z7H56Hxo1LZuJ2SSGuVVw32z5IcQBAOMLfsZ+aTbxojnZil7csvLikLLSLPo7Q+VZOZvPs7yjNSWZqYQ3pHJaRgg4k7q3GrD/gBobCONb186G9V7kjX2XXyYmNBRIQCLnr5Qvv/HmCIGrN0dXnp/ldx80OyFl3QQsxSFbK5ZPE8X4y9cL9rHyk+Yb+bNgafTergNYW3FknvKhIQgdq5W6YFafzAZmEpZIRWTpNvghgEPBd42bIm+4CDlNz5mAz7+UlNQ1NIQxy6jotrXcsC2/OU+xmoL/7vQBJpf4tzt7yT+9sx+uLkMphAnSNr7k7846yccFg6aeBjmXhraUT1AZnI635P6N4LbitwKnUqnV/6r4u5k0P5g/WrZqun8emn8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZbuo6FH3vV6D08ShkZEhUkFIo59KJlkCnlyvX2YB7Extih6Fff+zQUKC0p71SJeqd7bXXHrzsE46S2PYDziEVhNFSt93Q/h1Vo/rIdE29ElmO7jrPnv5ct129ghxzVImqYDumVupynkGXcoGoaGi2KV0tW7frA8vxbcev1MpmzX3SSneQcgktXcpy1zKJKffzsA0tS6nPECfcpygB7gvsh8HVpS89fVRw0pona5Z5wLQ5EWLqGwYuR4AhjnEZs8Q4MXZ8TiLuh2RMkchSeIsZ8Yb2tnexWJQXTpmlY8M2TdMwPUP6RJyMj7XmUbEZoi4dsfW6hSijBKOYvCJF6grEhEWlIB6zlIhJ8gm0ZVimgtZhiXVsufRYM94D5Oy+ibRDMuVI5xNkFWB9GEEKFENp2O82tOPvdXC9d5AiykcsTfje+meUgM4hZlOIdF5kVrD7PuKBcjVPAPtdiuOMkzlcqzGZIgy8dJPCiCwvCZfDF/FS3v7Skss/UkwZ4J+05cTY5iqpGweq0yZj4OL/9Gy7X2uUOxRn0Jz1Bjfhw9J56ruP/Y5tQegMg/FMgDds5BS2ndekNu1+W+8P62a23jY9hT0e3A/vwwmZ9HvzevLCxDCzrv753aNsIQL0lHj2+eo2XMxSunBYNFstKxdjs2o8Vzutx9FiOb8Qs1OErhado2CxerlGg1din994XnQb/Xp5Oj2fD0YV4qaDMal1ghW/dG+HD1ev5xfVx8r8EqPsoV3N+vdhe3r2+76dkaDauWsNLo965Pxsej+EX/WbzuqOe8P7euM9p+0cdo2FJITZ8wtgUSzVeHTbpY7sFxJfy4uykEgf5a7+VGkUF0CF1lS7lLT4mRQgEvmymet17dSp2PXAMque47iW2Tr1Alv+57l1q+MF9UKD1iz2KLYYHREVS6nsen6+JogTnwONINXnLMMT4NoXiG0kUKlL+/JwMMphwKSKe7XameO2Lbcq6XUqVtutB0FHtue0VWt5rtTiayZ6tJcGIwHproJXdxS8D5hMCSiZV3PO5aBzIUsyQ/NMxFZ5jsoUMnkRpEqLfdutVwxOkmkMirCRsCiLoTydTPMCGXz9a+sI89xKOJ6yVKDYyo/hp1nufysKIn0iohy4SukUZFPhwI3kFvl8nre3nXcBH2QRUadNVlekBK+Z7H56Hxo1LZuJ2SSGuVVw32z5IcQBAOMLfsZ+aTbxojnZil7csvLikLLSLPo7Q+VZOZvPs7yjNSWZqYQ3pHJaRgg4k7q3GrD/gBobCONb186G9V7kjX2XXyYmNBRIQCLnr5Qvv/HmCIGrN0dXnp/ldx80OyFl3QQsxSFbK5ZPE8X4y9cL9rHyk+Yb+bNgafTergNYW3FknvKhIQgdq5W6YFafzAZmEpZIRWTpNvghgEPBd42bIm+4CDlNz5mAz7+UlNQ1NIQxy6jotrXcsC2/OU+xmoL/7vQBJpf4tzt7yT+9sx+uLkMphAnSNr7k7846yccFg6aeBjmXhraUT1AZnI635P6N4LbitwKnUqnV/6r4u5k0P5g/WrZqun8emn8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o8FH0/v6JTH53SK0g7wEylovV6BHXUl29CmpYcSlKaFIu//iTFIiB69JtxBrO7s/bal6ykw8AstTyfMZRzTIkSBl31P7sVN10rBpoTWbHmuEasuW2jqVlN6NgItmKzfaQqIWMFCgnjgPCuahmmrZmWZrXvTNuzHM8wGu2286wqDyhnAlq4NAxVKWcpYV4VtqsWOfEoYJh5BMwQ8zj0Rv7VpSc8PVBzUnudFcsqYN6bcJ55ug4bEYIoTWED0pne0bd8OhHzRjghgBc5eosZsa76tvfl5aXxYjdonuiWYRi64erCJ2I4OVB7v+rNKApJTFfrPiCUYAhS/AokqSvEJzRS/DShOeaT2SfQpm4aElpDJdSg6ZADVX8PULH7JtIWyZwBjU2AWYMNUYxyRCBS7odhVz34XgdXe+9yQFhM8xnbWf+MEiILlNIMRRqrM6vZfR9xT7l6HQS9kMC0YHiBruWYZAAipvzOUYzLS8zE8EVMqdqvlEz84XrKEPxJWzr6JldBXd9TnQAniPH/07PNfq1QHkBaoN6jniXp4vqS46w/se+bJ4ZDszI5xzHrVhQ2nVek1u1+W+8O63q23jbFt87pH4tdJPfXiwA/Tv3jefyYHA6cJckercXdTXFoF2dPlu5Mbud+y3QxfX56pqfn7Qe6LJyoLE0/em5Gr5fhw6/EmpaH2TQk1vTuLJm742FIz6fxSbq4Pc3vb9Mrk10MRk/92cUY9INk6rAlgGOMbPA07B+OB2cPTy19FGRHY45+kfv7k2UYkcPm4RIOXstHftt9z2kzh21jLQmjYvwHQV4v5XiEgTIQ/QL8a3mRFhxpceXqZVKjGEeEqz25S0qLVwgBwpEnmrlaB4HdPPaPLKPl2rZjGv1j17fEf67TNgeu3641aMVih2KfkhjLWFJlV/PzNUE48xgiEcq1BS3gBDH1C8QAcKCEZCgOByUM3VGh4v2BEdiuZZoDf+C7dtvsm+2W7x77wXEz8FsnqnJN+Q25yf2Yo3xbwVtbCj5EEGcYSZmXc87EoDMuSjIHi4KnZmMBGgQV4iLIpRaLre2mzvAsS5EkrM9oVKSokU2yqkA6W/1aGoCssmIGM5pzkJrVMfw0y91vdUGET4SlA5MpHSPRVPThRrK9Zp3P53m7m3nX8H4RYXnaRHV5juGKyfan96GR07KemHVikJk19/WWH0LsAdC/4KfvlmYdL1rgjej1LSsuDiErvbq/c9CYN4rFoqg6eiQlMxfwulBOUx8hWAjdW97RKSL6GkL/1rWzZr0TeW3f5lfwCRlxwNFMzJ9SLb/x5hghJt8coTg/5XcfNFshRd04Kvk+Wz8VTxPJ+MvXC/Sg9BPm3+LnhebRe7v2YG3EEXmKhwbHJJErecEsP5kNSAUsFopI803wfQD7gm8b10Vec+FimsYFR59/UaTUdVUAIS0IDwO1MmzKb8WTLzPkvTt9gKkk/u3OLtmnd/bj1eVICOEMqGtf/G9nDVfjApEqnwYVl65aiieoCE6SDbl/I7ip+H3fbjaP2ua/FH87k94H80fLRk13z0PvLw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH0/v6JTH53SpoVSOsJMATn2HhUOoEd9uRPSAJGSlCblw19/k2IRED16Z5zB7O6svfZHVnLB4Ty2/YBznArCqBa26/q/I88rg5HrGpYFK0YZe8DwnFFkgBGwy9Bxvarn6lrIeYZDygWkoq7bFnAMYBu2NwSOb5d9yymVbfCka/c45RJaupQsXVvPY8r9PGxdz1LqM8gJ9ymcY+4L5A+Cm2tfevqw4KQ3LrYs84BpYypE4psmKkUY4ThGJcTm5oV54HMRcX9AJhSKLMWvMSNe11/3rlar0sopsXRi2pZlmVbNlD4RJ5MzvfGj2IyjkI7Zdt2ClFGCYExeoCJ1g8WURVoQT1hKxHT+ATQwgaWgDbxGBgJleqabbwFydl9EOiCZcmjwKQQFWB+PcYopwtpdP6zrZ1/r4HbvMIWUj1k650fr71HCdIljluDI4EVmBbuvI54oV+MCIz+kKM44WeJbNSYJRJhrvRSPyfqacDl8Edfy9mtrLv9IMWUYfactF+Y+V0ndPFGdNplgLv5Pz/b7tUW5h3GGG3fpquPFrnCdbvVP+Fgb4yQGz4KGG1bPKew7b0nt2v26Ph7W3Wy9boLPD8N29Kt9/WgPf8+WI/I0+9Wl/4yb1iS5RMEdHbcXm+rNrHXVsQh/qW5ox/7d6/azp+qkWgHnfTZ03c3VerR4nPyY/QwXeNCemlWGJk+DaFO2XHB3zzcTN+s1oeUOHpPq7fn9YkYfKr1e7457oyq3huWRO6h5w6uVWPXcO7fPgvPuj37t5Y93uXSq3mZqjX8+ta9W9bec9nM4NBaSMMhGzxiJYqnGI2xrHdkvKD6XF2UhkTHOXf1EaRQXmAq9oXYpafEzKUAk8mUzt2tglSt2xXYst+Y4ZWC1mrXAlv/Vyh7o1AKv0KAtiyOKLUbHRMVSKrudn88JornPMY1waixZhqaY658gtqGAWkj78nAwyvGQSRV3Xbdy6bVdxw1A0wKtTtO1ak7lsta5DDwbBLp2y0SXdtNgLHB6qODugYL3MSIJwUrm1ZxzOehcyJIs4DITMSgtYYniTF4EqdJiudWrmJzMkxgrwuacRVmMS8k0yQtk8u2vbUDEcyvhKGGpgDHIj+GHWR5/KwoifSKiHLhKqYllU/G7G8nxK0U+H+dd28+7gA+yiKjTJqsrUoK2TA4/vQ2NmpbdxOwSQxwU3HdbvglxAsD8hJ95XJpdvGhJ9qIXt6y8OKSsNIr+LmBpUcqWyyzvaFVJZirhTamcwBxglEnd2wzZDFNzB2F+6drZsT6KvLMf8svElA4EFHgu50/Ll194cwwwV2+OUJ6f9VcfNAchZd0EXotTtlYsnyaK8aevF+Qj5SfNPfmzYmn01q4TWHtxZJ7yoSEInaiVumA2H8wGYhKWSEVk6T74KYBTwQ+NuyLvuAg5TaNM4I+/aErq6jpEiGVUhG09N+zLb85TbBLsvzm9g8kl/vXOXvMP7+yHm+uBFMI51He+5O/OBsnHBWFdPQ1yLnV9LZ+gMjid7Mn9K8F9xW8FTqVS9cDfFP8wk8Y783vLXk2Pz0PjPw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082421388237042051</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082421388237042051</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0823551388237035918</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0823591388237039228</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_082421388237042051</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>8B3558A106933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>ED35DA7206933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>2045452306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afdda972-24e0-4276-b0d1-143c8ca932f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true" id="beea9b80-daac-4c3f-87f0-2dab2a413362"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Youth BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - Youth BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="88f49054-754c-4752-9b1a-9038714352dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60717D2E54D6256E0401F0A059907AB</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE9854789A043A46E0401F0A079931FF:85C6F10F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0824101388237050451</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>5245EED306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:5245EED306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:5245EED306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0345FDF306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>6545CF9406933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A745E43506933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0345FDF306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:6545CF9406933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:A745E43506933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1N65dKOMAMUzkHxBt6OL9+EdEOjJa1NStFff5JiERA9+s04g9ndWXvtS1ZyzNA8srw2Y5ByElNl4DfV/wwMDaeOLc22rJrm2HVXQ9iwNHdamwaWEWCnPlGVAWMZDCjjiPKmahmmrZmWZjWuTduzHM+oVWp240FVbiFlAlq4VAxVWc4jyrwibFPNUurFiBHmUTQH5nHsjdtnQ094eqjkpLaOVyyLgGkr5DzxdB1XAsAQRbiC47l+rG/5HAfMG5MZRTxL4S1mwJrq2948zyu5XYnTmW4ZhqEbri58AkZmh2rroNwMwYBO49W6i2hMCUYReUWS1BnwMA6UdjSLU8LD+SfQpm4aElqDJdaw6dBDVX8PULD7JtIWyZQhjYXILMFGMIUUKAblZjRoqoff6+Bq73WKKJvG6ZztrH9GCegCojiBQGNlZiW77yPuKVfrGLA3oDjKGFnAuRyTBGFgymUKU7IcEiaGL2BK0X5lycQfKacM8E/acqxvchXU9T3V8ckMGP8/Pdvs1wrlFkUZtPRs+JC4g55utru3Z/mvK5z33MX5bXbBmgWFTecVqXW739a7w7qerbdNYd0BkqVHr5dubp8tbl57DePu9+kIwdgP+icdjGb1Dr2qDi4eJkehabsd48rldDm/geHLw+hRHPHJOJ25j8vf3YMQP8zo0zRp5Cfs9Nzxr2nnzjxP0sWwdxL6t8u8nmfhSe67l6e3naPJhC1Ouu0/v/Ir9Me+PzWfhtZNdkF65sv50jyI2w3j9PW+MwqreYPfPfSqTvM9p80cto2lJIyzySNgXi7leAx8pS/6hfjX8iItJNCmhauXSI1iHChXW3KXlBYvEwJEAk80c7U2bKfa9/u2UXNt2zGNbsdtW+I/12mYfbfdKDVoxWKHYjemUyJjSZVdzc/XBPHcY0ADSLVFnOEQmPoFoo84UgZ0JA5HTBlcx0LFOx3L7DlVv1Zzu6bf6/ethmnYvWrb8o1Ot1FVlfOYX9CLtD3lkG4reG1LwUeASUJAyryccyYGnXFRkme0yHhkVhaoQiETU5JKLRZbG1WdkXkSgSSsz+Mgi6CShElRIJ2tfi0hSaywEoaTOOUoMotj+GmWu9/KggifgEgHJlPqgGgqfLiRbK9a5vN53u5m3iV8OwuIPG2iujwleMVk+9P70MhpWU/MOjHMzJL7essPIfYA6F/w03dLs44XLMhG9PKWFReHkJVW2d9nVHmuZItFVnS0LiUzFfC6UE5THwPOhO69XMdPQPU1hP6ta2fNeify2r7NL+MhHXPEYS7mTymW33hzjIHJN8dAnJ/ldx80WyFF3Tgs+T5bNxJPE8n4y9cL9rD0E+ZL8ZPHafDerj1YG3FEnuKhwQmdyZW8YF4+mQ0cC1giFDFON8H3AewLvm1cF3nNhYtpmmQcPv+iSKlrqgjjOKN84KuFYVN+C578JQHv3ekDTCHxb3f2kn16Z9+fDcdCCOdIXfuSfztrpBgXDKp8GhRcmupSPEFFcDrbkPs3gpuKX7Wcaq/n/1PxtzNpfTB/tGzUdPc8tP4C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1N65dKOMAMUzkHxBt6OL9+EdEOjJa1NStFff5JiERA9+s04g9ndWXvtS1ZyzNA8srw2Y5ByElNl4DfV/wwMDaeOLc22rJrm2HVXQ9iwNHdamwaWEWCnPlGVAWMZDCjjiPKmahmmrZmWZjWuTduzHM+oVWp240FVbiFlAlq4VAxVWc4jyrwibFPNUurFiBHmUTQH5nHsjdtnQ094eqjkpLaOVyyLgGkr5DzxdB1XAsAQRbiC47l+rG/5HAfMG5MZRTxL4S1mwJrq2948zyu5XYnTmW4ZhqEbri58AkZmh2rroNwMwYBO49W6i2hMCUYReUWS1BnwMA6UdjSLU8LD+SfQpm4aElqDJdaw6dBDVX8PULD7JtIWyZQhjYXILMFGMIUUKAblZjRoqoff6+Bq73WKKJvG6ZztrH9GCegCojiBQGNlZiW77yPuKVfrGLA3oDjKGFnAuRyTBGFgymUKU7IcEiaGL2BK0X5lycQfKacM8E/acqxvchXU9T3V8ckMGP8/Pdvs1wrlFkUZtPRs+JC4g55utru3Z/mvK5z33MX5bXbBmgWFTecVqXW739a7w7qerbdNYd0BkqVHr5dubp8tbl57DePu9+kIwdgP+icdjGb1Dr2qDi4eJkehabsd48rldDm/geHLw+hRHPHJOJ25j8vf3YMQP8zo0zRp5Cfs9Nzxr2nnzjxP0sWwdxL6t8u8nmfhSe67l6e3naPJhC1Ouu0/v/Ir9Me+PzWfhtZNdkF65sv50jyI2w3j9PW+MwqreYPfPfSqTvM9p80cto2lJIyzySNgXi7leAx8pS/6hfjX8iItJNCmhauXSI1iHChXW3KXlBYvEwJEAk80c7U2bKfa9/u2UXNt2zGNbsdtW+I/12mYfbfdKDVoxWKHYjemUyJjSZVdzc/XBPHcY0ADSLVFnOEQmPoFoo84UgZ0JA5HTBlcx0LFOx3L7DlVv1Zzu6bf6/ethmnYvWrb8o1Ot1FVlfOYX9CLtD3lkG4reG1LwUeASUJAyryccyYGnXFRkme0yHhkVhaoQiETU5JKLRZbG1WdkXkSgSSsz+Mgi6CShElRIJ2tfi0hSaywEoaTOOUoMotj+GmWu9/KggifgEgHJlPqgGgqfLiRbK9a5vN53u5m3iV8OwuIPG2iujwleMVk+9P70MhpWU/MOjHMzJL7essPIfYA6F/w03dLs44XLMhG9PKWFReHkJVW2d9nVHmuZItFVnS0LiUzFfC6UE5THwPOhO69XMdPQPU1hP6ta2fNeify2r7NL+MhHXPEYS7mTymW33hzjIHJN8dAnJ/ldx80WyFF3Tgs+T5bNxJPE8n4y9cL9rD0E+ZL8ZPHafDerj1YG3FEnuKhwQmdyZW8YF4+mQ0cC1giFDFON8H3AewLvm1cF3nNhYtpmmQcPv+iSKlrqgjjOKN84KuFYVN+C578JQHv3ekDTCHxb3f2kn16Z9+fDcdCCOdIXfuSfztrpBgXDKp8GhRcmupSPEFFcDrbkPs3gpuKX7Wcaq/n/1PxtzNpfTB/tGzUdPc8tP4C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIBQJJBEhcd9mC0hZ6Oy9HxpmAS3Bo7EDK1x87NBQodLdHqkQ9Ga9Zc/GyqwwtQstrMAYxJxFVeu2a+q+J/UpQxBXN8Yu+ViqBrU0CcLVKpVRGtjBOgkBVeowl0KOMI8prqmWYRc20NMsZm0XPKnmGW7Aq5X9U5QFiJqCFS8FQlXQRUuZlYWtqElMvQowwj6IFMI9jb9QY9D3h6aGck1qvbllmAeP6jPOlp+u44AOGMMQFHC30qn7gU/WZNyJTingSw3tMn9XU973r9bqwLhaieKpbhmHohqsLH5+R6YVa/5VvBr9Hg2i7biEaUYJRSDZIkhoAn0W+0ginUUz4bHEG2tRNQ0JrkGINmyV6oeofATJ230Q6IBkzpLEZMnOwOwggBopBub/r1dSL73Vwu3ccI8qCKF6wo/XPKAFdQRgtwddYnlnO7vuIJ8pVrwL2ehSHCSMruJZjskQYmHITQ0DSPmFi+HymZO1XUib+SD5lgH/Slqq+z1VQ109Up02mwPj/6dl+v7YoDyhMoM7Kv/uVy/GT61hm0rxmzeeJez2Y6O17o5ZR2Hfektq1+319PKy72XrfFFZS12UV8+bx8h4eje69v2RX95u7yjoamlf+U+vtmaZxmnafrxynOG/bl5VVN1wFr66DNne3rj2n0XD20L58StJf3dVgs260zIpvY9d66f95CVJ0awWxM2uVnm/sq43/bN7e9OltazgfuGhStvzleOoMFhOysQNjPjXXfLpG49/95Fe5QQNqDDeXj8bmtgmztDyvfeS0n8OhMZeEUTJ5AczzpRyPXlvpin4h/rW8SAvxtSBz9ZZSoxgHytW63CWlxUuEABHfE83crst2yW513ZJRdovFkmm0mm7DEv+5Jcfsug0n16AtiyOKrYgGRMaSKrudn68J4oXHgPoQa6sowTNg6heIbcSR0qN34nBElME4EipuWZ2S45jNRrPstGy71bY7RqPZ7Ha6bsex27aqXEd8SIdxI+AQHyp4+UDB7wCTJQEp83LOmRh0xkVJXtEq4aFZWKEChURcBLHUYrHVsXVGFssQJGF9EflJCIXlbJkVSGfbX0tDmGVWwvAyijkKzewYns3y+FteEOHjE+nAZEpNEE2FTzdS0bPzfM7n7e7nncM3Ep/I0yaqy2OCt0wOP30MjZyW3cTsEsPMzLnvtvwQ4gSA/gU//bg0u3j+iuxFz29ZcXEIWann/X1FhddCslolWUcrUjJjAa8L5TT1EeBE6N7bOJoD1XcQ+reunR3ro8g7+yG/hM/oiCMOCzF/Srb8xptjBEy+OXri/KTffdAchBR145DyU7ZWKJ4mkvGXrxfsYeknzDfiZx3F/ke7TmDtxRF5iocGJ3QqV/KCeTszGzgSsEQoYhTvg58COBX80Lgr8o4LF9M0STic/6JIqaupCOMoobzXVjPDvvxmPPnbErwPp08wmcS/39kpO3tnPw36IyGEC6TufMnfnTWSjQsGVT4NMi41NRVPUBGcTvfk/p3gvuLbVsnudNrFvyn+YSb1T+bPlr2aHp+H+n8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZrb9o8FP6+XxFlH6eQK5dEBSlAq2Vqu67Qy/bllXEO4Daxg+2Ey6+fExoKjHbdK1WiPjl+znMufuwzgdLECUIhgEvCqBYNu/p/FsStptN2DNf3YsObYt+YOO7EgAn2puA12yj2dS0SIoeIComo7OqOZbuG7RhOZ2y7geMFtt1wO61funYPXCho5dKwdG2VJlQEVdiunnMaMCSICChKQQQSB6Pw6jJQngGqOem9sy3LKiDvzaXMAtPEjRgwJAluYJaaZ+aBz1ksghGZUSRzDi8xY9HVX/Yul8vG0m0wPjMdy7JMyzeVTyzI7LPe+1RvhjiiU7ZdDxBllGCUkA0qSV2BnLNYC5MZ40TO0zegbdO2SmgDVtjAtkc/6+ZrgIrdB5EOSHKBDDFHdg12C1PgQDFod7dRV//8sQ5u9445omLKeCqO1v9GCWgBCcsgNkSdWc3u44gnytU7AxxEFCe5IAVcl2OSIQxCu+EwJatLItTwxUKr2q+thPoj9ZQB/pe2nJn7XBV180R1hmQGQv6fnu33a4tyj5IcerOv8udPwp5Ywdj6+vzOT53HCS/GbHHVrSjsO29J7dr9sj4e1t1svWyaD28W8Xr945l7z7Px4Ad6vJxCeOc/iMuBN6HzL+SHSdOWc3lDzW8WY9yarBcdcsNWP/vrJ7cTudHi6aqZPXjN8adbnlwjVsibiG02qHBH4zEiDxm/fx48pgP3oc/b58/Rl410vmE/WeKlTFu/zMyfbFhB+qP7RX/FWleQF+Tr9afi6fH87vsoNvvcRs1rudmE3dec9nM4NNaSMMonT4BlvSzHIxpqF6pfSL4vL6WFxMa0cg2yUqOEBCr1XrmrlJYgVwJE4kA1c7sO217z3HObVst3Xc+2Bn0/dNR/vtexL/ywU2vQlsURxQGjU1LGKlV2Oz/vE8RpIIDGwI2C5XgOQn8HcYgk0iJ6qw4HowLGTKl4x2r77YuB7V203L7Xvwi9YWi3QmfQPHc6nXZH166Z/E6/83AqgR8qeOtAwW8Bk4xAKfPlnAs16EKqkixQkcvEbhSoQSFXFwEvtVht7TRNQdIsgZKwmbI4T6CRzbOqQKbY/joGwqKyEoEzxiVK7OoYvpnl8be6IMonJqWDKFPqg2oqnLiRrDqft/P29/Ou4cM8JuVpU9WVnOAtk8NPr0NTTstuYnaJYWHX3Hdb/hHiBID5Dj/zuDS7eHFB9qLXt6y6OJSs9Or+LlBj0ciLIq862i4lkyt4UymnbY4A50r31mP2DNTcQZgfunZ2rI8i7+yH/HI5pyOJJKRq/rRq+YE3xwhE+eaI1PlZffRBcxBS1U3CSp6yDRL1NCkZv/t6wQEu/ZT5Rv0sGY9f23UCay+OylM9NCShs3JVXjDrN2YDK6mOiVJExvfBTwGcCn5o3BV5x0WqaZrkEt7+opVS19URxiynMhrqlWFffiuecp1B8Or0B0wl8S939kq8eWc/Xl2OlBCmSN/5kr87G6QaFwx6+TSouHT1lXqCquB0tif3LwT3Fb/pKMU/H7p/U/zDTHp/mP+07NX0+Dz0fgM=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0824101388237050451</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0824101388237050451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082451388237045484</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082481388237048112</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0824101388237050451</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>13450EF306933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>7545DF9406933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>B745253506933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f4babe74-1397-4891-8a95-aa893da0e256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88f49054-754c-4752-9b1a-9038714352dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true" id="9086d78f-0841-4647-beb5-638622ca6219"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="634d13ac-6760-46fd-bd1c-a401cbd6f484"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>9A45863606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE98E2B40AC561C7E0401F0A0799472F:A40EC18D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0824191388237059417</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E945951606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E945951606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E945951606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>9A45863606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC45DCD606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3F45C26706933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:9A45863606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC45DCD606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:3F45C26706933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xHWxPYAZwSJ3m0gMJ7eHljJA3WKktE0sGp19fycQEKEnTM5MZou2ttde+aElnDGWpFfQZg4KTnCpR2FX/gw5exJaPNc+z2prjzF3Ns3FbczuOERtt2/JcS1UixkqIKOOI8q5qGaatmZZmeXemHVhOYLqtjmvNVGUKBRPQwqVlqEqVpZQFddiuWhY0yBEjLKAoAxZwHEz611eB8AxQw0ntnW1Z1gGLXsL5KtB13IoBQ5riFs4z/Uw/8DmLWTAhS4p4WcBzzJh11ee9m82mtbFbebHULcMwdMPXhU/MyPKj2vvQbIY4oot8ux4imlOCUUp+IknqGniSx0o/XeYF4Un2CrSpm4aE1qDCGjYd+lHVXwLU7N6JdECyYEhjCTIbsDEsoACKQbkfR1314/s6uN17VyDKFnmRsaP131ECuoY0X0GssSazht37EU+Uq3cGOIgoTktG1nAjx2SFMDDlawELUl0RJoYvZkrdfqVi4o80Uwb4b9pypu9zFdT1E9UJyRIY/z892+/XFmWK0hJ6Ln8oB2wc3iTxrGM7thXNZhmuBvZo2a0p7DtvSe3a/bw+HtbdbD1vGvrwAPfjTbx4GhjZIg3H/R83g41bOkaSVHft6DM+Hw2z9TVNvHw5n35e/2Pcu/bMr8bJ5fDrcFQ8VhdXV8lm7v78UNnfv4QPjn/p38K3QeTf2+wbS3EVT/+9/DTFP5MMHqf8wgonEVx8CrPHp9nsdlrdpx2blMvFj6tvX8b39NM8e4rPP5hZdh2TzkV1s8nm4SQ2Yq/7ktN+DofGRhIm5fwBMG+WcjyiUBmJfiH+trxIC4m1Re0arKRGMQ6Uqz25S0pLUAoBInEgmrld+33H9dp222j7tu2YxnDg9y3xn+945sjve40GbVkcURzmdEFkLKmy2/l5myDOAgY0hkJb5yVOgKlvIIaIIyWiY3E4csrgLhcqPgxNMemh0Xe9ThiGXtt0R6NzZzjoG4YzCDuqcpPzW3pb9BccikMFbx8o+BgwWRGQMi/nnIlBZ1yU5BGtS56arTVqUSjFRVBILRZbPVdnJFulIAnrWR6XKbRWyaoukM62v5aGMKuthOFVXnCUmvUxfDXL429NQYRPTKQDkykNQDQVTtxIRpPP63n7+3k38P0yJvK0ieryguAtk8NPL0Mjp2U3MbvEMDMb7rstfwlxAkB/g59+XJpdvHhN9qI3t6y4OISs9Jr+PqLWY6tcr8u6ox0pmYWA14VymvoEcCl07+ku/wFU30Ho77p2dqyPIu/sh/xKntAJRxwyMX9KvXzHm2MCTL45InF+qvc+aA5CirpxqPgp2zAVTxPJ+M3XCw6w9BPmr+JnkxfxS7tOYO3FEXmKhwYndClX8oJ5emU2cC5giVDEvNgHPwVwKvihcVfkHRcupmlecnj9iyKlrqsijPOS8ihUa8O+/NY8+dMKghen32BqiX++syv26p39/fpqIoQwQ+rOl/zZWSP1uGBQ5dOg5tJVK/EEFcHpck/unwnuK/6577i+a/5R8Q8z6f1m/t2yV9Pj89D7BQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xHWxPYAZwSJ3m0gMJ7eHljJA3WKktE0sGp19fycQEKEnTM5MZou2ttde+aElnDGWpFfQZg4KTnCpR2FX/gw5exJaPNc+z2prjzF3Ns3FbczuOERtt2/JcS1UixkqIKOOI8q5qGaatmZZmeXemHVhOYLqtjmvNVGUKBRPQwqVlqEqVpZQFddiuWhY0yBEjLKAoAxZwHEz611eB8AxQw0ntnW1Z1gGLXsL5KtB13IoBQ5riFs4z/Uw/8DmLWTAhS4p4WcBzzJh11ee9m82mtbFbebHULcMwdMPXhU/MyPKj2vvQbIY4oot8ux4imlOCUUp+IknqGniSx0o/XeYF4Un2CrSpm4aE1qDCGjYd+lHVXwLU7N6JdECyYEhjCTIbsDEsoACKQbkfR1314/s6uN17VyDKFnmRsaP131ECuoY0X0GssSazht37EU+Uq3cGOIgoTktG1nAjx2SFMDDlawELUl0RJoYvZkrdfqVi4o80Uwb4b9pypu9zFdT1E9UJyRIY/z892+/XFmWK0hJ6Ln8oB2wc3iTxrGM7thXNZhmuBvZo2a0p7DtvSe3a/bw+HtbdbD1vGvrwAPfjTbx4GhjZIg3H/R83g41bOkaSVHft6DM+Hw2z9TVNvHw5n35e/2Pcu/bMr8bJ5fDrcFQ8VhdXV8lm7v78UNnfv4QPjn/p38K3QeTf2+wbS3EVT/+9/DTFP5MMHqf8wgonEVx8CrPHp9nsdlrdpx2blMvFj6tvX8b39NM8e4rPP5hZdh2TzkV1s8nm4SQ2Yq/7ktN+DofGRhIm5fwBMG+WcjyiUBmJfiH+trxIC4m1Re0arKRGMQ6Uqz25S0pLUAoBInEgmrld+33H9dp222j7tu2YxnDg9y3xn+945sjve40GbVkcURzmdEFkLKmy2/l5myDOAgY0hkJb5yVOgKlvIIaIIyWiY3E4csrgLhcqPgxNMemh0Xe9ThiGXtt0R6NzZzjoG4YzCDuqcpPzW3pb9BccikMFbx8o+BgwWRGQMi/nnIlBZ1yU5BGtS56arTVqUSjFRVBILRZbPVdnJFulIAnrWR6XKbRWyaoukM62v5aGMKuthOFVXnCUmvUxfDXL429NQYRPTKQDkykNQDQVTtxIRpPP63n7+3k38P0yJvK0ieryguAtk8NPL0Mjp2U3MbvEMDMb7rstfwlxAkB/g59+XJpdvHhN9qI3t6y4OISs9Jr+PqLWY6tcr8u6ox0pmYWA14VymvoEcCl07+ku/wFU30Ho77p2dqyPIu/sh/xKntAJRxwyMX9KvXzHm2MCTL45InF+qvc+aA5CirpxqPgp2zAVTxPJ+M3XCw6w9BPmr+JnkxfxS7tOYO3FEXmKhwYndClX8oJ5emU2cC5giVDEvNgHPwVwKvihcVfkHRcupmlecnj9iyKlrqsijPOS8ihUa8O+/NY8+dMKghen32BqiX++syv26p39/fpqIoQwQ+rOl/zZWSP1uGBQ5dOg5tJVK/EEFcHpck/unwnuK/6577i+a/5R8Q8z6f1m/t2yV9Pj89D7BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3TqpVPSlvLVEWZYkJUdWBFwZb15J6SnEG3T2qS1+us3KRYB0XXfGWcwpyfPec5HnuSc4zCw3S7nkAgaMW3Yb+v/+Q5Ac9m0jVqjYRqOaZnGslptGEt76WPP9Cy71dC1IecpDBkXmIm2bptW1bBsw27OraprO67VrNhW/U7XfkHCJbR0qZi6locB424Rtq2nCXMjzCl3GQ6Bu4K4s+545EpPF5ec9M75hmURMOmshYhdhEjFAwJBQCokCtE52vM597g7oyuGRZrAa0yPt/XXvU9PT5WnaiVKVsg2TROZLSR9PE5Xp3rnpNwM3pD50WbdwyxilOCAvmBFagxiHXlaN1hFCRXr8ANoC1mmgjYgJwaxHHaqo7cABbsvIu2RTDg2+BpbJdgUfEiAEdBupsO2fvq1Dm72zhPMuB8lIT9Y/xslYBkEUQyewcvMSnZfRzxSrs45EHfISJBymsFPNSYxJsC1SQI+zUeUy+HzuFa0X8u5/KPllAH5l7aco12ukjo6Up0+XQEX/6dnu/3aoPzCQQod33t8uGyMRt8vu3G/Nx9keDKafhtn8/FFu6Cw67whtW336/pwWLez9bpp2P2djfPptV29vKv7szgnFmP+zTi5rD9kZ2t+O6mNbpzvV3lwTfOnM3zZGPg3dLRckMnLNLwN0OL3c0/cR4uHpnXyYlr8+m7QT2ph8z6lZ/PRZLL4vSAvi+Rldnb5cru2b6/CxvIsr6J4OInS5jz8tfwBz2drMUaTqzt7du/9iPHNPWmcXGXZmi0n2TVCz+iOcXPstN9y2s1h31hKwixd3gMR5VKNx7CvDWS/sPhcXpSFeoZfuLqx0igugAm9o3YpaXFTKUDUc2UzN+tBz6n1e/26WW9Vq45l9r61urb8r+U0rUGr2yw1aMPigGIvYj5VsZTKbubnc4IkdDkwDxIji1KyBq5/gtjHAmtDNpWHI2Ic5pFUcafa6vYbdr9rNvtN06lXe6bTsKwLqdQDua7p2s9IXLGrpOsLSPYVvL6n4FMgNKagZF7NOZeDzoUsySPOUhFYlQxXGKTyIkiUFsutzRriNIwDUIRRGHlpAJV4HRcFQnzzaxuY8MJKOYmjRODAKo7hh1kefisLIn08qhy4SukbyKbCkRvJLPP5OO/Wbt4lfDf1qDptsroioWTDZP/T29CoadlOzDYxwq2S+3bLP0IcAUCf8EOHpdnG8zK6E728ZeXFIWWlU/b3EVceK2mWpUVHG0oyEwmPpHJaaAYklbr3PI8egKEtBPrStbNlfRB5a9/nl4o1mwksIJTzpxXLL7w5ZsDVm2Moz0/+1QfNXkhZNwG5OGbrBfJpohh/+nohLlF+0jyRP09R4r216wjWThyZp3xoCMpWaqUumOcPZoNEEpZKRYySXfBjAMeC7xu3Rd5yEXKalqmAj79oSuraOiYkSpkY9vXCsCu/BU/xHIP75vQOppD41zs75x/e2YvxaCaFMMT61pf+3dmgxbgQ0NXToODS1nP5BJXB2WpH7l8J7ir+RcuptWrWXxV/P5POO/N7y05ND89D5w8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I8EH3fXxGlj1XIhRAgKkgBlt3stvRCr/vyyTgDmCZ2iB2g/fVrh4YCpd32kypRT8Znzlx87BOOktjxA84hE4RRLey19P9GaBQ17HrdsDw8MlyEPQM1PDAQHllu1Wk0apGlayHnOYSUC0RFS3csu2rYjuE0ru2q77i+41Ssau2Prt1CxiW0dKnIXaskptwvwrb0PKM+Q5xwn6IEuC+wPwzOTn3p6aOSk94+WbMsAmbtqRCpb5q4EgGGOMYVzBLzxNzxOYm4PyQTikSewUvMiLf0l73L5bKyrFZYNjEdy7JMq2lKn4iTyZHe/lZuhiikY7ZedxFllGAUk2ekSJ2BmLJIC+IJy4iYJu9A26ZtKWgDVtjAtkuPdPM1QMHuk0g7JDOODD5Fdgl2BWPIgGLQbq7Cln70uQ6u915niPIxyxK+t/4aJaALiFkKkcHLzEp2n0c8UK72CWA/pDjOOVnAQI1JijBw7SKDMVmdEi6HL+Ja0X5txeUfKacM8FfacmJuc5XUzQPV6ZEJcPF/erbdrzXKLYpzaCeXw/OzP78u7rFVfbq7GS+uu+zZtGvkmbUKCtvOa1Kbdr+s94d1M1svm6bN7nxYqy9z2rsl9MEZVR9vpp3lbPwzHswnP46Feb741QExcu8yxNJRJ3bg4XeX8meYDsJB/fTHMw7uq+P+aVr/Nppffs97deuuOao/BL8J9Y5n8Xgx+jnrPwe9p06MHqed3uksuhni28ulGT8ms/HluXkcLr205s2FlQ0HN/Eg6t+m3xhNaPCYz8PFkEXWbGo9NlqvOW3nsGssJWGYj2aARblU4xH2tL7sFxIfy4uykMgYF65+qjSKC6BCb6tdSlr8XAoQiXzZzPW62ndrXcerW16zWnVtq9tpBo78r+k27H4zaJQatGaxR7HL6JioWEpl1/PzMUGc+BxoBJmxYDmeAtc/QOwhgbSQXsnDwSiHayZV3Kl13Nr3br3rBb3A68kzX/P6VqPbb7hW1w1cXRswcU7Ps2AsINtVcG9Hwa8Ak5SAknk151wOOheyJHO0yEVsVxaoQiGXF0GmtFhubdRMTpI0BkXYTFiUx1BJp2lRIJOvfx2pRrywEo5TlgkU28UxfDfL/W9lQaRPRJQDVyl1QDYVDtxIdpnPm7zdgzdXCR/kEVGnTVZXZASvmex+eh0aNS2bidkkhrldct9s+SLEAQDzA37mfmk28aIF2Ype3rLy4pCy0i77O0eVeSVfLPKio3UlmZmEN6Vy2uYQcC517+maPQI1NxDmp66dDeu9yBv7Lr9cTOlQIAGJnD+tWH7izTEErt4coTw/q88+aHZCyroJWIlDtm4snyaK8YevF+xj5SfNF/JnybLotV0HsLbiyDzlQ0MQOlErdcE8vTMbmElYIhWRZdvghwAOBd81boq84SLkNI1yAe9/0ZTUtXSEMcupCHt6YdiW34KneErBf3V6A1NI/MudveLv3tn3Z6dDKYQJ0je+5N/OBinGBYOungYFl5a+kk9QGZxOtuT+heC24n9vurVmzfb+pfi7mbTfmN9atmq6fx7afwE=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0824191388237059417</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0824191388237059417</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0824141388237054484</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0824171388237057189</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0824191388237059417</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>AA45963606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0D45ECD606933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>4F45D26706933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d13ac-6760-46fd-bd1c-a401cbd6f484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true" id="d8ee8935-e9d5-4d68-850b-0db5d57d79a3"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="09a64e54-c4dc-4fd8-92e5-65091132ca14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>C2550C4806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE988A2E582FBA0CE0401F0A05991749:2A0D4DE8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0824281388237068452</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>1255163806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1255163806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:1255163806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>C2550C4806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>2555A62906933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6755099906933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:C2550C4806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:2555A62906933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:6755099906933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jzvGFwyxPYEZh0vKNldM2iYvO0I+gLa27EgyGH79SiYmQEma7gwzRsdH3/nOxZ90zlGaOEHIOTBBMqqN+h39nxaexr6HbGPq+57htpFvTGeea7hxbMVnTfl/dqZrI84LGFEuEBUd3bHspmE7huNN7GbguPLXsN3Wk659A8YltHRpWLpWpgnlQRW2oxeMBhnihAcUpcADgYMovL4KpGeAak5693zLsgrIugsh8sA0cSMGDEmCGzhLzXPzwOc85kFE5hSJgsFLzJh39Je9q9WqsWo2MjY3HcuyTMs3pU/Myfyz3v1Ub4Z4RGfZdt1DNKMEo4RskCJ1DWKRxVqYzDNGxCJ9A9o2bUtBG1BiA9su/aybrwEqdh9EOiDJODL4Atk12BhmwIBi0B7Go47++WMd3O6dMET5LGMpP1r/GSWgS0iyHGKD15nV7D6OeKJc3XPAwYjipOBkCTdqTHKEgWt3DGakvCJcDl/Mtar9Wsnlj9RTBvhP2nJu7nOV1M0T1emTOXDxf3q2368tyjeUFND1F1eQppPL4SRqDe5b9997t73bWbO5moadisK+85bUrt0v6+Nh3c3Wy6ZiTZj9tQWDizFdRqPV4Oc93KXrm+dJe7Fy880qZjMcueNncKZfvrq3VwX/y+P33x97gy+Xq6thK36cpPlj/hTly09Pj5c3xGzflcUymSfrW9Zf/LzcrPuuN53flf7f6GYz/hGtHwb3N77F8mn5KC4j3g/pD1ns60nSzh82T2XyzSdz/Ok6fNh4m00J1/MmyfLBhoWd15z2czg01pIQFdN/AYt6qcZj1NeGsl9IvC8vykJiY1a5BrnSKC6ACr2rdilpCQopQCQOZDO3657Talk917PafrPp2lbvwg8d+c93PXvoh16tQVsWRxR7GZ0RFUup7HZ+3ieI04ADjYEZy6zAC+D6O4h9JJA2omP5cWSUwySTKu4MPf+iHQ6aVs/p90KvfdbznOHwYuheWGehHeraTSZu6S0LZwLYoYK3DxR8DJjkBJTMqznnctC5kCV5RstCJHZjiRoUCnkQMKXFcp/XMjlJ8wQUYTPN4iKBRr7IqwKZfPt0DIR5ZSUc5xkTKLGrz/DNLI/f1QWRPjFRDlyldAGyqXDiRLLrfN7O29/Pu4YPi5ior01WVzCCt0wOX70OjZqW3cTsEsPcrrnvtvwhxAkA8x1+5nFpdvHiJdmLXp+y8uCQstKt+/uMGs+NYrksqo6eKclkEt6UymmbEeBC6t56kv0Eau4gzA8dOzvWR5F39kN+hVjQSCABqZw/rVp+4M4RAVd3jpH8fsqPXmgOQsq6CSjFKVsvkVcTxfjd2wsOsPKT5jv5WGUsfm3XCay9ODJPedEQhM7VSh0w6zdmA2cSlkhFzNg++CmAU8EPjbsi77gIOU3TQsDbbzQldR0dYZwVVIz6emXYl9+Kp1jnELw6/QJTSfzLmV3yN8/sH9dXkRTCFOk7X/J7Z4NU44JBV1eDiktHL+UVVAan8z25fyG4r/i2VHy73fyt4h9m0v3F/Ktlr6bH30P3Pw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jzvGFwyxPYEZh0vKNldM2iYvO0I+gLa27EgyGH79SiYmQEma7gwzRsdH3/nOxZ90zlGaOEHIOTBBMqqN+h39nxaexr6HbGPq+57htpFvTGeea7hxbMVnTfl/dqZrI84LGFEuEBUd3bHspmE7huNN7GbguPLXsN3Wk659A8YltHRpWLpWpgnlQRW2oxeMBhnihAcUpcADgYMovL4KpGeAak5693zLsgrIugsh8sA0cSMGDEmCGzhLzXPzwOc85kFE5hSJgsFLzJh39Je9q9WqsWo2MjY3HcuyTMs3pU/Myfyz3v1Ub4Z4RGfZdt1DNKMEo4RskCJ1DWKRxVqYzDNGxCJ9A9o2bUtBG1BiA9su/aybrwEqdh9EOiDJODL4Atk12BhmwIBi0B7Go47++WMd3O6dMET5LGMpP1r/GSWgS0iyHGKD15nV7D6OeKJc3XPAwYjipOBkCTdqTHKEgWt3DGakvCJcDl/Mtar9Wsnlj9RTBvhP2nJu7nOV1M0T1emTOXDxf3q2368tyjeUFND1F1eQppPL4SRqDe5b9997t73bWbO5moadisK+85bUrt0v6+Nh3c3Wy6ZiTZj9tQWDizFdRqPV4Oc93KXrm+dJe7Fy880qZjMcueNncKZfvrq3VwX/y+P33x97gy+Xq6thK36cpPlj/hTly09Pj5c3xGzflcUymSfrW9Zf/LzcrPuuN53flf7f6GYz/hGtHwb3N77F8mn5KC4j3g/pD1ns60nSzh82T2XyzSdz/Ok6fNh4m00J1/MmyfLBhoWd15z2czg01pIQFdN/AYt6qcZj1NeGsl9IvC8vykJiY1a5BrnSKC6ACr2rdilpCQopQCQOZDO3657Talk917PafrPp2lbvwg8d+c93PXvoh16tQVsWRxR7GZ0RFUup7HZ+3ieI04ADjYEZy6zAC+D6O4h9JJA2omP5cWSUwySTKu4MPf+iHQ6aVs/p90KvfdbznOHwYuheWGehHeraTSZu6S0LZwLYoYK3DxR8DJjkBJTMqznnctC5kCV5RstCJHZjiRoUCnkQMKXFcp/XMjlJ8wQUYTPN4iKBRr7IqwKZfPt0DIR5ZSUc5xkTKLGrz/DNLI/f1QWRPjFRDlyldAGyqXDiRLLrfN7O29/Pu4YPi5ior01WVzCCt0wOX70OjZqW3cTsEsPcrrnvtvwhxAkA8x1+5nFpdvHiJdmLXp+y8uCQstKt+/uMGs+NYrksqo6eKclkEt6UymmbEeBC6t56kv0Eau4gzA8dOzvWR5F39kN+hVjQSCABqZw/rVp+4M4RAVd3jpH8fsqPXmgOQsq6CSjFKVsvkVcTxfjd2wsOsPKT5jv5WGUsfm3XCay9ODJPedEQhM7VSh0w6zdmA2cSlkhFzNg++CmAU8EPjbsi77gIOU3TQsDbbzQldR0dYZwVVIz6emXYl9+Kp1jnELw6/QJTSfzLmV3yN8/sH9dXkRTCFOk7X/J7Z4NU44JBV1eDiktHL+UVVAan8z25fyG4r/i2VHy73fyt4h9m0v3F/Ktlr6bH30P3Pw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtc6I6FP6+v4JhP3YQiKjAVGd8qV22r7da290vd2I4aHYhIAlq99ffBItVa7vtnemMzeHkOc95yZOccpzEyO9yDrmgKdOCQVv/N/RsNEXTugGe7RmOB64xDTEYddywvYZluxhNdS3gvICAcYGZaOvIsuuGjQzkju26jxwftWoNq/VT1yaQcwktXWqWrq2TmHG/DNvWi5z5KeaU+wwnwH1B/FH36tKXnj6uOOmd0w3LMmDemQuR+aZJaiEQiGNSI2linpp7Pqch90d0xrAocniOGfK2/rx3tVrVVvVams9MZFmWaXmm9Ak5nX3VO1+qzRAGLEo36z5mKaMEx/QPVqSuQMzTUOvGszSnYp68AW2btqWgDVgTg9gO+6qbLwFKdh9E2iOZc2zwObYrsDuIIAdGQLu/C9r61491cLN3nGPGozRP+MH6c5SALSFOMwgNXmVWsfs44pFydU6B+AEjccHpEq7VmGSYANduc4jo+pJyOXwh18r2a2su/2g1ZUA+05ZTc5erpG4eqc6AzoCL/9Oz3X5tUCY4LqBzGVnnk8F3WESL5cliHE4S/vOpV//nfBi0Swq7zhtS23Y/rw+HdTtbz5uWFz33G/rBbsdi3X2YNE+m68f6XcDjRbN/EznXVzOK3Nvzh5VzhtxGsvjlrB7OznrL6Y/Iy8Z/BgTfoCAwLwbDP3dfxhdXt8QcZD+yJj8Z/763c8tCc1bM+7cm6o/vwwl5fGDE4jfJ9cPPLPSc9XDaP3Fo+ngTteoxDvGq24taV+x+8WUQ9hd8Qlvf1veuK86vr0+c9ktOuznsGytJGBXTX0BEtVTjEQy0oewXFu/Li7LQ0IhKVz9TGsUFMKF31C4lLX4hBYiGvmzmZo0ajUa3iTyr6dXrjm31e14Xyf88x7WHXtetNGjD4oBiP2URVbGUym7m532CJPE5sBByY5kWZA5cfwdxgAXWAnYnD0fKOIxTqeIuQi3XRt0eanpDeeSbyDnrO42WW+/ZzWEL6dp1Km7YTd6NBOT7Ct7cU/A7IDSjoGRezTmXg86FLMkCLwsR27UlrjEo5EWQKy2WW92GyWmSxaAIm0kaFjHUsnlWFsjkm19kYMJLK+UkS3OBY7s8hm9mefitKoj0Caly4CqlHsimwpEbya7yeTtvbzfvCr5bhFSdNlldkVOyYbL/6WVo1LRsJ2abGOF2xX275ZMQRwDMd/iZh6XZxguXdCd6dcvKi0PKSqfq7wLXFrViuSzKjraUZOYS3pTKaZsjIIXUvadx+huYuYUwP3TtbFkfRN7a9/kVYs5GAgtI5Pxp5fIDb44RcPXmCOT5WX/0QbMXUtZNwFocs/Vj+TRRjN99vRCfKD9pvpU/qzQPX9p1BGsnjsxTPjQEZTO1UhfM0xuzQVIJS6Uipvku+DGAY8H3jdsib7kIOU3TQsDbXzQldW0dE5IWTAQDvTTsym/JUzxl4L84vYIpJf75zl7zN+/sx6vLkRTCBOtbX/p3Z4OW40JAV0+DkktbX8snqAzOZjty/0xwV/FtKfl2s+7+TfH3M+m8Mr+27NT08Dx0/gM=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuo4FH0/XxGljyjkCiQRIHFpz9ChFzU9tOVlZBwDPpM4wXbC5evHDoQCpT10pErUO9trr33xspsMxJHldxhDlOOEKIN+S/0HhA3brdtQM2umozkWmGiTycTV3FrNhJ7nTULkqMqAsQwNCOOA8JZqGaatmZZmuc+m7VuOb5tVw6qPVWWEKBPQwqVqqMoqjgjzi7AtNaPETwDDzCcgRszn0A86d0NfePqg5KS2m1uWRUDannOe+roOqyGCKIpgFSax3tSPfJoh8wM8I4BnFO1ihqyl7vYul8vq0q4mdKZbhmHohqcLn5Dh2ZXa/lFuRuGATJPtugdIQjAEEd4ASeoO8XkSKp1ollDM5/En0KZuGhJaQyuoQdMhV6r+HqBgdyHSEUnKgMbmwCzBntAUUUQgUn49DVrq1WUd3O59poCwaUJjdrL+HiVEchQlKQo1VmZWsrsc8Uy52k0E/QGBUcZwju7lmKQAIqY8UjTFqyFmYvhCphTtV1ZM/OFyyhD8Tlua+iFXQV0/U50+niHG/0/PDvu1RRmBKENt4Lq3SefNqJlZ3rDu7FXjzXmdOLP666xVUDh03pLat3u3Ph3W/WztNl3XAjpLlzTi+bzC1qNK1zIWD7dveNWbDqdBCo3aOrVmvf7GSaNFNqpsaEgqG2O5BN1Vdm3/ZdZrbv4zmLytGz/08YQ8gMqmdz0wX7LFQ/3vec9i92uzk92P7jdjjz72nrp0XR+gcfaT3Trd6biB49v5XcMLX8aPdh6/BOsKBMO192NWGd7AX8PXUV9fjn7fWIEDW+85HeZwbCwlIcgmvxHk5VKOx6Cv3Ih+Af61vEgLDrVp4eqnUqMYR4SrbblLSoufCQHCoS+auV3XG7WaIQ6PUfds2zGNXtfrWOI/z3HNG6/jlhq0ZXFCsZeQKZaxpMpu5+drgjD2GSIholqeZHCOmPoFYh9woAzIkzgcCWHoOREq3uj3LatvNNwbq+P1a3VTcDf6XaNjup7dqzVU5T7hD+SBdqYc0WMFrx8p+BOCOMVIyryccyYGnXFRkgXIMx6Z1RxUCcrERUClFoutbk1nOE4jJAnrcRJmEaqm87QokM62v5YGICusmME0oRxEZnEMP83y9FtZEOETYunAZEpdJJqKztxIVpnPh7ydszdXCd/JQixPm6gupxhumRx/eh8aOS37idknBplZct9v+SbEGQD9C376aWn28cIcH0Qvb1lxcQhZaZf9XYDqoprleVZ0tCElkwp4XSinqQcIZkL31s/Jv4joewj9omtnz/ok8t5+zC/jcxJwwFEs5k8plhe8OQLE5JtjIM7P6tIHzVFIUTeOVvycrReJp4lk/OXrBfpQ+gnzo/hZJjR8b9cZrIM4Ik/x0OCYzORKXjDrT2YDJgIWC0VM6CH4OYBzwY+N+yLvuXAxTZOMo8+/KFLqWiqAMMkIH/TVwnAovwVPvk6R/+70AaaQ+N2dvWKf3tmvd8NACGEM1L0v/rOzhotxgUiVT4OCS0tdiSeoCE5mB3K/I3io+KYlBqRuu39S/ONM2h/MHy0HNT09D+3/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0824281388237068452</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0824281388237068452</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0824231388237063095</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0824251388237065494</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0824281388237068452</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>D2552C4806933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>3555C62906933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>7755199906933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>09a64e54-c4dc-4fd8-92e5-65091132ca14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true" id="66e47ede-a88e-4e3c-a6fd-b05d808fd6ea"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="55a68fd3-0b14-4715-839f-96ccd027cddb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>FA55717A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE97360453621EE5E0401F0A059945A9:B9629754"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0824371388237077407</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>4A558C5A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:4A558C5A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:4A558C5A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FA55717A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>5D55AE1B06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5F559ACB06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FA55717A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:5D55AE1B06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:5F559ACB06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EH3PV7g8j1tgDOZiV6DK4TJhApMZTLIkL1uK3MbK2pKxZG5fv5KJCRCSSbYqVUTt1unTFx3pkqM4qjou55AKwqg27LX1f1DLrjUDbJVwo45LVrWOSqhiyaVZC8BHQcsysa4NOc9gSLlAVLT1asWslcxqqdqamjWnajm1Wtms24+6dg8pl9DSpVzRtXUcUe7kYdt6llKHIU64Q1EM3BHY8dzxyJGeDio46Z3LHcs8YNoJhUgcw8BlHzBEES5jFhuXxpHPpc8dj8wpElkKLzF93tZf9q5Wq/KqVmbp3KhWKhWjYhvSx+dk/k3vXBSbwR/SgO3WXUQZJRhFZIsUqTGIkPmaG81ZSkQYvwNtGmZFQZdgjWX5LPpNN14D5Ow+iXREMuWoxENkFmATCCAFikG7mwzb+rfPdXC3d5oiygOWxvxk/TVKQJcQsQT8Ei8yK9h9HvFMuTqXgJ0hxVHGyRJ+qjFJEAau/UohIOsR4XL4fK7l7dfWXP6RYsoAf6Utl8YhV0ndOFOdHpkDF/+nZ4f92qHcoyiDTj1cBoPR72XiwbXxawKPePv9Jg5H0F21cwqHzjtS+3a/rE+HdT9bL5s8bzvqbeIAnqcra9hcGRBsr6H/0N94tHudZI9326epfzsJZ9bIbtyjmVj0Zlvz98xLxHy6qIQsyrJNho0ga1xQoLOV+Xd0h8fsduP2x/bmoX+96C3+yvgP7nvjZfORNlvfETbnbNJariGsPntb101G3VV/hkc3MVvMF9Ht82168aPneY10HmJ6w1f9BzwWD+3XnA5zODYWkuBlT8+ARbFU4zHsaQPZLyQ+lhdlIX4pyF2dRGkUF0CF3lG7lLQ4mRQg4juymbv1wK3Xm2bTrTTsWs0yK90r263K/2yrZQ5st1Vo0I7FCcUuowFRsZTK7ubnY4I4djhQH9LSkmU4BK5/gNhDAmlDOpGHg1EOUyZVvDloXg16fdvt2bVqy7SvBm6tXq91B6Z1ZTVbDV37ycQtvU3dQEB6rOCNIwWfACYJASXzas65HHQuZEkWaJmJyCwvUZlCJi+CVGmx3NqqG5zESQSKsBEzP4ugnIRJXiCD736rJYR5biUcJywVKDLzY/hulqffioJIH58oB65SugLZVDhzI1WLfN7P2z7Mu4B3M5+o0yarK1KCd0yOP70OjZqW/cTsE8PcLLjvt3wR4gyA8QE/47Q0+3j+khxEL25ZeXFIWekU/V2g8qKcLZdZ3tGmksxUwhtSOU3DA5xJ3dtM2b9AjT2E8alrZ8/6JPLefswvEyH1BBIQy/nT8uUn3hwecPXmGMrzs/7sg+YopKybgLU4Z+tG8mmiGH/4esEOVn7S/Ev+rFjqv7brDNZBHJmnfGgIQudqpS6YzTuzgZmEJVIRWXoIfg7gXPBj477Iey5CTtNTJuD9L5qSuraOMGYZFcOenhsO5TfnKTYJOK9Ob2ByiX+5s9f83Tt7Nh55UghjpO99yZ+dSyQfFwy6ehrkXNr6Wj5BZXA6P5D7F4KHim9JxW91639U/ONMOm/Mby0HNT09D53/AA==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH3PV7g8j1tgDOZiV6DK4TJhApMZTLIkL1uK3MbK2pKxZG5fv5KJCRCSSbYqVUTt1unTFx3pkqM4qjou55AKwqg27LX1f1DLrjUDbJVwo45LVrWOSqhiyaVZC8BHQcsysa4NOc9gSLlAVLT1asWslcxqqdqamjWnajm1Wtms24+6dg8pl9DSpVzRtXUcUe7kYdt6llKHIU64Q1EM3BHY8dzxyJGeDio46Z3LHcs8YNoJhUgcw8BlHzBEES5jFhuXxpHPpc8dj8wpElkKLzF93tZf9q5Wq/KqVmbp3KhWKhWjYhvSx+dk/k3vXBSbwR/SgO3WXUQZJRhFZIsUqTGIkPmaG81ZSkQYvwNtGmZFQZdgjWX5LPpNN14D5Ow+iXREMuWoxENkFmATCCAFikG7mwzb+rfPdXC3d5oiygOWxvxk/TVKQJcQsQT8Ei8yK9h9HvFMuTqXgJ0hxVHGyRJ+qjFJEAau/UohIOsR4XL4fK7l7dfWXP6RYsoAf6Utl8YhV0ndOFOdHpkDF/+nZ4f92qHcoyiDTj1cBoPR72XiwbXxawKPePv9Jg5H0F21cwqHzjtS+3a/rE+HdT9bL5s8bzvqbeIAnqcra9hcGRBsr6H/0N94tHudZI9326epfzsJZ9bIbtyjmVj0Zlvz98xLxHy6qIQsyrJNho0ga1xQoLOV+Xd0h8fsduP2x/bmoX+96C3+yvgP7nvjZfORNlvfETbnbNJariGsPntb101G3VV/hkc3MVvMF9Ht82168aPneY10HmJ6w1f9BzwWD+3XnA5zODYWkuBlT8+ARbFU4zHsaQPZLyQ+lhdlIX4pyF2dRGkUF0CF3lG7lLQ4mRQg4juymbv1wK3Xm2bTrTTsWs0yK90r263K/2yrZQ5st1Vo0I7FCcUuowFRsZTK7ubnY4I4djhQH9LSkmU4BK5/gNhDAmlDOpGHg1EOUyZVvDloXg16fdvt2bVqy7SvBm6tXq91B6Z1ZTVbDV37ycQtvU3dQEB6rOCNIwWfACYJASXzas65HHQuZEkWaJmJyCwvUZlCJi+CVGmx3NqqG5zESQSKsBEzP4ugnIRJXiCD736rJYR5biUcJywVKDLzY/hulqffioJIH58oB65SugLZVDhzI1WLfN7P2z7Mu4B3M5+o0yarK1KCd0yOP70OjZqW/cTsE8PcLLjvt3wR4gyA8QE/47Q0+3j+khxEL25ZeXFIWekU/V2g8qKcLZdZ3tGmksxUwhtSOU3DA5xJ3dtM2b9AjT2E8alrZ8/6JPLefswvEyH1BBIQy/nT8uUn3hwecPXmGMrzs/7sg+YopKybgLU4Z+tG8mmiGH/4esEOVn7S/Ev+rFjqv7brDNZBHJmnfGgIQudqpS6YzTuzgZmEJVIRWXoIfg7gXPBj477Iey5CTtNTJuD9L5qSuraOMGYZFcOenhsO5TfnKTYJOK9Ob2ByiX+5s9f83Tt7Nh55UghjpO99yZ+dSyQfFwy6ehrkXNr6Wj5BZXA6P5D7F4KHim9JxW91639U/ONMOm/Mby0HNT09D53/AA==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbZbuo6FH3vV0TpIwqZIIQIkEKAipZOwEFtX65cx4Bp4oTYYejXHzsQChR66JUqUe9sr7324GXXKAgDw3EpRQnDEZG6rbr8X7Wqae+mZSvmWDOUkm1WFBv6QAF21bRQpTR+r1ZkqUtpirqEMkBYXTY03VR0QzHsoW46RskxraJuW2+yNEIJ5dDcpajJ0ioMCHWysHU5TYgTAYqpQ0CIqMOgM3Dvew73dEDOSW7UNiyzgEljyljsqCos+giiIIBFGIVqTT3wqfnUGeAJASxN0DamT+vydu9yuSwuzWKUTFRD0zRVq6rcx6d4ci03rvLNyO+ScbRZe4BEBEMQ4E8gSN0jNo18yQ0mUYLZNDwDrau6JqAVtIIK1EvkWla/AmTsLkQ6IJlQoNAp0HOwPhqjBBGIpD/9bl2+vqyDm73DBBA6jpKQHq1/RwmRBQqiGPkKzTPL2V2OeKJcjRqCTpfAIKV4gR7EmMQAIio9JWiMVz1M+fD5VMraL60o/8P5lCH4m7bU1H2unLp6ojotPEGU/Z+e7fdrgzICQYoarzPV6KkPE2C+hIPJ4+3djDxEnwV70rPrGYV95w2pXbu36+Nh3c3WdhPBXqnwjIbtu5vkOX75jL3KsqCn8R2JoTtO9WW59DS9X5KR93zjeQMSLyrWR7zU5yx1ezBpe+HHzJq/vgcFcHf11gnXr8HLZzik8LYDPh4J0J4Lbx93q4Tcdm6DIS1b6xu/RHGlHQzj/tPcvdFvqprZfktvZ4uXJ3PERiHofwZD+2oU67O4RLyCsWZ8Lpfq/Z/6V077ORwac0kYpO8zBFm+FOPRbUkd3i/AfpYXYcG+Ms5cnVhoFGWIMLkhdglpcVIuQNh3eDM363KrXHbbelOzqqZZ0jWvWXUN/l+1ZOudqmvnGrRhcUTRi8gYi1hCZTfz8zNBGDoUER8lyiJK4RRR+QfEFmBA6pI+PxwRoWgYcRVvmkbH6rT0sl7xrKZV0cxOs9mumm3dsj3PbsnSQ8QeyWPijhlKDhXcOlDwPoI4xkjIvJhzygedMl6SOVikLNCLC1AkKOUXQSK0mG+1yyrFYRwgQVgNIz8NUDGexlmBVLr5NRQAaWbFFMZRwkCgZ8fwbJbH3/KCcB8fCwcqUmoi3lR04kYy8nzO513dzzuHd1Mfi9PGq8sSDDdMDj99DY2Ylt3E7BKDVM+577b8EuIEgPoDP/W4NLt4/gLvRc9vWX5xcFlp5P2dg+K8mC4WadbRipDMhMOrXDl1dYBgynVvPYw+EFF3EOpF186O9VHknf2QX8qmZMAAQyGfPylbXvDmGCAq3hxdfn5Wlz5oDkLyujG0YqdsXsCfJoLxj68X6EDhx81P/GcZJf5Xu05g7cXhefKHBsNkIlbiglmfmQ0YcVjMFTFK9sFPAZwKfmjcFXnHhfFpek8ZOv9FElJXlwGEUUpYV0gKN+zLb8aTrWPkfDl9g8kkfntnr+jZO/vlvjfgQhgCeeeL/+2s4GxcIJLF0yDjUpdX/AnKg5PJntxvCe4rfsktl22v7P5L8Q8zaXwzf7fs1fT4PDT+Ag==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0TpIwpJSIAQFaSUy4geeoXC9LyMjGPAncQOtkOgXz92aChQ2kNHQgre2V577UuWfcVBHFX8gHPEBKZE63ea+j+g7kEQWqGB7JltuFPPM7yaNTVmrg2h69anllfRtT7nKeoTLgARTb1i2Y5hV4yKN7Idv+L6rlW2Gs5vXRsjxiW0dClburaOI8L9PGxTTxnxKeCY+wTEiPsC+sPgduBLTx8UnPTW1ZZlHpC1FkIkvmnCcoggiiJYhjQ2r8wDn6uQ+0M8J0CkDL3HDHlTf9+bZVk5c8qUzc2KZVmm1TClT8jx/FJvXRSbUdgnM7pdtwGhBEMQ4TegSN0isaChFkRzyrBYxF9A26ZtKWgDraEBbZdc6uZHgJzdmUgHJBkHBl8AuwB7QjPEEIFIe37qN/XL8zq43TtigPAZZTE/Wv+MEiIrFNEEhQYvMivYnY94olytKwT9PoFRyvEK3akxSQBEXHtgaIbXA8zl8IVcy9uvrbn84WLKEPxJW67Mfa6SunmiOh08R1z8n57t92uLMgZRilrzmXn/du82YLJcPNa6Ffu139v0SLcGgmZOYd95S2rX7vf18bDuZut908NrOLvORu0ou62npcfNqJrW10Hppp+MB49P1rRbhYnZZZPHxbLeHU0mPPTuvTV9fSy9rLNfyxD2ut7bJBugyHm8WMVOe7yhm/rNw80doSG+oePGG0myyaRKpg70zOfafN2ZvE3Ib3Zdcanwbge0lD2zh1H61x15capwXKrPRl1mXRD6VLrJas8vcfa6uUs6Ixc2P3Laz+HQWEjCMJ2+IiiKpRqPfkfryX4B8b28KAsOjVnu6idKo7hAROgttUtJi59KAcKhL5u5XVd71WojaF9btYbjuLbVvm4EFfmv4Xp2rxF4hQZtWRxRbFMywyqWUtnt/HxPEMY+RyREzFjRFC4Q179B7AABtD55kh8HJRyNqFTxnte1qkHg1uqWU7Ov2zW3UXfall0J3KArf7p2R8U9uWfBTCB2qOC1AwV/QhAnGCmZV3PO5aBzIUuyBKtURHZ5BcoEpfIgYEqL5VavanIcJxFShM2YhmmEyskiyQtk8u2zYgDIcyvmMKFMgMjOP8Mvszx+VxRE+oRYOXCV0jWSTUUnTiSnyOdT3u7Jk6uAD9IQq69NVlcwDLdMDl99DI2alt3E7BKD3C6477b8EOIEgPkNP/O4NLt44QrvRS9OWXlwSFlpFf1dgvKynK5Wad7RupJMJuFNqZy2OUQwlbq3GdF/ETF3EOZZx86O9VHknf2QXyoWZCiAQLGcPy1fnnHnGCKu7hx9+f2sz73QHISUdRNoLU7Z2pG8mijG395eoA+VnzQ/yEdGWfjRrhNYe3FknvKiITCZq5U6YDZfzAakEhZLRaRsH/wUwKngh8ZdkXdchJymaSrQ1280JXVNHUBIUyL6HT037MtvzlNsEuR/OH2CySX+/cxe8y/P7L9vB0MphDHQd774z84GzscFIl1dDXIuTX0tr6AyOJnvyf07wX3Fd4Nq1WtXgz8p/mEmrU/mz5a9mh5/D63/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0824371388237077407</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0824371388237077407</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0824311388237071912</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0824341388237074667</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0824371388237077407</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0B55917A06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>6D55BE1B06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>6F55BACB06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55a68fd3-0b14-4715-839f-96ccd027cddb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true" id="1e7bb601-c7e3-4093-a34d-6920f59ee058"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="7d3afa21-d1cd-4065-aa5f-fa33ae4a458e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E26594AC06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE973604538C1EE5E0401F0A059945A9:322CA84F"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0824451388237085655</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3265239C06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3265239C06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3265239C06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26594AC06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4565E94D06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4765BDCD06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E26594AC06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4565E94D06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4765BDCD06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1NKS7m0A8xw89jj5SB4w5dvYrqBaJvUJuXirz9JoQiIHv1mnMHs7qy99iUrqXMUhbbX4hwSQRjV/G5D/892UKVmAzKCEgbDeQLHeHLtJwPZVceuWEHFKoOu+Zyn4FMuEBUN3S5aJcOyDbt2Y5U82/Ecu1As1x517Q4SLqGlS6Goa4sopNzLwjb0NKEeQ5xwj6IIuCewN2xdXnjS00M5J71ZX7HMAibNqRCxZ5q4EACGMMQFzCKzbu741APuDcmEIpEmsI4Z8Ia+3jufzwvzUoElE9MuFotm0TWlT8DJ5FhvHuWbIfDpmK3WHUQZJRiF5A0pUpcgpizQWuGEJURMo0+gLdMqKmgDFtjAlkOPdfM9QMbum0g7JBOODD5FVg42gDEkQDFotwO/oR9/r4OrvTcJonzMkojvrX9GCegMQhZDYPA8s5zd9xEPlKtZB+z5FIcpJzO4UmMSIwxc6ycwJosLwuXwBVzL2q8tuPwj+ZQB/klb6uY2V0ndPFCdLpkAF/+nZ9v9WqHcoTCFZvsExb8n9xxfL2butXh4s+ZL0yfV68taI6Ow7bwitWn3er0/rJvZWm86I1Vx/hCMn5dP5KI0vTdPkRWcjoLl+LHPgMFo0qvS+MS/EwSuhi/h+QAHqHVSg9sLfmpezvutduXt2hrcmezxqEbO2IXjzCLouz0OToLOZmcnI8tno6gao/ObCW3bV6N5pda7fVvc91iEL89g4MbpaNi10O+lO1pG3eBW8F/XR/Pnt5dlO6xE49mvtA+PfZc33nPazmHXmEvCMH16BizypRoPv6udyn4h8bW8KAsJjHHm6sVKo7gAKvSm2qWkxUulAJHAk81crXt2pew6rU6x4pZKjlXstN2WLf9znZp16rZquQatWOxR7DA6JiqWUtnV/HxNEEceBxpAYsxYiqfA9S8Qu0ggzacDeTgY5XDDpIqXuzW37XTKluW2u91Sq2OXrUqx57acasmu9k517YqJP/RP0hoLSHYVvLKj4APAJCagZF7NOZeDzoUsySuapSK0CjNUoJDKiyBRWiy31somJ1EcgiJsRixIQyjE0zgrkMlXv7aBMM+shOOYJQKFVnYMP81y/1teEOkTEOXAVUptkE2FAzdSKc/n87zd7bxz+FYaEHXaZHVFQvCKye6n96FR07KZmE1imFs5982WH0IcADC/4Gful2YTL5iRrej5LSsvDikrzby/r6jwWkhnszTraFVJZiLhTamcljkEnErdW96wF6DmBsL81rWzYb0XeWPf5ZeKKR0KJCCS86dly2+8OYbA1ZvDl+dn8d0HzU5IWTcBC3HI1gnl00Qx/vL1gj2s/KS5L3/mLAne23UAayuOzFM+NAShE7VSF8zyk9nATMISqYgs2QY/BHAo+K5xU+QNFyGn6SkV8PkXTUldQ0cYs5QKv6tnhm35zXiKZQzeu9MHmEzi13f2gn96Zz9cXgylEEZI3/iSfzsbJBsXLF+s0j/j0tAX8gkqg9PJltyvCW4rfkkqvl1y/6n4u5k0P5g/WrZqun8emn8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o8FH33V3Tqo1NKS7m0A8xw89jj5SB4w5dvYrqBaJvUJuXirz9JoQiIHv1mnMHs7qy99iUrqXMUhbbX4hwSQRjV/G5D/892UKVmAzKCEgbDeQLHeHLtJwPZVceuWEHFKoOu+Zyn4FMuEBUN3S5aJcOyDbt2Y5U82/Ecu1As1x517Q4SLqGlS6Goa4sopNzLwjb0NKEeQ5xwj6IIuCewN2xdXnjS00M5J71ZX7HMAibNqRCxZ5q4EACGMMQFzCKzbu741APuDcmEIpEmsI4Z8Ia+3jufzwvzUoElE9MuFotm0TWlT8DJ5FhvHuWbIfDpmK3WHUQZJRiF5A0pUpcgpizQWuGEJURMo0+gLdMqKmgDFtjAlkOPdfM9QMbum0g7JBOODD5FVg42gDEkQDFotwO/oR9/r4OrvTcJonzMkojvrX9GCegMQhZDYPA8s5zd9xEPlKtZB+z5FIcpJzO4UmMSIwxc6ycwJosLwuXwBVzL2q8tuPwj+ZQB/klb6uY2V0ndPFCdLpkAF/+nZ9v9WqHcoTCFZvsExb8n9xxfL2butXh4s+ZL0yfV68taI6Ow7bwitWn3er0/rJvZWm86I1Vx/hCMn5dP5KI0vTdPkRWcjoLl+LHPgMFo0qvS+MS/EwSuhi/h+QAHqHVSg9sLfmpezvutduXt2hrcmezxqEbO2IXjzCLouz0OToLOZmcnI8tno6gao/ObCW3bV6N5pda7fVvc91iEL89g4MbpaNi10O+lO1pG3eBW8F/XR/Pnt5dlO6xE49mvtA+PfZc33nPazmHXmEvCMH16BizypRoPv6udyn4h8bW8KAsJjHHm6sVKo7gAKvSm2qWkxUulAJHAk81crXt2pew6rU6x4pZKjlXstN2WLf9znZp16rZquQatWOxR7DA6JiqWUtnV/HxNEEceBxpAYsxYiqfA9S8Qu0ggzacDeTgY5XDDpIqXuzW37XTKluW2u91Sq2OXrUqx57acasmu9k517YqJP/RP0hoLSHYVvLKj4APAJCagZF7NOZeDzoUsySuapSK0CjNUoJDKiyBRWiy31somJ1EcgiJsRixIQyjE0zgrkMlXv7aBMM+shOOYJQKFVnYMP81y/1teEOkTEOXAVUptkE2FAzdSKc/n87zd7bxz+FYaEHXaZHVFQvCKye6n96FR07KZmE1imFs5982WH0IcADC/4Gful2YTL5iRrej5LSsvDikrzby/r6jwWkhnszTraFVJZiLhTamcljkEnErdW96wF6DmBsL81rWzYb0XeWPf5ZeKKR0KJCCS86dly2+8OYbA1ZvDl+dn8d0HzU5IWTcBC3HI1gnl00Qx/vL1gj2s/KS5L3/mLAne23UAayuOzFM+NAShE7VSF8zyk9nATMISqYgs2QY/BHAo+K5xU+QNFyGn6SkV8PkXTUldQ0cYs5QKv6tnhm35zXiKZQzeu9MHmEzi13f2gn96Zz9cXgylEEZI3/iSfzsbJBsXLF+s0j/j0tAX8gkqg9PJltyvCW4rfkkqvl1y/6n4u5k0P5g/WrZqun8emn8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eU0gu3jjCDIMoWFAE9ysuZkC4g2iaQpID++pMUi4Do1jPjDGZ15VvfuuRLTgWKIzeoCwFcEkaNdrNq/lsshuNxYexYbglVLN/Pl6xy6Jcs8MbFSckt+4DKptEWIoE2FRJRWTXdvONZjmu55aHjBa4f+H7O80sj07gHLhS0csnlTWMdR1QEadiqmXAaMCSICCiKQQQSB4N6txMozwBlnMza6YZlGpDXZlLOA9vGuRAwRBHOYRbbp/aez2koggGZUiQTDm8xQ1E13/auVqvcyssxPrXdfD5v5yu28gkFmZ6YtV/ZZgjbdMI26waijBKMIvKKNKkuyBkLjXo0ZZzIWfwJtGM7eQ1twRpb2PHpiWm/B0jZfRNpjyQXyBIz5GRgfZgAB4rBuOu3q+bJ9zq42TvkiIoJ47E4WP+MEtAlRGwOoSWyzDJ230c8Uq7aKeCgTXGUCLKEaz0mc4RBGD0OE7LuEKGGLxRG2n5jLdQfyaYM8E/acmrvclXU7SPVaZIpCPl/erbbrw3KPYoSqBWTs3U84PcX/e4o/6c7Tx6ZS3oX/PKiXk0p7DpvSG3b/bY+HNbtbL1tmgz64SNMb2/I6rFQL1Ve/YuH2EETbv8T/x4xr+216n1ZGlwu/Sv7ucyv/EmPr8JmxHvtcHhz/vjcGfDeHXVaD8+/JudxpwCNy6FAi/XiT+mSjEfNW7woj7qPowoUgBRFz7n1LjvjedPp3f0WjdkNLvGH1njoilaPLBbLp9no8uKJNH5dj1rN5WDYW7IreUVfV3fFbvU9p90c9o2ZJAyS8RNgmS31eLSbRkv1C8mv5UVbSGhNUtdgrjVKSKDSrOldWlqCRAkQCQPVzM3aLxQL5xW/mS9WPM938o2zSt1V/1X8stOq1MuZBm1YHFBsMDohOpZW2c38fE0Qx4EAGgK3lizBMxDmF4hNJJHRpn11OBgVMGRKxRuNs9JZ3q8UFEfV9HLTbXit87JzXi/4RffMM41rJm/oDa9PJPB9BS/uKXgfMJkT0DKv51yoQRdSlWSBlomMnNwS5Sgk6iLgWovV1nLBFiSeR6AJ2zELkwhy89k8LZAtNr+uhbBIrUTgOeMSRU56DD/N8vBbVhDlExLtIHRKZ6CaCkduJC/L5/O8K7t5Z/D1JCT6tKnqSk7whsn+p/eh0dOynZhtYlg4Gfftlh9CHAGwv+BnH5ZmGy9ckp3o2S2rLg4lK7WsvwuUW+SS5TJJO1rSkskVvK2U07EHgBOley9D9gzU3kLY37p2tqwPIm/t+/wSOaMDiSTEav6MdPmNN8cAhH5ztNX5WX/3QbMXUtVNwloeszUi9TTRjL98veAAaz9l7qmfFePhe7uOYO3EUXmqh4YkdKpX+oJ5+WQ2MFOwRCki47vgxwCOBd83bou85SLVNI0TCZ9/MbTUVU2EMUuobDfN1LArvylP+TKH4N3pA0wq8W939lp8emc/dDsDJYQxMre+5O/OFknHBYOpnwYpl6q5Vk9QFZxOd+T+jeCu4ntuUalnpfE3xd/PpPbB/NGyU9PD81D7Dw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1NKPyjQEWYo1SMcLV7gcNCXOzlpSqNtgk0K1V9/k2IRED16Z5zB7O6svfZHVnLOQJqYbo8xlHFMiTLwO+q/oBE5yAwNrWm025rtWEgDlmloTsOIoNF2GrbTUpUBYzkaEMYB4R3VrBuWZpia2Zoalmvart2sOe3GvarMUMYEtHCp1VWlSBPC3DJsR80z4lLAMHMJSBFzOXQnvZtrV3i6oOKkds83LMuAWTfmfOnqOqyFCKIkgTVIU/1c3/M5D5k7wQsCeJ6h15gh66ive9frdW1t1Wi20M16va7X27rwCRlenKrdk2ozCgckopt1HxBKMAQJfgGS1A3iMQ2VXrKgGeZx+gG0oRt1Ca2hAmrQsMmpqr8FKNl9EWmPZMaAxmJgVGBjFKEMEYiUX+NBRz39Wgc3e6cZICyiWcoO1t+jhMgKJXSJQo1VmVXsvo54pFzdcwTdAYFJzvAKBXJMlgAiptxmKMLFNWZi+EKmlO1XCib+cDVlCH6nLef6LldBXT9SHR8vEOP/p2e7/dqgzECSo25yz+/O5v/0p1eL4bjNb36MHie+RVEQ33VKCrvOG1Lbdr+uD4d1O1uvm5Z4Ht8/rNdnwXP7Kp5dTWe3zUVgXSTOkEx+mcyaZ+Zq/DMd49Yo+pF6wd3tCqNJNLet33c+G148PBajPBjee0Nw8rzgCbZeGsFs2ry99C9tdhVMH4Lf0aIVzMatq8e7ny3cj+txlMAieDEf789GDmtkBR3OVj06mPjTuU9Xjpmz/sk89sYvrXU8KoogSDKPTi46bznt5rBvrCRhkv95QJBXSzkeA1+5FP0C/HN5kRYcalHp6i6lRjGOCFe7cpeUFjcXAoRDVzRzs7abTsPz+37daVuWbdT7Xrtniv/adsu4bPdalQZtWBxQ7FMSYRlLquxmfj4nCFOXIRKiTFvRHMaIqZ8g+oADZUDG4nBQwtCUChV3vAuv2W9cNg3PuGj6XsPwL71my7NtX4xmQyh4QPmIjLJexFG2r+DOnoKPEcRLjKTMyzlnYtAZFyV5AqucJ0ZtBWoE5eIiyKQWi62ths5wukyQJKynNMwTVFvGy7JAOtv8mhqArLRiBpc04yAxymP4YZaH36qCCJ8QSwcmU/KQaCo6ciNZVT7v8raP3lwVfC8PsTxtoro8w3DDZP/T29DIadlOzDYxyIyK+3bLNyGOAOif8NMPS7ONF67wTvTqlhUXh5CVbtXfJ1B7quWrVV52tCklMxPwulBOQ58gmAvde57SR0T0LYT+pWtny/og8ta+zy/nMZlwwFEq5k8pl194c0wQk2+OgTg/xVcfNHshRd04KvgxWz8RTxPJ+NPXC3Sh9BPmW/Gzpln41q4jWDtxRJ7iocExWciVvGCeP5gNSAUsFopIs13wYwDHgu8bt0XecuFimv7kHH38RZFS11EBhDQnfOCrpWFXfkue/HmJ3DendzClxL/e2QX78M6e31xPhBCmQN364r87a7gcF4hU+TQouXTUQjxBRXCy2JH7V4K7im+ZTsO02v2/Kf5+Jt135veWnZoenofufw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0824451388237085655</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0824451388237085655</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0824401388237080921</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0824431388237083553</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0824451388237085655</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F265B4AC06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5565F94D06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>57654ECD06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d3afa21-d1cd-4065-aa5f-fa33ae4a458e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true" id="7af4cb6a-781a-4269-a422-d50ba0b645e7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="2c72d510-76b3-435c-9e82-1af7b14e1b10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DA65988E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE988A2E5871BA0CE0401F0A05991749:FC172AA7"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0824531388237093148</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>2A65A47E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:2A65A47E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:2A65A47E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>DA65988E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>3D65961F06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3F65A2AF06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:DA65988E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:3D65961F06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:3F65A2AF06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0TpYxVCLg0hAqQ0wAwdaCnQ68uR62zAM8GG2KH0fP2xA6FAaac9UiXqne2117542TWOZokdhJxDKgijWqdZ1//BrlPF8BwbbrXqGC5yxoYfu9h4Llv+M3I87Fmgax3OM+hQLhAVdd0uW45h2YbtjywnsN3ArZb8ivWka3eQcgktXUplXVvNEsqDPGxdz1IaMMQJDyiaAQ8EDoZhrxtIzwAVnPRGbc0yD5g2pkLMA9PEpRgwJAkuYTYza+aeTy3mwZBMKBJZCpuYMa/rm70vLy+lF6fE0olpl8tls1w1pU/MyeRUb5wUmyHu0DFbryNEGSUYJeRfpEj1QExZrIXJhKVETGcfQFumVVbQBqywgS2XnurmW4Cc3ReR9kimHBl8iqwCbABjSIFi0G4Hnbp++rUOrveOUkT5mKUzfrD+HiWgS0jYHGKDF5kV7L6OeKRcjRrgoENxknGyhCs1JnOEgWv9FMZk1SVcDl/Mtbz92orLP1JMGeDvtKVm7nKV1M0j1WmSCXDxf3q22681yh1KMmjcDeJo9NOMhnGr/xsN2z69aVmLfsSXt/Wcwq7zmtS23Zv14bBuZ2uzadhyFq1puLjorsKJk03GT92uRwe381+YRy7hd9bFmdeanV9eWr2530kf7y8zr/3qhcMs8a7o6+0q7hFx61F0lp2YlRE//zmOyb0/uuH2EP+opMy3zu7J1YPNuo/9G79P+GoVX/6pmN6SVx+enDC6pj9t2osG18nj/SJp0mV08zp4PGnzl8rywfsRWgvAyOz1gdXfctrNYd9YSMIwe/4NWBRLNR6dptaW/ULic3lRFhIb49w1mCuN4gKo0Btql5KWIJMCROJANnO9bobeedX3W2Wv6jiuVY4uqqEt/6u6vtWuhn6hQWsWBxQjRsdExVIqu56fzwniWcCBxpAaS5bhKXD9E8QmEkjr0IE8HIxyGDGp4hftqO2H7fOmH3mSutuulG23Fdlty79oyRR07YqJa3qdhmMB6b6Ce3sKPgBM5gSUzKs553LQuZAlWaBlJhKrtEQlCpm8CFKlxXKrf25yMpsnoAibMxZnCZTm03leIJOvf20DYZ5bCcdzlgqUWPkx/DDLw29FQaRPTJQDVyldgGwqHLmRnCKfj/Ou7uZdwIdZTNRpk9UVKcFrJvuf3oZGTct2YraJYW4V3LdbvglxBMD8hJ95WJptvHhJdqIXt6y8OKSsNIr+LlBpUcqWyyzvaEVJZirhTamcljkEnEndex2xP0DNLYT5pWtny/og8ta+zy8TUzoUSMBMzp+WL7/w5hgCV2+Ojjw/q68+aPZCyroJWIljtiiRTxPF+NPXCw6w8pPmvvx5YWn81q4jWDtxZJ7yoSEInaiVumBeP5gNzCQskYrI0l3wYwDHgu8bt0XechFymp4zAR9/0ZTU1XWEMcuo6DT13LArvzlP8TqH4M3pHUwu8Zs7e8U/vLMfet2hFMIZ0re+5O/OBsnHBcsXq/TPudT1lXyCyuB0siP3G4K7im9LxQ/dyl8Vfz+Txjvze8tOTQ/PQ+M/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0TpYxVCLg0hAqQ0wAwdaCnQ68uR62zAM8GG2KH0fP2xA6FAaac9UiXqne2117542TWOZokdhJxDKgijWqdZ1//BrlPF8BwbbrXqGC5yxoYfu9h4Llv+M3I87Fmgax3OM+hQLhAVdd0uW45h2YbtjywnsN3ArZb8ivWka3eQcgktXUplXVvNEsqDPGxdz1IaMMQJDyiaAQ8EDoZhrxtIzwAVnPRGbc0yD5g2pkLMA9PEpRgwJAkuYTYza+aeTy3mwZBMKBJZCpuYMa/rm70vLy+lF6fE0olpl8tls1w1pU/MyeRUb5wUmyHu0DFbryNEGSUYJeRfpEj1QExZrIXJhKVETGcfQFumVVbQBqywgS2XnurmW4Cc3ReR9kimHBl8iqwCbABjSIFi0G4Hnbp++rUOrveOUkT5mKUzfrD+HiWgS0jYHGKDF5kV7L6OeKRcjRrgoENxknGyhCs1JnOEgWv9FMZk1SVcDl/Mtbz92orLP1JMGeDvtKVm7nKV1M0j1WmSCXDxf3q22681yh1KMmjcDeJo9NOMhnGr/xsN2z69aVmLfsSXt/Wcwq7zmtS23Zv14bBuZ2uzadhyFq1puLjorsKJk03GT92uRwe381+YRy7hd9bFmdeanV9eWr2530kf7y8zr/3qhcMs8a7o6+0q7hFx61F0lp2YlRE//zmOyb0/uuH2EP+opMy3zu7J1YPNuo/9G79P+GoVX/6pmN6SVx+enDC6pj9t2osG18nj/SJp0mV08zp4PGnzl8rywfsRWgvAyOz1gdXfctrNYd9YSMIwe/4NWBRLNR6dptaW/ULic3lRFhIb49w1mCuN4gKo0Btql5KWIJMCROJANnO9bobeedX3W2Wv6jiuVY4uqqEt/6u6vtWuhn6hQWsWBxQjRsdExVIqu56fzwniWcCBxpAaS5bhKXD9E8QmEkjr0IE8HIxyGDGp4hftqO2H7fOmH3mSutuulG23Fdlty79oyRR07YqJa3qdhmMB6b6Ce3sKPgBM5gSUzKs553LQuZAlWaBlJhKrtEQlCpm8CFKlxXKrf25yMpsnoAibMxZnCZTm03leIJOvf20DYZ5bCcdzlgqUWPkx/DDLw29FQaRPTJQDVyldgGwqHLmRnCKfj/Ou7uZdwIdZTNRpk9UVKcFrJvuf3oZGTct2YraJYW4V3LdbvglxBMD8hJ95WJptvHhJdqIXt6y8OKSsNIr+LlBpUcqWyyzvaEVJZirhTamcljkEnEndex2xP0DNLYT5pWtny/og8ta+zy8TUzoUSMBMzp+WL7/w5hgCV2+Ojjw/q68+aPZCyroJWIljtiiRTxPF+NPXCw6w8pPmvvx5YWn81q4jWDtxZJ7yoSEInaiVumBeP5gNzCQskYrI0l3wYwDHgu8bt0XechFymp4zAR9/0ZTU1XWEMcuo6DT13LArvzlP8TqH4M3pHUwu8Zs7e8U/vLMfet2hFMIZ0re+5O/OBsnHBcsXq/TPudT1lXyCyuB0siP3G4K7im9LxQ/dyl8Vfz+Txjvze8tOTQ/PQ+M/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxBQeMJzBjbi1JCAlQ0sPLGUXeBhVbIpbMJV9/JBMToCRNz0xmiLa31l77oiVdcZTEjh9wDqkgjGq9dl3/10aO66EQG6FdiQzXipDhWU/IqCDXsxwXvAiVda3HeQY9ygWioq47ll02bMdwvLFd9h3Xv7RLNded6toEUi6hpUvJ0rVNElPu52HrepZSnyFOuE9RAtwX2B8F/Vtfevqo4KQ3rnYs84BpYy7E0jdNXAoBQxzjEmaJeWUe+VyF3B+RGUUiS+E1Zsjr+uve9XpdWpdLLJ2ZjmVZplUzpU/Iyeyr3vhSbIawRyO2W7cQZZRgFJMXpEj1QcxZqAXxjKVEzJN3oG3TthS0ARtsYNulX3XzLUDO7pNIRyRTjgw+R3YBNoQIUqAYtB/DXl3/+rkO7vaOU0R5xNKEn6z/jhLQFcRsCaHBi8wKdp9HPFOuxhVgv0dxnHGygjs1JkuEgWv3KURkc0u4HL6Qa3n7tQ2Xf6SYMsB/05Yr85CrpG6eqU6bzICL/9Ozw37tUCYozqCxvYgW16zbTzbf7p+n/ccJqjjr295FsxLUcwqHzjtS+3a/rk+HdT9br5v4Q3SRResqGrQi21o8D787leZgAS/9m9lq6E3x4/TX/fKiZbFMpMnCTl7Gw8Vi0gu6kdPd0ruYIG9wba8GnVb0JfOeXu7vHzvT771hdzLebL1pc4V+Ot1asNi8ZLx1M/52MwkH4+rYbc5ql/z6xx3rDx63/1Svb6ZeOQwf2GI2CTJYwBfzx8IOb2eP0+uLb6GY3E7LD/W3nA5zODYWkjDKnn4BFsVSjUevrXVlv5D4WF6UhYRGlLv6S6VRXAAVekPtUtLiZ1KASOjLZu7W5Xblslaxu1alVi67ttVq1gJH/ldzPVtm7xUatGNxQrHFaERULKWyu/n5mCBOfA40hNRYsQzPgesfILaRQFqPDuXhYJTDmEkV7zZbzYoTNNtBrdnuVC2v2upUrKDT6njlmt2VCn7HxIAO0iASkB4reOVIwYeAyZKAknk151wOOheyJM9olYnYLq1QiUImL4JUabHc6l2anCTLGBRhM2FhFkNpOV/mBTL57tcxEOa5lXC8ZKlAsZ0fw3ezPP1WFET6hEQ5cJVSE2RT4cyN5Bb5vJ937TDvAj7IQqJOm6yuSAneMTn+9DY0alr2E7NPDHO74L7f8pcQZwDMD/iZp6XZxwtX5CB6ccvKi0PKSqPo7zMqPZey1SrLO1pVkplKeFMqp22OAGdS97ZjtgBq7iHMT107e9Ynkff2Y36ZmNORQAISOX9avvzEm2MEXL05evL8bD77oDkKKesmYCPO2VqxfJooxh++XrCPlZ8038ufNUvDt3adwTqII/OUDw1B6Eyt1AWzfWc2MJOwRCoiSw/BzwGcC35s3Bd5z0XIaXrKBLz/RVNSV9cRxiyjotfWc8Oh/OY8xXYJ/pvTbzC5xL/e2Rv+7p39s387kkKYIH3vS/7sbJB8XDDo6mmQc6nrG/kElcHp7EDuXwkeKr4TVC4Dt9r5k+IfZ9L4zfy75aCmp+eh8R8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xBQOOJzDDJbTkSiAnTftyRsgbUGNLRpKN068/kokJEJKmZyYzRNtba6990ZJOBUpiL+wKAVwSRo3RoG3+6zr+HLdmkTVzIs/ygwCsoOHPLG/uRdib4RlquKYxEiKDERUSUdk2PcetW65necGdWw89P2w0a04Q/DSNe+BCQSuXmmMaRRJTEZZh22bGaciQICKkKAERShxOu1eXofIMUcXJ7JxuWJYBeWcpZRraNq5FgCGOcQ2zxD6193xOIxFOyYIimXF4jhmJtvm8d71e19b1GuML23Mcx3ZObOUTCbL4bHY+VZshGtE526z7iDJKMIrJb6RJXYFcssjoxgvGiVwmb0C7tutoaAsKbGHXp59N+yVAye6DSHskuUCWWCK3ApvAHDhQDMY/k1Hb/PyxDm723nFExZzxRBys/44S0BxilkJkiSqzit3HEY+Uq3MKOBxRHGeC5HCtxyRFGIQx5jAnxSURavgiYZTtNwqh/kg1ZYD/pi2n9i5XRd0+Up0BWYCQ/6dnu/3aoNyjOINOfUWaF+dd/lBf1S9XxdMtzs5uJoG8T3G7pLDrvCG1bffz+nBYt7P1vOlHdzUvii/jB8TT5KwVsKfG5XnCHmX+2I8uEzJe+GgGjDZyb/1TTn/5w8fp/cV6cc+L3tUFqdvF17v067A1Cb5dfWqRdHDdv43PvjxwyK/qvQEh32fT9e331tTL754W51SOrscoy2/nA9lrFfFP4YvmuAe3WeNLws9vBzfUbyYE/V5/us/O8vPexY+v376TSTaeFIS1X3LazWHfWEnCNJv9AiyrpR6P0cAYqn4h+b68aAuJrHnpGqZao4QEKs2O3qWlJcyUAJEoVM3crOvDZqPrdYdO86Re912n3zvpeuq/Ez9whyfdoNKgDYsDin1G50TH0iq7mZ/3CeIkFEAj4FbOMrwEYb6DOEASGSM6UYeDUQF3TKn40Gs1nEHLHQQ9/6zR7zYDr9848VtD32/2hvXANK6ZvKE3vDuXwPcVvLmn4BPAJCWgZV7PuVCDLqQqyQrlmYzdWo5qFDJ1EXCtxWpr0LAFSdIYNGE7YVEWQy1dpmWBbLH59SyERWklAqeMSxS75TF8M8vDb1VBlE9EtIPQKfVANRWO3Eh+lc+rvP2jN1cF380iok+bqq7kBG+Y7H96GRo9LduJ2SaGhVtx3275S4gjAPY7/OzD0mzjRTnZiV7dsuriULLSqfq7QrVVLcvzrOxoS0smV/C2Uk7XngLOlO493bFHoPYWwv7QtbNlfRB5a9/nl8klnUokIVHzZ5TLD7w5piD0m2Okzk/x0QfNXkhVNwmFPGbrx+ppohm/+3rBIdZ+yjxWP2vGo5d2HcHaiaPyVA8NSehCr/QF8/TGbGCmYIlSRMZ3wY8BHAu+b9wWectFqmmaZRLe/mJoqWubCGOWKdUfmKVhV35LnvIphfDF6RVMKfHPd3Yh3ryzH64up0oIE2RufcmfnS1SjgsGUz8NSi5ts1BPUBWcLnbk/pngruJ7XaX4fuvsT4q/n0nnlfm1Zaemh+eh8x8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0824531388237093148</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0824531388237093148</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0824481388237088674</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0824501388237090911</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0824531388237093148</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EA65A88E06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>4D65B61F06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>4F65B2AF06933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c72d510-76b3-435c-9e82-1af7b14e1b10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true" id="2e50f51e-9179-4087-9d80-0e865186584b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="adbe4c95-cc13-4df0-858e-ffd6e0f6b284"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>C27520A016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40BB061C7E0401F0A0799472F:C4660FD"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082521388237102609</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>12751E8016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:12751E8016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:12751E8016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>C27520A016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>2575905116933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2775F1F116933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:C27520A016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:2575905116933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:2775F1F116933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTn0sv1LZ0gJlyUat4OeD29nImpAuItmltUsD9609SLAKiG8+MM5jVlW9965IvaTKUxJYfMAY5JylVwl5L/deycMPB5kTDkQeajSxbQxPX0SKEUaMejbFrOqoSMlZASBlHlLdUyzDrmmlplndr1n3L9o+9mmM1nlTlDnImoIVLzVCVZRJT5pdhW2qRUz9FjDCfogSYz7E/Ci4HvvD0UcVJbTdXLMuAeXvGeebrOq5FgCGOcQ2nid7Ut3yaEfNHZEoRL3J4jxmxlvq+d7FY1Bb1WppPdcswDN1o6MInYmR6pLZ/VZshCukkXa27iKaUYBSTP0iSugQ+SyMliKdpTvgs+QLa1E1DQmuwxBo2bXqk6h8BSnYHIm2RzBnS2AyZFdgQJpADxaD8HoYt9eiwDq723uaIskmaJ2xn/TNKQOcQpxlEGqsyq9gdjrinXO0mYD+kOC4YmcOVHJMMYWDKTQ4TshwQJoYvYkrZfmXJxB+ppgzwT9rS1De5Cur6nur0yBQY/z892+zXCuUOxQW0r4Z3rn572U9indfRxcUtyfPTY+sEfvdbJYVN5xWpdbvf17vDup6t902Pbnr94o0nnak7dpfDlws+tf6ZFp3+yVWv67mn4ztyfY+z8aMxPutZp3+uO28L5+H8Pn3KEmswGjxy6wY9XgTdJb/7ZblZPcCDRde9NF648zQ6s/ClRcPzOwGGw6z7ek46/Gr+3INxPz6z7WxoL2+evGA2Z0435ElInMbDq3PcOD/59fbWg5teZ3kBZjSG53u9HrQ+ctrMYdtYScKoGD8D5tVSjkfYU05EvxD/Xl6khUTapHT1M6lRjAPlalvuktLiF0KASOSLZq7WXcs9tozAMJ1GvW6bRrfTCCzxX8P2zJNG4FUatGKxQ7Gb0gmRsaTKrubne4I48RnQCHJtnhZ4Bkz9BrGHOFJCOhSHI6UMblOh4kb9uCvoBZ7tWU7HsLt2z+w47knHtHtev++qylXKr+l1Hkw45NsK7mwp+BAwyQhImZdzzsSgMy5K8ormBY/N2hzVKBTiIsilFout3rHOSJLFIAnrSRoVMdSyWVYWSGerX0tDmJVWwnCW5hzFZnkMv8xy91tVEOETEenAZEodEE2FPTeSXeXzdd6Nzbwr+KCIiDxtoro8J3jFZPvTx9DIaVlPzDoxzMyK+3rLDyH2AOjf8NN3S7OOF83JRvTqlhUXh5CVdtXfV1R7rRXzeVF21JWSmQt4XSinqY8AF0L33m7TF6D6GkI/6NpZs96JvLZv8yv4jI444pCI+VPK5QFvjhEw+eYIxflZHvqg2Qop6sZhyffZurF4mkjG375esI+lnzDfiJ9Fmkcf7dqDtRFH5CkeGpzQqVzJC+bti9nAqYAlQhHTfBN8H8C+4NvGdZHXXLiYpnHB4esvipS6loowTgvKw55aGjblt+TJ3zLwP5w+wZQS/35nL9mXd/bD5WAkhDBB6tqX/N1ZI+W4YFDl06Dk0lKX4gkqgtPphty/E9xUfFMovtn3/qr425m0P5k/WzZqunse2v8B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTn0sv1LZ0gJlyUat4OeD29nImpAuItmltUsD9609SLAKiG8+MM5jVlW9965IvaTKUxJYfMAY5JylVwl5L/deycMPB5kTDkQeajSxbQxPX0SKEUaMejbFrOqoSMlZASBlHlLdUyzDrmmlplndr1n3L9o+9mmM1nlTlDnImoIVLzVCVZRJT5pdhW2qRUz9FjDCfogSYz7E/Ci4HvvD0UcVJbTdXLMuAeXvGeebrOq5FgCGOcQ2nid7Ut3yaEfNHZEoRL3J4jxmxlvq+d7FY1Bb1WppPdcswDN1o6MInYmR6pLZ/VZshCukkXa27iKaUYBSTP0iSugQ+SyMliKdpTvgs+QLa1E1DQmuwxBo2bXqk6h8BSnYHIm2RzBnS2AyZFdgQJpADxaD8HoYt9eiwDq723uaIskmaJ2xn/TNKQOcQpxlEGqsyq9gdjrinXO0mYD+kOC4YmcOVHJMMYWDKTQ4TshwQJoYvYkrZfmXJxB+ppgzwT9rS1De5Cur6nur0yBQY/z892+zXCuUOxQW0r4Z3rn572U9indfRxcUtyfPTY+sEfvdbJYVN5xWpdbvf17vDup6t902Pbnr94o0nnak7dpfDlws+tf6ZFp3+yVWv67mn4ztyfY+z8aMxPutZp3+uO28L5+H8Pn3KEmswGjxy6wY9XgTdJb/7ZblZPcCDRde9NF648zQ6s/ClRcPzOwGGw6z7ek46/Gr+3INxPz6z7WxoL2+evGA2Z0435ElInMbDq3PcOD/59fbWg5teZ3kBZjSG53u9HrQ+ctrMYdtYScKoGD8D5tVSjkfYU05EvxD/Xl6khUTapHT1M6lRjAPlalvuktLiF0KASOSLZq7WXcs9tozAMJ1GvW6bRrfTCCzxX8P2zJNG4FUatGKxQ7Gb0gmRsaTKrubne4I48RnQCHJtnhZ4Bkz9BrGHOFJCOhSHI6UMblOh4kb9uCvoBZ7tWU7HsLt2z+w47knHtHtev++qylXKr+l1Hkw45NsK7mwp+BAwyQhImZdzzsSgMy5K8ormBY/N2hzVKBTiIsilFout3rHOSJLFIAnrSRoVMdSyWVYWSGerX0tDmJVWwnCW5hzFZnkMv8xy91tVEOETEenAZEodEE2FPTeSXeXzdd6Nzbwr+KCIiDxtoro8J3jFZPvTx9DIaVlPzDoxzMyK+3rLDyH2AOjf8NN3S7OOF83JRvTqlhUXh5CVdtXfV1R7rRXzeVF21JWSmQt4XSinqY8AF0L33m7TF6D6GkI/6NpZs96JvLZv8yv4jI444pCI+VPK5QFvjhEw+eYIxflZHvqg2Qop6sZhyffZurF4mkjG375esI+lnzDfiJ9Fmkcf7dqDtRFH5CkeGpzQqVzJC+bti9nAqYAlQhHTfBN8H8C+4NvGdZHXXLiYpnHB4esvipS6loowTgvKw55aGjblt+TJ3zLwP5w+wZQS/35nL9mXd/bD5WAkhDBB6tqX/N1ZI+W4YFDl06Dk0lKX4gkqgtPphty/E9xUfFMovtn3/qr425m0P5k/WzZqunse2v8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3S6H8+UNi3XjjBTuexTD4IKXvDlTEwWEHebYpMC+utPUiwCott9ZpzBrK5861uXfMmpwHHk+oEQkEqWcCPsNM1/nRqijw3AlkenFatcrntWHdGa5TnVGvYwpW6NmkYoRAYhFxJz2TRdB3kWci23Pkae71Z8B5W8evXBNG4hFQpauZQc01jHERd+HrZpZin3EyyY8DmOQfiS+KPgou8rTx8XnMzW6YZlHjBtzaVc+LZNShQIRBEpkSS2T+09n1Mq/BGbcSyzFN5iUtE03/auVqvSyisl6cx2HcexnYatfKhgsx9m66TYDDTk02SzbmOecEZwxF6xJnUBcp5QI4hmScrkPP4EGtnI0dAWrIlFUJn/MO33ADm7byLtkUwFtsQcowLsGqaQAidg3FyHTfPH9zq42TtOMRfTJI3FwfrPKAFfQpQsgFqiyKxg933EI+VqnQLxQ06iTLAlDPSYLDABYVymMGXrPhNq+Kgw8vYba6H+WDFlQP6kLaf2LldF3T5SnQ6bgZD/p2e7/dqg3OIog1Z3vKCuM6VSdOYDN6xS76q/CPhVOBHNnMKu84bUtt1v68Nh3c7W2yb+65KN+zd3vSHph9feffzC66/3Ap7Oh57DZIyDUAyGk/Oz6GroeuVu12sP3Pu7h5ts8Ff5n3NW/fmQTGbTOWLu8CT7+Tp8Pr+gz0/Oc3B7i2RnUq5FZ5PJyAl6MmoHcJk9/bweLusVNOD9ahfPru4JWokH3HMG4+rooRP1y9FNGsT0pFcJ7rrLv9uT8V15Im37Ils133PazWHfWEjCKHt8AiKLpR6PsGP0VL+w/FpetIVRa5q7+gutUUICl2ZL79LS4mdKgBj1VTM3a7dSqzScCkLVhueVkdM+awSu+q9RrqNeI6gXGrRhcUCxnfAp07G0ym7m52uCJPYFcAqptUwyMgdhfoHYwRIbIb9WhyPhAsaJUvFax6v02m1Pka0HQS/oON1KUHNct1s9c7uoZxqDRA75MA2mEtJ9Ba/uKfg1ELZgoGVez7lQgy6kKskzXmYyQqUlLnHI1EWQai323XK9YgsWLyLQhO04oVkEpcV8kRfIFptf18JE5FYmyCJJJY5Qfgw/zfLwW1EQ5UOZdhA6pTNQTYUPN1LZrxT5fJ53YzfvAj7IKNOnTVVXpoxsmOx/eh8aPS3bidkmRgQquG+3/CHEEQD7C372YWm28eiS7UQvbll1cShZaRX9fcal51K2XGZ5R2taMlMFbyvlRPYISKZ072Wc/AJubyHsb107W9YHkbf2fX6ZnPORxBJiNX9GvvzGm2MEQr85QnV+1t990OyFVHWTsJbHbO1IPU004y9fL8Qn2k+ZL9XPKknfEz+GtRNH5akeGpLxmV7pC+blk9kgiYJlShGTdBf8GMCx4PvGbZG3XKSapsdMwudfDC11TRMTkmRchh0zN+zKb85TvizAf3f6AJNL/NudvRaf3tn3F/2REsIYm1tf9ntni+XjQsDUT4OcS9NcqyeoCs5nO3L/RnBX8ZFbq6Bu3fmd4u9n0vpg/mjZqenheWj9Bw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3vr/C4jx1jy2AunsCMA6F1m1sDpJeXb4S8YKVGdiTZOP31lUxMgJA0/WYyQ7RenT170ZFOBF4lrh8IAVzSlBnhqG/+RzDqRriDrPkcY6vVnves7qINVgt77ai3ILgJHdMIhcghZEJiJvum66CmhVzL7U5R03c93/Eajtv6aRq3wIWCVi4NxzTKVcKEX4XtmzlnfooFFT7DKxC+JP4kuDj3laePa07m4GTDsgrIB7GUmW/bpBEBgSQhDZKu7BN7z+ckEv6ELhmWOYfHmJHom4971+t1Y91spHxpu47j2E7PVj6RoMv35uBdvRmikC3SzXqIWcoowQn9jTWpC5BxGhlBskw5lfHqBWhkI0dDW1ASi6AWe2/aTwEqdm9E2iPJBbZEjFENdgML4MAIGLObsG++f1sHN3unHDOxSPlKHKz/jRKwApI0g8gSdWY1u7cjHinX4ASIHzKS5IIWcKnHJMMEhHHNYUHLcyrU8EXCqNpvlEL90XrKgPxLW07sXa6Kun2kOiO6BCH/T892+7VBucVJDoPZp7y4+u5eed9C5yERQFrRcHV79unT9bpfUdh13pDatvtxfTis29l63ESK8eiO855YtM9bo1/rEZQdm8vy5210jvKzYla4cexNL8cjhjp4LLwSJ+3rj970c/Yl/zjrxhN8GU3oNAL727svl5P5w7r8+Qvs6bTgF1/kj6Urvn4gxTq+yFD2IfCugnKdwgx/vpudXjh3s1Get51O1nV/hz/I/Dy8KtC1d7mk6J0je8v26Fu8oB9hwXAsv677Tznt5rBvrCVhks/vgMh6qccjHBlj1S8sX5cXbaGRtahc/UxrlJDApDnQu7S0+LkSIBr5qpmbtdvpeGM0RqjdazZbyBme9gJX/ddrddG4F3RrDdqwOKA4TNmC6lhaZTfz8zpBsvIFsAi4VaQ5iUGYryCOsMRGyG7U4UiZgGmqVLzpIS84DTx0Og5GrnPaPkPDZhD0XK/ZHA/PkGlcpvKKXfFgIYHvK3h7T8FvgNCMgpZ5PedCDbqQqiT3uMhlghoFbjDI1UXAtRb7bqvr2YKusgQ0YXuVRnkCjSzOqgLZYvPrWpiIykoFyVIucYKqY/hiloff6oIon4hqB6FTOgXVVHh2I7V8r87nWd6tozdXDR/kEdWnTVVXcko2TPY/PQ2NnpbtxGwTIwLV3Ldb/hHiCID9Cj/7sDTbeFFBd6LXt6y6OJSsDOr+3uPGfSMvirzqaEdLJlfwtlJOZE+A5Er3HqbpL2D2FsJ+07WzZX0QeWvf55fLmE0klrBS82dUyze8OSYg9JsjVOenfOuDZi+kqpuEUh6zDRP1NNGMX329EJ9oP2W+Vj/rlEdP7TqCtRNH5akeGpKypV7pC+bhhdkgqYKlShFTvgt+DOBY8H3jtshbLlJN0zyX8PIXQ0td38SEpDmT4cisDLvyW/GUDxn4T07PYCqJf7yzS/Hinf394nyihHCFza0v/buzRatxIWDqp0HFpW+W6gmqgrPljtw/EtxVfOR2PHTWdf6m+PuZDJ6Zn1t2anp4HgZ/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082521388237102609</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082521388237102609</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0824571388237097286</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0824591388237099827</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_082521388237102609</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>D27540A016933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>3575A05116933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>377512F116933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>adbe4c95-cc13-4df0-858e-ffd6e0f6b284</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true" id="0379ef9e-8a9c-49a4-bb94-7fc19923352a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="bdfdd7ad-7a7c-435d-9a32-ba3cf42456e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>BA7541C216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40BE661C7E0401F0A0799472F:170AFB0E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825111388237111678</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>0A75E9A216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0A75E9A216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:0A75E9A216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>BA7541C216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1D75688316933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1F75DF2416933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:BA7541C216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1D75688316933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:1F75DF2416933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/bhT+o7QEWYQhMVVWXlx1/vlTkgPEG2T2iSA/vqbFIuA6Lp3xhnM6clznvOSJznlKE28qMU55IIwavQ7DfNfP8BxzQmmVojq2Apm/tSq1WeO5QR1CKbx1A2waxp9ziX0KReIiobpOa5vuZ7l1cauH3lh5JxUgrD6j2ncQs4VtHKpOKaxThPKoyJsw5Q5jRjihEcUpcAjgaNR6+oyUp4RKjmZzdMNyyJg3lwIkUW2jSsxYEgSXMEstU/tPZ/TmEcjMqdIyBxeYsa8Yb7sXa1WlZVfYfnc9hzHsZ26rXxiTuZfzeaXcjPEfTpjm3UbUUYJRgl5RprUFYgFi41WMmc5EYv0HWjXdh0NbcEaW9gN6FfTfg1QsPsk0h7JnCOLL5Bbgg1hBjlQDMZk2G+YXz/Xwc3ecY4on7E85Qfrv6MEdAkJyyC2eJlZye7ziEfK1TwFHPUpTiQnS7jWY5IhDNz4mcOMrC8JV8MXc6Nov7Hm6o+UUwb4b9pyau9yVdTtI9XpkDlw8X96ttuvDcotSiQ0RwMW336/6PvyoVVzHy9/S08OHgfh7+SuUVDYdd6Q2rb7ZX04rNvZetlEp6J3DVkIJ63z0eRWBPNeIOSPf1zn+a7XRb1n2e7G3wbn/Ire3z79GC/PnKvqJJV3Pf9b+wcb8snl8m6xsp++ub++hJeLlXc/9x8u/Lubs2ycP65bv3rnwT1c08m9XZVuNpyIyVNwJ9L5s7N2/Ono4RdbD51Z52LKV9+h+rxauL3Mubn40s3wzfP44ebn2aAeO9/Bad80XnPazWHfWErCSE7vAYtyqcej3zG6ql9IfCwv2kJia1a4RpnWKC6ACrOpd2lpiaQSIBJHqpmb9VnrJAzctudW674fuE77rN7y1H/1oOZ2661aqUEbFgcU24zOiI6lVXYzPx8TxGnEgcaQW0sm8QK4+QFiBwlk9OlQHQ5GOYyZUvGq1+12wiD0W9WgGp7Xqudh6J+0O0419L1O2DWNayYGdJC3ZgLyfQWv7in4EDDJCGiZ13PO1aBzoUryiJZSJG5liSoUpLoIcq3FkRfUQpuTNEtAE7ZTFssEKtkiKwpk882vZyHMCyvhOGO5QIlbHMN3szz8VhZE+cREO3Cd0hmopsKbGymIwjKf9/Ou7+ZdwrdkTPRpU9UVOcEbJvufXodGT8t2YraJYe6W3Ldb/hLiCID9AT/7sDTbePGS7EQvb1l1cShZaZb9fUSVx4pcLmXR0RMtmbmCt5VyuvYIsFS69zRmD0DtLYT9qWtny/og8ta+z0+KBR0JJCBV82cUy0+8OUbA9Zujr87P+rMPmr2Qqm4C1uKYrZ2op4lm/OHrBUdY+ynzT/WzYnn82q4jWDtxVJ7qoSEIneuVvmCe3pkNzBQsUYrI8l3wYwDHgu8bt0XechFqmqZSwPtfDC11DRNhzCQV/Y5ZGHblt+ApnjKIXp3ewBQS/3Jnr/m7d/bvq8uREsIUmVtf8mdnixTjgsHUT4OCS8NcqyeoCk7nO3L/QnBX8R2l+OdK5P+k+PuZNN+Y31p2anp4Hpr/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/bhT+o7QEWYQhMVVWXlx1/vlTkgPEG2T2iSA/vqbFIuA6Lp3xhnM6clznvOSJznlKE28qMU55IIwavQ7DfNfP8BxzQmmVojq2Apm/tSq1WeO5QR1CKbx1A2waxp9ziX0KReIiobpOa5vuZ7l1cauH3lh5JxUgrD6j2ncQs4VtHKpOKaxThPKoyJsw5Q5jRjihEcUpcAjgaNR6+oyUp4RKjmZzdMNyyJg3lwIkUW2jSsxYEgSXMEstU/tPZ/TmEcjMqdIyBxeYsa8Yb7sXa1WlZVfYfnc9hzHsZ26rXxiTuZfzeaXcjPEfTpjm3UbUUYJRgl5RprUFYgFi41WMmc5EYv0HWjXdh0NbcEaW9gN6FfTfg1QsPsk0h7JnCOLL5Bbgg1hBjlQDMZk2G+YXz/Xwc3ecY4on7E85Qfrv6MEdAkJyyC2eJlZye7ziEfK1TwFHPUpTiQnS7jWY5IhDNz4mcOMrC8JV8MXc6Nov7Hm6o+UUwb4b9pyau9yVdTtI9XpkDlw8X96ttuvDcotSiQ0RwMW336/6PvyoVVzHy9/S08OHgfh7+SuUVDYdd6Q2rb7ZX04rNvZetlEp6J3DVkIJ63z0eRWBPNeIOSPf1zn+a7XRb1n2e7G3wbn/Ire3z79GC/PnKvqJJV3Pf9b+wcb8snl8m6xsp++ub++hJeLlXc/9x8u/Lubs2ycP65bv3rnwT1c08m9XZVuNpyIyVNwJ9L5s7N2/Ono4RdbD51Z52LKV9+h+rxauL3Mubn40s3wzfP44ebn2aAeO9/Bad80XnPazWHfWErCSE7vAYtyqcej3zG6ql9IfCwv2kJia1a4RpnWKC6ACrOpd2lpiaQSIBJHqpmb9VnrJAzctudW674fuE77rN7y1H/1oOZ2661aqUEbFgcU24zOiI6lVXYzPx8TxGnEgcaQW0sm8QK4+QFiBwlk9OlQHQ5GOYyZUvGq1+12wiD0W9WgGp7Xqudh6J+0O0419L1O2DWNayYGdJC3ZgLyfQWv7in4EDDJCGiZ13PO1aBzoUryiJZSJG5liSoUpLoIcq3FkRfUQpuTNEtAE7ZTFssEKtkiKwpk882vZyHMCyvhOGO5QIlbHMN3szz8VhZE+cREO3Cd0hmopsKbGymIwjKf9/Ou7+ZdwrdkTPRpU9UVOcEbJvufXodGT8t2YraJYe6W3Ldb/hLiCID9AT/7sDTbePGS7EQvb1l1cShZaZb9fUSVx4pcLmXR0RMtmbmCt5VyuvYIsFS69zRmD0DtLYT9qWtny/og8ta+z0+KBR0JJCBV82cUy0+8OUbA9Zujr87P+rMPmr2Qqm4C1uKYrZ2op4lm/OHrBUdY+ynzT/WzYnn82q4jWDtxVJ7qoSEIneuVvmCe3pkNzBQsUYrI8l3wYwDHgu8bt0XechFqmqZSwPtfDC11DRNhzCQV/Y5ZGHblt+ApnjKIXp3ewBQS/3Jnr/m7d/bvq8uREsIUmVtf8mdnixTjgsHUT4OCS8NcqyeoCk7nO3L/QnBX8R2l+OdK5P+k+PuZNN+Y31p2anp4Hpr/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxnjD2ywPYEZCjR1QmgClDZ5uSPkBZTYMkgykP76SiYmQEma3JnMEK1XZ89+6EjnHKWJE7Y4ByZIRrWo09D/C9xa7PlebFheUDVcb1ozkB3Yhl91YxRM3AC7ga5FnOcQUS4QFQ3dseyqYTuG44/sauh4oW1VnMC/17UxMC6hpUvF0rVNmlAeFmEbes5omCFOeEhRCjwUOBy2rnuh9AxRyUlvnm9ZFgFZcy7EIjRNXIkBQ5LgCs5S89w88DmPeTgkM4pEzuA5Zswb+vPe9XpdWVcrGZuZjmVZphWY0ifmZPZZb34qN0Mc0Wm2XbcRzSjBKCG/kSJ1DWKexVormWWMiHn6CrRt2paCNmCDDWy79LNuvgQo2L0T6YAk48jgc2SXYAOYAgOKQfsxiBr65/d1cLt3xBDl04yl/Gj9MUpAV5BkC4gNXmZWsns/4olyNc8BhxHFSc7JCvpqTBYIA9duGEzJpke4HL6Ya0X7tQ2Xf6ScMsAfacu5uc9VUjdPVKdDZsDF/+nZfr+2KGOU5NB8ul2MbnO7zse+GEyFQ/uXV4/L2uiau42Cwr7zltSu3c/r42Hdzdbzpk0SL+8eMjN7cMezSaf3eLvqT++j33B5E6y6eF7v0LxeX8aoDbdL57r3o48e0863ibe59Nt3y+HZZhz3WWo/RtHFJ7G6w+xiFvV/419DtmHXY/thNHG/jWdL3sVn0U908bDOay3S5fkNgA9RD7LJjTibo1+PP2fdfov3vg1W0f3gyv/k+rFjr8eW+3A3YWdXFwvrrvGS034Oh8ZSEob55AGwKJdqPKKO9lX2C4m35UVZSGxMC9dwoTSKC6BCb6pdSlrCXAoQiUPZzO3a7tS9mu9X7VpQrbq21f4StBz5X+D69teg5ZcatGVxRLGd0SlRsZTKbufnbYI4DTnQGJixynI8B66/gdhBAmkRHcjDkVEOo0yqeNWrdy3fabddK+g43cDzXOdL2wssxw+qta6ja/1MfKffWWsqgB0qeO1AwQeAyYKAknk151wOOheyJEu0ykViV1aoQiGXFwFTWhw6ru+ZnKSLBBRhM83iPIHKYr4oCmTy7a9jIMwLK+F4kTGBErs4hq9mefytLIj0iYly4CqlLyCbCiduJKvM5/W8g/28S/hWHhN12mR1BSN4y+Tw08vQqGnZTcwuMcztkvtuywchTgCYb/Azj0uzixevyF708paVF4eUlWbZ3yWqLCv5apUXHa0ryWQS3pTKaZtDwLnUvadR9gjU3EGY77p2dqyPIu/sh/xyMadDgQSkcv60YvmON8cQuHpzRPL8bN77oDkIKesmYCNO2dqJfJooxm++XnCIlZ8038ifdcbil3adwNqLI/OUDw1B6Eyt1AXz9Mps4EzCEqmIGdsHPwVwKvihcVfkHRchp2mSC3j9i6akrqEjjLOciqijF4Z9+S14iqcFhC9Of8EUEv98Z2/4q3f2r+veUAphivSdL/m3s0GKccGgq6dBwaWhb+QTVAansz25fya4r/hWq+51pcj/S/EPM2n+Zf7bslfT4/PQ/AM=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1PalFvbEWa4CHYrWzd4PS9nQhog2ialSQv6609SKAKiG8+MM5jVlW9965IvOecwCm2vxTlOBGFU87sN/V9o43IA64HhoHrNqIxB1XCdwDWQ7brVsjMGVmWsaz7nKfYpF5CKhm5boGwA27CdO1D27KoHqiUAav/o2gNOuISWLiVL15ZRSLmXh23oaUI9BjnhHoUR5p5A3qg1uPakpwcLTnrzfMUyD5g0Z0LEnmmiUoARDkNUQiwyz80dn/OAeyMypVCkCV7HDHhDX+9dLBalRbnEkqlpW5ZlWq4pfQJOpqd686TYjAOfTthq3YGUUYJgSN6hIjXAYsYCrRVOWULELPoCGpjAUtAGXiIDgQo91c2PADm7I5F2SCYcGnwGQQE2xBOcYIqwdj/0G/rpcR1c7b1LIOUTlkR8b/0zSphmOGQxDgxeZFawOx7xQLma5xh5PkVhykmGf6sxiSHCXLtN8IQsrwmXwxdwLW+/tuTyjxRThtFP2nJubnOV1M0D1emSKebi//Rsu18rlAcYprjpLm/G9NqattDNoH/98PI8f4fVp/Q9uqo0cgrbzitSm3av1/vDupmt9aZ+Nrp37PHssjI7E2m9GtPOwpk93A2i4QV+EtEfMQ5n/bP+2VtvCstWbRDPCLwF2TC58d8XbOom/cUT6/+i7ezhhF8IkjmP88Fb+bKNa76/qALWHYBf8/lo+oLAe2XYMTsX/f7l6PE5tJ9DZzJuv7rgyj0DWX3weP9KWmY/FVb4Ojh5tR+m7sD0rwZu4ruhEw//ND5y2s5h11hIwigdv2AkiqUaD7+r9WS/oPheXpSFBMYkd/VipVFcYCr0ptqlpMVLpQCRwJPNXK1Br17t9uwKqLnlcgVYnbbbsuV/bsUBPbflFBq0YrFHscPohKhYSmVX8/M9QRR5HNMAJ0bGUjTDXP8GsQsF1Hw6lIeDUY7vmFTxutVtg2697XZqvVq117WsTt2R3bXKoNN23Lau/Wbiht4krYnAya6C13YUfIgRiQlWMq/mnMtB50KWZA6zVISglMESxam8CBKlxZ5dcaomJ1EcYkXYjFiQhrgUz+K8QCZf/doGRDy3Eo5ilggYgvwYfpnl/reiINInIMqBq5TaWDYVH7iRrCKfT3lXDt5cBXwrDYg6bbK6IiFoxWT308fQqGnZTMwmMcRBwX2z5YcQBwDMb/iZ+6XZxAsyshW9uGXlxSFlpVn0dw5L81KaZWne0bqSzETCm1I5gTnCKJW693bHXjE1NxDmUdfOhvVe5I19l18qZnQkoMCRnD8tXx7x5hhhrt4cvjw/y2MfNDshZd0EXopDtk4onyaK8bevF+Qh5SfNt/JnwZLgo10HsLbiyDzlQ0MQOlUrdcG8fTEbiElYIhWRJdvghwAOBd81boq84SLkNI1Tgb/+oimpa+gQIZZS4Xf13LAtvzlP8RZj78PpE0wu8es7e8m/vLOfBtcjKYQR1De+5O/OBsnHBWFdPQ1yLg19KZ+gMjidbsn9muC24lutevVCivzfFH83k+Yn82fLVk33z0PzPw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825111388237111678</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825111388237111678</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082551388237105969</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082591388237109081</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0825111388237111678</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>CA7551C216933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>2D75888316933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>2F75903416933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bdfdd7ad-7a7c-435d-9a32-ba3cf42456e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true" id="f6e5f09d-5554-47e6-9a65-99230c30d2ba"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for CHILD SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");


tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - CHILD SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("Child_User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("Child_User_Create_API").getTestCaseByName("Child_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="df6dd72b-2a24-431a-b439-c095878f0525"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>A2853F7516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40C3061C7E0401F0A0799472F:B6F71F49"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F185225516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>A2853F7516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>0585946616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:A2853F7516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:0585946616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:078517F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyo4NyCJClKA9hTROzDT6cuR62zA02CnsQN0vv7YoaFAaadzJKTgne21175k2ScCz1M3ioWAXFLOjH6vZf47cRsQOLZtea7btPym71hBYD+qf4lNbCChR0LT6AtRQJ8JiZlsma7teJbjWm4wcrzIrUdOUPND78E0vkMuFLRyqdmmsZqnTERl2JZZ5CziWFARMTwHEUkSDePLi0h5RrjiZLZP1izLgHl7JmUWIURqCRBIU1IjfI5O0I7PSSKiIZ0yLIscXmMmomW+7l0ul7WlV+P5FLm2bSM7RMonEXR6ZLa/VZsh6bMJX6+7mHFGCU7pb6xJXYKc8cSI0ynPqZzNP4B2kGNraAtWxCKOz45M9BagZPdFpB2SucCWmGGnAruDCeTACBjju37LPPpaB9d7RzlmYsLzudhb/x0lYAtIeQaJJarMKnZfRzxQrvYJkKjPSFoIuoArPSYZJiCMmxwmdHVBhRq+RBhl+42VUD9aTRmQv2nLCdrmqqijA9Xp0SkI+X96tt2vNcp3nBbQrp/NkmF2iY79lwDOJ/FsdDzqwj/HwXDaKilsO69Jbdr9ut4f1s1svW4a3+bdJ1sOUH3gNkf+6fk0OH7oXfg346fCv+2Mn+PHCbiIXeax9xBmWXHT9cnPzs8rx3N7zz2Uh4OXzmDxeIXDi2/HQ+zCj/748TKWD5P75cgPYcDul905Qd0lOm0OBj9vb9hiRa9/wR3mjWFGr475y4/xzbJ+dpvcd8Z85ufnjY7vfTv9vsLZkNn4/sJejE6RSMett5y2c9g1VpIwLB5/AZHVUo9Hv2ecqX5h+bm8aAtNrEnpGmVao4QEJs223qWlJSqUANEkUs1cr2M3qHtnzbrTCD3Pd+xuJ4xd9S/0A+csjINKg9Ys9ih2OZtQHUur7Hp+PidI5pEAlkBuLXhBZiDMTxB7WGKjz+7Ux8GZgBFXKu7EttcL644fN9xePazbzZ5tNwLfcbqnDds7NY0rLq/ZdR5PJOS7Ct7YUfA7IDSjoGVez7lQgy6kKskzXhQydWoLXGNQqIMg11ocuX5QR4LOsxQ0YTTnSZFCLZtlZYGQWD9dCxNRWqkgGc8lTp3yM/wwy/13VUGUT0K1g9ApdUA1FQ6cSHaVz8d5h9t5V/BxkVD9tanqypySNZPdV29Do6dlMzGbxIhwKu6bLX8JcQAAfcIP7ZdmEy9Z0K3o1SmrDg4lK+2qv8+49lwrFoui7GhTS2au4JFSTgcNgRRK915G/AkY2kCgLx07G9Z7kTf2XX6FnLGhxBLmav6McvmFO8cQhL5z9NX3s/rqhWYnpKqbhJU8ZOum6mqiGX96eyER0X7KfKMeS54nb+06gLUVR+WpLhqSsqle6QPm5YPZIFzBUqWIPN8GPwRwKPiucVPkDReppumxkPDxG0NLXcvEhPCCyX7PLA3b8lvylC8ZRG9O72BKiX89s1fiwzP7/vJiqIRwjs2NL/2zs0XLcSFg6qtByaVlrtQVVAVn0y25fyW4rfhnTlB33fofFX83k/Y783vLVk33v4f2fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4jSxyo4NyCJClKA9hTROzDT6cuR62zA02CnsQN0vv7YoaFAaadzJKTgne21175k2ScCz1M3ioWAXFLOjH6vZf47cRsQOLZtea7btPym71hBYD+qf4lNbCChR0LT6AtRQJ8JiZlsma7teJbjWm4wcrzIrUdOUPND78E0vkMuFLRyqdmmsZqnTERl2JZZ5CziWFARMTwHEUkSDePLi0h5RrjiZLZP1izLgHl7JmUWIURqCRBIU1IjfI5O0I7PSSKiIZ0yLIscXmMmomW+7l0ul7WlV+P5FLm2bSM7RMonEXR6ZLa/VZsh6bMJX6+7mHFGCU7pb6xJXYKc8cSI0ynPqZzNP4B2kGNraAtWxCKOz45M9BagZPdFpB2SucCWmGGnAruDCeTACBjju37LPPpaB9d7RzlmYsLzudhb/x0lYAtIeQaJJarMKnZfRzxQrvYJkKjPSFoIuoArPSYZJiCMmxwmdHVBhRq+RBhl+42VUD9aTRmQv2nLCdrmqqijA9Xp0SkI+X96tt2vNcp3nBbQrp/NkmF2iY79lwDOJ/FsdDzqwj/HwXDaKilsO69Jbdr9ut4f1s1svW4a3+bdJ1sOUH3gNkf+6fk0OH7oXfg346fCv+2Mn+PHCbiIXeax9xBmWXHT9cnPzs8rx3N7zz2Uh4OXzmDxeIXDi2/HQ+zCj/748TKWD5P75cgPYcDul905Qd0lOm0OBj9vb9hiRa9/wR3mjWFGr475y4/xzbJ+dpvcd8Z85ufnjY7vfTv9vsLZkNn4/sJejE6RSMett5y2c9g1VpIwLB5/AZHVUo9Hv2ecqX5h+bm8aAtNrEnpGmVao4QEJs223qWlJSqUANEkUs1cr2M3qHtnzbrTCD3Pd+xuJ4xd9S/0A+csjINKg9Ys9ih2OZtQHUur7Hp+PidI5pEAlkBuLXhBZiDMTxB7WGKjz+7Ux8GZgBFXKu7EttcL644fN9xePazbzZ5tNwLfcbqnDds7NY0rLq/ZdR5PJOS7Ct7YUfA7IDSjoGVez7lQgy6kKskzXhQydWoLXGNQqIMg11ocuX5QR4LOsxQ0YTTnSZFCLZtlZYGQWD9dCxNRWqkgGc8lTp3yM/wwy/13VUGUT0K1g9ApdUA1FQ6cSHaVz8d5h9t5V/BxkVD9tanqypySNZPdV29Do6dlMzGbxIhwKu6bLX8JcQAAfcIP7ZdmEy9Z0K3o1SmrDg4lK+2qv8+49lwrFoui7GhTS2au4JFSTgcNgRRK915G/AkY2kCgLx07G9Z7kTf2XX6FnLGhxBLmav6McvmFO8cQhL5z9NX3s/rqhWYnpKqbhJU8ZOum6mqiGX96eyER0X7KfKMeS54nb+06gLUVR+WpLhqSsqle6QPm5YPZIFzBUqWIPN8GPwRwKPiucVPkDReppumxkPDxG0NLXcvEhPCCyX7PLA3b8lvylC8ZRG9O72BKiX89s1fiwzP7/vJiqIRwjs2NL/2zs0XLcSFg6qtByaVlrtQVVAVn0y25fyW4rfhnTlB33fofFX83k/Y783vLVk33v4f2fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH7vr4gyj1XIhXBJVJDCdTKlZVRaOtuXlescwN3ECbbDZX/92qGhwNBOu1Il6pPj73zn4s++4iiJHT/gHJggKdXCXkv/20NVa1atYsN9hmfDhQgbTTeqGc6zAzZqRjMXNXUt5DyHkHKBqGjpjmVXDdsxnOa9XfWdmu84FatZf9K1KTAuoaVLxdK1TRJT7hdhW3rOqJ8iTrhPUQLcF9ifBDcjX3r6qOSkt692LIuArL0QIvNNE1ciwBDHuILTxLwyj3yuIu5PyJwikTN4jRnxlv66d71eV9bVSsrmpmNZlml5pvSJOJl/09sX5WaIQjpLd+suoiklGMXkX6RI3YBYpJEWxPOUEbFI3oG2TdtS0AZssIFtl37TzbcABbtPIh2RZBwZfIHsEuwOZsCAYtAe7sKW/u1zHdztvWeI8lnKEn6y/holoCuI0wwig5eZlew+j3imXO0rwH5IcZxzsoJbNSYZwsC1nwxmZDMiXA5fxLWi/dqGyz9SThngr7TlyjzkKqmbZ6rTI3Pg4v/07LBfO5QpinNoT8bLycqlIpk2gtvreTBq/Fpm6+1T3g9aBYVD5x2pfbtf16fDup+t1013D4/5/Mad1ReX1M2q07A7e3oZr4fLF+qFcX0Qi4FXu7+kKB+Prhm7dHgy3j72GK+ZT/2fSb+/af7Ksqn54zFYXMzc78NGN/x+vb1NHzYLTLpsuMrByeb9xagjokcxfRnZ9ZXj2cPLRrC9Hv7AIngZd67FgJnDZJz+tWH9uLbdxusLUcMuy6f1qTe83rKHXnCXtt5yOszh2FhKwiR/fgEsyqUaj7CnDWS/kPhYXpSFRMascPUzpVFcABV6W+1S0uLnUoBI5Mtm7tZWrVnz3HrdrnvVqmtb3Y4XOPI/z23aAy9olhq0Y3FCsZvSGVGxlMru5udjgjjxOdAImLFKc7wArn+A2EMCaSG9k4cjpRzuU6nisgFuTzK1OkHHChq2Pehbrtd0Ow27UXV6DV27TcWYjlkwE8COFbx+pOB3gElGQMm8mnMuB50LWZIlWuUitisrVKGQy4uAKS32HbdZMzlJshgUYTNJozyGSrbIigKZfPfrGAjzwko4zlImUGwXx/DdLE+/lQWRPhFRDlyl1AHZVDhzI9llPu/n7R3mXcIHeUTUaZPVFYzgHZPjT29Do6ZlPzH7xDC3S+77LV+EOANgfsDPPC3NPl60IgfRy1tWXhxSVtplf5eosqzkq1VedLShJJNJeFMqp21OAOdS97b36T9AzT2E+alrZ8/6JPLefswvFws6EUhAIudPK5afeHNMgKs3RyjPz+azD5qjkLJuAjbinK0by6eJYvzh6wX7WPlJ80/5s05Z9NauM1gHcWSe8qEhCJ2rlbpgtu/MBk4lLJGKmLJD8HMA54IfG/dF3nMRcpqecwHvf9GU1LV0hHGaUxH29MJwKL8FT7HNwH9z+g2mkPjXO3vD372zf92MJlIIE6TvfcmfnQ1SjAsGXT0NCi4tfSOfoDI4nR/I/SvBQ8Uf2M2a49Rqf1L840zav5l/txzU9PQ8tP8D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxzPGd2M8gRmurVNSUkhy0rycEfIGlNgySDIh/fpKJiZASJqeGWaMtrfWXvviJZ1xlKVO1OYcmCA51eJeU//Pc2f1uudPDRf5tuHZODQaYdgwHN9GlgOo7iFL12LOC4gpF4iKpu5YtmvYjuGEV7YbOb781bwwuNO1G2BcQkuXmty1yVLKozJsUy8YjXLECY8oyoBHAkeT9sUwkp4RqjjprbMtyzIgay2EWEamiWsJYEhTXMN5Zp6ZBz5nCY8mZE6RKBg8x0x4U3/e+/j4WHt0azmbm45lWabVMKVPwsn8s976VG2GJKazfLvuIppTglFKfiFF6gLEIk+0djrPGRGL7A1o27QtBW3ABhvY9uhn3XwJULL7INIBScaRwRfIrsDGMAMGFIN2PY6b+uePdXC794ohymc5y/jR+u8oAV1Dmi8hMXiVWcXu44gnytU6AxzFFKcFJ2v4rsZkiTBw7ZLBjGyGhMvhS7hWtl/bcPkj1ZQB/pu2nJn7XCV180R1emQOXPyfnu33a4tyg9ICWrOL+ab4NvDpXffin+W9e/8j2BROMgrSh2ZJYd95S2rX7uf18bDuZut5E/Rmlw/et9kowfHPIer7X/rDceCz+Oomu7qpf1011oEwA/eWNurBj3nav77L2fLpXkxHaejd+Zcrz+medx6s8/HTp4KtpyadXdwNry3Hjb9apAjwj8nm8td0SC+Hzmhsfs0235g/7ZhP/6J+/xaNbgcrPu85LumkHdFZLVz/ejxMH8ef7kTv/IH1Rt53sYCfXvGlnTdfctrP4dBYScKkmN4DFtVSjUfc0wayX0i8Ly/KQhJjVrpGS6VRXAAVekvtUtISFVKASBLJZm7XVj307fogsIOG63q21e002o781/BCe9Boh5UGbVkcUezmdEZULKWy2/l5nyDOIg40AWas8wIvgOvvIPaQQFpMx/LjyCmHq1yquD8IG0G9Y3tBvz2wBq7l9vthoxv27bbb8JyOrn3PxYiOWHsmgB0qeHCg4GPAZElAybyacy4HnQtZkhVaFyK1a2tUo1DIg4ApLY4cL/RNTrJlCoqwmeVJkUJtuViWBTL59ukYCPPSSjhe5kyg1C4/wzezPH5XFUT6JEQ5cJVSB2RT4cSJZFf5vMrbO3lyVfDtIiHqa5PVFYzgLZPDVy9Do6ZlNzG7xDC3K+67LX8JcQLAfIefeVyaXbxkTfaiV6esPDikrLSq/q5QbVUr1uui7GhdSSaT8KZUTtucAC6k7j1d5Q9AzR2E+aFjZ8f6KPLOfsivEAs6EUhAJudPK5cfuHNMgKs7Ryy/n81HLzQHIWXdBGzEKVs3lVcTxfjd2wuOsPKT5kv5eMxZ8tKuE1h7cWSe8qIhCJ2rlTpgnt6YDZxLWCIVMWf74KcATgU/NO6KvOMi5DRNCwFvv9GU1DV1hHFeUBH39NKwL78lT/G0hOjF6RVMKfHPZ/aGv3lm314MJ1IIM6TvfMmfnQ1SjgsGXV0NSi5NfSOvoDI4ne/J/TPBfcUf2KHvOL7/J8U/zKT1yvzaslfT4++h9Rs=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0825161388237116901</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0825201388237120565</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0825231388237123265</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>B2856F7516933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1585A46616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>178527F616933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>df6dd72b-2a24-431a-b439-c095878f0525</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true" id="ef9a5f21-a7e3-4485-975b-1f8e6ad93e97"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="01d71217-608b-4672-9490-6de4de8e3237"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40C7A61C7E0401F0A0799472F:78EE650B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825311388237131388</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E98569E716933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E98569E716933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E98569E716933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>9A85FBF716933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC85368816933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FE8505F816933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:9A85FBF716933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC85368816933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:FE8505F816933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xBRtsT2DG3Hqce4DQ9LycEfIG1NqyY8mG5OsrmZgAJWl6ZjJDtL219toXLemMoSS2/IAxyDlJqRIOOup/rQUsXAc5mmPM25rd9JA2j5qRZrcd22i3207Ta6pKyFgBIWUcUd5RLcNsaqalWe7UbPqW41tuw3ab/6rKDHImoIVLw1CVTRJT5ldhO2qRUz9FjDCfogSYz7E/Ca4ufeHpo5qT2j3bsqwC5t0V55mv67gRAYY4xg2cJvqZfuBzFjF/QpYU8SKHl5gR66gve9frdWPdbKT5UrcMw9ANTxc+ESPLz2r3U70ZopAu0u26j2hKCUYxeUaS1BXwVRopQbxMc8JXyRvQpm4aElqDDdawadPPqv4aoGL3QaQDkjlDGlshswYbwwJyoBiU+3HYUT9/rIPbvdMcUbZI84Qdrf+OEtAS4jSDSGN1ZjW7jyOeKFf3DLAfUhwXjJRwLcckQxiYcpvDgmwuCRPDFzGlar+yYeKP1FMG+G/acqbvcxXU9RPVGZAlMP5/erbfry3KDMUFdC9m5e3toze++L7x1mAt88H36+EqfJxc3ncqCvvOW1K7dr+sj4d1N1svm7LEeLCZ6emu8eOrM/2uP6XZivWMsE/iaZoXwWwUZF/PL8B4tqIAoW+98V2A7ujo3Jpbk9ltkDjlcNF7do0v3z65Xry6eRDullNervrRz4F39XAd/Li7XzjXemuKFt9mM89LUOn2iDvZeOGc3vcu7i7M/uD6fBw8fBk2v17ok/k/d8+fyvl6M4tb+PbhqXmfDCYF3Hdec9rP4dBYS8KkmP8AzOulHI9woIxEvxB/X16khUTaonL1M6lRjAPlalfuktLiF0KASOSLZm7XXuA6o96obba8ZtM2jX7PCyzxn2e75kh8rDVoy+KIYj+lCyJjSZXdzs/7BHHiM6AR5FqZFngFTH0HcYA4UkI6FocjpQymqVDxvttybdv1RnbLsYaOYbftVq9tCfqt4UjogKpcp/yG3uTBgkN+qOCtAwUfAyYZASnzcs6ZGHTGRUkeUVnw2GyUqEGhEBdBLrXYt2zX0RlJshgkYT1JoyKGRrbKqgLpbPtraQizykoYztKco9isjuGbWR5/qwsifCIiHZhMqQeiqXDiRjLrfN7O29vPu4YPiojI0yaqy3OCt0wOP70OjZyW3cTsEsPMrLnvtvwlxAkA/R1++nFpdvGikuxFr29ZcXEIWenW/X1EjcdGUZZF1dG2lMxcwOtCOU19ArgQuvc0TX8C1XcQ+oeunR3ro8g7+yG/gq/ohCMOiZg/pVp+4M0xASbfHKE4P5uPPmgOQoq6cdjwU7Z+LJ4mkvG7rxfsY+knzLfiZ53m0Wu7TmDtxRF5iocGJ3QpV/KCeXpjNnAqYIlQxDTfBz8FcCr4oXFX5B0XLqZpXnB4+4sipa6jIozTgvJwoFaGffmtePKnDPxXp99gKol/ubM37M07++HqciKEMEHqzpf82Vkj1bhgUOXToOLSUTfiCSqC0+We3L8Q3Ff8oec6LW/4R8U/zKT7m/l3y15Nj89D9xc=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xBRtsT2DG3Hqce4DQ9LycEfIG1NqyY8mG5OsrmZgAJWl6ZjJDtL219toXLemMoSS2/IAxyDlJqRIOOup/rQUsXAc5mmPM25rd9JA2j5qRZrcd22i3207Ta6pKyFgBIWUcUd5RLcNsaqalWe7UbPqW41tuw3ab/6rKDHImoIVLw1CVTRJT5ldhO2qRUz9FjDCfogSYz7E/Ca4ufeHpo5qT2j3bsqwC5t0V55mv67gRAYY4xg2cJvqZfuBzFjF/QpYU8SKHl5gR66gve9frdWPdbKT5UrcMw9ANTxc+ESPLz2r3U70ZopAu0u26j2hKCUYxeUaS1BXwVRopQbxMc8JXyRvQpm4aElqDDdawadPPqv4aoGL3QaQDkjlDGlshswYbwwJyoBiU+3HYUT9/rIPbvdMcUbZI84Qdrf+OEtAS4jSDSGN1ZjW7jyOeKFf3DLAfUhwXjJRwLcckQxiYcpvDgmwuCRPDFzGlar+yYeKP1FMG+G/acqbvcxXU9RPVGZAlMP5/erbfry3KDMUFdC9m5e3toze++L7x1mAt88H36+EqfJxc3ncqCvvOW1K7dr+sj4d1N1svm7LEeLCZ6emu8eOrM/2uP6XZivWMsE/iaZoXwWwUZF/PL8B4tqIAoW+98V2A7ujo3Jpbk9ltkDjlcNF7do0v3z65Xry6eRDullNervrRz4F39XAd/Li7XzjXemuKFt9mM89LUOn2iDvZeOGc3vcu7i7M/uD6fBw8fBk2v17ok/k/d8+fyvl6M4tb+PbhqXmfDCYF3Hdec9rP4dBYS8KkmP8AzOulHI9woIxEvxB/X16khUTaonL1M6lRjAPlalfuktLiF0KASOSLZm7XXuA6o96obba8ZtM2jX7PCyzxn2e75kh8rDVoy+KIYj+lCyJjSZXdzs/7BHHiM6AR5FqZFngFTH0HcYA4UkI6FocjpQymqVDxvttybdv1RnbLsYaOYbftVq9tCfqt4UjogKpcp/yG3uTBgkN+qOCtAwUfAyYZASnzcs6ZGHTGRUkeUVnw2GyUqEGhEBdBLrXYt2zX0RlJshgkYT1JoyKGRrbKqgLpbPtraQizykoYztKco9isjuGbWR5/qwsifCIiHZhMqQeiqXDiRjLrfN7O29vPu4YPiojI0yaqy3OCt0wOP70OjZyW3cTsEsPMrLnvtvwlxAkA/R1++nFpdvGikuxFr29ZcXEIWenW/X1EjcdGUZZF1dG2lMxcwOtCOU19ArgQuvc0TX8C1XcQ+oeunR3ro8g7+yG/gq/ohCMOiZg/pVp+4M0xASbfHKE4P5uPPmgOQoq6cdjwU7Z+LJ4mkvG7rxfsY+knzLfiZ53m0Wu7TmDtxRF5iocGJ3QpV/KCeXpjNnAqYIlQxDTfBz8FcCr4oXFX5B0XLqZpXnB4+4sipa6jIozTgvJwoFaGffmtePKnDPxXp99gKol/ubM37M07++HqciKEMEHqzpf82Vkj1bhgUOXToOLSUTfiCSqC0+We3L8Q3Ff8oec6LW/4R8U/zKT7m/l3y15Nj89D9xc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH52SXri0HWCmVjxWULeCbPXlTEgDRNu0NCkXf/1JCkVAdOuZcQazuvKtb13yJU0G48h0PcZwxklCleC8pf47tsejujmqa1CvIq1qm6E2qldHGoZmqNd0y25YjqoEjOU4oIxDyluqqRuWZpiaaQ8MyzVrrqVXqnXjWVWGOGMCWrhUdFVZxhFlbhG2peYZdRPICHMpjDFzOXL73nXPFZ4uLDmp7eaaZREwa085T10AUCXECEcRqqAkBk2w59MMmdsnEwp5nuFNzJC11M3exWJRWViVJJsAU9d1oDtA+ISMTE7U9q9yMw4DOk7Wax/ShBIEI/IGJalrzKdJqHjRJMkIn8afQBvA0CW0hpdIQ0aVnqjgPUDB7ptIeyQzBjU2hUYJdo/HOMMUYeXhPmipJ9/r4HrvIIOUjZMsZgfrn1HCdI6jJMWhxsrMSnbfRzxSrnYTIzegKMoZmeMbOSYpRJgpvzM8JsseYWL4QqYU7VeWTPyRcsow+klbmmCXq6AOjlTnnEww4/+nZ7v9WqMMYZTj9u0LG9sxZ/3HCKRdfjP1R+lgwsM6s1sFhV3nNaltuzfrw2HdztZmk3fTocPLu5fhRB8/vpy9vYZRbfjUu7n1O3avn179qV9mqbUYW/7q2aCnAZktu70OeFo0rniavTTeXlE6u7sfsO4c/JrZs0bXfw0nXjfv/bFWkDCfD7yBBWcrcBNb9sIaTBcPD6foqXN2xfqnoHu5fD5LnbvO0z9D3Dt9Xq2eber1ny7DX3G9Fr7RbuCbzt3gaeg9doPWe067OewbS0no56MXjHi5lOMRnCsXol+Qfy0v0kJCbVy4uqnUKMYx5Wpb7pLS4uZCgEjoimau1xe+XbPqtm3UHcuqGrp/5nim+M+p2saF49mlBq1ZHFD0EzomMpZU2fX8fE0QxS7DNMSZNk9yNMVM/QLxHHKoBPReHI6EMjxIhIrXaw3fcQxP161zXT+zdNtvOFbnQved6oXh1FTlJuG39Dbzxhxn+wpe31Pwe4xISrCUeTnnTAw646IkMzjPeWRU5rBCcS4ugkxqsWtW7RpgJE4jLAmDOAnzCFfSaVoUCLD1r6lBxAorYShNMg4joziGn2Z5+K0siPAJiXRgMqUzLJqKj9xIZpnP53k7u3mX8F4eEnnaRHV5RtCayf6n96GR07KdmG1iiBkl9+2WH0IcAQBf8AOHpdnGC+dkJ3p5y4qLQ8hKu+zvDFZmlXw+z4uONqRkZgIeCOU0QB+jXOjeapC8Ygq2EOBb186W9UHkrX2fX86ntM8hx7GYP6VYfuPN0cdMvjkCcX6W333Q7IUUdeN4yY/Z/Eg8TSTjL18vyEXST5h/i59FkoXv7TqCtRNH5CkeGpzQiVzJC2b1yWygRMASoYhJtgt+DOBY8H3jtshbLlxM0yjn+PMvipS6lgoRSnLKg3O1MOzKb8GTr1Lsvjt9gCkkfnNnL9mnd/bjda8vhDCG6taX/N1ZI8W4IKzKp0HBpaUuxRNUBKeTHbnfENxV/I5j1+pOp/E3xd/PpP3B/NGyU9PD89D+Dw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH53SG5e2I8xwdcMRUfD+ciamq5BtSWqTAvrrT1IsAqJbzwwDZHXlW9+69EtOOJrHTtDkHFJBGNX6nbr+r+N6rmvbrvHoI8soR27FQCGKDNtBCCI7ciB0da3PeQZ9ygWioq47lvS3HcPxrmw3cCqB65TK5cqDrt1AyiW0dClZuraax5QHedi6nqU0YIgTHlA0Bx4IHEyaw7NAegao4KQ3TtYs84BpYyZEEpgmLoWAIY5xCbO5eWLu+JyEPJiQKUUiS+EtZsjr+tve5XJZWrollk5Nx7Is0/JN6RNyMj3SG7+KzRD2acTW6zaijBKMYvKKFKkhiBkLtWY8ZSkRs/kn0LZpWwragBU2sF2mR7r5HiBn902kHZIpRwafIbsAG0MEKVAM2vW4X9ePvtfB9d6rFFEesXTO99Y/owR0ATFLIDR4kVnB7vuIB8rVOAEc9CmOM04WcK7GJEEYuHaRQkRWZ4TL4Qu5lrdfW3H5IcWUAf5JW07Mba6SunmgOh0yBS7+T8+2+7VGuUFxBo3bs/HxZHrcIvevNXaRjG6uWlns9OzB0KvnFLad16Q27X5b7w/rZrbeNj124nGr5VjMe+ilf0bn8guSRY+kd5jBUjx1Tx/Kt1Z1OPntDsuWeRkNk7ubuZg8Xyzvxu7Dy2g66Zy37ju/k+j6F3569i/6N21bLC+d02E8+Ody4o3ih8SsZUPRGz6/tu79FYxPj2+RP7i2nGyZ3kbCfXkZ+G6P8vPm/evx6YAP8KX/K66eV48rj+ZodCvaUdLth0/195y2c9g1FpIwyR7/ABbFUo1Hv6P1ZL+Q+FpelIWERpS7BonSKC6ACr2hdilpCTIpQCQMZDPX617Xq1iVnmdXfdct21a75Tcd+c8ve3bPb3qFBq1Z7FFsMxoRFUup7Hp+viaI5wEHGkJqLFiGZ8D1LxA7SCCtT8fy5WCUwxWTKm5XKm6l6rUrtV631rE9v+23O75Xs6vdlu30HF07Z2JER2kzEpDuKnh1R8HHgElCQMm8mnMuB50LWZJntMhEbJcWqEQhkwdBqrQ4cMpexeRknsSgCJtzFmYxlJJZkhfI5Otfx0CY51bCccJSgWI7fw0/zXL/WVEQ6RMS5cBVSi2QTYUDJ5JT5PN53v523gV8MwuJettkdUVK8JrJ7qP3oVHTspmYTWKY2wX3zZYfQhwAML/gZ+6XZhMvXJCt6MUpKw8OKSuNor/PqPRcyhaLLO9oTUlmKuFNqZy2OQGcSd17uWJPQM0NhPmtY2fDei/yxr7LLxMzOhFIwFzOn5Yvv3HnmABXd46+fH9W373Q7ISUdROwEods7VheTRTjL28vOMDKT5ov5M+SpeF7uw5gbcWRecqLhiB0qlbqgHn5ZDYwk7BEKiJLt8EPARwKvmvcFHnDRchpeswEfP5EU1JX1xHGLKOi39Fzw7b85jzFSwLBu9MHmFzi387sFf/0zL4bnk2kEM6RvvElf3c2SD4uGHR1Nci51PWVvILK4HS6JfdvBLcVv+t7larfrf1N8XczaXwwf7Rs1XT/fWj8Bw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825311388237131388</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825311388237131388</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0825271388237127372</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0825291388237129603</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0825311388237131388</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>AA851CF716933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>0D85468816933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>0F8525F816933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01d71217-608b-4672-9490-6de4de8e3237</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true" id="9fd6754b-277b-4401-b284-f41e01b854ae"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="1291a5a7-2aac-482a-ab36-5459cc71bd6f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40CBA61C7E0401F0A0799472F:75B40B46"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825371388237137972</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>3195748916933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:3195748916933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:3195748916933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E195E29916933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>4495432A16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4695139A16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E195E29916933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:4495432A16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:4695139A16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj0chVyiJClLKpY16YShtT9uXI4+zIZ4mdogdLvP1Y4eGAkM7nSNVot7ZXnvti5d9ylGWOkHIORSCMKpF/Y7+Xwvh2Hda2Iix7xjed2gbfmsaGzZ2ms0T2zqBlqVrEeclRJQLREVHdyzbNWzHcNp3ths4zcD1Gu2W96xrD1BwCS1dGnLXKkspD6qwHb0saMAQJzygKAMeCBxMwuurQHoGqOakd083LKuARTcRIg9MEzdiwJCmuIFZZp6aez6nMQ8mZEaRKAt4jRnzjv66d7lcNpZugxUz07Esy7R8U/rEnMy+6t0v9WaIIzplm3UPUUYJRin5iRSpaxAJi7UwnbGCiCR7B9o2bUtBG7DCBrY9+lU33wJU7D6JtEey4MjgCbJrsFuYQgEUg3Z/G3X0r5/r4GbvXYEon7Ii4wfrv6MEdAEpyyE2eJ1Zze7ziEfK1T0FHEQUpyUnC7hRY5IjDFz7VsCUrK4Il8MXc61qv7bi8o/UUwb4b9pyau5yldTNI9Xpkxlw8X96ttuvDcoDSkvohme3Z4P+ZRKGCbEecetyxIkrSHTZ4p2Kwq7zhtS23a/rw2HdztbrpovrJ2+UnDfnTZPYy6Zz8VIU+b/k+SK9tvpoEd2//Miezi1movv8iT672PzZZB4sTubj+/lkOHq+F482uPD0OB58eeDnjI1P7NHcTZIyQePL58fp8nG8Hsf8PM96Z/bNSwgjvH6OvOFD/nTN75sUwbcfDBG0Ht9czC+f7JGZ3uVO68sLKvvJ5SBdXizL+T+35nC97LzltJvDvrGWhEn5/QdgUS/VeER9bSj7hcTH8qIsJDamlWuQK43iAqjQu2qXkpaglAJE4kA2c7Me2H5z4Pi+3fJd17Ot3pkfOvI/32vbQz9s1xq0YXFAscfolKhYSmU38/MxQZwFHGgMhbFgJU6A6x8g9pFAWkRv5eFglMMdkyrue0O3b4V2fzDstdvuoNcM2/2+HP6m3XItz9W1GyZGdFSEUwHFvoK39hT8FjDJCSiZV3PO5aBzIUsyR4tSpHZjgRoUSnkRFEqLA8drN01OsjwFRdjMWFym0MiTvCqQyTe/joEwr6yE45wVAqV2dQzfzfLwW10Q6RMT5cBVSmcgmwpHbiSnzuf9vP3dvGv4sIyJOm2yuqIgeMNk/9Pb0Khp2U7MNjHM7Zr7dstfQhwBMD/gZx6WZhsvXpCd6PUtKy8OKSvdur9z1Jg3ysWirDp6oiSzkPCmVE7bnAAupe6t79gLUHMLYX7q2tmyPoi8te/zK0VCJwIJyOT8adXyE2+OCXD15ojk+Vl99kGzF1LWTcBKHLP1Uvk0UYw/fL3gACs/af4mf5asiN/adQRrJ47MUz40BKEztVIXzPqd2cBMwhKpiKzYBT8GcCz4vnFb5C0XIafpeyng/S+akrqOjjBmJRVRX68Mu/Jb8RTrHII3p99gKol/vbNX/N07+/H6aiKFMEP61pf82dkg1bhg0NXToOLS0VfyCSqD09mO3L8S3FV8Vyr+idf+o+LvZ9L9zfy7Zaemh+eh+ws=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj0chVyiJClLKpY16YShtT9uXI4+zIZ4mdogdLvP1Y4eGAkM7nSNVot7ZXnvti5d9ylGWOkHIORSCMKpF/Y7+Xwvh2Hda2Iix7xjed2gbfmsaGzZ2ms0T2zqBlqVrEeclRJQLREVHdyzbNWzHcNp3ths4zcD1Gu2W96xrD1BwCS1dGnLXKkspD6qwHb0saMAQJzygKAMeCBxMwuurQHoGqOakd083LKuARTcRIg9MEzdiwJCmuIFZZp6aez6nMQ8mZEaRKAt4jRnzjv66d7lcNpZugxUz07Esy7R8U/rEnMy+6t0v9WaIIzplm3UPUUYJRin5iRSpaxAJi7UwnbGCiCR7B9o2bUtBG7DCBrY9+lU33wJU7D6JtEey4MjgCbJrsFuYQgEUg3Z/G3X0r5/r4GbvXYEon7Ii4wfrv6MEdAEpyyE2eJ1Zze7ziEfK1T0FHEQUpyUnC7hRY5IjDFz7VsCUrK4Il8MXc61qv7bi8o/UUwb4b9pyau5yldTNI9Xpkxlw8X96ttuvDcoDSkvohme3Z4P+ZRKGCbEecetyxIkrSHTZ4p2Kwq7zhtS23a/rw2HdztbrpovrJ2+UnDfnTZPYy6Zz8VIU+b/k+SK9tvpoEd2//Miezi1movv8iT672PzZZB4sTubj+/lkOHq+F482uPD0OB58eeDnjI1P7NHcTZIyQePL58fp8nG8Hsf8PM96Z/bNSwgjvH6OvOFD/nTN75sUwbcfDBG0Ht9czC+f7JGZ3uVO68sLKvvJ5SBdXizL+T+35nC97LzltJvDvrGWhEn5/QdgUS/VeER9bSj7hcTH8qIsJDamlWuQK43iAqjQu2qXkpaglAJE4kA2c7Me2H5z4Pi+3fJd17Ot3pkfOvI/32vbQz9s1xq0YXFAscfolKhYSmU38/MxQZwFHGgMhbFgJU6A6x8g9pFAWkRv5eFglMMdkyrue0O3b4V2fzDstdvuoNcM2/2+HP6m3XItz9W1GyZGdFSEUwHFvoK39hT8FjDJCSiZV3PO5aBzIUsyR4tSpHZjgRoUSnkRFEqLA8drN01OsjwFRdjMWFym0MiTvCqQyTe/joEwr6yE45wVAqV2dQzfzfLwW10Q6RMT5cBVSmcgmwpHbiSnzuf9vP3dvGv4sIyJOm2yuqIgeMNk/9Pb0Khp2U7MNjHM7Zr7dstfQhwBMD/gZx6WZhsvXpCd6PUtKy8OKSvdur9z1Jg3ysWirDp6oiSzkPCmVE7bnAAupe6t79gLUHMLYX7q2tmyPoi8te/zK0VCJwIJyOT8adXyE2+OCXD15ojk+Vl99kGzF1LWTcBKHLP1Uvk0UYw/fL3gACs/af4mf5asiN/adQRrJ47MUz40BKEztVIXzPqd2cBMwhKpiKzYBT8GcCz4vnFb5C0XIafpeyng/S+akrqOjjBmJRVRX68Mu/Jb8RTrHII3p99gKol/vbNX/N07+/H6aiKFMEP61pf82dkg1bhg0NXToOLS0VfyCSqD09mO3L8S3FV8Vyr+idf+o+LvZ9L9zfy7Zaemh+eh+ws=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4yxZQO+TGDG3BpySJMCze3ljCJvsIotgyUT2q8/kokJUJKmZyYzRNtba6990ZLOOU4TOwg5h1zQjGnDXkv/N5r5BKEmNtwmtoy6DcjwGi4YtkMwdj3bciNb14acFzBkXGAmWrptIcdAtmF7U+QEdiNwmjXf9R517RZyLqGlS83StU2aMB6UYVt6kbMgw5zygOEUeCBIMAmvRoH0DHDFSW+fb1mWAfN2LMQyME1Si4BAkpAayVLz3DzwOY94MKFzhkWRw0vMiLf0l73Pz8+1Z6eW5XPTtizLtHxT+kSczj/r7U/VZoiGbJZt113MMkYJTugvrEhdgYizSAuTeZZTEadvQCMTWQragA0xCKqzz7r5GqBk90GkA5I5xwaPMarAxjCDHBgB7ft42NI/f6yD273THDM+y/KUH63/jhKwNSTZEiKDV5lV7D6OeKJc7XMgwZCRpOB0DV/VmCwxAa7d5DCjmxHlcvgirpXt1zZc/tFqyoD8TVvOzX2ukrp5ojo9Ogcu/k/P9vu1RbnFSQHtr98Tev/kFw+kk/SbqLMY/DPwvlymwxVvlRT2nbekdu1+WR8P6262XjaFfeGcPRVjuI8X9u23qDm8vPw1vYaBFW5cdG/Gt/1f3tldb/DQt2ZFPDHTswv3i1tc4pvHm+ThzLm7EGfRpr4a/Eg+RV50wRvIX9a/+FRkD80f/Wm/3y1GjyOYR6Pb2V2WPo4f8sX3xRjF6NLj3UuPptyb3/ndi8hvsrhYXcHMypfTTxN3sbq6peHZqIfj6+a3/nrRes1pP4dDYyUJk+LpBxBRLdV4DHvaQPYLi/flRVloZMxK12CpNIoLYEJvq11KWoJCChCNAtnM7bpe9xt1xw5R03ecOrK6HT+05X9+3UMDP/QqDdqyOKLYzdiMqlhKZbfz8z5BkgYcWAS5sc4KEgPX30HsYYG1IRvLw5ExDtNMqrjX6Fk917ZCy+707Y7noD6yOv1+z3Z7yAl9XfuaiWt2nYczAfmhgjcPFHwMhC4pKJlXc87loHMhS7LC60IkqLbGNQaFvAhypcWBXfcaJqfpMgFF2EyzqEigtoyXZYFMvv21DUx4aaWcLLNc4ASVx/DNLI+/VQWRPhFVDlyl1AHZVDhxI9lVPm/n7e/nXcGHRUTVaZPVFTklWyaHn16HRk3LbmJ2iRGOKu67LX8JcQLAfIefeVyaXbxoTfeiV7esvDikrLSr/q5wbVUr1uui7KirJDOX8KZUTmROgBRS935OswUwcwdhfuja2bE+iryzH/IrRMwmAgtI5fxp5fIDb44JcPXmGMrzs/nog+YgpKybgI04Zesm8mmiGL/7eiEBUX7SfCN/nrM8em3XCay9ODJP+dAQlM3VSl0wP9+YDZJJWCoVMcv3wU8BnAp+aNwVecdFyGl6KgS8/UVTUtfSMSFZwcSwp5eGffkteYqfSwhenX6DKSX+5c7e8Dfv7Pur0UQKYYr1nS/9s7NBy3EhoKunQcmlpW/kE1QGZ/M9uX8huK/4DvIbbt3z/6T4h5m0fzP/btmr6fF5aP8H</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6MQcgGSqCAF0k6p6GWgwynzcmScHXAbnGA7Ie3XHyc0FBja6RypEvXO9tprX7zsM45Wsen5nAMTJKHKMOiq/5o4gpbTAs3qRHPNbrYdDYENmjPHoWNiS1psVRlynsGQcoGo6Kpm07A0w9RM596wPLPlWW7DsNu/VGUKjEto6dJoqkqxiin3qrBdNWPUSxAn3KNoBdwT2Jv41yNPenqo5qT2zrYsq4CstxQi9XQdN0LAEMe4gZOVfqYf+JyF3JuQBUUiY/AaM+Rd9XXvZrNpbKxGwha62Ww29aarS5+Qk8VXtfel3gzhkEbJdj1ANKEEo5i8oJLUNYhlEip+vEgYEcvVO9CGbjRLaA0KrGHDpl9V/S1Axe6TSAckGUcaXyKjBhtDBAwoBuXneNhVv36ug9u99wxRHiVsxY/Wf0cJaA5xkkKo8Tqzmt3nEU+Uq3cG2BtSHGec5HBTjkmKMHDljkFEihHhcvhCrlTtVwou/0g9ZYD/pi1n+j5XSV0/UZ2ALICL/9Oz/X5tUaYozqDXGq5/BOvO+PuPu/Np+6efrB/z4Q29DJ5m3YrCvvOW1K7dr+vjYd3N1uumn7f5g0Oex87V/B6KTjHph98d6vizKNVTBpsr2rRu3G/8objcXA+CyxaPBul8MG0zMBZBlP961F/89iwZtjP2xZ7cT6bzllWgkIXpLLez2e18vHH6F50n+0eYbq6D1bK4eCyeGHL8l++jfwQX1nU7mITZdHR5e14MRg/JSzQ2zdaXLB2tIe5Hd7PpbHOXX7W+nXffctrP4dBYS8Ikmz8CFvWyHI9hoFzIfiHxsbyUFhJqUeXqpaVGcQFUqL1yVyktXiYFiISebOZ2bbfdlmG5vtF2Lcs2moO+65vyP9d2jAvXd2oN2rI4ojhIaETKWKXKbufnY4J45XGgITAtTzK8BK5+gBgggZQhHcvDkVAO94lU8aA5cDp9w2wP+hemYfdb5+0g8OXw991mYJiOqtwk4pbeMj8SwA4VvH2g4GPAJCVQynw551wOOheyJGuUZyI2GjlqUMjkRcBKLfZM22npnKzSGErC+ioJsxga6TKtCqTz7a+pIcwrK+E4TZhAsVEdw3ezPP5WF0T6hKR04GVKfZBNhRM3klnn837e7n7eNbyfhaQ8bbK6ghG8ZXL46W1oymnZTcwuMcyNmvtuy19CnADQP+CnH5dmFy/MyV70+paVF4eUlV7d3zVqrBtZnmdVRzulZDIJr0vlNPQJ4Ezq3vN98gRU30Hon7p2dqyPIu/sh/wysaQTgQSs5Pwp1fITb44J8PLNMZTnp/jsg+YgpKybgEKcsg1i+TQpGX/4esEeLv2k+U7+bBIWvrXrBNZeHJmnfGgIQhflqrxgnt+ZDZxIWCIVMWH74KcATgU/NO6KvOMi5DTNMwHvf1FKqeuqCOMko2IYqJVhX34rnuI5Be/N6TeYSuJf7+yCv3tnP1yPJlIIV0jd+ZI/O2ukGhcMavk0qLh01UI+QWVwutiT+1eC+4pvGW6rYzvunxT/MJPeb+bfLXs1PT4Pvf8A</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825371388237137972</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825371388237137972</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0825331388237133946</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0825361388237136205</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0825371388237137972</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F195539916933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>5495532A16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>5695539A16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1291a5a7-2aac-482a-ab36-5459cc71bd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true" id="b8d214bd-2cc1-4dc0-99b0-027d75c528be"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="8402cb1b-a428-4bf5-b9a4-987663544776"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","BAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40CFA61C7E0401F0A0799472F:FD1B2A33"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825441388237144984</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>88957C2B16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:88957C2B16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:88957C2B16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>3995DE3B16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>9B95E8CB16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9D95AC4C16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:3995DE3B16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:9B95E8CB16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:9D95AC4C16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqI1N65dKOMMN1b1S8AHrUlzMhXUDcbQJNCuivP0mxCIhuPTMMkNWVb33r0i854yiOnKDBOSSCMKr12jX932qlVK3YNhhuGVcNzy1bBpqMbWPsO151bIVhaI11rcd5Cj3KBaKipjuW7Rq2YzjVke0GTinw7GLFcZ907R4SLqGlS9HStXUcUR5kYWt6mtCAIU54QFEMPBA4GDb6l4H0DFDOSa+fbVhmAZP6TIh5YJq4GAKGKMJFzGLzzNzzOQt5MCRTikSawFvMkNf0t72r1aq4cossmZqOZVmm5ZvSJ+RkeqrXT/LNEPbohG3WLUQZJRhF5BUpUn0QMxZqjWjKEiJm8SfQtmlbCtqANTaw7dFT3XwPkLH7JtIeyYQjg8+QnYMNYAIJUAza3aBX00+/18HN3lGCKJ+wJOYH659RArqEiM0hNHieWc7u+4hHylU/Axz0KI5STpZwpcZkjjBw7SaBCVlfEi6HL+Ra1n5tzeWH5FMG+CdtOTN3uUrq5pHqtMkUuPg/Pdvt1wblHkUp1EeTp1A8tu4Kv5wlc9sOpY+Jg8fsocJqGYVd5w2pbbvf1ofDup2tt02vIY97i0W78BStKqXOyPNW/efXad+aX9jd8vjhuXJ7zSrnD+at35y2W6UKjB7pinny+WWhNFnfOtbMfeLN0kUHTq6Q97vQXMP5BQxKo9+t0ev9H/f2dXjVPz9fjp1B5+6fQofR6QXz27OHcolbj3eFwU3Yui141jo2h6uQj9j9r3Pvd+ckvbcHFlsvuovX8aTZHeNhp/ae024O+8ZcEobp+BmwyJdqPHptrSv7hcTX8qIsJDQmmWswVxrFBVCh19UuJS1BKgWIhIFs5mbt+n6p3XGbdtl3Xc+2Wk2/4ch/vle1u36jmmvQhsUBxRajE6JiKZXdzM/XBHEccKAhJMaSpXgGXP8CsY0E0np0IF8ORjmMmFRxp+013U7XaTXalW61XPJbLfnlel6l7DRsW2rxFRPX9DppTAQk+wpe3lPwAWAyJ6BkXs05l4POhSzJAi1TEdnFJSpSSOVBkCgtDqTElExO4nkEirAZszCNoDifzbMCmXzz6xgI88xKOJ6zRKDIzl7DT7M8fJYXRPqERDlwlVITZFPhyInk5vl8nre/m3cO30hDot42WV2RELxhsv/ofWjUtGwnZpsY5nbOfbvlhxBHAMwv+JmHpdnGC5dkJ3p+ysqDQ8pKPe/vAhUXxXS5TLOOVpRkJhLelMppm0PAqdS9lxH7A9TcQpjfOna2rA8ib+37/FIxo0OBBMRy/rRs+Y07xxC4unP05Puz/u6FZi+krJuAtThma0XyaqIYf3l7wQFWftJ8I39WLAnf23UEayeOzFNeNAShU7VSB8zLJ7OBmYQlUhFZsgt+DOBY8H3jtshbLkJO0zgV8PkTTUldTUcYs5SKXlvPDLvym/EUL3MI3p0+wGQS/3Zmr/mnZ/ZD/3IohTBG+taX/N3ZINm4YNDV1SDjUtPX8goqg9Ppjty/EdxV/GrVL1Vazl8Vfz+T+gfzR8tOTQ/fh/p/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqI1N65dKOMMN1b1S8AHrUlzMhXUDcbQJNCuivP0mxCIhuPTMMkNWVb33r0i854yiOnKDBOSSCMKr12jX932qlVK3YNhhuGVcNzy1bBpqMbWPsO151bIVhaI11rcd5Cj3KBaKipjuW7Rq2YzjVke0GTinw7GLFcZ907R4SLqGlS9HStXUcUR5kYWt6mtCAIU54QFEMPBA4GDb6l4H0DFDOSa+fbVhmAZP6TIh5YJq4GAKGKMJFzGLzzNzzOQt5MCRTikSawFvMkNf0t72r1aq4cossmZqOZVmm5ZvSJ+RkeqrXT/LNEPbohG3WLUQZJRhF5BUpUn0QMxZqjWjKEiJm8SfQtmlbCtqANTaw7dFT3XwPkLH7JtIeyYQjg8+QnYMNYAIJUAza3aBX00+/18HN3lGCKJ+wJOYH659RArqEiM0hNHieWc7u+4hHylU/Axz0KI5STpZwpcZkjjBw7SaBCVlfEi6HL+Ra1n5tzeWH5FMG+CdtOTN3uUrq5pHqtMkUuPg/Pdvt1wblHkUp1EeTp1A8tu4Kv5wlc9sOpY+Jg8fsocJqGYVd5w2pbbvf1ofDup2tt02vIY97i0W78BStKqXOyPNW/efXad+aX9jd8vjhuXJ7zSrnD+at35y2W6UKjB7pinny+WWhNFnfOtbMfeLN0kUHTq6Q97vQXMP5BQxKo9+t0ev9H/f2dXjVPz9fjp1B5+6fQofR6QXz27OHcolbj3eFwU3Yui141jo2h6uQj9j9r3Pvd+ckvbcHFlsvuovX8aTZHeNhp/ae024O+8ZcEobp+BmwyJdqPHptrSv7hcTX8qIsJDQmmWswVxrFBVCh19UuJS1BKgWIhIFs5mbt+n6p3XGbdtl3Xc+2Wk2/4ch/vle1u36jmmvQhsUBxRajE6JiKZXdzM/XBHEccKAhJMaSpXgGXP8CsY0E0np0IF8ORjmMmFRxp+013U7XaTXalW61XPJbLfnlel6l7DRsW2rxFRPX9DppTAQk+wpe3lPwAWAyJ6BkXs05l4POhSzJAi1TEdnFJSpSSOVBkCgtDqTElExO4nkEirAZszCNoDifzbMCmXzz6xgI88xKOJ6zRKDIzl7DT7M8fJYXRPqERDlwlVITZFPhyInk5vl8nre/m3cO30hDot42WV2RELxhsv/ofWjUtGwnZpsY5nbOfbvlhxBHAMwv+JmHpdnGC5dkJ3p+ysqDQ8pKPe/vAhUXxXS5TLOOVpRkJhLelMppm0PAqdS9lxH7A9TcQpjfOna2rA8ib+37/FIxo0OBBMRy/rRs+Y07xxC4unP05Puz/u6FZi+krJuAtThma0XyaqIYf3l7wQFWftJ8I39WLAnf23UEayeOzFNeNAShU7VSB8zLJ7OBmYQlUhFZsgt+DOBY8H3jtshbLkJO0zgV8PkTTUldTUcYs5SKXlvPDLvym/EUL3MI3p0+wGQS/3Zmr/mnZ/ZD/3IohTBG+taX/N3ZINm4YNDV1SDjUtPX8goqg9Ppjty/EdxV/GrVL1Vazl8Vfz+T+gfzR8tOTQ/fh/p/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcR8YY3wB7AjMGl9ZtEpKQ5tC+nBHyBtTYErFkLvn6I5mYACFpcmYyQ7S9tfbaFy3pjKMstYOQc8gFYVSLo47+r99ykIXtqTHBlme4fmti+E2vbbRdZ+paNlhNt6FrMecFxJQLREVHtxuWY1i2YbdvLSewvcB16r7r/da1O8i5hJYudblrnaWUB2XYjl7kNGCIEx5QlAEPBA5G4cV5ID0DVHHSu2dblmXAvDsXYhGYJq4ngCFNcR2zzDwzD3zOEh6MyIwiUeTwFDPhHf1p72q1qq+cOstnpt1oNMyGb0qfhJPZZ737qdoMSUynbLvuI8oowSglj0iRugAxZ4kWpjOWEzHPXoG2TKuhoA1YYwNbLv2sm88BSnbvRDogmXNk8DmyKrAbmEIOFIP28ybu6J/f18Ht3tscUT5lecaP1h+jBHQJKVtAYvAqs4rd+xFPlKt7BjiIKU4LTpZwqcZkgTBw7SqHKVmfEy6HL+Fa2X5tzeUfqaYM8Efacmbuc5XUzRPVicgMuPg/Pdvv1xblDqUFdNPNTZNa4693bOkNizBuI+HD1Y9h73zVKSnsO29J7dr9tD4e1t1sPW3643+3pxt3/P3+9i76hw0f59GXmueIVa1AgxauXQ8uJjUo+neDSYJ/5Rdo+rsmHr75UbYKvyWZM7Rtb9H4Mvh9vUk/bWg/6/1qp4u09mc89uOvw3u7dvUz3DQHV+PGas7i63t03uQOs/qARSt/fGj+9GqE3Ifm9dAj9v0mNK1w82vsTD71Hl1C/Ou7S9H3xpPMl1LQec5pP4dDYyUJo2LyRwaplmo84kgbyH4h8ba8KAtJjGnpGiyURnEBVOhdtUtJS1BIASJJIJu5Xfs93/vS7vespu84rtXo9/zQlv/5btsa+GG70qAtiyOKfUanRMVSKrudn7cJ4izgQBPIjSUr8By4/gZihATSYnojDwejHG6ZUvGo5zu90O2HkeX6YRS1ol5/0JRM3UHPtVq6dsnEkA7zcCogP1Tw5oGC3wAmCwJK5tWccznoXMiSPKBlIVKrvkR1CoW8CHKlxYHttj2Tk2yRgiJsZiwpUqgv5ouyQCbf/toGwry0Eo4XLBcotcpj+GqWx9+qgkifhCgHrlLqgWwqnLiRnCqf1/P29/Ou4MMiIeq0yeqKnOAtk8NPz0OjpmU3MbvEMLcq7rstH4Q4AWC+wc88Ls0uXrIke9GrW1ZeHFJWulV/H1D9oV4sl0XZ0ZaSzFzCm1I5LXMEuJC6t7ll90DNHYT5rmtnx/oo8s5+yK8QczoSSEAm508rl+94c4yAqzdHLM/P+r0PmoOQsm4C1uKUrZ/Kp4li/ObrBQdY+UnzlfxZsTx5btcJrL04Mk/50BCEztRKXTCbV2YDMwlLpCKyfB/8FMCp4IfGXZF3XIScpkkh4PUvmpK6jo4wZgUVcaSXhn35LXmKzQKCZ6cXMKXEP93Za/7qnT2+OB9JIcyQvvMlf3c2SDkuGHT1NCi5dPS1fILK4HS2J/dPBPcVv932vVbf/qviH2bSfWF+admr6fF56P4H</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj1VwPiGJChINrSbdTpkFptuZl5VxDLgkDthOgP76tQOhQGmns1Il6pvrc8/98LGvOMxSO+xyjpkgOdXiXlv/N3HdxHdw0wjcpme4rSAxxgG0jcnYDZqm4wSJg3Qt5rzAMeUCUtHWbdNyDMs2bH9kOaHthW6zYVneL117xIxLaOnSMHVtnaWUh1XYtl4wGuaQEx5SmGEeChQOu9/uQ+kZwpqT3rnasqwCss5MiEUIAGokGOE0RQ2UZ+AKHPlcJTwckimFomB4FzPhbX23d7VaNVZOI2dTYJumCcwASJ+Ek+kXvXNRb8ZJTCf5dh1BmlOCYEpeoCL1DYtZnmjddJozImbZO9AWsEwFbeA1MpDl0i86eA1Qsfsk0hFJxqHBZ9CqwQZ4ghmmCGs/BnFb//K5Dm73jhikfJKzjJ+s/4wSpiVO8wVODF5nVrP7POKZcnWuMApjitKCkxI/qDFZQIS59p3hCVnfEy6HL+Fa1X5tzeUfqacMoz9pyxU45CqpgzPV6ZEp5uL/9OywX1uUR5gWuPNiXqaPqwR6E+vxodXt3U43dnm98XyA2hWFQ+ctqX27d+vTYd3P1m7T9bN1A1rZEGTeC3FXI/chgvPW2I2XG/8hi+/XLfY8d370x3OKS+j9sxTFuux+LYfru1+X/vhpsAaL2Z3bh9dz78K6H5UW+36HRulLNO/Hc3N5OYxA8heLnOTnS8nBD+fv+GEy5ZsR6z9ftuy4OZw2W96L+XM2Jn3OmpOvtwP8NV3BC2KznyULgqdetLCCmw37hdqvOR3mcGysJWFYjJ8xEvVSjUfc025lv6D4WF6UhSTGpHINF0qjuMBU6B21S0lLWEgBIkkom7ldB73A60ZuZDUDx3EtM7oOurb8L3B96zbo+rUGbVmcUIxyOiEqllLZ7fx8TBBlIcc0wcwo8wLNMNc/QOxBAbWYDuThyCnHo1yquGlZ3Ztm04/cXtf3PT8wb28is+Xakm/Q8lq69pCLPu2z7kRgdqzgzSMFH2BEFgQrmVdzzuWgcyFLsoRlIVKrUcIGxYW8CJjS4tB2fQ9wki1SrAiDLE+KFDcWs0VVIMC3v7YBEa+shKNFzgRMreoYvpvl6be6INInIcqBq5SusWwqPnMjOXU+7+cdHOZdw3eLhKjTJqsrGEFbJsefXodGTct+YvaJIW7V3Pdb/hDiDAD4gB84Lc0+XlKSg+j1LSsvDikrnbq/S9hYNoqyLKqOtpRkMgkPpHJaYIhRIXVvM8rnmII9BPjUtbNnfRJ5bz/mV4gZHQoocCbnT6uWn3hzDDFXb45Ynp/1Zx80RyFl3QRei3O2KJVPE8X4w9cLCpHyk+bv8meVs+S1XWewDuLIPOVDQxA6VSt1wWzemQ2US1giFTFnh+DnAM4FPzbui7znIuQ0jQuB3/+iKalr6xChvKAi7umV4VB+K55is8Dhq9MbmErid3f2mr97Zz99ux9KIcygvvclv3c2SDUuCOvqaVBxaetr+QSVwen0QO53BA8V3/cDrxXZ179T/ONMOm/Mby0HNT09D53/AA==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825441388237144984</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825441388237144984</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0825401388237140747</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0825421388237142715</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0825441388237144984</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>4995FE3B16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>AB9509CB16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>AD95BC4C16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8402cb1b-a428-4bf5-b9a4-987663544776</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true" id="cb272b5e-4f84-4901-b156-724bd1d9405a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="a43b1133-03f5-4d9d-af8f-7b340a1d4855"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40D3A61C7E0401F0A0799472F:B9EC1CF"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0825531388237153637</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>DF958CFC16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:DF958CFC16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:DF958CFC16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>80A5B71D16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2A5DCCD16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E4A5A57E16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:80A5B71D16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E2A5DCCD16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E4A5A57E16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N65dIOMFOobDmKIiDqfjkT0hQibYJNCrh//UkKRUB065lxBrO68q1vXfIldQaS2PJ8xlDKMSVKN2io/7pg4pQNw9GAa000p1x2tUm1bGtGdWK75QkIbddWlS5jGeoSxgHhDdUyTFszLc2qjUzbs8qe45Ycx/mtKmOUMgEtXEqGqqyTmDAvD9tQs5R4FDDMPAISxDwOvaHfu/GEpwcKTmqzvmGZB0ybM84Xnq7DUoggimNYgjTR6/qBTz1k3hBPCeBZirYxQ9ZQt3tXq1VpZZdoOtUtwzB0w9WFT8jw9FxtnhWbUdglEd2s24BQgiGI8R8gSfUQn9FQ8eMpTTGfJZ9Am7ppSGgNraEGTYecq/p7gJzdN5EOSKYMaGwGzAJsgCKUIgKR8jDoNtTz73Vws3eUAsIimibsaP0zSogsUUwXKNRYkVnB7vuIJ8rVrCPodQmMM4aX6FaOyQJAxJR+iiK8vsFMDF/IlLz9ypqJP1xMGYI/aUtd3+cqqOsnqhPgKWL8//Rsv18blDGIM9QMnsnoGnaqOJiT3mP1YhWyVnCxKvfvV42cwr7zhtSu3dv18bDuZmu7aQiT/lOvP9arZf/un6dnODYXhg3sed/yL5P0znHeKsngJjKuwqdo3p6PyW30aIbDJDLvV0Zbn4zWAz5/7S35c3D20H+8HlUriNH0MgPR5VXF6Y8T/+ohebr4df+yDpIySTr2isxrFzVc/UVf7HnFnI17/qs7i+edV3AzTMLp3A9ujTNYibB50bkOwj/s5Xdye9ujjfec9nM4NBaSMMwmLwjyYinHoxsoHdEvwL+WF2nBoRblrt5CahTjiHC1KXdJafEyIUA49EQzN+ua4ZdbVTMwK65tO6bRbrm+Jf5znZrZcf1aoUEbFkcU25REWMaSKruZn68JwsRjiIQo1ZY0gzPE1C8QA8CB0iUDcTgoYWhEpYpXL4NKxW9bVivwO07HsKzqpRt02kFgX7bMiqrcUn5H7lI/4ig9VPDKgYIPEMQLjKTMyzlnYtAZFyV5BcuMx2ZpCUoEZeIiSKUWe5ZTK+sMJ4sYScJ6QsMsRqXFbJEXSGebX0sDkOVWzOCCphzEZn4MP83y+FtREOETYunAZEotJJqKTtxIdpHP53m7+3kX8H4WYnnaRHV5iuGGyeGn96GR07KbmF1ikJkF992WH0KcANC/4Kcfl2YXL1zivejFLSsuDiErzaK/r6D0WsqWyyzvaFVKZirgdaGcpj5EMBO69zaic0T0HYT+rWtnx/oo8s5+yC/jMzLkgKNEzJ+SL7/x5hgiJt8cXXF+1t990ByEFHXjaM1P2dqxeJpIxl++XqAHpZ8w98XPiqbhe7tOYO3FEXmKhwbHZCpX8oJ5+2Q2IBWwWCgiTffBTwGcCn5o3BV5x4WLaZpkHH3+RZFS11ABhDQjvBuouWFffnOe/G2BvHenDzC5xG/v7DX79M5+6t0MhRAmQN354r87azgfF4hU+TTIuTTUtXiCiuBkuif3W4L7ih903HKt3Wn/TfEPM2l+MH+07NX0+Dw0/wM=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N65dIOMFOobDmKIiDqfjkT0hQibYJNCrh//UkKRUB065lxBrO68q1vXfIldQaS2PJ8xlDKMSVKN2io/7pg4pQNw9GAa000p1x2tUm1bGtGdWK75QkIbddWlS5jGeoSxgHhDdUyTFszLc2qjUzbs8qe45Ycx/mtKmOUMgEtXEqGqqyTmDAvD9tQs5R4FDDMPAISxDwOvaHfu/GEpwcKTmqzvmGZB0ybM84Xnq7DUoggimNYgjTR6/qBTz1k3hBPCeBZirYxQ9ZQt3tXq1VpZZdoOtUtwzB0w9WFT8jw9FxtnhWbUdglEd2s24BQgiGI8R8gSfUQn9FQ8eMpTTGfJZ9Am7ppSGgNraEGTYecq/p7gJzdN5EOSKYMaGwGzAJsgCKUIgKR8jDoNtTz73Vws3eUAsIimibsaP0zSogsUUwXKNRYkVnB7vuIJ8rVrCPodQmMM4aX6FaOyQJAxJR+iiK8vsFMDF/IlLz9ypqJP1xMGYI/aUtd3+cqqOsnqhPgKWL8//Rsv18blDGIM9QMnsnoGnaqOJiT3mP1YhWyVnCxKvfvV42cwr7zhtSu3dv18bDuZmu7aQiT/lOvP9arZf/un6dnODYXhg3sed/yL5P0znHeKsngJjKuwqdo3p6PyW30aIbDJDLvV0Zbn4zWAz5/7S35c3D20H+8HlUriNH0MgPR5VXF6Y8T/+ohebr4df+yDpIySTr2isxrFzVc/UVf7HnFnI17/qs7i+edV3AzTMLp3A9ujTNYibB50bkOwj/s5Xdye9ujjfec9nM4NBaSMMwmLwjyYinHoxsoHdEvwL+WF2nBoRblrt5CahTjiHC1KXdJafEyIUA49EQzN+ua4ZdbVTMwK65tO6bRbrm+Jf5znZrZcf1aoUEbFkcU25REWMaSKruZn68JwsRjiIQo1ZY0gzPE1C8QA8CB0iUDcTgoYWhEpYpXL4NKxW9bVivwO07HsKzqpRt02kFgX7bMiqrcUn5H7lI/4ig9VPDKgYIPEMQLjKTMyzlnYtAZFyV5BcuMx2ZpCUoEZeIiSKUWe5ZTK+sMJ4sYScJ6QsMsRqXFbJEXSGebX0sDkOVWzOCCphzEZn4MP83y+FtREOETYunAZEotJJqKTtxIdpHP53m7+3kX8H4WYnnaRHV5iuGGyeGn96GR07KbmF1ikJkF992WH0KcANC/4Kcfl2YXL1zivejFLSsuDiErzaK/r6D0WsqWyyzvaFVKZirgdaGcpj5EMBO69zaic0T0HYT+rWtnx/oo8s5+yC/jMzLkgKNEzJ+SL7/x5hgiJt8cXXF+1t990ByEFHXjaM1P2dqxeJpIxl++XqAHpZ8w98XPiqbhe7tOYO3FEXmKhwbHZCpX8oJ5+2Q2IBWwWCgiTffBTwGcCn5o3BV5x4WLaZpkHH3+RZFS11ABhDQjvBuouWFffnOe/G2BvHenDzC5xG/v7DX79M5+6t0MhRAmQN354r87azgfF4hU+TTIuTTUtXiCiuBkuif3W4L7ih903HKt3Wn/TfEPM2l+MH+07NX0+Dw0/wM=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZrU+I8FP7ur+jUj07plVtHmMECa1UEBXd1v7wT0gBh26QmKRd//SbFIiC6+s44gzk9ec5zLnmScw6S2PFbnCMmMCVa2G7o/1UiiCZOtW7Y0AaGV62NjRqYTAyrbo29mut6juXoWsh5hkLCBSCioTuW7Rq2Yzi1ke36TtkvOyXHqfzWtZ+IcQktXUqWrq2SmHA/D9vQM0Z8CjjmPgEJ4r6A/rDVu/Glpw8KTnrzfMMyD8iaMyFS3zRhKUIQxTEsQZqY5+aez3nE/SGeEiAyhl5jRryhv+5dLpelpVuibGo6lmWZVt2UPhHH01O9eVJsRlFIJnSzDgChBEMQ4xegSPWQmNFIa8VTyrCYJR9A26ZtKWgDraABbY+c6uZbgJzdF5H2SDIODD4DdgF2jyaIIQKR9nAfNvTTr3Vws3fEAOETyhJ+sP4eJUQWKKYpigxeZFaw+zrikXI1zxH0QwLjjOMFulVjkgKIuDZgaIJXN5jL4Yu4lrdfW3H5h4spQ/A7bTk3d7lK6uaR6rTxFHHxf3q2268Nyk8QZ6i5gsHTk4OvB9kPWL1LvfSalu3J+gXTaSOnsOu8IbVt9+v6cFi3s/W6SYTeHGTL5dVYWOXVeu5dm96aJI9uur7oj+bQvoJs6i5hJ+p36XTw0L4PbXv8cDPqXHdufrgB+UPQJXw567P62Ql9YleT0Z3XY3Ecj156z796t07f5Ou7y6coEpUBHXqt6bpfWXXD24f758x9TGF7LMYW6wb9X3P3IRuskqvrs5o5P3HFADzO8W+3Fw6C4fTyulprvOW0m8O+sZCEYTaeIyiKpRqPsK11Zb+A+FxelAVHxiR39VOlUVwgIvSm2qWkxc+kAOHIl83crDtOq9wOgrZdqcsTZFvBRb3lyP/qXs3u1lu1QoM2LA4oBpRMsIqlVHYzP58ThInPEYkQMxY0gzPE9U8Q20AALST38nBQwtGIShWvVtqOY3Xctl0PguCiKvk6rW7drlQ73Qu709G1Wyr6pM9aE4HYvoJX9hT8HkGcYqRkXs05l4POhSzJM1hkIrZLC1AiKJMXAVNa7DterWxynKQxUoTNhEZZjErpLM0LZPLNr2MAyHMr5jClTIDYzo/hh1kefisKIn0irBy4SukCyaaiIzeSV+Tzcd713bwL+FYWYXXaZHUFw3DDZP/T29CoadlOzDYxyO2C+3bLNyGOAJif8DMPS7ONFy3wTvTilpUXh5SVZtHfZ1B6LmWLRZZ3tKokk0l4UyqnbQ4RzKTurUf0DyLmFsL80rWzZX0QeWvf55eJGRkKIFAi50/Ll194cwwRV2+OUJ6f1VcfNHshZd0EWoljtiCWTxPF+NPXC/Sh8pPmgfxZUha9tesI1k4cmad8aAhMpmqlLpj1B7MBqYTFUhEp2wU/BnAs+L5xW+QtFyGnaZwJ9PEXTUldQwcQ0oyIsK3nhl35zXmKdYr8N6d3MLnEv97ZK/7hnf3YuxlKIUyAvvXF/3Y2cD4uEOnqaZBzaegr+QSVwcl0R+5fCe4qfrtbL9eCbvAvxd/PpPnO/N6yU9PD89D8Cw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0P+6UvtDSlxFmgIKLK7grrlf5ciemKUTbpCYpoL/+JsUisOi6d8YZzOnJc57zkic55SDPnKjLOWICU6KN4rb+b+p4bpK0LCOFXmi4lo+MwAqaRrPVdFstGPhpGujaiPMSjQgXgIi27lh207Adwwmu7WbkeJHnNZxmONO1G8S4hJYuDUvX1nlGeFSFbeslIxEFHPOIgBzxSMBo2h1fRNIzAjUnvXO6YVkFZJ2FEEVkmrCRIIiyDDYgzc1Tc8/nNOHRFM8JECVDrzET3tZf965Wq8aq2aBsbjqWZZlWaEqfhOP5F71zUm9GyYikdLPuA0IJhiDDL0CRGiOxoInWzeaUYbHI34G2TdtS0AZaQwPaLvmim28BKnafRNojyTgw+ALYNdgVShFDBCLt19WorX/5XAc3e68ZIDylLOcH67+jhMgSZbRAicHrzGp2n0c8Uq7OKYLRiMCs5HiJJmpMCgAR134wlOL1BeZy+BKuVe3X1lz+4XrKEPybtpyau1wldfNIdWI8R1z8n57t9muDcgOyEnUsO81T69mekOXgOV09PH0zuya4HrzMgnZFYdd5Q2rb7tf14bBuZ+t10yxf/mLzSUBe/MvWZc+czm5GL8Of9s/1LbXcR3R1ZttFPvUW5xOKv7tfx8v7dUiD+HLxY/3VOSMX2SVz1+6tdTYcn6SzFxuHLuqh83sfTWf/FL1iMgapOTFvHlctEND4ofXdat31bwfXZ3zUtAQbxvcl9577IO3xG3zuA5bc301bFycx8+PZ1XR89y3tgVt/GbBB+y2n3Rz2jbUkTMv7BwRFvVTjMYq1oewXEB/Li7LgxEgr16hQGsUFIkLvqF1KWqJSChBOItnMzXrgdr2u5w/sVthsurbV74VdR/4XuoE9DLtBrUEbFgcU+5SkWMVSKruZn48JwjziiCSIGUtawgXi+geIMRBAG5EreTgo4eiaShVvhXE/7gWuI9n2vN6w27W8gTfwHSsMPN/3dW1CxSW5ZN1UILav4K09Bb9CEBcYKZlXc87loHMhS/IElqXI7MYSNAgq5UXAlBZHjht4Jsd5kSFF2MxpUmaoUSyKqkAm3/w6BoC8smIOC8oEyOzqGL6b5eG3uiDSJ8HKgauUekg2FR25kdw6n/fzDnfzruG7ZYLVaZPVFQzDDZP9T29Do6ZlOzHbxCC3a+7bLX8JcQTA/ICfeViabbxkiXei17esvDikrHTq/j6BxlOjXC7LqqO+kkwm4U2pnLY5RbCUuvd8TR8RMbcQ5qeunS3rg8hb+z6/UizIVACBcjl/WrX8xJtjirh6c4zk+Vl/9kGzF1LWTaC1OGbrZ/Jpohh/+HqBEVR+0vxD/qwoS97adQRrJ47MUz40BCZztVIXzPM7swGphMVSESnbBT8GcCz4vnFb5C0XIafpvhTo/S+akrq2DiCkJRGjWK8Mu/Jb8RTPBYrenH6DqST+9c5e83fv7NvxxVQKYQ70rS/+s7OBq3GBSFdPg4pLW1/LJ6gMTuY7cv9KcFfx42HoBf1h/0+Kv59J5zfz75admh6eh85/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0825531388237153637</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0825531388237153637</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0825481388237148230</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0825501388237150955</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0825531388237153637</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>90A5D71D16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F2A5ECCD16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F4A5B57E16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a43b1133-03f5-4d9d-af8f-7b340a1d4855</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true" id="ee161828-c017-447e-8019-2b264512c49d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="ee12df8c-fe8c-46da-8d62-6f9f5fd0c0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"EE98E2B40D7A61C7E0401F0A0799472F:C7007487"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_082631388237163530</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>27A5124F16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:27A5124F16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:27A5124F16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>D7A5026F16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>3AA5FE1026933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3CA58BD026933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:D7A5026F16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:3AA5FE1026933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:3CA58BD026933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0P+6UvtBq2xFmCr1c64KrgO5dv9yJ6QGCbYJNCri//ibFIrDo6p1xBnN68pznvORJzjnKMyeMOIdCEEa1JG7p/078h9QPXDBOfdc33NRuGshH2ECTpuc7D+5DgAJdSzgvIaFcICpaumNJL9sxHH9sN0PHCz2/ETjOva7dQcEltHRpWLq2zjPKwypsSy8LGjLECQ8pyoGHAoejaNAPpWeIak56+3zDsgpYtGdCLELTxI0UMGQZbmCWm+fmns95ysMRmVIkygJeYqa8pb/sXa1WjVWzwYqp6ViWZVqBKX1STqZf9PZJvRnShE7YZt1FlFGCUUZ+IUVqAGLGUi3KpqwgYpa/AW2btqWgDVhjA9su/aKbrwEqdh9E2iNZcGTwGbJrsCFMoACKQbsdJi39y8c6uNk7LhDlE1bk/GD9OUpAl5CxBaQGrzOr2X0c8Ui52ueAw4TirORkCVdqTBYIA9euC5iQdZ9wOXwp16r2a2su/0g9ZYA/05Zzc5erpG4eqU5MpsDF/+nZbr82KHcoK6FduN++Xo2i1fUz6qzF6PbH4zUf+la/82PVqijsOm9Ibdv9sj4c1u1svWx6uszhR7Za/lzFkykzhwH+G0fjsZNddq35nWVjx774eTtvrpPTswe07A45F3HuRdM1T2l20/n2bS5G9xcXX29ReYJ7Sx5fek1zfM9Wq5vHpHlN5oUbL+F2wPI8uewFc2+A+sXdYHR2jz0GfnR3G1/AtHeJ41HZnRfT+5vn5Pqm+3jyeNWfBQGLm1afpNHkae2vWq857eawb6wlYVQ+zAGLeqnGI4m1nuwXEu/Li7KQ1JhUruFCaRQXQIXeVruUtISlFCCShrKZm3V8FnmWc9qzT4Nm07WtbieIHPlf4Pp2L4j8WoM2LA4odhmdEBVLqexmft4niPOQA02hMJasxDPg+juIMRJIS+hQHg5GOYyZVHHHD3o9N3CCM6/X8zuu43l/9TqnTbfpRVGna+vaFRPf6fcimggo9hX8dE/Bh4DJgoCSeTXnXA46F7IkT2hZisxuLFGDQikvgkJpcei4vmdyki8yUITNnKVlBo3FbFEVyOSbX8dAmFdWwvGCFQJldnUM38zy8FtdEOmTEuXAVUodkE2FIzeSW+fzdt7Bbt41fFSmRJ02WV1RELxhsv/pdWjUtGwnZpsY5nbNfbvlkxBHAMx3+JmHpdnGS5dkJ3p9y8qLQ8pKu+7vE2o8Ncrlsqw6eqYks5DwplRO2xwBLqXuPY/ZI1BzC2F+6NrZsj6IvLXv8yvFjI4EEpDL+dOq5QfeHCPg6s2RyPOz/uiDZi+krJuAtThm62byaaIYv/t6wSFWftJ8LX9WrEhf23UEayeOzFM+NAShU7VSF8zzG7OBmYQlUhFZsQt+DOBY8H3jtshbLkJO00Mp4O0vmpK6lo4wZiUVSaxXhl35rXiK5wWEr06/wVQS/3Jnr/mbd/Y/g/5ICmGO9K0v+bOzQapxwaCrp0HFpaWv5RNUBqfTHbl/Ibir+I5UfNtx/6j4+5m0fzP/btmp6eF5aP8H</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0P+6UvtBq2xFmCr1c64KrgO5dv9yJ6QGCbYJNCri//ibFIrDo6p1xBnN68pznvORJzjnKMyeMOIdCEEa1JG7p/078h9QPXDBOfdc33NRuGshH2ECTpuc7D+5DgAJdSzgvIaFcICpaumNJL9sxHH9sN0PHCz2/ETjOva7dQcEltHRpWLq2zjPKwypsSy8LGjLECQ8pyoGHAoejaNAPpWeIak56+3zDsgpYtGdCLELTxI0UMGQZbmCWm+fmns95ysMRmVIkygJeYqa8pb/sXa1WjVWzwYqp6ViWZVqBKX1STqZf9PZJvRnShE7YZt1FlFGCUUZ+IUVqAGLGUi3KpqwgYpa/AW2btqWgDVhjA9su/aKbrwEqdh9E2iNZcGTwGbJrsCFMoACKQbsdJi39y8c6uNk7LhDlE1bk/GD9OUpAl5CxBaQGrzOr2X0c8Ui52ueAw4TirORkCVdqTBYIA9euC5iQdZ9wOXwp16r2a2su/0g9ZYA/05Zzc5erpG4eqU5MpsDF/+nZbr82KHcoK6FduN++Xo2i1fUz6qzF6PbH4zUf+la/82PVqijsOm9Ibdv9sj4c1u1svWx6uszhR7Za/lzFkykzhwH+G0fjsZNddq35nWVjx774eTtvrpPTswe07A45F3HuRdM1T2l20/n2bS5G9xcXX29ReYJ7Sx5fek1zfM9Wq5vHpHlN5oUbL+F2wPI8uewFc2+A+sXdYHR2jz0GfnR3G1/AtHeJ41HZnRfT+5vn5Pqm+3jyeNWfBQGLm1afpNHkae2vWq857eawb6wlYVQ+zAGLeqnGI4m1nuwXEu/Li7KQ1JhUruFCaRQXQIXeVruUtISlFCCShrKZm3V8FnmWc9qzT4Nm07WtbieIHPlf4Pp2L4j8WoM2LA4odhmdEBVLqexmft4niPOQA02hMJasxDPg+juIMRJIS+hQHg5GOYyZVHHHD3o9N3CCM6/X8zuu43l/9TqnTbfpRVGna+vaFRPf6fcimggo9hX8dE/Bh4DJgoCSeTXnXA46F7IkT2hZisxuLFGDQikvgkJpcei4vmdyki8yUITNnKVlBo3FbFEVyOSbX8dAmFdWwvGCFQJldnUM38zy8FtdEOmTEuXAVUodkE2FIzeSW+fzdt7Bbt41fFSmRJ02WV1RELxhsv/pdWjUtGwnZpsY5nbNfbvlkxBHAMx3+JmHpdnGS5dkJ3p9y8qLQ8pKu+7vE2o8Ncrlsqw6eqYks5DwplRO2xwBLqXuPY/ZI1BzC2F+6NrZsj6IvLXv8yvFjI4EEpDL+dOq5QfeHCPg6s2RyPOz/uiDZi+krJuAtThm62byaaIYv/t6wSFWftJ8LX9WrEhf23UEayeOzFM+NAShU7VSF8zzG7OBmYQlUhFZsQt+DOBY8H3jtshbLkJO00Mp4O0vmpK6lo4wZiUVSaxXhl35rXiK5wWEr06/wVQS/3Jnr/mbd/Y/g/5ICmGO9K0v+bOzQapxwaCrp0HFpaWv5RNUBqfTHbl/Ibir+I5UfNtx/6j4+5m0fzP/btmp6eF5aP8H</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZc9o8FH3vr/C4jxnjncUTmDE4FLKSQJO2L98o8gWUGslYMkt+fSUTEyAkTb+ZzBBdX5177qIjnXI0S5wg5BwyQRjV+lFT/w+hquXUwDHsOvYMz/Fs47Fq+wa4deTVoBE7COtan/Mc+pQLREVTdyzbNWzHcOoj2w2camDZlYbv/dK1e8i4hJYuFUvXVrOE8qAI29TzjAYMccIDimbAA4GDYXh1GUjPAJWc9NbphmURMGtNhUgD08SVGDAkCa5gNjNPzT2f05gHQzKhSOQZvMSMeVN/2btcLitLt8KyielYlmVaDVP6xJxMvuqtL+VmiPt0zDbrDqKMEowS8owUqSsQUxZrYTJhGRHT2TvQtmlbCtqAFTaw7dGvuvkaoGD3SaQ9khlHBp8iuwS7gzFkQDFo3+/6Tf3r5zq42TvKEOVjls34wfrfKAFdQMJSiA1eZlay+zzikXK1TgEHfYqTnJMFXKsxSREGrg0yGJPVJeFy+GKuFe3XVlz+kXLKAP9LW07NXa6SunmkOhGZABf/p2e7/dqg3KMkh1Y2+H05/fHzpO95c8H5IOXEnvzi9Lp31Swo7DpvSG3b/bI+HNbtbL1sov75t6idP/26ZWc13sjHJ4L+ML893VykSzxd9hpW76yX254Tu+ns7Oli5I8eop/rSTsEMfJ7N8PIfroW0UnWmDlfLNa57nvWxXRgOvUxuor4Ovp5e/7wKIPedTzzfH4/XflpRup3q/Xg9ryzGiT35OYh6q19ywufb0M4wdXuxfD8cf6lm84fvq+6bAG37vr5e48S1nzNaTeHfWMpCcP88QmwKJdqPPqR1pX9QuJjeVEWEhvjwjVIlUZxAVToLbVLSUuQSwEicSCbuVm7Yeh3z2zLqTZc17OtTrsROvK/hle3u42wXmrQhsUBxQ6jY6JiKZXdzM/HBPEs4EBjyIwFy/EUuP4BYoQE0vr0Th4ORjmMmFRxy5Y8q9V2zT4767Yjp+3W3FrVi9y2b7luzda1ayZu6E0WjgVk+wpe3VPwO8AkJaBkXs05l4POhSzJHC1ykdiVBapQyOVFkCktDhyv7puczNIEFGFzxuI8gUo6TYsCmXzz6xgI88JKOE5ZJlBiF8fw3SwPv5UFkT4xUQ5cpdQG2VR4cyP5gV/m837ejd28S/gwj4k6bbK6IiN4w2T/0+vQqGnZTsw2Mcztkvt2yz9CHAEwP+BnHpZmGy9ekJ3o5S0rLw4pK62yv3NUmVfyxSIvOlpTkplJeFMqp20OAedS99Yj9huouYUwP3XtbFkfRN7a9/nlYkqHAgmYyfnTiuUn3hxD4OrN0ZfnZ/XZB81eSFk3AStxzNZJ5NNEMf7w9YIDrPykeSB/liyLX9t1BGsnjsxTPjQEoRO1UhfM+p3ZwEzCEqmILNsFPwZwLPi+cVvkLRchp+kxF/D+F01JXVNHGLOcin6kF4Zd+S14inUKwavTG5hC4l/u7BV/987+cXU5lEI4Q/rWl/zd2SDFuGDQ1dOg4NLUV/IJKoPTyY7cvxDcVXynFvq243Xtvyj+fiatN+a3lp2aHp6H1h8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcR8b4xs2ewIy5tTRJk0CapLycEfIGFGzJWDJx+vVHMjEBQnLSM5MZou2ttde+aElnHMWR4wecQyoIo9qo39b/mc2a9aYHnhE6TsOoNRA2kFtrGlbdmTcsqDVn2Na1EecZjCgXiIq27li2a9iO4bRubdd3Gr5Vr1quO9W1O0i5hJYuVUvX8jii3C/CtvUspT5DnHCfohi4L7A/CS4vfOnpo5KT3jnbsiwCpp2lEIlvmrgaAoYowlXMYvPMPPA5C7k/IQuKRJbCS8yQt/WXvU9PT9Unt8rShelYlmVanil9Qk4WX/XOl3IzhCM6Z9t1D1FGCUYR+YMUqUsQSxZqQbRgKRHL+B1o27QtBW1Ajg1s1+hX3XwNULD7JNIByZQjgy+RXYKNYQ4pUAzar/GorX/9XAe3e29TRPmcpTE/Wv8dJaAbiFgCocHLzEp2n0c8Ua7OGWB/RHGUcbKBn2pMEoSBa9cpzEl+QbgcvpBrRfu1nMs/Uk4Z4L9py5m5z1VSN09Up08WwMX/6dl+v7YodyjKoGOusJgkV2yYRUH+Dbx4Pr2ZzCqOt/nVLijsO29J7dr9sj4e1t1svWzq5r8uhuHq8X72vfGtcj28W6xmXvAnsn9n/OGh4uEJu7vIVt3a4AYuB78n62l3/XBNf1e6FXTzeJV+vxrWxJW15OdB8uUyGs/Oa/lo2hpUVqYznnQ3edy6X3+Lv6/OaW96//CDXQsy7c8vxvh2DhV3tlkv+485kPP8+abef+ia04UbVwaL5Mv9U2ZtHFv8cNP76XjJZmnQfs1pP4dDYykJk2z2CFiUSzUeo742lP1C4mN5URYSGvPC1U+URnEBVOgdtUtJi59JASKhL5u5Xbu9oN7q9i2n4bluzbZ6XS9w5H9erWUPvaBVatCWxRHFHqNzomIpld3Oz8cEcexzoCGkxoZleAlc/wCxjwTSRnQsDwejHG6ZVPHhsGe3uq1BrTFoNmzLkqS7dbvhBoPusF8beLr2k4krepUGcwHpoYI3DhR8DJgkBJTMqznnctC5kCVZo00mIru6QVUKmbwIUqXFvlNr1U1O4iQCRdiMWZhFUE2WSVEgk29/HQNhXlgJxwlLBYrs4hi+m+Xxt7Ig0ickyoGrlLogmwpvbqS6Xy/zeT9vbz/vEj7IQqJOm6yuSAneMjn89Do0alp2E7NLDHO75L7b8pcQJwDMD/iZx6XZxQs3ZC96ecvKi0PKSqfs7xpV19Vss8mKjjaVZKYS3pTKaZsTwJnUvedbtgJq7iDMT107O9ZHkXf2Q36ZWNKJQAJiOX9asfzEm2MCXL05RvL85J990ByElHUTkItTtl4knyaK8YevF+xj5SfN1/LniaXha7tOYO3FkXnKh4YgdKFW6oJ5fmc2MJOwRCoiS/fBTwGcCn5o3BV5x0XIaZplAt7/oimpa+sIY5ZRMerrhWFffgue4jkB/9XpDUwh8S93ds7fvbMfLi8mUghjpO98yX87G6QYFwy6ehoUXNp6Lp+gMjhd7Mn9C8F9xXeaQd12akP7PxT/MJPOG/Nby15Nj89D518=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_082631388237163530</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_082631388237163530</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_0825571388237157471</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_082601388237160560</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_082631388237163530</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E7A5126F16933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>4AA50F1026933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>4CA5ABD026933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee12df8c-fe8c-46da-8d62-6f9f5fd0c0b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true" id="93bb75bb-4f76-4457-844b-e2e47a775c8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT FAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - ADULT FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER3",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS" id="42534710-c549-448e-8535-16e92cd055e1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - ADULT"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","SAU");
myTC.setPropertyValue("Requestee","ADULT");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E619BFB4EBEC6B8FE0401F0A07990E3B</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"EE988A2E58B8BA0CE0401F0A05991749:27024A17"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:7EA5D5C126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>81B5DB8226933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:2FA5A4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:81B5DB8226933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:83B51A3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlAo7QgzVWTtLq4OBVf8ciekB4i0aW1SXu6vv0mxCIiu3hlnMKcnz3nOS57knKEktjyfMcg5SakSdNvqP2gCDdc2TA01HVOzJ25DQ2ZzorkOYNQAZIFRV5WAsQICyjiivK1ahlnXTEuzWkOz7llNz3BrpuM+qso95ExAC5eaoSrrJKbMK8O21SKnXooYYR5FCTCPYy/0b/qe8PRQxUntnG9ZlgHzzpzzzNN1XIsAQxzjGk4T/Vw/8DmPmBeSGUW8yOElZsTa6sve1WpVW9VraT7TLcMwdMPVhU/EyOy72vlWbYYooNN0u75ENKUEo5j8iySpG+DzNFL8eJbmhM+Td6BN3TQktAZrrGHTpt9V/TVAye6TSAckc4Y0NkdmBTaAKeRAMSijQdBWv3+ug9u9wxxRNk3zhB2tv0YJ6BLiNINIY1VmFbvPI54oV+ccsBdQHBeMLOG3HJMMYWDKXQ5Tsu4TJoYvYkrZfmXNxB+ppgzwV9pyru9zFdT1E9Xpkhkw/n96tt+vLco9igvooE1/PCWO9atXt80VGt9PRgYa0/sHfdwuKew7b0nt2v2yPh7W3Wy9bMLO9ZO/jjdZmC6N2yf9mi3DswFes2K6uEtnTz+nmz6JBz8u8B/y1P99NryenQ2bVw/+j+hu8rOLlws0aobJ4qrp33+zVouZE64XrdXw+sFpuGejOs6b9cU09Btje3KTOclFsHiKJ9n4bHTj9u1gObIdS58tDEzibLziP1puLzVubx/db4+DaDNqBZvEZq0ijP+AiduvOe3ncGisJCEsJk+AebWU4xF0lZ7oF+Ify4u0kEiblq5eJjWKcaBc7chdUlq8QggQiTzRzO3a6vkN374yraZbF70yLi9c3xL/uXbL7Ll+q9KgLYsjipcpnRIZS6rsdn4+JogTjwGNINeWaYHnwNQPELuIIyWgA3E4UspgmAoV7/ndpnl14duW3eq5DevKdg2n7ro956LesxxXVX6n/Jbe5v6UQ36o4M0DBR8AJhkBKfNyzpkYdMZFSZ7RsuCxWVuiGoVCXAS51GJPxGvojCRZDJKwnqRREUMtm2dlgXS2/bU0hFlpJQxnac5RbJbH8N0sj79VBRE+EZEOTKZ0AaKp8OZGaniNKp/383b3867g/SIi8rSJ6vKc4C2Tw0+vQyOnZTcxu8QwMyvuuy1fhDgBoH/ATz8uzS5etCR70atbVlwcQlY6VX+fUe25ViyXRdlRR0pmLuB1oZymHgIuhO5thukCqL6D0D917exYH0Xe2Q/5FXxOQ444JGL+lHL5iTdHCEy+OQJxftaffdAchBR147Dmp2yXsXiaSMYfvl6wh6WfMN+Jn1WaR6/tOoG1F0fkKR4anNCZXMkLZvPObOBUwBKhiGm+D34K4FTwQ+OuyDsuXEzTpODw/hdFSl1bRRinBeVBVy0N+/Jb8uSbDLxXpzcwpcS/3Nlr9u6d/XDTD4UQJkjd+ZK/O2ukHBcMqnwalFza6lo8QUVwOtuT+xeC+4rvXPmNbuPyr4p/mEnnjfmtZa+mx+eh8x8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/eiUvlAo7QgzVWTtLq4OBVf8ciekB4i0aW1SXu6vv0mxCIiu3hlnMKcnz3nOS57knKEktjyfMcg5SakSdNvqP2gCDdc2TA01HVOzJ25DQ2ZzorkOYNQAZIFRV5WAsQICyjiivK1ahlnXTEuzWkOz7llNz3BrpuM+qso95ExAC5eaoSrrJKbMK8O21SKnXooYYR5FCTCPYy/0b/qe8PRQxUntnG9ZlgHzzpzzzNN1XIsAQxzjGk4T/Vw/8DmPmBeSGUW8yOElZsTa6sve1WpVW9VraT7TLcMwdMPVhU/EyOy72vlWbYYooNN0u75ENKUEo5j8iySpG+DzNFL8eJbmhM+Td6BN3TQktAZrrGHTpt9V/TVAye6TSAckc4Y0NkdmBTaAKeRAMSijQdBWv3+ug9u9wxxRNk3zhB2tv0YJ6BLiNINIY1VmFbvPI54oV+ccsBdQHBeMLOG3HJMMYWDKXQ5Tsu4TJoYvYkrZfmXNxB+ppgzwV9pyru9zFdT1E9Xpkhkw/n96tt+vLco9igvooE1/PCWO9atXt80VGt9PRgYa0/sHfdwuKew7b0nt2v2yPh7W3Wy9bMLO9ZO/jjdZmC6N2yf9mi3DswFes2K6uEtnTz+nmz6JBz8u8B/y1P99NryenQ2bVw/+j+hu8rOLlws0aobJ4qrp33+zVouZE64XrdXw+sFpuGejOs6b9cU09Btje3KTOclFsHiKJ9n4bHTj9u1gObIdS58tDEzibLziP1puLzVubx/db4+DaDNqBZvEZq0ijP+AiduvOe3ncGisJCEsJk+AebWU4xF0lZ7oF+Ify4u0kEiblq5eJjWKcaBc7chdUlq8QggQiTzRzO3a6vkN374yraZbF70yLi9c3xL/uXbL7Ll+q9KgLYsjipcpnRIZS6rsdn4+JogTjwGNINeWaYHnwNQPELuIIyWgA3E4UspgmAoV7/ndpnl14duW3eq5DevKdg2n7ro956LesxxXVX6n/Jbe5v6UQ36o4M0DBR8AJhkBKfNyzpkYdMZFSZ7RsuCxWVuiGoVCXAS51GJPxGvojCRZDJKwnqRREUMtm2dlgXS2/bU0hFlpJQxnac5RbJbH8N0sj79VBRE+EZEOTKZ0AaKp8OZGaniNKp/383b3867g/SIi8rSJ6vKc4C2Tw0+vQyOnZTcxu8QwMyvuuy1fhDgBoH/ATz8uzS5etCR70atbVlwcQlY6VX+fUe25ViyXRdlRR0pmLuB1oZymHgIuhO5thukCqL6D0D917exYH0Xe2Q/5FXxOQ444JGL+lHL5iTdHCEy+OQJxftaffdAchBR147Dmp2yXsXiaSMYfvl6wh6WfMN+Jn1WaR6/tOoG1F0fkKR4anNCZXMkLZvPObOBUwBKhiGm+D34K4FTwQ+OuyDsuXEzTpODw/hdFSl1bRRinBeVBVy0N+/Jb8uSbDLxXpzcwpcS/3Nlr9u6d/XDTD4UQJkjd+ZK/O2ukHBcMqnwalFza6lo8QUVwOtuT+xeC+4rvXPmNbuPyr4p/mEnnjfmtZa+mx+eh8x8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx4zxDfBlAjMGQ+OEJBTSnJy+nFFlGSuxJWLJYPr1lUxMgJI0PTOZIdreWnvti5Z0zkCeWX7AGCo4pkSJwp76H3DaABltV0vaXkdrd364GkiQoSWe3batrt11EkdVIsZKFBHGAeE91TJMWzMtzXLvTNu3ur5ptjzD/K4q96hgAlq4tAxVqfKMML8O21PLgvgUMMx8AnLEfA79eXA98YWnDxpOav98y7IOWPRTzpe+rsNWjCDKMtiCNNfP9QOf85j5c7wggJcFeokZs576sne9XrfWdosWC90yDEM3PF34xAwvPqv9T81mFEckodv1EBBKMAQZ/gkkqWvEUxorQbagBeZp/ga0qZuGhNZQBTVotslnVX8NULP7INIByYIBjaXAbMBmKEEFIhAp32ZRT/38sQ5u994VgLCEFjk7Wv8dJURWKKNLFGusyaxh93HEE+XqnyPoRwRmJcMrdCPHZAkgYsq0QAmuJpiJ4YuZUrdfqZj4w82UIfg3bTnX97kK6vqJ6oR4gRj/Pz3b79cW5R5kJeqn1/bj82X76uliUvGLILCI7pmPo+DxZt2rKew7b0nt2v2yPh7W3Wy9bHq4jTbJyqke8Xcr+YKdzcgZXm2SKn3gX23v0jCX/9Bbb+CQL7Pq+mZyObbvp4tvP8Mn/ScfD8NZB+nT5Aps8HqUfJrS9p2VTqY3aRyuPDKd8rNRYZKJ06X5QM+GFxfO4xkF8N8rvRyU+f1TNHte8G5FpoV9lrgb+6wyK3Piukn09ZOdXnC+CnjsDdMvk9vwYT3qvea0n8OhsZGEefnjEUHeLOV4RKEyFv0C/H15kRYca0nt6i+lRjGOCFf7cpeUFr8UAoRjXzRzu3bNQSccuJbV9Wy7bRrDgRdY4j+v7ZpjL3AbDdqyOKI4pCTBMpZU2e38vE8Q5j5DJEaFtqIlTBFT30EMAQdKRGbicFDC0B0VKh46gedZ4/E4dNxR2/E8wwlto2OH5tDthtZIVW4ovyW3RZBwVBwqePdAwWcI4iVGUublnDMx6IyLkjyDVckzs7UCLYJKcREUUot9q+12dIbzZYYkYT2ncZmh1jJd1gXS2fbX0gBktRUzuKQFB5lZH8M3szz+1hRE+MRYOjCZ0gCJpqITN5LR5PN23t5+3g18UMZYnjZRXV5guGVy+Ol1aOS07CZmlxhkZsN9t+UvIU4A6O/w049Ls4sXr/Be9OaWFReHkJV+099n0HpulatVWXfUkZJZCHhdKKepzxEshe5t7ugTIvoOQv/QtbNjfRR5Zz/kV/KUzDngKBfzp9TLD7w55ojJN0ckzk/10QfNQUhRN44qfso2zMTTRDJ+9/UCfSj9hHkqfta0iF/bdQJrL47IUzw0OCYLuZIXzOaN2YBUwGKhiLTYBz8FcCr4oXFX5B0XLqbpR8nR218UKXU9FUBIS8KjUK0N+/Jb8+SbJfJfnX6DqSX+5c6u2Jt39sP1ZC6EMAfqzhf/2VnD9bhApMqnQc2lp1biCSqCk8We3L8Q3Fd8ZxR0ws7Q/JPiH2bS/838u2Wvpsfnof8L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcxwwYX/BtAjMGSuuENA2QHKYvZxR5A0ptCSwZSL7+SCYmQEianBkG0PbW2mtfvKRzjrLUCiPOIReEUS3utfR/sRtM0TTwa44Lifxy/dp9YPs11/fw1GxiEyWersWcFxBTLhAVLd1qmHbNtGqWPzbt0HJD06k3A+e3rt1BziW0dKk3dG2TpZSHZdiWXuQ0ZIgTHlKUAQ8FDkfR1SCUniGqOOnt8y3LMmDenguxCA0D1xPAkKa4jllmnBsHPucJD0dkRpEocniOmfCW/rx3vV7X13ad5TPDajQaRiMwpE/Cyeyr3v5SbYYkplO2XXcRZZRglJInpEhdgZizRIvSGcuJmGdvQJuG2VDQNdjgGjYd+lU3XgKU7D6IdEAy56jG58iswIYwhRwoBu12GLf0rx/r4HbvOEeUT1me8aP15ygBXUHKFjIarzKr2H0c8US52ueAw5jitOBkBT/VmCwQBq79ymFKNgPC5fAlXCvbr224/JBqygB/pi3nxj5XSd04UZ0emQEX/6dn+/3aotyhtIB25zK4YPQMnH7cte+dW+PubOAO7wZL47ZVUth33pLatft5fTysu9l63jQsvkHx/WnTXaVksoyKq9XD94vZ3Xz+cH85QTQFz/MfI0OY49/JxPyRJTfd/i08GZ5Yigdw3IWHcs+DZgea/3zxcTI3u9Hg+sl1ztDkYvh7bNysmtn6x/piFnR/3Tg/RpG9jHDzdj0FemOtr7w/y8ETQ/l6nPjX9Gb5/RrFnmevoy8LjDeXk9FZzzu7YLf5hP2JWy857edwaKwkYVTcPwAW1VKNR9zT+rJfSLwvL8pCktq0dA0XSqO4ACr0ttqlpCUspACRJJTN3K59u9M0I9u23MC2HbPR7QSRJf8Fjm/2g8ivNGjL4ohil9EpUbGUym7n532COAs50ATy2ooVeA5cfwexhwTSYjqULwejHMZMqngUdTzX7vuO17f7lm+ZTi9yO71+z++6jSDo6tpPJq7pdR5NBeSHCu4eKPgQMFkQUDKv5pzLQedClmSJVoVIzfoK1SkU8iDIlRaHluM3DU6yRQqKsJGxpEihvpgvygIZfPtr1RDmpZVwvGC5QKlZvoZvZnn8rCqI9EmIcuAqpQ7IpsKJE6lR5fN23sF+3hV8VCREvW2yuiIneMvk8NHL0Khp2U3MLjHMzYr7bssnIU4AGO/wM45Ls4uXrMhe9OqUlQeHlJV21d8lqi/rxWpVlB31lGTmEt6QymkaI8CF1L3HMfsD1NhBGB86dnasjyLv7If8CjGnI4EEZHL+tHL5gTvHCLi6c8Ty/dl89EJzEFLWTcBGnLJ1U3k1UYzfvb3gECs/af4lf9YsT17adQJrL47MU140BKEztVIHzOMbs4GZhCVSEVm+D34K4FTwQ+OuyDsuQk7TfSHg7SeakrqWjjBmBRVxTy8N+/Jb8hSPCwhfnF7BlBL/fGZv+Jtn9uRqMJJCmCF950v+7lwj5bhg0NXVoOTS0jfyCiqD09me3D8T3Fd871vU7DW75t8U/zCT9ivza8teTY/fh/Z/</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>usergetr4_firstuser20131228_082671388237167801</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20131228_0826101388237170571</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20131228_0826131388237173247</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>3FA5D4E126933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>91B5EB8226933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>93B5CA3326933410CB9A23349481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b640c33b-9694-4dec-ab58-b80de10092ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42534710-c549-448e-8535-16e92cd055e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00051_UserGet_CS_FUNC_CLG_Get_YOUTH_P2" searchProperties="true" id="f8ddfe97-e52d-44fd-8816-64dd42eeb467"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU" id="92c99100-ab33-442f-be37-2bc83221a480"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "usercreate"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","YOUTH");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));


tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create - YOUTH SAU" id="1f504d6d-060f-40ae-bedc-c8f55781e671"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("Country",country);

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID1",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RET_CS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Get - YOUTH SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserGet_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
//myTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid3"));
myTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeUserGet","SUCCESS");
myTC.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTC.setPropertyValue("RequestorClass","FAU");
myTC.setPropertyValue("Requestee","YOUTH");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E60736F7C963CBC0E0401F0A05993D2E</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E70D01210A8C3671E0401F0A07997A7D:D5F272D3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E70D012043D9700FE0401F0A07997A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E70D012043D9700FE0401F0A07997A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E70D012043D9700FE0401F0A07997A7B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E70D012109BB3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E70D01210A3D3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E70D012109BB3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E70D01210A3D3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o6EMIorR3RGFoKLiADi+nEAoEGWSYtKvP4W2brt397597pNWVlbmyoGsVS9I91y6AxCCUewEflkSXiv/NCyj2WrvYI1iSL3GWJCqtS2drVm02SZZuq1bLFUpSwglUPJRrPvxa4UmqUaN5Gp0Q6PoDtXuUFy91WhtK+UljBA2jVXqZKWce66POle3r5Uk8juBjhzU8XUPok5sdFQgjztYs6PfMVXeXm4orw6jt30chx2CMOomNKDrGnUj8IgX4oPOi4k6qmP7epxE8N2niV4r72ezLKtnjXoQ2QRNkiRBcgTWMZFj/6q8le6HoSn5VnBbd3U/8B1Dd52LXoCSYbwPzDJw7SBy4r33jWmKoMjCdA3mRs2gGP9Xhfjt4Iruh5Y+gIyQXkN7nbobU6AFI+gbsLxQpNfKr59V8HZWi3QfWUHkoU/r/wYJ+il0gxCaNXSP7I7u5xa/SNfbCzQ6km+4CXJSOCnaJNQNiMqzCFpOPnYQbj4Tla/lL+fo3mHQ+C8leSGecWLYxBeZERwbovj/qddzrW5WlrqbwLdI9M/M+szpbRIq88yLJL4qLx3fztHrFcKz8g3Uo9Tv68+N+uir90PKohkq9OrQJectl1kraoPveexKXqZyQLSPdqvJiOygqiZxahOZvqUydcGtllrWbFqHBDFC2tNU5jKZcdNl6eRLIWXbK3ETtVrMvp1kcaPnU8rW2iqbiDtqekL5q4NFHFcm113wXuaP5MMQuN3NkVObDHuJ9wtdZdrRfFqi1s3mTp/Rh8hxTqt0JED0+jum5xiKuEbwfA2y+L9ukpygx/pj0S0mhYU/zxi+yZLUrQrdLoBdG2QSD2yJH1/AhLePp/3R6XMZyYP5ogcEcJYVkAn2RljO5yMxM5dLd7uUej1eVphsADZCCW8IYr4Utushqa+24YbukVuV5821Euwaw9AcHLPB3pjImpxNNOksH8R8oonk6iqzc7y+yAeZmmqLRml14DlZETMhu3oUxGw/2a6UcLPgMuMizmXA9AG1ELt7eaB5S8poKHvjII5lcLzK+b3cXS7lXNTArMTbkyWOTev2tqHhmeHOc/dPxgfYuGb2l+dd3022F/Egd8V+Vz31VWnXEObiECibxW61POqrXloyBhOwu3t0mo6+DjJ7286E+WY4CrbSPjUmYC7y/BzgdJFAlvpDEPR5IDPAyS/dA88GXbOXEUMalaqc22fXZ+e0RnqfdHWq3aY24xU7O7GC6Fe3o2R32Mv7dW9aHalmuuBi7rJBaTVldYcy8tCar8VBPMqtwVwt7WZCvjYGVdMeEu6F60Vyawiiy3nvyrYSr9gpOu8cy1rx6ynjtixXbiih5VrhGVW1YH6MSJaHDZrYnNNRXAK2zAPQPywO/Fzm20VSTSmbb2ReBz0xTsDlQMcjenkaDlLX2DRAkI9W08PxvTCmkIk8kc1F3FZiqS0AsyjCQF2IvQNY8LYd8bbY4+eGAOYbaZRtcL4WA6z8OY+9ax5tkQdiYwtYblBqLEgunsYqw4Czzy/8HreXT/nKZD2ydYLiWJ2ETCajieVvV8FR9pxoESXqYjSajPOdlvSPBzyrLFIdpY1tSUyPIXAmI21/FAJBn4WbTRxWfSMyYin0ZCm/TLfo0HZ2HjmsNil+RgpGi154u2zR18XtKLJVajRQ/FmjxZVQYp0HXvXQzlZVTWXDltn1LeF8JrbRkgxA0OOU5snMafq4X2RjNrOG4LjT6UnucvyZE0dbzciU+WiletVmqZmOxx550QhmEk4ztZ8x4nxebZi8NtBQGDmbpG3n0dQ36Y0es+mWXLJO6B45OjlqTNhY2h4u1iw1w5Y8K82ZtbH17FZoDAmFSIHYssZS/7y76JfQmxq3Afp5OjyEt/lBPE+WD6PnTjpU3K3QiO/L4gKShHIP3wp6/HcCU0gcs2ZdVTthwYJQDP248lacKshLJ8EUxzE7+Mq4rcUWKZAUTZEczzfYFiWSDEn1SEC2OK4FWsKd5dxQfILYDXzLKXwVPO52S/0doOF1EPRNGNXSIDH2EFX+YrHIV1nyFXz9Bj6CWoB5IkMKLNXjRYEVANts0k22yZIczZFUkwR0D3PESRBP/WkErBhGHzli8wNHVKDhhA4siGRxmyJ8naIYp+Skp0nsUvVUr/swwVQzKtheh2baTQI5XujCAjDhBWbiwnq4D68JItDtl67pBrpKFVH7R1K715v+2xA/792zgXVMp1BARTw8xBWFXxBe8h7M90G3n4O+mweJ6RQXOk5tHDnGDcnHrd8dU7TKo12KqLrqP9Qd90P9x8f/PEn8BRTxOR8PR2bqPLm9M3dMRjFdebtX9KTXT/UkTZNrDVsFFYuweYIiyBahQiPBfOqsBUfoEw8TxI+o7AP1J88P+Ud8Sbz31RiPAw93XPm6/ME7RoWoeMdI+IvJf/pI+uAS5y2GefyVrOvi506B+K8vIqNjFHpYPMM/WRCZv8v1ha0nPzjOYv5hZlmsCuJ6/qYpjACbdfAMDKJn418Z+Mr5R+EjyQ8sMe6mXRLD73fKxXB7reiGESR+LAmVq+B54F5xxucQdn4r/WHmSh3f3wI5+vYtsJbHKh59nl556Dr/W7nmXNvFgPgUcq5YXis5ftZi5779NODfAX4x40mmIXD4G+h9mvH8I4EfInn7Q/yn5Cmnn7+Ht38B</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o6EMIorR3RGFoKLiADi+nEAoEGWSYtKvP4W2brt397597pNWVlbmyoGsVS9I91y6AxCCUewEflkSXiv/NCyj2WrvYI1iSL3GWJCqtS2drVm02SZZuq1bLFUpSwglUPJRrPvxa4UmqUaN5Gp0Q6PoDtXuUFy91WhtK+UljBA2jVXqZKWce66POle3r5Uk8juBjhzU8XUPok5sdFQgjztYs6PfMVXeXm4orw6jt30chx2CMOomNKDrGnUj8IgX4oPOi4k6qmP7epxE8N2niV4r72ezLKtnjXoQ2QRNkiRBcgTWMZFj/6q8le6HoSn5VnBbd3U/8B1Dd52LXoCSYbwPzDJw7SBy4r33jWmKoMjCdA3mRs2gGP9Xhfjt4Iruh5Y+gIyQXkN7nbobU6AFI+gbsLxQpNfKr59V8HZWi3QfWUHkoU/r/wYJ+il0gxCaNXSP7I7u5xa/SNfbCzQ6km+4CXJSOCnaJNQNiMqzCFpOPnYQbj4Tla/lL+fo3mHQ+C8leSGecWLYxBeZERwbovj/qddzrW5WlrqbwLdI9M/M+szpbRIq88yLJL4qLx3fztHrFcKz8g3Uo9Tv68+N+uir90PKohkq9OrQJectl1kraoPveexKXqZyQLSPdqvJiOygqiZxahOZvqUydcGtllrWbFqHBDFC2tNU5jKZcdNl6eRLIWXbK3ETtVrMvp1kcaPnU8rW2iqbiDtqekL5q4NFHFcm113wXuaP5MMQuN3NkVObDHuJ9wtdZdrRfFqi1s3mTp/Rh8hxTqt0JED0+jum5xiKuEbwfA2y+L9ukpygx/pj0S0mhYU/zxi+yZLUrQrdLoBdG2QSD2yJH1/AhLePp/3R6XMZyYP5ogcEcJYVkAn2RljO5yMxM5dLd7uUej1eVphsADZCCW8IYr4Utushqa+24YbukVuV5821Euwaw9AcHLPB3pjImpxNNOksH8R8oonk6iqzc7y+yAeZmmqLRml14DlZETMhu3oUxGw/2a6UcLPgMuMizmXA9AG1ELt7eaB5S8poKHvjII5lcLzK+b3cXS7lXNTArMTbkyWOTev2tqHhmeHOc/dPxgfYuGb2l+dd3022F/Egd8V+Vz31VWnXEObiECibxW61POqrXloyBhOwu3t0mo6+DjJ7286E+WY4CrbSPjUmYC7y/BzgdJFAlvpDEPR5IDPAyS/dA88GXbOXEUMalaqc22fXZ+e0RnqfdHWq3aY24xU7O7GC6Fe3o2R32Mv7dW9aHalmuuBi7rJBaTVldYcy8tCar8VBPMqtwVwt7WZCvjYGVdMeEu6F60Vyawiiy3nvyrYSr9gpOu8cy1rx6ynjtixXbiih5VrhGVW1YH6MSJaHDZrYnNNRXAK2zAPQPywO/Fzm20VSTSmbb2ReBz0xTsDlQMcjenkaDlLX2DRAkI9W08PxvTCmkIk8kc1F3FZiqS0AsyjCQF2IvQNY8LYd8bbY4+eGAOYbaZRtcL4WA6z8OY+9ax5tkQdiYwtYblBqLEgunsYqw4Czzy/8HreXT/nKZD2ydYLiWJ2ETCajieVvV8FR9pxoESXqYjSajPOdlvSPBzyrLFIdpY1tSUyPIXAmI21/FAJBn4WbTRxWfSMyYin0ZCm/TLfo0HZ2HjmsNil+RgpGi154u2zR18XtKLJVajRQ/FmjxZVQYp0HXvXQzlZVTWXDltn1LeF8JrbRkgxA0OOU5snMafq4X2RjNrOG4LjT6UnucvyZE0dbzciU+WiletVmqZmOxx550QhmEk4ztZ8x4nxebZi8NtBQGDmbpG3n0dQ36Y0es+mWXLJO6B45OjlqTNhY2h4u1iw1w5Y8K82ZtbH17FZoDAmFSIHYssZS/7y76JfQmxq3Afp5OjyEt/lBPE+WD6PnTjpU3K3QiO/L4gKShHIP3wp6/HcCU0gcs2ZdVTthwYJQDP248lacKshLJ8EUxzE7+Mq4rcUWKZAUTZEczzfYFiWSDEn1SEC2OK4FWsKd5dxQfILYDXzLKXwVPO52S/0doOF1EPRNGNXSIDH2EFX+YrHIV1nyFXz9Bj6CWoB5IkMKLNXjRYEVANts0k22yZIczZFUkwR0D3PESRBP/WkErBhGHzli8wNHVKDhhA4siGRxmyJ8naIYp+Skp0nsUvVUr/swwVQzKtheh2baTQI5XujCAjDhBWbiwnq4D68JItDtl67pBrpKFVH7R1K715v+2xA/792zgXVMp1BARTw8xBWFXxBe8h7M90G3n4O+mweJ6RQXOk5tHDnGDcnHrd8dU7TKo12KqLrqP9Qd90P9x8f/PEn8BRTxOR8PR2bqPLm9M3dMRjFdebtX9KTXT/UkTZNrDVsFFYuweYIiyBahQiPBfOqsBUfoEw8TxI+o7AP1J88P+Ud8Sbz31RiPAw93XPm6/ME7RoWoeMdI+IvJf/pI+uAS5y2GefyVrOvi506B+K8vIqNjFHpYPMM/WRCZv8v1ha0nPzjOYv5hZlmsCuJ6/qYpjACbdfAMDKJn418Z+Mr5R+EjyQ8sMe6mXRLD73fKxXB7reiGESR+LAmVq+B54F5xxucQdn4r/WHmSh3f3wI5+vYtsJbHKh59nl556Dr/W7nmXNvFgPgUcq5YXis5ftZi5779NODfAX4x40mmIXD4G+h9mvH8I4EfInn7Q/yn5Cmnn7+Ht38B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwimIlqRoEFRWNguvNWwjDomwybPrr30Gjx+Qk58v7Xek0Pd1PL9PzzDPSfY/uAIRgnLhhUJXFl9o/pq6bkKLMRouzdg3WZLiGbpmwwXJWi2N5nmdMs1aVEUqhHKBED5KXGk1STIPkGzSjUXSHando+olp8ttadQljhE1jlSeyVi18L0Cdi9uXWhoHnVBHLuoEug9RJzE6KlDGHazZ0W+Yaq/PV5QXh/GrkyRRhyCMJxMa0POMJyP0iWfig86ziTqqawd6ksbw3aeJXmrve/M8f8qZpzC2CZokSYLkCaxjItf+VXut3DZDUw6s8Lru6kEYuIbuuWe9BKXAxAnNKvDsMHYTx//GNEVQZGm6AQujYVBs8KtG/HZwQfdDSx9AxkhvIEenbsbm0IIxDAxYXczll9qvn1XwuleL9QBZYeyjT+v/BgkGGfTCCJoNdIvshu7nFr9I1+szNDpyYHgpcjM4Kdsk0g2Iqm8xtNxi7CLcfCaqXspfLdCtw6DxX0ryTDzixLCJLzIjujZEyf9Tr8daXa0sdS+Fr2dH5cMpRWVcXRv3uk1nnfq0P0TL3uHlAuFR+QrqXur39edGvffV+6bt4o0XyXzRkpS5vRkC1N6yoevHRLZLHa21yA58GBUrj2q26IUtUpuJO1myvUX9bCbq2O/vDrQ/Oh1yxbLYSk8bTTZhP25b5zMXjk7yai/ZS3KAluf4NKWbK8moK/4w2BwdyeJmTKuwMyvcO4ti0rdcRljLrA73UrGnSLmibA8nLQnPp4KLdittJxvtl98xPcZQxjWCp0uQ5f91k+RFPdHvi245KSx8PBP4qshyty52uwB2bZDLArBlYXwGE8E+HJ2D2+dzUgCzRQ+I4KTMQS7aG3E5m42k3Fwuve1S7vUEZc7mA7ARK/iDKBVLcbsekvpqG23oHrlVBcFcz8MdM4zMwSEfOMZE0ZR8osknBQc30SRydZHZBV6flb1CTbUFU1ntBV6ZS7mYXzyKUu5Mtqt5tFnwuXGWZgpg+4BaSF1HGWj+kjKYuWPspbECDhe54Cjd5VIpJA28VQR7ssSxad3eNjJ8M9r5nvNgfICNa2Z/edr1vXR7lvZKV+p31WNflXeMOJOGYL5Z7FbLg77qZRVjMAG7m0e36errMLe37VycbYajcCs7mTEBM0kQZgCniwSK3B+CsC8AhQVuce7uBS7smr2cGNKoUue9Prc+ucc10vukp1PtNrUZr7i3IydKQX07Snd7R3HWvWl9pJrZgk/48wZl9YzTXcooImu2lgbJqLAGM7WyexOLtTGom/aQ8M58L1ZaQxCfT46n2PNkxU3Raeda1kpYT1mvZXkKM48sz4pOqK6Fs0NMcgJkaGJzykZJBdiKAEB/v9gLM0Vol0k15Xy2UQQd9KQkBec9nYzo5XE4yDxjw4CwGK2m+8N7YUwxlwQin0m4raRKWwRmWYSBupB6e7AQbDsWbKknzAwRzDbyKN/gfC0GWPlzHnuXPNqSACRmCzh+UGEWJJ9ME5VlwSkQFkGPd5RjsTI5n2wdoTRWJxGbK2hiBdtVeFB8N17EqboYjSbjYqel/cMezyqLVEcZs61I2SEC7mSkOQcxFPW3aLNJonpgxEYiR74iF+fpFu3b7s4nh/UmJbyRooEPv7/LF31d2o5iW6VGg3nwxrT4Ckqt08Cv79v5qq6pXNQyu4Elnk7ENl6SIQh7/Lx5NAuaPjiLfMzl1hAcdjo9KTxeOPHSaKsZ+Xw2Wql+vVlpZuOxT541gp1E01zt56w0m9UZU9AGGopid5O27SKeBia90RMu25JLzo28A0+nB42NmKXt42K9ZWbUUt4qM3ZtbH27FRlDYk5kQGpZY7l/2p31c+RPjesA/Twd7sLr/CAeJ8uH0XMjHSruVmgkt2V5AclitYdvBT35O4EpJa7ZsC6qnahkQSiBQVJ7LXeV5KWTYorjmh18ZVzXUosUSYqmSMCIDNeiJJIlqR4JyBbPt0BLvLGcK4pPELthYLmlr5LHXW+pvwM0/A6CgQnjRhamhgNR7S8Wy3xV5WCOr98wQFALMU/kRF7k2W6bpEmG5qguK0lNku6SZBuAHiVKteokTKbBNAZWAuOPHLH5gSPOoeFGLiyJZHmbInydogSn5KhnaeJRT5n+FMAUU824ZHsdmm03CeT6kQdLwIQfmqkHnyInuiSIQNdfuqEb6CKdS9o/stq93PTfhvj52y0bWMd0SwVUxiNAXFH4BeGlbsF8H3T7MeibeZCabnmh49QmsWtckXz89Ltjyla5t0sZVVf9h7rhvqv/ePufO4m/gCI+5+PuyMzcB7c35o7JKKYrr7eKHvWn41OaZemlhq2SisXYPEERZItQoZFiPnXSwgMMiLsJ4kdU9o76k+e7/CO+NHECNcHjwMcdV70sf/COUSEq3zEyPjHFTx9JH1zivCWwSL6SdT383CkR//VFZHSMUg+L3/BPHsa/A//K1oMfHGc5/9zALlclcT190xRGiM26eAaG8aPxrwx85fyj8J7kO5YEd9MuTeD3X6rlcHup6YYRpkEii7WL4HHgXnAmpwh2fiv9YeZCHd/fAgX69i2wVsYqHn2+Xrvruv9bueFe2sWAeBdyL1heagV+1mLngf0w4N8BfjHjSZYReXwGep9mvHBP4IdIXv8Q/yl5yOnn8/D6Lw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>userget_firstuser20130923_081818</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130923_081821</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E70D012109BC3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E70D01210A3E3671E0401F0A07997A7D</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f61f1377-9b57-4e12-9112-c4306b2aa6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92c99100-ab33-442f-be37-2bc83221a480</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f504d6d-060f-40ae-bedc-c8f55781e671</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property><con:property><con:name>sName</con:name><con:value>20.User_Get_CS_Geopolicy_Portal_CH</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="06.User_Get_CS_Geopolicy_Portal_GB"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>GB</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>06.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="08.User_Get_CS_Geopolicy_Portal_CA"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CA</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="10.User_Get_CS_Geopolicy_Portal_IE"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>IE</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="12.User_Get_CS_Geopolicy_Portal_AU"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>AU</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="14.User_Get_CS_Geopolicy_Portal_NZ"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>NZ</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="16.User_Get_CS_Geopolicy_Portal_AT"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>AT</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="18.User_Get_CS_Geopolicy_Portal_DE"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>DE</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="20.User_Get_CS_Geopolicy_Portal_CH"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Country_Node_Audience" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set_Country_Node_Audience"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);
def myTS = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile");

myTS.setPropertyValue("Country",tS.getPropertyValue("Country"));
myTS.setPropertyValue("role",tS.getPropertyValue("role"));
myTS.setPropertyValue("audience",tS.getPropertyValue("audience"));
myTS.setPropertyValue("sName",tS.name);
myTS.setPropertyValue("RequestorType",tS.getPropertyValue("RequestorType"));
myTS.setPropertyValue("role_CS",tS.getPropertyValue("role_CS"));



</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UserGet_CS_FUNC_CHILD_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>
import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>76640427-17a2-450d-ab00-d49a26e2be1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UserGet_CS_FUNC_CHILD_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UserGet_CS_FUNC_CLG_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked_tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UserGet_CS_FUNC_YOUTH_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UserGet_CS_FUNC_YOUTH_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UserGet_CS_FUNC_CHILD_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UserGet_CS_FUNC_CHILD_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UserGet_CS_FUNC_CLG_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UserGet_CS_FUNC_NONCLG_FAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UserGet_CS_FUNC_ADULT_SAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UserGet_CS_FUNC_ADULT_BAU_Get_CHILD_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:clg_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UserGet_CS_FUNC_CHILD_Get_Self_Blocked:tou_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UserGet_CS_FUNC_CLG_Get_CHILD_Active_and_Deleted_CLG_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UserGet_CS_FUNC_YOUTH_BAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UserGet_CS_FUNC_YOUTH_SAU_Get_Self_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_UserGet_CS_FUNC_NONCLG_FAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UserGet_CS_FUNC_ADULT_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UserGet_CS_FUNC_ADULT_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UserGet_CS_FUNC_YOUTH_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00036_UserGet_CS_FUNC_YOUTH_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UserGet_CS_FUNC_CHILD_SAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UserGet_CS_FUNC_CHILD_BAU_Get_YOUTH_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UserGet_CS_FUNC_CHILD_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UserGet_CS_FUNC_CHILD_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UserGet_CS_FUNC_YOUTH_BAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_BAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_SAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UserGet_CS_FUNC_YOUTH_SAU_Get_ADULT_FAU_P2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Call the Test Case from UserGet_Geo_Policy Test Suite"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def country = context.expand( '${#TestSuite#Country}' )
//def node_Role = context.expand( '${#TestSuite#Node_Role}' )
//
//tP.setPropertyValue("Country",country);
//tP.setPropertyValue("Node_Role",node_Role);

log.info "TC Name " + tC.name;

tcName = tC.name

def myTC = tP.getTestSuiteByName("02.User_Get_CS_GeoProfile").getTestCaseByName(tcName);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>sName</con:name><con:value>31.User_Get_CS_Geopolicy_Portal_US</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>account_oid</con:name><con:value>E608A05B1095BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:iscportalcs1</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>15</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>Country</con:name><con:value>CH</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>eTag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GeoProfile</con:name><con:value>CH</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/CH/urn:dece:type:policy:TermsOfUse:20130923/html</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:7001</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"> 	<Name> 		<GivenName>${#TestCase#GivenName}</GivenName> 		<SurName>${#TestCase#SurName}</SurName> 	</Name> 	<DisplayImage> 		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL} 		</DisplayImageURL> 	</DisplayImage> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#TestCase#PrimaryEmail}</Value> 			</PrimaryEmail> 			<AlternateEmail> 				<Value>${#TestCase#AlternateEmail}</Value> 				</AlternateEmail> 			<Address> 				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress> 				<PostalCode>${#TestCase#PostalCode}</PostalCode> 				<Locality>${#TestCase#Locality}</Locality> 				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince> 				<Country>${#TestCase#Country}</Country> 			</Address> 			<TelephoneNumber>			 					<Value>${#TestCase#TelephoneNumber}</Value> 				</TelephoneNumber> 				<MobileTelephoneNumber> 					<Value>${#TestCase#MobileTelephoneNumber}</Value> 				</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#TestCase#Language1}</Language> 	</Languages> 	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth> 	${#TestCase#LegalGuardian} 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password> 	</Credentials> 	<UserRecoveryTokens> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID1}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse> 		</RecoveryItem> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID2}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse> 		</RecoveryItem> 	</UserRecoveryTokens> 	${#TestCase#ResourceStatus} </User>]]></con:value></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"> 	<Name> 		<GivenName>${#TestCase#GivenName}</GivenName> 		<SurName>${#TestCase#SurName}</SurName> 	</Name> 	<DisplayImage> 		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL} 		</DisplayImageURL> 	</DisplayImage> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#TestCase#PrimaryEmail}</Value> 			</PrimaryEmail> 			<AlternateEmail> 				<Value>${#TestCase#AlternateEmail}</Value> 				</AlternateEmail> 			<Address> 				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress> 				<PostalCode>${#TestCase#PostalCode}</PostalCode> 				<Locality>${#TestCase#Locality}</Locality> 				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince> 				<Country>${#TestCase#Country}</Country> 			</Address> 			<TelephoneNumber>			 					<Value>${#TestCase#TelephoneNumber}</Value> 				</TelephoneNumber> 				<MobileTelephoneNumber> 					<Value>${#TestCase#MobileTelephoneNumber}</Value> 				</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#TestCase#Language1}</Language> 	</Languages> 	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth> 	${#TestCase#LegalGuardian} 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password> 	</Credentials> 	<UserRecoveryTokens> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID1}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse> 		</RecoveryItem> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID2}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse> 		</RecoveryItem> 	</UserRecoveryTokens> 	${#TestCase#ResourceStatus} </User>]]></con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwqCBWkqphUVFxw5Wbt3AYEGWTAUF//Tto9CQ5yfnyflc6PT3dTy/0PPOMTd9j2wBjFCduGJRV+aXyD2c3OaZlbWst2GjUGk3bqgl1vlFrMS1oNhFqtLhtpaxinCI1wIkZJC8VlmbqNZqvsdycoduM0G7Wn7hmw6iUlyjGxDRReaIr5dz3Aty+un2ppHHQDk3s4nZg+gi3E9jWgTZsE822ecdUeX2+obw6jF93SRK1KQo+WQgiz4NPMPSpZ+qDzrOF27rrBGaSxujNp4VfKm9nsyx7yupPYexQLE3TFC1QRMfCrvOr8lq6H0aWGtjhbS2ZQRi40PTci1mA0lCyC60y8JwwdpOd/41phmLownQN5bAGmUbwq0L9dnBF90NLH0DG2Kzhncncjc2QjWIUQFRezNSXyq+fVfB2dh6bAbbD2Mef1v8NEgpOyAsjZNXwPbI7up9b/CJdr88IttUAeil2T2hUtElkQoTLkxjZbj50MWk+C5ev5S/n+N5hCP6XkjxT73ES2NQXmZFdB+Hk/6nX+1rdrCxNL0Wv8yrPxynfyS7VzoHVu8dcy6U5xeMReLlCeK98A/Uo9dv6c6M++urtkBnTs1BtZkYQ7OvKLGUWikdNxsal1Tx05LS5x+N063p1fEw5WuOwhpWR0jzWca8pBUzmHB2QpvvBuTuaqqWhLrsHLhlBdwH2MBpI7Bo3uvGazT18OOFgXN1EzfRCdRlrPRYPF2AgaiK7k56uVgOOderV1uXgIdh0ZFzqTlLeUcYabycGYIXcndIvv2N6H0MR1wCdr0EW/9dNWpDNxHwspGJS2OTzTNCrpqpSVZYkgCQHZKoIHFUcXsBIdA7H3cHtChktgumiA2Rw1mYgk52NvJxOB0pmLZeesVQ7HVGbNbIe2MglsiEr+VI21n3aXBnRhu3Qhi6K1noWbuv9yOodst4OjrS5lo3m6lnbK/lortCrq8zJyfqi7TVmPF/US6u9KGgzJZOzq0dZyXYjYzWLNgshgxdlqoFGF5D6SDutN/eXDKzPdnCvDDVwuMrFnSYtl1quzMGkJDqjJYltLnWMCPpWtPW93TvjPWJ8bnWX523XS42LstckpSvpx66ubuvyVOmD2WaxXS0P5qpzKsHeCGzvHt2ma67DzDFamTzd9Aehoe5OcASmiihOAUkXDTS12wdhVwRaA7j5RdqLXChZnYzqs7hUFbwutz67xzU2u7RnMq0WsxmuuMmRk5WgagzS7X6n7dadcXWgW6eFkAiXDT5VT5zpMjCP7Ola6SWD3O5N9dJ2Iudr2KtaTp/yLkIn1vg+iC/nnac5s2TFjfF569r2SlyPGx5ve1p9FtmeHZ1xdR5ODzHNiajOUpvzaZCUgKOJAHT3i7041cRWkVRLzaYbTTRBR0lScNmzyYBdHvu9kwc3dRDmg9V4f3grjCVnikhlU4W0lVJqycAqitDTF0pnDxai48Sio3TEKZTBdKMOsg3J16JHlD/nsXPNo6OIQKkbgBN6pfqCFpJxojca4ByIi6Aj7LRjvrI4n+aPSBnqo6iRaXhkB8YqPGi+Gy/iVF8MBqNhvp2n3cOezCqb1genulFSTocIuKPBfHeQQ9mcRJtNElUDGMNEjXxNzS9jA+9b7tan+9UmI05oGfLswt9mi66pGIPY0ZlBbxZM6rxQwql97vnVfStbVec6F/GWFNjy+UwZ8ZIOQdgRZs2jlbPsYbfIhlxm98Fha7Kj3BPEs6AMjDnMZtPBSverzVLzNBz69GVONUbRONO7WUOZTqt1S5z35jiK3U3acvJ4HFjsxky4k0EvOTfyDgKbHuaNqL50fFKsycmKeG1SmjbW0PAdPoJ9akadgMLbQ7V73l7MS+SP4W2Afp4OD+FtflDvJ8uH0XMnHTrpVgST+7K4gFS53CG3gpn8ncAUEteq2VfVdlSwIJygIKm8FqcK8tJOCcVxrTa5Mm5rheVafFPmBZkW6hJHK3SDZjo0oJuCwLF8/c5ybig+QZTCwHYLXwWPu91SfwcI/TZGgYXi2ilM4Q7hyl8sFvkqq8GMXL9hgNE8LHgiLck8kDkZEG4h0S1eYhhREQAjdGSpITOV8ihMxsE4BnaC4o8csf6BI84QdCMXFUSyuE0xuU5xQlJyNE9p4jFPJ/MpQCmhmnHB9tpso9WksOtHHioAU35opR56inbRNUEUvv2yNRPiq3SmzP9Rdel6038b4ue9ezaIjuUWCriIR0SkougLwtu4B/N90Nz7oO/mQWq5xYVOUpvELrwh+bj1u2OKVnm0C4nqDvmh+VnwwSr1OaCHI+vkwkfPP54DhE0SvvF6L8nRfDo+padTei0CX3CpmJinGIrmKR3BlBCi8zw8oIB6mKB+xEUfqD95fsg/4kuTXaAn5Hv2ScuUr8sfPER0hIuHiEpaPv/pK+eDS5K3BOXJVzLJI++VAvFfnzSwDQs9Ip6QnyyMrd/l+sLWOz8kzmKAuYFTrArmef6mKWBIzLpkiIXxe+NfGfjK+UfhI8kPLAnppm2aoO93ysV0eqmYEIZpkKhy5Sp4PzGvOJNzhNq/lf4wc+V+b2Q+x9+S+bU21Mns8s3KQ9f938o199ouEJFT2L1ieank5F1KnAfOuwn9BvDLIS116L8N6Y+RvP4h/lPyLqefv4fXfwE=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwKYqVpGoQUFTcwI2bt3AYFmWTRdBf/w4aPUlOcr6835VOT0/30ws9zzwnhu/RXZAkKE7dMKjKwkvtH8SSu86ubTa4DkSNZqvTanA7kmswLdTptFm2BRFXq8pJkiE5SFIjSF9qNEkxDbLdoFmN5LotskuRTxTd0WvVFYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuCpRxF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0lVdOzDSLEZvPs3kpfZ2Ns/zp5x5CmOboEmSJEiOwDpm4tq/aq+V+2FkyoEV3tY9IwgDFxqeezFKUApKndCsAs8OYzd1/G9MUwRFlqYbqIANSDWDXzXit4Mruh9a+gAyToxG4hjU3dgCWShGAUTV5UJ+qf36WQVvZ7XYCBIrjP3k0/q/QULBCXlhhMxGco/sju7nFr9I1+szgl05gF6WuCc0KdskMiBKqrMYWW4xdhPcfGZSvZa/WiT3DkPwv5TkmXiPE8MmvsiM4NooSf+fer2v1c3KyvAy9MoZ7PBiMoRYP5BC33Y7JhGKkj4dLZSXK4T3yjdQj1K/rT836qOv3g4Jq9O6ZRuIopoxtJBKLHb5hLN344MwAgKkDlMjGJvOQmR2RV9vtk6AXuWuUW9FM5bRjxqfGrO1bHBCKsUVx9+01MEyXBfMead47daU5yext6D2LrM6G6Z3aW74DWXZXphLI3CuA53pxQeHXu/HZ28+pRxvns+WoXJ2PYxMG0vrjZtlWYR0werozZffMb2PoYxrhM7XIMv/mxbJCUZqPBa9clJY+PNM0asiy7260OsB1LNBLvPAlvnxBUx4+3B0Dm6fy0kezJcSEMBZWYBcsLfCaj4fibm5Wnn6SpYkXlk08wHYChW8IYjFStA3Q9JY69GWlkhd5Xlzswh3zDAyB4d84MCJoin5RJPPyl4sJppIrq8yu8Dri7JXqKm2ZCrrPc8pCzEX8qtHQcydib5eRNsll8OLOFdAsw+opdhzlIHmryjILBy4F8cKOFzlvKP0ViulEDUwq/D2ZIVj03qSHkHfjHa+57wzPsDGNbO/Ou/6XqZfxL3SE/s99dhX5R0jzMUhWGyXu/XqYKylUwUOJmB39+i2XGMT5rbeyYX5djgKddk5wQmYizw/BzhdJFDk/hCEfR4oTeAWl96eZ8OeKeXEkE4qdc7rs5uze9wkRp/0DKrTobbjNTs7soIY1PVRtts7irORpvWRap6WXMpdtsmpfmINl4JFZM034iAdFdZgrlZ2M6HYwEHdtIeEd+GkWGkPQXw5O55iL9I1O03OO9ey1vxm2vTalqcwi8jyrOic1LVwfohJlkcMTWzPp1FaAbbCA9DfL/f8XOE7ZVJNOZ9vFd4Akphm4LKn0xG9Og4HJw9uGRAWo/V0f3grjCnkIk/kcxG3lVjpCMAsizBQl6K0B0vetmPeFiV+DgUw38qjfIvztRxg5c95lK55tEUeiIwOWG5QYZYkl05TtdkE54BfBhLnKMdibbI+2T4icaxOomauJBMr0NfhQfHdeBln6nI0moyLnZb1D3s8qyxSHZ0YvSKeDhFwJyPNOQihYMyi7TaN6gGMYSpHviIXl6me7DvuzieH9RbFz0gBtumlv8uXfUPUR7GtUqPBIpgxba6SZNZ54Nf3nXxd11Q2apu9wBLOZ0KPV2QIQolbtI5mQdMHZ5mP2dwagsPOoCeFx/FnThzpGswX89Fa9eutSus0HvvkRSOak2iaq/28Kc7ndcbktYGWRLG7zTp2EU8Dk94aKXvSyRXrRt6Bo7OD1oyYle3jYs1OZtRWZpV5cwN1325HcEgsiBMQ29ZY7p93F+MS+VN4G6Cfp8NDeJsfxPvJ8mH03EmHirsVwfS+LC8gWahK+FYw0r8TmFLimg3rqtqNShaUpChIa6/lqZK8dDNMcVyzi6+M21qk2Q4pMjTHdnotlmRFsklSEgnINseRNN27s5wbik8Qe2FguaWvksfdbqm/A4R+N0GBieLGKcygg5LaXyyW+arKwQJfv2GQIC3EPLHTFHoUaDabUpsDFAO4liS12HYbgCbLCz2mVp2E6TSYxsBKUfyBI1L0B464QNCNXFQSyfI2TfB1mqQ4JUfjlKUe9XQyngKUYaoZl2yvSzc7LSJx/chDJWDCD83MQ0+RE10TRCS3X7phwOQqXYjaP7Lau97034b4ee+eDaxjuqVCUsbDI1xR9AXhJe/BfB90633Qd/MgM93yQsepTWMX3pB83PrdMWWrPNoFR3WH/ND8LPhglfgc0MOReXLho+cfzwHMJjHfeL2X5Gg8HZ+y0ym7FqFdcqkYmycogmwTKoIZJkRnLTyggHiYIH7ERR+oP3l+yD/iy1InUFP8Pfu4ZarX5Q8eIipKyoeIjFu++Okr54NLnLcUFelXsp6H3ysl4r8+aWAXlnpYPMM/eRibv8v1ha13fnCc5QBzA7tclczz/E1TwBCbdfEQC+P3xr8y8JXzj8JHkh9YUtxNuyxF3+9Uy+n0UjMgDLMglYXaVfB+Yl5xpucIdX8r/WHmyv3eyHyRfEvmN8pYxbPLN2oPXfd/Kzfca7tAhE8l7hXLS63A71LsPLDfTeg3gF8O6ZbE/m1If4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.uvvu.com</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>user20130726_035217</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>V1</con:name><con:value>1</con:value></con:property><con:property><con:name>V2</con:name><con:value>06</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>16</con:value></con:property><con:property><con:name>targetHostb</con:name><con:value>qa.b.uvvu.com</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>YES</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\scripts\Scripts_Praveen</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140218</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>