<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="UVTC_PrimaryEmail" resourceRoot="${projectDir}" soapui-version="4.5.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="E:\DECE API\STS\Builds\R3\106.2.3\Reports106\STSAPI_Payload_NodeOId_TCs_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/soapUIProjects/LP/Reports</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Device_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#V1}/${#Project#V2}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:Account</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Account_Del_Methods" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" id="35503fc8-e6ad-4898-8509-ab5ca6bba1f1"><con:settings/><con:parameters/><con:method name="Get" method="GET" id="53188268-55d2-4c63-b63c-e63054ca71f3"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:Account</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="30578482-2661-423e-a9a4-553701d5d477"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="PUT" method="PUT" id="fa893486-a1f6-4fea-adf0-8b79632b4120"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8ecdc3cd-24ab-4cca-a153-3832ca1ae3e4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="POST" method="POST" id="26760b95-5c30-4f0a-868d-c7ee25f0fae6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="2b26026e-5a55-4884-8c1f-b9932771442c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="HEAD" method="HEAD" id="67d96d41-f20f-4f07-ae83-62ec5238cbb2"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:request name="Request 1" mediaType="application/xml" id="738f5c4b-1a96-413a-8b35-5dab5ea15221"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="" id="6c3d536c-c34c-4909-b68e-c56202e901a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate_UserPolicy" path="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicyGET" method="GET" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyGET" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyDELETE" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="AccountPolicyGET" method="GET" id="c23d9652-8201-4a6d-a343-8eaeb0193004"><con:settings/><con:parameters/><con:request name="AccountPolicyGET" mediaType="application/xml" id="846a1ca0-681d-46b1-a5d8-0a63053da965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE" id="33e2e7d9-2b5b-406b-ba40-cad2d4922d0a"><con:settings/><con:parameters/><con:request name="AccountPolicyDELETE" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#V1}/${#Project#V2}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="" definitionUrl="" id="233e54e8-cd77-4d4d-8f1e-6d240a4b070f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="rest/${#Project#V1}/${#Project#V2}/Account/{ACCT}/Stream/{STREAM}" id="0931ace2-e7f3-4c79-968d-a04d73600c30"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9683ed0f-6cc9-4f65-847b-0f131541e354"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#V1}/${#Project#V2}/Account/{ACCT}/Stream" id="cf353486-e4bd-4e29-9fa0-16678ce3ed16"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8e9894cd-2bd1-4e02-ab04-37036dd75fc6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="f8992888-776a-4588-8ff0-130c8c626196"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUVSsnVQNFwlGNCBeX77CYQSUizIg6K8/A26NZif77PM9pMw00z2ruxfNmp/YCny2BzBGceJFYVWVnmv/23Sam9a6YzWasAUbLR7BRpffWOS/Lt1imSYNrU2tqmKcIjXEiRUmzzWWZpoNutlgeJNu91psj2s9sXR3VavOUIxJaLLlia5V88APca889rmWxmEvsrCHe6EVINxLYG8CtGGP7OxZV0y1l58XlOWB8YubJPseRcEnG0Hk+/AJRgH1k3rY89PGvYnnhFaSxujXmTZ+rv3yzbLsKWs+RbFDsTRNUzRPkT029pwftZfK1RnZariJLmvRCqPQg5bvna0ClIYSN7KrwHei2Evc4JvQDMXQRegGymEDMq3wR436OKBE95eRHkDG2Gpg12KuwQy0QTEKIapODfW59uPvOnjxNWMrxJsoDvCn9X+DhMIj8qM9shv4mtkV3d9H/KJcLz8R7Kkh9FPsHdGooMnegghX32O08fKhhwn5bFwt21/N8ZVhCP6Xlvyk7nES2NQXlZE8B+Hk/+nXfa8uUWaWn6KXXI2d8M2SxtrQmeTjlQnoLZx0ZnLmPJcQ7jdfQN1a/Wv9mag3Xv1y0jZd+lCfxpvhCEFXOq60bmBxC44fs4o/PATjZTte8trIkUzROvLteYtdjsRkNqGwzw0RPzeNFd1nopVOwQpKjrtOyAz4oLudniXVW2AtXEfZajaM11x/O2VSHDj1MUoWM+s4YrtuwmC3Xp/X1abHRqyhHzkNrKEB17OKQYtma7v1vZYKzJXbByl4/sjpPocirzd0KpMs/l9wNC9ZiXVbiMWk2JDXM0EvmqpK6VkUwWnigEwVgEP+tmAkOLuDu/MUPqMFoOt9IImCv5WHGtgpgJnKgquJs5mWi2cwEJzRjDiaFeCvBM2QMylbSjNdf5Uz17SV2Wmt+OnqLI80gEtn0dVkQ55JhilrGogutlyT1kq+1SZapupLqUICSHK+P9sKnyAl9yCrctqEY5cTLl0tZsTePw2D0XFtyr4maoo4OSgTdd2UdHkAjOUcsv2U+J6HwT6qLKfCndNgj7YA9TOanAnOmrnLNHPKjiTDKm3mo01TlYGm40zUy6yUipwNZtPzRy1EQRPtQM5lE7xfagFNsT+iV4sBtuZcqBkgk5zS+U3O7PEViKbTWUW81GooZ4ZsTEd9zVAzGZQ2Sc58vGZH7lpxj7Cp5wMTbO8bI+ryvB+S56FxhCfuULGUPlgHMwY2DRd6nGctosxZdTNJXw7eopVKwoyALguCDgggGhSpkfoLYCjMuPHe41kPDTf9KEBuXNGY6G13POd012uOnffRnJM2u8674r03LdulVB+y2+YOqCqy3xhXt2xjSRlS6J3b47fpAnnx8pyMOJ1pe12uYszT6UKK/I79ulhO3+r5Eurm+H0ynb+f83x02HbPfvI6Fl7jyUCTnPEIoXcM6xRt9QWzK3Hi8nVL+LQxaMRVgKMJAChbx5E9QmDhdXsh4auhyYS8QBMzRZyLygQoSl1WBUnXN32XeYfKLJ0yI02VbZ+U6bRcGH5lJQoS6RRtzVf7JdunyVixy2B6S+47+pSrDxZopY98c5aAbD/bhAxDK3v9daNlDtQKBthqNhHIWyRUUhVMrfF+QOdvszbNHHTbH0x4MG3mE3aXj11nddo5qx1pyvLu1VmawJ+ZdxxTCcXmFd2UDQ10L+9brqnTpuHDIN+vA5hLJulZ6RyZgmz0dXqaSxJ4u9iwCdgcL8/yVhPl0r8Ccs0itDiuFy5ehiNvbMopIW16R5ftmqX/lWMFxSqPHDuIQAefOSZfOCaDzaGudiUGc21xj+eZIyjyQe/MhgN+T+uL4a4i1PuUk3h+axx2M/OtPmdOWcfd6vM5r0quWA83S7e5TgTaOkMdDXYdxTN2Uthu+SdtqOnc1KP8E71FhwwPKyOVCeVmcu5TfJzWhWDlBedzs8VOg/dJelSn1htmTu76MOez7ftrm6Ji5cSdO6uj3l9EcHn5jnwekjfjZYxS9wP2YQJftdckXW8RTK7L4jusStU++ThayZ91XGHx7Mam3NrbF2IQJyhMai+FV6HheilRep7dI1/Oy1rqttg2x8gCw3dlwLZkukUzfRrQHZ5vcm3uKvYuKD5BFKNw4xVnFXL28rH+M0AY9DAKbRQ3jlEKXYRrf4hY1KuqhgZRIVGIkRkRudzuCu12h5VZmZY7Qr9NS0QLyy0R8C2O4UW+Vh1FyTgcx2CToPhRKvMPUtlA0Nt7qNDThajARFXghJTkYB3TxGeejtZTiFKiuONC9PbYVpejsBfsfVQApoLITn30tHf3ZYEofPllGxbEpbXTpulS7Xyb3+dn11KQPbZXbMBFMgIi7URfiP7WNZNvM2bY+4yv4UFqe4WoIXVNYg9ekDw++qBLwZMbV4qUrphvWz8bHsJSnzO6nWQfPXhj/O1ORCQ1EV0v14YcrKfDU3o8pmULOoWgjEl4iqHoNjVBMCWq8GRGOxRStxDUXwnyG+pPJ9/sj/jSxA0nCXmbA0KYarn8i9vYBOHiNqYSwud/e9V7OJLULUF58pVN9MmlrUD8x3sd7MFiHzG/k58siu2Pdn0R6+4ckmcxvrzQKVaF/D59wwoYkbAeGWFRfB/8qwBfHf5ovBX5hiUhbFqnCfr+SbWYTc81C8IoDRNVqpWG+3lZ4kxOe9T72PRbmFIA/7rR5PjbG81CG07I5Aqs2m2v9++bG15JF4iIF/ZKLM+1nFzOyeGhczeffwH8ekR3/ziiHzN5+c38u+Wupp/fh5d/AA=="/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXrxBGQBGQAUF//RkwGs1O9tnne0iZaaZ7VncvmjWvyDh4dBcgBKPYDfyyzL9V/mcxDNmuG62a0aq3aw0S1msdkyFrcEM2yLphkpZBVcoyQgmUfRQbfvxWoUmqXiPrNaqjk81uo9UlqZdOg1lXynMYIRwab3khK+Xs4PmoWxz7VkkivxsYyEVd3zhA1I3N7hQowy7e2TVumCrvr1eUxYHRuxPHYZcgzBcLmtDzzBczOBCvxNOeVwt1p67tG3ESwY8zLfRW+fBN0/Qlrb8EkU3QJEkSZIfAeyzk2r8q76WbM7Rkfxtc15zhB75rGp57MXJQCoydwCoDzw4iN3YOP4SmCIrMQ9dgZtZMquH/qhCfBxTo/jLSE8gIGTXk4CZ8BNPgFkbQN2F5pslvlV9/18Grrx4ZPtoG0QF9Wf83SNA/QS8IoVVDt8xu6P4+4jflen+FZlf2TS9B7gmOcpqEhglReRLBrZsNXYTJZ6Fy0f5yhm4Mg+Z/ackr8YgTwya+qQzv2hDF/0+/Hnt1jTI3vAS+E+LO8wZue+P0U6XPu5zTm874yXaBuVpAeNx8BXVv9cf6K1HvvPpw0mxHlY2YllqTem9z1vn2xmukVRZcQMsm6bS9jjsWN5A3l3GgR0q23ynygW5yQ1hN5mGk9IdNi/ZW8upgqSXTQWF/GEI/JAVlOgonhNpL25BYDw9xXal6kqbOm5Pjxc/801gC88H5aFFeqrfQuLpTdmF6Jlc7bxbF9Hxbaqh9jWH98dbaj+utrXsh0NtnTo855HkN4LlIMv9/yZAd3oiN+4LLJ8UWv54xfFdkmU8uHAfOUxukMgts/LcDI9beH529K3VSkgWqKgKeY72dMFTAXgLUTGAdhZvPlYy7gD5rj+bYUS8Bb80qmpDy6Yqfq2pPSB3dkubnjeQl64swUgAqnDlHETRhzmu6oCgguNoyhd9I2U6ZKqmsrvgSDsALWXixpE4Mpcw1aZlRpgy9mjLJejnHdvE8PIxOG13wFE6RuOlRmsqbOq8KfaCtFiYtJtj3MjyEQWk1Yx+c+iHcASimJD4TXBR9nyr6jB7xmlHY9GebIkt9RUUppxZZSSUh7c9nl89acKzCWQchE3QwudbC1DlxRK6XfWQsGF/RQMrbhfNASK3xDYiikmmJu9ZqKKSaoM1GoqLJqQAKGy+kHtrQI2cjOSezrmZ9HeweG8OpwkL08XNfO5ln5lgyJBFsDnPKrGuO6TKusQxSe91OeXXVHwRrGYcZAVVgWRVgQCTIU8P1Z8GQnTPj0O3QLhxuxeAAnaikUMFgf7pkZNutj+3JaMHw231rIrmTumE5hOyZ9K6+B7IMrQHlqIalrQiN991LczyYLaEbrS7xiFGppttmStoimS35wGtZveVqNqhmK1PVx5PpbDG5ZNnouGtfvLg3ZnvRtK/w9ngE4QSZVYI0RFZv8wy36u0wn7YaCZkSsBUWAGln24KLCcz2dlcS9jRFwOQFCpdK3IKTpkCSqoLM8qq6FR1qYkrzZEaNFFmwPFym82qpeaU1x/K4U6SxWIcrWiTXOrCKYGpDEG11xlT7S7hWR54+j0Eazrc+RZFSqPa2SmqbSs4AS06nLH6L2FIig5kxDvtkNpg3SeqoWl5/2gGzejal99nYsdfnvb3e46asHl6dlQ68uf7AMRlTbFFSdUFTQPv6vmWKPKtrnnnIws3BzHgd96xwDnRW0ESVnGU8DwZXG9IBnaHVRdgpnFD4l0CmGJgWp83SQSt/5I51IcGkTR7ostvQ5L9yLKdY6ZljRw6o4CvHhCvHBLA9VuU2TyGmyYVokdqsJBzV1nzY74SkuhzuS2xVJOzY9Rpjv53qg+qCOqctZ6cuFh2Zd7iqv1059U3MksbFVGF/35Jcbc/7zYZ3VoaKysxcwjuTO3hM0bA0kilfqMcXkehESZU9rN3D5VJv0LPDZJqc5JkxQNTZ2RwXnXQ36TUJIpLOzKW1PqniMjBX1+/I1yF5N17HKPE4YJ8m8E17TZPNDprxbZl/h2W+LOKPoxH/WcflFteqbYut3TAXgyiGflx5z71yDddNsNJzrS7+cl7XfLtBt9oUAKABKKEpCli0UCIJyFanwzQ74Cb2rii+QOQCf+vmZ+Vy9vqx/jNA89BF0LdgVDsFielAVPlDxLxeZdnXsAoJfAT1AMtljmRYQHIt/E43WiLbFltNsQMYkRE4ssPUhUp5FMRjfxyBbQyjZ6nceZLKGjTd0IW5ns5FBcKqAsW4JEfjlMQe9XIyXnyYYMUd5aK3SzfaDIHcQ+jBHDBxCKzEgy+hExYFItD1l64ZJiqsrSZJFmrnx/y+PruVAu+x3HwDypNhIW4n/E30N7vMLZMfM6box4xv4UFiubmowXWNI9e8Inl+9EmXnCd3ruQp3TDft341PIUlvmZ0P8k6uead8fc7EZbUWHS93xpyNF6OL8nplBQtaOWCMsLhCYogm8QUmglWhWc92EOfuIcg/kqQ31F/Ofluf8aXxI4/jfHbfMCEKRfLv7iNTSHKb2MyJnz2t1e9pyNx3WKYxd/ZOA9f2nLEf7zXmV0z34fNE/yTBpH12a5vYj2cg/PMx5fr2/kql9/nH1hhBjisi0dYED0G/y7Ad4c/G+9FvmOJMZs2SQx/flLOZ9NbxTDNIPFjma8Uhsd5WeCMzyHsfm76LUwhgD9uNBn68UazVIZTPLkORuW+1/33zTW3oIsJsRdyCyxvlQxfzvHhvv0wnz8Afj+i6+yfRvRzJu+/mX+3PNT06/vw/g8="/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="3c0ff9bd-188e-4595-ac97-ec945cbf1b34" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="a72ea2ab-ce4e-47cc-b28d-787420d41eae"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="bae01694-be77-463a-bcef-02134d4e45fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ResourceStatus</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d9791dad-3957-43a7-9916-acc98d6cfcfe"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="d2b48757-d9d7-48b6-99e2-5ffaec2a0276" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/ResourceStatus/Current/Update" id="087a86a9-8ddc-4222-aa5e-8ea5f58f3b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT" id="a3720389-3d1d-49ca-8d11-1e6c7977a6b6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c5de7daa-09fc-46a7-9439-7290f79b45c1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="2b399c77-329a-43cb-9c65-b90e43e27bf5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" id="c9f3de54-1283-4f02-b8ea-7030652e5a47"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="dd8dec87-e935-415f-91f4-ef072cb2b292"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8eccae92-53c1-462c-ad88-7bb2ab6bc7a9"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" id="f7ffc3a2-890e-4d43-8f2a-582eb82ffd58"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="5edddbc8-bc7c-4b0d-9fa5-394b1f0932ed"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="198a8863-08df-42da-87ef-91fde7f4ac06"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" id="a6b47e2a-6ec0-4d51-b70d-0fe2c39c89bb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" id="6abea313-2ae4-47a2-919b-8639b056a406"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="22790dc9-f087-4d6b-8978-8ee7e6e5feac"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="aff24390-0479-473a-9b57-a08afc5cc4b7"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" id="01c41851-b1a7-4127-914c-05f1b1a625d6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="92c030af-0ac7-4174-8453-94f6ff1b243c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="46083e56-5c6f-4481-9c0a-5ccd55d9b1b5"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" id="c050c9c4-c157-4876-98ca-eb88fd076897"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT" id="503e1641-389f-43b9-a04e-39adeeff15cb"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8c4de049-fe81-4441-983b-b6c82114b741"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="rest/${Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" id="4314b275-2cc6-4662-95d4-c8af507855a6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="bd0ca0c4-9525-43b9-90ca-e9d09cb7fbff"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="6961de71-6c81-490c-94f4-2f29f24b3231"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserValidationEmail" path="/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}" id="a01dc7eb-7661-4cf5-b171-59b58901908c"><con:settings/><con:parameters><con:parameter><con:name>TokenType</con:name><con:value>TokenType</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>TokenType</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>subject</con:name><con:value>{UserIdentifier}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>{UserIdentifier}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserValidationEmail" method="GET" id="b1210006-4691-4ab1-9c92-dc56eb1eaf17"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="ce4a5cd4-53d5-4695-827a-3df84f5b5792"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserValidationTokenCreate" type="rest" basePath="${#Project#HostName}" definitionUrl="C:\Users\ksaxena\Desktop\UserValidationTokenCreate_1.wadl" id="4f4a849b-b89a-43d5-a0b4-593ad65b8695" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ksaxena/Desktop/UserValidationTokenCreate_1.wadl"><con:part><con:url>file:/C:/Users/ksaxena/Desktop/UserValidationTokenCreate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="UserValidationTokenCreate"/>
  <resources base="${#Project#HostName}">
    <resource path="rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" id="UserValidationTokenCreate">
      <doc xml:lang="en" title="UserValidationTokenCreate"/>
      <param name="UserIdentifier" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="TokenType" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="404">
          <representation mediaType="text/html"/>
          <representation mediaType="text/xml;charset=UTF-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="GET" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="HEAD" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request/>
        <response status="404">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="DELETE" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="PUT" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
      </method>
      <method name="OPTIONS" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="405">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="UserValidationTokenCreate" path="/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" id="041ce502-c4cb-4299-be96-54e0534c37cf"><con:settings/><con:parameters><con:parameter><con:name>UserIdentifier</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate" method="POST" id="8860eebd-e1bb-4608-821e-756343a83174"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d518e1c7-22e6-457b-bbb7-348cd8659ece" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-2" method="HEAD" id="77956218-7016-484c-94ed-cf0fd81bbbc5"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f7810e26-714c-4d74-add5-ef703a16a6e1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-3" method="DELETE" id="b753535b-46bc-4dcb-9b8f-10266889c673"><con:settings/><con:parameters><con:parameter><con:name>PrimaryEmailAddress</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="20541f67-eb37-4cab-b933-da6048380d80"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-4" method="PUT" id="ec497ae3-f11f-4413-a938-22485a06e336"><con:settings/><con:parameters><con:parameter><con:name>PrimaryEmailAddress</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:request name="Request 1" id="689307f0-db5d-4de3-a1cd-9ec7079e2e19"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-5" method="OPTIONS" id="147699b7-fa45-4062-ad84-1827df27cbbd"><con:settings/><con:parameters><con:parameter><con:name>PrimaryEmailAddress</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8614e2c4-c855-40e4-bd6c-8f191c66c89f"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-Get" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-Del" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Accounts" type="rest" basePath="/rest/${#Project#V1}/${#Project#V2}/Account" definitionUrl="C:\Documents and Settings\kalyan.ineni\My Documents\Account_1.wadl" id="8c41e81f-12dc-481d-a910-1ea5217f5885" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/kalyan.ineni/My%20Documents/Account_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/kalyan.ineni/My%20Documents/Account_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Accounts"/>
  <resources base="https://qa.p.dece.neustar.com:443/rest/0/9/Account">
    <resource path="" id="/">
      <doc xml:lang="en" title="/"/>
      <resource path="" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
    <resource path="" id="Accounts_API">
      <doc xml:lang="en" title="Accounts_API"/>
      <resource path="" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401 500">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint></con:endpoints><con:resource name="/" path="" id="34e31d5f-1db5-483c-b6b2-9e025625596f"><con:settings/><con:parameters/><con:resource name="AccountCreate" path="" id="ba62b806-09c5-4420-bdc8-8ad992814d1c"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="6de95631-bcd9-41ac-abec-ff1f3eeac4bc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ba0907a0-1472-47a8-a9d2-8f515ea08da9"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST-1" method="POST" id="b888b5c6-6545-4379-be64-4c9e122abed0"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d5007309-a2ed-4302-b920-ed106306a989"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="{AccountID}" path="{AccountID}" id="bf5f3ac7-52af-47ec-b46f-563afee1f355"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="663b1665-5524-486f-ac49-73233c33dcc6"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="b67659b6-3ea9-4d4a-ae51-0d5b1ea2b597"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE-1" method="DELETE" id="f3472034-59e0-4e20-ab14-289fac528e9d"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8192ab3b-baad-46c7-b338-4286566cf615"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="6deffdf6-8888-4ac0-bba9-62ac3f5a0a8b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate_API" searchProperties="true" id="11a715f3-fabc-4fee-900a-f24ebd6d9c5a"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish_TestCase_Properties" id="9ce61892-9d8a-4055-b161-e19938292410"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="4dc8aec7-2e8e-4eef-9a55-46dedaad9403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate_AccountName" id="b8ba87db-df08-4f36-8c88-c580bb3ec25b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="1671024d-d72f-4387-92d2-ba0ce6079396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="63a3307b-6106-4786-9cd4-e176efd0bf16"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Body&amp;Headers" id="23303af8-41d1-41dc-8fef-fb959f9c4a2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="bd82d430-2a93-49e7-b2a1-7b84f0809636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      //def a = context.expand( '${#TestCase#httpLocation}');
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_the_NodeAccountId_to_the_Calling_TestCase" id="35d38137-3ff3-47da-9602-9bed11652bbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">accname_20140513_073444</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="51ed92e6-c568-4115-881a-88771404b0de" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2842594e-4ff8-47cb-afd9-7d9447bd34b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1c828cc6-c718-4458-8285-8f3412120ef1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="aec46fe2-046b-4208-9b99-b3f8610a7a8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="e434e6ab-627f-454e-a457-6101a23db2bf"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bef51ec6-85bf-456b-9ec3-670fd87002cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="518795a7-9465-4ca9-aaa5-d30618461158"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1juR8twUxQrSdUgoKh4A68vp2AYEOUmA4L++jOY6EqyknXWPi/iND3dX1/o+eYZm4HPdgHGKEm9KKyq0kvtP4KFOLbV5hqCzTuNpsWihmXxfKPVsRjIMBxtW0ytqmKcITXEqRmmLzWWZrgGzTdY3qD5LkN3Oe6JbQm7WnWFEkxME5UnulYtAj/E3Zvbl1qWhN3IxB7uhmaAcDeFXR1o4y7R7Jp3TLXX5zeUN4fJ6z5N4y5FwScbQeT78AlGAfVMfdJ5tnFX99zQTLMEvfu08UvtfW+e50859xQlLsXSNE3RAkV0bOy5/9ReK/fNyFZDJ3pb98wwCj1o+t7VLEFpKN1HdhX4bpR46T74wTRDMXRpuoEK2IBMM/ynRv1ycEP3l5Y+gUyw2cB7k7kbWyAHJSiEqLpcqC+1f/6ugm97jcQMsRMlAf6y/neQUHhGfhQju4Hvkd3R/b3Fb9L1+oxgVw2hn2HvjCZlm8QmRLg6S5DjFWMPk+azcfVW/mqB7x2G4L8pyTP1ESeBTX2TGclzEU7/n3p9rNWblZXpZ+h1tEGzc09SVoMITuGRNi5nvdhFvenh+HKD8FH5DdSj1O/rr4366Kv3TTBQ+tv6QKRaOdd3lmzfadWHQ784jK9+PwgKxvLb2mIWnXnR2iS2MMuRqjgzwwg3Np+dFOfoZs2Ddxz5/KASnizqNDD6So+eJkW+TXNJaXHHUNmitAiGkj4YnCYnOhDxfGLNZzo1MqOJdCkGzUiQfaUFZgatHZPdHoyjiiPPj+tkwTS13WmZCnqyd19+xfQxhjKuEbrcgiz/b1q0IJmp+Vj0yknhkM8zRa+aqvbqUq8HUM8FuSoCVxXHVzAR3eNpf/T6Qk6LYL5UgAQu2gLkkruVVvP5SM7t1crfrVRFEbVFMx+ArVQhLyS5WEm7zZA217t4yyr0ThdFe7OILG4Y24NjPtjDiWZo+cRQL9pBLiaGTK9vMrcg66t20JipseQq64MoaAs5l/KbR0nO95PdehFvl0IOr/JcA80+YJZyb68NjGDFQG6xhwd5rIHjTS7utd5qpRWyAWYV0Z2sSGxGT9nFMLBjK/D3H4wPiHHD7q8uVt/Pdlf5oPXkfk8/9XXV4qS5PASL7dJar47mWjlX4GACrLtHr+WZmyh3d51cmm+Ho2in7s9wAuayKM4BSRcNNLU/BFFfBFoTeMW1dxD5qGcrOTVkcaUu+H1+c/FOG2z2ad9kOh1mO17zsxMvyWF9N8qsw17bb5RpfaTb56WQCtctPtfPvOkxsIid+UYepKPCGcz1ijWTig0c1G13SPlXQUm09hAk18ve19xFuuan+GJ5jrMWN9Om33Z8jVvEju/EF1w3ovkxoXmRTEJqezmP0gpwNRGA/mF5EOea2CmTaqv5fKuJJlDkNAPXA5uO2NVpODj7cMuBqBitybf4XhhbymWRyucyaSu50pGAXRZhoC9l5QCWousmoisr4hxKYL5VR/mW5Gs5IMpf86jc8ujKIpC5HeCFQYVb0kI6TfVmE1xCcRkqwl47FWubD+j2CcljfRI3cw1PnHC3jo5a4CXLJNOXo9FkXFhG1j8eyKxyaH105nYV+XyMgTcZGfujFEnmLN5u07gewgSmahxoanGd7vCh41kBPay3GHFGS7DNLgMrX/ZNeTdKXJ0ZDRbhjGsLFZw5l0FQP3Tydd3Q+bht90JHulyoXbKiIxApwqJ1sguWPe6X+ZjPnSE4WiY7KXxBvAjyaGfAfDEfrfWg3qq0zuNxQF8NqjmJp7nez5vyfF7nbNEYGDhOvG3WcYtkGtrs1kz5845e8V7sHwU2OxrNmFu5ASnW7GzHbW1WmTc3cBe47RgOqQV1BnLbGav9i3U1r3EwhW8D9Ot0eAjf5gf1cbJ8Gj130qGTbkUwvS/LA0iVqgo5Fcz0zwSmlHh2w7mpduOSBeEUhWnttdxVkpduRiiOZ3fJkfG2lmlaaHd6rKAApsPIkkw3aUahAd0SBLbN8XeW84biC8ReFDpe6avkcW+n1J8BwqCLUWijpHGOMrhHuPYHi2W+qmq4IMdvFGJkRIQnttgWEAEDOL7VYsgPL3O8rLAcxypKS2L4WnUSpdNwmgAnRclnjih84ogLBL3YQyWRLE9TTI5TnJKUnMxzlvrM09l8ClFGqGZSsr0u2+y0KOwFsY9KwFQQ2ZmPnuJ9fEsQhd+ebMOE+CYtswvx7aD/McKv7+7JIDq2VyrgMhwRkYKib/gue4/lx5gZ9mPMd/Mgs73yPCeZTRMPviH5/OpXw5Sd8uiW2w/Ed9gP7a+CT5apr0E9nNlnDz7a/nEjIISSUI7Xe1VO5tPpKTufs1sd2iWdSoh5iqFontIRzAgnuhjREYXUwwT1V3T0gfqL54f8M74s3Yd6Sj7pgHRN9bb8i7uIjnB5F1FJ1xd/e9H55JLkLUVF+p2s55MrS4n4j7ca2IWlHhHPyCOPEvtXub6x9cEPibOcYV7olquSfF5+aAwYEbMemWNR8tH4dwa+c/5Z+EjyA0tKusnKUvTzm2o5oF5qJoRRFqaqVLsJPg7NG870EqPuL6XfzNzo3zufL/CPfH6jjXUyvgKz9tD1/rdyw7u1C0RkF/ZuWF5qBbmaEueh+2FIvwP8bU4LLC01m5LcJMf4pznNyo8Efork9Tfx75IPOf36Pbz+Fw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="32279977-861a-426e-81a7-71cea06f5005"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2df40bdd-6cc9-44f1-90c3-1a4151e7cfd7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e3a33296-6687-4004-98ad-43216c8953e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="61a1894e-5bca-4a1f-acbe-c5e726a3a6b9"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="c1c25c09-87d7-4c13-a6f4-1abb82fc51b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="1b78c8af-d076-49a8-89ad-96aa23408bda"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="41ca1f7d-5625-4f51-8ca4-25567c822ce4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="f2bf8bc6-5e0d-41ba-b6c2-bfdc1e394e92"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		////assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8YMCmklTJExgwk834csrI8gCe8IANX39kCOwkO9k35z6B2q3u1YNaS8+J4Xt0FyQJilM3DKqK+FL7Z9eyOgzsmI32rtlqMDTHNrgWQzaQ1WQY2GQsps3WqkqSZEgJktQI0pcaTVLNBsk2qLZOsl261aXZJ6rNbWvVJYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuBtRRF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0tVcOzDSLEZvPs3kpfa2N8/zp7z5FMY2QZMkSZAcgXXMxLV/1V4r983IVAIrvK0FIwgDFxqeezFKUCpKndCsAs8OYzd1/G9MUwRFlqYbqIANSDHBrxrx28EV3Q8tfQAZJ0YjcQzqbmyOLBSjAKLqYq681H79rIK3vXpsBIkVxn7yaf3fIKHghLwwQmYjuUd2R/dzi1+k6/UZwa4SQC9L3BMal20SGRAl1WmMLLcYuQluPjOpXstfLZJ7hyH4X0ryTLzHiWETX2RGdG2UpP9Pvd7X6mZlaXgZemWjzhCq4+mOnCC2SfaPUtPTIsPqWYeXK4T3yjdQj1K/rT836qOv3jZ5gxMrpAdLFk6UU8wtskhXG2FLG5dLDlnHWmiiTnnDneaZIeTSlRppNtnq+EMJjSaivrWV0bA1PNvkHLEVZ7/RWSdb0bvj7qixeS84K/OWIcHxcdKr99cpNQWjQpYtj++srI0rprM1IthIydtyX1+CsZA241lzQs21rLKf7UfGqDUYsfVeKLLT+pZ5+R3T+xjKuIbofA2y/L9ukZxopMZjIZSTwsLHM0WvqqIIdVEQABJskCs8sBV+dAFj3j4cnYPb43KSB7OFDERwVucgF+2NuJzNhlJuLpfedqnIMq/OmbwPNmIFfxClYilu1wPSWG2jDS2TW43nzfU83DUHkdk/5H0HjlVdzce6clb3UjHWJXJ1ldkFXl/UvUpN9EWzstrznDqXcjG/ehSl3BlvV/Nos+ByeJFmKmB6gFpIgqP2dX9JwebcgXtppILDVc47qrBcqoWkg2mFt8dLHJsuyNsI+ma08z3nnfE+Nq6bveV51/Oy7UXaq4LUE7RjT1N2TXEmDcB8s9itlgdjJZ8qsD8Gu7tHt+Ua6zC3t2wuzjaDYbhVnBMcg5nE8zOA00UCVekNQNjjgcoAt7gIe74dCqacEwM6qdQ5r9den93jOjF6pGdQLEttRqv29NgWpaC+HWa7vaM6a3lSH2rmacGl3GWTnOqntuFSsIis2Vrqp8PC6s+0ym4qFmvYr5v2gPAunByrnQGIL2fHU+15umpPkvPOtawVv54wXsfy1OY8sjwrOid1PZwdYrLNoyZNbM6nYVoBtsoD0Nsv9vxM5dkyqaaSzzYqbwBZSjNw2dPpkF4eB/2TBzdNEBbD1WR/eCuMKeYST+QzCbeVVGFFYJZF6GsLSd6DBW/bMW9LMj+DIphtlGG+wfla9LHy5zzK1zzaEg+k5ha0uX6luSC5dJJqDAPOAb8IZM5Rj8XKbPtk54ikkTaOmFxNxlawXYUH1XfjRZxpi+FwPCp2etY77PGsskhteGpuK9LpEAF3PNSdgxiKxjTabNKoHsAYpkrkq0pxmWyTPevufHJQb1H8lBRhh174u3zRM6TtMLY1atifB9Nmh6skmXXu+/U9m6/qutaOOqYQWOL5TGzjJRmCUObmraNZ0PTBWeSjdm4NwGFn0OPC4/gzJw23Oszns+FK8+utSus0GvnkRSeYcTTJtV7OSLNZvWnyel9PotjdZKxdxJPApDdG2j5tyWXbjbwDR2cHnYmaS9vHxZqezKijTiszZg23vt2J4ICYEycgdayR0jvvLsYl8ifwNkA/T4eH8DY/iPeT5cPouZMODXcrgul9WV5AiliV8a1gpH8nMKXENRvWVbUblSwoSVGQ1l7LXSV56WaY4rhmF18Zt7XEkGILXx4cRzcFgeUkkiEpmQRkh+NICkh3lnND8QmiEAaWW/oqedztlvo7QOh3ExSYKG6cwgw6KKn9xWKZr6oSzPH1GwYJ0kPME2mKavMSJQGWJYWWKLUkQMuUyJMi3+YFjq5Vx2E6CSYxsFIUf+CIFPWBI84RdCMXlUSyvE0TfJ0mKU7J0ThlqUc9nYynAGWYasYl2+vSDNsiEtePPFQCJvzQzDz0FDnRNUFEcvulGwZMrlKBFCSZlUhWwDdDR2w/EtviOIom+SsF+Db2z9/uacI6plsqJGWgPMKlRl8wYeoe5ffZYN5n424eZKZb3vQ452nswhuSj59+t1LZQ48+mkv6P4L2D3XH/VD/LPhgmvgc1cObeXLh40Q8HguYa2I28nov2NF4Oj5lp1N2LVGnZFoxNk9QBNkhNAQzTJfOenhAAfEwQfyIqT5Qf/L8kH/El6VOoKX4tPu4oarX5Q+eKRpKymeKgg9E8dM30AeXOG8pKtKvZIKHXzMl4r8+eGAXlnpYPMU/eRibv8v1ha13fnCc5XhzA7tclbz0/E1nwBCbdfGIC+P3xr8y8JXzj8JHkh9YUtxNuyxF33+plrPrpWZAGGZBqoi1q+D9PL3iTM8R6v5W+sPMlRm+Uf0i+Zbqr9WRhiebb9Qeuu7/Vm6413aBCO9K3CuWl1qBX63YeWC/m99vAL8c4Swn/22Ef4zk9Q/xn5J3Of18Hl7/BQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API" searchProperties="true" id="cacb2fcd-1bef-4e8b-ad7e-32941fd262fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="13ed78eb-2ef5-49c2-8928-b781b8b5af4c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2da08880-9621-4c99-bb72-a05db9926419"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="0a35dbf2-9159-44f6-ad92-92198b59d2b6"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="648c8b18-139e-414a-9886-48bfa4f700e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="46d94cac-1e0c-439c-a664-6dcacbd493b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountGet}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requestor is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
          assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		 int lastColon = urlStr.lastIndexOf(':');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 1);
			                                
		tC.setPropertyValue("ACCID",accountid);
		
		
	} else {
		 assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		 int lastColon = urlStr.lastIndexOf('%3A');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 3);
		 	                                
		tC.setPropertyValue("ACCID",accountid);
				
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == 0;
		assert myXML.AvailableStreams == 12;
		assert myXML.UserList.size() == 1;
		assert myXML.UserList.UserReference.size().toString() > 0;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="3c193123-be70-4eea-988c-07e25df3eee6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>accname_20131213_120852</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:ED65AF16687A5614E0401F0A07997557</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:ED65AF1668805614E0401F0A07997557</UserReference>
   </UserList>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-13T06:37:49.710Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-13T06:38:07.216Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1126</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_NonCS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP5+fkWnfmRK+kZLO8IMt4DWg+IVdcQvTkhTiJYUmpQXf/1JikVA9HLuDDNMtpvdZ1/y7J4zOE1Mv8UYzjhJqRK2G+oL9OJRPXYsrW6PYs22I0+Drh1r0UiPzFGEsWU7qhIyluOQMg4pb6imbliaYWqGda87vlX3daPqWPqzqjzijAnTQqWqq8pqmlDmF24bap5RP4WMMJ/CKWY+R/6gdd3zhaYPS0xq83yDsnCYNSecz3wAUDXCCCcJqqJ0Cs7Bns55xPwBGVPI8wx/+IxYQ/24u1wuq0urmmZjYOq6DnQPCJ2IkfGZ2vxVXsZRSON0cw4gTSlBMCHvUIK6xnySRkorGacZ4ZPpN6YNYOjStIZXSEOGTc9U8OmgQHeipT2QGYMam0CjNHaHY5xhirDycBc21LPTKri5e59ByuI0m7KD899BwnSBk3SGI42VkZXoTrd4JF3Nc4z8kKIkZ2SBb2SbzCDCTLnNcExWPcJE80VMKcqvrJj4kbLLMPqbspyDXawCOjiSnTYZY8b/T81267Wx8giTHDcrThdc2tx67A8jB1XcmTvKef/qct1rNQoIu8obUNtyf5wPm3XbWx+Xevnsdf3aH04qnUseBN3hJQLOdeUKDLP35BZ0YevR6V7VgrE9fFvZ8+v3iwtzbfaGb8ZiyZ313WuX6EvSClN4//ar++CY8YiGC4882R2zHcRXoDL/nTwQy60vnMHzY/99/fyQZM/mfP0WjsJ/veTdCbKK++RCI3izLi+mT8O8ZrX7w1/BcnHTZR1BEL1b/nAFZ7/1xmdMuzHsC0tKGOSjV4x4eZTtEbaVrqgX5D/Ti5SQSIsLVX8mOYpxTLnalLcktfi5ICAS+aKYm3On7dRaXcNx6nW95hh2R7d1o6u3dNfz3FrNLTlog+IAYpDSmEhfkmU3/fMzQDT1GaYRzrRFmqMJZuoPFtuQQyWkd+JxpJTh+1SwuABou0bL89qBZ1jtumsZXS9wrbYXBLqlt1TlJuV92s9aMcfZPoN7ewx+hxGZESxpXvY5E43OuEjJHC5ynhjVBaxSnItBkEku9k27XgOMTGcJloDBNI3yBFdnk1mRIMA2/6YGESukd5374v19G97htzITQiciUoHJWP7Bopr4yyhy/VoZyLcBG+ZuwKX5Vh4R+cxEWnlG0AbJ/qfPbpFtsm0VEdFLMHgxStxb9ZOvf70JfgAFDvOxdRQtyI7bcqaKMSFIpFlWcw6r82q+WORF/VxJkJkwDwRPGmCAUS5Ybn2fvmEKtibASUNmi/rA81a+jy/nEzrgkOOp6DalOJ6wYQwwkxtGKF7L6tT1Zc+lyBvHK35MFiRiEZGIf9xVkI+knhDfir9lmkWf5Tpia8ePiFOsFZzQsTzJcbL+pilQKswSwX9ptmv8mIFjzveF2yRvsXDRTWLy4O+/KJLYGipEKM0pD9tqIdgl2wInX8+w/6n0xUxB6B8TesW+ndBP172BoL0pVLe65L+VNVK0C8KqXAQKLA11JRZO4ZyOd8j9A+BxfnfNn/h9P5LmF/FXyU5OD99D8w8=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557</con:value></con:property><con:property><con:name>ResponseTypeAccountGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ED65AF1668D55614E0401F0A07997557:CED286F"</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E763CEDB3CA1FFCEE0401F0A07991BDA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API" searchProperties="true" id="50689f7a-271a-48af-ac58-51a00dcf25e1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3b865a-29ea-477d-b95b-c43f031f13b6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="efdeccdb-6452-4757-8742-168412fcf27b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="7dfbf775-9a67-431b-bdda-786ea95cc0e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="RET_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="IF-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e33b673a-0ef4-4681-bc6f-abfbbf10e33c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="aa74adfe-6f1a-4eb3-8891-56556b47f6c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountDelete}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) 
{
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="dde6c1d9-0409-4792-9624-1bf5b7836eff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def responseTypeAccountDelete = context.expand( '${#TestCase#ResponseTypeAccountDelete}' )
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotActive">
      <Reason Language="en">The account is not active.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#AccountNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">689</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP5+fkWnfmRK+kZLO8IMt4DWg+IVdcQvTkhTiJYUmpQXf/1JikVA9HLuDDNMtpvdZ1/y7J4zOE1Mv8UYzjhJqRK2G+oL9OJRPXYsrW6PYs22I0+Drh1r0UiPzFGEsWU7qhIyluOQMg4pb6imbliaYWqGda87vlX3daPqWPqzqjzijAnTQqWqq8pqmlDmF24bap5RP4WMMJ/CKWY+R/6gdd3zhaYPS0xq83yDsnCYNSecz3wAUDXCCCcJqqJ0Cs7Bns55xPwBGVPI8wx/+IxYQ/24u1wuq0urmmZjYOq6DnQPCJ2IkfGZ2vxVXsZRSON0cw4gTSlBMCHvUIK6xnySRkorGacZ4ZPpN6YNYOjStIZXSEOGTc9U8OmgQHeipT2QGYMam0CjNHaHY5xhirDycBc21LPTKri5e59ByuI0m7KD899BwnSBk3SGI42VkZXoTrd4JF3Nc4z8kKIkZ2SBb2SbzCDCTLnNcExWPcJE80VMKcqvrJj4kbLLMPqbspyDXawCOjiSnTYZY8b/T81267Wx8giTHDcrThdc2tx67A8jB1XcmTvKef/qct1rNQoIu8obUNtyf5wPm3XbWx+Xevnsdf3aH04qnUseBN3hJQLOdeUKDLP35BZ0YevR6V7VgrE9fFvZ8+v3iwtzbfaGb8ZiyZ313WuX6EvSClN4//ar++CY8YiGC4882R2zHcRXoDL/nTwQy60vnMHzY/99/fyQZM/mfP0WjsJ/veTdCbKK++RCI3izLi+mT8O8ZrX7w1/BcnHTZR1BEL1b/nAFZ7/1xmdMuzHsC0tKGOSjV4x4eZTtEbaVrqgX5D/Ti5SQSIsLVX8mOYpxTLnalLcktfi5ICAS+aKYm3On7dRaXcNx6nW95hh2R7d1o6u3dNfz3FrNLTlog+IAYpDSmEhfkmU3/fMzQDT1GaYRzrRFmqMJZuoPFtuQQyWkd+JxpJTh+1SwuABou0bL89qBZ1jtumsZXS9wrbYXBLqlt1TlJuV92s9aMcfZPoN7ewx+hxGZESxpXvY5E43OuEjJHC5ynhjVBaxSnItBkEku9k27XgOMTGcJloDBNI3yBFdnk1mRIMA2/6YGESukd5374v19G97htzITQiciUoHJWP7Bopr4yyhy/VoZyLcBG+ZuwKX5Vh4R+cxEWnlG0AbJ/qfPbpFtsm0VEdFLMHgxStxb9ZOvf70JfgAFDvOxdRQtyI7bcqaKMSFIpFlWcw6r82q+WORF/VxJkJkwDwRPGmCAUS5Ybn2fvmEKtibASUNmi/rA81a+jy/nEzrgkOOp6DalOJ6wYQwwkxtGKF7L6tT1Zc+lyBvHK35MFiRiEZGIf9xVkI+knhDfir9lmkWf5Tpia8ePiFOsFZzQsTzJcbL+pilQKswSwX9ptmv8mIFjzveF2yRvsXDRTWLy4O+/KJLYGipEKM0pD9tqIdgl2wInX8+w/6n0xUxB6B8TesW+ndBP172BoL0pVLe65L+VNVK0C8KqXAQKLA11JRZO4ZyOd8j9A+BxfnfNn/h9P5LmF/FXyU5OD99D8w8=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_NonCS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557</con:value></con:property><con:property><con:name>ResponseTypeAccountDelete</con:name><con:value>ACCT_INACTIVE</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ED65AF1668D55614E0401F0A07997557:CED286F"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validations" searchProperties="true" id="1cc8c7f1-8717-461e-801a-f31149324c32"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="43c5dbf9-3574-4373-9d3f-f1b49a7247c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("user_oid",null);
tC.setPropertyValue("account_oid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="c50fe2d3-1534-4f7d-94a8-bf12161b0236"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table" id="01831dcd-e7f2-4900-9668-eaaf97116e9b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("IsMinor","");

def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

def BirthDate = null;
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

Result = b.userGetRow(userID);

myXML1 = new XmlSlurper().parseText(Result);

log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
 if(context.expand( '${#TestCase#ResponseType}')=='SUCCESS')
     {
        assert  myXML1.ResultSet.Row.size() == 1;
       	
       // assert myXML1.ResultSet.Row.STATUS == 'pending';
        assert myXML1.ResultSet.Row.PRIVILEGE == context.expand( '${#TestCase#Privilege}' );
        assert myXML1.ResultSet.Row.USERNAME == context.expand( '${#TestCase#UserName}' ) ;
        assert myXML1.ResultSet.Row.GIVEN_NAME == context.expand( '${#TestCase#GivenName}' ) ;
        assert myXML1.ResultSet.Row.SURNAME == context.expand( '${#TestCase#SurName}' ) ;
        assert myXML1.ResultSet.Row.PRIMARY_EMAIL == context.expand( '${#TestCase#PrimaryEmail}' ) ;
        assert myXML1.ResultSet.Row.TELEPHONE == context.expand( '${#TestCase#TelephoneNumber}' ) ;
        assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == context.expand( '${#TestCase#MobileTelephoneNumber}' ) ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#CHILD_DOB_XML}' ))
        {

        	 log.info "I am CHILD";
        	 
           BirthDate = context.expand( '${#Project#CHILD_DOB_XML}' );
           assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';

           tC.setPropertyValue("IsMinor","true");
           
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
       
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#YOUTH_DOB_XML}' ))
        {
        	log.info "I am YOUTH";
        	
          BirthDate = context.expand( '${#Project#YOUTH_DOB_XML}' );
          assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';

          tC.setPropertyValue("IsMinor","true");

                    
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;

         } 
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#ADULT_DOB_XML}' ))
        {

        	log.info "I am ADULT";
        	
          BirthDate = context.expand( '${#Project#ADULT_DOB_XML}' );
          
          assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';

          tC.setPropertyValue("IsMinor","false");
          
        /* if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
          */ 
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}' );

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User Validations Passed";
               
   }// end if for success response check
  else
  {
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  }
  

   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table" id="646f252a-1208-41ee-b592-29898615c1ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );
def nodeid =context.expand('${#TestCase#nodeid}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c=  new dbUtils.dbNode(log,dbHost);
//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = '$userID'""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

log.info results;

/*
*  If zero length, no need to continue;
*/
 assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (context.expand( '${#TestCase#ResponseType}' ) == 'SUCCESS')
{
	assert myXML.ResultSet.Row.size() > 0;


	if(nodeid=="dece:cs"|| nodeid=="coord:cs" || nodeid=="portal" || nodeid=="portal:cs")
     {  
       assert myXML.ResultSet.Row.size() == 4;  
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";     
     }
     else
     { 
       assert myXML.ResultSet.Row.size() == 5;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' );    
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table" id="c2556cd7-c040-4e74-899c-dd36e9895fad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID ='$userID'""";
  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies" id="14df3c78-1881-4452-ae4b-ee45fc2dba4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select POLICY_CLASS,STATUS from POLICY P, POLICY_RELATIONSHIP PR where PR.POLICY_ACTOR = '"""+b.userGetfromNodeUserId(userID)+"""'
  and P.POLICY_OID = PR.POLICY_OID""";

  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>IsMinor</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00004_UserUpdate_FUNC_CLG_Update_CHILD_DOB_TO_YOUTH_AGE</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>Username</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>DOB_NOT_EDITABLE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value>E2A349A2ABBCCB1DE0401F0A059926E1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E3CF68DF2A8DD783E0401F0A07994C97</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3CF692D5BE44697E0401F0A05993AD3</con:value></con:property><con:property><con:name>attested</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate_API" searchProperties="true" id="0559683a-89a8-4543-9672-06581fc3aece"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="57a6b4c1-0694-446e-8f36-05e83c7ce9d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="d1c7a146-8d82-464f-a13c-88e5647b362d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="6bfca67d-bde1-48a1-ac3c-4f55e0fb1152"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="d83a7aa0-a338-4337-bd80-8a6555265525"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="0bddecd5-3dd5-46cb-98f9-531d8470ab22"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="0d5f80a7-2de4-498f-ae54-f37855d409a6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="81aa2acc-00f2-4213-83b4-8d8b8a3892bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="634c2e6f-087e-4579-9cce-60d8b6645b9e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase())
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("ACCOUNT_OID", a);
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_the_Username_and_NodeUserId_to_the_Calling_TestCase" id="36b6711f-6cce-40c3-b9aa-ddc166e106d4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-05-18</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>F9502192419E3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D/User/urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-05-18</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950212A19594295E0401F0A079905C8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true" id="30aefa36-5265-4855-8432-a953e41b8771"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="cc7ab515-dee1-4301-a271-69c0066d67df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);

tC.setPropertyValue("Country",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="815bff3b-842a-4070-86bb-cece5b19c7a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_Constants_based_on_GeoProfile" id="f23d9bb0-0bd1-4723-928b-a9c1d99c147f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","true");
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set_pem" id="5aec259f-6efc-4047-958a-f404549b66a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="bdbb05a4-3195-40a4-a273-e98edb919cda"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}
</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bc996057-be4c-4bee-a9ac-43bd22a866c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Test Case Name with Expected Result" disabled="true" id="6606defe-0900-4d4c-835a-feae6fcf695b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def httpStatus = context.expand( '${#TestCase#httpStatus}' )

logFile.append("${callTCname}"+"\t"+"$httpStatus" +"\n");</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b31e8838-e244-4a70-b23e-27ecedeb39ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="95f3189f-715e-4cef-bc91-14a1b4138b68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 //assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                //tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="419e9428-03d9-4db9-8ef2-4eaee630ffe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="d54de616-6e27-4415-9595-dc1c9befc230"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" disabled="true" id="c17a5bb4-45e8-4769-a033-1d1cc450c284"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
<!--	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>-->
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>SurName</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20140513_07316@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20140513_07316@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-05-18</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212A859729DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212A859729DFE0401F0A059909A1</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F950212A859729DFE0401F0A059909A1/User/urn:dece:userid:org:dece:F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxVypZCoIGUDbdmlN6C7l5cj15mA28QJsQNpv/7YoUmBXk73kZCQJ+OZNTPLyz5iKI4sz2cMMk4Sqgz7HfUfZLctB4UtDbeMR80JXKy1cRs010ZmCIdgOI6tKkPGchhSxhHlHdUyTEczmpppTy3bs03PaDfaVutBVf5AxkRo4dIwVKWII8q8Mm1HzTPqJYgR5lEUA/M49ib++cgTnh6qMKndozXKMmHWnXOeerqOGwFgiCLcwEmsH+lbPkcB8yZkRhHPM3jLGbCO+rZ3tVo1VnYjyWa6ZRiGbri68AkYme2r3b1qMwRDGibrdQ/RhBKMIvKKJKhz4PMkUPxolmSEz+MvQpu6acjQGhRYw6ZD91X9PUGJ7oeRtkBmDGlsjswq2BhCyIBiUG7Gw466/7MJrvdOM0RZmGQx21n/HSSgS4iSFAKNVZVV6H4e8ZN2dY8Ae0OKo5yRJVxImqQIA1OuMghJMSJMkC9gSjl+pWDiRyqWAf6bsRzpm1gFdP2T7vTJDBj/PzPbnNc6yh8U5dAd2Y/GgXWasJjfTH/FbvhiPz3rwdnFqd8pIWw6r0HV435b75K15tbbpqsC6Tx9deO2Hx1cNO9OB6JXOAif0OmjM5zN7p5eTQfPWgtAxeDs8dod9s8e7u7vrZfn0a17d7FY4Bsr6D/7i8Vq79W5S3P7lcQHzmhw0Du5vu2H97Oxe3LbzJo3RHdeepPiYFXgVzu+fD487Y1PTrK0GGVLo7XUSe7HcSu9OjB/X+itvSc3v+5dnznn+r3JSBs9YNZ5r2mzhm1jJQmT/PEJMK+Wkh7DvnIs5oX49/IiLSTQwtLVS6VGMQ6Uq125S0qLlwsBIoEnhrleH7tNw7KOj83BoO0Yh8cDwzHMY8M3Wq5r2L5dadAaxQ7EXkJDInNJlV3z53uAOPYY0AAybZnkeA5M/SZiH3GkDOlYHI6EMpgmQsWtcLmaLZAzx4fZod065O4yB7CEBl8k/JJeZn7IIdtQbmdqWFvKPQZMUgJS3iW/mSA446IVC7TMeWQ2lqhBIRcXQCY12LOcdlNnJE4jkED1OAnyCBrpPC0bo7P1v6UhzErreDAtz92XZe1+qzogfAIiHZis5ReIKcKHK8jwmlUhXxfc3Cy4Cu/nAZHHS7STZwSvkWx/emeJpEdNEVFRBbn23DVsRdV3C6oTBUuCa57XF7TQd3H6u9U4FqixaOTLZV4OoCWVLRPhdSFwpj4BnAt5epkmz0D1OoT+o9uhRr2TubZv48v5nE444hALuijl8gdPgwkw+TQYCpoXP313bKUUfeNQ8M9svUi8ICTibx8Z2MPST5ivxN8qyYL3cX0SayOPqFO8BzihM7mS98DLF6TAiQhLhHAl2WbwzwJ8lnzbWDe5xsIFmx5zDl9/UaQidVSEcZJTPuyrpWFTJUuc/CUF793pQ5hSid+u1oJ9ebXenY8mQq9ipNa+5L+dNVLSBYMqb/ASS0ctxEtRJKezDVV+A/hBmE3LbzfdluX234W5KYTZ9c26gVuVdD+YP1o2erp7Hrr/Ag==</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-05-18</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F951077257F0F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-12-20</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true" id="590b402e-4d94-4c2b-a26d-a4d3267a4ef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f27028f3-2af9-46ac-a1de-e4256a56b696"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d5b51071-2ee3-4d2b-9d9f-bc6a6ac92aee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def uname= "UVTCPrimaryEmail_childuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="50763b73-9049-4b58-a596-22b9c44d28ce"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e60197f4-457a-471d-9c07-8c2288d7ab27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="de24c3ce-5f05-4e09-b55f-cc972dd6ed20"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="03a76851-c6af-43f8-9a56-27b1c0fbd654"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="db9995f9-2d03-4edc-a7b5-1a27806f9df4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="6560a526-a158-4680-bb3e-7becdd8e8e22"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase())

		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="3cb92131-dcff-4db9-b779-7d67fa6de2d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="2b0912aa-5f74-432f-b079-69e9e921e8a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20140513_07305@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95107A0A5A81761E0401F0A0799554A</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023812789</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F9502206A54EEBC6E0401F0A079902CB/User/urn:dece:userid:org:dece:F951092D1DE5A648E0401F0A05993970</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502206A54EEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502206A54EEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F951092D1DE5A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107A0A5A81761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951092D1DE5A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20140513_07305@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chFxICUUGiXHazvUPb0/blyDgDuCROiG0u++vXDk0KbNvTPRIS8mQ8883M588+YSiJnaDLGOScpFQL+23930ZrUveR2zTcZsMy3AZqGRN30jC8ljPxvCn4TdTQtZAxASFlHFHe1h3Ldg3LM+z6rVMP6lZg+TW35T/p2j3kTIaWLjVL1zZJTFlQpG3rIqdBihhhAUUJsIDjYNy9OA+kZ4BKTHrnZIeySJh35pxngWniWgQY4hjXcJqYJ+aBz0nEgjGZUcRFDi85I9bWX/au1+vaul5L85npWJZlWi1T+kSMzL7qnS/lZohCOk136x6iKSUYxeQXUqAugM/TSOvGszQnfJ68E9o2bUuFNmCDDWy79KtuviYo0H0y0gHInCGDzZFdBhvBFHKgGLS7UdjWv35ugru9tzmibJrmCTta/x0koCuI0wwig5WVleg+H/GNdnVOAAchxbFgZAWXiiYZwsC06xymZHNOmCRfxLRi/NqGyR8pWQb4b8ZyYu5jldDNN7rTJzNg/P/MbH9euyj3KBbQue5Hz34f/cKDenPJvg3iBfFi6+nqZ8zaBYR95x2oatwv62OyVtx62XQTTXrT61bzpjm4uTqPksk/rcu75Bv6fka8Hhk2HrciM0c9P3lkYS+5p8OLxo87ECP0+Hx155x5sE1EMvKno+lKfIk8MQjD8/5lY/SdPp95Kf95dh8t7vsPw3rvKu2ve/V+xtBInKFrDovHzSx+StdR/5nOqP8YNbuQbIen8WK8/EW+nPvJ4tJ/YKNIoJ/ff9xA3W2/1rRfw6GxlISxmDwD5uVS0SPsa0M5L8Q/lhdlIZExLVyDTGkU40C53lG7lLQEQgoQiQI5zN162PJsy+9aXa/btP2GPbBcyx5aXctvtTzP7ZYatENxBLGX0ilRuZTK7vjzMUCcBAxoBLmxSgWeA9M/iNhHHGkhHcnDkVIGt6lUcdtbLqzlxGdZZj2vWJNtFzAnk/VS1y5TfkWv8u6UQ74n3e6t5RxI9wgwyQgofVcEZ5LhjMteLNFK8NiurVCNgpA3QK5EOHDcpmcykmQxKKRmkkYihlo2z4rOmGz37xgIs8I6GtwWB+/duo6/lS2QPhFRDkzVcgpyjHB8BzmtwCsLeb9gb7/gMnxXRESdL9lPnhO8Q3L46ZUmih8VR2RFJeTK89hwENU8LqhKFK0Irohe3dBS4OXx75TjWKLasiZWK1EMwFfSlsvwplQ42xwDFlKftrfpAqhZhTA/dT1UqI8yV/ZDfILP6ZgjDomki1YsP/E2GANTb4NQ8nzz2YfHQUrZNw4b/patF8snhEL84SsDB1j5SfO1/FunefQ6rjdi7eWRdcoHASd0plbqIti+QwqcyrBEKlea7wd/K8BbyQ+NVZMrLFyyaSI4vP9FU5LU1hHGqaA87OuFYV8mC5x8m0Hw6vRHmEKKX+7WDXv3bn24OB9LwUqQXvmS/3Y2SEEXDLq6wgssbX0jn4oyOZ3tyfILwCNlthzHanQ9dzA47TX2ldlyeqdVAw8q6fxh/tOy19Pj89D5DQ==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023812789</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00091_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_Retailer__Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023812789</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F951092D1DE6A648E0401F0A05993970</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="18d6dbdf-5594-4023-8f59-664e83628798" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40b51506-e7ed-484f-9cef-144c355c10b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0e921030-fc0e-4088-8519-d2ea05acede9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="8dac2685-8684-45a7-9383-18906924bc23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="9edfc5bd-e710-4adb-a343-f24a81968540"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5be437dd-519a-4ddb-9991-82608accc06d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a34e05a2-007f-4659-9d23-4e5f076e5223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="19cc486a-a16d-4ec8-86ef-9f451f07ebed" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46e67ffd-7362-4e1c-a502-21e353b9227c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="277c6a80-14fb-4da5-bd51-3f2ccc23180d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="11565952-3245-4993-9a90-b45b77daa42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="aa2ec204-f680-47ad-98fb-51d2d96fbf59"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="367744f1-376f-4646-9264-0e788eced0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e8904455-2076-49b1-9371-9836b5d0c1cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8sAgihWkqphU1TcwPXmLRwGRNlk11//DiZ6TE5yvrxf5cJM09P99DI9zzzHhuc2uyCOUZQ4gV9VxJfaPxzTJBkWNRt00zIbDLczG0aT6uBlh2pRBkVZDFerKnGcIsWPE8NPXmpNkqIbJNugOJ1sdelOl+k8sSyzrVWXKIqxaazyRNaqhef6cffq9qWWRn43MGIn7vqGh+JuArsaUEddrNk1bphqr89vKK8Oo9d9koRdgoBPJoLIdeETDDzimfig82zGXc2xfSNJI/Tu04xfau978zx/yumnILKJJkmSBMkRWMeMHftX7bVy24xMxbeCt7Vg+IHvQMN1LkYJSkXJPjCrwLWDyEn23jemKYIiS9MNVMAGpBj/V4347eCK7oeWPoCMYqMR7w3qZmyOLBQhH6LqYq681H79rIJve/XI8GMriLz40/q/QUJ+htwgRGYjvkV2Q/dzi1+k6/UZwa7iQzeNnQyNyzYJDYji6jRCllOMnBg3nxlXr+WvFvGtwxD8LyV5Jh5xYtjEF5kRHRvFyf9Tr8davVlZGm6KXgGVdJC/9rRR1qunMuNpHH8O80vnQL5cITwqv4G6l/p9/blR7331vmkizeSkl02UHWImJKhPLrBlSqucXmx1rW+QuUJL9mAEt9qw3TZMYw6glp6QSazSvdXL8mBdEELCd5RLqFdcuJ0o7eKkjdzW+UgeXd8VNDSVpuqRS0HeonkhPE5mobsMZcsMBQseTO7ILkfncM+yxakN/Nhklwf2rO8qy0l4CS7H1B4yUXDOaWO9efkd02MMZVxDdL4GWf6/bpGcaCTGfSGUk8LCxzNBr6qiCHVREAASbJArPLAVfnQBY94+nvZHp8flJA9mCxmI4KzOQS7aG3E5mw2l3Fwu3e1SkWVenTN5H2zECv4gSsVS3K4HpLHahpumTG41njfX82BHD0Kzf8z7ezhWdTUf68pZPUjFWJfI1VVmF3h9UQ8qNdEXdGV14Dl1LuVifvUoSvl+vF3Nw82Cy+FFmqmA6QFqIQl7ta97SwrS8z08SCMVHK9yfq8Ky6VaSDqYVnh7vMSx6YK8DaFnhjvP3T8Y72Pjutlbnnc9N91epIMqSD1BO/U0ZUeLM2kA5pvFbrU8Gis5q8D+GOxuHp2WY6yD3N52cnG2GQyDrbLP4BjMJJ6fAZwuEqhKbwCCHg9UBjjFRTjwbCCYck4MmnGlzrk9dn12TuvY6JGuQXU61Ga0YqcnVpT8+naY7g57db+WJ/WhZmYLLuEumzirZ6zhULAIrdla6ifDwurPtMpuKhZr2K+b9oBwL5wcqe0BiC7nvava82TFTuLzzrGsFb+eMG7bclV6HlquFZ7juh7MjhHJ8ohuEptzNkwqwFZ5AHqHxYGfqXynTKqp5LONyhtAlpIUXA7NZNhcngb9zIUbGgTFcDU5HN8LY4q5xBP5TMJtJVU6IjDLIvS1hSQfwIK37Yi3JZmfQRHMNsow3+B8LfpY+XMe5WsebYkHEr0FLNev0AuSSyaJxjDg7PMLX+b26qlYmaxHtk9IGmnjkMnVeGz521VwVD0nWkSpthgOx6Nip6e94wHPKovUhhm9rUjZMQTOeKjvj2IgGtNws0nCug8jmCihpyrFZbKNDx1n55GDeovip6QI282Ft8sXPUPaDiNbo4b9uT+l21wlTq1z36sfOvmqrmts2DYF3xLPZ2IbLckABDI3b53Motk87hf5iM2tATjujOa4cPEo46ThVof5fDZcaV69VWllo5FHXnSCGYeTXOvljDSb1WmT1/t6HEbOJu3YRTTxzebGSNhsSy5ZJ3SPXDM96kxIL20PF2uamWFbnVZmzBpuPbsdwgExJzIgta2R0jvvLsYl9CbwbYB+ng534dv8IB4ny4fRcyMdGu5WBJPbsryAFLEq41vBSP5OYEqJYzasq2o3LFlQnCA/qb2Wu0ry0k0xxXHMLr4y3tai3BZoieFEQRY6UouUSIakZBKQLY5ryXTnxnLeUHyCKAS+5ZS+Sh73dkv9HSD0ujHyTRQ1siCFexTX/mKxzFdV8ef4+g38GOkB5okMIGmB4QX8x9ACxTG8SLdFSQJcu0UJfKdWHQfJxJ9EwEpQ9JEjdj5wxDmCTuigkkiWt2mMr9M4wSk5GVmauNRTZjz5KMVUMyrZXrfJdFpE7Hihi0rAhBeYqYuewn14TRARv/02GwaMr1KBFCS5I5EdAd8MbZF9TCzVJPkrBfg29s/fbmnCOqZTKsRloDzCpUZfMGH6FuW32aCox2zczIPUdMqbHuc8iRz4huTjp9+tVPbQvY/mkv6PoP1D3XDf1T8LPpgmPkd192ZmDryfiPtjAXNNzEZebwU7GU+npzTL0muJ2iXTirB5giJIltAQTDFdOuvBEfnE3QTxI6Z6R/3J813+EV+a7H0twafdww1VvS5/8EzRUFw+UxR8IIqfvoE+uMR5S1CRfCUTXPyaKRH/9cEDu7DUw+Ip/smDyPxdri9sPfjBcZbjzfHtclXy0vM3nQEDbNbBIy6IHo1/ZeAr5x+F9yTfsSS4m3Zpgr7/Ui1n10vNgDBI/UQRa1fB4zy94kzOIer+VvrDzJUZvlP9Iv6W6q/VkYYnm2fU7rrO/1ZuONd2gQjvip0rlpdagV+t2LlvP8zvd4B/jHCBEzhGaso0Jd0nTZvjmhzVvifwQySvf4j/lDzk9PN5eP0X</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="3ad94f34-6a5c-418b-b8f8-a203cab10bc0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a41d2cef-51b0-46b7-b40c-1d6923e3263d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e0e1fe9a-79d7-42ce-8931-9ee2304fe307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="dc69f304-d0b1-4059-89ba-47e13860aae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="f64f1781-9c0e-4af0-98c4-96319bba32ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="1e9ae371-1bd0-4759-940c-81391e47aabd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="fc5935eb-e5d0-495a-bb33-6346b3b9fdb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="ffb7d87f-5213-4536-a1b4-773bf47f9502"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" id="7862a908-a45a-4b81-bc0e-801e8e24856e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8e7711f-eb52-4a17-984b-8a6a0236e395"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="fc0f6904-5506-463b-adf0-9309f4db6c7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="15098d07-3e28-4bd9-8ce6-eddc712c561b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="02239d7c-1ce6-4d58-9ae0-6470a8e1e472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="a1716223-f6c8-4dc3-856d-e8679a537744"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3af7e03a-0317-48f5-92bd-e35a465a120e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5d887a92-965a-45ab-ab45-7daaea74c225"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBUFHRgLjevIXDgCibDJv++nfQ6DE5yfnyflc6PT3dTy/0PPOMDc9lOwBjFMVO4Jdl8aXyT7PFcg2Th7WGVedqnNFu1Np0m6+xvGnVG3R7uzWYSlnGOEGyj2PDj18qLM3Ua3SzxvA6U+806E69+USz3KZSXqAIE9NE5YmulHPP9XHn4valkkR+JzCwgzu+4SHciWFnBpRxh2h2jBumyuvzFeXFYfS6i+OwQ1HwyUQQuS58goFHPVMfdJ5N3Jk5tm/ESYTefZr4pfJ+Nsuyp6z+FEQ2xdI0TdE8RXRM7Ni/Kq+l22Fkyr4VXNddww98BxquczYKUAqKd4FZBq4dRE68874xzVAMXZiuoRzWIMP5vyrUbwcXdD+09AFkhI0a3pEivBvTkIUi5ENUnmvyS+XXzyp4PatHho+tIPLwp/V/g4T8FLlBiMwavkV2Q/dzi1+k6/UZwY7sQzfBToomRZuEBkS4/BYhy8nHDibNZ+LypfzlHN86DMH/UpJn6hEngU19kRnRsRGO/596PdbqamVhuAl6bc4Ye7D3+oln7yJRsFdmQ+NWIuqGwcsFwqPyFdS91O/rz41676v3Q9aSsua+vTwziatnYX7O1S7XPMxTS287OQgHbhuej/l5U9dVaz3Ydkchv6H9pDoc5Nvxymc0zemP9y0eSNtSg6/i5bq614ataj5fRlqaCNXT0lw38154ipqWeaB8VU0MwVjM1UzdU6c8dLhwoEtWjH1/82ZQPSMVFG0pl05QYbdiHhyEQ+jUe8yEll5+x/QYQxHXCJ0uQRb/Vw2aF43YuC+6xaSwyOcZo1dFlrtVsdsFqGuDTBaALQvjM5gI9uG4Ozh9PqMFoM57QAQnRQOZaK/FhaqOpMxcLNzNQu71CD4uG4C1WCIbopQvxM1qSBvLTbhme/RmJgjmSgu29WFoDg7ZYAcniq5kE10+KXspn+gSvbzI7Jysz8peYab6vF5a7gVe0aRMzC4eRSnbTTZLLVzP+QyeJVUBXB8wc6m7Uwa6t2BgXdvBvTRWwOEiF3ZKd7FQckkHbyXBnixIbHq3twmhZ4Zbz909GB8Q47rZX5y2fTfZnKW90pX63dmxP5O3dVGVhkBbz7fLxcFY9tISHEzA9ubRaTjGKsjsTTsT1fVwFGzkXQonQJUEQQUkXTRQ5P4QBH0BKBxw8nN3LzSDrtnLqCGLS1Xe7TdXJ+e4wkafdg2m3WbW42Xz7dgUJb+6GSXb/U7ZrXrT6mhmpnM+5s9rnFbTpuEwMA8tdSUN4lFuDdRZafsm5is4qJr2kHLPfC9SWkMQnU87V7G1eNmc4tPWsaylsJpybstylboWWq4VnnBVD9RDRDcFVGep9SkdxSVgKwIA/f18L6iK0C6SasqZulYEA/SkOAHnPRuP2MVxOEhduK6DIB8tp/vDe2FMMZMEKlMl0lZSqS0CsyjCYDaXenswF2w7EmypJ6hQBOpaHmVrkq/5gCh/zmPvkkdbEoBU34AmPyjV5zQfT+MZx4GTL8z9Hr9TjvnSbHp064ik8WwScpmCJ5a/WQYHxXOieZTM5qPRZJxv9aR/2JNZZdGzUVrflKT0EAJnMtJ3BzEQjbdwvY7Dqg8jGMuhp8j5ebrB+7az9ehhtcEIb7QIW+zc22bzviFtRpE9Y0YDzX+rt/gSTqzTwKvu29myqs+aYcvs+pZ4OlGbaEEHIOjxWuNo5ix72M2zcTOzhuCwNdhJ7vLCiZdGGx1mmjpazrxqo9RIx2OPPusUNwmn2ayfcZKqVuumoA90HEbOOmnbeTT1TXZtxM10Qy+aTugeeDY56FxYX9geKdZbaoYt5a2kciu48exWCIeURqVAalljuX/ano1z6E3hdYB+ng534XV+UI+T5cPouZGOGelWBOPbsriAZLHcI7eCEf+dwBQSx6xZF9VOWLAgHCM/rrwWpwry0kkIxXHMDrkyrmux164zXFvoMQ2eEeotieZopkcDusXzLbYBbizniuITxG7gW07hq+Bx11vq7wCh18HIN1FUS4ME7hCu/MVika+y7Gvk+g18jPSA8MSWxDFCQxJbvNBmWbbREOgGgS5227TYZFhQKU+CeOpPI2DFKPrIEZsfOKKGoBM6qCCSxW2KyXWKY5KSo5Emscs8pcaTjxJCNaOC7XVYrt2gsOOFLioAU15gJi56CnfhJUEUvv6yNQPii1ST9H/kWfdy038b4ue9WzaIjukUCriIR0CkougLwsvegvk+aP4x6Jt5kJhOcaGT1MaRA69IPm797piiVe7tQqK6Qb5rfhZ8sEp9DujuyEwdeO/5+3OAsEnCN15vJTkaT8enJE2TSxFaBZeKiHmKoegmNUMwIYTopAcH5FN3E9SPuOgd9SfPd/lHfEm882cx+Z490jLly/IHD5EZwsVDRCYtn//0lfPBJclbjPL4K1nXJe+VAvFfnzSwAws9In4jP1kQmb/L9YWtBz8kzmKAOb5drArmefqmKWBAzDpkiAXRo/GvDHzl/KPwnuQ7lph00zaJ0fc75WI6vVQMCIPEj2WxchE8TswLzvgUos5vpT/MXLjfO5nP8bdkfqWMZ2R2eUblruv8b+Wac2kXiMgp7FywvFRy8i4lzn37YUK/A/x6SHPgb0P6YySvf4j/lDzk9PP38Pov</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" id="9d562b4c-2b21-4e4b-9dee-ea86ba8721ce" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b6c59ddd-f128-45cc-acc1-fcb9c7601c10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d2122245-f595-48c8-b54c-ea78d0db3f52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="7060fe95-13b3-41ca-a150-3f0edc3adc54"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="20e9cc33-a9bd-4521-aef3-430d62debf4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer" id="f04ef3e0-3f34-4fd7-b08e-576d088813e1"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2479ab41-1198-444b-88a0-f69cfd793c9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5db4b6fe-99bc-4dbd-b846-0fe097588a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziANGd0cUgoqKIzi93MCiGJRJikm//hbauu3e3fvuc1/ESrIyVw5krXrFuueyHYAximIn8Muy+Fb5D982aNjQ27V9q8nUOJ5u1PZGE9ZgnWk1aYZrtPZ8pSxjnCDZx7Hux28VlmbqNbpZY3iVYTsc36HZlwbd2lXKKxRhYpqovNCVcu65Pu5c3b5VksjvBDp2cMfXPYQ7MewsgTLuEM2OfsdUeX+9obw6jN7tOA47FAVfDASR68IXGHjUK/VJ59XAnaVj+XqcROjDp4HfKh97syx7yeovQWRRLE3TFM1TRMfAjvVP5b1034wM2TeD27qr+4HvQN11LnoBSkGxHRhl4FpB5MS294NphmLownQN5SR9DOf/U6F+Obii+0tLn0BGWK9hW2fuxhbIRBHyISprC/mt8s/fVfC2V410H5tB5OEv638HCfkpcoMQGTV8j+yO7u8tfpOu91cEO7IP3QQ7KZoUbRLqEOHyLEKmk48dTJrPwOVr+cs5vncYgv+mJK/UM04Cm/omM6JjIRz/P/V6rtXNykp3E/TuyUIGD9To4Kz6m0G+mqqebMHQTBfa2xXCs/IN1KPUH+uvjfroq49Nvom2vBb6zqSrVJdSHc0uDNI0rX5m3KQXKs4md7e0H3PrFhsf061Nj05NdcP1VtrQmgB5jf3LxN/3N6JrlpSumc+r9TNX5UO6MWvSeDWecOP2KbCs4WXsJXbT32/8wclh2E2uL0/Was7tq+yskWvnoRtjmZ1Jl53tO5RZUvdOmrZlLrT9qDU1jzjevv2K6TmGIq4ROl+DLP5vGjQv6rH+WHSLSWGSzzNG74osd6titwtQ1wKZLABLFsYXMBGs48k+On0+owUw13pABGdlATLR2oqr+XwkZcZq5e5Wcq8nKAsuG4CtWCIvRClfibvNkNbXu3DL9ujdUhCMzSLY14ehMThmAxtOFFXJJqp8Vg5SPlElen2VWTlZX5SDwkxVrV5aHwReWUiZmF09ilJmT3brRbjV+AxepLkCuD5gNKlrKwPVWzGwvrDhQRor4HiVC7bSXa2UXFLBrCRYkxWJTe32diH0jHDvufaT8QExrhr91Xnfd5PdRTooXanfXZ76S3lfF+fSECy22n69OurrXlqCgwnY3z06DUffBJm1a2fifDscBTvZTuEEzCVBmAOSLhoocn8Igr4AFA44+aV7EJpB1+hl1JDFpSrv9pubs3PaYL1PuzrTbjPb8bo5OzVFya/uRsn+YCv2pjetjpZGqvExf9nitJo2dYeBeWjON9IgHuXmYL4s7WdivoGDqmENKffC9yKlNQTR5Wy7irWI180pPu8d01wLmynntkxXqS9C0zXDM66qwfwY0U0B1Vlqe05HcQlYigBA/6AdhLkitIukGnI23yqCDnpSnIDLgY1H7Oo0HKQu3NZBkI/W08PxozCGmEkClc0l0lZSqS0CoyjCYKlJvQPQBMuKBEvqCXMogvlWHmVbki9tQJS/5rF3zaMlCUCq70CTH5TqGs3H03jJceDsC5rf423llK+Npke3TkgaLychlyl4Yvq7dXBUPCfSomSpjUaTcb5Xk/7xQGaVSS9HaX1XktJjCJzJSLWPYiDqs3C7jcOqDyMYy6GnyPllusOHtrP36GG1wQgzWoQtVvP2mdbXpd0ospbMaLDwZ/UWX8KJeR541UM7W1fVZTNsGV3fFM9nahet6AAEPX7ROBk5yx5tLRs3M3MIjnudneQuL5x5abRTYbaYj9ZLr9ooNdLx2KMvKsVNwmm27GecNCfzxBDUgYrDyNkmbSuPpr7BbvW4me7oVdMJ3SPPJkeVC+sryyPFmqVG2FJmpTm3gTvPaoVwSC2oFEgtcyz3z/uLfgm9KbwN0K/T4SG8zQ/qebJ8Gj130rEk3YpgfF8WB5AslnvkVNDjPxOYQuIYNfOq2gkLFoRj5MeV92JXQV46CaE4jtEhR8ZtLfbaLEcLosSKTbHLSxLN0UyPBnSD51tCu3FnOTcUXyB2A990Cl8Fj7udUn8GCL0ORr6BoloaJNBGuPIHi0W+yrK/IMdv4GOkBoQnggYjtQHgu5LQYKVGlxPaXIsWabrBsW0SS6U8CeKpP42AGaPoM0dsfOKICwSd0EEFkSxOU0yOUxyTlJz0NIld5iXVX3yUEKoZFWyvw3LtBoUdL3RRAZjyAiNx0Utoh9cEUfj2ZGs6xFdpkV2Irwf9jxF+fXdPBtExnEIBF+EIiBQU/cZ3253GPZafY24/x3w3DxLDKc5zktk4cuANyedXvxqm6JRHt1x/IL7Dfmh/FXyyTH0N6uHMSB34aPvHjYAQSkI53u9VOekvp5ckTZNrHVoFnYqIeYqh6Ca1RDAhnOisBkfkUw8T1F/R0QfqL54f8s/4ktj2lzH5pD3SNeXr8i/uIkuEi7uITLo+/9uLzieXJG8xyuPvZF2XXFkKxH+81cAOLPSIeEYeWRAZv8r1ja0nPyTOYoY5vlWsCvJ5/qExYEDMOmSOBdGz8e8MfOf8s/CR5AeWmHTTPonRz2/KxYB6q+gQBokfy2LlKngemlec8TlEnV9Kv5m50r8PPp/jH/n8Rhkvyfjy9MpD1/nfyjXn2i4QkV3YuWJ5q+Tkakqc+9bTkP4A+P2c7vJ/mtOfI3n/Tfy75CmnX7+H9/8C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="16c677b6-f520-424c-859c-233d39f17e8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f245ec71-a809-4a70-848c-36b8eb1bb550"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="92749247-f54a-4541-95a2-b53ad6c8ad1d"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="aa874b4b-0aa5-41ba-933b-be696ac3d33a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="aa640512-7782-42ad-b469-536a81c03732"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="b2aa4e66-efd9-4533-8e23-d5191b75b3e3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="844d6c80-e576-4d3d-95e2-868bce023ff2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D/User/urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx1XIFxSIChKFspsubFugFerLletMgtvEhtgJtL/+2qFJgdLe7pWQkCfjmTMzx8c+5yiJHa/HOaSCMKr5g47+z9lZGLooDA3XeQSj7gZ1o9VsIsOFJkZwhpBjNXXN5zwDn3KBqOjojmXXDath2O7McT237tUbtXaj9aBr95ByGVq61Cxd2yQx5V6RtqNnKfUY4oR7FCXAPYG9aW888qSnh0pMevd8i7JImHYXQiw908S1ADDEMa5hlpjn5p7PecC9KYkoElkKbzkD3tHf9q7X69rarbE0Mh3LskyrbUqfgJPoVO+elJsh8GnItus+oowSjGLyihSoMYgFC7ReHLGUiEXySWjbtC0V2oANNrBdp6e6+Z6gQPfNSHsgU44MvkB2GWwCIaRAMWh3E7+jn35vgtu9sxRRHrI04Qfrv4MENIeYLSEweFlZie77EY+0q3sO2PMpjjNOcvijaLJEGLh2k0JINiPCJfkCrhXj1zZc/kjJMsB/M5ZzcxerhG4e6c6ARMDF/5nZ7ry2Ue5RnEH3dRXb/vRyNH95uMqffywes97gNlidmW7UKSDsOm9BVeN+Wx+SteLW26anK9K6H65+jqbTKI5Web8ZPj/wpn/xQ7zM03y5GS7W0eqnef1LceP5tsHaVxd386zdX/tmurlx46dbszectJJG6+Rl9Ot66q9myWA2iFrQQv7vcD5e9mIzYmt3Ec839tSi+etwkSR9F1ECD+un68vxvP647o8fB2cjErLrFN0sMn6yursaJS77Obmd39+P82T4HHXea9qtYd9YSsI0e3wCLMqlooc/0IZyXkh8LS/KQgIjLFy9pdIoLoAKvat2KWnxMilAJPDkMLfrYbthObbTs6Wu1Z1249KqW/bQ6lnNdttq9FulBm1RHEDsMxoSlUup7JY/XwPEiceBBpAaOcvwArj+RcQBEkjz6UQeDkY5zJhUcRu/Os+toMF49EoSxliLMng6Cze69oeJa3qd9kIB6Y5012eWsyfdE8BkSUDpuyI4lwznQvZihfJMxHYtRzUKmbwBUiXCnlNvNUxOkmUMCqmZsCCLobZcLIvOmHz77xgI88I6uZwVB+/Tug6/lS2QPgFRDlzVcgFyjHDkDnLLQj4vuLFbcBm+lwVEnS/ZT5ESvEWy/+mdJoofFUdkRSXkyvPQsBfVPCyoShTkBFdEr25oKfDy+HfLcaxQbVXL8jwrBtBU0pbK8KZUONucAs6kPr3M2DNQswphfut6qFAfZK7s+/gysaBTgQQkki5asfzG22AKXL0NfMnzzXcfHnspZd8EbMQxWz+WTwiF+MtXBvaw8pPmG/m3ZmnwPq4jsXbyyDrlg0AQGqmVughePiEFZjIskcrF0t3gxwIcS75vrJpcYRGSTY+ZgM+/aEqSOjrCmGVU+AO9MOzKZIFTvCzBe3f6EKaQ4re7dcM/vVvn49FUClaC9MqX/LezQQq6YNDVFV5g6egb+VSUyWm0I8tvAD8qc9up2+2B229Y+8rsDqoG7lXS/WD+aNnp6eF56P4L</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>F950212A19584295E0401F0A079905C8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92749247-f54a-4541-95a2-b53ad6c8ad1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true" id="69fd4170-842f-452d-b5ba-2a3dcb222763"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="50376d6d-121f-49b7-a38e-5003f16c248f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6f62f720-8990-433e-b87f-e5bfb4b7fa27" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="53731713-82f6-4689-b18d-e2d614c0f00a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="e1f50a3a-0e4f-4409-85f8-0e805d506f11"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="9d9dbe4a-7055-4988-8e66-537efed92ca4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6ac2bd45-adeb-4c9a-8295-932d1e7e4a30">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73V1h+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrV2iD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>Child_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Child_User_Create_API</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="7d85ebf5-2378-47de-9c73-bcc3be05c78c" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d4371971-21ff-4a90-a0e0-37d68d88fa6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1de7ab16-bf7b-4512-ae11-1599f01163bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4285855e-3060-462c-b83f-1d458ec03956"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC" id="cbeadbfd-394a-4b1c-9e9a-4c96b103c67e"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bf51df31-427c-436d-aab8-95c2f091660b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9df4ad07-5eae-44d6-bbbf-fa0607afb8ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxjOo2Gzucd0RxSLNCoqiOvLCSxKQFmUAkF//S1wtLWne86c+9BhV5KZ9WXmV1lZP7Hpe2wXYIyi2A2DsiK+Vv5pNqFFWyxd27Ibq1Y30bbWaba4GsNxrdamSbe2zU2lrGCcICXAsRnErxWWZrga3ajRHYOud+tct954aTCddaU8RxEmronKC10pZ74X4G6x7WsliYJuaGIXdwPTR7gbw+4UqMMu0eyaN0yVt59XlMWG0ZsTx4cuRcEXC0HkefAFhj71k3rS+Wnh7tS1AzNOIvRrTwu/Vn7Zpmn6knIvYWRTLE3TFN2hiI6FXftH5a10M0aWEmzD61owgzBwoem5FzMHpaLYCa0y8OwwcmPH/8Y1QzF07rqGMliDTD34UaE+NijQ/aWnJ5ARNmvYMZmbMx1tUYQCiMozXXmt/Pi7Cl5tjcgM8DaMfPxp/d8goeCEvPCArBq+RXZD9/cev0jX208Eu0oAvQS7JzTKaXIwIcLlSYS2bjZ0MSGfhctF+csZvjEMwf9Skp/UI04Cm/oiM6JrIxz/P/V6rNXVy9z0EvQmWzvFn2yGBhOttYx6X66rBu11BCiFrwWER+UrqHupf60/E/XOq19G+xnsUdVLMuZ6ekpN14O9M9FAf9hsj0M8mZ4YD67aR6AKy4HV8O3jfBcyozZoR3rUV7lRc6gtk1Bp6aw98UtH2bEW+hG5lqDu7SMftweXfmZG65geuoiTW1bnwDQ3K5n32WS5wLjVwkrHXzPNkQa5o4J3avss6Lu2s4alZDXEVHVYx02r2qr3L4wRvn7E9BhDHtcAnYsg8/+XDbojmrF5Xwh5p9iS4xmjN1VRxOQiCOA8tUGq8MAmfzsw4u390dm7cieleaBpPSAKvLeThirYy4CZSbyjCvO5mgkX0Oft0ZwYGiXgrXlVl1IxXYlzTXuXUsew5Pl5I3vJ+iKNVIALY8FRJV2ai7ohqSoIr7JMFTdytlOnaqpoK7FEHIhSdrhYcidGcuZCVmmo0wa7mjaS9XJO5L3z0B+dNobkqYIqC9OjPFU2nKhJfaCvFpDtJcT2MvQPYWk14x+M+ge0A6iX0mRPcFGNfaoaM3Yk6mYhM55lqiL3VQ2nglZEJZektD+fXT5yIfCqYPlSJhlgcs0FNITeiF4v+9hcNAJVB6loF8YDKbXGNyCqRqcl4ZqroZTqkj4b9VRdSSVQyEQp9fCGHTkb2TlBTsv6Btg9FkbQpEUvIN8D/QTPjWPJlHtg488ZyOkOdBuuuQxTe91ORW3VH4RrhbgZAU3ieQ0QQDTIQyP558GQnzfGB7fDumi47YU+cqKSyoSD/emS0W2XG9uT0aIhbvetiexOONNyKMWD7I7bA0VB1oBxNNPSV5QuBu6lOR7MlsiNVpd41NCYpttulPRFMluKodey3per2aCaraBmjCfT2WJyybLRcde+ePH7mH+Ppn1VtMcjhCYYVina7PFGW2wIq/cd4dNWp1GjBGyVB0De2bbkEgLz77srCd91VSLkJcczlYWFIE+BLFclhRc1bdtzmAmU58mMGamKZHkkTefVUvdKa4EXSaVoc7E+rNgevTaAVTjT6lLP1maNan+J1trIM+YxSA/zbcAwtHzQ3rdqakM1Z4ClpFOenCK+lChgZo4PfTobzJs0c9Qsrz/tgBmXTdl9Nnbs9Xlvr/ekKKuHo7MygDc3HjimEIotSpoh6SpoX89bpiozTvegnx02PsxEg9SsMA4NXtJ7Gj3LRBEMrjJsADbDq4u0UwWpsC+BTDUJLU6bpYNXwcgdG1JCSJs80GW3Yel/5VhOsdIzx44C0MBnjklXjklge6wqbZHBjaZwwIvU5mXpqLXmw37nQGvL4b7EV3uUHbtefRy0U2NQXTDntOXstMWio4iOUA22K4fbxDxtXqCG+vuW7Op7MWjWvbM6VLXGzKW8M71DxxQPSyOFCSQuvvSoTpRUeX/t+pcLV2dn/mSanJSZOcDM2dkcF510N3lvUlQknxuX1vqk9ZYhXF3vkc9N8i68tlHqscE+deDb7DVNNjsE49syv4cVsdwjl6MZ/3mOyyWuVdsWqt1DPgziGAVx5S23yme4bkImPdfqkpvzuhaFOtvm221W4Jge3xYkuk4zPRrQrU6nKTa427B3RfEJohAGWzffKx9nr5f1nwFCv4tRYKGodgoT6CBc+YPHPF9lJdDJFBIGGJErq/JPi+FEscHyHCtxLbrdoJudVhO06Z5IxHQTVMqjMB4H4whsYxQ9j8qtp1FZR9A9uCifp/OhApOpAsckJUfzlMQe83IyXwKUkIk7yofeLltvNyjs+gcP5YApP7QSD70cnEORIApff9maCXEhbTVpuph2vo3v87dbKoiO5eYKOA+GR6Sc6Iuhn7tF8m3EDP0Y8c09SCw3H2pIXuPIhVckz58+6JLz5M6VPKQb5rvqZ8GTW+pzRPedrJML74y/v4nISE2GrrdbQY7my/ElOZ2SogStfKCMiHuKoegmNUUwIVPh2Qj3KKDuLqi/GsjvqD/tfJc/40tiJ5jG5DT7hDDlYvkXr7EpwvlrTCGEz/72qfe0JclbjLL4K5ngkUdbjviP7zrYhbkeEU/ITxpG1ke5vvD1sA+JM29fbmDnq3z8Pn/DChgSty5pYWH06PwrB19t/iy8J/mOJSZs2iQx+v5LOe9NrxUTwjAJYkWsFILHflngjM8H1P1Q+s1NMQD/etFk+NsXzVIdTknn8s3KXdf9d+WaW9AFImKF3QLLayUjj3OyeWA/9OdfAL9u0Sz3pxb9HMnbb+LfJQ85/Xwe3v4H</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1ed1186f-c5dd-457e-8f01-8a0cc98d07bb"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="e55544f2-194d-400f-9b20-0f2f08c38bf1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API" id="ff916405-df6f-46b9-a011-a6689d00989e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="ed28c5b3-0007-40cc-849a-38beaea556d6"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="26183098-d0ae-4f26-b4bb-e416676cf6a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8f0ba87-2757-4ec7-ac6d-427210632ea1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="23d09377-9e3c-47e0-92cd-8d7e2ed8d6fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f9a5121-1ba4-4ce7-9098-b2a7278fb180"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="21cf2586-d1ed-4fdc-832a-472a816d6528"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
			
			
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="eaa96ed5-3cca-4156-8a09-c54bea8b60f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="10fe7e27-0ca1-4b5b-900d-075f1886f604"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3764bed9-292d-4b3e-8638-5dd84e1225de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3bb99271-32ca-4459-9ddc-4ca05ee135c6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2012/12/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="db2d7a86-6720-4405-a764-6b8d396ae082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333V1jux5ThoqhYO6kaLhKMqFy8vnyFw4gogjIgyK8/A26NZif77PM9pMw0PT2ruxfNmp/Y3vtsF2CMotgLg6oqvdT+10A0z3HtRp1r20y9ybf5+qrRseuw1aLXbMu2uRaqVVWME6QGOLaD+KXG0kyjTjfqDG/RXJdpdDn6mW63lrXqFEWYhCYuz3Stmu39AHfLY19qSRR0Qxt7uBvYe4S7MeyaQBt0iWfXvmKqvf68oCwPjF43cXzoUhR8dhBEvg+fYbinflIPPj8d3DU9N7DjJEK/znTwS+3X3jRNn9PGcxi5FEvTNEXzFPFxsOf+qL1WrpuRowbr8LIW7SAMPGj7Xm4XoDQUb0KnCnw3jLx4s/8mNEMxdBG6jjJYh0wz+FGjPg4o0f1lpAeQEbbreGMz12AGWqMIBRBVJ4b6Uvvxdx287LUiO8DrMNrjT+v/BgkFJ+SHB+TU8TWzK7q/j/hFuV5/IthVA+gn2DuhYUGTgw0Rro4jtPaygYcJ+RxcLdtfzfCVYQj+l5b8pO5xEtjUF5WRPBfh+P/p132vLlGmtp+gV9sMBHfXbPPnBuwvcl7XLKfZMuwx33wpIdw7X0DdWv1r/ZmoN1792rSd77DPOD3JT89j+riF4WIXQR3kST4Yj9KhstrzDS7ghe0CurTpjxWVbaKDcE4Yhl/uUqHVlyQ3cHuC9F5Zb8eJZybaiUmpPdSDzrH/JMFjzO5yzo4P5lv/CZ3W6ZA/SUKeqcF+8AYGa6+PBAuu7SdHbqkKd4zdviKCyiydthlT5xNjn6s9Lj5R+OUjp/scirze0blMsvh/ztG8ZMf2bSEWk2JNXs8YvWqqKiW5KIKz6YJUFYBL/rZgSAp93Ow8hU9pAeh6D0ii4G/lgQZ2CmAmsrDRxOlUy8Qc9AV3OCUbrQrwl4JmyKmULqSprr/J6cZylOl5pfjJMpeHGsDlZnGjyYY8lQxL1jQQXmyZJq2UbKuZWqrqC6lCAkhydsgdhY+RknmQVTnN5NiFySXL+ZTYe+fBfnhaWbKviZoimkfFVFcNSZf7wFjMINtLyN58sD+ElcVEuNvUP6AtQL2UJmeCXLN2qWZN2KFk2KXNerRpqtLXdJyKepmVUpHT/nSSf9RCFDTR2cuZbIHxpRbQEntDejnvY3vGBZoBUsktN7/LqTO6AtF0Oq2Il1oN5NSQjcmwpxlqKoPSJsmpj1fscLNSNifY0LO+Bbb3jRF1edYLyPPAOMEzd6zYSg+s9lMGNowN9DjPnoepu+ykkr7ov4dLlYQZAl0WBB0QQDQoUiP1F8BAmHKjg8ezHhqse+EebaKKxoTvu1Oe0R2vMXLHwxknrXftseKNG7azoVQfstvGDqgqct6ZjW47xoIypMDLW6P3yRx50SKPh5zOtLwOVzFmyWQuhX7beZsvJu9P2QLq1mhsTmbjPMuGx20n9+O3kfAWmX1NckdDhMYYPlG03ROsjsSJi7ct4dPaoBFXAa4mAKBsXVf2CIGFt+2FhG+GJhPyAk1MFXEmKiZQlCdZFSRdX/c2zBgq02TCDDVVdnxSpvNibviVpShIpFO0PVseFmyPXlrAKYPpTbnn6hPuqT9HS33oW9MYpIfpOmAYWjnob2stdaFWMMBRU1Mgb5FQSVQwsUeHPp29T1s0c9Qdv2/yYNLITHaXjTbu8rxzyZxwl4u7V2dhAX9q3XFMJRSbVXRLNjTQubxvmaZOGoYP99lhtYeZZJGelZtDS5CNnk5PMkkC7xcbtgCb4UUubzVRLvdXQKbZhBan1XyDF8HQG1lyQkib3NFlu2Lpf+VYQbHKI8eOItDBZ47JF47JYH18UjsSg7mWeMCz1BUU+ai3p4M+f6D1+WBXEZ56lBt7fnMUdFLr/WnGnNP2ZqvPZrwqbcSnYL3YNFaxQNs51FF/11Y8YycFraZ/1gaazk08yj/TW3RM8aAyVJlAbsR5j+Kj5EnYL719njea7GQ/NpOTOrHfMXPerI4zPt2O31oUFSlnLm8vT3pvHsLF5TvyeUjejJcxSt0P2IcJfNVeZrLaIhhfl8V3WJWqPfJxtOM/67jC4jn1denaPRRiEMcoiGuvxa5Cw3UTovQ8p0u+nJe11GkybLvR4UC7DQS+J9NNmunRgG7zfLvNS1exd0HxCaIYBmuvOKuQs5eP9Z8Bwn0Xo8BBUf0UJnCDcO0PEYt6VdXAICokDDCyQiKXW1yD7Ygdpg1anAQIYNDmANdpsoIosqDH1KrDMB4FowisYxQ9SuXOg1Q2EPQOHir0dCEqMFEVOCYlOdqnJPaZ55P9HKCEKO6oEL1dttnhKOztDz4qAFP70El89HzYHMoCUfjyy9ZtiEtru0XTpdr5Nr/Pz66lID6OVzjgIhkBkXaiL0R/85rJtxkzzH3G1/AgcbxC1JC6xpEHL0geH33QpeDJjStFSlfMN9fPhoew1OeMbic5Jw/eGH+7ExFJTUTX67UhR/v5+JycTknZgnYhKCMSnmIoukWZCCZEFZ6tcIcC6haC+itBfkP96eSb/RFfEm8CMyZv854Qplou/+I2ZiJc3MZUQvjsb696D0eSusUoi7+yiT65tBWI/3ivg11Y+BHzmPykYeR8tOuLWHfnkDyL8eUFbrEq5Pf5G1bAkIT1yAgLo/vgXwX46vBH463INywxYdMqidH3T6rFbHqp2RCGSRCrUq003M/LEmd8PqDuh9NvYUoB/OtGk+FvbzRzbWCSybW3azdf79+d615JF0ju8sS/xPJSy8jlnBweuHfz+RfA30Z0gxNotsXToNW+jWiO5zmW4W8FfMjk9Tfz75a7mn5+H17/AQ==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="16f91eb6-d036-4044-a104-3416700f4139" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ecbac18-bd7a-4df2-b9d2-c9fb4bc9817c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="dc3fbb0f-7f56-43ad-b37a-35c38bae3724"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="98cfc05d-90a4-4012-b47d-f1f449632e22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="fb4ef185-64fb-4374-8300-43409b18034e"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>raju.ganji@compugain.com</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1990-07-01</DateOfBirth>
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b23cb4e2-2bd7-421f-91f3-9470fd51d912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="cd84f76e-b48f-43aa-8526-34731eaf10da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="c3f3c863-6773-4ad7-883e-f4966c2bcb43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="853b66b1-2855-4d93-8f16-0c0514cd932e"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6a0df690-63bf-4b9c-ae59-c6c2ff9420bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete2" id="afcc2bf8-a03d-442a-bb54-83b79c3a8deb"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicy_DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete2" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete" id="1ada6391-4467-46ac-b5a9-f8d47363030a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="AccountPolicyDELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="17df3acf-9f74-4983-9c2c-7ca80c9272ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="3d442766-d852-4dda-8d00-1ca77ae70830">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwumAlqQIBRcUVN27ewmFAlE2G1V//Dho9SU5yvrzflU5PT/fTCz3PPCPDc+kujxCMYifwq4r4UvvHoKy9CcG+0TQBaLCsBRv7NttqdGALdEwDAthhalUFoQQqPooNP36p0STFNEiuQVEa2eo2mW6Te2pzjF6rrmGEsGms8kTWqrnn+qh7dftSSyK/GxjIQV3f8CDqxqC75NVxF2t2jTum2uvzDeXVYfR6iOOwSxDgCUOErgueQOARz8QHnWcTdZeO7RtxEsE3nyZ6qb2dzbLsKWOegsgmaJIkCZIjsI6JHPtX7bVyPwxNxbeC27pn+IHvAMN1LkYJSoXxITCrvGsHkRMfvG9MUwRFlqYbMAcNQLH+rxrx28EV3Q8tfQAZIaOBDgZ1N7aAFoygD2B1tVBear9+VsHbWS0yfGQFkYc+rf8bJOin0A1CaDbQPbI7up9b/CJdr88QdBUfuAlyUjgp2yQ0AETVWQQtJx87CDefiarX8ldzdO8wCP5LSZ6J9zgxbOKLzIiODVH8/9Trfa1uVtaGm8DXqekHKGkfizgNqPF6z9X3vKzavpWfXq4Q3ivfQD1K/bb+3KiPvno7BNZHitWms71eX+68MI20Y1CMW/GMiPXD+tQppsLFzTfaTs9D5rjT2dYYHXpyT2H7WfNopfFE7Aj0eLSxNLbSPPUnyW7qDDpN3XAhKcoztXCbCpCbEVswCtPMT6K8BmhEZGZSH+lpwLnNgOrslYCONuOF5F2SYt1eC/KqMqGzrT1hhgtCO7Oqv2VN8uV3TO9jKOMaweIaZPl/2yQ50YiNx6JXTgoLf54xfFUVpVcXez0e9mw+UwTeVoTxhZ8I9ul8ODl9LiMFfr6SeZEv1AWfifZOXM/nIykz12tXXyuyLKgLNhvwO7GCN0QpX4v6dkgaGz3c0TKpLwXB3C6CPTMMzcEpGxzARNXUbKIphXqU8okmkZurzM7x+qIeVWqqrZjK5ihw6kLKxOzqUZSyw0TfLMLdisvARZqrPNvnqZXUO6gDzVtTgFkcwFEaq/zpKhcOam+9VnNJ42cVwZ6scWxaT9ZD4Jnh3nMP74wPsHHN7K+Lfd9N9It0VHtSv7c895fKnhHn0pBf7Fb7zfpkbOS0AgYTfn/36DQdYxtktt7JxPluOAp05ZCCCT+XBGHO43SRvKr0h3zQF3iV5Z380jsKraBnyhkxpFGlzrn91rZwzltk9EnXoDodajfetGbnlij5dX2U7I8H9bCVp/XR0kxXXMxddiitpy3DoUAeWvOtNIhHuTWYLyv7mZhvwaBu2kPCvXBypLaHfHQpDq5qL+JNa4qKvWNZG2E7Zd225arMIrRcKyxQXQvmp4hsCZChiV2RjuIKb6sCz/ePq6MwV4VOmVRTyeY7VTB4WYoT/nKk4xG9Pg8HqQt2DB/ko830eHorjClmkkBkcwm3lVTpiLxZFmGwXEnykV8Jth0JtiQLcyDy850yynY4X6sBVv6cR/maR1sSeInR+RY3qDArkoun8ZJl+cIXVr7MHdRzvjFbHtk+Q2m8nIRspqKJ5eub4KR6TrSKkuVqNJqM872W9E9HPKsscjlKGb0ipaeQdyYj7XASA9GYhbtdHNZ9EIFYCT1VyS9THR07zt4jh/UmJcxIEbTplbfPVn1D0keRvaRGg4U/Y9pcBSVWMfDqx062qWvLVtg2e74lFgWhR2sy4AOZWzTPZk7Tp8MqG7cya8if9gY9yV1OKDhppGsgW8xHm6VXb1aa6XjskReNYCfhNFv2M1aaz+uMKWgDDYWRs0s6dh5NfZPeGXEr1cl1ywndE0cnJ40NmbXt4WLNUjNsq7PKnN0C3bPbIRgSCyLlpbY1VvrF/mJcQm8KbgP083R4CG/zg3g/WT6MnjvpWOJuhSC+L8sLSBGrMr4VjPjvBKaUOGbDuqp2w5IFoRj6ce21PFWSl26CKY5jdvGVcVtLLapNSpLcYiSalmlSIlmSkkmebHIcKzHcneXcUHyC2At8yyl9lTzudkv9HSDwugj6JowaaZCAA0S1v1gs81VV/AW+fgMfQS3APFGUqU6z3RFbFCtSJNOUmk2J69C8JJJNkWnRteokiKf+NOKtGEYfOSL3gSMuIHBCB5ZEsrxNEb5OUYxTcjbSJHapp9R48mGCqWZUsr0uzXaaBHK80IUlYMILzMSFT+EhvCaIQLdfumEAdJUuJO0fZdm73vTfhvh5754NrGM6pQIq4xEgrij8gvCy92C+DZqi3wd9N88nplNe6Di1ceSAG5KPW787pmyVR7vgqO6QH5qfBR+sEp8DejgyUwc8ev7xHMBsEvON13tJzsbT+SlJ0+RahHbJpSJsnqAIsk0sIUgwISq04AR94mGC+BEXfaD+5Pkh/4gviQ/+Msbfs4dbpnpd/uAhsoSofIgouOXzn75yPrjEeYthHn8l67n4vVIi/uuTBnRBqYfFM/yTBZH5u1xf2HrnB8dZDjDHt8tVyTyLb5oCBNisg4dYEL03/pWBr5x/FD6S/MAS427aJzH8fqdaTqeXmgFAkPixItaugvcT84ozLkLY/a30h5kr93sj8zn6lsxv1fESzy7PqD10nf+t3HCu7QIgPoWcK5aXWo7fpdi5b7+b0G8Avx7SPfFvQ/pjJK9/iP+UvMvp5+/h9V8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00011_US_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Get_GeoProfile</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>765</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
        <Reason Language="en">The policy was not found.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39/Policy/urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="9eefa1a9-efcc-493d-a73f-76683cebfde6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6512c4b0-42ef-4467-b104-ffa33eace57b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		certPath = testProject.getPropertyValue("certsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		certPath = testProject.getPropertyValue("certsPath_Linux");
	}

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
//String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="e67f8294-fae8-473e-af1e-f2345ab28bc8"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>UVTCPrimaryEmail_PostRequest</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="e2c4e4ac-425a-4711-bf15-1e0925e0b8a1"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="bf86a2d2-4144-4811-a43f-1013547ebc99"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="4380f443-dbba-469e-a609-36e3fa51657a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="789968d3-8176-4b31-8f47-431e3011758b"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="80d70818-b5a8-4794-8ce0-8d82f461f03e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API" id="476e4efc-f319-4609-aa59-39cb705eb97a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge" id="5112a73a-602e-4296-8f8b-3bf52b94d139"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8b0dbffb-cde9-43ff-b2ab-4d8ab9a34c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1d6adba7-5667-4993-a3d5-c0da8990549f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8uwuWElqRoEFRU3cOPmLRyGRdlkQNBf/w4aPUlOcr6835VOT0/30ws9zzxjw/fYDsAYxYkbBmVZfKn80zR52uI4prbjjXat3uKMWrvO1GscbEKWqUOaa9CVsoxxiuQAJ0aQvFRYmuFqdLPG8Brd6nBch6k/MTyjV8orFGNimqg8kVO57wW4c3X7UknjoBMa2MWdwPAR7iSwowJl3CGaHeOOqfL6fEN5dRi/OkkSdSgKPpkIIs+DTzD0qWfqg86ziTuqawdGksbozaeJXypvZ7Mse8q4pzC2KZamaYrmKaJjYtf+VXkt3Q8jUw6s8LbuGkEYuNDw3ItRgFJQ4oRmGXh2GLuJ439jmqEYujBdQzmsQaYe/KpQvx1c0f3Q0geQMTZq2DGYu7EFslCMAojKy4X8Uvn1swrezmqxEWArjH38af3fIKHghLwwQmYN3yO7o/u5xS/S9fqMYEcOoJdi94QmRZtEBkS4PIuR5eZjF5PmM3H5Wv5yju8dhuB/Kckz9R4ngU19kRnRtRFO/p96va/VzcrK8FL0enaCfr81lePJOdHTlF0sj8amsRifMHi5QnivfAP1KPXb+nOjPvrq7VC0GjI6rM9ZCTsLlV16Q6clyJm/dy6UfzY1MXNlzeSkw7CvGkm0STWKEqeZprfj4Xrh2pvNyZ6sPcqUp7MS3ZIOl8CXdtXqaioOR64UNIbe1K5uq3LspOcmSgMutvoNDfGj8cAK3BaeJBultdHOvfZRrdaXE7Mpy3SoiyViq79pu9NVtT1O5BmdNw8vv2N6H0MR1widr0EW/zcNmheNxHgsusWksMjnmaBXRZa7VbHbBahrg0wWgC0L4wuYCPbh6BzcPp/RApgve0AEZ2UBMtHeiqv5fCRl5mrl6Su51xOURT0bgK1YIhuilK9EfTOkjbUebdkerauCYG4W4Y4bRubgkA0cOFE0JZto8lnZS/lEk+j1VWbnZH1R9goz1ZZcab0XeGUhZWJ29ShKmTPR14tou+QzeJHmCqj3AbOUuo4y0PwVA7mFA/fSWAGHq1xwlO5qpeSSBmYlwZ6sSGxat6dH0Dejne8574wPiHHN7K/Ou76X6hdpr3Slflc99lV5x4lzaQgW2+VuvToY696pBAcTsLt7dBuusQkzW29n4nw7HIW67JzgBMwlQZgDki4aKHJ/CMK+AJQ6cPNLdy80w67Zy6ghi0tV3us3N2f3uMFGn/YMpt1mtuN1c3ZsilJQ1Ufpbu8ozqY3rY5U87TkE/6yxafqqWm4DMwja76RBskotwZztbSbifkGDqqmPaS8C9+LldYQxJez4yn2Ilk3p/i8cy1rLWymda9leQq3iCzPis64qoXzQ0w3BcSx1PZ8GiUlYCsCAP39ci/MFaFdJNWUs/lWEQzQk5IUXPZsMmJXx+Hg5MEtB8J8tJ7uD2+FMcVMEqhsLpG2kkptEZhFEQbqUurtwVKw7ViwpZ4whyKYb+VRtiX5Wg6I8uc89q55tCUBSJwOmvygxC1pPpkmar0OzoGwDHq8oxzztdn06dYRSWN1EtUzBU+sQF+HB8V342WcqsvRaDLOd1raP+zJrLJodXTi9JJ0OkTAnYw05yCGojGLttskqgYwhokc+YqcX6Y63rfdnU8Pqw1GmNEibLFLf5ct+4akj2JbZUaDRTDjWnwJp9Z54Ff37Wxd1dRm1DK7gSWez5Qer+gQhD1+0TiaOcsenGU2bmbWEBx2BjvJPV4489JI12C2mI/Wql9tlBqn8dinLxpVn0TTTO1ndWk+r3KmoA00HMXuNm3beTwNTHZrJM2TTq+abuQdeDY9aPWIW9k+KdbsZEYtZVaa1zdQ9+1WBIfUgjoBqWWN5f55dzEukT+FtwH6eTo8hLf5Qb2fLB9Gz510qKRbEUzuy+ICksVyj9wKRvJ3AlNIXLNmXVU7UcGCcIKCpPJanCrISyclFMc1O+TKuK3FXksUW2xbbLNtiamLEl2nmR4N6AbPt8RG985ybig+QeyGgeUWvgoed7ul/g4Q+h2MAhPFtVOYQgfhyl8sFvkqy8GCXL9hgJEWEp7ICSzL0IDpNntsj23U2zxNSz2elqQG3aIZUClPwmQaTGNgJSj+wBEZ+gNHXCDoRi4qiGRxm2JyneKEpORonNLEY55OxlOAUkI144Ltddh6u0Fh1488VACm/NBMPfQUOdE1QRS+/bI1A+KrdCFp/8hq93rTfxvi5717NoiO6RYKuIhHQKSi6AvCS9+D+T5o7n3Qd/MgNd3iQiepTWIX3pB83PrdMUWrPNqFRHWH/ND8LPhglfoc0MOReXLho+cfzwHCJgnfeL2X5Gg8HZ/S0ym9FqFVcKmYmKcYim5SKoIpIURnLTyggHqYoH7ERR+oP3l+yD/iSxMnUBPyPfukZcrX5Q8eIirCxUNEJi2f//SV88ElyVuC8uQrWdcj75UC8V+fNLADCz0inpGfLIzN3+X6wtY7PyTOYoC5gV2sCuZ5/qYpYEjMumSIhfF7418Z+Mr5R+EjyQ8sCemmXZqg73fKxXR6qRgQhmmQyGLlKng/Ma84k3OEOr+V/jBz5X5vZD7H35L5jTJWyezyjcpD1/3fyjX32i4QkVPYvWJ5qeTkXUqcB/a7Cf0G8Oshzfx1SH+M5PUP8Z+Sdzn9/D28/gs=</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8sAggtWkio2FRWN4MrNWzgMi7LJsOmvfweNHpOTnC/vd6XT09P99ELPM8/I8L1mj0MIxokbBlVZfKn9s6ObVKezazVIyFINhmyDRrfFMA2GYRlmZ+1Yq8XWqjJCKZQDlBhB8lJrkhTdINsNil2QnR5N95jmE9Ol9Vp1BWOETWOVJ7JWLXwvQL2L25daGge90EAu6gWGD1EvAT2NUyY9rNkzbphqr89XlBeH8auTJFGPIMCTCQH0PPAEQp94Jj7oPJuop7l2YCRpDN99muil9n42z/OnnH4KY5tokiRJkCyBdUzk2r9qr5XbYWjKgRVe14IRhIELDM89GyUoBSZOaFY5zw5jN3H8b0xTBEWWphuwAA1AMcGvGvHbwQXdDy19ABkjo4Ecg7oZU6EFYxgAWF2q8kvt188qeD27iI0AWWHso0/r/wYJBhn0wgiaDXSL7Ibu5xa/SNfrMwQ9OQBeitwMTss2iQwAUfUthpZbTFyEm89E1Uv5qwW6dRgE/6Ukz8QjTgyb+CIzomtDlPw/9Xqs1dXKyvBS+EquYqe+ynZTYspNDGE8L4w1suP8uLdfLhAela+g7qV+X39u1HtfvR9S+fNYP+/71hkO9vT2kOh+2NlClW4XzHQy49k34yREwmmmuXKsJ/N2fGzyszFxXLfDeVPlVWuxnSYsE9sgqbiSeETUUY9zyG6GEU2Qe6E/G0yCtXtaa3Hbm4yccHfWgLskO0OVifaplq11lZkBKtjb0flEtDyTbCNnZFROZ1/S9CSjQZ3huakyy5cvv2N6jKGMawxPlyDL/5sWyYpGYtwXQjkpLPx5JvBVkWWhLgoCBwWby2Wes2V+cuamvH04Ogd3wOYkz82XfU7kTorK5aK9FVfz+VjKzdXK01dyv88rKpMPua1YwRuiVKxEfTMijbUebZt9Utd43tyo4Y4eRebwkA8dMFUWSj5dyCdlLxXThUSuLzK7wOuzsleo2WJJV9Z7nlVUKRfzi0dRyp2pvlaj7ZLNwVmaKxwz4KilJDjKcOGvKECrDthLE4U7XOS8owirlVJIC+6twtvTFY5tIfT1CPhmtPM958H4EBtfmIPVaTfwUv0s7RVBGgjacaDJO1qcSyNO3S5369XBWPezChhOud3No9tyjU2Y23o3F+fb0TjUZScDU24u8fycw+kiOUUejLhwwHMKw7nFWdjz7VAw+zkxaqJKnfUG7c3JPW6QMSA9g+p2qe1k3X47tkUpqOvjdLd3FGfTn9XHmpkt2YQ9b1FWz9qGS4EisuYbaZiMC2s41yq7N7HYgGHdtEeEd2b7sdIZcfH55HiKrSbr9gyddq5lrfnNjPE6lqfQamR5VnRC9UU4P8Rkm4d0k9iesnFS4WyF57jBfrnn5wrfLZNqyvl8q/AG15eSlDvvm8m4uTqOhpkHtjQXFuP1bH94L4wp5hJP5HMJt5VU6YqcWRZhqC2l/p5b8rYd87bU5+dA5OZbeZxvcb6WQ6z8OY/9Sx5tieckWufa7LBCL0k2mSUaw3CngF8GfdZRjsXabPtk5wiliTaNmFxBUyvQ1+FB8d14GafacjyeTordIh0c9nhWWaQ2zmi9ImWHiHOn44VzEEPReIu22ySqByAGiRz5ilycZzrad92dT47qLYp/I0XQaS79Xb4cGJI+jm2NGg/V4I3usBWUWqehX99383V9obWjjikElng6EXq8IkMu7LNq62gWzebBWeaTdm6NuMPOaE4Lj+VPrDTWFyBX5+O15tdblVY2mfjkeUEw02iWa4OckebzOm3yi+ECRbG7Tbt2Ec8Cs7k1knamk6u2G3kHtpkeFkxEr2wfF+stM6OO8laZMxug+3YnAiNCJTJO6lgTeXDanY1z5M/AdYB+ng534XV+EI+T5cPouZEODXcrBMltWV5Asljt41vBSP5OYEqJazasi2ovKlkQSmCQ1F7LUyV56aWY4rhmD18Z17XY74hip9kVu11OohhRIhmS6pMc2WLZjtgSbizniuITRCEMLLf0VfK46y31d4DA7yEYmDBuZGEKHIhqf7FY5qsqByq+fsMAwUWIeSJFdlu0yIptVqCojtBvMgLVpwVRovoU3e4Lteo0TGbBLOasBMYfOCJFfuCIKgRu5MKSSJa3KcLXKUpwSo5GliYe9ZQZTwFMMdWMS7bXazLdFoFcP/JgCZjwQzP14FPkRJcEEej622wYAF2kqrT4R9aEy03/bYif927ZwDqmWyqgMh4e4orCLwgvfQvm+6Dpx6Bv5rnUdMsLHac2iV1wRfJx63fHlK1ybxcc1Q3yXfOz4INV4nNAd0dm5oJ7z9+fA5hNYr7xeivJ0Xg6PqVZll6K0Cm5VIzNExRBtgkNghQTotMiPMCAuJsgfsRF76g/eb7LP+JLEyfQEvw9+7hlqpflDx4iGkTlQ0TGLV/89JXzwSXOWwKL5CuZ4OH3Son4r08a0AOlHha/4Z88jM3f5frC1oMfHGc5wNzALlcl8zx90xQgxGZdPMTC+NH4Vwa+cv5ReE/yHUuCu2mXJvD7nWo5nV5qBgBhGiSyWLsIHifmBWdyimDvt9IfZi7c753MF+hbMr9RJhqeXb5Ru+u6/1u54V7aBUB8CrkXLC+1Ar9LsfPAfpjQ7wC/HtId4W9D+mMkr3+I/5Q85PTz9/D6Lw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="bb7e7d8b-e8e3-4dc9-9073-6b2a9c8ac469"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="979f1903-1ef6-4a21-b7ed-3c829bec85dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API" id="9d27ef5d-226b-4710-91da-6a452b364641">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="ff86e280-8efc-438f-a0f8-c455f69b9e1e"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="355f30c0-6988-4a19-b98d-00eb17001332"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7b43b087-c6b1-41fa-9958-b3af8215ddd8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="3217055c-57f5-4f6b-8986-5c97d330161d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b00abc6-17e9-4793-8beb-c38a75a236da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a0a81299-e499-4d96-8fe3-ee9125bfe1ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afad6394-18c1-41f0-834e-d5fd2a0de724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="8c721406-10ad-4003-9fcd-4043b3af0f90"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4ed4c6fb-f157-4d76-90cf-c2111034e717">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7065e381-9693-46c0-afa3-f3f540ed93ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="02e196fd-6a33-458f-a779-20bdcb8f65f6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a1fa38b-4b5a-43bc-b4ac-c8b2cd422c62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="78a51972-e97c-4fcc-a444-ae8c86a62bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="45db53d0-e287-4b60-a809-f9e6735e4f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="a34ac438-f9e9-46e6-aa72-085a95955c04"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="517a95b3-ce83-437a-827d-5e49fdb10fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6a93b9aa-b6dc-4adf-983f-0d78466e7a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="96fdea5e-3165-42ad-86cd-31f66cb06840">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="89035e54-011b-4e78-8314-3066b20a7451">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d336e59f-097a-4d6b-a0ab-dad12dc87fd3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

//tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tC.setPropertyValue("audience",tP.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tC.setPropertyValue("audience",URLEncoder.encode(tP.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="94b59c95-ff72-47e3-9fd0-fd8d7afd897f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="ce52285d-9dc0-4384-aaf1-5960e49fc5b6"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="a978a785-c50d-4c04-8a92-bdc972ecdc01">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true" id="7a36644e-867e-4ef2-bd53-c316b0b0b1f3">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="db516161-86e4-476d-bf56-7f98e27247fe">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="ba4dda14-1235-40f0-b44e-e25b1b8a9ca3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="9af2df1d-af07-4b39-9527-92dcc32d9120"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="41aec0e4-8f1c-46d0-af53-1a19c010eab9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="2040850c-ee49-4935-86e9-5f2505a43f76">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());

			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
		     
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="61cabfc0-62e4-4f84-9578-d6b1043bb8f5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="3e70141a-7836-4057-9fa3-549155a21767">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="e74a6738-775c-40c0-afb6-0b3f1707439b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>assertId</con:name><con:value>_66ff3aff-32be-43d4-877a-3e7cae6aa207</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2014-05-13T23:34:35.958Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2014-05-13T23:34:35.958Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2014-05-14T05:34:45.958Z</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_66ff3aff-32be-43d4-877a-3e7cae6aa207</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2916</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+I6EH3vr4jSx1XIFxSIChKFspsubFugFerLletMgtvEhtgJtL/+2qFJgdLe7pWQkCfjmTMzx8c+5yiJHa/HOaSCMKr5g47+z9lZGLooDA3XeQSj7gZ1o9VsIsOFJkZwhpBjNXXN5zwDn3KBqOjojmXXDath2O7McT237tUbtXaj9aBr95ByGVq61Cxd2yQx5V6RtqNnKfUY4oR7FCXAPYG9aW888qSnh0pMevd8i7JImHYXQiw908S1ADDEMa5hlpjn5p7PecC9KYkoElkKbzkD3tHf9q7X69rarbE0Mh3LskyrbUqfgJPoVO+elJsh8GnItus+oowSjGLyihSoMYgFC7ReHLGUiEXySWjbtC0V2oANNrBdp6e6+Z6gQPfNSHsgU44MvkB2GWwCIaRAMWh3E7+jn35vgtu9sxRRHrI04Qfrv4MENIeYLSEweFlZie77EY+0q3sO2PMpjjNOcvijaLJEGLh2k0JINiPCJfkCrhXj1zZc/kjJMsB/M5ZzcxerhG4e6c6ARMDF/5nZ7ry2Ue5RnEH3dRXb/vRyNH95uMqffywes97gNlidmW7UKSDsOm9BVeN+Wx+SteLW26anK9K6H65+jqbTKI5Web8ZPj/wpn/xQ7zM03y5GS7W0eqnef1LceP5tsHaVxd386zdX/tmurlx46dbszectJJG6+Rl9Ot66q9myWA2iFrQQv7vcD5e9mIzYmt3Ec839tSi+etwkSR9F1ECD+un68vxvP647o8fB2cjErLrFN0sMn6yursaJS77Obmd39+P82T4HHXea9qtYd9YSsI0e3wCLMqlooc/0IZyXkh8LS/KQgIjLFy9pdIoLoAKvat2KWnxMilAJPDkMLfrYbthObbTs6Wu1Z1249KqW/bQ6lnNdttq9FulBm1RHEDsMxoSlUup7JY/XwPEiceBBpAaOcvwArj+RcQBEkjz6UQeDkY5zJhUcRu/Os+toMF49EoSxliLMng6Cze69oeJa3qd9kIB6Y5012eWsyfdE8BkSUDpuyI4lwznQvZihfJMxHYtRzUKmbwBUiXCnlNvNUxOkmUMCqmZsCCLobZcLIvOmHz77xgI88I6uZwVB+/Tug6/lS2QPgFRDlzVcgFyjHDkDnLLQj4vuLFbcBm+lwVEnS/ZT5ESvEWy/+mdJoofFUdkRSXkyvPQsBfVPCyoShTkBFdEr25oKfDy+HfLcaxQbVXL8jwrBtBU0pbK8KZUONucAs6kPr3M2DNQswphfut6qFAfZK7s+/gysaBTgQQkki5asfzG22AKXL0NfMnzzXcfHnspZd8EbMQxWz+WTwiF+MtXBvaw8pPmG/m3ZmnwPq4jsXbyyDrlg0AQGqmVughePiEFZjIskcrF0t3gxwIcS75vrJpcYRGSTY+ZgM+/aEqSOjrCmGVU+AO9MOzKZIFTvCzBe3f6EKaQ4re7dcM/vVvn49FUClaC9MqX/LezQQq6YNDVFV5g6egb+VSUyWm0I8tvAD8qc9up2+2B229Y+8rsDqoG7lXS/WD+aNnp6eF56P4L</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_66ff3aff-32be-43d4-877a-3e7cae6aa207" IssueInstant="2014-05-13T23:34:45.958Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_66ff3aff-32be-43d4-877a-3e7cae6aa207">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>zql1ISELXyZJvk+hbuADQdq6/3g=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
jJi8VFqGLSSglgqvC7fkZs7IB+tyXrvpxFhwgqG/OHae6akQ5o9JBUXu9CwI/rxP3ljQ/AFR8m58
yLHOSIqTmDTDg8e8aIKfXMpAl/gow3hlXx1S0nvzFhmmC3anieZwjOEMX4bwCMbD6LifoOraPhus
qUJLm3oGRQXVVMvmFkg=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1cz2k8d5osgzimooo8noej6fx" NotOnOrAfter="2014-05-14T02:34:45.958Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-05-13T23:34:35.958Z" NotOnOrAfter="2014-05-14T05:34:45.958Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_66ff3aff-32be-43d4-877a-3e7cae6aa207</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-05-13T23:34:45.958Z" SessionIndex="_66ff3aff-32be-43d4-877a-3e7cae6aa207"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true" id="e6d93400-ec29-487d-845d-0269783271b0"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation" id="36a03322-c94f-4c44-9b0d-8ed3193a4a59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("UserName").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true" id="a9371951-a0d7-4374-b477-39820ba727c5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34eab9ef-094b-4ea5-b816-16bad8f3019a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="ab184205-d3f8-4833-a390-e2590f4dff15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3475aa35-aee4-44f3-bc56-b7358d0abca8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="621e6c79-25ba-4fc8-86b5-0fa7a2e3401f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeUserGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
            
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
  /*      
         def a = myXML.DisplayImage.DisplayImageURL;
         log.info a ;
		//def b = a.toURL();
		//log.info b;
		 log.info "Response_DisplayImageURL: "+a.getPath();
         assert  a.matches("https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=[0-9,A-F]*");
        log.info "here";
*/
        
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
          {
             this.log.info "Getting CHILD CLG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="948ce4c9-000a-48f8-8ed9-6e9a5983276c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E641652A31FC5318E0401F0A05993F57:F41796B9"</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>3531</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/dececs_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6193ACEE6A11BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>ResponseTypeUserGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1iuR8sAiihWkqrhpqioCF5fTuEwIMpNBgT99Wcw0ZVkJ+usfV7EaXq6v77Q880ztgK/2QMYoyT1orCqSi+1/zCcw+7Y3a7R7u7YBgvbdoOnObZhc1aXacEWZzc7taqKcYbUEKdWmL7UmjTTatB8g2mZTKvXpHtN5olrtba16hIlmJgmKk90rVoEfoh7N7cvtSwJe5GFPdwLrQDhXgp7BtDGPaLZs+6Yaq/PbyhvDpPXfZrGPYqCTzaCyPfhE4wC6pn6pPNs457huaGVZgl692njl9r73jzPn/LWU5S4VJOmaYrmKaJjY8/9VXut3DcjWw2d6G0tWmEUetDyvatVgtJQuo/sKvDdKPHSffCDaYZi6NJ0AxWwARk2/FWjfju4oftLS59AJthq4L3F3I3NkYMSFEJUXczVl9qvv6vg214zsULsREmAv6z/HSQUnpEfxchu4Htkd3R/b/GbdL0+I9hTQ+hn2DujSdkmsQURrs4S5HjF2MOk+WxcvZW/WuB7hyH4b0ryTH3ESWBT32RG8lyE0/+nXh9r9WZlafkZep0B+jJOdht+4SH5MnLsYO0HyJxMFuDlBuGj8huoR6nf118b9dFX75vcUbA9LWTYZ45qMlgp4jpUwLlIxjTvMKfuwdscgbETLgNE24lNAd2Yh7tgvlke2MPE95G58x196CyVyDAq6y531cdxn2um8mTNLBwU2dciUXPfti4zdtnczPojzCyLy/BCqcNVx2Q7aTiRj9LZ0tlgPVCvwGEO/XBwOldEXnFzWVX2o1N7M7BMuMhffsf0MYYyrhG63IIs/6/bNC9ZqfVYiOWkcMjnmaJXTVXFuiSKAIkuyFUBuKowvoKJ4B5P+6PX53NaAPpCARK4aHOQS+5GWur6SM7t5dLfLlVFEbQ5mw/ARqqQF5JcLKXtekhbq228aSr01hAEez2Pdq1hbA+O+WAPJ5qp5RNTvWgHuZiYMr26ydyCrK/aQWOm5qJVWR0EXpvLuZTfPEpyvp9sV/N4s+BzeJV1DbB9wCxkca8NzGDJwNZ8Dw/yWAPHm1zYa+JyqRWyCWYVwZ0sSWymqGxjGNjxLvD3H4wPiHHT7i8vu76fba/yQRPlvmic+oa6a0m6PATzzWK3Wh6tlXKuwMEE7O4evbZnraPc3XZzSd8MR9FW3Z/hBOiyIOiApIsGmtofgqgvAI0FXnEVDwIXibaSU8MmrtR5v8+tL95pja0+7VtMt8tsxituduIkOaxvR9nusNf2a2VaHxn2ecGn/HWDz/UzZ3kMLGJHX8uDdFQ4A92o7GZSsYaDuu0OKf/KK4nWGYLketn7mjtPV9wUX3ae46yE9ZT1O46vteax4zvxBdfNSD8mNCegVpPaXM6jtAJcTQCgf1gcBF0TumVSbTXXN5pgAUVOM3A9NNNRc3kaDs4+3LRAVIxW08PxvTC2lMsClesyaSu50pWAXRZhYCxk5QAWgusmgisrgg4loG/UUb4h+VoMiPLXPCq3PLqyAOTWFnD8oNJa0Hw6TQ2WBZdQWIQKv9dOxcrmArpzQvLYmMRsruGJE25X0VELvGSRZMZiNJqMi52Z9Y8HMqsc2hidW9uKfD7GwJuMzP1RiiRrFm82aVwPYQJTNQ40tbhOt/jQ9XYBPay3GWFGS7DTXAS7fNG35O0ocQ1mNJiHs1aHr+DMuQyC+qGbr+qmwcUdWwwd6XKhtsmSjkCk8PP2yS6azeN+kY+53BmC485qTgqfFy68PNqaMJ/ro5UR1NuV9nk8DuirSbGTeJob/ZyVdb3esgVzYOI48TZZ1y2SaWg3N1bKnbf0kvNi/8g3s6PJxq2lG5Bizc523NFmFZ1dw23gdmI4pObUGcgdZ6z2L7urdY2DKXwboF+nw0P4Nj+oj5Pl0+i5kw6DdCuC6X1ZHkCqVFXIqWClfyYwpcSzG85NtReXLAinKExrr+Wukrz0MkJxPLtHjoy3tcwxfAuIstyRuoygKDLN0oxCA7rN822hI95ZzhuKLxDFKHS80lfJ495OqT8DhEEPo9BGSeMcZXCPcO0PFst8VdVwTo7fKMTIjAhP5Lu82FVoUQAixzIiUJqs0AFtsUO4YLfJgFp1EqXTcJoAJ0XJZ47IfeKIcwS92EMlkSxPU0yOU5ySlJysc5b6zNPZegpRRqhmUrK9XpPttinsBbGPSsBUENmZj57ifXxLEIXfns2GBfFNWmYX4ttB/2OEX9/dk0F0bK9UwGU4AiIFRd/wXeYeyw8xs1948d08yGyvPM9JZtPEg29IPr/63TBlpzy65fYD8R32Q/ur4JNl6mtQD2f22YOPtn/cCAihJJTj9V6Vk/V0esrO5+xWh05JpxJinmIoukMZCGaEE13M6IhC6mGC+is6+kD9xfND/hlflu5DIyWfdEC6pnpb/sVdxEC4vIuopOuLv73ofHJJ8paiIv1OJvrkylIi/uOtBvZgqUfEM/LIo8T+Xa5vbH3wQ+IsZ5gXuuWqJJ+XHxoDRsSsR+ZYlHw0/p2B75x/Fj6S/MCSkm7aZSn6+U21HFAvNQvCKAtTVardBB+H5g1neolR77fSP8zc6N87ny/wj3x+rY0NMr4Cq/bQ9f63csO7tQtEZBf2blheagW5mhLnofthSL8D/HZOc4D505z+HMnrP8T/lHzI6dfv4fW/</con:value></con:property><con:property><con:name>sName</con:name><con:value>04.Functional_UserGet_SPLCS_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_40040_UserGet_FUNC_SPLCS_Get_AccStatus_Mergedeleted_SPLCS_P2</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E603BD56DDEEF0CEE0401F0A07990E43</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F850C559FACD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:basic" UserID="urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>usercreate20130911_030350</GivenName>
      <SurName>usercreate20130911_030350</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E6193ACEE7DC1BFFE0401F0A05995B7C</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail verificationEntity="urn:dece:org:org:dece:RET" verificationDateTime="2013-09-11T09:31:03.103Z" VerificationStatus="urn:dece:type:status:success" verified="true" ID="Coordinator">
         <Value>raju.alluri@compugain.com</Value>
         <ConfirmationEndpoint>Coordinator</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>raju.ganji@compugain.com</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
      <Language primary="false">en</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="false">2002-09-14</DateOfBirth>
   <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:E6193ACEE6FF1BFFE0401F0A05995B7C</LegalGuardian>
   <Credentials>
      <Username>usercreate20130911_030350</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-09-11T09:30:53.000Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:03.108Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:00.871Z">
            <Value>urn:dece:type:status:pending</Value>
            <Description>Flipping User Status to pending</Description>
         </Prior>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:30:53.011Z">
            <Value>urn:dece:type:status:blocked:tou</Value>
            <Description>User Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</User>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="b842e70d-a8b1-44af-91c2-44516599f032"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="215d4672-2e57-480a-a80e-d258d7b50dad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="7b7db62c-25c3-45a6-a22a-220baead7507"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="6e6a3bde-d58f-4514-a0db-b9f3983a4e4a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="1581bd9a-2a13-43f9-abd7-d15ee95c3374">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="58771ea9-69a8-4296-aa24-2a8104397ca9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+I6EH3vr4jSx1XIFxSIChKFspsubFugFerLletMgtvEhtgJtL/+2qFJgdLe7pWQkCfjmTMzx8c+5yiJHa/HOaSCMKr5g47+z9lZGLooDA3XeQSj7gZ1o9VsIsOFJkZwhpBjNXXN5zwDn3KBqOjojmXXDath2O7McT237tUbtXaj9aBr95ByGVq61Cxd2yQx5V6RtqNnKfUY4oR7FCXAPYG9aW888qSnh0pMevd8i7JImHYXQiw908S1ADDEMa5hlpjn5p7PecC9KYkoElkKbzkD3tHf9q7X69rarbE0Mh3LskyrbUqfgJPoVO+elJsh8GnItus+oowSjGLyihSoMYgFC7ReHLGUiEXySWjbtC0V2oANNrBdp6e6+Z6gQPfNSHsgU44MvkB2GWwCIaRAMWh3E7+jn35vgtu9sxRRHrI04Qfrv4MENIeYLSEweFlZie77EY+0q3sO2PMpjjNOcvijaLJEGLh2k0JINiPCJfkCrhXj1zZc/kjJMsB/M5ZzcxerhG4e6c6ARMDF/5nZ7ry2Ue5RnEH3dRXb/vRyNH95uMqffywes97gNlidmW7UKSDsOm9BVeN+Wx+SteLW26anK9K6H65+jqbTKI5Web8ZPj/wpn/xQ7zM03y5GS7W0eqnef1LceP5tsHaVxd386zdX/tmurlx46dbszectJJG6+Rl9Ot66q9myWA2iFrQQv7vcD5e9mIzYmt3Ec839tSi+etwkSR9F1ECD+un68vxvP647o8fB2cjErLrFN0sMn6yursaJS77Obmd39+P82T4HHXea9qtYd9YSsI0e3wCLMqlooc/0IZyXkh8LS/KQgIjLFy9pdIoLoAKvat2KWnxMilAJPDkMLfrYbthObbTs6Wu1Z1249KqW/bQ6lnNdttq9FulBm1RHEDsMxoSlUup7JY/XwPEiceBBpAaOcvwArj+RcQBEkjz6UQeDkY5zJhUcRu/Os+toMF49EoSxliLMng6Cze69oeJa3qd9kIB6Y5012eWsyfdE8BkSUDpuyI4lwznQvZihfJMxHYtRzUKmbwBUiXCnlNvNUxOkmUMCqmZsCCLobZcLIvOmHz77xgI88I6uZwVB+/Tug6/lS2QPgFRDlzVcgFyjHDkDnLLQj4vuLFbcBm+lwVEnS/ZT5ESvEWy/+mdJoofFUdkRSXkyvPQsBfVPCyoShTkBFdEr25oKfDy+HfLcaxQbVXL8jwrBtBU0pbK8KZUONucAs6kPr3M2DNQswphfut6qFAfZK7s+/gysaBTgQQkki5asfzG22AKXL0NfMnzzXcfHnspZd8EbMQxWz+WTwiF+MtXBvaw8pPmG/m3ZmnwPq4jsXbyyDrlg0AQGqmVughePiEFZjIskcrF0t3gxwIcS75vrJpcYRGSTY+ZgM+/aEqSOjrCmGVU+AO9MOzKZIFTvCzBe3f6EKaQ4re7dcM/vVvn49FUClaC9MqX/LezQQq6YNDVFV5g6egb+VSUyWm0I8tvAD8qc9up2+2B229Y+8rsDqoG7lXS/WD+aNnp6eF56P4L</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D/User/urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F950212A19584295E0401F0A079905C8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true" id="700e149b-ee46-4a91-8f84-916ec3bfa37e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="78845ba2-8601-4f71-87d9-d285f6650912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="ceac24ad-0e3f-4bd8-af8d-5c003d89a19c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="d5c2eb02-3b4f-4a08-9f5d-ce1a78c4dba0"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="0426fe4f-882b-4ea7-bfbd-4124b6413d7e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7b8c1483-c541-4f08-aab9-041228f45d0f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzOmB0d0QhoKioDI4vJxBKRJmkQNCvP4W2bu3dvW+f+6SVlZW5ciBr1SsyfY9uA4RgnLhhUJaFt8o/LRquOabeqrVY2KyxNM3VOBtaNYtpbWjKXrNNq1kpywilUA5QYgbJW4UmKaZGNmt0w6DoNs21SfqFbFCrSnkGY4RNY5UXslLOfS9A7Yvbt0oaB+3QRC5qB6YPUTux2jpQhm2s2TZvmCrvr1eUF4fx+zZJojZBWC8YEvQ868UKfeKVeNJ5tVFbd53ATNIYfvi00Vvl42yWZS8Z8xLGDkGTJEmQHIF1bOQ6vyrvpdthaMvBJryuO2YQBq5leu7ZLEApMNmGdhl4Thi7ydb/xjRFUGRhugZznD6KDX5ViN8OLuh+aOkJZIzMGtqa1M2YBjcwhoEFy1NNfqv8+lkFr2eN2AzQJox99Gn93yDB4Ai9MIJ2Dd0iu6H7ucUv0vX+Cq22HFheitwjHBVtEpkWROVJDDduPnQRbj4blS/lL+fo1mHQ+i8leSUecWLYxBeZEVwHouT/qddjra5WZqaXwnc1FrhcZSxU1xxDyHtLoaUp41jP5su3C4RH5Suoe6k/1p8b9d5XH4e6LqsPIzmlFcI5S1yLGXDOStq3Zrpf7fEJT/fH+czprrSlRpGMv/Z6+aRbDXV90pUMjVn1grlsJvN0vHazUpOOBYXhlRgIBn0YZEgd+QfeHs+0eViNXGU8t4j0vDn3TXkYLB0tCNXG2WT0+mgvOZOtK9H9wzRTpozUlUotKdO0/ihr5Q3KhJE485Zvv2N6jKGIawBPlyCL/4s6yQlmYt4XnWJSbPDnmcB3RZY7VaHTAbDjgEzmgSPzwzMY8c7+sN27XS4jeaBOJSCAk6KBTHCWwkxVB2Jmz2beaiZLEq9obNYDS6GENwQxnwmrRZ8056toSUvkSud5e6GFa6Yf2b191ttaI8VQspEhn5SdmI8MkZxfZE6O12dlp1BjY8qU5jueUzQxE7KLR0HMtqPVXIuWUy6zzqKqALYLqKnY2So9w59RFqNtrZ04VMD+Iue3Smc2U3LRAJMS74xmODajI60iy7ejte9tH4z3sHHD7s5O666Xrs7iTumI3Y5+6OrymhFUsQ+05XQ9n+3NuXQsWb0RWN88unXXXISZs2plgrrsD8KVvD1aI6CKPK8CnC4SKHK3D8IuDxQWuPm5s+MbYceWMqJPo1KV87qNxck9LJDZJT2TarWo5XDemBwaghhUV4N0vdsq24U0rg50+zjlEu68RMfqsWG6lJVHG3Uh9pJBvumpemk9EfKF1avaTp/wzpwUK80+iM+nrac4WjJvjNFp7W42c34xZr3mxlMYLdp4m+iEqkao7mOywUOGJpan4yApAUfhAejupjteVfhWkVRbztSlwptAEpMUnHd0MqBnh37v6FlLBoT5YD7e7T8KYwuZyBOZKuK2EkstAdhFEXr6VJR2YMo7Tsw7osSrlgDUpTzIljhf0x5W/pxH6ZJHR+SByKxAg+uVmCnJJeNEZ1lwCvhpIHFb5ZDP7YZPNg9QHOqjiM0UNNoEq3m4V3w3nsapPh0MRsN8baTd/Q7Pqg2pD47MqiQe9xFwRwNjuxdCwZxEy2USVQMrthI58hU5P49XaNdy1z7Zr9YpfkIKVpOe+uts2jXF1SB2dGrQ04IJ0+RKKN2cen5118rmVUNvRE27E2yE04lYxTMyBKHEafWDndP0fjvNho1s0wf7tUmPco/jT5w4WBlWpqmDOR439VL9OBz65Nkg2FE0zvRuxoqqWmVs3ugZKIrdZdpy8ngc2PTSTBrHFTlruJG35+h0b7ARM3N8XKzJ0Y6ayqSksgtr5TvNyOoTGnEEYnMzlLun9dk8R/7Yug7Qz9PhLrzOD+JxsjyNnhvp0HG3Qiu5LYsLSBbKEr4VzOTvBKaQuHZtc1FtRwULQgkMksp7caogL+0UUxzXbuMr47oW6QZgGyQrUvWCT3EiyZKURAKyznEkz/M3lnNF8QliJww2buGr4HHXW+rvAC2/jWBgw7h2DFNrC1HlLxaLfJXlQMPXbxggaISYJ1IdUaBovikAukmzAiuyDUkkKYHnmgILBLpSHoXJOBjHYJPA+Jkj1p84ogYtN3JhQSSL2xTh6xQlOCUH85gmHvVyNF8CmGKqGRdsr02zrTqBXD/yYAGY8EM79eBLtI0uCSLQ9ZeumRa6SDXR+EfWO5eb/tsQP+/dsoF1bLdQQEU8PMQVhX8Q3la7fgvm+6Bbj0HfzIPUdosLHac2iV3riuR563fHFK1ybxcc1Q3yXfOz4Mkq8TmguyP76Fr3nr8/BzCbxHzj/VaSg/lyeEmPx/RShGbBpWJsnqAIskno0EoxIToZ4R4GxN0E8SMuekf9yfNd/owvTbaBnuDv2cctU74sf/AQ0SEqHiIybvn8p6+cJ5c4bwnMk69kHQ+/VwrEf33SWG2r0MPiCf7Jwtj+Xa4vbD34wXEWA8wNnGJVMM/TN01hhdisi4dYGD8a/8rAV86fhfck37EkuJvWaQK/3ykX0+mtYlpWmAaJLFQugseJecGZnCLY/q30h5kL9/sg8zn6lswvlKGOZ5dvVu667v9WrrmXdrEgPoXcC5a3So7fpdh54DxM6A+AXw5pUuz8bUg/R/L+h/hPyUNOP38P7/8C</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true" id="1a42b403-fac9-4e9b-beba-08428b612d51"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="584480d5-e621-4b91-826d-e5a22d8a067f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="b362db47-5a20-4722-a929-195f2edc4c9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent" id="bf3cd8d9-3dda-4fe1-923c-6bcb85102ee9"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="a6e60891-93be-4a57-891b-4d0e499de53a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="fe2c0a6c-2712-49f0-9c07-b0bafe8efedf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73V1h+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrV2iD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true" id="8b84599f-9011-4a1a-a266-93bd146fbbc4"><con:settings/><con:testStep type="groovy" name="Update_User_Status" id="89ea8073-43b0-413c-be9e-23e7e1586b7f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )


def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);

String sql = """update ACCOUNT_USER set STATUS = '$status' where USER_OID = hextoraw('$userID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>forcedeleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F951077257F0F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00100_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true" id="80487ede-aacb-4a03-9614-e48d276255d6"><con:settings/><con:testStep type="groovy" name="Update_AccStatus" id="8fa8c609-1d19-4270-8788-687034e7a859"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

log.info "account Oid :  " + accountID;

def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update ACCOUNT set STATUS = '$status' where ACCOUNT_OID = hextoraw('$accountID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>ED65AF1668735614E0401F0A07997557</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_NonCS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true" id="0fe6ceb2-bf24-4dc3-a614-abc94dd19143"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status" id="f0e80ecd-5515-441d-b52f-589542815928"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )
def Policy = context.expand( '${#TestCase#Policy}' )
def userName = context.expand( '${#TestCase#UserName}' )

def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);


//String sql = """update POLICY set STATUS = '$status' where CREATED_BY = hextoraw('$userID') and POLICY_CLASS = '$Policy'""";

//String sql = """update policy set status = '$status' where policy_oid in (select prel.policy_oid from policy p, policy_relationship prel where p.policy_oid = prel.policy_oid(+) and policy_actor = hextoraw('$userID')) and policy_class = '$Policy'""";



String sql = """update policy set status = '$status' 
		where policy_oid in 
		(select policy_oid from policy_relationship where policy_actor 
				in ((select user_oid from account_user where lower(username) = lower('$userName')), 
				(select account_oid from account_user where lower(username) = lower('$userName')))) 
		and policy_class = '$Policy'""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ECB18696FD4BF6FCE0401F0A07993072</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02014_AccountDelete_FUNC_CS_Deleting_an_account_No_ManageAccountConsent_Policy_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_SPLCS_P2</con:value></con:property><con:property><con:name>Policy</con:name><con:value>105</con:value></con:property><con:property><con:name>UserName</con:name><con:value>AcountDelete_firstuser20131204_1386142934430</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true" id="9dedc8c4-1bc7-4f3d-90f8-76fc1c3bb757"><con:settings/><con:testStep type="groovy" name="Rename" id="d3663aca-7eb8-443b-a986-2d81307d5a76"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "07.User_Get_GeoProfile_Portal";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\rshrivastava\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_Responses" id="e2ef2188-45e8-4193-86c8-78d3a2732120"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
      {
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
				{                                                                                         
                  	try {
                        		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
						def targetStep = targetTestCase.getTestStepByName(commonTestStep);
						log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                  		}
                  	catch(Throwable e) {
                        log.info "Exception : " + e;
                        }                                                                              
                   }                              
            }
      }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true" id="04c62a5f-b87c-4edf-81e6-67cf45583012"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate" id="a0620ce5-5336-43ee-aa9d-a49fbb701e62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true" id="d2b2d499-5c24-479e-9969-404560acf0db"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details" id="092d897d-5a1b-434e-b3d0-90fdb21bd08c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true" id="c4b23f47-43c5-4476-ac81-eaa1b66c5619"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d7765da1-c221-46a8-b0ee-4ada2ad4098a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("role",callTS.getPropertyValue("role"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table" id="88f3d83f-4381-4a06-958f-b95673d0a3fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName");
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table" id="49705387-620b-49cb-a9bc-0928f1079024"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

log.info "Role : --- " + role;

//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies" id="482c9984-194b-4b02-886e-06be0089e7c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

		String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
		and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


		this.log.info "Query is:  " + sql;
		results = a.SelectFromDB(sql,dbHost);
		
		log.info "Policies Results : " + results;
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;

		//if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

		if (context.expand( '${#TestCase#IsMinor}')=="true") 
			{
				if((geoProfile == "US")|| (geoProfile == "CA"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					}
				else if ((geoProfile == "GB") || (geoProfile == "AU") || (geoProfile == "NZ") || (geoProfile == "IE") || (geoProfile == "AT") || (geoProfile == "CH") || (geoProfile == "DE") || (geoProfile == "FR"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

						assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					} 
			} 
		else
			{
				assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
			}


log.info "Policy Validation Passed";	


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table" id="69330bd7-d073-40bf-a7af-04bbf8e0e165"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dBHost = context.expand( '${#Project#targetSystem}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations" id="418d894c-0d5e-41ce-af71-087c1cf97b82"><con:settings/><con:config><script>

log.info "DB Validations Complete";</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-09-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E60068AEF0205738E0401F0A07990D3F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00021_UserCreate_AUTH_Creator_ADULT_Full_New_YOUTH_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E60068AEF0215738E0401F0A07990D3F</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-09-14</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_DB_Validation" searchProperties="true" id="48b71661-ccd2-4642-af3b-32fe9e8abc9f"><con:settings/><con:testStep type="groovy" name="Verify_User_DB_Details" id="142255c0-283c-4c33-b8e9-5f6a22d944a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();

def dbHost = context.expand( '${#Project#targetsystem}');
def accID = context.expand( '${#TestCase#ACCOUNT_OID}' )

def aCCOUNT_STATUS = context.expand( '${#TestCase#ACCOUNT_STATUS}' )
def uSER_SAML_STATUS = context.expand( '${#TestCase#USER_SAML_STATUS}' )
def uSER_STATUS = context.expand( '${#TestCase#USER_STATUS}' )

def Result;
def myXML;
a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbAccount(log,dbHost);
c = new dbUtils.dbUser(log,dbHost);

	 	
	 	String sql = """Select to_char(rawtohex(accusr.user_oid)) user_oid, accusr.status USER_STATUS,acc.status ACCNT_STATUS,
	 					to_char(rawtohex(ndusr.node_user_id)) node_user_id, to_char(rawtohex(ndusr.node_oid)) node_oid,nusa.status NUSA_STATUS 
	 					from account acc INNER JOIN account_user accusr 
	 					ON 
	 					acc.account_oid=hextoraw('$accID') 
	 					and accusr.status&lt;>'deleted' 
	 					and acc.account_oid=accusr.account_oid  
	 					INNER JOIN node_user ndusr 
	 					ON 
	 					ndusr.node_user_saml_uuid is not null 
	 					and accusr.user_oid=ndusr.user_oid  
	 					LEFT OUTER JOIN  node_user_saml_assertion nusa 
	 					ON  
	 					ndusr.node_user_saml_uuid=nusa.node_user_saml_uuid""";

	log.info "SQL Query : " + sql;
		Result = a.SelectFromDB(sql,dbHost);
		log.info "Result  : " + Result
	 	myXML = new XmlSlurper().parseText(Result);
	
	 	log.info "Results  "+  myXML;
	 	def count = myXML.ResultSet.Row.size();
	 	def i = 0;
	 	for (i; i&lt;=count-1;i++)
	 	{ 
	 		log.info "loop " + i
	 		assert myXML.ResultSet.Row[i].USER_STATUS.toString() == context.expand('${#TestCase#USER_STATUS}');
	 		assert myXML.ResultSet.Row[i].ACCNT_STATUS.toString() == context.expand('${#TestCase#ACCOUNT_STATUS}');
	 		assert myXML.ResultSet.Row[i].NUSA_STATUS.toString() == context.expand('${#TestCase#USER_SAML_STATUS}');		 		
	 	}

  log.info "User Validations Passed";


</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ECB162CFF657798BE0401F0A05997A9D</con:value></con:property><con:property><con:name>ACCOUNT_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_UserGet_PERM_API_Invocation_from_Retailer_customersupport_200_OK_P1</con:value></con:property><con:property><con:name>USER_SAML_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>USER_STATUS</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>142255c0-283c-4c33-b8e9-5f6a22d944a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API_Device" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d3c8e548-121e-485c-a2d6-01c3d99b6e9a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="202d55ce-3f68-44d5-a416-cdfb21ca967c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2e9a8877-ebc0-4a4e-924a-9a982cf156cd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

//tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName1"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tC.setPropertyValue("audience",tP.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tC.setPropertyValue("audience",URLEncoder.encode(tP.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="43411945-2a7d-4bc1-ae49-487b80539b5e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="e5f89cda-b9fe-4e87-915f-c8315089ff28"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="DEV_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="d6a537da-64cf-4867-95d6-5eec2fab52c3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true" id="8820d9be-247d-4986-8536-73c06127a842">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="cfb0d10f-fade-45f9-b6c4-d518768df859">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="3852d3e9-71f4-4e31-ab15-fb2e5979e6d9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Base64EncodeUsernamePassword" id="e791e034-6fca-4bc8-a4d6-425dcc72cfa7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();


String combo = tC.getPropertyValue("username").toString().toLowerCase() + ":" + tC.getPropertyValue("password").toString();
String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

tC.setPropertyValue("authHeaderValue",authHeaderValue);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS" id="80d36f3e-7def-4ac8-ad46-466eed7fdfc9"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#V1}/${#Project#V2}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="DEV_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#authHeaderValue}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="0d95831a-f54a-465f-8b4b-f34c9a888414">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="904b7061-9402-4254-9306-dca7c649763d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());

			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
		     
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="589cf504-8d31-45eb-a6bd-2a58feb2a9e5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="352a92c3-da92-4c00-b83b-7604bd5e5fa0">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="508e9f9b-11d3-433c-af61-db28e78b30ab">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>assertId</con:name><con:value>_bfae506f-c4ad-48d7-bf36-197b6590ad55</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2013-12-04T07:32:51.501Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2013-12-04T07:32:51.501Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2023-12-04T07:33:01.501Z</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_bfae506f-c4ad-48d7-bf36-197b6590ad55</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:DSP_CS_1</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2634</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DEV_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>ECB16BD6EF348ACAE0401F0A07996303</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:ECB16BD6EF348ACAE0401F0A07996303</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx1VIQiCUCJAoH9uoH7SE29vysjK2E9wmDo0dCPz6tQNJgdIudyUk5GF85oxn5gwtBqKw6nQZwwknMVXcflv9Z+YDXDdsX4M1gLTaFWpoM9+yNbPZmNn1pgFQva4qLmMpdinjgPK2WjVMSzOrmlGbGA3HshzDrNQNc6oqzzhhAlq4VAxVyaKQMicP21bThDoxYIQ5FESYORw6Xvf+zhGeDig4qZ3WlmUeMOnMOV84ug4rCEMchrAC40hv6Qc+LcQcjwQU8DTBu5iItdXd3dVqVVlZlTgJ9KphGLrR1IUPYiS4VDsXxWWMXOrH23MP0JgSCEKyAZLUPebzGCndMIgTwufRN9CmbhoSWsMZ1KBZo5eq/hkgZ3cm0gHJhAGNzYFZgI2xjxNMIVZ+jd22enleBbd3JwmgzI+TiB2d/4wSpkscxguMNFZkVrA7H/HEc3VaGDouhWHKyBI/yDZZAIiZ8phgn2R3hInmQ0zJy69kTHxI0WUY/klZWvo+V0FdP/E6fRJgxv9PzfbrtUV5BmGKO8/rcDK+saKk+vd4fus9uuu1lQbXg8B22zmFfectqbLcu/Nxs5a9tbtEprq3GfduhnAzybLAdXlgN288f8OD9BW+JYPB8GmN1uEAoebGg+M3QN4nH83Q+N1vPC882n1YfjSeYT37y7AvvOls3ljWRng0ZYDPN+P71Wb4NGXDJ/rUuxr9qr2uJv0g/n1L5pOX60ZzlI5fjas7PIoebhr3SxSEU98LKZlOg9GFZcPmWt+8R2vmoyqxX27d9mdO+zkcGgtJ8NLZG4a8OMr2cPvKUNQL8J/lRVoI0vzc1VlIjWIcU6525C0pLU4qBIggRxRzex70rk37um8PhlbtqtvrDoyaYQ6NrtFoNm3LsAoN2rI4otiLqU9kLKmy2/75mSCMnBkGCU7UH5D6gAPlIeYjOkq6PsfJgRCbxr4Qyw7/Fuj4tyKm8EFEOjAZ5hqL98JfxL7q1AuxP+ZSPb0U9AK/i5YEluUs95CQMdHkudQzMVYfoIIq6XKZSq13GnKAEzETuphjU/cwTMUUrifxO6Z6CaGfJYJF2seRS/shv5TPqccBx5FoFSU/nrEBPczkBnQpwtm56/UgpKgCxxk/ZeuFYlFKxj/uUuhA6SfMj+JrFSeoTPAU1l4ckadYe5zQQJ6k3K0/J0SORjkeMBawRMxnnOyDnwI4FfzQWD5yyYXzhMxSjr//RZGD11YBhHFKudtXc8O+GOQ8+XqBnU+nLzC54Ow2SMa+3SAv93cenOMIqKUv+W9njeTtArEqF1XOpa1m4g+RCE6DPfHZEfxGf6o/6c9hJp0v5q+WvTc9nofOvw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_AccountDelete_PERM_API_Invocation_from_a_Device_P0</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>AcountDelete_firstuser20131204_1386142377169</con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_bfae506f-c4ad-48d7-bf36-197b6590ad55" IssueInstant="2013-12-04T07:33:01.501Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_bfae506f-c4ad-48d7-bf36-197b6590ad55">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>VylTRH3mr2GRhKSPIyy3ugBEg6I=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
iZ/SzRCHFczTxxgIItg69HSfztguYcjrEEFQydylEdd9zScRjaikTq9l0WD7VpSnANvq7Vc5x+06
SZbh7v4OeOZsathzRMwzFQZsFQnQC8OU4YwTDgoWKihTXB79OuRY08LeOmNH7MvdglZfSlniZZgO
36c9y/zkmysfd2i6XKI=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:ECB16BD6EF348ACAE0401F0A07996303</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2013-12-04T10:33:01.501Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-12-04T07:32:51.501Z" NotOnOrAfter="2023-12-04T07:33:01.501Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_bfae506f-c4ad-48d7-bf36-197b6590ad55</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-12-04T07:33:01.501Z" SessionIndex="_bfae506f-c4ad-48d7-bf36-197b6590ad55"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>authHeaderValue</con:name><con:value>Basic YWNvdW50ZGVsZXRlX2ZpcnN0dXNlcjIwMTMxMjA0XzEzODYxNDIzNzcxNjk6dGVzdGluZw==</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API_Device" searchProperties="true" id="9b5955fa-2320-4d68-8c21-524f9f94eaea"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6ac8820f-5ced-4bd1-aa77-33fa66594e6c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="8286f708-9652-46b1-aac5-03009cea3c61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="bdc79d6b-36b4-4d93-82c4-54944137dd0f"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="DEV_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="58e496c4-2a07-4d80-80e8-a8197c15e5e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="9ebfabe5-c81c-48af-90c3-a68a847ff3d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountGet}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requestor is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
          assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		 int lastColon = urlStr.lastIndexOf(':');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 1);
			                                
		tC.setPropertyValue("ACCID",accountid);
		
		
	} else {
		 assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		 int lastColon = urlStr.lastIndexOf('%3A');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 3);
		 	                                
		tC.setPropertyValue("ACCID",accountid);
				
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == 0;
		assert myXML.AvailableStreams == 12;
		assert myXML.UserList.size() == 1;
		assert myXML.UserList.UserReference.size().toString() > 0;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="7f13ebda-5618-41de-a9aa-6563b246dff8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>accname_20131204_023256</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:ECB16BD6EEDB8ACAE0401F0A07996303</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:ECB16BD6EF348ACAE0401F0A07996303</UserReference>
   </UserList>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-04T07:33:00.366Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-04T07:32:56.993Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1126</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_AccountDelete_PERM_API_Invocation_from_a_Device_P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+o4EH3vr4jSx1VIQiCUCJAoH9uoH7SE29vysjK2E9wmDo0dCPz6tQNJgdIudyUk5GF85oxn5gwtBqKw6nQZwwknMVXcflv9Z+YDXDdsX4M1gLTaFWpoM9+yNbPZmNn1pgFQva4qLmMpdinjgPK2WjVMSzOrmlGbGA3HshzDrNQNc6oqzzhhAlq4VAxVyaKQMicP21bThDoxYIQ5FESYORw6Xvf+zhGeDig4qZ3WlmUeMOnMOV84ug4rCEMchrAC40hv6Qc+LcQcjwQU8DTBu5iItdXd3dVqVVlZlTgJ9KphGLrR1IUPYiS4VDsXxWWMXOrH23MP0JgSCEKyAZLUPebzGCndMIgTwufRN9CmbhoSWsMZ1KBZo5eq/hkgZ3cm0gHJhAGNzYFZgI2xjxNMIVZ+jd22enleBbd3JwmgzI+TiB2d/4wSpkscxguMNFZkVrA7H/HEc3VaGDouhWHKyBI/yDZZAIiZ8phgn2R3hInmQ0zJy69kTHxI0WUY/klZWvo+V0FdP/E6fRJgxv9PzfbrtUV5BmGKO8/rcDK+saKk+vd4fus9uuu1lQbXg8B22zmFfectqbLcu/Nxs5a9tbtEprq3GfduhnAzybLAdXlgN288f8OD9BW+JYPB8GmN1uEAoebGg+M3QN4nH83Q+N1vPC882n1YfjSeYT37y7AvvOls3ljWRng0ZYDPN+P71Wb4NGXDJ/rUuxr9qr2uJv0g/n1L5pOX60ZzlI5fjas7PIoebhr3SxSEU98LKZlOg9GFZcPmWt+8R2vmoyqxX27d9mdO+zkcGgtJ8NLZG4a8OMr2cPvKUNQL8J/lRVoI0vzc1VlIjWIcU6525C0pLU4qBIggRxRzex70rk37um8PhlbtqtvrDoyaYQ6NrtFoNm3LsAoN2rI4otiLqU9kLKmy2/75mSCMnBkGCU7UH5D6gAPlIeYjOkq6PsfJgRCbxr4Qyw7/Fuj4tyKm8EFEOjAZ5hqL98JfxL7q1AuxP+ZSPb0U9AK/i5YEluUs95CQMdHkudQzMVYfoIIq6XKZSq13GnKAEzETuphjU/cwTMUUrifxO6Z6CaGfJYJF2seRS/shv5TPqccBx5FoFSU/nrEBPczkBnQpwtm56/UgpKgCxxk/ZeuFYlFKxj/uUuhA6SfMj+JrFSeoTPAU1l4ckadYe5zQQJ6k3K0/J0SORjkeMBawRMxnnOyDnwI4FfzQWD5yyYXzhMxSjr//RZGD11YBhHFKudtXc8O+GOQ8+XqBnU+nLzC54Ow2SMa+3SAv93cenOMIqKUv+W9njeTtArEqF1XOpa1m4g+RCE6DPfHZEfxGf6o/6c9hJp0v5q+WvTc9nofOvw==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DEV_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>ResponseTypeAccountGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ECB16BD034824CEBE0401F0A079962F7:CA56D918"</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E763CEDB3CA1FFCEE0401F0A07991BDA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API_Device" searchProperties="true" id="5f0bbe7a-5937-4eac-b54e-e79d00d8349d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9751348d-e193-4bca-98b8-c85e02aa0fe3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="476f7c74-ca6e-4a84-aa5b-c7492b4ad652"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="19a1a894-70a0-4403-8a49-0edcd3fb1e03"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="DEV_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="f340397c-333e-4e2d-81b6-1de3663bbde6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5b333ca4-11fd-47fb-8ffe-b86a3f833532"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountDelete}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) 
{
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
 	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
     

     
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="c52c1e2b-2e3c-4725-9eb7-c86b3ed30c61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def responseTypeAccountDelete = context.expand( '${#TestCase#ResponseTypeAccountDelete}' )
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece">
   <Error ErrorID="urn:dece:error:MalformedRequest">
      <Reason Language="en-us">405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.</Reason>
      <OriginalRequest>urn:dece:type:null</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">356</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+o4EH3vr4jSx1VIQiCUCJAoH9uoH7SE29vysjK2E9wmDo0dCPz6tQNJgdIudyUk5GF85oxn5gwtBqKw6nQZwwknMVXcflv9Z+YDXDdsX4M1gLTaFWpoM9+yNbPZmNn1pgFQva4qLmMpdinjgPK2WjVMSzOrmlGbGA3HshzDrNQNc6oqzzhhAlq4VAxVyaKQMicP21bThDoxYIQ5FESYORw6Xvf+zhGeDig4qZ3WlmUeMOnMOV84ug4rCEMchrAC40hv6Qc+LcQcjwQU8DTBu5iItdXd3dVqVVlZlTgJ9KphGLrR1IUPYiS4VDsXxWWMXOrH23MP0JgSCEKyAZLUPebzGCndMIgTwufRN9CmbhoSWsMZ1KBZo5eq/hkgZ3cm0gHJhAGNzYFZgI2xjxNMIVZ+jd22enleBbd3JwmgzI+TiB2d/4wSpkscxguMNFZkVrA7H/HEc3VaGDouhWHKyBI/yDZZAIiZ8phgn2R3hInmQ0zJy69kTHxI0WUY/klZWvo+V0FdP/E6fRJgxv9PzfbrtUV5BmGKO8/rcDK+saKk+vd4fus9uuu1lQbXg8B22zmFfectqbLcu/Nxs5a9tbtEprq3GfduhnAzybLAdXlgN288f8OD9BW+JYPB8GmN1uEAoebGg+M3QN4nH83Q+N1vPC882n1YfjSeYT37y7AvvOls3ljWRng0ZYDPN+P71Wb4NGXDJ/rUuxr9qr2uJv0g/n1L5pOX60ZzlI5fjas7PIoebhr3SxSEU98LKZlOg9GFZcPmWt+8R2vmoyqxX27d9mdO+zkcGgtJ8NLZG4a8OMr2cPvKUNQL8J/lRVoI0vzc1VlIjWIcU6525C0pLU4qBIggRxRzex70rk37um8PhlbtqtvrDoyaYQ6NrtFoNm3LsAoN2rI4otiLqU9kLKmy2/75mSCMnBkGCU7UH5D6gAPlIeYjOkq6PsfJgRCbxr4Qyw7/Fuj4tyKm8EFEOjAZ5hqL98JfxL7q1AuxP+ZSPb0U9AK/i5YEluUs95CQMdHkudQzMVYfoIIq6XKZSq13GnKAEzETuphjU/cwTMUUrifxO6Z6CaGfJYJF2seRS/shv5TPqccBx5FoFSU/nrEBPczkBnQpwtm56/UgpKgCxxk/ZeuFYlFKxj/uUuhA6SfMj+JrFSeoTPAU1l4ckadYe5zQQJ6k3K0/J0SORjkeMBawRMxnnOyDnwI4FfzQWD5yyYXzhMxSjr//RZGD11YBhHFKudtXc8O+GOQ8+XqBnU+nLzC54Ow2SMa+3SAv93cenOMIqKUv+W9njeTtArEqF1XOpa1m4g+RCE6DPfHZEfxGf6o/6c9hJp0v5q+WvTc9nofOvw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DEV_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_AccountDelete_PERM_API_Invocation_from_a_Device_P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>ResponseTypeAccountDelete</con:name><con:value>MTHD_NOT_ALLWD</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ECB16BD034824CEBE0401F0A079962F7:CA56D918"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PrimaryEmailGeneration" searchProperties="true" id="f9b29056-b1e7-4bbe-b689-58763a3ed769"><con:settings/><con:testStep type="groovy" name="DynamicPrimaryEmailGen"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Used a combination of test_uvtc for PrimaryEmail Generation
def email = tP.getPropertyValue("PrimaryEmail_Prefix")+ new Date().format( 'yyyyMMdd_hhmms' ) +"@uvvutesting.biz";

log.info "generated emailId: "+email;
tP.setPropertyValue("PrimaryEmail",email);</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AlternateEmailGeneration" searchProperties="true" id="6f6d34ab-2c84-49dd-82b2-55269fe5e8d3"><con:settings/><con:testStep type="groovy" name="DynamicAlternateEmailGen"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Used a combination of test_uvtc_ae for AlternateEmail Generation
def email = tP.getPropertyValue("AlternateEmail_Prefix")+ new Date().format( 'yyyyMMdd_hhmms' ) +"@uvvutesting.biz";

log.info "generated emailId: "+email;
tP.setPropertyValue("AlternateEmail",email);</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_PostRequest" searchProperties="true" id="a072081f-5ef1-4e79-8670-ae30d5ac9e1b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="54e6be6e-a0d6-40c0-a727-32e3ac18df40"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="a8fe8e89-6313-4b5f-8b67-dfc5457d663a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

//tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="3e225133-d0ec-4b99-a2b6-443f47b7b8fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidation");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidation" id="5ce83be0-09e0-4158-9dd2-960f98a6121a"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidation" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="646e7034-ff33-40cd-87b6-e1173be53f54"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidation');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="26d6598c-8a1e-4073-a528-6353f1df7684"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>Email</con:name><con:value>test_uvtc20131213_025047@uvvutesting.biz</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>sName</con:name><con:value>RETRY_ATTEMPT_LIMIT</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00175_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_and_new_Call_after_15_minutes_with_differentTokenTypes_same_EmailID_200_OK_P1</con:value></con:property><con:property><con:name>TokenType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_PostRequest_Without_SetPem" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8cde1062-2b08-4af2-9655-8937ef542259"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidation");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidation"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidation" mediaType="application/xml" postQueryString="false" sslKeystore="" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidation');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>Email</con:name><con:value>test_uvtc20131213_025047@uvvutesting.biz</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00001_UVTC_PrimaryEmail_SSLKeystore_Null_200_OK_P1</con:value></con:property><con:property><con:name>TokenType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_HeadRequest" searchProperties="true" id="747578d0-928d-4c4c-ac56-fd459dada055"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HeadRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="HeadRequest" id="46e7839a-45ec-4a7a-b7e9-bcb8a8df7e20"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="HeadRequest" id="f7810e26-714c-4d74-add5-ef703a16a6e1" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('HeadRequest');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

     case "METHOD_NOT_ALLOWED":
	log.info "Method Not Allowed Case";
	expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	XMLbodynull        = true;
	/*errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";*/
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00012_UVTC_PrimaryEmail_with_Method_HEAD_405_METHOD_NOT_ALLOWED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>46e7839a-45ec-4a7a-b7e9-bcb8a8df7e20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_GetRequest" searchProperties="true" id="bc5a9b50-3ea2-4c09-8145-4ef7ff431865"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="20e7296c-6b4c-4917-b4af-58aca35be516"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="eafca3a5-2175-4901-9682-a77ac13c7082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

//tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="d07e918b-22b0-4eab-a190-a9489b141e10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HeadRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRequest" id="35124fd0-e4c4-4838-97aa-76583e32f43a"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRequest" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GetRequest');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

     case "METHOD_NOT_ALLOWED":
	log.info "Method Not Allowed Case";
	expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	XMLbodynull        = true;
	/*errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";*/
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_UVTC_PrimaryEmail_with_Method_GET_405_METHOD_NOT_ALLOWED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">GET method is not allowed for API call: https://qa.p.uvvu.com/rest/1/11/VerificationToken/urn:dece:type:token:ValidateEmail
</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">124</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>20e7296c-6b4c-4917-b4af-58aca35be516</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eafca3a5-2175-4901-9682-a77ac13c7082</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d07e918b-22b0-4eab-a190-a9489b141e10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35124fd0-e4c4-4838-97aa-76583e32f43a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_DelRequest" searchProperties="true" id="e92fcd69-055a-4047-8daa-d775a11493cb"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="0c694b97-8649-423f-9c31-d961ebafd12c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="2f93d66a-5f98-403d-9d17-c19d27817b8e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

//tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="5a3ad560-02d6-46ca-99a3-4a9c3cb9e982"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HeadRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRequest" id="92b298c2-ba45-4a92-97b9-0cb5fc5a0a05"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-Del" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRequest" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DeleteRequest');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

     case "METHOD_NOT_ALLOWED":
	log.info "Method Not Allowed Case";
	expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	XMLbodynull        = true;
	/*errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";*/
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00014_UVTC_PrimaryEmail_with_Method_DELETE_405_METHOD_NOT_ALLOWED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 412 Precondition Failed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0c694b97-8649-423f-9c31-d961ebafd12c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f93d66a-5f98-403d-9d17-c19d27817b8e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a3ad560-02d6-46ca-99a3-4a9c3cb9e982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92b298c2-ba45-4a92-97b9-0cb5fc5a0a05</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCAlternateEmail_PostRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="951868b5-a08e-44b1-a3cf-cbb9d3848779"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidation");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidation"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidation" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#AlternateEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidation');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>Email</con:name><con:value>test_uvtc20131213_025047@uvvutesting.biz</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00100_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS</con:value></con:property><con:property><con:name>TokenType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" id="29e8cdd4-b32f-4148-ae3a-ef0e02b4df6a" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="3e631592-a3e8-42be-94c5-e4f208a401a8">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="c49f417a-5c75-482d-99fc-deabcf5c4952">
        <con:settings/>
        <con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "RETRY_ATTEMPT_LIMIT";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ksaxena\\Desktop\\TestCaseNames.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="63df2d8e-8a58-4955-be8e-c4eccb9b3ba4">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6d43ab82-0256-41cb-944c-980322b1d977">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:saml2 Test Cases"; 

def oldString = """STS API - SecurityTokenExchange Invoked to Coordinator URL""";
def newString = """STS API - Invoked to Coordinator URL""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "-- Call STS SAML Token Exchange") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);

					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="88abec67-0cfd-4158-ab1e-3dcbf6d69df0">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="4aae0d70-4938-4154-a8b0-c9815b6cbb6e">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Holder for new sts";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="99c778cf-bd1a-4293-b34d-53339dcae326">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6fa579e3-343b-4c71-a90d-3e3530823dbd">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:DeviceAuthToken"; 
def stepName  = "Establish Stage for STS invocation as a Device";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="0e62a367-0dda-4249-af02-f64c612938a3">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="fad1a6f8-dba2-4686-8508-367c21c245f7">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS GET Node Role Type Test Cases"; 
def stepName  = "Call STS";
def stepNewName  = "Call STS GET - DeviceAuthToken";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTestCase_Titles" searchProperties="true" id="331566b6-50a8-4d4a-9fca-b5e9f81ff3ee"><con:settings/><con:testStep type="groovy" name="Get_TestCase_Titles" id="e082ce37-8959-49ce-a478-49d56b92308b"><con:settings/><con:config><script>
import java.io.*;

def commonTestStep = "AccountDelete_API_R4";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
                {
                                def testSuite = TSList[k].name;
                                def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
                                def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
                                log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
                                log.info "TSList[k].disabled " + TSList[k].disabled 
                                
                                if ((TSList[k].disabled).toString() != "true")
                                {                              
                                                for(i in (0..TCCount-1))                                                                  
                                                                {                                                                                         
                                                          try {
                                                                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                                                                                                def targetStep = targetTestCase.getTestStepByName(commonTestStep);
                                                                                                log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                                                          }
                                                          catch(Throwable e) {
                                                                log.info "Exception : " + e;
                                                                }                                                                              
                                                                }                              
                                }
                }

</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="First_User_Create" disabled="true" id="1f6319fc-0958-44bc-a18f-e63653a0e8af"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_First_User_Create_STS_Policies" searchProperties="true" id="bf6be7d4-9561-4c60-9314-ec69bcea736d"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="f05e0c99-e0d5-45df-a3a3-69bdd405b626"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tS.getPropertyValue("nodeid"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call_AccountCreate" id="16607a01-08f1-45c1-8587-cd696ca23e57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed_data_for_First_UserCreate" id="c45904a4-762a-4f06-974b-cc91555d52f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "UVTCPrimaryEmail_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_First_UserCreate" id="823f71e5-447b-47c2-93ce-59ce6e6e5939"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_API_for_First_User" id="e295461c-81ad-43d9-8829-d547e6a8d66b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-TOU" id="19645da3-f439-428e-b225-bd218007a1b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-MUC" id="919b68d1-fc2e-485e-8681-3867fe9cb1f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20140513_073444</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>F9502192419E3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20140513_073444@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_66ff3aff-32be-43d4-877a-3e7cae6aa207</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_66ff3aff-32be-43d4-877a-3e7cae6aa207</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-05-18</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>EDA803661762BCADE0401F0A0599202A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:EDA803661762BCADE0401F0A0599202A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20140513_073444@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx1XIFxSIChKFspsubFugFerLletMgtvEhtgJtL/+2qFJgdLe7pWQkCfjmTMzx8c+5yiJHa/HOaSCMKr5g47+z9lZGLooDA3XeQSj7gZ1o9VsIsOFJkZwhpBjNXXN5zwDn3KBqOjojmXXDath2O7McT237tUbtXaj9aBr95ByGVq61Cxd2yQx5V6RtqNnKfUY4oR7FCXAPYG9aW888qSnh0pMevd8i7JImHYXQiw908S1ADDEMa5hlpjn5p7PecC9KYkoElkKbzkD3tHf9q7X69rarbE0Mh3LskyrbUqfgJPoVO+elJsh8GnItus+oowSjGLyihSoMYgFC7ReHLGUiEXySWjbtC0V2oANNrBdp6e6+Z6gQPfNSHsgU44MvkB2GWwCIaRAMWh3E7+jn35vgtu9sxRRHrI04Qfrv4MENIeYLSEweFlZie77EY+0q3sO2PMpjjNOcvijaLJEGLh2k0JINiPCJfkCrhXj1zZc/kjJMsB/M5ZzcxerhG4e6c6ARMDF/5nZ7ry2Ue5RnEH3dRXb/vRyNH95uMqffywes97gNlidmW7UKSDsOm9BVeN+Wx+SteLW26anK9K6H65+jqbTKI5Web8ZPj/wpn/xQ7zM03y5GS7W0eqnef1LceP5tsHaVxd386zdX/tmurlx46dbszectJJG6+Rl9Ot66q9myWA2iFrQQv7vcD5e9mIzYmt3Ec839tSi+etwkSR9F1ECD+un68vxvP647o8fB2cjErLrFN0sMn6yursaJS77Obmd39+P82T4HHXea9qtYd9YSsI0e3wCLMqlooc/0IZyXkh8LS/KQgIjLFy9pdIoLoAKvat2KWnxMilAJPDkMLfrYbthObbTs6Wu1Z1249KqW/bQ6lnNdttq9FulBm1RHEDsMxoSlUup7JY/XwPEiceBBpAaOcvwArj+RcQBEkjz6UQeDkY5zJhUcRu/Os+toMF49EoSxliLMng6Cze69oeJa3qd9kIB6Y5012eWsyfdE8BkSUDpuyI4lwznQvZihfJMxHYtRzUKmbwBUiXCnlNvNUxOkmUMCqmZsCCLobZcLIvOmHz77xgI88I6uZwVB+/Tug6/lS2QPgFRDlzVcgFyjHDkDnLLQj4vuLFbcBm+lwVEnS/ZT5ESvEWy/+mdJoofFUdkRSXkyvPQsBfVPCyoShTkBFdEr25oKfDy+HfLcaxQbVXL8jwrBtBU0pbK8KZUONucAs6kPr3M2DNQswphfut6qFAfZK7s+/gysaBTgQQkki5asfzG22AKXL0NfMnzzXcfHnspZd8EbMQxWz+WTwiF+MtXBvaw8pPmG/m3ZmnwPq4jsXbyyDrlg0AQGqmVughePiEFZjIskcrF0t3gxwIcS75vrJpcYRGSTY+ZgM+/aEqSOjrCmGVU+AO9MOzKZIFTvCzBe3f6EKaQ4re7dcM/vVvn49FUClaC9MqX/LezQQq6YNDVFV5g6egb+VSUyWm0I8tvAD8qc9up2+2B229Y+8rsDqoG7lXS/WD+aNnp6eF56P4L</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx1XIFxSIChKFspsubFugFerLletMgtvEhtgJtL/+2qFJgdLe7pWQkCfjmTMzx8c+5yiJHa/HOaSCMKr5g47+z9lZGLooDA3XeQSj7gZ1o9VsIsOFJkZwhpBjNXXN5zwDn3KBqOjojmXXDath2O7McT237tUbtXaj9aBr95ByGVq61Cxd2yQx5V6RtqNnKfUY4oR7FCXAPYG9aW888qSnh0pMevd8i7JImHYXQiw908S1ADDEMa5hlpjn5p7PecC9KYkoElkKbzkD3tHf9q7X69rarbE0Mh3LskyrbUqfgJPoVO+elJsh8GnItus+oowSjGLyihSoMYgFC7ReHLGUiEXySWjbtC0V2oANNrBdp6e6+Z6gQPfNSHsgU44MvkB2GWwCIaRAMWh3E7+jn35vgtu9sxRRHrI04Qfrv4MENIeYLSEweFlZie77EY+0q3sO2PMpjjNOcvijaLJEGLh2k0JINiPCJfkCrhXj1zZc/kjJMsB/M5ZzcxerhG4e6c6ARMDF/5nZ7ry2Ue5RnEH3dRXb/vRyNH95uMqffywes97gNlidmW7UKSDsOm9BVeN+Wx+SteLW26anK9K6H65+jqbTKI5Web8ZPj/wpn/xQ7zM03y5GS7W0eqnef1LceP5tsHaVxd386zdX/tmurlx46dbszectJJG6+Rl9Ot66q9myWA2iFrQQv7vcD5e9mIzYmt3Ec839tSi+etwkSR9F1ECD+un68vxvP647o8fB2cjErLrFN0sMn6yursaJS77Obmd39+P82T4HHXea9qtYd9YSsI0e3wCLMqlooc/0IZyXkh8LS/KQgIjLFy9pdIoLoAKvat2KWnxMilAJPDkMLfrYbthObbTs6Wu1Z1249KqW/bQ6lnNdttq9FulBm1RHEDsMxoSlUup7JY/XwPEiceBBpAaOcvwArj+RcQBEkjz6UQeDkY5zJhUcRu/Os+toMF49EoSxliLMng6Cze69oeJa3qd9kIB6Y5012eWsyfdE8BkSUDpuyI4lwznQvZihfJMxHYtRzUKmbwBUiXCnlNvNUxOkmUMCqmZsCCLobZcLIvOmHz77xgI88I6uZwVB+/Tug6/lS2QPgFRDlzVcgFyjHDkDnLLQj4vuLFbcBm+lwVEnS/ZT5ESvEWy/+mdJoofFUdkRSXkyvPQsBfVPCyoShTkBFdEr25oKfDy+HfLcaxQbVXL8jwrBtBU0pbK8KZUONucAs6kPr3M2DNQswphfut6qFAfZK7s+/gysaBTgQQkki5asfzG22AKXL0NfMnzzXcfHnspZd8EbMQxWz+WTwiF+MtXBvaw8pPmG/m3ZmnwPq4jsXbyyDrlg0AQGqmVughePiEFZjIskcrF0t3gxwIcS75vrJpcYRGSTY+ZgM+/aEqSOjrCmGVU+AO9MOzKZIFTvCzBe3f6EKaQ4re7dcM/vVvn49FUClaC9MqX/LezQQq6YNDVFV5g6egb+VSUyWm0I8tvAD8qc9up2+2B229Y+8rsDqoG7lXS/WD+aNnp6eF56P4L</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A19594295E0401F0A079905C8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00175_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_and_new_Call_after_15_minutes_with_differentTokenTypes_same_EmailID_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>RETRY_ATTEMPT_LIMIT</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8AAZTSapkbMCAATPDyykjywN4wvIEX39kCGzITvbNuU+gVqt79eDW0ivWXIdtAYxRGNm+V5TFt9I/1Z2x46pNpsLp9XqlVq3ylV2TNyqI5njIQq5hQK1UlDGOkezhSPOitxJLM9UKzVcYek5zrTrfqjEvPMdsS8UlCjExTVRe6FIxcx0Pty5u30px6LV8Ddu45Wkuwq0ItmZAGbaIZku7YSq9v15RXhyG71YUBS2Kgi86gshx4Av0XeqVetJ51XFrZpueFsUh+vCp47fSx9k0TV/S6osfmhRL0zRF8xTR0bFt/iq9F26HkS57hn9dtzXP92yoOfZZy0EpKLJ8vQgc0w/tyHK/Mc1QDJ2brqAMViBT836VqN8OLuh+aOkJZIi1CrY05mZsigwUIg+i4mIqv5V+/ayC17PzUPOw4Ycu/rT+b5CQlyDHD5BewbfIbuh+bvGLdL2/ItiSPejE2E7QKG+TQIMIFychMuxsaGPSfDouXspfzPCtwxD8LyV5pR5xEtjUF5kRbRPh6P+p12OtrlaWmhOjd04ZCAfbU/dh2jcbYwuKZnBuyo1OffF2gfCofAV1L/XH+nOj3vvq49A4MHWLbaJqd7VXzzjuiSnf1J14aXnU6dDGXWFprSbChufpbS+pdSh7HVOy16e5pl12OxPT3525xEwGCFAFah/1FlEj2gLUHu/OCVOfHqaTU+fsZv6i6+9Mvxw2Tg05LCfUcLG0rIYv+gdmPDpQS7WmT1ZZfcodzLOaWnphMpa9zbgmzI7hyVdN97jevP2O6TGGPK4BOl2CzP+v6zQvapF2X7TzSWGQzzNC74ost8tiu00gmiCVBWDKwvAMRoJ5OFoHu8untADURQeI4KRMQSqaG3GpqgMp1ZdLZ7uUOx1BmdbSHtiIBbIhStlS3K77tLbaBhu2Q29ngqCvp/6u2g/03iHtWXCkzJV0NJdPyl7KRnOJXl1kZkbWZ2WvMOP5olpY7QVemUqpmF48ilJqjbarabBZ8Ck8S6oCal3ALKS2pfTm7pKB1akF99JQAYeLXLCU9nKpZNIcTAqCOVqS2ObtzjaArh7sXMd6MN4jxud6d3nadZ14e5b2SlvqtmfH7kzeVUVV6oPpZrFbLQ/aqpMUYG8EdjePdt3W1n5qbpupqG76A38rWwkcAVUSBBWQdNFAkbt94HcFoNSAnZ3be4Hz23onpfosLpR5p8utT/ZxjbUu7WhMs8lshitucuREyStvB/FubynWujMuD2Z6suAj/rzBSTnhNJuBWWCoa6kXDTKjp84Ku4mYrWGvrJt9yjnznVBp9EF4PlmOYk6jFTfGp51tGCthPa45DcNRqtPAcIzghMtzXz2ENCegKkttTskgKgBTEQDo7hd7QVWEZp5UXU7VjSJooCNFMTjv2WjALo/9XuLATRX42WA13h8+CqOLqSRQqSqRtpIKTRHoeRF6s4XU2YOFYJqhYEodQYUiUDfyIN2QfC16RPlzHjuXPJqSAKTqFnB8r1Bd0Hw0jma1Gjh5wsLr8JZyzFY659KNI5KGs1FQSxU8Mrztyj8orh0uwni2GAxGw2w3j7uHPZlVBj0bJNVtQUoOAbBHg7l1EH1RmwSbTRSUPRjCSA5cRc7O4y3eN+2dS/fLdUaY0CJssAt3ly66mrQdhOaMGfSm3qTa4As4Nk49t7xvpqvyfMYFDb3tGeLpRG3DJe0Dv8NP60c9Y9mDtUiHXGr0wWGnsaPM4YUTLw22c5hO1cFq5pbrhXoyHLr0eU7VRsE4nXXTmqSq5aouzHtzHIT2Jm6aWTj2dHajRVyypZecHTgHno0P81pQXZouKdYk0YOGMimotTXcumYjgH1qSiVAahhDuXvanbVz4I7hdYB+ng534XV+UI+T5Wn03EjHjHQrgtFtmV9AsljskFtBi/5OYHKJrVeMi2oryFkQjpAXld7zUzl5acWE4th6i1wZ17XE0VVaaHIMXRdolpEkukYzHRrQDZ5nJV66sZwrik8Q275n2LmvnMddb6m/A4RuCyNPR2El8WNoIVz6i8U8X0XZm5Lr1/cwmvuEJ9brosSwHAeabUB3hIbQZGjQEQRQFSW6Dtql4siPxt44BEaEwmeOyD9xxCmCdmCjnEjmtykm1ymOSEqOWhJHDvOSaC8eignVDHO212JrzTqFbTdwUA6Ycn09dtBLYAWXBFH4+stWNIgv0qk0/0eetS83/bchft67ZYPo6HaugPN4BEQqir4gvNVbMN8GzbCPQd/Mg1i38wudpDYKbXhF8rz1u2PyVrm3C4nqBvmu+VnwZJX6HNDdkZ7Y8N7z9+cAYZOEb7zfSnLUXo4vcZLElyI0ci4VEvMUQ9ENaoZgTAjRae4fkEfdTVA/4qJ31J883+XP+OLI8mYR+Z5d0jLFy/IHD5EZwvlDRCYtn/30lfPkkuQtQln0laztkPdKjvivTxrYgrkeEU/IT+qH+u9yfWHrwQ+JMx9gtmfmq5x5nr5pCugTszYZYn74aPwrA185fxbek3zHEpFu2sUR+n6nmE+nt5IGoR97kSyWLoLHiXnBGZ0C1Pqt9IeZC/f7IPMZ/pbMr5XhjMwuVyvdde3/rVyxL+0CETmF7QuWt1JG3qXEuWc+TOgPgH8MaZ4RaIETJEaq3Yd0nefrHMveE/gUyfsf4j8lDzn9/D28/ws=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="User_Create_API" disabled="true" id="af2da472-8a82-46f5-b112-a2e5a332757e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_STS_Policies" searchProperties="true" id="d4a22e7e-29ae-4d26-b76c-def0e45086de"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="27d7ed5d-3471-474a-90b0-bd0d0ce61dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="e4457366-ffe3-4c20-9707-5fb5d033e5ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def uname= "UVTC_PrimaryEmail_User"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");

tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="ea48f77a-a776-4eae-99c2-cf9a7f69137a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_API" id="f51ca961-b6c3-4f21-b308-7facc85fc443">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("audience",tS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("audience",tS.getPropertyValue("audience"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-TOU" id="0cc3e8e9-082c-4485-bb24-4458d1821ca9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-MUC" id="ab10bd11-03da-4e8c-8786-c9b290cc4dde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212A859729DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022FF1EE8406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212A859729DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6sQ51ZIVJAol91IpWUJ7W735ch1HPA2sUPscNlff+zQpMDSnu6RkJAn45lvZj5/9hWHWWoHfc5xIQijWjjs6v8g37fa/qVjuN5lx3Dj5NLoxLFjQNv1Or7nOo4LdS3kvMQh5QJS0dVtYLkG8AzLmdtO4FiBZbUuO/ZPXXvABZehpUsL6No2SykPqrRdvSxowCAnPKAwwzwQKIj6k5tAegawxqT3rvYoq4RFbylEHpgmasUY4TRFLcQy88o88rmKeRCRBYWiLPBLzph39Ze9m82mtXFarFiYNgDABL4pfWJOFp/13qd6M45DmrD9egApowTBlPyGCtQEiyWLtX66YAURy+yN0JZpARXawFtkIMuln3XzNUGF7oORjkAWHBp8Ca062AwnuMAUYe1+Fnb1zx+b4H7vvICUJ6zI+Mn67yBhusYpy3Fs8LqyGt3HI55pV+8KoyCkKC05WeNbRZMcIsy1aYETsr0hXJIv5lo1fm3L5Y/ULMPob8ZyZR5ildDNM90ZkgXm4v/M7HBe+ygPMC1xj365TO4HhF/MN233IQyni3KVj36MktmkW0E4dN6Dasb9sj4la8Otl02r8frata3n66cJG1jb77uN2R/9HE2XMbld/WJ8cR0t152VPSErKwSzif8IwNR68ubi9z1lEWbR7beURv4X+PD4aTjxiu9odg+/PHbA1JyOi/XIvYvY84+LpR86kyT7Rn4m+ePXaDzwwHA2j0be04Y/o3HuWDuxyP1pmG0exjkGd5863iq/+Bp/nY8GYOFfFxeIdV9rOqzh2FhLQlQ+/cJI1EtFj3CojeW8oHhfXpSFxEZSuQa50iguMBV6T+1S0hKUUoBIHMhh7tdj37NAu2177dF47DjDEXCBNQZ94Pm+A/rXtQbtUZxAHDCaEJVLqeyeP+8DRFnAMY1xYaxZiZaY6+9EHEIBtZDO5OFglOM5kyru/e5YHt7tyjZk1sp13FXHThzE5PG4ZeKO3hX9RODiQLrdObCPpHuGEckJVvquCM4lw7mQvVjBdSlSq7WGLYpLeQMUSoQD2+14JidZnmKF1MxYXKa4lS/zqjMm3//bBkS8ss5G8+rgvVnX6be6BdInJsqBq1qusRwjPnMHgbqQtwv2Dguuw/fLmKjzJfspCoL2SI4/vdJE8aPhiKyohtx4nhqOopqnBTWJ4jVBDdGbG1oKvDz+vXocK9hatcr1uqwG0FbSVsjwplQ4y4wwKqU+7ebsGVOzCWF+6HpoUJ9kbuzH+EqxpJGAAmeSLlq1/MDbIMJcvQ1CyfPtRx8eRyll3wTeinO2QSqfEArxu68MFCDlJ81T+bdhRfw6rjOxDvLIOuWDQBC6UCt1EezeIAViMiyRysWKw+DnApxLfmxsmtxgEZJNT6XAb3/RlCR1dYgQK6kIh3plOJTJCqfY5Th4dfojTCXFL3frlr95t/6Y3ERSsDKoN77kv50NUtEFYV1d4RWWrr6VT0WZnC4OZPkF4IkyA9uy+x3Pb9v+cHyozMDvW00Djyrp/WH+03LQ09Pz0PsX</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1995-05-18</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>F951077257F0F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-05-18</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-12-20</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c9917963-4568-4df6-8dd3-a2458954334a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_c9917963-4568-4df6-8dd3-a2458954334a</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00078_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EDB89BD04A8FB12AE0401F0A05996DC0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00100_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Child_User_Create_API" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_User_Create_STS_Policies" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);


tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("CLG_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-CLGAttestation_for_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateCLGAttestation")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("NODE_ACCOUNT_ID", tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("CLG_NODE_USER_ID", tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CHILD", tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("NODE_USER_ID_FULL", tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy Create-TOU_for_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-GeoPrivacyAssent_for_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateGeoPrivacyAssent")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));



//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-MUC_for_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_API">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9070c791-13ba-4b2d-8113-8b66698dcc9c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_9070c791-13ba-4b2d-8113-8b66698dcc9c</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-16</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-16</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1juRyvhIqJYSaoGQUVFo+D15RQMI6DcZLjprz+DRhOzstZZ+zzp9PR0f32h55sXbPge2wEYozhxw6CqSK+1/wh0i4YtgXliGqbxxJms9dRmmMZT2+R5XmhbEAqwVlUwTpES4MQIktcaSxMFWiBHdIbpNNgO23jmmuy2Vl2iGBPTROWZrlUL3wtw5+L2tZbGQSc0sIs7geEj3ElgRwPquEM0O8YNU+3t5Yry4jB+c5Ik6lAUfLYQRJ4Hn2HoUy/Ug86LhTuaawdGksbow6eFX2sfZ/M8f84bz2FsUyxN0xQtUETHwq79T+2tcjuMLCXYhdd11wjCwIWG556NEpSKEie0qsCzw9hNHP83phmKoUvTT6iAT5Dhgn9q1KeDC7q/tPQAMsbGE3YM5mZsjnYoRgFE1cVcea3983cVvJ7VYyPAuzD28bf1v4OEggx5YYSsJ3yL7Ibu7y3+kK63FwQ7SgC9FLsZmpRtEhkQ4ep7jHZuMXYxaT4LVy/lrxb41mEI/puSvFBfcRLY1A+ZkVwb4eT/qdfXWl2tLA0vRW/KIvZD7DRBW1q0uaA+VBzN5pk+MMPXC4SvyldQ91J/rL836r2vPg6p7spZezbDHXAwHDPyTHc3573CTJpn2PeHJuOI74G50ZLlkEPTrsJlPmpz+2lqsVFXj3h7exDM5FDPYlaquNnORK41xL22e4xYNaAGOG0dIn2wPIloFGg5fZIPOGWP3WWjUe+yC7mYsL2jwCdd3GSjgok3UT7eDrHZrGwzBybhTOque/0ok4ujsnn9jOlrDGVcI3S6BFn+XzdpQTIS477olpNiRz7PBL2pitKtS90uQF0b5IoIbEUcn8FEtA9H5+D2hZwWwWzRAxI4qXOQS/ZGWs5mIzm3lktvu1R6PVGdc/kAbKQK2ZDkYilt10PaWG2jDdujt5ooWut5aDaGkTU45AMHTlRdzSe6clL3JGBdplcXmV2Q9Vndq8xUXzQqq70oqHM5l/KLR0nOncl2NY82CyGHZ3mmAq4PmIXcddSB7i8Z2Jg7cC+PVXC4yEVH7S6XaiHr4L0i2pMliU3v9rYR9K3I9D3ni/EBMa5b/eXJ7Hvp9izv1a7c72rHvqaYDWkmD8F8szBXy4Ox6mUVOJgA8+bRbbrGOsztbTuXZpvhKNwqTgYnYCaL4gyQdNFAVfpDEPZFoHLALc7dvciHXauXU0MWV+qC1+fXJ/e4xkaf9gym3WY24xX/fuQlOahvR6m5d1Rn3ZvWR5qVLYREOG9wVs94w2VgEe1ma3mQjIrdYKZVzHepWMNB3bKHlHcWerHaGoL4fHI81Z4nK36KT6a7263E9ZTzWjtPbcyjnbeLTriuh7NDTPMiarDU5pSNkgqwVRGA/n6xF2eq2C6Tain5bKOKBujJSQrOezYZscvjcJB5cNMAYTFaTfeHj8JYUi6LVD6TSVvJlbYErLIIA20h9/ZgIdp2LNpyT5xBCcw2yijfkHwtBkT5ex57lzzasgjkxhbwwqDSWNBCMk00jgOnQFwEPcFRj8XK4n26dUTyWJtEXK7iyS7YrsKD6rvxIk61xWg0GRemnvYPezKrdrQ2yhrbipwdIuBORrpzkELJeI82mySqBzCGiRL5qlKcp1u8b7umTw/rTUZ8pyXYYhe+mS/6hrwdxbbGjAbz4L3REio43Z0Gfn3fzld1XeOjltUNdtLpRG3jJR2CsCfMm0erYNmDs8jHfL4bgoNpsJPCE8STII+2Oszns9FK8+vNSjMbj336rFPcJJrmWj/n5Nms3rBEfaDjKHY3adsu4mlgsRsj4bMtveTdyDsIbHrQuaixtH1SrPfMilrqe2XGreHWt1sRHFJzKgNyazdW+ifzbJwjfwqvA/T7dLgLr/OD+jpZHkbPjXRopFsRTG7L8gJSpGqP3ApG8mcCU0pc62l3Ue1EJQvCCQqS2lt5qiQvnZRQHNfqkCvjupZ5rsFyHCvJoiBLPV6mOZrp0YBuCQInAHBjOVcU3yB2w2Dnlr5KHne9pf4MEPodjAILxU9ZmEIH4dofLJb5qirBnFy/YYCRHhKeyIMm02NlgQZ8u8k3WmyzydIthmWFHt0QulytOgmTaTCNwS5B8SNH5B444hxBN3JRSSTL2xST6xQnJCVHI0sTj3nOjOcApYRqxiXb67Bcu0lh1488VAKm/NBKPfQcOdElQRS+/rJPBsQXqYthFMaJ4TGXy/63UX7fuyWE6FhuqYDLkEREiop+4LzMLZ5f4uZ+5MY38yC13PJOJ9lNYhdekTxufTZN2S33jvkM7Ib8fuC74ME49T2uuz8rc+G9++8PA8IrCfN4uxXnaDwfn9MsSy/laJWsKibmKYaiW5SGYEqo0UkPDyig7iaov2Kld9TfPN/lj/jSxAm0hHzZPmme6mX5F08SDeHySaKQ5i/+9r3z4JLkLUFF8pOs65GXS4n4j48b2IGlHhG/k588jK3Pcv1g64sfEmc5ytzALlclBz39pjdgSMy6ZJyF8VfjPxn4yfmj8J7kO5aEdJOZJuj3O9VyTr3WDAjDNEgUqXYRfJ2dF5zJKUKdT6VfzFxY4AetL/Bvaf1aHWtkivlG7a7r/m/lJ/fSLhCRU9i9YHmtFeSFSpwH9pdZ/QHw13HNyDzNMSIncY/jWvr8JB8ieftF/KvkS06/fw9v/wU=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFQ0Ci745RYOA6JsMiDor7+DRo/Jycmb+1ZZhdP0dD+90PPMMzZ9j+0AjFGcuGFQVqSXyj8tdrOxbLZZa9Zpq1aHdb624Sy21m7V603YsK2N3a6UFYxTpAQ4MYPkpcLSDFejefLTmXaHa3Q4/olrsOtKeYFiTEwTlSe6Us59L8Cdi9uXShoHndDELu4Epo9wJ4EdDaijDtHsmDdMldfnK8qLw/h1myRRh6Lgk4Ug8jz4BEOfeqY+6DxbuKO5TmAmaYzefVr4pfK+N8uyp4x7CmOHYmmapmieIjoWdp1fldfSbTOylMAOr2vRDMLAhabnns0ClIqSbWiVgeeEsZts/b+YZiiGLkzXUA5rkKkHvyrUbwcXdD+09AFkjM0a3prMzdgM2ShGAUTl+Ux5qfz6WQWve/XYDLAdxj7+tP5vkFBwRF4YIauGb5Hd0P3c4hfpen1GsKME0Euxe0Tjok0iEyJcfouR7eYjF5Pms3D5Uv5yjm8dhuB/Kckz9YiTwKa+yIzkOggn/0+9Hmt1tbIwvRS9Ag6ON+ugTi9EhTmwSzzp9bZNenYUlZcLhEflK6h7qd/Xnxv13lfvm475xKCrvcHZaPQn8kCLm/1NbsSLbR+FAr1nTBnncQrF+WmS0nCUAGdXHXR7DS2o7jN7xfFyuNH93Kp6G780tTx+bMgwyVqWLslmMGxTjD8MrPF63RdpJs4X/nnmn2Z0Szb6PZTVR4YwXPSXs4bY0AR5vhrlGUttp0MMSv29L7BzBfYNyw0OLX/e3b/8jukxhiKuITpdgiz+rxo0L5mJeV+IxaSwyeeZoFdVUcSqJIoAiQ7IFAE4ijA6g7Hg7A/bvdvjM1oA03kXSOCkzkAmOYa0mE6HcmYtFt56oXS7gjqrZ31gSCXyQpLzhbReDWhzuY4MtkuvNUGwVrNwww0iq7/P+ls4VnU1G+vKSd3J+ViX6eVF5uRkfVZ3KjPR51xpuRN4dSZnUnbxKMnZdrxeziJjzmfwLE9VUO8BZi6LW7Wv+wsGcrMt3MkjFewvcmGriouFmss6eCsJznhBYtPF7jqCvhVtfG/7YLxPjOtWb3Ha9Lx0fZZ3qij3RO3Q05QNJ03lAZgZ881ysTeX3WMJ9sdgc/PoNlxzFWbOup1JU2MwDNfK9gjHYCoLwhSQdNFAVXoDEPYEoNaBm5/FndAMRaubUQMWl6q812uuTu5hhc0e7ZlMu80Yo2Xz7dCU5KC6Hqab3VbdrrqT6lCzjnM+4c8GPlaPTdNlYB7Z05XcT4a53Z9qpc2blK9gv2o5A8o7891YbQ1AfD5tPdWZJcvmBJ82rm0vhdWk7rVsT+Vmke3Z0QlX9XC6j+mmgDiWMk7HYVICjioA0NvNd8JUFdpFUi0lmxqqYIKunKTgvGOTIbs4DPpHDxocCPPhcrLbvxfGkjJZoLKpTNpKLrUlYBVF6GtzubsDc8FxYsGRu8IUSmBqKMPMIPma94ny5zx2L3l0ZAHI3Bo0+X6Jm9N8Mkm0eh2cAmEedPmtesiXVtOnWwckj7RxVM9UPLaD9TLcq74bz+NUmw+H41G+0dPefkdmlU1rwyO3LsnHfQTc8VDf7qVQMt8iw0iiagBjmCiRryr5ebLGu7a78elBtcEIb7QEW+zc32Tznimvh7GjMcP+LHjjWnwJp/ap71d37WxZ1bVm1LLEwJZOJ2odL+gQhF1+1jhYOcvut/Ns1MzsAdhvTHace7xw4uXhWofZbDpcan61UWocRyOfPutUfRxNMq2X1eXptMpZgt7XcRS7Rtp28ngSWKxhJs3jml403cjb82y61+sRt3B8Uqy3oxW11LfStL6Ca99pRXBAzagjkFv2SOmdNmfzHPkTeB2gn6fDXXidH9TjZPkwem6kQyPdimByWxYHkCKVu+RUMJPvCUwhca2afVHtRAULwgkKksprsasgL52UUBzX6pAj47qWG902DxiOFZtNtiG3ZLpOM10a0A2er8tC+8Zyrig+QRTDwHYLXwWPu55S3wOEfgejwEJx7RimcItw5RuLRb7KSjAjx28YYKSHhCdKPC1KDQDqtMixLE8DuS11G3W+LYBWl2aYSnkcJpNgEgM7QfEHjsgyHzjiDEE3clFBJIvTFJPjFCckJQfzmCYe83Q0nwKUEqoZF2yvw9bbDQq7fuShAjDlh1bqoadoG10SROHrk62ZEF+kM1n/R9HEy0n/1xA/v7tlg+hYbqGAi3gERCqKviC87C2Yr4NmaJ2mH4O+mQep5RYHOkltErvwiuTjq98dU7TKvV2KqETtH+aG+67+4+1/7qS+AUV9zsfdkXV0H9zemDsho4SuvN4qejCfDk/p8ZheatgqqFhMzFMMRbcoDcGU8KmTHu5RQN1NUD+isnfUnzzf5R/xpck20BIyDnzSceXL8gf3GA3h4h6jkC8m/+kl6YNLkrcE5clXMtEj150C8bc3ItiBhR4Rv5FHFsbW73J9YevBD4mzmH9u4BSrgrie/tIUMCRmXTIDw/jR+FcGvnL+UXhP8h1LQrppkybo72/KxXB7qZgQhmmQKFLlIngcuBecySlCnd9Kf5i5UMf3u0CO/3oXWKkjjYw+36zcdd3/rVxzL+0CEdmF3QuWl0pOrrXEeeA8DPh3gF/P+Ab33Yz/GMnrH+I/JQ85/fw9vP4L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8H62EzQ0rSdWwqKioCK5fbuEwIMomA4L++jto9JicnLy5b5WlTtPT/fRCzzMv2PQ9tg0wRnHihkFZkV4r/9A1zuabDeup2WjRT7VWvf5k0nSLfDUgzdW4eq1hVsoKxilSApyYQfJaYWmGe6J58jGYVptrtGn2mWly60p5jmJMTBOVZ7pSzn0vwO2L29dKGgft0MQubgemj3A7gW0dqMM20WybN0yVt5cryovD+G2bJFGbouCzhSDyPPgMQ596oT7ovFi4rbtOYCZpjN59Wvi18r43y7LnjHsOY4diaZqmaJ4iOhZ2nV+Vt9JtM7KUwA6va9EMwsCFpueezQKUipJtaJWB54Sxm2z9v5hmKIYuTD+hHD5Bphb8qlC/HVzQ/dDSB5AxNp/w1mRuxqbIRjEKICrPpspr5dfPKnjda8RmgO0w9vGn9X+DhIIj8sIIWU/4FtkN3c8tfpGutxcE20oAvRS7RzQq2iQyIcLlSYxsNx+6mDSfhcuX8pdzfOswBP9LSV6oR5wENvVFZiTXQTj5f+r1WKurlbnppegtlu3tYn+YwAFl9H0jm6pNrAf1rlRrvV4gPCpfQd1L/b7+3Kj3vnrfND2sxWpnwG3S6BCmtjSdg5zrn8edsScljDbyEteaBP0hO9w3++xczE6isbT2kY66rCeHrj4ODkk8GGK/hku1tCmy9r67OPXAqW/ySjo/UItw00tD+tyrG6ZMNTVPCxaTY+CtWSdcm07I9YfKZgyl8VzbBxbjNC3R902xFO4oYSaMFmig1aVdqs849fV3TI8xFHEN0OkSZPF/Wad5yUzM+0IsJoVNXs8EvamKIlYlUQRIdECmCMBRhOEZjARnf9ju3S6f0QLQZh0ggZM6BZnkrKS5pg3kzJrPvfVc6XQEdVrLemAllcgDSc7n0nrZp83FOlqxHXqtC4K1nIYbrh9ZvX3W28KRaqjZyFBO6k7OR4ZMLy4yJyfrs7pTmbEx40qLncCrUzmTsotHSc62o/ViGq1mfAbPsqaCWhcwM1ncqj3DnzOQm27hTh6qYH+RC1tVnM/VXDbApCQ4ozmJzRA76wj6VrTxve2D8R4xbljd+WnT9dL1Wd6potwV9UNXVzacpMl9MF3NNov53lx0jiXYG4HNzaNbd81lmDnrViZpq/4gXCvbIxwBTRYEDZB00UBVun0QdgWg1oCbn8Wd0AhFq5NRfRaXqrzXbSxP7mGJzS7tmUyrxayGi8bk0JDkoLoepJvdVt0uO+PqQLeOMz7hzyt8rB4bpsvAPLK1pdxLBrnd0/TSZiLlS9irWk6f8s58J1abfRCfT1tPdabJojHGp41r2wthOa55TdtTuWlke3Z0wlUj1PYx3RAQx1Kr03GQlICjCgB0d7OdoKlCq0iqpWTaShVM0JGTFJx3bDJg54d+7+jBFQfCfLAY7/bvhbGkTBaoTJNJW8mllgSsogg9fSZ3dmAmOE4sOHJH0KAEtJUyyFYkX7MeUf6cx84lj44sAJlbgwbfK3Ezmk/GiV6rgVMgzIIOv1UP+cJq+HTzgOShPopqmYpHdrBehHvVd+NZTN6YwWA0zDdG2t3vyKyyaX1w5NYl+biPgDsaGNu9FErmJFqtkqgawBgmSuSrSn4er/Gu5W58ul+tM8KElmCTnfmbbNY15fUgdnRm0JsGE67Jl3Bqn3p+ddfKFlVDb0Tk7Q1s6XSi1vGcDkHY4af1g5Wz7H47y4aNzO6D/cZkR7nHCydeHqwNmE21wUL3q/VS/Tgc+vTZoGqjaJzp3awma1qVswSjZ+Aodldpy8njcWCxKzNpHNf0vOFG3p5n071Ri7i545NiTY5W1FQnJa22hGvfaUawT02pI5Cb9lDpnjZn8xz5Y3gdoJ+nw114nR/U42T5MHpupEMn3YpgclsWB5AilTvkVDCT7wlMIXGtJ/ui2o4KFoQTFCSVt2JXQV7aKaE4rtUmR8Z1Ldc7LR4wHCt2Gmxdbsp0jWY6NKDrPF+ThdaN5VxRfIIohoHtFr4KHnc9pb4HCP02RoGF4qdjmMItwpVvLBb5KivBlBy/YYCRERKeKDZaHMM1mkILENQduiXKLC9KbIvmG3QDCJXyKEzGwTgGdoLiDxyRZT5wxCmCbuSigkgWpykmxylOSEoO5jFNPOb5aD4HKCVUMy7YXpsljIbCrh95qABM+aGVeug52kaXBFH4+ss+mRBfpFPZ+EfRxctJ/9cQPz+7ZYPoWG6hgIt4BEQqiv4gvPV2/RbM10EztEHTj0HfzIPUcosDnaQ2iV14RfLx0e+OKVrl3i5FVKL+D3PDfVf/8fY/d1LfgKI+5+PuyDq6D25vzJ2QUUJX3m4VPZjPh+f0eEwvNWwWVCwm5imGopuUjmBK+NTJCPcooO4mqB9R2TvqT57v8o/40mQb6AkZBz7puPJl+YN7jI5wcY9RyBuT//SS9MElyVuC8uQrmeiR606B+NsbEWzDQo+IJ+QnC2Prd7m+sPXgh8RZzD83cIpVQVxPf2kKGBKzLpmBYfxo/CsDXzn/KLwn+Y4lId20SRP09yflYri9VkwIwzRIFKlyETwO3AvO5BSh9m+lP8xcqOP7XSDHf70LLNWhTkafb1buuu7/Vn5yL+0CEdmF3QuW10pOrrXEeeA8DPh3gF/P+Dr33Yz/GMnbH+I/JQ85/fw+vP0L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieSythdcFKUjUsKioqiuvNWzgMi7LJgKi//h00ekxOcr683xVM09P99ELPMy/YDHy2BTBGSepFYVmVXyv/NGwa1liTfeKEJnziLfJm2gJ8YmybQxyyGa7OVcoqxhlSQ5yaYfpaYWmGe6KbT2zNYBotnm3x/HOz0VxXynOUYGKaqDzTlfIx8EPcurh9rWRJ2IpM7OFWaAYIt1LYmgJt0CKaLfOGqfL2ckV5cZi8uWkatygKPlsIIt+HzzAKqBfqg86LhVtTzwnNNEvQu08Lv1be9+Z5/pxzz1HiUCxN0xQtUETHwp7zq/JWum1Glhra0XUtmWEUetD0vbNZgNJQ6kZWGfhOlHipG3xjmqEYujD9hI7wCTJ8+KtC/XZwQfdDSx9AJth8wq7J3IxNkI0SFEJUnk3U18qvn1XwutdIzBDbURLgT+v/BgmFB+RHMbKe8C2yG7qfW/wiXW8vCLbUEPoZ9g5oWLRJbEKEy+ME2d5x4GHSfBYuX8pfPuJbhyH4X0ryQj3iJLCpLzIjew7C6f9Tr8daXa3MTT9Db3zeW4Ea3wSNfJFAu8+wjD/s84veUHm9QHhUvoK6l/p9/blR7331vulA2VLXGIxnQ2NWX43p1PW5Wb/aDV0RJwfYZIWaZpi7RBlhz1d2Sb4dro6GMQvHlmnwvdFwPmMlEwvd2XheigRKmDrV3paq6zG720oM3XQa48amx279hdDr6ubcDbqLZD5ZLLkTPxnm5mrXHujjtYqYLDS3frJVg2ENjbhSsPf7rKfj3anRtc+0sZ6sXn/H9BhDEVcfnS5BFu/LGi3IZmreF1IxKWzye6boTVNVqSpLEkCSA3JVBI4qDs5gKDq7vbvzOkJOi0CftYEMTtoE5LKzkue63ldyaz7313O13Ra1CZ93wUoukQ+ycpzL62WPNhfreMW26fVUFK3lJNpwvdjq7vKuC4eaoeVDQz1pW+U4NBR6cZE5R7I+a1uNGRkzrrTYioI2UXI5v3iUldwdrheTeDUTcnhWdA3wHcDMFMnVukYwZyA3ceFWGWhgd5GLribN59pRMcC4JDrDOYnNkNrrGAZWvAl898F4lxg3rM78tOn42fqsbDVJ6UjTfWeqbjhZV3pgspptFvOduWgfSrA7BJubR6/mmcsod9bNXNZXvX60Vt0DHAJdEUUdkHTRQFM7PRB1RKDxwDuepa1YjySrnVM9Fpeqgt+pL0/efonNDu2bTLPJrAaL+nhfl5Wwuu5nm62rucv2qNqfWoeZkArnFT5UD3XTY+AxtvWl0k37R7urT0ubsXxcwm7VcnqUfxbaidbogeR8cn3NmaSL+gifNp5tL8TliPcbtq9xk9j27fiEq0ak7xK6LiKOpVanQz8tAUcTAehsZ1tR18RmkVRLzfWVJpqgraQZOG/ZtM/O973uwYcrDkTH/mK03b0XxpJzRaRyXSFtpZSaMrCKInSnM6W9BTPRcRLRUdqiDmWgr9R+viL5mnWJ8uc8ti95dBQRKNwa1IVuiZvRQjpKpzwPTqE4C9uCq+2PC6se0I09UgbTYcznGh7a4XoR7bTAS2ZJNp31+8PBcWNknd2WzCqbnvYP3LqkHHYx8IZ9w93JkWyO49UqjashTGCqxoGmHs+jNd42vU1A96o1RhzTMmyws2CTzzqmsu4nzpTpdyfhmGsIJZzZp25Q3TbzRdWY1uOGJYW2fDpR62RORyBqC5Pa3jqy7M6d5YN6bvfAbmOyw6MviCdB6a8NmE/0/mIaVGul2mEwCOizQfHDeJRPOzmv6HqVs0Sja+A48VZZ0zkmo9BiV2ZaP6zped2L/Z3AZjuDj7m5E5BijQ9W3NDGJZ1fwnXgNGLYoybUASgNe6B2TpuzeY6DEbwO0M/T4S68zg/qcbJ8GD030jEl3YpgelsWB5Aql9vkVDDTvxOYQuJZT/ZFtRUXLAinKEwrb8Wugry0MkJxPKtFjozrWuElwLKgxgCuLXCSqNA8zbRpQDcEgW9wtRvLuaL4BFGKQtsrfBU87npK/R0gDFoYhRZKng5RBl2EK3+xWOSrrIYTcvxGIUZGRHgiD9rtGlcDktJmGwLDcEBmG01JatZrQGnKYqU8jNJROEqAnaLkA0dk6Q8ccYKgF3uoIJLFaYrJcYpTkpK9echSn3k+mM8hygjVTAq212L5Zo3CXhD7qABMBZGV+eg5duNLgih8fRLSA/FFOlGMf9SpdDnpvw3x87dbNoiO5RUKuIhHRKSi6AvCy92C+T5o7jHom3mQWV5xoJPUpokHr0g+fvrdMUWr3NuFRHWDfNf8LPhglfoc0N2RdfDgvefv1wHCJgnfeLuVZG8+75+zwyG7FKFRcKmEmKcYim5QUwQzQohORrRDIXU3Qf2Ii95Rf/J8l3/El6VuOE3J/xyQlilflj+4iEwRLi4iKmn5409vOR9ckryl6Jh+JZN8cl8pEP/1SgNbsNAj4jF55FFi/S7XF7Ye/JA4iwHmhU6xKpjn6ZumgBEx65EhFiWPxr8y8JXzj8J7ku9YUtJNmyxF338pF9PptWJCGGVhqsqVi+BxYl5wpqcYtX4r/WHmwv3eyfwRf0vml9pgSmZXYFbuut7/Vn7yLu0CEdmFvQuW18qR3EuJ89B5mNDvAL8c0kKz9rch/TGStz/Ef0oecvr5f3j7Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E6432442DEBAEDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-17</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5295d99-5448-463a-a7c7-16da5cdfeac0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70045_UserGet_Portal_FUNC_CHILD_SAU_Get_ADULT_FAU_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>07.User_Get_GeoProfile_Portal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:iscportalcs1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="28545e81-0978-42f5-ad46-d710483f6d65"><con:settings/><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("V2");

def v2 = context.expand( '${#Project#V2}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140218</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_PYLD"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UVTC_PrimaryEmail_SSLKeystore_Null_200_OK_P1" searchProperties="true" id="56bae1f9-79a0-4879-97d8-60b57b4e9b67"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="2a3711fe-90bf-42d5-bb97-cf0547446437"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_null" id="166334bd-1609-472d-997b-c8d628c88acf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","");
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest_Without_SetPem");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbts4EH3vVwjqYyDrvrKE2IAvceJu06S2U7R5WVDUyGIiUYpIyU6/fkk5UmznsukCBgyOhjNnZg4PecpQllrBiDEoOcmpMp8O1H8MJwyRAb5mmRg0xwtDzf8rijUzNJFpRTjyXENV5oxVMKeMI8oHqmWYjma4mmmvLDuwrMDo91zXuVWVH1AyEVq49MSubZZSFjRpB2pV0iBHjLCAogxYwHGwHF1+DYRngFpM6vB0h7JJWA4TzotA13EvAgxpins4z/RT/cDnNGLBkqwp4lUJTzkjNlCf9m42m97G7uXlWrcMw9ANXxc+ESPrz+rwU7sZojmN8916gmhOCUYp+Y0kqEvgSR4po3Sdl4Qn2RuhTd00ZGgNtljDpkM/q/pzggbdByMdgCwZ0liCzDbYAmIogWJQbhbzgfr5YxPc7V2ViLI4LzN2tP4zSEBrSPMCIo21lbXoPh7xlXYNTwEHc4rTipEavkmaFAgDU65LiMn2K2GCfBFTmvErWyZ+pGUZ4D8Zy6m+j1VA11/pzpSsgfH/M7P9ee2i/EBpBUMOdd9c1/1J4iWbxeP0duNehGNrtczuBw2EfecdqG7cT+tjsnbcetq0uv7Oz+5Zfn6L2I3r9KNxWl8j26t/2lDGs8K3/ZF7dRJm1UlY++stT3/ePNz5aILryi3ssb2wzYvR38lmfZ59ery5mvXDvh5fnKf21vqmb2fedVhanF7+3tx9SfTvD/1xP96EztntzerLvZP8+nLCY8Pt3/uT8/nF96WfJuntj7srO/yEryfL4sKLs8mJc/MbZXfs1+C5pv0aDo2tJCyr8A4wb5eSHvOpMhPzQvx9eZEWEmlx4xoUUqMYB8rVodwlpSWohACRKBDD3K1nvmtYlud4hnHm/zX2zgzHMGfGyHB93/D741aDdiiOIE5yGhOZS6rsjj/vA8RZwIBGUGp1XuEEmPpOxCniSJnThTgcOWWwyoWKmw+0tBwbPD91NxG+d7cu9RJU3KnKt5xf0atyFHMo96TbWRnWgXQvAJOCgNR3SXAmGM646MUDqiuemr0a9ShU4gYopQgHltN3dUayIgWJVM/yqEqhVyRF0xmd7f4tDWHWWBdnq+bgvVnX8be2BcInItKByVrGIMYIL+4gM3DbQt4u2N0vuA0/qiIiz5foJy8J3iE5/PRME8mPjiOiohZy53lsOIiqHxfUJYpqgjuidze0EHhx/IftOB5Q76FX1XXVDMCT0laK8LpQOFNfAq6EPj2u8nugehdC/9D10KE+ytzZD/FVPKFLjjhkgi5Ks/zA22AJTL4N5oLn248+PA5Sir5x2PLXbJNUPCEk4ndfGTjA0k+Yr8XfJi+j53G9Emsvj6hTPAg4oWu5khfB4xukwLkIS4Ry5eV+8NcCvJb80Ng1ucPCBZvCisPbXxQpSQMVYZxXlM+namPYl8kGJ38sIHh2ehGmkeKnu3XL3rxbf15+XQrBypDa+ZL/dtZIQxcMqrzCGywDdSueiiI5Xe/J8hPAI2U2Dc+zXNM2Z7Y93Vdm2xh1ynxYyfCF+aVlr6fH52H4Lw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95107725132F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95107725131F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95107725131F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502274700E96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502274700E96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023323614</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502274700F96B7E0401F0A0599098B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2a3711fe-90bf-42d5-bb97-cf0547446437</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>166334bd-1609-472d-997b-c8d628c88acf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UVTC_PrimaryEmail_with_Valid_SAML_200_OK_P1" searchProperties="true" id="c2b92153-2851-4347-abab-9876fb05a38f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_SAML_ProjectLevel_for_Authentication"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
log.info tP.getPropertyValue("SAML")
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6uQD0IpUUGCArdR6Rdku719uTLOBNwNdohtoPvrrx2aFCjt7V4JCXkynjkzc3zsc44WqRd0OYdcEEaNsN82/6n7zdh1/FMrmXqJ5eMzsM7qfmy509PTuuc0cQsj0wg5lxBSLhAVbdNzXN9yGpZbj7x64HmB26y5fv3JNB4g5yq0cqk5prFZpJQHRdq2KXMaMMQJDyhaAA8EDibd61GgPANUYjI751uURcK8MxciC2wb12LAkKa4htnCPrf3fM5jHkzIjCIhc3jNGfO2+bp3vV7X1vUay2e25ziO7bRs5RNzMjsxO9/KzRCHNGHb9QWijBKMUvIbaVDXIOYsNrrpjOVEzBcfhHZt19GhLdhgC7s+PTHttwQFui9G2gOZc2TxOXLLYGNIIAeKwfgxDtvmydcmuN0b5YjyhOULfrD+M0hAV5CyDGKLl5WV6L4e8Ui7OueAg5DiVHKyghtNkwxh4MZdDgnZjAhX5Iu5UYzf2HD1IyXLAP/JWM7tXawKun2kO30yAy7+z8x257WN8oBSCR2UkVETi+ebJwL3w6u5/bi8m56+MLpi7QLCrvMWVDXu1/UhWStuvW4CiS8vGw82/VXveZdpdIV/PfF7Lsn6xl0PPG8Rfe9PnqKe33ucjbsvE3ikz8/w2B2PJvcobl0kP+uCXrtyPdrcfItWjrO8F9FqE27kepL88GnyxNPw58vw+4j0NtmEPibLAQ+nU3E17f1o3bHB1fh3eEt7UXeYyTS/fBjCjP+d/xV9m8+95gMb9PLR1fj2XiaDLGy/1bRbw76xlISJnD4DFuVS0yPsG0M1LyQ+lxdtIbGVFK5BpjWKC6DC7OhdWloCqQSIxIEa5nY9bDUcr153nX6/cVr3+wPHd9yh03WarZbjDZqlBm1RHEC8YDQhOpdW2S1/PgeIFwEHGkNurZjEc+DmJxH7SCAjpGN1OBjlEDGl4q4/XzfctEkE9ZZuLqceYw1MW6hpGjdM3NLbvJsIyHe0248cb0+7x4BJRkALvGY4VxTnQjVjiVZSpG5thWoUpLoCcq3CgeefNWxOFlkKGqq9YLFMoZbNs6I1Nt/+exbCvLCOB1Fx8j4s7PBb2QPlExPtwHUtPVBzhCOXkFMW8nHBjd2Cy/BdGRN9wFRDRU7wFsn+pzeeaIJUJFEVlZArz0PDXlT7sKAqUbwiuGJ6dUUrhVfnv1OOY4lqy5pcrWQxgKbWtlyFt5XEufYEsFQC9RKxX0DtKoT9pfuhQn2QubLv45NiTicCCVgouhjF8guPgwlw/TgIFdE3X3157KVUfROwEcdsF6l6Q2jEnz4zcIC1nzLfqb81y+O3cR2JtZNH1aleBILQmV7pm+DlA1JgpsISJV0s3w1+LMCx5PvGqskVFqHYNJUCPv5iaE1qmwhjJqkI+2Zh2NXJAqd4ySB4c3oXptDi18t1wz+8XB+vRxOlWAtkVr7kv50tUtAFg6nv8AJL29yot6JKTmc7uvwK8J00e13Xa7Tc4dlFc1+a+62qgXuVdN6Z31t2enp4Hjr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022A12592F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022A12591F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022A12591F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023310DD5634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023310DD5634DE0401F0A079902E7</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023335841</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023310DD6634DE0401F0A079902E7</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UVTC_PrimaryEmail_TokenType_Null_404_NOT_FOUND_P1" searchProperties="true" id="73ec4f45-080c-400a-8953-d4f615728c5f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UVTC_PrimaryEmail_TokenType_Invalid_400_BADREQUEST_P2" searchProperties="true" id="538923ed-c636-4ae4-bca5-3cfdb3566e71"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","BAD_REQUEST");
tP.setPropertyValue("TokenType","TokenType_ValidateEmail");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>BAD_REQUEST</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UVTC_PrimaryEmail_TokenType_CaseChange_for_UnlockMe_200_OK_P2" searchProperties="true" id="b91e551c-bcf8-4c4a-a2d7-53394c60b370"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasource" name="UnlockMe_various_cases" id="e3b28e30-4cfa-4b90-8a5b-f9eba8fc013c"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UNLOCKME&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:unlockme&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnLoCkMe&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Case</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",context.expand( '${UnlockMe_various_cases#Case}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Case_loop"><con:settings/><con:config><dataSourceStep>UnlockMe_various_cases</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UVTC_PrimaryEmail_TokenType_CaseChange_for_ValidateEmail_200_OK_P2" searchProperties="true" id="e3e4ed9c-3e39-41fc-aa43-788058a0c0d9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasource" name="ValidateEmail_various_cases" id="25a5ce8e-8dbd-4f20-920f-28712f02c498"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:VALIDATEEMAIL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:validateemail&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:VaLiDaTeEmAiL&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Case</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",context.expand( '${ValidateEmail_various_cases#Case}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Case_loop"><con:settings/><con:config><dataSourceStep>ValidateEmail_various_cases</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UVTC_PrimaryEmail_TokenType_CaseChange_for_ResetPassword_200_OK_P2" searchProperties="true" id="354b800b-b65f-423b-9b4d-b7aeed2e37ce"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasource" name="ResetPassword_various_cases" id="24e55ca5-bf46-474c-bf31-ce8120575185"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:RESETPASSWORD&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:resetpassword&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ReSeTpAsSwOrD&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Case</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",context.expand( '${ResetPassword_various_cases#Case}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Case_loop"><con:settings/><con:config><dataSourceStep>ResetPassword_various_cases</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UVTC_PrimaryEmail_Valid_200_OK_P2" searchProperties="true" id="5e9b36d2-48e7-4aa9-86ce-9790a8c1ec9d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="de8f9423-2e15-4a7a-882a-79fa05c96469"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU/I6EP3ur+jUj07pCy+FjjCDFgVFEYqvX+7EdIE8tik0aUF//U2KrYDo5bkzzDDZbnbP7p6c5JShMLCcNmMQcxJRpec21X+w5RtVbNqaXbZAq1h1S0O4MtEatfrkte6XUbWBVaXHWAI9yjiivKlahlnRjKpmlsdW2bEsx6qXLNN+UZUHiJkILVxKhqqswoAyJ0vbVJOYOhFihDkUhcAcjh2vfdN3hKeDckxq63SNMksYt2aczx1dxyUfMAQBLuEo1E/1LZ9TnzkemVLEkxg+c/qsqX7uXS6XpWW5FMVT3TIMQzcauvDxGZkeq62jfDP4PTqJ1utzRCNKMArIB5KgboDPIl9pB9MoJnwW/hDa1E1DhtZghTVsVuixqn8lyNAdGGkLZMyQxmbIzIONYAIxUAzK/ajXVI8Pm+B67zhGlE2iOGQ767+DBDSFIJqDr7G8shzd4RH3tKt1CtjpURwkjKRwK2kyRxiYchfDhKz6hAny+UzJxq+smPiRnGWA/2Ysp/omVgFd39Mdl0yB8f8zs815raM8oCCBFm9f2mSRsDuzywi26fDipG92KrWTq/tmBmHTeQ2qGPfnepesBbc+N13ZvcHC6Ay9dvIcvQcjs7P4IKgfGJM2lMllQpA/cx8R1EL3iY7PH+5X1+gmIfrJ6tEfVjtdgz3zpwYlN0+z9OjPsPv8Yr7dXxrW/Uvn1hp45UGq1/zl87L2WPPOK1fJCQnTIbUH7kO/+/ym49H8qTt1a2fj6XW1e0Ldy5lrv3Zhbh9drvxO9yOseSfXgdcbVlml3vyqabOGbWMuCV7y+gcwz5eSHj1XuRDzQvx3eZEW4muTzNWZS41iHChXW3KXlBYnEQJEfEcMc72+aFQNy6q3q/W6bbtWu2NUDPPCaBt2o2FU3E6uQWsUOxDPIzohMpdU2TV/fgeIQ4cB9SHW0ijBM2DqLxFdxJHSoyNxOCLKYBwJFa9P35OP5durnQI3F2lqxq90kSI/VJXbiA/oIG5POMQb0l0ZG9aWdI8AkzkBqe+S4EwwnHHRiwVKEx6YpRSVKCTiBoilCDtWpV7VGQnnAUikehj5SQCl+WyedUZn63+pRSyzjjrj7OD9WNfut7wFwscn0oHJWs5AjBH23EFmXsjPBVc3C87DtxOfyPMl+sljgtdItj990UTyo+CIqCiHXHjuGrai6rsFFYn8lOCC6MUNLQReHP9WPo4FKi1KSZom2QBsKW2xCK8LhTN1D3Ai9Ol9HL0B1YsQ+kHXQ4F6J3Nh38aX8Bn1OOIQCroo2fKAt4EHTL4NeoLnq0MfHlspRd84rPg+23kgnhAS8a+vDOxg6SfMd+JvGcX+17j2xNrII+oUDwJO6FSu5EXw/gMpcCTCEqFcUbwZfF+Afcm3jUWTCyxcsOk14fDzF0VKUlNFGEcJ5T1XzQybMpnh5O9zcL6cvoXJpPjzbl2xH+/Wp5u+JwQrRGrhS/7bWSMZXTCo8grPsDTVlXgqiuR0uiHLnwC/K7NdsY1qrVE7swtlrgplbtTPigZuVdL6Zv5u2ejp7nlo/Qs=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502274705796B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502274705696B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502274705696B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950228A58877D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950228A58877D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023347273</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950228A58887D2AE0401F0A079904DE</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de8f9423-2e15-4a7a-882a-79fa05c96469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UVTC_PrimaryEmail_Null_403_FORBIDDEN_P2" searchProperties="true" id="30ebc1b4-8e10-4fb4-a245-a1aaf5be7634"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail_null"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_REQUEST");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_REQUEST</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxnjTxLwBGaMgcRtAhTStMnLHUVeg1JbBksG019/JRM7QEluemeYMVqvds/uHh/pkqEktlyPMcg4SakS9DvqPy3LxCYyzjUHG03NaYdN7emijbXIjlrGhWM0Q9NUlYCxHALKOKK8o1qGaWumpZntO9N2Ddu1241Wu/2oKveQMRFauDQMVSmSmDK3TNtR84y6KWKEuRQlwFyO3Zl3e+MKTxdVmNTu5Q5lmTDrLjhfurqOGyFgiGPcwGmiX+oHPpchc2dkThHPM3jJGbKO+rJ3s9k0NnYjzea6ZRiGbrR14RMyMv+sdj9VmyEMaJTu1j6iKSUYxeQ3kqBugS/SUPHieZoRvkjeCG3qpiFDa1BgDZsO/azqrwlKdB+MdAAyY0hjC2RWwaYQQQYUg/J9GnTUzx+b4G7vXYYoi9IsYUfrv4MEdA1xuoRQY1VlFbqPRzzRru4lYDegOM4ZWcNI0mSJMDBlkkFEihvCBPlCppTjVwomfqRiGeC/Gculvo9VQNdPdKdP5sD4/5nZ/rx2Ue5RnEP38ZFPhr8e8iff59v543bMp1fsLIIxYp0Swr7zDlQ97pf1MVlrbr1sigP7PnicP8TnrL/x0mbfTKKxdZUsp1OLLvBq++3RHK22KXYm9s/hbys9I4W3Ai/Z3n4dJFfwnPz0JvZ33R/T/qfr5tlzZJ9lxfh6Pttui/D6OsJN/aYFX7z+Vfi0WX4NrtoP/W0W/uo5U390Y7SK3qq4N75/HX3zvqDJw7MT0ZyOJg+ffmc/4ubo2w+HXUR6b26GrdvOa037NRwaK0mY5U/PgHm1lPQI+spQzAvx9+VFWkioRaWru5QaxThQrnblLiktbi4EiISuGOZuPegPbN/xeubA9C56TnNgOIY5NDyj2W5bQ/u80qAdiiOIfkojInNJld3x532AOHEZ0BAybZ3meAFMfSdiH3GkBHQqPo6UMrhLhYoPLd8eNP2hI8B659Zw4PV6Tds/7w/EP9/3VWWU8jEdZ17EITtU8PMDBZ8CJksCUuYlz5kgOuOiJSu0znlsNtaoQSEXB0Emtdi1nFZTZyRZxiAB60ka5jE0lotl2SCd7Z6WhjArrdPBXfn9vVne8buqE8InJNKByVp6IKYJJ44iqyrk7YLb+wVX4b08JPIzE23lGcE7JIevXtkiaVJTRVRUQa49jw0HUfXjgupE4Zrgmu/1QS10XqhAtxrHCjVWjXy9zssBXEiFy0R4XQidqc8A50KmtnfpL6B6HUL/0ClRoz7KXNsP8eV8QWcccUgEXZRy+YErwgyYvCIEgu7FR+8fBylF3zgU/JTNj8VNQiJ+97KBXSz9hHkiHps0C1/HdSLWXh5Rp7gXcELnciXPg+0bpMCpCEuEgKXZfvBTAU4lPzTWTa6xcMGmp5zD228UqUwdFWGc5pQHfbU07KtliZNvl+C+Ov0RplTklyO2YG8esT9vb2ZCtxKk1r7kv501UtIFgypP8hJLRy3EjVEkp/M9dX4BeFqgjcF7An1YSfcP85+WvZ4efw/dfwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EDE3C4AB1E0F7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EDE3C4AB1E0E7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EDE3C4AB1E0E7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EDE3C4AB1E1A7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EDE3C4AB1E1A7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131219_1387458274800</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EDE3C4AB1E1B7B45E0401F0A05992F36</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UVTC_PrimaryEmail_not_exists_404_NOT_FOUND_P2" searchProperties="true" id="99c88fe2-f08c-476d-b040-fd47f6c262c8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UVTC_PrimaryEmail_an_invalid_format_404_NOT_FOUND_P2" searchProperties="true" id="d888dad6-76bd-4cf1-b3f3-f185782f3f97"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail_Invalid"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","abcgefh()@123");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UVTC_PrimaryEmail_with_Method_HEAD_405_METHOD_NOT_ALLOWED_P2" searchProperties="true" id="45d1ad7b-cba7-4d90-856e-dac408f6204e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="776b46e7-f120-4ef3-8af2-5d57dbb44661"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_HeadRequest"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","METHOD_NOT_ALLOWED");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_HeadRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>776b46e7-f120-4ef3-8af2-5d57dbb44661</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UVTC_PrimaryEmail_with_Method_GET_405_METHOD_NOT_ALLOWED_P2" searchProperties="true" id="4113cf71-75c8-4574-aeb3-e1a7e89a0489"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_GetRequest"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","METHOD_NOT_ALLOWED");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_GetRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>776b46e7-f120-4ef3-8af2-5d57dbb44661</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UVTC_PrimaryEmail_with_Method_DELETE_405_METHOD_NOT_ALLOWED_P2" searchProperties="true" id="94abf6c7-b853-4297-8602-33aeca6182ef"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_DelRequest"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","METHOD_NOT_ALLOWED");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_DelRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>776b46e7-f120-4ef3-8af2-5d57dbb44661</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_FUNC" id="98944185-5d6d-44d8-b2c4-2f0c49682abd"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="9034ae8f-47cd-428f-ae3d-e59b402755aa"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1c6a5c62-b1be-432a-a1b8-3e633ac21465"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="63b11e86-7c7d-4612-bcd3-c93a10983d6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="5bcb1c9a-2a1d-4934-838e-4093d4056f76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="56640510-8d4d-4f60-a527-3fc13e459b99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSxyrEuUAhKkhc2m7OQi/A6Wn7sjLOQNyTODR2IO2vXzs0KVDa7VkJCXkynvlm5vNnn3EcR7bX5RxSQROm+YO2/o/TIuACYGNut5DhWg4ymkH91HBmjYYFLYStU9A1n/MMfMYFZqKt28hyDVQ3LGdqO55te06j1nLqj7p2BymXoaVLDelaHkeMe0Xatp6lzEswp9xjOAbuCeJNuqOhJz09XGLSO2cblEXCtBMKsfRMk9QCIBBFpEaS2Dwzd3zOAu5N6IJhkaXwljPgbf1t73q9rq2dWpIuTBshZKKWKX0CThfHeueo3AyBz+bJZt3HLGGU4Ii+YgVqBCJMAq0bLZKUijD+JLRlWkiFNiAnBrFcdqyb7wkKdN+MtAMy5djgIbbKYGOYQwqMgPZz7Lf14+9NcLN3mmLG50ka8731n0ECtoIoWUJg8LKyEt33Ix5oV+cMiOczEmWcruBK0WSJCXDtJoU5zYeUS/IFXCvGr+Vc/mjJMiB/MpYzcxurhG4e6M6ALoCL/zOz7XltotzhKIPOjTPtZ2n/9+zGhuCShOOJbztXN+FjcNsuIGw7b0BV435b75O14tbbJjapEyAXDh08oObj5IH0Qh/Xe1M0uz93BkEfNdy81Vg8RKvhL7zKJk/Xa2jkw/vhU3P1BHD58mtud2M67N6G7pHo90w0Pr37y78+If2nxnN49TetPzrN3LX80bTOKPSd2/78vovch9Giic3mj9HViVgnuSRjTC9NfPJz1Lv5Xc8aRzPryXKvX69HI24+d0Xejx/a7zVt17BrLCVhks2egIhyqejhD7QLOS8svpYXZaGBMS9cvaXSKC6ACb2jdilp8TIpQDTw5DA364tWHQ1sZJ8Peq7VbFnnyEXWBeqieqtln/YuSg3aoNiD2E/YnKpcSmU3/PkaIIk9DiyA1FglGQmB619EHGCBNZ+N5eFIGIdpIlXcwqKxCsOlG2M6s+ym5aQIAhK9Rrp2lYhrdp125wLSLe12p8je0e4xELqkoAReMZxLinMhm/EsaSIiq7bCNQaZvAJSpcKe7TbrJqfxMgIF1YyTIIugtgyXRWtMvvm3DUx4YR2fT4uT92lh+9/KHkifgCoHrmrpgZwjHLiE7LKQzwuubxdchu9mAVUHTDZUpJRskOx+eueJIkhFEllRCbny3DfsRDX3C6oSBStKKqZXV7RUeHn+O+U4nnHtuZatVlkxgFOlbakMb0qJs8wJkEwK1Ms0+Q3MrEKY37ofKtR7mSv7Lr5MhGwisIBY0kUrlt94HEyAq8eBL4mef/flsZNS9k1ALg7Z+pF8QyjEXz4ziEeUnzTfyL91kgbv4zoQayuPrFO+CARlC7VSN8HLJ6QgiQxLpXQl6XbwQwEOJd81Vk2usAjJplkm4PMvmtKkto4JSTIm/IFeGLZ1ssApXpbgvTt9CFNo8dvlmvNPL9f70XAiFSvGeuVL/9vZoAVdiHxaSv8CS1vP5VtRJmeLLV1+A7gnzRZq2AMXNS7c3vnpjjQ3zxtVA3cq6Xwwf7Rs9XT/PHT+BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951062D40704BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951062D406F4BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951062D406F4BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D202EDB41891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D202EDB41891E0401F0A059927BF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023355909</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D202EDB51891E0401F0A059927BF</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ef970a71-ac89-4de5-b3ac-d452951d4ae0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f564e1c4-a882-43f4-a950-b4d495099626</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c6a5c62-b1be-432a-a1b8-3e633ac21465</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5bcb1c9a-2a1d-4934-838e-4093d4056f76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63b11e86-7c7d-4612-bcd3-c93a10983d6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00078_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="3ebeb9c1-b794-48e4-90c0-ad20c1a777c3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="e945343c-a840-4585-aa9e-d90769b532bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pC0VsR5jhzSMKioAv53y5E9KlBEpam7SAv/4mxVZA9HruDDMl2+3us7tPnuSSoWVguQ3GIOYkpEq3XVP/wRWwoGJMNaOCsWafTzxtMi1jzZtMHMO0UfV8glSly1gCXco4orymWuKF8NfM8tgqu5bl2mapbNh/VOUJYiZCC5eSoSrrZUCZm6WtqUlM3RAxwlyKlsBcjt1Ro99zhaeLckxq/XKLMksY12ecR66u45IHGIIAl3C41C/1PZ9Lj7kj4lPEkxjec3qspr5/u1qtSqtyKYx93TIMQzccXfh4jPinav0k/xi8Lp2G23UL0ZASjALyhiSoPvBZ6CmNwA9jwmfLL0KbumnI0BqssYZNm56q+keCDN0PI+2BjBnS2AyZebAhTCEGikF5HHZr6unPJrj9dhwjyqZhvGQH67+DBDSFIIzA01heWY7u5xGPtKt+CdjtUhwkjKRwJ2kSIQxMGcQwJeseYYJ8HlOy8StrJn4kZxngvxnLpb6LVUDXj3SnTXxg/P/MbHde2yhPKEig/jhHT5WzobH0Km/Br7T6MLx+iUz4wyaslkHYdd6CKsb9vj4ka8Gt94+4P5g3yhN0+2gg5o+eFm8xGTXbPgvWA8cKn2fXN34zKHe8W73ae707s+fmfIzue514s1pcP/zqwMaIBgPzZhBdnRirX5sXfT5n/VuzfDZv8vnzaOMZt/7g6rf4d6H3VxuHDR5upo/2PHmoLKpPjUGH99/W3VtL/LHKF3Pm6Y5xjSon1QQ568VzMjVT3O/d9X4/dGsfNe3WsG/MJWGUTOaAeb6U9Oi2lSsxL8S/lxdpIZ42zVzdSGoU40C5WpdfSWlxEyFAxHPFMLfrK6diWFbVrhoXjnPerHYM2zCvjIZRcRzDuWjmGrRFcQCxFdIpkbmkym758z1AvHQZUA9iLQ0TPAOmfhOxjThSunQoNkdIGYxDoeJ2NHcWCwKkjLw4TRdv/mxle1WuKnchv6f3cWPKId5RbntsWHvKPQRMIgJS3iW/mSA446IVryhNeGCWUlSikIgDIJYa7Fr2RUVnZBkFIIHqy9BLAihFsyhrjM62T0tDmGXWYWec7bsvyzp8l3dA+HhEOjBZSxPEFOHIEVTOC/m64MpuwXn4RuIRub1EO3lM8BbJ/qsPlkh6FBQRFeWQC89Dw15U/bCgIpGXElzwvDighb6L3V/Px/GKSq+lJE2TbABVqWyxCK8LgTP1EeBEyNNmHC6A6kUI/UenQ4H6IHNh38eX8BkdccRhKeiiZMsfXA1GwOTVoCtovv7pvWMvpegbhzU/ZmsF4gYhEX97ycAuln7CPBCPVRh7H+M6Emsnj6hT3Ac4ob5cyXNg8wUpcCjCEiFcYbwb/FiAY8n3jUWTCyxcsGmScPj6jSIVqaYijMOE8m5bzQy7Kpnh5JsI3A+nT2EyJX4/Wtfsy6P1pd8bCb1aIrXwJf/trJGMLhhUeYJnWGrqWtwURXLq76jyO8BPwlw2HafZalVanea+MJ9fFQ3cq6T+yfzZstPTw/1Q/xc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95023199BCD5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95023199BCC5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95023199BCC5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502274708996B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502274708996B7E0401F0A0599098B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023360147</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502274708A96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jD2w+PIEZYkNKEhIChOT2paPIa1Bqy9SSgPTXX8nEBAjJpXcmE0br1e7Z3aMjnTGUJo7fYQxyTjKq9cOW/hNHNRSjWsNoNuKG4dYtz2g0wTVqgLworiHs2Q1d6zMmoE8ZR5S3dMeyq4btGHZtYjX9quNbXsWpez90bQo5k6GlS8XStXWaUOYXaVu6yKmfIUaYT1EKzOfYH3cG17709FGJSW+fbVAWCfP2nPOFb5q4EgGGJMEVnKXmmbnncxYxf0xmFHGRw2vOiLX0172r1aqyqlayfGY6lmWZVtOUPhEjs696+0u5GaI+jbPNOkA0owSjhPxBCtQA+DyLtE4yy3LC5+kHoW3TtlRoA9bYwLZLv+rmW4IC3YmR9kDmDBlsjuwy2AhiyIFi0O5H/Zb+9bQJbvZOckRZnOUpO1j/HSSgS0iyBUQGKysr0Z0e8Ui72meA/T7FiWBkCTeKJguEgWnDHGKyviZMki9iWjF+bc3kHylZBvhvxnJm7mKV0M0j3QnJDBj/PzPbndcmyhQlAtoPAX4WLFzW/hHx9bObfPPIuHfhkMtBp1VA2HXegNqO+3V9SNYtt143Peb55PuyO+1Hw8Xlw9PK7C6uAsZneWfYGJpdfFMdk/WfG3s9ehxWzykMhJvZ39aC3QeDGxZdUnTbeb6w7ngEyZeVF1088Hgau1NkPz944urWXS088b0+/RFc924nVxNSnUTfHXb/MkkxFWbduXu65154Mbztnz9l8fiuN30eRbMB++L86DUno8x7IPPllffyK33qtt5q2q1h31hKwlg8PQPm5VLRox9qPTkvxD+XF2UhkREXrv5CaRTjQLneVruUtPhCChCJfDnMzbobdty6E4Rew7Hkv3rXci27Z3Usr9msVptuqUEbFAcQg4zGROVSKrvhz+cAceozoBHkxjITeA5M/yRiiDjS+nQkD0dGGUwyqeLndhCElud4tuM0gp5TC62w7gbn50HVCeudmq7dZPyW3uadmEO+p+C2s6fgI8BkQUDJvOI5k0Rnkgv4N1oKntiVJapQEPIiyJUW+47b8ExG0kUCCrCZZpFIoLKYL4oGmWzz6xgIs8I66k6K8/dheYffyk5In4goB6ZqOQc5TXh3Fdm+VxbyccHebsFl+I6IiDpmsq08J3iDZP/TG1sUTbZUkRX9DMY/7RL31v3k7e93mp+AMg/7sU0ULclO2vJOldeEFJF2Oc3fqPK7IpZLUcyvrgQyl+FNqZO2OQYspMq9TLJfQM1tCPOkS2aL+iDz1r6PT/A5HXPEIZVs04rlCS+MMTD1wujL07I+9fmyl1L2jcOaH7MFiXyIKMSfvlWwj5WfNA/lzyrLo7dxHYm1k0fWKZ8VnNCZWqnr5OUDUuBMhiVS/7J8N/ixAMeS7xu3Td5i4ZJNT4LDx180JWwtHWGcCcr7oV4YdsW2wMlfFuC/Ob0LUwj66w29Zh/e0I+D67GUvRTpW1/y384GKeiCQVcPgQJLS1/LB6dMTmc74v4K8Ki+17vuZ/q+X0n7nfm9Zaenh+eh/S8=</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022E2E1DB3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022E2E1DB3515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023363253</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022E2E1DC3515E0401F0A0799033C</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e945343c-a840-4585-aa9e-d90769b532bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00079_UVTC_PrimaryEmail_maps_to_single_user_status_pending_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="d2a42951-c7e9-4aa8-8e33-2a66a8ed89c9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj3dKXyhvHWEGRbQe8IWicvxyJ6YLRNu0NClUfv1Jiq2A6PXcGWaYbDe7z+4+eZIThsLAcrqMQcJJRBW311b/NWumhZoWaHXfamh2CzU11KiamtH0zRYCw2jZvqq4jKXgUsYR5W3VMkxbM2qaWR1bVceyHLtZqdesJ1V5gISJ0MKlYqhKFgaUOXnatpom1IkQI8yhKATmcOx43eHAEZ4OKjCpnZMNyjxh0plzHju6jis+YAgCXMFRqJ/oOz4nPnM8MqOIpwm85/RZW33fu1qtKqtqJUpmumUYhm60dOHjMzI7VjtHxWbwXTqNNuszRCNKMArIGklQQ+DzyFe6wSxKCJ+HX4Q2ddOQoTXIsIZNmx6r+keCHN0PI+2ATBjS2ByZRbARTCEBikG5H7lt9fhnE9zsHSeIsmmUhGxv/XeQgC4hiGLwNVZUVqD7ecQD7eqcAHZcioOUkSVcS5rECANTbhOYkmxAmCCfz5R8/ErGxI8ULAP8N2M50bexCuj6ge70yAwY/z8z257XJsoDClLoDO+Gz8ETfe2haHXKz+uN2o3nr+mAuFE7h7DtvAFVjvt9vU/Wklvvm8ZvbMb+WZl2MKS/Ft7F79bjumqescvW8nV9+ev01n3ETL9Ke6befQqaJp/4pN59u+v3UMsOA3gdJY3hYlA9Yw8PR1NvkM3vs95k1r8jeggWuZ2sbu9oEMNksICLzGWDF3J3sXpq+us+rmN7cjq4+t3nkzhuTN3a6NWPs4VbvY6Gl0cPc28+nXu18xppXF00rh69+/ZHTds17BoLSfDS5xfAvFhKerg9pS/mhfj38iItxNemuasTS41iHChXO3KXlBYnFQJEfEcMc7Put2qGZZnn55bV6FuGfW7Yhtk3ukaj1TKsnllo0AbFHsSziE6JzCVVdsOf7wHi0GFAfUi0ZZTiOTD1m4g9xJHi0pE4HBFlMI6kires5aL+uszEDIyXdQrMNOrr2YsQ4euI39CbpDvlkGxJtz02rB3pHgEmMQGp75LgTDCccdGLBVqmPDArS1ShkIobIJEi7Fh2s6YzEsYBSKR6GPlpAJV4Hued0dnm39IQZrl1dD7OD96Xde1/K1ogfHwiHZis5RTEGOHAHVQtCvm64Np2wUX4buoTeb5EP3lC8AbJ7qcPmkh+lBwRFRWQS899w05Ufb+gMpG/JLgkenlDC4EXx79TjGOBKotKulym+QAaUtoSEV4XCmfqHuBU6NPbOHoFqpch9B9dDyXqvcylfRdfyufU44hDKOii5MsfvA08YPJt4AqeZz99eOykFH3jkPFDtrNAPCEk4m9fGdjB0k+Yb8XfKko+Cj8UayuPqFM8CDihM7mSF8HbF6TAkQhLhHJFyXbwQwEOJd81lk0usXDBpueUw9dfFClJbRVhHKWUuz01N2zLZI6Tv8XgfDh9CpNL8fvdmrEv79bJcOAJwQqRWvqS/3bWSE4XDKq8wnMsbTUTT0WRnM62ZPkd4GdlrvfMmm1VpURvK7PdqJYN3Kmk88n82bLV0/3z0PkD</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950226D15433221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950226D15423221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950226D15423221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950221EE227F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950221EE227F204E0401F0A079902D1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023367390</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950221EE228F204E0401F0A079902D1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00080_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="85ef62bb-46de-4fd4-8875-687a90e1adc7"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyjyjkyi0qSKHQit7oAZbt9uXIdYbgNrEhdoD2168dmhQo7ekeCQl5Mp75ZubzZ59ylMSOH3AOqSCMaoNeW//Xrrm251iW8QiobniuYxmtsFEzGrgl/70Gbjx6ujbgPIMB5QJR0dYdy/YMq2bY7sRxfcfxa061brUedG0KKZehpUvV0rVNElPu52nbepZSnyFOuE9RAtwX2B8HN9e+9PRRgUnvnG5R5gnTzlyIhW+auBoChjjGVcwS89Tc8zkNuT8mEUUiS+EtZ8jb+tve9XpdXbtVlkamLNMyrZYpfUJOoh9656TYDOGAzth2fYYoowSjmLwiBeoGxJyFWhBHLCVinnwS2jZtS4U2YIMNbHv0h26+J8jRfTPSHsiUI4PPkV0EG8EMUqAYtJ+jQVv/8b0JbvdOUkT5jKUJP1j/HSSgK4jZAkKDF5UV6L4f8Ui7OqeA/QHFccbJCm4VTRYIA9fuUpiRzTXhknwh1/Lxaxsuf6RgGeC/GcupuYtVQjePdKdHIuDi/8xsd17bKFMUZ9C5punV9LmFKv1e86n5uqRsYa5v661Fc93OIew6b0GV435bH5K15NbbpteLl8qVlT1065VZxRtexMPnrIYCx41HVz9/0wfvvhlFSXwOvxajs82sOazdDS9vzv657I8SPpo+BdRJr6Pb9ThG9gllg77dHK4z+4KHUB93YSmSs/WTYJVp5F5a3vypnlaS6/v7afdueRvcvSQPm/D3c7P38MqvLFSpv1xGs2UFnw+6J86jOZ3+CvjSHuPeY8Mmk9/t95p2a9g3FpIwzh6fAItiqegx6Gnncl5IfC0vykJCY5a7+gulUVwAFXpH7VLS4mdSgEjoy2Fu1+etmm01Gk7NDrrnrtvrW55ln1uBVWu1XCvoFhq0RXEA8YzRGVG5lMpu+fM1QJz4HGgIqbFiGZ4D17+I2EMCaQM6koeDUQ4TplTcZWkKHmo4ycyyQ8I5QTXXjWaOrt0yMaTDNJgJSHe025tYzp52jwCTBQEl8IrhXFKcC9mMJVplIrarK1SlkMkrIFUq7Dtes2ZykixiUFDNhIVZDNXFfJG3xuTbf8dAmOfWUX+Sn7xPCzv8VvRA+oREOXBVSxfkHOHIJeQVhXxecG234CJ8kIVEHTDZUJESvEWy/+mdJ4ogJUlkRQXk0vPQsBfVPCyoTBSuCC6ZXl7RUuHl+e8U41ii6rKarVZZPoCG0rZUhjelxNnmGHAmBeplwp6BmmUI81v3Q4n6IHNp38eXiTkdCyQgkXTR8uU3Hgdj4OpxMJBE33z35bGXUvZNwEYcs53F8g2hEH/5zMA+Vn7SfCf/1iwN38d1JNZOHlmnfBEIQiO1UjfByyekwEyGJVK6WLob/FiAY8n3jWWTSyxCsukxE/D5F01pUltHGLOMikFPzw27OpnjFC8L8N+dPoTJtfjtct3wTy/X+5vrsVSsBOmlL/lvZ4PkdMGgqzs8x9LWN/KtKJPTaEeX3wB+kOa60/OswPO6/cauNDvNfr1s4F4lnQ/mj5adnh6eh84f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951062D40A54BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951062D40A44BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951062D40A44BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951077251ABF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951077251ABF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023371505</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951077251ACF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00081_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="28c5758e-ce78-440c-95b8-896a2508e87d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMP7ABewIzNM4Ht5Q0QNqkL3eEvMYCWwZLNpBffyUTO0BJbnpnmGG0Xu2e3T060gVDSWx5fcYg4ySlysDvqv/MbLvthKGpOR0Aze5YSHMB2tpshk0bHBTgjq0qA8ZyGFDGEeVd1TJMWzMczWxOraZnWZ7TajQN95eq/ICMidDCpWGoyjaJKfPKtF01z6iXIkaYR1ECzOPYm/S/DT3h6aEKk9q72KMsE2a9iPOVp+u4EQCGOMYNnCb6hX7kcxEwb0LmFPE8g5ecAeuqL3s3m01j02yk2Vy3DMPQDVcXPgEj889q71O1GYIBDdP9+hLRlBKMYvKMJKhvwKM0UPrxPM0Ij5I3Qpu6acjQGmyxJppHP6v6a4IS3QcjHYHMGNJYhMwq2BhCyIBiUB7Gg676+WMT3O+dZoiyMM0SdrL+M0hAC4jTFQQaqyqr0H084pl29S4AewOK45yRAkaSJiuEgSnfMwjJdkiYIF/AlHL8ypaJH6lYBvhPxnKhH2IV0PUz3fHJHBj/PzM7nNc+yg8U59Dju3j0rH+Blj66Ge0KHR5m4fevE/zo3ndLCIfOe1D1uF/Wp2StufWyKWx2/urA7OuvHGcPrfXUQkkbDGf6OIAwSgjyWyOXmrfNq+c7fXBvTVq6dbNc/v00545v30+i9nCNn578RWu6uf/UTvxx4UcsfCY87Rf2zah/WSxpO1qg1jSKH3czNuTmZP1Y/GiRu1s36DwNY/O2g5bD8c+fVrJrzfrbn9aXxfMm+nQ7X9q3lw876/Hab7HOzW1udF9rOqzh2FhJwiSfLQDzainpMfCVazEvxN+XF2khgRaWrt5KahTjQLnak7uktHi5ECASeGKY+/W16xiW6VpN13Cal45xZdiGeW30jbYrLX6lQXsUJxAvUxoSmUuq7J4/7wPEiceABpBpRZrjCJj6TkQfcaQM6FgcjpQymKZCxU28WbhzwT4aBsh0WgsntRbrZWceqsoo5Xf0LuuHHLID7banhnWk3WPAZEVACrxkOBMUZ1w0Y42KnMdmo0ANCrm4AjKpwp5ldxydkWQVg4SqJ2mQx9BYRauyNTrb/1sawqy0jq+m5cl7s7DTb1UPhE9ApAOTtXwBMUc4cwnZVSFvF+wcFlyF7+cBkQdMNJRnBO+RHH965YkkSE0SUVEFufY8NRxF1U8LqhMFBcE10+srWii8OP+9ahxr1Fg38qLIywG0pbZlIrwuJM7UJ4BzIVC7aboEqtch9A/dDzXqk8y1/RhfziM64YhDIuiilMsPPA4mwOTjYCCIvv3oy+Mopegbhy0/Z7uMxRtCIn73mYE9LP2E+bv426RZ8DquM7EO8og6xYuAEzqXK3kT7N4gBU5FWCKkK80Og58LcC75sbFuco2FCzbNcg5vf1GkJnVVhHGaUz7w1dJwqJMlTr5bgffq9FuYUotfLtcte/Nyffw2nAjFSpBa+5L/dtZISRcMqrzDSyxddSveiiI5nR/o8gvAE2k2jXanaVv+lWG6di3Njus2jb5ZN/Cokt5v5t8tBz09PQ+9fwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951078342DF0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951078342DE0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951078342DE0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950219239053C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950219239053C50E0401F0A0799053D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023375048</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950219239063C50E0401F0A0799053D</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00082_UVTC_PrimaryEmail_maps_to_single_user_status_blocked:clg_Token_Type_ResetPassword_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="e110b51f-03f4-4c95-8ba2-f8792ccff496"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb6M6EH7fX4HYxxXhkkACaiKluXTZNr0k6WX7cuSaIXgXTGobSvbXH0MKTdLL6R4pUuRhPPPNzOfPPuIoiS1vyDkwQVKq+OO++k9o2CHCuKc9dB4etI7tGpqL3Z6GUdAFy3F6tmWqis95Bj7lAlHRVy3D7GiGrZntpdX25M8wWm2ne68qN8C4DC1dWoaqFElMuVel7asZo16KOOEeRQlwT2BvMZydedLTQzUmdXC0RVklZINIiLWn67gVAIY4xi2cJvqRvudzFHBvQVYUiYzBc86A99XnvU9PT62nditlK90yDEM3XF36BJysvqqDL/VmCHwaptv1CNGUEoxi8geVoGYgojRQhvEqZUREyTuhTd00ytAaFFjDZod+VfWXBBW6T0baA8k40niEzDrYHEJgQDEo13O/r3793AS3e5cMUR6mLOEH67+DBDSHOF1DoPG6shrd5yO+0a7BEWDPpzjOOMnhvKTJGmHgyiWDkBRnhEvyBVypxq8UXP5IzTLAfzOWI30Xq4Suv9GdMVkBF/9nZrvz2ka5QXEGA1Mnj9GNU9xPo0U3dsi8sI6/4dtf3Zz3Kwi7zltQzbif14dkbbj1vIms/gieFNPEcOnJpGdcZ9+vb29vJh03ubgT3831ozHf+GDf/bCHM9/e5E/OJmK2c3+RRz/c0fx+ctW7PwVxezO7/HIdXMFZcHXyc7i5HOqz83X7/M94c2L5Szj9GU7S3yIfRz/mpHv3TXYXZjgqihX0LiN2fYameH6adZfzya/Vyfo3+XI9sjtzJz8dLceM9ZKfKbvqv9S0W8O+sZaERfbwC7ColyU9/LEylfNC4mN5KS0k0MLK1VuXGsUFUKEOyl2ltHiZFCASeHKY2/XUtQ3LMhx32jUnxyNnYnQMc2oMja7rGtbouNagLYoDiKOUhqTMVarslj8fA8SJx4EGwLQ8zXAEXP0g4hgJpPh0Lg9HSjksU6ni1kMS2gnftJkhzNxNGCRhEQEKVeU8FRf0gg1DAWxHujtLw9qT7jlgsiZQ6ntJcC4ZzoXsxSPKMxGbrRy1KGTyBmClCHtWp2frnCTrGEqkepIGWQytdbSuOqPz7b+lIcwr63yyrA7eu3UdfqtbIH0CUjrwspZjkGOEV3eQ5dl1Ie8XbO8WXIcfZgEpz5fsp2AEb5Hsf3qhScmPhiOyohpy43lo2IuqHxbUJApyghuiNze0FHh5/Af1OB5R67GV5XlWDaBbShuT4XWpcKa+AJxJfdos099A9SaE/qnroUF9kLmx7+PLREQXAglIJF2UavmJt8ECePk28CXPi88+PPZSyr4JKMRbtlEsnxAl4g9fGdjDpZ80X8q/p5QFL+N6I9ZOHlmnfBAIQlflqrwINu+QAqcyLJHKlbLd4G8FeCv5vrFpcoNFSDY9ZALe/6KUktRXZWvTjAp/rFaGXZmscIrNGrwXp1dhKil+vlsL/u7dejc7W0jBSpDa+JL/dtZIRRcManmFV1j6aiGfijI5Xe3I8jPAA2U2DdecmNbU6R5bZqPMtuu2XcdpGrhXyeCV+bVlp6eH52HwLw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091E12F77B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091E12F67B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091E12F67B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022069F71EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022069F71EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023379157</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022069F72EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00083_UVTC_PrimaryEmail_maps_to_single_user_status_suspended_Token_Type_ResetPassword_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="61d2d5cb-9794-41aa-922b-2b93ed48622c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3A5jynjC3bArkAVCcksG3LDzuxMXraE3BgRWzaWbGC/fiUTO0Auy2wVVZTare7T3UdHOmcoiS1vwBjknKRUGQ176t+2M7PNjuFqDrY7mt0FQ0NTAA3b3fbUdKfTTmiryoixAkaUcUR5T7UM09YMRzPbgdX2xM+wW67ZflaVH5AzEVq4tAxVWScxZV6VtqcWOfVSxAjzKEqAeRx7/uB27AlPD9WY1P75FmWVMO/POc88XcetEDDEMW7hNNHP9T2f85B5Poko4kUOrzlD1lNf965Wq9aq3UrzSLcMw9ANVxc+ISPRidr/Vm+GcERn6XZ9iWhKCUYx+QdJULfA52moDOIozQmfJ5+ENnXTkKE1WGMNmzY9UfW3BBW6IyPtgcwZ0tgcmXWwCcwgB4pBeZqMeurJcRPc7g1yRNkszRN2sP49SEBLiNMMQo3VldXojo/4Qbv654C9EcVxwUgJd5ImGcLAlIccZmQ9JkyQL2RKNX5lzcSP1CwD/DtjOdd3sQro+gfdGZIIGP8/M9ud1zbKDxQX0J9315uzwWLld4JRl1pOkP6MA3LzdH276lUQdp23oJpxv64Pydpw63XT1F1ekT+M8vp0E0X+uPR/Tn6NzZeb2fiHG3QfnrE1MePOd/R4GZz6wVm5eWg//8UfTev+V0nK5fcLZ2oHfHpDIxp+Y6eRf+8uTxfGozFMLc5XsJi0k0y/srJFwgbghs5y/kxeziz/pu3+GiyzNdssFvnTXfulfbvKQv1x82c0LJ1N+1thPJOy+zRKF+PMdacXcyvqvdW0W8O+sZYEv5guAPN6KekxGirXYl6Ify0v0kJCbVa5epnUKMaBcrUvd0lp8QohQCT0xDC362vXMYaW4Qxdu3vpDI0rwzbMa2NgdFzXOTu7qDVoi+IA4mVKZ0Tmkiq75c/XAHHiMaAh5FqZFngOTP0i4hBxpIzoRByOlDIIUqHi5gzFszOcZPOZszDzjJvdLM03cVdo913K7+l9PphxyHe02w4Ma0+7J4BJRkAKvGQ4ExRnXDRjicqCx2arRC0KhbgCcqnCnmV3HZ2RJItBQtWTNCxiaGXzrGqNzrb/loYwq6yTq6A6eZ8Wdvit7oHwCYl0YLKWCxBzhHeXkOU5dSGfF+zsFlyHHxQhkQdMNJTnBG+R7H9644kkSEMSUVENufE8NOxF1Q8LahKFJcEN05srWii8OP/9ehxL1Fq2irIsqgF0pLblIrwuJM7UfcCFEKhNkL4A1ZsQ+lH3Q4P6IHNj38dX8Dn1OeKQCLoo1fKIx4EPTD4ORoLo62NfHnspRd84rPlHtstYvCEk4i+fGdjD0k+YH8TfKs3Dt3F9EGsnj6hTvAg4oZFcyZtg8wkpcCrCEiFdab4b/KMAHyXfNzZNbrBwwaZpweHzL4rUpJ6KME4LykdDtTLs6mSFk28y8N6c3oWptPj1cl2zTy/Xn7djXyhWgtTGl/y3s0YqumBQ5R1eYempa/FWFMlptKPLrwAPpNk0Op1B+/pyOBDCvCfNjmM0DdyrpP/O/N6y09PD89D/Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951077A3FCEA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951077A3FCDA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951077A3FCDA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D205D948C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D205D948C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023383676</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D205D949C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00084_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_ResetPassword_node_role_Retailer_(Negative)_404_NOT_FOUND_P1" searchProperties="true" id="40eaf3f7-16c6-4b32-aa1a-0ef8e3e173da"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj1WIE5IGooLErW1a2LKFZdu+HLmOCS6JDbHDpb/+2KFJgV5O90hIyJPxzDcznz/7nMMktv0W5zgVhFEt6Db0fxC2Lc8BNcPDoGo4HnKN2hOcGmG1dubWnfAMeqGuBZxnOKBcQCoaug0sxwCuYVXHdtWXP1CvWJ73qGsTnHIZWrpUgK5tkphyP0/b0LOU+gxywn0KE8x9gfxRa9D3pacPC0x683yHMk+YNmdCLHzTRJUQIxzHqIJYYp6bBz7nIfdHJKJQZCl+zRnyhv66d71eV9bVCksj0wYAmKBuSp+Qk+iH3jwpNuMwoFO2W3cgZZQgGJMXqEANsJixUGvFEUuJmCWfhLZMC6jQBt4gA1kO/aGbbwlydN+MdAAy5dDgM2gVwe7wFKeYIqz9vgsa+o/vTXC3d5xCyqcsTfjR+u8gYbrCMVvg0OBFZQW670f8oF3Nc4z8gKI442SFfyqaLCDCXBumeEo2fcIl+UKu5ePXNlz+SMEyjP5mLOfmPlYJ3fygO10SYS7+z8z257WLMoFxhpvtm6uHK6vqdl4G0WjSm13ePmyCDo7I87yRQ9h33oEqx/26PiZrya3XTU8dwh/ak6VnXo0Gs+cJYs9Ru7d027HlzcnZ8GXZGW+W7f6fBPTdEPRa7WqQ2llw1xZZbTgfD7bt2moW3dCbJTvppDej7GV1FmzvN9e/13305/SXNXPX42zV6sy2vVYN/XoMVpb3Z5hEUXDVunSGj85p8AAfJ1YnYuHtZuQ89U+5V+2fTGrXv6GZtq/vL39dPs8Xw9Oo8VbTfg2HxkISRtnTM0aiWCp6BF3tQs4Liq/lRVlIaExzV3+hNIoLTIXeVLuUtPiZFCAS+nKYu/VF3QVdG3i9bqdnd9tODzjAugAt4NXr7pnnFhq0Q3EEscPolKhcSmV3/PkaIEp8jmmIU2PFMjTDXP8iYhcKqAX0Th4ORjkeM6niL4LPo/mLM68/UYu4NfC8CBmAW6hrP5m4pbdpaypwuifdzhjYB9J9hxFZEKz0XRGcS4ZzIXuxhKtMxFZlBSsUZ/IGSJUI+7ZTc01OkkWMFVIzYWEW48pitsg7Y/Ldv21AxHPrXW+cH7xP6zr+VrRA+oREOXBVSxvLMeJ3d5Dtu0Uhnxfs7hdchG9lIVHnS/ZTpATtkBx+eqOJ4kfJEVlRAbn0PDYcRDWPCyoThSuCSqKXN7QUeHn8m8U4lrCyrGSrVZYPwFPSlsrwplQ4yxxhlEl92o7ZHFOzDGF+63ooUR9lLu2H+DIxoyMBBU4kXbR8+Y23wQhz9TYIJM833314HKSUfRN4Iz6ydWL5hFCIv3xlIB8pP2keyr81S98K/yjWXh5Zp3wQCEIjtVIXwfYTUiAmwxKpXCzdD/5RgI+SHxrLJpdYhGTTUybw5180JUkNHSLEMiqCrp4b9mUyxym2C+y/Ob0Lk0vx69264Z/erfeD/kgKVgL10pf8t7NBcrogrKsrPMfS0DfyqSiT02hPll8BHimzBbwzp1O1L6oXNVAqs1uvV0GrWzbwoJLmO/N7y15Pj89D818=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9510764C3303F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9510764C32F3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9510764C32F3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D207EDCE2DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D207EDCE2DB4E0401F0A07995675</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023387850</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D207EDCF2DB4E0401F0A07995675</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00085_UVTC_PrimaryEmail_maps_to_single_user_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_(Negative)_404_NOT_FOUND_P1" searchProperties="true" id="afc34952-aacd-4514-a661-e2b55e746e66"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxnjDzCJPYEZ3xBy3YbQAiFpX+4IeQGltmwk2QF+/ZVM7AAluemdYYbRerV7dvfoSJccJbHjB5wDEySlWtjr6P/AHFkuth0DuQ4yWk17ZiB7dmGgVqtpgW1hz/F0LeQ8h5Bygajo6I5ltwzLNezmxGn68mc7Da9l/9S1KTAuQ0uXhqVr6ySm3C/TdvScUT9FnHCfogS4L7A/Dga3vvT0UYVJ717uUJYJWXcpROabJm5EgCGOcQOniXlpHvhcRtwfkwVFImfwkjPiHf1l7/Pzc+O52UjZwnQsyzItz5Q+ESeLz3r3U7UZopDO0936CtGUEoxiskUK1ADEMo20IF6kjIhl8kZo27QtFdqANTaw3aKfdfM1QYnug5EOQDKODL5EdhVsBHNgQDFo96Owo3/+2AR3eycMUT5PWcKP1n8GCWgBcZpBZPCqsgrdxyOeaFf3ErAfUhznnBRwp2iSIQxc+8ZgTta3hEvyRVwrx6+tufyRimWA/2Qsl+Y+VgndPNGdHlkAF/9nZvvz2kWZojiH7uJHfjaEILvexk3M6NDMVy4tHqLR9KJTQth33oGqx/2yPiZrza2XTXzaTl2Kvw3osogGX0LnkQYjNNz0fpw9fGGD87vlbDZiTw93Y2u9DTZylPP0a/9rK1uiba8owunX/ve752H/dtBzPvUCcRX/CsLVz5uHlv33TRtvJ6Psy723iIbOMFnn37Op83SGCRms88d0dHuD7u/Z9iaGNBw4F9ufI4s9fKcLdzW7+JRs15Mz1nbb4c1k+vjYnJo/Oq817ddwaKwkYZzPngCLaqnoEfa0vpwXEu/Li7KQyJiXrn6mNIoLoELvql1KWvxcChCJfDnM3brvubZ1Hlhe32vb52372mpZdt8KrHPPc91WUGnQDsURxKuUzonKpVR2x5/3AeLE50AjYEaR5ngJXH8nYg8JpIV0JA9HSjlMUqni9oatFo77tD1/yu18YRU2acNsgyNdu0vFkA5ZMBfA9qS7NbGcA+keASYZAaXviuBcMpwL2YsVKnIR240CNSjk8gZgSoR9p3XhmpwkWQwKqZmkUR5DI1tmZWdMvvuXqoR5aR1dT8qD92Zdx9+qFkifiCgHrmr5C+QY4cQdZFWFvF2wu19wFT7II6LOl+ynYATvkBx+eqWJ4kfNEVlRBbn2PDYcRDWPC6oTRQXBNdHrG1oKvDz+3WocK9RYNfKiyMsBnCtpYzK8KRXONseAc6lPm0n6C6hZhzA/dD3UqI8y1/ZDfLlY0rFAAhJJF61cfuBtMAau3gah5Pn6ow+Pg5SybwLW4pTtKpZPCIX43VcG9rHyk+Zv8u85ZdHruE7E2ssj65QPAkHoQq3URbB5gxQ4lWGJVK6U7Qc/FeBU8kNj3eQai5BsmuUC3v6iKUnq6AjjNKci7OmlYV8mS5xik4H/6vRbmFKKX+7WNX/zbn0c3I6lYCVIr33JfzsbpKQLBl1d4SWWjr6WT0WZnC72ZPkF4JEyW45zdX3Rc5q2d9Wuldn1PMtrv3L5oJLub+bfLXs9PT4P3X8B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022CE8D2419C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022CE8D2319C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022CE8D2319C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107A09F961761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95107A09F961761E0401F0A0799554A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023391653</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95107A09F971761E0401F0A0799554A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00086_UVTC_PrimaryEmail_maps_to_single_child_user_and_valid_node_role_DECE_CS_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="a35634a4-7590-47da-b0f7-0ab131ffb256"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser" id="86ed78e0-67f4-45d3-bfde-62c6b9ba296b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb6M6EH7fX4HYxxXhkgsBNZHS0pxl22yzTdPby5FjJom7YFNsaNpfvzYJNEnTnu6RkJCH8cw3Mx+ffcRREjv+gHPIBGFUC4Oe/m/bdqLO3HONmYUco+XOZgbqdD3Ddl3bA2xH0PV0LeQ8h5Bygajo6Y5ltwyrbdjNK6fpy8d2G47TvNe1a8i4DC1dGpaurZKYcr9M29PzjPoMccJ9ihLgvsD+ZDA696WnjypMev9ojbJMmPWXQqS+aeJGBBjiGDcwS8wjc8fnKOL+hCwoEnkGm5wR7+mbvU9PT42nZoNlC9OxLMu0PFP6RJwsvur9L9VmiEI6Z+v1CaKMEoxi8oIUqBGIJYu0QbxgGRHL5J3QtmlbKrQBK2xgu0W/6uZrghLdJyPtgMw4MvgS2VWwS5hDBhSDNr0Me/rXz01wvfcqQ5TPWZbwvfXfQQJaQMxSiAxeVVah+3zEA+3qHwH2Q4rjnJMCfiqapAgD18YZzMnqnHBJvohr5fi1FZcPqVgG+G/GcmRuY5XQzQPdCcgCuPg/M9ue1zrKNYpz6LPl2QsquvcT3CaxOboFNBllTxCe00GvhLDtvAZVj3uz3idrza3NppcheozHvBNAPL/5ieePF3e21+18z7g1EBAc//g1jZMonnZuT8dscAb/pD+Gs7up0xkzuCuC6e30Yug9O3f8oRt8WX03r6K0DcsmosHv7rdzcXu3QO4wsUfTi2zWDfO4e7O8CwSQe/c6zifitnVydj12nW/Ruf395jQ/HXkt2xmF2a8vYoa7x/PnceGSeILC06IY9V5r2q5h11hJwiSfPQAW1VLRIwy0oZwXEh/Li7KQyJiXrn6qNIoLoELvq11KWvxcChCJfDnM9XrotW2r02wF3WEwcNqDU6tl2UNrYLme15bmSoPWKPYgnjA6JyqXUtk1fz4GiBOfA40gMwqW4yVw/YOIARJIC+ml/DkY5XDFpIrzaJayeIHynLXSZtx9eImei+XLg679ZOKCXmSDuYBsS7lbV5azo9yXgElKQMm74jeXBOdCtuIRFbmI7UaBGhRyeQBkSoN9p9Vtm5wkaQwKqJmwKI+hkS7TsjEmX78dA2FeWsuuYl7+e++Wtv+t6oL0iYhy4KqeY5CThAPHkFUV837R7e2iq/CDPCLqF5MtFRnBayS7n16ZoihS02RTVQW79t437EQ294uqk0UFwTXf64Na6rxUgX41lkfUeGzkRZGXg3CVwmUyvCmFzjYngHMpU89X7DdQsw5hfuqUqFHvZa7tu/hysaQTgQQkkjZaufzEFWECXF0RQkn31WfvHzspZd8ErMQh20ksbxIK8YeXDexj5SfNY/l6Yln0Oq4DsbbyyDrlvUAQulArdR48v0MMzGRYIgWMZdvBDwU4lHzXWDe5xiIkm2a5gPe/aEqZejrCmOVUhIFeGrbVssQpnlPwX53ehCkVeXPErvi7R+zt6HwidStBeu1L/tvZICVdMOjqJC+x9PSVvDHK5HSxpc4bgG8E2rOHA/e46VleUAt02/OantuqG7hTSf+N+a1lq6f7/0P/Dw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091FA7B6909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091FA7B3909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091FA7B3909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510634D8FDA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510634D8FDA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023396108</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9510634D900A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F9510634D8FDA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F9510634D8FDA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023398802</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95023199C325CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95023199C325CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95023199C355CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022E2E1DB3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022E2E1DB3515E0401F0A0799033C</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022E2E1DC3515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023363253</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>86ed78e0-67f4-45d3-bfde-62c6b9ba296b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00087_UVTC_PrimaryEmail_maps_to_single_child_user_and_node_role_Retailer_Token_Type_ResetPassword_(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="8c2dd307-b480-416b-8c11-d2b5d073be4e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1XIhXtUkCjQbbr0sgXabl+OjDOA28QG2wm0v/7YoUmB0p7ukZCQJ+OZb2Y+f/aJQHHk+R0hgEvCqBH0WuY/1QaE1dB1LNdpNK2K22hYCBoTy5tUwXMatWoDlU0jECKBgAqJqGyZnuNWLKdqueWRV/b1zy01G7VH07gDLlRo5VJyTGMdR1T4WdqWmXDqMySI8CmKQfgS+8PO5cBXnj7KMZntkw3KLCFvz6Vc+LaNSyFgiCJcwiy2T+wdn5NQ+EMyo0gmHN5yhqJlvu1drValVbnE+Mz2HMexnaatfEJBZsdm+yjfDGFAp2yz7iLKKMEoIq9Ig7oEOWeh0YlmjBM5jz8J7dquo0NbsMYWdiv02LTfE2TovhlpByQXyBJz5ObBbmEKHCgGY3wbtMzj701ws3fEERVTxmOxt/47SEBTiNgCQkvkleXovh/xQLvaJ4D9gOIoESSFK02TBcIgjBsOU7IeEKHIFwojG7+xFupHcpYB/puxnNjbWBV0+0B3emQGQv6fmW3PaxPlDkUJtFFwfXEzfB6DCz9q/TpdPNd+Dm4e3e5o1sogbDtvQBXjflvvk7Xg1tumDgS1KDi7T393n15YUDk/Pa+tWNQf/6o+dya8MllieXfeGPGkXJ8069V77ydi0Z8urBB6ubjzOvE0qYxf76Nfi97RQ3oVuDd9YGm9fho4r+j39WqxHDfioTNbootLN57FiVd7qtyjcSW4uHqtBY/nl7f1u3N+ObofcLi+ruMR/ZGOL8QRf756GLjey+N5Ah5a/WmWO633mrZr2DXmkjBMJk+AZb7U9Ah6xpmaF5Jfy4u2kNCaZq7+QmuUkECl2da7tLT4iRIgEvpqmJv1WbPq9DzH6/fLHbfRdPtOxXHPnI5TbTa9+ulZrkEbFHsQu4xOic6lVXbDn68B4tgXQEPgVsoSPAdhfhGxhyQyAnqrDgejAkZMq/hTBCBFPY1T6S7nsydwvXpSqzyZxhWT1/Sad6YS+JZ0V0aOtyPdt4DJgoDWd01woRgupOrFEqWJjNxSikoUEnUDcC3CvldpVG1B4kUEGqkdszCJoLSYL7LO2GLz71kIi8x62x9lB+/Tuva/5S1QPiHRDkLXcgpqjHDgDnLzQj4vuLpdcB6+k4REny/VT8kJ3iDZ/fROE82PgiOqohxy4blv2Ilq7xdUJApTgguiFze0Enh1/Nv5OJaotCwlaZpkA6hraeMqvK0UzrWHgBOlTy8j9gzULkLY37oeCtR7mQv7Lr5EzulQIgmxoouRLb/xNhiC0G+DQPF8/d2Hx05K1TcJa3nI1o3UE0Ij/vKVgX2s/ZT5Rv2tGA/fx3Ug1lYeVad6EEhCZ3qlL4KXT0iBmQpLlHIxvh38UIBDyXeNRZMLLFKxaZJI+PyLoSWpZSKMWUJl0DMzw7ZMZjjlywL8d6cPYTIpfrtb1+LTu/XhcjBUghUjs/Al/+1skYwuGEx9hWdYWuZaPRVVcjrbkuU3gPvK7HlOrXnW6fZPu7VCmevNpuN1T4sG7lTS/mD+aNnq6f55aP8L</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022069FADEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022069FACEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022069FACEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D202EE3A1891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D202EE3A1891E0401F0A059927BF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023400891</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D202EE3B1891E0401F0A059927BF</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950D202EE3A1891E0401F0A059927BF</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950D202EE3A1891E0401F0A059927BF</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023403773</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950D205D977C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950D205D977C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950D205D978C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022E2E1DB3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022E2E1DB3515E0401F0A0799033C</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022E2E1DC3515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023363253</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00088_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_DECE_CS_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="542ed7a3-092b-4653-8446-9dd45d559424"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="c09203d8-6ef5-46c8-bd4d-8f8aa8b9182e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate" id="a9b8fb06-87e6-40e0-83d5-0949c5c080b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser" id="ebb7da15-3993-4208-813b-9b89f0c35a15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSxyrkQggQARKXsidt6Q0Wyr6sjDMBt8FJYwdof/2xA0mB0m7PSpEiT8Yz38x8+ewGQ8vQctuMQcJJRBWv11T/xUG56hgB1ma+b2l2DZe1etVGWlCtQt3GZiUIbFXxGEvBo4wjypuqZZi2ZlQ0szyyyq58nFKtXv5HVcaQMBFauJQMVdksQ8rcLG1TTRPqRogR5lK0BOZy7A7bgxtXeLoox6S2GluUWcKkteA8dnUdl3zAEIa4hKOl3tAPfBo+c4dkThFPE9jl9FlT3e1dr9eldbkUJXPdMgxDN+q68PEZmZ+rrbN8M/geDaLtuotoRAlGIXlHEtQA+CLylXY4jxLCF8svQpu6acjQGmywhk2bnqv6R4IM3Q8jHYBMGNLYApl5sEcIIAGKQfn70Wuq5z+b4HbvKEGUBVGyZEfrP4MEdAVhFIOvsbyyHN3PI55oV6sB2PUoDlNGVnAraRIjDEy5TyAgmxvCBPl8pmTjVzZMPCRnGeA/GUtD38cqoOsnutMjc2D8/8xsf17bKGMUptAK6Ww6+ctgv6bJrRFMnsd6u94te7xbGzQzCPvOW1DFuHfrY7IW3Npturtoj+O+Xu2N5rWB/WLGt73x26LPr3o3nWuv+2S+zdOqPh10BmjK799n80W/fcVX/gPYZLxwLBpNk/dOd5ail+BsMl/Fl44z+hUjJ30Mnn4Nw6vL+G46mj0b4SYo3zlL4xkNwb54tK/vJk574fG36zKM++uxWekuJutJpYLWD2XnYXBWwYN342YW1tbTizSeEYGi+VHTfg2HxlwShunsGTDPl5IeXk/pi3kh/r28SAvxtSBzdWOpUYwD5WpL7pLS4qZCgIjvimFu1/16xbCsnmN1rF6/3+leGrZh9o22Ua3XDevSzDVoi+IIYjeiAZG5pMpu+fM9QLx0GVAfEm0VpXgBTP0mYg9xpHj0UfwcEWUwioSKP5u1ulGN5j7C9jtLK3Yy29QsUJXbiN/Ru6QdcEj2hNseGdaBcD8CJjEBqe6S3kzwm3HRiVe0SnlollaoRCEV+p9ICXYtu1bRGVnGIUic+jLy0xBK8SLO+qKz7dvSEGaZNWsqZtmv92Vlx9/yJggfn0gHJuvpgBgknDiFzLyYr4uu7Bedh2+nPpF/mOgoTwjeIjn89EEUyZCCJbuqctiF97HhILJ+XFSRzF8RXNC9OKeFzAsRaOVjeUWl11K6WqXZIKpS4BIRXhc6Z+pDwKlQqbdR9AJUL0LoPzokCtRHmQv7Ib6UL+iQIw5LQRslW/7ghjAEJm8InmD75qfXj4OUom8cNvyUrRuKi4RE/O1dA7tY+gnzvXito8T/GNeJWHt5RJ3iWsAJncuVPA7eviAGjkRYIvQrSvaDnwpwKvmhsWhygYULNs1SDl9/UaQwNVWEcZRS7vXUzLAvlhlO/haD++H0KUwmyLsTdsO+PGGfBjdDIVtLpBa+5L+dNZLRBQuZEv4Zlqa6ERdGkZzO98R5B/BYn3uW4XRqNeeyWunv63PFcfpFAw8qaX0yf7bs9fT4f2j9Bg==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206B889E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D206B886E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D206B886E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D62B2DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D62B2DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023405830</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D62B30FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510927515A7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510927515A7965E0401F0A05993983</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510927515D7965E0401F0A05993983</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023408535</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95022D62B2DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95022D62B2DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023411720</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F9502358DE0F1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F9502358DE0F1B42E0401F0A05990975</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F9502358DE121B42E0401F0A05990975</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F9510927515A7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F9510927515A7965E0401F0A05993983</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F9510927515D7965E0401F0A05993983</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023408535</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c09203d8-6ef5-46c8-bd4d-8f8aa8b9182e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00089_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_Retailer_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="d192abfb-a32f-4270-8f87-90733ead7c29"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSxyrkziUCJFpgS09vC/T6sjLOBEwTJ8QO0PPr1w5NChS6PSshIU/GM9/MfP7sJkNRaHkdxiDlJKbKoNtS/6n6bjWoN7AWOJajOVU70OqOXdUatVowCayqie26qgwYy2BAGUeUt1TLMB3NcDXTHlu2J362U6nX7FdVeYSUidDCpWKoyjoKKfPytC01S6kXI0aYR1EEzOPYG3Vurj3h6aECk9publDmCdP2jPPE03Vc8QFDGOIKjiO9qe/4NH3mjciUIp6l8JHTZy31Y+9qtaqs7EqcTnXLMAzdaOjCx2dkeqq2T4rN4A9oEG/WF4jGlGAUkt9IgroBPot9pRNO45TwWXQktKmbhgytwRpr2HToqap/JsjR/TDSDsiUIY3NkFkEG0IAKVAMysNw0FJPfzbBzd5xiigL4jRie+s/gwR0CWGcgK+xorIC3c8jHmhXuwnYG1AcZows4VbSJEEYmHKfQkDW14QJ8vlMycevrJn4kYJlgP9kLE19G6uArh/oTpdMgfH/M7PteW2iPKIwg/b8pXrO5s+LMV8ZydvVYMHRnf43v1m/TVs5hG3nDahy3B/rfbKW3PrYhMOAdl8f7Qu7b8x6jTfy6tq3D1bDoR0WJg+NKHZ6L7fkRp9H5iIY9sbO9fhhGA9cq78eRmum31v15/e7p2oDw8nEXSbUyoz5rycUBPHUubxaPFD4q+MCPrucP3ZW/avz9FW3rvRgaT8RIxutznt9jt36HJLr35n5Yp1dGf2zrvN2Mpmc0V7o33V6i/vZpdEYE9b6rGm7hl1jIQmjbDIHzIulpMegq/TFvBD/Xl6khfhakLt6idQoxoFytS13SWnxMiFAxPfEMDfrfsM1LLvbb3S6tV7PsnqGY5h9o2PUGg3DMTuFBm1Q7EG8iGlAZC6pshv+fA8QRx4D6kOqLeMMz4Cp30TsIo6UAR2KwxFTBuNYqHjNdAlhlo8odepGlU9IsJ7BqqYqtzG/o3dpJ+CQbim3MzasHeUeAiYJASnvkt9MEJxx0YoFWmY8NCtLVKGQiQsglRrsWU7d1RmJkhAkUD2K/SyESjJL8sbobPNvaQiz3CqYlp+7o2Xtfys6IHx8Ih2YrOUcxBThwBVkFYUcL9jdLrgI38l8Io+XaCdPCd4g2f30yRJJj5IioqICcum5b9iJqu8XVCbylwSXPC8vaKHv4vS3i3EsUGVRyZbLLB9ATSpbKsLrQuBMfQQ4E/L0Po7fgOplCP1Ht0OJei9zad/Fl/EZHXHEIRJ0UfLlD54GI2DyaTAQNF//9N2xk1L0jcOaH7JdhOIFIRF/+8jAHpZ+wnwv/lZx6n+O60CsrTyiTvEe4IRO5UreA+9HSIFjEZYI4YrT7eCHAhxKvmssm1xi4YJNk4zD8S+KVKSWijCOM8oHXTU3bKtkjpO/J+B9On0Jkyvxx9W6Zkev1ueb65HQqwippS/5b2eN5HTBoMobPMfSUtfipSiS0+mWKn8A3BfmrmUIUTYdq3vubAuzW625ZQN3Kml/MX+1bPV0/zy0/wU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D207EE152DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D207EE142DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D207EE142DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DF9AD7EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DF9AD7EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023413579</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DF9AD8EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510634D930A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510634D930A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510634D931A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023416480</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F95023DF9AD7EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95023DF9AD7EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023418519</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95106352E86D0B0E0401F0A07995357</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95106352E86D0B0E0401F0A07995357</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95106352E87D0B0E0401F0A07995357</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F9510634D930A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F9510634D930A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F9510634D931A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023416480</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00090_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_DECE_CS_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="63ad22d7-bbe5-4b25-9075-991e3baf09ea"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="2ef02e16-f3f8-47c6-8253-f3a5a6d71656"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jDwwET2CGxGTiNjS5gaRpXu4IeQE1tmQkGZP8+koGO0BJbnpnmDFar3bP7h4f6VSgNPGCgRDAJWHUiMKe+a/jTWeug8DqtHDT8k/Uv6mLppbX9rtOq9VstpyOaURC5BBRIRGVPdNzXN9yWpbbnHjNQP18r9Fstx5N4x64UKGVS8MxjXWaUBGUaXtmzmnAkCAioCgFEUgcjAejq0B5BqjCZPZPNyjLhLy/kDILbBs3YsCQJLiBWWqf2ns+p7EIxmROkcw5bHPGomdu9xZF0SiaDcbntuc4ju10beUTCzL/bPY/VZshjuiMbdbniDJKMErIC9KgRiAXLDYGyZxxIhfpG6Fd23V0aAvW2MKuTz+b9muCEt0HI+2B5AJZYoHcKtgtzIADxWDc3UY98/PHJrjZO+GIihnjqThY/x0koCtIWAaxJarKKnQfj3ikXf1TwEFEcZILsoLvmiYZwiCMGw4zsr4iQpEvFkY5fmMt1I9ULAP8N2M5tXexKuj2ke6EZA5C/p+Z7c5rE+UeJTn0v3iysEfeePnkX50ss/g5Qo/s0fWKX0WvhLDrvAFVj3u7PiRrza3tpigc/Fhfvoxu0uG3syz9Gj/R6/lZGH9NZfNy8nJnw3j6ck87+eTHs3zwmLzwh/Rh8OtuslzOJ6sfeej4D52U3z10k0+j7MuSF632Y0qnJ105XH6/ffqnC+PzYvJtFP38SW9mHn3yF9y7P89eurwdXU+/XK7WXucSz4b+IxT8zkYMh81w/Ok5e0qvO1f27LId34T6v997rWm3hn1jJQnjfPoLsKyWmh5RaFyoeSH5vrxoC4mtWekaZFqjhAQqzb7epaUlyJUAkThQw9ysL7otJ/ScznDoeV545g8d33EvnIHT6XZb7U6r0qANigOI54zOiM6lVXbDn/cB4jQQQGPg1orleAHCfCdiiCQyInqrPg5GBUyYUvGsy9bUb86LpPDcVTETzcUatV+Wc9P4zuQ1veaDmQS+I93+xPH2pPsWMMkIaH3XBBeK4UKqXizRKpeJ21ihBoVcnQBci3Dg+SctW5A0S0AjtVMW5wk0skVWdsYWm6dnISxKa9lWLMqP783aDt9VbVA+MdEOQtdzBmqUcOQcalbFvF10a7foKvwgj4n+xlRPJSd4g2T/1StVNEdqnmyrqmDX3oeGvcj2YVF1snhFcE34+qRWQq9koF+NZYkay0a+WuXlIDpa4rgKbyulc+0x4Fzp1POEPQG16xD2h46JGvVB5tq+jy+XCzqWSEKqaGOUyw/cEcYg9B0hUnxff/QCspdS9U3CWh6znSfqKqERv3vbwAHWfsp8ox4F4/HruI7E2smj6lQXA0noXK/0gfD8BjEwU2GJUjDGd4MfC3As+b6xbnKNRSo2TXMJb78xtDT1TIQxy6mMQrM07MpliVM+ZxC8Ov0RppTk7Rm7Fm+esQ+jq7ESrhSZtS/5b2eLlHTBYOqjvMTSM9fqyqiS0/mOPG8BHiq0kua2d+aHFxdn57sK7XhDt27gXiX9P8x/WnZ6evg99H8D</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022D62B50FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022D62B4DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022D62B4DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D207EE222DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D207EE222DB4E0401F0A07995675</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023420705</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D207EE252DB4E0401F0A07995675</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950225FC2D21379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950225FC2D21379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950225FC2D51379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023424234</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950D207EE222DB4E0401F0A07995675</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950D207EE222DB4E0401F0A07995675</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023427844</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F9510927517C7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F9510927517C7965E0401F0A05993983</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F9510927517F7965E0401F0A05993983</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F950225FC2D21379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F950225FC2D21379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F950225FC2D51379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023424234</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F950225FC2D21379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F950225FC2D21379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F950225FC2D51379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023424234</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2ef02e16-f3f8-47c6-8253-f3a5a6d71656</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00091_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_Retailer_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="4cc03fc6-cb76-40b5-a7ee-4efe68237db1"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chTggfiQoSJaVLP7eE0paXK+M44DaxaewEur9+7dCkQGlv90pIyJPxzJmZ42Mfc5jEttfjHKeCMKoN/Y7+b9OZ1RGwkdGetSPDcZ2ZAWeWa7QgQk23jSIIHV0bcp7hIeUCUtHRbWA5BmgYVn1s1z35a4Ba22pPdW2CUy5DS5ca0LV1ElPuFWk7epZSj0FOuEdhgrknkBf0ri496enBEpPePd6gLBKm3YUQS880US3ECMcxqiGWmMfmjs9xyL2AzCkUWYrfcoa8o7/tXa1WtVW9xtK5aQMATOCa0ifkZH6kd3+Um3E4pBHbrPuQMkoQjMlvqEBdYbFgodaL5ywlYpF8EtoyLaBCG3iNDGQ59Eg33xMU6L4ZaQdkyqHBF9Aqg41whFNMEdbuRsOOfvS9CW72jlNIecTShO+t/w4SpjmO2RKHBi8rK9F9P+KBdnWPMfKGFMUZJzm+VjRZQoS59ivFEVlfEi7JF3KtGL+25vJHSpZh9DdjOTa3sUro5oHu+GSOufg/M9ue1ybKBMYZ7j7SeXB/9pi1B/cuzH9ORQCvrIem/3T+2CkgbDtvQFXjflvvk7Xi1tum6BTdt/O893B+lbtx/3Y8wU/j5qJ/2zprtk4skK7uGF0szxYsGT+fZ45As/H1NbqFj3eLUev59h8etKfmRd6z6+mP4Zj77VViRaMWsC/ymd2bhcTOgyD4iQdza5qOUL93f2E7iT21Jsng5KUeJRNitybTGZr4A/v15mJ6Bh7m90/mj2vn3HQv/Ag0T/ut9Cpbz0477zVt17BrLCUhyGZPGIlyqegx9LWBnBcUX8uLspDQiApXb6k0igtMhd5Vu5S0eJkUIBJ6cpib9cBtAN8GDd89Bf2GD06BA6wB6IGW6zaazZNSgzYo9iD2GY2IyqVUdsOfrwGixOOYhjg1cpahBeb6FxF9KKA2pCN5OBjleMykiltuM/sdt+3Gspm32NIl7BlzFi6grl0zcUNv0l4kcLol3c4Y2DvSPcKILAlW+q4IziXDuZC9eIF5JmKrlsMaxZm8AVIlwp7ttBsmJ8kyxgqpmbAwi3FtuVgWnTH55t82IOKFdXQ6Lg7ep3XtfytbIH1Cohy4quUEyzHiA3eQUxbyecGN7YLL8L0sJOp8yX6KlKANkt1P7zRR/Kg4IisqIVee+4adqOZ+QVWiMCeoInp1Q0uBl8e/W47jBdZealmeZ8UAWkraUhnelApnmQFGmdSn17GcPDWrEOa3rocK9V7myr6LLxMLGggocCLpohXLb7wNAszV22Aoeb7+7sNjJ6Xsm8BrccjWj+UTQiH+8pWBPKT8pPmX/FuxNHwf14FYW3lknfJBIAidq5W6CF4/IQViMiyRysXS7eCHAhxKvmusmlxhEZJNs0zgz79oSpI6uuwiy6gY+nph2JbJAqd4XWLv3elDmEKK3+7WNf/0bn24ugykYCVQr3zJfzsbpKALwrq6wgssHX0tn4oyOZ1vyfIbwH1ltm0XtNqtunVy4lfK3HBd4LpW1cCdSrofzB8tWz3dPw/dPw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950229078741BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950229078731BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950229078731BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D205D9E0C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D205D9E0C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023429525</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D205D9E1C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950225FC2EF1379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950225FC2EF1379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950225FC2F01379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023432573</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950D205D9E0C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950D205D9E0C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023435635</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F9502206A005EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F9502206A005EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F9502206A006EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F950225FC2EF1379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F950225FC2EF1379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F950225FC2F01379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023432573</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F950225FC2EF1379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F950225FC2EF1379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F950225FC2F01379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023432573</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00092_UVTC_PrimaryEmail_maps_to_multiple_users_status_pending_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="6967c3b3-6827-4ff0-9143-094fc4e42c2d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="5ac36cb2-3283-48c3-a275-53020173907c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="dcd426a0-46ce-42f5-a670-edfd3d75c9f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSRxRyIQESFSQupaSnLT3clu7LyjgGTINNY4fbr187NClQ6HJWQkKejGe+mfn82XcMLELLqzGGIo4pUfxmRf3HKLjOuBg4muU4Jc22xyVt7BZLmmGapj1xA8Oxoar4jMXIJ4wDwiuqZZi2ZjiaWehbBU/8nHLedu2/VWWIIiZCC5e8oSqbRUiYl6StqHFEPAoYZh4BC8Q8Dr1e7fnJE54eSDGp1bs9yiRhVJ1xvvR0HeYDBFEYwjykC/1OP/K5C5jXw1MCeByhz5wBq6ife9frdX5dyNNoqluGYeiGqwufgOHprVq9STejwCcTul83AKEEQxDiHZCgnhGf0UCphVMaYT5bXAht6qYhQ2toAzVo2uRW1b8SJOiujHQEMmJAYzNgpsG6aIIiRCBSBl2/ot5eN8H93n4ECJvQaMFO1n8GCZEVCukSBRpLK0vRXR/xTLuqdwh6PoFhzPAKvUiaLAFETHmN0ARvnjAT5AuYkoxf2TDxwynLEPyTsdzph1gFdP1Md5p4ihj/PzM7nNc+yhCEMaoa9XL5tz97LAOL1QfbQQEOeqPalhTGfiWBcOi8B5WN+3N9StaMW5+bevdj0hn2H/AHXfaC7jt/b8MBLHXRr3Wco6MhWz+MYI0PdmuXN4aNp+J9bbV7xzNjbY5zf9VYe+5uaGcUvb0M72/MjtnKPRaNpjNuf/x6KhVXhefHpe0bb/akMa03Xwu794fyMDca91u/56xHcusdXkZkkKO8UeTlwWNUbi/q4VZ/1m+GiM/fuvMJ67Y7cRO3X19o5aumwxqOjakk9OLxHEGeLiU9/KbSEvMC/Gd5kRYcaJPE1VtKjWIcEa5W5S4pLV4sBAgHnhjmft1yHaNpGU6tbputUsu+N2zDbBk1o+S6TrHophq0R3ECsUHJBMtcUmX3/PkZIFx4DJEARdqKxnCGmPpDxCbgQPFJVxwOShjqU6HicYHPpwCzEE/nZWZak53F1lsuTscL5R3SiWoTjqID5bb7hnWk3F0E8RIjKe+S30wQnHHRig+winlo5lcgT1AsLoBIarBn2WVHZ3ixDJEEqi9oEIcov5wtk8bobP9vaQCyxNq97yfn7mJZp9/SDgifAEsHJmupIzFFdOYKstNCLhfsHBachq/FAZbHS7STRxjukRx/+mKJpEdGEVFRCjnzPDUcRdVPC8oSBSsMM55nF7TQd3H6q+k4PkD+Ix+vVnEygJJUtkiE14XAmXoPwVjI07ZP3xHRsxD6VbdDhvokc2Y/xhfzGelxwNFC0EVJllc8DXqIyaeBL2i+ufbdcZRS9I2jDT9na4TiBSER//jIgB6UfsL8Kv7WNAq+xnUm1kEeUad4D3BMpnIl74HtBVJAKsJiIVw0Ogx+LsC55MfGrMkZFi7YNI45uvxFkYpUUQGENCbcb6qJ4VAlE5x8u0Tel9O3MIkSf16tG3bxah09P/WEXi2Amvni/3bWcEIXiFR5gydYKupGvBRFcjI9UOVPgCfCbBquVXJMt1Fyi04mzI7rFtxyIWvgUSXVb+bvloOenp6H6r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9510927519D7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9510927519C7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9510927519C7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D205AB41F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D205AB41F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023437397</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D205AB42F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510634D967A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510634D967A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510634D968A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023439990</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ac36cb2-3283-48c3-a275-53020173907c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcd426a0-46ce-42f5-a670-edfd3d75c9f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00093_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="f0f6e7ee-6126-4161-8db3-e4c38cec5365"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH3PV7g8j1vG9xhcgSoSSOIZyAWY7My8bAlZBgVbMpYEznz9SiZ2gFw2s1VUUWq3uk93Hx3pjIEsdcI+Y6jgmBItGnT1f2IbOaB9GhgdHwWGFwNgzIM4MJLA9vzEb8du7OlaxJhAEWEcEN7VHcv2DMs3bHfmuKHjhZbXCgL/l649oILJ0NKlZelamaWEhVXari4KElLAMAsJyBALOQyn/fEolJ4hqDHpvbMdyiph0VtynoemCVsxgihNYQvSzDwzD3zOYhZO8YIALgr0nDNmXf1573a7bW3dFi0WpmNZlml1TOkTM7z4ovdO6s0ojkhCd+sLQCjBEKT4N1Cgxogvaaz10wUtMF9m74S2TdtSoQ1UQgPaHvmimy8JKnSfjHQAsmDAYEtg18EmKEEFIhBp3ydRV//yuQnu9s4KQFhCi4wdrf8MEiIblNIcxQarK6vRfT7iG+3qnSEYRgSmguENulE0yQFETLsrUILLEWaSfDHTqvFrJZM/XLMMwT8Zy5m5j1VCN9/ozgAvEOP/Z2b789pFeQCpQL0hOU3Of6burT2Kyfn8psxzMbjp/52uo24FYd95B6oZ9/P6mKwNt543PV3e485skU/K5WbyOB79WpOoff4XzL9SrxyVaXn+4zaL0qTIHr/OR+s5FOzOWVnZOPXn97crfLc6vR8Po+ufA5eerC6mQS5G7oN/Nbu6/u3M8Sa7+LmlcBh/fZil5dNVJsS4DwcjHk3HD9f5vPDuOmM6dsuBPcu91ems8G6/+6vZ6eUJjb+l8PfWFZ1OIO7O4b17332pab+GQ2MtCVMxf0SQ10tFj2igXcp5Af6xvCgLjo2kcg1zpVGMI8L1ntqlpCUUUoBwHMph7taXHd9yXNe2hpf+qesNhpZn2ZdW3wo6HcsZBrUG7VAcQbygJMEql1LZHX8+BgizkCESo8LYUAGXiOkfRBwADrSITOThoIShGZUqTjd24eBFe5V6ED0hjhPqz5Ngq2s3lN+S26KfcFTsKbc3s5wD5Z4giHOMlLwrfjNJcMZlK9ZgI3hqtzagRZCQF0ChNFhubfsmw1meIgXUzGgsUtTKl3nVGJPt/h0DQFZZJ8NZde7eLev4W90B6RNj5cBULedIThG9uoLc0K8Leb9gf7/gOnxfxFgdL9lOXmC4Q3L46YUlih4NRWRFNeTG89hwENU8LqhJFG8wbHjeXNBS3+Xp79XjWIPWuiU2G1ENIFDKVsjwphQ425wiKKQ8Pc3oChGzCWF+6nZoUB9lbuyH+ARfkikHHGWSLlq1/MTTYIqYehpEkublZ98dByll3zgq+Vu2i1S+IBTiDx8ZMITKT5rv5N+WFvHLuN6ItZdH1infAxyThVqpe+DpHVJAKsNiKVy02A/+VoC3kh8amyY3WLhk01xw9P4XTSlSVwcQUkF4NNArw75KVjj5U47CF6dXYSolfr5aS/bu1fpjPJpKvcqA3vji/3Y2cEUXiHR1g1dYunopX4oyOVnsqfIzwFfCbDt92wnantPxD4TZv2g3DTyopPfK/Nqy19Pj89D7Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212A12794295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212A12784295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212A12784295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023310EF5634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023310EF5634DE0401F0A079902E7</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023443649</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023310EF6634DE0401F0A079902E7</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95023DF9B34EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95023DF9B34EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95023DF9B35EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023446517</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00094_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="513169b1-502a-41ae-a207-31e0a07f1610"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC+GSqCBx3Wa37bZcum1fjowzAdPEDrEDtL/+OKFJgdKe7pGQkCfjmW9mPn/2OUdRaLkdziERhFHF67fUf5pVMOrGrKFZdh1rtmUjzcEQaKbtGw3DaNpN31QVj/MUPMoFoqKlWoZpa0ZNM6sTq+patmsalYZZfVSVO0i4DC1dKoaqbKOQcjdP21LThLoMccJdiiLgrsDuuHN16UpPFxWY1Pb5DmWeMGkvhIhdXccVHzCEIa5gFunn+oHPuc/dMZlTJNIEXnP6vKW+7t1sNpVNtcKSuW4ZhqEbji59fE7mZ2r7W7EZfI8GbLfuIcoowSgkLygDdQViwXylE85ZQsQi+iC0qZtGFlqDLdawadMzVX9LkKP7YqQDkAlHGl8gswg2ggASoBiU6chrqWdfm+Bu7yRBlAcsifjR+u8gAV1DyGLwNV5UVqD7esQT7WqfA3Y9isOUkzVcZzSJEQau3CQQkO0l4ZJ8Plfy8StbLn+kYBngvxnLub6PVULXT3SnT+bAxf+Z2f68dlHuUJhCe+zNcNVe6tMgsvE0cPTwdo0Qqze6D60cwr7zDlQ57tf1MVlLbr1uGt394Lf3y81dzJObmcmWS+T5D3SxuWu8UH6N02p/9jyJaXVDflz+mYqrn8PGqA/L28fZBgUPtYu425xcX187dmx869UfR8RbfWdLWA0C/WJ1+XTRTePB9KY5nnp03PcMPRzS2+nwz+NFfQ6BvX6Bxnf48/PXANL6PfuxhKfxr/A28qbfjMvIe+x0pvdx7QGqo8DpPrXeatqv4dBYSMI4nS0Bi2KZ0cPrK0M5LyQ+l5fMQnwtyF3dONMoLoAKtZ3tyqTFTaUAEd+Vw9yth07NsKzeoNl3LNPp1QeGbZhDo2PUHMdw6k6hQTsURxB7jAYky5Wp7I4/nwPEkcuB+pBoa5biBXD1k4h9JJDi0ZE8HIxymDCp4s7GMrm1Yk/hS2rOzGT9Ugvj5+Z6rSrXTPymv5NOICDZk257YlgH0j0CTGICmb5nBOeS4VzIXqzQOhWhWVmjCoVU3gBJJsJya7OmcxLFIWRI9Yj5aQiVeBHnndH57t/SEOa5dTSY5Afvw7qOvxUtkD4+yRx4VksX5BjhxB1kFIV8XHBtv+AifCf1SXa+ZD9FQvAOyeGnN5pk/Cg5IisqIJeex4aDqPpxQWUif01wSfTyhpYCL49/uxjHClVWlXS9TvMBNDJpS2R4XSqcqY8Bp1KfnifsCahehtC/dD2UqI8yl/ZDfKlY0LFAAiJJFyVffuFtMAaevQ08yfPtVx8eByll3wRsxSlbL5RPiAzxp68M7OLMT5pv5N+GJf7buE7E2ssj65QPAkHoPFtlF8HzB6TATIYlUrlYsh/8VIBTyQ+NZZNLLEKyaZYK+PiLkklSS0UYs5QKr6/mhn2ZzHGK5xjcN6d3YXIpfr1bt/zDu/X+6nIsBStCaulL/ttZIzldMKjZFZ5jaalb+VSUyel8T5ZfAb5X5n7d6jrN4bDbK5W5IZXZGrxx+aCS9jvze8teT4/PQ/tf</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022D62B99FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022D62B98FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022D62B98FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022CE8D9219C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022CE8D9219C6E0401F0A05990969</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023449512</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022CE8D9319C6E0401F0A05990969</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951092751DC7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951092751DC7965E0401F0A05993983</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951092751DD7965E0401F0A05993983</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023452449</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00095_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked:clg_Token_Type_ResetPassword_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="a185002c-03db-47e8-bbbe-c6931cf96ec0" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1XIB4FABEh8hNuotEWFdtt9uTLOAG4Th8ZOgP31aweSAqW93SshIk/GM2dmTo7dYigKLbfLGCScxFTxB23133mjac3MhqnZpin+6pahIQc1NccM5jMDO/NG4KiKz1gKPmUcUd5WLcOsaqalWdWpabu1plurVhq15i9VeYSEidDCpWKoyiYKKXPztG01TagbI0aYS1EEzOXYnXRvRq7wdFGBSe20dijzhElnyfnK1XVcCQBDGOIKjiO9pR/5tALmTsiCIp4msM8ZsLa637teryvraiVOFrplGIZuNHXhEzCyuFA7P4rNEPh0Hu/WfURjSjAKyW8kQd0AX8aB0g0XcUL4MvoktKmbhgytwQZr2LTphaq/J8jRfTPSEciEIY0tkVkEu4c5JEAxKA/3flu9+N4Ed3unCaJsHicRO1n/HSSgGYTxCgKNFZUV6L4f8Uy7Oi3Ark9xmDKSwa2kyQphYMo4gTnZjAgT5AuYko9f2TDxIwXLAP/NWFr6IVYBXT/TnQFZAOP/Z2aH89pFeURhCp0e52t+fb++Iqvh66M959sZaTQvf94auJ1DOHTegSrHvV+fkrXk1n5TNp5us8Yz0ReN+s+bxc3ijqM7c9voJfpLdcGnt7Xb8Jktf191yXNt/ID73SvsN+pzvBytq+O30UjPrLdX+MVnK/vHjDjbzZJtGwPkvP4zvvKGD5tlNLVrBvUXt3dbbKdLLxJEiJ/7mQMZD5IteapDMqCPw6vRnVd9vb6033pPzez1x+ba8TfB+PGS+k+j+oO1erHb7zUd1nBsLCRhks5eAPNiKenhD5ShmBfiX8uLtJBAm+eu7kpqFONAudqRu6S0uKkQIBK4Ypi7tedVa72BU6sNeoNa3eh6hm2YQ6NrOM2m3TPqhQbtUJxA7Md0TmQuqbI7/nwNEEcuAxpAomVxipfA1C8iDhBHik/vxccRUwbTWKj40BnatukNh4bZ73nNXn8wrFb7nlUfek2va3VV5Tbmd/Qu6c45JMcK7hwp+D1gsiIgZV7ynAmiMy5a8oaylIdmJUMVCqk4CBKpxa5lN2o6I9EqBAlYj+IgDaGyWq7yBuls97Q0hFluvfem+ff3aXmn74pOCJ+ASAcma+mBmCacOYrsopBPC7aMw4KL8N00IPIzE23lCcE7JMev3tkiaVJSRVRUQC49Tw1HUfXTgspEQUZwyffyoBY6L1SgU4zjDVXeKmmWpfkAHKlwiQivC6Ez9QngVMjUdhq/AtXLEPq3TokS9Unm0n6ML+VLOuGIQyToouTLb1wRJsDkFcEXdN989/5xlFL0jcOGn7P1Q3GTkIi/vGxgF0s/YR6LxzpOgvdxnYl1kEfUKe4FnNCFXMnzYPsJKXAswhIhYHFyGPxcgHPJj41lk0ssXLBplnL4/I0ilamtIozjlHJ/oOaGQ7XMcfLtCtx3pw9hckXeH7Eb9ukR+3QzmgjdipBa+pL/dtZIThcMqjzJcyxtdSNujCI5XRyo8x7geYHuel8J9HElnQ/mj5aDnp5+D50/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EE35BD755DAF560AE0401F0A07994B06</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EE35BD755DAE560AE0401F0A07994B06</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EE35BD755DAE560AE0401F0A07994B06</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EE35BD755DBD560AE0401F0A07994B06</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EE35BD755DBD560AE0401F0A07994B06</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131223_1387810851947</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EE35BD755DBE560AE0401F0A07994B06</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EE35E16238921F94E0401F0A0799363A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EE35E16238921F94E0401F0A0799363A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE35E16238931F94E0401F0A0799363A</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20131223_1387810870995</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00096_UVTC_PrimaryEmail_maps_to_multiple_users_status_suspended_Token_Type_ResetPassword_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="10d2354e-fa6d-49ed-aba7-27c527718308" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc5s6EH3vr2DIYweDAH8xsWfwBylpksax27R5uSMLYSsBgSVhO/31V8KB2K6Tm94Zz3i0rHbP7h4d6ZzDNLE9n3PMBMmoFo56+j9u1wLWHHcMN467hmtbrgFhBxvN5rztWm2IQQR1LeS8wCHlAlLR020LOAawDduZgaZnWV7TbbS6rQdd+4EZl6GlS8PStW2aUO6VaXt6waiXQU64R2GKuSeQN/Wvrzzp6cEKk94/36EsE7L+UojcM03UiDDCSYIaKEvNc/PA5zzi3pQsKBQFwy85I97TX/ZuNpvGxmlkbGHalmWZVteUPhEnizO9/6najKOQxtluPYQ0owTBhPyGCtQ1Fsss0vxkkTEilukboYEJLBXawFtkIODSM918TVCi+2CkA5CMQ4MvIaiC3eEYM0wR1r7fhT397GMT3O2dMUh5nLGUH63/DhKma5xkOY4MXlVWoft4xBPt6p9j5IUUJQUna3yjaJJDhLl2y3BMtleES/JFXCvHr225/JGKZRj9zVjOzX2sErp5ojsjssBc/J+Z7c9rF+UHTArcX0YpmA2tTWcehFFr+Bg/runSbH1+fPjeKyHsO+9A1eN+WR+TtebWyyZYNId5OIkv3Wffceb2ZZAE99bTZrBpp9MH9yu7+fL0YCdtMbz/klJ68bPjThbWxl/m3cJ8GKcT//LhadsZZK3Z06fVU3BPJ/fRL7FZjZjTup2wqZj/Wn5Pbvh9gAFM2GDhxnAVCHc1zbvX1zBvfr54HtyhyzzO/BsnXGwuaNwWnfGnMaDoxxL4F1m8YqvB79uJ23utab+GQ2MlCdNi/oiRqJaKHuFIC+S8oHhfXpSFREZcunq50iguMBV6X+1S0uIVUoBI5Mlh7tbjsdMcOsB1By0/GHfHY8u1QGD5VrvbdQeWXWnQDsURxGFGY6JyKZXd8ed9gCj1OKYRZsY6K9ASc/2diCMooBbSO3k4MsrxLJMqHlhBa+COnUHHAaOg63dA03bdptsFgzEYgaGu3WTiG/3G/FhgdqjgnQMFv8OI5AQrmVc855LoXMiWrOC6EAlorGGD4kJeBExpsWe7nabJSZonWAE20ywqEtzIl3nZIJPv/m0DIl5a78az8vy9Wd7xt6oT0iciyoGrWgZYThOfuIrcqpA3C7bBfsFVeL+IiDpmsq2CEbRDcvjplS2KJjVVZEUV5Nrz2HAQ1TwuqE4UrQmq+V5f1FLnpQr0q3GsYGPVKNbrohxAWykck+FNKXTAnGJUSJl6nmVPmJp1CPNDt0SN+ihzbT/EV4glnQoocCrpopXLDzwRppirJ0Io6b796PvjIKXsm8Bbcco2TORLQiF+97GBPKT8pPlW/m0yFr2O60SsvTyyTvkuEIQu1ErdB89vkAJlMiyRApax/eCnApxKfmism1xjEZJN80Lgt79oSpl6OkQoK6gIR3pp2FfLEqd4zrH36vRHmFKRX67YLX/ziv15fTWVupVCvfYl/+1skJIuCOvqJi+x9PStfDHK5HSxp84vAI8FegxattMZjkDQdfcF2mk5ft3Ag0r6f5j/tOz19Pg89P8F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EE35E16238CE1F94E0401F0A0799363A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EE35E16238CD1F94E0401F0A0799363A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EE35E16238CD1F94E0401F0A0799363A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EE35C3144B6AFE9EE0401F0A07994B02</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EE35C3144B6AFE9EE0401F0A07994B02</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131223_1387810911866</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EE35C3144B6BFE9EE0401F0A07994B02</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EE35C3144BD1FE9EE0401F0A07994B02</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EE35C3144BD1FE9EE0401F0A07994B02</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE35C3144BD2FE9EE0401F0A07994B02</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20131223_1387810931931</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00097_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_ResetPassword_node_role_Retailer_404_NOT_FOUND_P1" searchProperties="true" id="427e6d4a-9abd-4a29-835f-61a692700e70"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMP4AYewIzEJOWNgkpEJrm5Y4ir7GCLYEl85FfX8nEDlCSm96ZzBCtV7tnd4+OdM5Rmjh+l3PIBGFUGwRt/d+zRst2ofVoeFbkGg0b5H+eXTce6w3Lsr2oHjZdXRtwnsOAcoGoaOuOZTcMq2nY9YlT952Gb7s1+6zxoGtTyLgMLV1qlq5t0oRyv0jb1vOM+gxxwn2KUuC+wP64e33lS08flZj0zvkOZZEw68RCLHzTxLUQMCQJrmGWmufmgc95yP0xmVEk8gxecoa8rb/sXa/XtXW9xrKZ6ViWZVqeKX1CTmaf9c6ncjOEAxqx3foCUUYJRgl5RgrUNYiYhVo3mbGMiDh9I7Rt2pYKbcAGG9hu0M+6+ZqgQPfBSAcgM44MHiO7DDaCCDKgGLS70aCtf/7YBHd7JxmiPGJZyo/WfwcJ6AoStoDQ4GVlJbqPRzzRrs45YH9AcZJzsoIbRZMFwsC12wwisrkiXJIv5Foxfm3D5R8pWQb4b8Zybu5jldDNE90JyAy4+D8z25/XLsoUJTl0hnZApj/Dm3VXPN8065NhK43EE/Q2jVa7gLDvvANVjftlfUzWilsvm+LnIOqn3mT5xK6CtNu/R1++L/vjeGhbo956GP/83vhx2X+e1YXdW2T3Nk1cx/yFzoL7OVxPbsM5Xjvu89kwehqcfZoP7/95WAhvur3qjrdfHfPhPomT+Ww1WdE7ejeA0TLozi/mD8svT0H2Y/h1GS/Y089fPex923br7t2X+LGXmHiVjPNPt7+mLVH/xqfxdA5hHLpN3H6tab+GQ2MpCeP88QmwKJeKHoNAu5TzQuJ9eVEWEhpR4eovlEZxAVToHbVLSYufSwEioS+HuVtfek0rcCy332+1nKDX6FsNy760upbrec0zt1lq0A7FEcQLRiOicimV3fHnfYA49TnQEDJjxXIcA9ffiRgggbQBHcnDwSiHCZMqHj3bLY/EW8utP9oejpoeZevEYlzXbpgY0mHWjQRke9LdmFjOgXSPAJMFAaXviuBcMpwL2YslWuUisWsrVKOQyxsgUyIst7aaJifpIgGF1ExZmCdQW8SLojMm3/06BsK8sI76k+LgvVnX8beyBdInJMqBq1p6IMcIJ+4gqyzk7YKb+wWX4bt5SNT5kv0UGcE7JIefXmmi+FFxRFZUQq48jw0HUc3jgqpE4YrgiujVDS0FXh7/TjmOJaota/lqlRcDcJW0ZTK8KRXONseAc6lP2wmbAzWrEOaHrocK9VHmyn6ILxcxHQskIJV00YrlB94GY+DqbTCQPN989OFxkFL2TcBGnLJdJPIJoRC/+8rAPlZ+0nwrf9YsC1/HdSLWXh5Zp3wQCEJnaqUugu0bpMBMhiVSuVi2H/xUgFPJD41VkyssQrLpMRfw9hdNSVJbRxiznIpBoBeGfZkscIrtAvxXpz/CFFL8crdu+Jt36/311VgKVor0ypf8t7NBCrpg0NUVXmBp6xv5VJTJ6WxPll8AHiuz49j9vtMPLh3rQJktJ7CrBh5U0vnD/Kdlr6fH56HzGw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EE2EEF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EE2EDF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EE2EDF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D207EE882DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D207EE882DB4E0401F0A07995675</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023455909</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D207EE892DB4E0401F0A07995675</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950223921F22296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950223921F22296E0401F0A05990987</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950223921F32296E0401F0A05990987</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023459199</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00098_UVTC_PrimaryEmail_maps_to_multiple_users_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_404_NOT_FOUND_P1" searchProperties="true" id="d7c69569-1379-4741-a6ab-aab94cc814d6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUjwz0FZEOMIOixzq+IKDH45c7Id1CtE1Lk7bAr79JsRUQvZ47dIbJdrP77O7TJ+kwFAam02cMEk4iqriDrvpPE8A3LBPXp8iDut1GZh3p6KSuNw17aiPDahpTVXEZS8GljCPKu6qpG7ZwqBvWxLQc0xZPw27ZL6ryBAkToYVLQ1eVZRhQ5hRpu2qaUCdCjDCHohCYw7Ez7t/eOMLTQSUmtdfZoCwSJr0557GjabjhAYYgwA0chVpH2/HpeMwZkxlFPE3gPafHuur73jzPG7nViJKZZuq6rultTfh4jMyO1d5RuRk8l/rRZn2OaEQJRgFZIwnqFvg88pR+MIsSwufhF6ENzdBl6DoscR0bNj1WtY8EBbofRtoBmTBUZ3NklMFG4EMCFIPyOHK76vHPJrjZO0kQZX6UhGxv/XeQgGYQRDF4dVZWVqL7ecQD7ep1ADsuxUHKSAZ3kiYxwsCUYQI+Wd4QJsjnMaUYv7Jk4iElywD/zVg62jZWAV070J0BmQHj/2dm2/PaRHlCQQq9pYkeVy+jWn5nnZ9Nlh5m19eW4buX92/dAsK28wZUNe739T5ZK269b3qzsnxcs9DZ+nmR0Vp7FGBYP6xuLlb2aduO4uvsCv3WVu3BnYZfW6u3qR+OVhfLR3/x9BjEs9x7CJ4Ho+fbh6c/v48Yt7Ip9h5oP3Dz1yRf/3nVBqv0fj7Nxnm49tbT1yv/9qF2Nrwc5kPNOx2/Ba316Oyl/+vhyg2vNYRqwwHF0fAFHU3i6dC4OFlEv04HJ6PayL+Muh81bdewaywlYZxOXwHzcinp4Q6USzEvxL+XF2khXt0vXJ1YahTjQLnak7uktDipECDiOWKYm/Vlu6mbhtkXj26b7eaFbuvGpd7XW+223jw/LTVog2IP4nlEfSJzSZXd8Od7gDh0GFAPknoWpXgOTP0m4gBxpLh0JD6OiDKYRELFfWrEebq0Wiembdhxli7CtzVrWXNVuYv4Pb1P+j6HZEu67Ylu7kj3CDCJCUh9lwRnguGMi14sUJbywGhkqEEhFSdAIkVY7DttaoyEcQASqRZGXhpAI57HRWc0tvkXWoRZYR1dTIoP78u69t+VLRA+HpEOTNZyBmKMcOAMMspCvi64uV1wGb6fekR+X6KfPCF4g2T31QdNJD8qjoiKSsiV575hJ6q2X1CVyMsIrohendBC4MXn3yvHsUCNRSPNsrQYQEtKWyLCa0LhDG0MOBX6tJpEb0C1KoT2o+OhQr2XubLv4kv5nI454hAKuijF8gd3gzEweTdwBc+XP7147KQUfeOw5Ids54G4QkjE394ysIOlnzAPxV8eJd7HuA7E2soj6hQXAk7oTK7kQbD6ghQ4EmGJUK4o2Q5+KMCh5LvGqskVFi7YNE05fP1GkZLUVRHGUUq5O1ALw7ZMFjj5Kgbnw+lTmEKK38/WJfvybH2+vRkLwQqRWvmS/3auk4IuGFR5hBdYuupSXBVFcjrbkuV3gJ+U2byQv6bgyK4yW9Z51cCdSnqfzJ8tWz3d/x56/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022E2E2E63515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022E2E2E53515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022E2E2E53515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A12A04295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A12A04295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023463312</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A12A14295E0401F0A079905C8</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950226D16563221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950226D16563221E0401F0A07990473</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950226D16573221E0401F0A07990473</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023466140</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00099_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="6372413e-4d4b-4b0e-a155-0de9a7b2c6d7"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkviRRQUq5tHSh3QW6hb4cGccBt4lDYydcfv2xQ5MCpT3dIyEhT8Yz38x8/uxLCuLI8HxKUcpwQqReuyH/A4PAmoUWUGykzxRrZgLFhY6mIAcEBtAsW58FstSjNEM9QhkgrCEbmm4pmq3o5tgwPcPyTL3mGs6TLP1BKeWhuUtNk6V1HBHqFWkbcpYSLwEUU4+AGFGPQW/kD/oe9/RAiUluXu5QFgnT5oKxpaeqsBYgiKII1mASq5fqgc9lQL0RnhPAshS95QxoQ37bu1qtaiuzlqRz1dA0TdVclfsEFM/P5eZZuRkFPRImu3ULkIRgCCK8BQLUALFFEkh+NE9SzBbxJ6F1VddEaAWtoQJ1i5zL6nuCAt03Ix2ATClQ6ALoZbAhClGKCETSw7DXkM+/N8Hd3nEKCA2TNKZH67+DhEiOomSJAoWWlZXovh/xRLualwh6PQKjjOIc3QmaLAFEVPqVohCv+5hy8gVUKsYvrSn/4ZJlCP7NWC7VfawcunqiO208R5T9n5ntz2sX5Q+IMtS8Wl1Pp+GD444v2o+DaV+9irdzf2BjuGoUEPadd6Cqcb+tj8lacettU2ekXbcuHH9z9/vl7rVnBOboiRp3mo6vf/qcyk8hjsCFMYbzycbHlu0Pcfvm5oL+WMF+OHgeLnLwEJn93Myn1tlCv3100HN38uy+bKerxXDLoXT0+c10MMVXQ/DSvp0sbpcXE9XZ2Jlvmsm97/x2DTV/DMFV1G+RezLvpnASbZ2zOKuHg4eNFTvdMBpNOpNrq/Fe034Nh8ZSEkbZ7BlBVi4FPXptqcvnBdjX8iIsOFDCwtVbCo2iDBEmN8UuIS1exgUIBx4f5m7ddW3NMOxuyzRd3ay7Hc3S9K7ma3XX1Yx2vdSgHYojiK2EhFjkEiq748/XAGHsUUQClCp5ksEFovIXEduAAalHhvxwJISiccJVXKc/6vOtZacrK3W26fIZbBa55rpQlu4Sdk/uUz9kKN2TbmusGQfSPUQQLzES+i4ITjnDKeO9eAV5xiK9loMaQRm/AVIhwnyrY6sUx8sICaRqnARZhGrLxbLojEp3/4YCIC2sw864OHif1nX8rWwB9wmwcKCilivEx4hO3EFGWcjnBdv7BZfh/SzA4nzxfrIUwx2Sw0/vNBH8qDjCKyohV57HhoOo6nFBVaIgx7AienVDc4Hnx79ZjuMV1F5rWZ5nxQDqQtpSHl7lCqerIwQzrk+bcfKCiFqFUL91PVSojzJX9kN8GVuQEQMMxZwuUrH8xttghKh4G/Q4z9fffXgcpOR9Y2jNTtlaEX9CCMRfvjKgB4UfN//if6skfS/8VKy9PLxO/iBgmMzFSlwEm09IARMeFnPlStL94KcCnEp+aKyaXGFhnE2zjKHPv0hCkhoygDDJCOu15cKwL5MFTrZZIu/d6UOYQorf7tY1/fRunQz6Iy5YMZArX/zfzgou6AKRLK7wAktDXvOnIk9O5nuy/AbwWJnbhmabWsfQLKdbKbPtuka9pVcNPKik+cH80bLX0+Pz0PwX</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D20530E3048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D20530E2048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D20530E2048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950225FC3391379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950225FC3391379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023470663</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950225FC33A1379E0401F0A079902D7</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951077A40C5A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951077A40C5A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951077A40C6A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023473729</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00100_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="4cd073cc-140c-447e-8bee-321f1eb1a9d9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF8ItKkiUy55UFLpA99KXI+MM4CWxQ+zQ0F+/dmhSoLSneyQk5Ml45puZz599xVEUOl6Xc0gEYVTz+239Xxstmg3XDYxFPWgZLnabxgLZltGou2i5wFbNbix1zec8BZ9ygaho645lu4ZVM+zq3Kl6jutVm5Wm7Tzo2ndIuAwtXSqWrmVRSLmXp23raUI9hjjhHkURcE9gb9a9HXnS00MFJr1zdUCZJ0w6ayFizzRxJQAMYYgrmEXmlXnicxVwb0ZWFIk0geecAW/rz3sfHx8rj9UKS1amY1mWabVM6RNwsvqsdz4VmyHw6ZId1j1EGSUYheQJKVC3INYs0LrhiiVErKM3QtumbanQBmTYwLZLP+vmS4Ic3QcjnYBMODL4GtlFsCksIQGKQbuf+m3988cmeNg7TxDlS5ZE/Gz9d5CA7iBkMQQGLyor0H084oV2da4Aez7FYcrJDsaKJjHCwLW7BJYkGxEuyRdwLR+/lnH5IwXLAP/NWK7MY6wSunmhO32yAi7+z8yO53WI8h2FKXTmP6JFY+Ts/KUzua1FrUd/M2nd3fRgfNvOIRw7H0CV435en5O15Nbzpkn9vrHJNvwmuBm0+CIFNN6T/ZfN/Zfhk2Bf9/UEX4uUhuvdcJsh6+dw/TBniNRxmqV1MWKoOWKLb/WB2I3Zp96P4Nd+FfXtYOBmg/71Puw37kb/PAw28den4fcRmiK3Ox6LuPnzyz32927Ahw9k4GzJjF3PJ4H/e/Gtuq2v3cmUfmLxBn7FY76Ir79tsX2f8UH7pabjGk6NhSTM0sVvwKJYKnr4fW0o54XE+/KiLCQwlrmrFyuN4gKo0Dtql5IWL5UCRAJPDvOwHrZqlmM7XdvpWa7Tqg0s17KHVtdqtFpWrdcsNOiA4gxij9ElUbmUyh748z5AHHkcaACJsWMpXgPX34nYRwJpPp3Kw8EohzmTKr7F4T5ZBXtObEfQbQ3qTylZpRtdGzMxoZOkuxSQHCm3O7ecE+WeAiYxASXvit9cEpwL2Yot2qUitCs7VKGQygsgURostzZrJidRHIICakYsSEOoxOs4b4zJD/+OgTDPrdPBPD93b5Z1/q3ogPQJiHLgqpZrkFOEC1eQUxTydsG144KL8N00IOp4yXaKhOADktNPLyxR9CgpIisqIJee54aTqOZ5QWWiYEdwyfPygpb6Lk9/pxjHFlW2lXS3S/MBNJSyJTK8KQXONmeAUylP+znbADXLEOaHbocS9Vnm0n6KLxVrOhNIQCTpouXLDzwNZsDV08CXNM8++u44SSn7JiATl2y9UL4gFOJ3HxnYw8pPmu/k3yNLgpdxXYh1lEfWKd8DgtCVWql7YP8GKTCTYYkULpYcB78U4FLyU2PZ5BKLkGxapALe/qIpRWrrCGOWUuH39dxwrJI5TrGPwXtxehUmV+LnqzXjb16tP29HM6lXEdJLX/LfzgbJ6YJBVzd4jqWtZ/KlKJPT1ZEqPwN8JcxOr+H2q9Wa7TZPhNnpX5cNPKmk88r82nLU0/Pz0PkD</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C74D345148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C74D335148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C74D335148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A12C04295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A12C04295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023477393</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A12C14295E0401F0A079905C8</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950212A12D64295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950212A12D64295E0401F0A079905C8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950212A12D74295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023480705</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00101_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="7e8530be-766d-4ba7-a57b-1039fe677021"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HreML9gDuAJVBMOOZyAXQ5jLy5aRGtDESI4lg5OvX8nEDjAkm9kqqii1W92nu4+OdMHjTeL4fc4hE4RRLQy6+j/YctzWot02HMCfDHfhLoyFtbQM17IWnue1UWdh6VrIeQ4h5SKmoqs7lu0almfYzZnT9B3Xd91Gx7J/6tocMi5DS5eG3FVsEsr9Mm1XzzPqs5gT7tN4A9wXyJ/2J2NfevpxhUnvXexRlgmz3lqI1DdN1MCAIElQA7GNeWEe+Vxg7k/JisYiz+A5J+Zd/Xnvbrdr7JoNlq1Mx7Is0+qY0gdzsvqo9z5UmwGHdMn260FMGSUoTshTrEBNQKwZ1vrJimVErDevhLZN21KhDSiQgWyXftTNlwQlundGOgKZ8djg69iugkWwhAwoAu0uCrv6x/dNcL93lsWUL1m24SfrP4MEdAsJSwEbvKqsQvf+iGfa1bsA5IcUJTknW7hSNEljBFy7yWBJijHhknyYa+X4tYLLH6lYBuhPxnJhHmKV0M0z3QnICrj4PzM7nNc+yjxOcuixxf3V6Glzs/wyxTDCy1ucjqPg14/rPu+WEA6d96DqcT+vT8lac+t5U/+J38GIzLffWyL4MghnxbdPPws3iK6cr9ZnE26nXrv4bDu3TUHdFiWTMAui3a64201a/XbYbq4W5HtEAr6+mn9gbZaKuBWsv+0m0Rx3nBaDexiEt/3UvrlxvPF4zget693TX+sJTL59neHJOMqj6Od1fDm8Tz+j9rD4cTn9euv+vf7Q/HSHU+d6OBcB/nv4eG8N77svNR3WcGysJGGaL34BEtVS0SMMtJGcVyzelhdlIdhYlq5+qjSKC6BC76ldSlr8XAoQwb4c5n496niWY3da7U576Hit5tByLXtk9S2v07E6/ctKg/YoTiAOGF0SlUup7J4/bwNEG58DxZAZW5ajNXD9jYhBLGItpJE8HIxymDGp4ivq7DayhEWyJfYOM+fhKX9o/1oLXbti4ppeZ/2lgOxAut2Z5RxJdwSIpASUviuCc8lwLmQvHuJtLhK7sY0bFHJ5A2RKhOXWtmdyskkTUEjNDcN5Ao10nZadMfn+3zFixEtrNJyVB+/Vuk6/VS2QPpgoB65quQQ5RjhzBzWrQl4v2DssuArfzzFR50v2U2QE7ZEcf3qhieJHzRFZUQW59jw1HEU1TwuqE+EtQTXR6xtaCrw8/r1qHA9x46GRb7d5OYCWkrZMhjelwtnmFFAu9elxxu6BmnUI813XQ436JHNtP8aXizWdiljARtJFK5fveBtMgau3QSh5Xrz34XGUUvZNQCHO2QaJfEIoxG++MpCPlJ8038i/Hcvwy7jOxDrII+uUDwJB6Eqt1EXw+AopEJNhiVQulh0GPxfgXPJjY93kGouQbFrkAl7/oilJ6uoxQiynIgz00nAokyVO8ZiC/+L0W5hSip/v1oK/erd+n4ynUrA2sV77kv92NkhJFwS6usJLLF29kE9FmZyuDmT5GeAZZXaanVGzOfCsWplbUpm9ZlA38KiS3m/m3y0HPT09D71/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950219239F43C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950219239F33C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950219239F33C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502197898E2573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502197898E2573E0401F0A059909AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023483938</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502197898F2573E0401F0A059909AB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00102_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="5cf707ee-c1d4-4722-a1db-475fe5bfae39"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGljxUkIUkhUUFigaph+0FLt18vV8aZgEviBNsBur/+2qFJgdLe7pWQkCfjmTMzx8c+5SiJG36Xc2CCpFQL+m39nyhqOi6CsIat1knNcZt2DbUcuxZaE9tpuhi5NuhawHkOAeUCUdHWG6bl1Ey3Ztl3DdtvOL7j1a0T71nX7oFxGVq61E1dWycx5X6Rtq3njPop4oT7FCXAfYH9cffywpeePiox6Z3TDcoiIevMhMh8w8D1EDDEMa7jNDFOjR2f05D7YzKlSOQM3nKGvK2/7V2tVvWVXU/Z1GiYpmmYniF9Qk6mR3rnR7kZwoBG6WbdQzSlBKOY/EEK1CWIWRpq3XiaMiJmySehLcMyVegarLHspkOPdOM9QYHum5F2QDKOanyGrDLYLUTAgGLQft8Gbf3oexPc7L1jiPIoZQnfW/8dJKBLiNNMpuRlZSW670c80K7OKWA/oDjOOVnClaJJhjBwbcQgIusLwiX5Qq4V49fWXP5IyTLAfzOWU2Mbq4RuHOhOn0yBi/8zs+15baLcoziHzhMar9f58PV88iAyJp5XCxf35zgYNi/bBYRt5w2oatxv632yVtx623Ru98ZnQTiyehG+GQy6xxfHzd/P2XIRXUSr1v14dDWyuHFuxC1vyCGIpmLO8tUvFyWzR7h2J48mw090Mpyz4erHwCEPN7PWY+/C8G5ez+zW5Yv7c2pm8RAWMdwKMmxNh4aTz71hPu86s+Pjh+zpxRnZL+nIjSfLS6//eD6b/VrhKf6RLbP7aPHcmzx4V3zyJAbcbL/XtF3DrrGUhHE+eQEsyqWiR9DXzuS8kPhaXpSFhLWocPUzpVFcABV6R+1S0uLnUoBI6MthbtZnnms2Gr1Ba2Dbltc7GZiOaZ2ZXdP1PNM78UoN2qDYg9hLaURULqWyG/58DRAnPgcaAqst0xzPgOtfROwjgbSA3srDkVIOd6lUcStp8sm6sZjH9lK0aCTYBNmpHKWuXaXiml6zbiSAbUm3c2c2dqT7FjDJCCh9VwTnkuFcyF4s0DIXsVVfojqFXN4ATImw3NpyDU6SLAaF1EjSMI+hns2yojMG3/w3agjzwno7uCsO3qd17X8rWyB9QqIcuKrlJ8gxwoE7yC4L+bxgd7vgMnw3D4k6X7KfghG8QbL76Z0mih8VR2RFJeTKc9+wE9XYL6hKFC4Jrohe3dBS4OXx75TjWKD6op4vl3kxgKaSNibDG1LhLGMMOJf69HqXzoEaVQjjW9dDhXovc2XfxZeLGR0LJCCRdNGK5TfeBmPg6m0QSJ6vv/vw2Ekp+yZgLQ7ZerF8QijEX74ysI+VnzSP5N8qZeH7uA7E2soj65QPAkHoVK3URfD6CSlwKsMSqVwp2w5+KMCh5LvGqskVFiHZNMkFfP5FU5LU1hHGaU5F0NcLw7ZMFjjFawb+u9OHMIUUv92ta/7p3fp4eTGWgpUgvfIl/+1cIwVdsHxZSv8CS1tfy6eiTE6nW7L8BnBPmS2z2bId++zEtDxnW5lts2tVDdyppPPB/NGy1dP989D5Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951078343F70194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951078343F60194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951078343F60194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022CE8E3319C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022CE8E3319C6E0401F0A05990969</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023487547</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022CE8E3419C6E0401F0A05990969</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950225FC3761379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950225FC3761379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950225FC3771379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023490736</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00103_UVTC_PrimaryEmail_maps_to_single_user_status_pending_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="6b1838b6-ac03-4b3b-8b13-5e28fa262425"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIlUuigkQh7NILbbm0tC9HxjHB7MRJbQdov/7YoUmB0p7uIyEhT8Yza2aWl33GQBxZXpsxRDlOiNLvNtV/gsCwnTqYaQ6qVTUHOHNtVm/UtIbt1mtwBtw6nKlKn7EM9QnjgPCmahmmoxlVzbTHlu1ZjletVoyG9awqD4gyEVq4VAxV2cQRYV6etqlmlHgJYJh5BMSIeRx6o/bNtSc8PVBgUltnW5R5QtpacJ56ug4rAYIoimAFJrF+pu/5nAXMG+GQAJ5R9J4zYE31fe96va6s7UpCQ90yDEM3XF34BAyHJ2rrV7EZBX0yT7brDiAJwRBE+A1IUDeIL5JAaUdhQjFfxF+ENnXTkKE1tIEaNB1youofCXJ0P4y0B5IyoLEFMItgQzRHFBGIlMmw31RPfjbB7d4xBYTNExqzg/XfQUJkhaIkRYHGisoKdD+PeKRdrTMEvT6BUcbwCg0kTVIAEVPuKJrjzTVmgnwBU/LxKxsmfrhgGYJ/M5YzfRergK4f6U4Xh4jx/zOz3XltozyAKEOt39MViS+Gg/n4dDIIh4H9NImGF48L3500cwi7zltQ5bjf14dkLbn1vonV1v4EjU6DqevPg6fO6W3mzy7hlF7b88WgEz+Q6cyYPj5W6el8soTwInkesOnwnD41OncmWI3768HGD5/9y5T/crswQdYTxenV1WbSW5Nae/p7gs43s5rVeKvWfMe/Sy/dGQuX99FN581+jLsunaQXeKavfNC79i+vrNGt3rCW2a+He2MSdvR7eJqeLts2+DP40/yoabeGfWMhCaNstkSQF0tJj35X6Yl5Af69vEgLDrR57uqlUqMYR4SrLblLSouXCQHCgSeGuV333Kpp1OtW1XbaPdvu+oZjmD2jbVRd1zba54UGbVEcQOwkZI5lLqmyW/58DxDGHkMkQFRbJRlcIKZ+E7ELOFD6ZCgOR0IYGidCxc0lXYfkJUVvy9riJYyrWW3hgHAVqcog4bfklrbnHNEd6XbGhrUn3UMEcYqR1HdJcCYYzrjoxQtYZTwyKytQISgTNwCVIiy2Nqo6w3EaIYlUj5Mgi1AlXaR5Z3S2/bc0AFluHfrj/OB9Wdfht6IFwifA0oHJWs6RGCM6cgc5RSFfF1zdLbgI384CLM+X6CenGG6R7H/6oInkR8kRUVEBufQ8NOxF1Q8LKhMFKwxLopc3tBB4cfxbxTheQOWlkq1WWT6AupQ2KsLrQuFMfYRgJvTpdZz8QUQvQ+g/uh5K1AeZS/s+vowvyIgDjmJBFyVf/uBtMEJMvg36guebnz489lKKvnG04cdsnUg8ISTib18Z0IPST5jvxN86ocHHuI7E2skj6hQPAo5JKFfyInj9ghQwEWGxUK6E7gY/FuBY8n1j2eQSCxdsmmUcff1FkZLUVAGESUZ4v6vmhl2ZzHHy1xR5H06fwuRS/H63btiXd+v05nokBCsGaumL/9tZwzldIFLlFZ5jaaob8VQUyUm4I8vvAA+U2bAs0/ftmtWzDKdU5rrrGlbXLBu4V0nrk/mzZaenh+eh9S8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EE363F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EE362F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EE362F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510772534AF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510772534AF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023493948</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9510772534BF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00104_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="e983d46a-a240-4866-9f4c-d05fcf4fe530"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1XIBVhIBEiUS8uWlhYo7dmXI+MMxCXYEDtc+uvXDiQFSnu6R6qKPBnPfDPz+bMrHM1Dx6tzDpEgjGqdZlX/14KSazm+b9g29o0CuD+NcdnBhlvwx7gMrl9wXV3rcB5Dh3KBqKjqjmUXDKto2Pmhk/ecglcs58pO6beujSDiMrR0yVm6tpmHlHtJ2qoeR9RjiBPuUTQH7gnsDep3XU96eijFpNcqO5RJwqgWCLHwTBPnfMAQhjiH2dysmEc+FZ97AzKlSMQR7HP6vKrv967X69w6n2PR1HQsyzIt15Q+PifTS712kW4Gv0MnbLduIMoowSgkb0iBugMRMF+rh1MWERHMPwltm7alQhuwwQa2C/RSN98TJOi+GekIZMSRwQNkp8H6MIEIKAbtqd+p6pffm+Bu7zBClE9YNOcn67+DBHQFIVuAb/C0shTd9yOeaVetAtjrUBzGnKzgXtFkgTBw7SGCCdl0CZfk87mWjF/bcPlHUpYB/puxVMxDrBK6eaY7TTIFLv7PzA7ntYsyQmEMtfzjbU88P07ebkoP15PeNijHefv6/rrUnVYTCIfOO1DZuPfrU7Jm3Npveh0Hkf0rcF8GP2bDbXs1e4uL7mTC7kalAJHnp3b3ZgbopbWcPomb4sR+dd3bZsnflpv/xKN1/Za2/ZJ7N1uXt638xcgUJTPoW3VnM8LD7vN2TZ9/tbco3ALpj28bpHA96z64zd7w6fGerVpLsnxhdSi3r35E9oIjRMZR7205c5stfPHbJyGS/16u61ej8tO8S6zqe02HNRwbU0kYxONXwCJdKnp0mlpbzguJr+VFWYhvTBJXb6E0igugQq+pXUpavFgKEPE9Oczduu0Wbetn/uqqXmhbDdttWQXLblt1q+S6xXzRTjVoh+IEYoPRCVG5lMru+PM1QDz3OFAfImPFYhwA17+I2EQCaR3al4eDUQ5DJlX8dWwvCmi5KJPidIwY4dOfJBTBTNfumejRXlSfCIgOlLswtJwj5e4DJgsCSt4Vv7kkOBeyFUu0ikVo51YoRyGWF0CkNFhuLRdNTuaLEBRQc878OITcIlgkjTH57tcxEOaJtd8aJufu07JOv6UdkD4+UQ5c1XIFcopw5goqpIV8XnDxsOA0fD32iTpesp0iIniH5PjTO0sUPTKKyIpSyJnnqeEoqnlaUJbIXxGc8Ty7oKW+y9NfS8exRLllLl6t4mQAJaVskQxvSoGzzQHgWMrTdshmQM0shPmt2yFDfZI5sx/ji0VABwIJmEu6aMnyG0+DAXD1NOhImm++++44Sin7JmAjztkaoXxBKMRfPjKwh5WfND/InzWL/PdxnYl1kEfWKd8DgtCpWql7YPsJKTCTYYkULhYdBj8X4FzyY2PW5AyLkGwaxwI+/6IpRarqCGMWU9Fp6onhUCUTnGK7AO/d6UOYRIn3V+uGf3q1vtx1B1Kv5kjPfMl/OxskoQsGXd3gCZaqvpEvRZmcTg9UeQ/wRJgtx3adfN3O5xtF61CYrWK+mTXwqJLaB/NHy0FPT89D7Q8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95021923A143C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95021923A133C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95021923A133C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951063BBA4F0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951063BBA4F0C19E0401F0A07995351</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023497605</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951063BBA500C19E0401F0A07995351</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00105_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="c7e4a104-a478-4da0-bb57-f04b824ac6a9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF5LSRAWJctlNSy9cCtt9OTKOAy7BBtsJ0F9/7NCkQC+neyQk5Ml45puZz599wcEycYIm54gJTIkWtuv6P1F0dmZ5ztTwp7Uzw51GvnHuRq7hughWvakTe7alayHnKQoJF4CIuu5YtmtYnmFXR041cLzAciq1c/+Pro0R4zK0dKnIXdtlQniQp63rKSMBBRzzgIAl4oGAwbB50wukZwAKTHrjYo8yT8gacyFWgWnCSoQgShJYgXRpXphHPhcRD4Z4RoBIGXrJGfG6/rJ3s9lUNtUKZTPTsSzLtHxT+kQcz77rjW/FZhSFJKb7dQsQSjAECX4GCtQNEnMaac1kRhkW8+UHoW3TtlRoA22hAW2XfNfN1wQ5ui9GOgLJODD4HNhFsAGKEUMEIu1hENb171+b4H7viAHCY8qW/GT9d5AQyVBCVygyeFFZge7rEd9pV+MCwSAkMEk5ztCtoskKQMS1e4ZivO1hLskXcS0fv7bl8ocLliH4N2O5MA+xSujmO91p4xni4v/M7HBe+yhjkKSoMZm0RmB83VkMzXW1/cvhDD/8zK53yTas5xAOnfegynG/rE/JWnLrZdNw+fi8Xl92pw+bxeiyH43vmhN/40ep1/3Rgh7cicXVr3G/+/jM2RVbhPfOHdrS7mCWNaN+O+zbvyaPs8mc9S/Z7JvZFfSxBrreOr16iq/Pptbk6kfYb01/N+c/7fSPe//w4/oerUFn0ktX97t164p3BgvnlmWJPyPTcRz3TA578VM7+nbZbvdbcDKdgZA4z2EtG3fqrzUd1nBsLCRhmE6fEBTFUtEjbGtdOS8gPpcXZcGREeeuwUppFBeICL2hdilpCVIpQDgK5DD3667vWY7tNO2q3XEd3+tYrmV3raZV833La50XGrRHcQKxRUmMVS6lsnv+fA4QLgOOSISYkdEUzhHXP4nYBgJoIRnIw0EJRyMqVTzO4im1N65w59Rez+OnxTPdkcWG6NotFXfkjjVjgdiBdLsjyzmS7gGCeIWR0ndFcC4ZzoXsxRpkqUjsSgYqBKXyBmBKhAPHPfdMjperBCmk5pJGaYIqq/kq74zJ9/+OASDPrYPOKD94H9Z1+q1ogfSJsHLgqpZLJMeI3txBbuAVhXxcsHdYcBG+mUZYnS/ZT8Ew3CM5/vRKE8WPkiOyogJy6XlqOIpqnhZUJooyDEuilze0FHh5/BvFONagsq6kWZbmA6gpaWMyvCkVzjaHCKZSn3YjukDELEOYX7oeStQnmUv7Mb5UzMlQAIGWki5avvzC22CIuHobhJLn268+PI5Syr4JtBXv2VqJfEIoxJ++MmAAlZ8038u/DWXR67jeiXWQR9YpHwQCk5laqYtg9wEpIJVhsVQuyg6DvxfgveTHxrLJJRYh2TRNBfr4i6Ykqa4DCGlKRNjWc8OhTOY4xW6FglenN2FyKX65W7f8w7v1901vKAVrCfTSF/+3s4FzukCkqys8x1LXt/KpKJOT2YEsvwB8o8xV2/fbtZrX6lyWyuxJZfbPumUDjyppvDG/tRz09PQ8NP4F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95023199D785CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95023199D775CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95023199D775CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A131E4295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A131E4295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023501469</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A131F4295E0401F0A079905C8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00106_UVTC_PrimaryEmail_maps_to_single_user_status_blocked:clg_Token_Type_ValidateEmail_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="e848d57f-56f1-4b8e-b2a6-425481ad832f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyJKH49CnJAAiQoSLaXN2UJboJezLyvjOOA2santcOmvXzs0KdDL9qyEhDwZz3wz8/mzjwXMUjfsCoG5JIwaUa9t/uM1gTcNmp4VQyewvBgBCzZBy0Ko3mo4jcSfBrFpRELkOKJCQirbpgsczwK+5dQnbj10/RA0aq7v/20ad5gLFVq51IBprLOUirBI2zZzTkMGBREhhRkWoUThuDu4DJVnCEtMZud4i7JIyDtzKRehbaNajBFOU1RDLLOP7T2f41iEYzKjUOYcv+aMRdt83btarWqreo3xme0CAGwQ2MonFmR2ZHZ+lJtxHNGEbdenkDJKEEzJC9SgBljOWWx00xnjRM6zT0I7tgN0aAuvkYUcjx6Z9luCAt03I+2B5AJaYg6dMtgIJ5hjirBxO4ra5tH3JrjdO+GQioTxTBys/wwSpkucsgWOLVFWVqL7fsQP2tU5xiiMKEpzQZZ4qGmygAgL45rjhKwviVDki4VRjN9YC/UjJcsw+pOxHNu7WBV0+4Pu9MgMC/l/ZrY7r22UO5jmuLOaspvB/Sm17076cs1nLTCPnkdTb3a2ahcQdp23oKpxv64PyVpx63XTcBpd9ZMGQTQLphdq5xMKbmzn5+J39nDS3fwcPAztWeOc3MejX9GwK+5O7+KGczMHrQfxCw/pjA1Gm5fkYnhye/+DX99OgpNoyK4a8pHfPa2G58QD5/3TKT5bn/lJQzS9fMjON1P3Ijmf9LzLB3+oChtErSs3m/5Vn1/5w/uEI/p7/mPVu7l+nNfFNHs8yW6jl4v8tv1W024N+8ZSEsb59BEjWS41PaKe0VfzgvJredEWEltJ4RoutEYJiak0O3qXlpYwVwJE4lANc7vuB74DArfndAO32/BaZ8ADTh90gR8E9aAJSg3aojiAeMpoQnQurbJb/nwNEGWhwDTG3FqyHM2xML+I2IMSGhEdqcPBqMATplTcmfGAZbHz1PBj7IDFSwttkEg3Tdc0hkxe0SveTSTmO9rtTYC7p90jjMiCYC3wmuFCUVxI1YxnuMxl6tSWsEZxrq4ArlU4dL2WbwuSLVKsodoZi/MU1xbzRdEaW2z/XQsiUVhHZ5Pi5H1a2OG3sgfKJybaQehaTrCaI353CXmhXxbyecH+bsFl+G4eE33AVEMlJ2iLZP/TG080QSqSqIpKyJXnoWEvqn1YUJUoXhJUMb26opXCq/PfKcfxDGvPtXy5zIsBNLW2cRXeVhLn2GOMciVQmwl7wtSuQtjfuh8q1AeZK/s+vlzO6VhCiTNFF6NYfuNxMMZCPw4iRfT1d18eeylV3yRey49sp6l6Q2jEXz4zUIi0nzJfq78V42+FfxRrJ4+qU70IJKEzvdI3weYTUiCmwhIlXYzvBv8owEfJ941VkyssUrFpmkv8+RdDa1LbhAixnMqoZxaGXZ0scMrNAodvTu/CFFr8ermuxaeX68PgcqwUK4Nm5Uv+29kiBV0QNvUdXmBpm2v1VlTJ6WxHl18BHkgzcN1+X0lzywONfiXNzSAA9W69auBeJZ135veWnZ4enofOvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022FF1A99406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022FF1A98406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022FF1A98406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951092D1A92A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951092D1A92A648E0401F0A05993970</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023505397</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951092D1A93A648E0401F0A05993970</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00107_UVTC_PrimaryEmail_maps_to_single_user_status_suspended_Token_Type_ValidateEmail_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="64232372-f771-4273-a9cf-dd162049cde8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH69CPiCFRAUJCu3SpaWFdO9uX66MPYDbxIbY4aO//tqhSYGlvd0rISFPxjNnZo6PfS5QEnthWwhIJeXM6Heb5j9+lQABv265DqlbtQlqWJOGRywgVXcymQRAJnXT6AuRQZ8JiZhsmp7j1izHt9xq5FVDzw9dp+I5tUfT+AGpUKGVS8UxjU0SMxHmaZtmlrKQI0FFyFACIpQ4HLdvBqHyDFGByWyd71DmCdPWXMpFaNu4QgBDHOMK5ol9bh/4nBMRjumMIZml8JqTiKb5une9XlfW1QpPZ7bnOI7tBLbyIYLOvpqtL8VmIH025bv1BWKcUYxi+oI0qBuQc06MdjzjKZXz5J3Qru06OrQFG2xht8a+mvZbghzdJyMdgEwFssQcuUWwEUwhBYbBeBj1m+bXz01wtzdKERNTnibiaP1nkICtIOYLIJYoKivQfT7iiXa1zgGHfYbjTNAV3GqaLBAGYdylMKWbARWKfEQY+fiNjVA/WrAM8J+M5dzex6qg2ye606UzEPL/zGx/XrsoP1CcQWt55z4Pfw6DztXy5rs7T8mgtqrbERXiuZlD2HfegSrH/bo+JmvJrddNv2rc7UxH7nbQfYi/jfp+PE3ZfPv9cnyDL5zlS5b9dXXtjBoJ7nreHZV/B9e3US/2nGD24LW9zQy+Vd3n+lM1CuDLdZUMve068PjZ9v7+520UdR6Tlwu3Mbgajq7vZX30GGXTdYcPV+lD+4mepfHdC2tEj+tLMmGSdzo94v9KJEp9+HJ1+2N7GVeJy3wf968HzH5ovtW0X8OhsZCEcTZ5AiyLpaZHv2tcqnkh+bG8aAsl1jR3DRdao4QEJs2W3qWlJcyUAFESqmHu1peB73SVznlB4+zC6Z31nJrjXjptxw8Cr97xCw3aoTiCeMHZlOpcWmV3/PkYIE5CAYxAaq14hucgzA8idpFERp+N1OHgTEDElYpPcBz4tYy/8Ofl6umMTkh16yPHN41bLodsmLanEtI95a5Fjneg3CPAdEFBy7vmt1AEF1K1YolWmYzdygpVGGTqAki1BodereHbgiaLGDRQO+Eki6GymC/yxthi9+9ZCIvcOupF+bl7t6zjb0UHlA+h2kHoWjqgpggnriCnKOT9gv39govw7YxQfbxUO2VK8Q7J4ac3lmh6lBRRFRWQS89jw0FU+7igMhFZUVzyvLyglb6r098qxrFElWUlW62yfAB1rWypCm8rgXPtMeBMydM24s/A7DKE/anboUR9lLm0H+LL5JyNJZKQKLoY+fITT4MxCP006Cuabz777jhIqfomYSNP2S5i9YLQiD98ZOAQaz9lvlN/a56St3GdiLWXR9Wp3gOSsple6Xtg+w4pMFdhqRIunu4HPxXgVPJDY9nkEotUbJpkEt7/YmhFapoIY54x2e+auWFfJXOccruA8M3ptzC5Er9erRvx7tX682YwVnqVILP0pf/tbNGcLhhMfYPnWJrmRr0UVXI221PlV4DHwuy5Xqdb7dW67Z6zL8xO0C6F+bCS1m/m3y17PT0+D61/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212BD3E5DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212BD3E4DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212BD3E4DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D2012986C0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D2012986C0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023508907</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D2012987C0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00108_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_ValidateEmail_node_role_Retailer(Negative)_404_NOT_FOUND_P1" searchProperties="true" id="c64239f3-8b5f-44e2-827d-708e64703fc0"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkQsIlAiQuZUm3lOXSPRUvR8Yx4JLYEDsB+uvXDiQFSnu6R0JCnoxnvpn5/Nk1BsLAcpuMoYhjShSvU1f/tVG5bNlzUyvPS3PNLs2gNivOKlrZr0J7Ni+Vqk5ZVTzGYuQRxgHhddUyTFszHM0sTqyiazmuaRcsozJVld8oYiK0cCkYqrILA8LcNG1djSPiUsAwcwkIEXM5dMfN/qMrPF2QYVIbtQPKNGHUWHK+dnUdFnwEURDAAqShXtPPfGo+c8d4QQCPI3TM6bO6ety73W4L22KBRgvdMgxDN6q68PEZXtyqjZtsM/I9MqeHdRsQSjAEAX4DElQf8SX1lWawoBHmy/CT0KZuGjK0hnZQg6ZNblX9PUGK7puRzkBGDGhsCcws2AjNUYQIRMrzyKurt9+b4GHvJAKEzWkUsov130FCJEEBXSNfY1llGbrvR7zSrkYNQdcjMIgZTtCTpMkaQMSUXxGa490jZoJ8PlPS8Ss7Jn44YxmCfzOWmn6KVUDXr3SngxeI8f8zs9N5HaL8BkGMGs+9DgVP5enzYzdcOUV9+nO6KvfGr61nWk8hnDofQOXjPq4vyZpz67gpeF37w4e2sdD7P7zNXdwbgHu+3eh24NGeSY3KQ1Uf2eKwzl7QM9tUAyf5JxmUp/t1KIgytVrjlx+WsewPFs/mzc9u4lje3llM6f5u1Q1K5qNVHHirEHe6q8rwrjcdhv7wfsF0ZvL16s2ah+1lP5nZldZwMjEs477b7vlds33HRzd3kxZ9KW8ees3htOt3X988Vn+v6bSGc2MmCeN49oogz5aSHl5H6Yp5Af61vEgL9rV56uqupUYxjghXG3KXlBY3FgKEfVcM87DuVh3TKJfstl2pFrsV496wDbNrNA2nWi0azU6mQQcUFxDblMyxzCVV9sCfrwHC0GWI+CjSEhrDJWLqFxE7gAPFIyNxOChhaEKFisdmkfDlq12x8T7cLFevSTBDjC1V5YnyARlEzTlH0Yly22I6Z8o9QhCvMZLyLvnNBMEZF63YgCTmgVlIQIGgWFwAkdRg17Irjs5wuA6QBKqH1I8DVFgv12ljdHb4tzQAWWod3U/Sc/dpWZffsg4IHx9LByZraSExRXTlCjKyQj4v2DktOAvfjH0sj5doJ48wPCA5//TOEkmPnCKiogxy7nlpOIuqXxaUJ/ITDHOe5xe00Hdx+hvZODagsCnESRKnAyhLZYtEeF0InKmPEYyFPO0ndIWInofQv3U75KgvMuf2c3wxX5IxBxyFgi5KuvzG02As+ChCe4Lmu+++O85Sir5xtOPXbO1AvCAk4i8fGdCF0k+Yf4m/LY3893FdiXWSR9Qp3gMck4VcyXtg/wkpIBVhsRAuGp0GvxbgWvJzY97kHAsXbJrFHH3+RZGKVFcBhDQm3OuoqeFUJVOcfL9G7rvThzCpEh+v1h379Gp96T+OhV6FQM198X87azilC0SqvMFTLHV1J16KIjlZnKjyEeAHYS4VW61mpWm0zWouzOVq1Sk6Zt7As0oaH8wfLSc9vTwPjT8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951063BBA8B0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951063BBA8A0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951063BBA8A0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510764C4893F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510764C4893F80E0401F0A059930AD</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023512987</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9510764C48A3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00109_UVTC_PrimaryEmail_maps_to_single_user_status_forcedeleted_Token_Type_ValidateEmail_node_role_Retailer(Negative)_404_NOT_FOUND_P1" searchProperties="true" id="9d2ea102-f191-46e0-bcda-28553fe7af5d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+JKEH33V6Syj7dCvgiQlFCFImtUUIF1XV9uxUkHRpJJmJlg9NfvTDARWPS6t4oqajo93ae7z5yZYxYkseX1GQPKcUoUf9BV/7UcowOua2lgRaHWdDqO1rHNttZpw6PjWm2rbZuq4jOWg08YDwjvqpZhNjXD0Ux7Ztme5Xhmu9Ex2w+qcgeUidDCpWGoSpHEhHll2q6aU+KlAcPMI0ECzOPIm/ZHV57w9IIKk9o73qAsE9LegvPM03XUCAFBHKMGShP9WN/xOQ6ZN8VzEvCcwlvOkHXVt73Pz8+NZ7uR0rluGYahG64ufEKG59/U3lG1GUKfROlmfRqQlGAUxPg1kKBGwBdpqPTjeUoxXyQfhDZ105ChNSiQhswm+abq7wlKdF+MtAOSskBji8Csgk0gAgoEgfJj4nfVb1+b4GbvjAaERSlN2N767yABWUOcZhBqrKqsQvf1iAfa1TsG5PkExTnDaxhLmmQBAqbcUIhwcYWZIF/IlHL8SsHED1csA/Q3YznWt7EK6PqB7gzwHBj/PzPbntcmyl0Q59C7SKN1ODWpjUm+pHRlk7F+7p8nhj/qlhC2nTeg6nG/rffJWnPrbdPDzev18KbPskna7q+unZPZeVbwC3Zr9zt9bv3Kr3/2xxdXq3iWTPMfqzG9LUjkG6ffVxcPyUQc3sJO4u9Zc95quUdRUsTXv0jkXHJ8t1z+ekXu7fQFm4/28C73ly8+su3BaJlPZ+zh4jWkl8to8XjPrDjmVuve+Wc8zPl9yx2bP36Oju6XE9a80gdzmA/8y/RuPVt232varmHXWEnCNH98AsSrpaSHP1CGYl4B/1xepAWHWlS6epnUKMaBcLUnd0lp8XIhQDj0xDA366HrGJZtuu7APXNOz07OjKZhDo2+4biu4baGlQZtUOxBPE1JhGUuqbIb/nwOECUeAxIC1dZpjhbA1E8iDgIeKD6ZiMOREgazVKh49PQcrh9ZsQwTZBqrxWuLtEj2+uSqyjjl1+Sa9iMOdEu6mzPD2pHuCSCcYZD6LgnOBMMZF71YBeucx2ZjHTQI5OIGoFKEPavZcXSGkywGiVRP0jCPoZEtsrIzOtv8W1qAWGmdnM3Kg/dhXfvfqhYInxBLByZrOQExRjhwBxlVIR8X7GwXXIXv5yGW50v0k1OMNkh2P73TRPKj5oioqIJce+4bdqLq+wXVicI1RjXR6xtaCLw4/r1qHKugsWrk63VeDqAtpY2K8LpQOFOfAsqFPr3M0iUQvQ6hf+l6qFHvZa7tu/hyviBTHnBIBF2UcvmFt8EUmHwb+ILnxVcfHjspRd84FPyQ7TQWTwiJ+NNXBvKQ9BPmG/H3nNLwfVwHYm3lEXWKBwHHZC5X8iJ4+YAUKBVhsVCulG4HPxTgUPJdY93kGgsXbHrMOXz8RZGS1FUDhNKccH+gloZtmSxx8pcMvHenP8KUUvx2txbsw7v1fnQ1FYKVBGrti//bWcMlXRCo8govsXTVQjwVRXIy35LlN4D7yjywjJZ91rRNuzncVmarferUDdyppPeH+U/LVk/3z0PvNw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D2063E44134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D2063E43134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D2063E43134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023199D9E5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023199D9E5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023516605</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023199D9F5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00110_UVTC_PrimaryEmail_maps_to_multiple_users_status_pending_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="616c6783-f7b9-4e64-b0ed-ecab64b203c8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIhXBJVJAo0D2I0gvQdtuXI+MM4CWxaexA6K9fOzQpUOjpHgkJeTKe+Wbm82dfcBSFjt/iHGJBGNV6nYb+r4snlleDulGruJ7hwqRu1Ov21PDK5aldBVSrTCa61uM8gR7lAlHR0B3Ldg2rYtjlsVP2nYrv2KWqa73o2iPEXIaWLiVL19IopNzP0jb0JKY+Q5xwn6IIuC+wP2oNrn3p6aMck9682KLMEsbNuRBL3zRxKQAMYYhLmEXmhbnncxFwf0RmFIkkhvecAW/o73vX63VpXS6xeGY6lmWZlmdKn4CT2Zne/JFvhqBHp2y7biPKKMEoJG9IgRqAmLNAa4UzFhMxj06Etk3bUqENSLGBbZee6eZHggzdNyPtgYw5Mvgc2XmwIUwhBopBexj2GvrZ9ya43TuOEeVTFkf8YP13kICuIGRLCAyeV5aj+37EI+1qXgD2exSHCScruFE0WSIMXLuLYUrSa8Il+QKuZePXUi5/JGcZ4L8Zy4W5i1VCN490p0NmwMX/mdnuvLZRHlGYQDPtVL2+Y4Fow2LR2VARpD3LpeIR6o0Mwq7zFlQx7vf1IVkLbr1vmjmXt6yb1CIcRADX9zgA8eyuH34th6aJ7s4Hg2cxNiu9/nw9h58vCx6lj3fVUUusqqvKS7ny1G95QRD2O7S7+XG+ehvET/bTk8kXty93Xfb4NGO/nUX6zwuaPEf18YMHIe0H6SJxOWlRenUfW5NpP7hJ6SaKH14qXffcu++j6vLtR0qFhdu3P6uXb5Pq4rUjhqzxUdNuDfvGXBJGyeQ3YJEvFT16He1KzguJr+VFWUhgTDNXf6k0igugQm+qXUpa/EQKEAl8Oczt+sqr2JZnX7U8x/Esr9O1XMu+slpWxfPKXs3NNWiL4gBim9EpUbmUym758zVAHPkcaACxsWIJngPXv4jYQQJpPTqUh4NRDmMmVdx2NhF28HoN3J7bHvDVhCXxcrJY69oNE7f0Nm5NBcQ72u2OLWdPu4eAyZKAEnjFcC4pzoVsxitaJSK0SytUopDIKyBWKuw7br1ichItQ1BQzYgFSQil5XyZtcbk23/HQJhn1mF3nJ28k4Udfst7IH0Cohy4quUS5BzhyCVk54WcLriyW3AevpUERB0w2VARE7xFsv/pgyeKIAVJZEU55MLz0LAX1TwsqEgUrAgumF5c0VLh5flv5uN4RaXXUrJaJdkAakrbYhnelBJnmyPAiRSozZgtgJpFCPNb90OB+iBzYd/Hl4g5HQkkIJJ00bLlNx4HI+DqcdCTRE+/+/LYSyn7JiAVx2ztUL4hFOIvnxnYx8pPmu/k35rFwce4jsTaySPrlC8CQehMrdRNsDlBCsxkWCKli8W7wY8FOJZ831g0ucAiJJsmiYDTXzSlSQ0dYcwSKnodPTPs6mSGU2yW4H84fQqTafH75Zryk5frr8H1SCpWhPTCl/y3s0EyumDQ1R2eYWnoqXwryuR0tqPL7wA/SXPV6bh2u+Nedmu70uzUu9WigXuVND+ZP1t2enp4Hpp/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951062D41CE4BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951062D41CD4BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951062D41CD4BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091FA922909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091FA922909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023520642</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091FA923909DE0401F0A05993974</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950D205DAD8C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950D205DAD8C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950D205DAD9C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023523135</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00111_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="b0c038d2-5414-4a8f-b044-c7e099bf0b95"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6sQ5+sGooIEhbbZ3QILbNvLy5VxDLgbbBo7IfDrrx2aFCjt7V61EvJkPHNm5vjYlxyuYjtoc44TQRjVwm5T/wdCDKyZ1TB827ENtx7ZBvTqyJghew4dx3dcf6ZrIecpDikXkIqmbgPLNYBnWM7EdgLbC+x6zXHrU127xwmXoaVLDehavoopD4q0TT1NaMAgJzygcIV5IFAwbt/9CKRnAEtMeutyj7JImLSWQqwD00S1CCMcx6iG2Mq8NI98LiMejMmCQpEm+CVnxJv6y97NZlPbODWWLEwbAGCChil9Ik4WX/XWl3IzjkI6Z/v1FaSMEgRjsoMK1B0WSxZp7XjBEiKWq3dCW6YFVGgD58hAlku/6uZrggLdJyMdgUw4NPgSWmWwEZ7jBFOEtV+jsKl//dwE93snCaR8zpIVP1n/GSRMMxyzNY4MXlZWovt8xDPtal1iFIQUxSknGe4rmqwhwlwbJnhO8h+ES/JFXCvGr+Vc/pOSZRj9yVguzUOsErp5pjtdssBc/J+ZHc5rH+UexiluYRZ1wsU0m1/AvE8W9cfBGmTTyVZs3WYB4dB5D6oa98v6lKwVt142Yfuq53du+uF8B4Y9MACN+ye2C7eT9bDuPnRvhuj26QLeTm/+7k4zzsJh59v1YLi74E/eYPcbwNFm+jAwu949cB+/uDunn9ySIbE73+9+/vWT04s0z5/udzm3kGhs8XM8bmfu1Gej3ii7yGZ1cNu7ocB+YB1rfPMIe9ZkvPk2X/Troy+L/FfjMbnp82HX2U6mHG4XzdeaDms4NpaSME5nTxiJcqnoEXa1azkvKD6WF2UhkTEvXIO10iguMBV6S+1S0hKkUoBIFMhh7tfXDc8Cvt92LbvTBj355wLrGrSB32h4ngdKDdqjOIF4xeicqFxKZff8+RggWgUc0wgnRsZStMRc/yBiFwqohXQkDwejHE+YVPGZHy/yLVrPKHzy45nFlraXzDxf1/pMDOggac8FTg6U250A+0i5RxiRNcFK3hW/uSQ4F7IVzzBLRWzVMlijOJUXQKI0OLDdumdyslrHWAE1VyxKY1xbL9dFY0y+/5VShHhhHfUmxbl7t6zTb2UHpE9ElANXtXSwnCI+cwVZZSHvF+wdFlyGb6cRUcdLtlMkBO2RHH96ZYmiR0URWVEJufI8NRxFNU8LqhJFGUEVz6sLWuq7PP2tchzPsPZcS7MsLQbgK2VLZHhTCpxljjFKpTxtJ+w3pmYVwvzU7VChPslc2Y/xpWJJxwIKvJJ00YrlJ54GY8zV0yCUNM8/++44Sin7JnAuztmuYvmCUIg/fGSgACk/aR7Knw1LotdxnYl1kEfWKd8DgtCFWql7YPsOKRCTYYkULpYcBj8X4FzyY2PV5AqLkGyapQK//0VTitTUIUIspSLs6oXhUCULnGK7xsGr05swhRK/XK05f/dqfbz7MZZ6tYJ65Uv+29kgBV0Q1tUNXmBp6rl8KcrkdHGgyi8AT4QZ2FbDdtp+z7nyjoQZeE63auBRJa035reWg56enofWvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95021923A7F3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95021923A7E3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95021923A7E3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951077A412BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951077A412BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023527333</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951077A412CA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510783442E0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510783442E0194E0401F0A059930A1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510783442F0194E0401F0A059930A1</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023530793</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00112_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked_and_revert_to_previous_status_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="eb9c22a7-c4ca-4c08-ac70-e8f220fc7fd6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb+I4EP6+vyLKflyFvEBaiApSWuA2e4V2ge6x9+VknAkxTRyIbUj7688OTQos7XVPQkKejGeemXn82FcMpYnj+YxBzklGtaDf1f9pL9ohbtmR0bpwF0arDZGxaIW2cQm4GVl2uGh2HF0LGBMQUMYR5V3dseyWYbmG3Zw5Tc9xvabbsFz7b137ATmToaVLw9K1Ik0o88q0XV3k1MsQI8yjKAXmcexN/dGtJz09VGHSe1d7lGXCvBdzvvZMEzdCwJAkuIGz1Lwyj3yuQuZNyZIiLnJ4yRmyrv6yd7fbNXbNRpYvTceyLNPqmNInZGT5We99qjZDGNAo269vEM0owSghz0iBGgGPs1Dzk2WWEx6nb4S2TdtSoQ0osIHtFv2sm68JSnQfjHQEMmfIYDGyq2ATiCAHikF7mARd/fPHJrjfO8sRZVGWp+xk/XuQgG4hydYQGqyqrEL38Yhn2tW7AuwFFCeCkS2MFU3WCAPT7nOISHFLmCRfyLRy/FrB5I9ULAP8O2O5Mg+xSujmme70yRIY/z8zO5zXPsoPlAjoXUc5hiyYjm6dDQke4t3WCb/cL8y++9gtIRw670HV435Zn5K15tbLJp+n051DJu2HePTVT8d08ZM/f08GT/P78ej6Od4M1n/BZroik529vPbhbt1EqXO/wkk8bheDfsQj+HnRosP+w/xT0A6+isfvhZiJ1fPmfjC4Xs2Xl7fW3zGfz8XzhGMxXvWdYvLn4yRM24Pv335cpBv3j5nVce5uRg9fGHr2/XEn/nYx+gRiTs1MiKWNJvOMjL8O/e5rTYc1HBsrSZiKxQowr5aKHkFfG8p5If6+vCgLCY2odPXWSqMYB8r1ntqlpMUTUoBI6Mlh7tfDjms5tuPbzbbfcjruwGpZ9tDyrctOx3Jv2pUG7VGcQLzJaERULqWye/68DxCnHgMaQm5sM4FjYPo7EfuIIy2gE3k4MspglkkVX8fOE094utqQpb17LDo8ccDFRaZr44zf0bvcjzjkB9LdmlnOkXRPAJM1AaXviuBMMpxx2YsN2gqe2I0talAQ8gbIlQh7Tqvtmoyk6wQUUjPNQpFAYx2vy86YbP/vGAiz0joZzMqD92Zdp9+qFkifkCgHpmq5BjlGOHMHOVUhbxfsHhZchfdFSNT5kv3kOcF7JMefXmmi+FFzRFZUQa49Tw1HUc3TgupE4Zbgmuj1DS0FXh7/XjWODWpsGmK7FeUALpW05TK8KRXONqeAhdSnp1n2CNSsQ5gfuh5q1CeZa/sxPsFjOuWIQyrpopXLD7wNpsDU2yCQPC8++vA4Sin7xqHg52w3iXxCKMTvvjKwh5WfNN/Lv12Wh6/jOhPrII+sUz4IOKFLtVIXwdMbpMCZDEukcmX5YfBzAc4lPzbWTa6xcMmmheDw9hdNSVJXRxhngvKgr5eGQ5kscfKnNXivTr+EKaX45W4t2Jt363x0O5WClSK99iX/7WyQki4YdHWFl1i6eiGfijI5XR7I8gvAE2W2rQtnaPWb/vCi3TlUZrfZ6tQNPKqk94v5V8tBT0/PQ+9f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951062F0D3BF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951062F0D3AF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951062F0D3AF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A138A4295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A138A4295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023534100</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A138B4295E0401F0A079905C8</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022A127DCF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022A127DCF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022A127DDF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023536369</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00113_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked:clg_Token_Type_ValidateEmail_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="27530753-27fc-48ce-b558-99b9d482b7b5" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIjUuIClIopDu90ULb3fblyDgDuE0ciB0u/fpjhyYFSnu6j4SEPBnPrJlZXvYJQ3FkuR5jkHKSUCXottR/7BFu1LFtaFAfIa0KzbrmjExDs0xrVHMaDm6GNVUJGMsgoIwjyluqZZi2ZlqaZd+ZNde03ZpVcezGs6o8QMpEaOFSMVRlFUeUuXnalpql1E0QI8ylKAbmcuwOvatLV3i6qMCktk82KPOEaXvK+czVdVwJAUMU4QpOYv1E3/E5CZk7JBOKeJbCe86QtdT3vcvlsrK0K0k60S3DMHSjqQufkJHJkdr+VWyGMKDjZLM+RTShBKOIvCEJ6gr4NAkVL5okKeHT+IvQpm4aMrQGK6xhs0qPVP0jQY7uh5F2QKYMaWyKzCLYAMaQAsWg3A+Clnr0swlu9t6liLJxksZsb/13kIAuIEpmEGqsqKxA9/OIB9rVPgHsBhRHGSMLuJY0mSEMTLlJYUxWl4QJ8oVMycevrJj4kYJlgP9mLCf6NlYBXT/QnS6ZAOP/Z2bb89pEeUBRBm24Wjce18FwfplN8DIahLcv9HLyZlxMjVYOYdt5A6oc9/t6n6wlt943nSWdbhgFF9ClTxdW32r4wXy8Xjz0L8ynM1qf3FvLP9bz+YDHxrMdk7ezXv1PaC2ct7es2u8dD1dr/Hjf7CAfdWu//Jvxyhw+GB1y2pz/ZosZvn1pMuo8OQ/H56PBiIa39l0aj63rUfCSxN7x/Gx83Dx7vbd+X/gjp1+3VwPDv38dXRH/14NzY/c7w3M+8aejZj8L+X3ro6btGnaNhSQMs9ELYF4sJT2CruKLeSH+vbxICwm1ce7qzqRGMQ6Uq225S0qLmwkBIqErhrlZ93p23ej6nlnrWFXPqfaMqmH6hmfUms267diFBm1Q7EE8TeiYyFxSZTf8+R4gjl0GNIRUWyQZngJTv4nYRRwpAR2Iw5FQBneJUHGj3qxVOx2741ueb3Wtnud5dsP0q3Wv7p02TFW5Tnif9lNvzCHdVXBnR8EHgMmMgJR5yXMmiM64aMkcLTIemZUFqlDIxEWQSi12rapT0xmJZxFIwHqchFkEldl0ljdIZ5t/S0OY5dZB7y4/f1+Wt/+t6ITwCYl0YLKWDohpwoGrqFoU8mXBlrldcBHey0Iij5loK08J3iDZ/fTBFkmTkiqiogJy6blv2Imq7xdUJgoXBJd8Ly9qofNCBdrFOOaoMq9ki0WWD6AhFS4V4XUhdKY+BJwJmVrfJa9A9TKE/qNbokS9l7m07+LL+JQOOeIQC7oo+fIHT4QhMPlECATdVz99f+ykFH3jsOKHbKeReElIxN8+NrCLpZ8w34i/ZZKGH+M6EGsrj6hTvAs4oRO5kvfB+gtS4ESEJULAknQ7+KEAh5LvGssml1i4YNMo4/D1F0UqU0tFGCcZ5UFXzQ3bapnj5OsZuB9On8Lkivx+xa7Yl1fs49XlUOhWjNTSl/y3s0ZyumBQ5U2eY2mpK/FiFMnpZEud3wEeFmiv/p1A71bS/mT+bNnq6f55aP8L</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EE360DFA15A74A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EE360DFA15A64A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EE360DFA15A64A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EE360DFA15B24A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EE360DFA15B24A84E0401F0A05996383</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131223_1387811690604</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EE360DFA15B34A84E0401F0A05996383</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EE360DFA15E64A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EE360DFA15E64A84E0401F0A05996383</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE360DFA15E74A84E0401F0A05996383</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20131223_1387811709775</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00114_UVTC_PrimaryEmail_maps_to_multiple_users_status_suspended_Token_Type_ValidateEmail_node_role_Retailer_403_FORBIDDEN_P1" searchProperties="true" id="111ff614-d4b2-44d2-a4cc-dd24eefc4824" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0Tp41ZIQrglAqQUaMsuvWyg9PJyZJyBuA1OiB0u/fpjB5ICpT3sIyEhT8Yza2aWl11naBYUHZcxiDkJqdJtN9R/bKNarnhjU7PHpqGVyuWyNrYnNW1iVAy7Oq7haq2oKl3GEuhSxhHlDbVomJZmFrWiNTTLjllyylZB7HxVlRHETIQWLgVDVVazgDInTdtQk5g6IWKEORTNgDkcOwP3tucITwdlmNRmfYMyTRg3fc4jR9dxwQMMQYALOJzpdX3Pp+4xZ0CmFPEkhm1OjzXU7d7lcllYWoUwnupFwzB0w9aFj8fI9FxtnmWbwevSSbhZtxANKcEoIB9IgroF7oee4gbTMCbcn30T2tRNQ4bWYIU1bJbouap/JkjRnRhpD2TMkMZ8ZGbB+jCBGCgG5bHfbajnp01ws3cYI8omYTxjB+u/gwR0AUEYgaexrLIM3ekRj7SrWQfsdCkOEkYWcCdpEiEMTHmIYUJWPcIE+TympONXVkz8SMYywH8zlrq+i1VA1490p02mwPj/mdnuvDZRRihIoKnPK+/+vX/T4h+TzsWvzkfso7cb/PZkGo0Uwq7zBlQ+7u36kKw5t7abrp9I3I4CL2xNw2Hx3XwYtYc3b29P0bOFf/OPV9cfrH9F7jzq2X965H3+SP2X4XypB3A1fuKlx3LCl+uR+XK56r6d+b43bb8831/ppWv3z+TOW/D7u+juZV0F/aJTc9fsifX7r1WrFI46UWXUr0FSaVuxTW6rvx+KwbU9L1YjRntmbXbWeV4t+/ZVYtJoGpP5PCC1xmdNuzXsGzNJGCTjN8A8W0p6dNvKpZgX4j/Li7QQT5ukrk4kNYpxoFxtyl1SWpxECBDxHDHMzbrTsSpG+9I1K6ZRcmuljlEyzEvDNcq2XbFqVqZBGxQHEFshnRCZS6rshj8/A8QzhwH1INYWYYJ9YOoPEduII6VL++JwhJTBMBQqftmudGzLqtiVdvWibLmm27KqHbdcsyzbvbywVOUu5Pf0PnYnHOJ9Ba/tKXgfMIkISJmXPGeC6IyLlszRIuGBWVigAoVEXASx1GKnWKqVdUZmUQASsD4LvSSAQuRHaYN0tvkvagiz1NrvDNPz9215h9+yTggfj0gHJmu5ADFNOHIVlbJCvi24aO4WnIV3E4/IYybaymOCN0j2P32yRdIkp4qoKIOcex4a9qLqhwXlibwFwTnf84ta6LxQgWY2jjkqzAvJYpGkA6hKhYtFeF0InakPACdCptbD8B2onofQT7olctQHmXP7Pr6E+3TAEYeZoIuSLk94IgyAySdCV9B9der7Yy+l6BuHFT9mawXiJSER//jYwA6WfsL8IP6WYex9jutIrJ08ok7xLuCETuVK3gfrb0iBQxGWCAEL493gxwIcS75vzJucY+GCTeOEw/dfFKlMDRVhHCaUd9tqathVyxQnX0fgfDp9CZMq8vaKXbFvr9jn295A6NYMqbkv+W9njaR0waDKmzzF0lBX4sUoktPpjjpvAR4XaKP0k0DvV9L8Yv5q2enp4Xlo/gs=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EE360DFA16054A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EE360DFA16044A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EE360DFA16044A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EE360DFA16104A84E0401F0A05996383</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EE360DFA16104A84E0401F0A05996383</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131223_1387811751208</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EE360DFA16114A84E0401F0A05996383</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EE36170122DC69CCE0401F0A07995D39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EE36170122DC69CCE0401F0A07995D39</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE36170122DD69CCE0401F0A07995D39</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20131223_1387811771958</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00115_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_ValidateEmail_node_role_Retailer_404_NOT_FOUND_P1" searchProperties="true" id="fcb34e31-9f46-4158-8d10-a96156687e1f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfnRK0/JmO8JMEV+qoCLoUb/cCekWcixJbVJe/PU3LbYCotdzZ5hhst3sPrv75EmOBZ5FtusJAYmknGl+t6X/49hkDLgJxrjRsIxaPWgYY4RCo+lUa3aAG3YVjnTNFyIFnwmJmWzpNrJqBqobVnVkV1277tasSs2yn3XtARKhQiuXCtK15Sxiws3TtvQ0YS7HggqX4RkIVxJ36PV7rvJ0cYFJbx+vUeYJk/ZUytg1TVIJgEAUkQrhM/PY3PI5DoQ7pBOGZZrAe85AtPT3vYvForKoVngyMW2EkIkcU/kEgk4O9PavYjMEPgv5en2CGWeU4Ii+4QxUH+SUB5oXTXhC5XT2RWjLtFAW2oAlMYhVYwe6+ZEgR/fDSFsgE4ENMcVWEewOQkiAEdDu7/yWfvCzCa73jhLMRMiTmdhZ/x0kYHOIeAyBIYrKCnQ/j7inXe1jIK7PSJQKOofrjCYxJiC02wRCuuxRocgXCC0fv7YU6kcLlgH5m7Ecm5tYFXRzT3e6dAJC/p+Zbc5rHeUBRym0b+4D/4UMQieIDi+7aYzGK+fhhvde+aSVQ9h0XoMqx/2+3iVrya33TZ2msIZvD8nUnNS8sXmIT8ce8W8RhOll/5z2LhCPXwb10D/sdDzxKB+e3y7SK3Q16t9E/pM1qhM/GAzGl0mThb+e7i+fn2YjNI5f+p24FqEOPT/8fd15qpI3uHg8k6vB3cjmC8qSpNv94/QXHo/CcOp3l+Zt0LPNHn8incfg6fxw8gsNHqr30yvncr4IV+bv8Hxw1PqoabOGbWMhCcN0/AeILJYZPfyudqbmheX38pJZaGCEuasbZxolJDCpt7NdmbS4qRIgGrhqmOv1mVO3kGOdHTld76RTRaeohqwz5KG641Sdhldo0BrFDsQTzkKa5cpUds2f7wGSmSuABZAYc56SKQj9m4hdLLHmszt1ODgTMOJKxYNmYk/f0JuUk6hBWR3GK7BhAbp2zeUNu0m8UEKyody1EbK3lPsOCI0pZPKe8VsoggupWvGK56mMrMocVxik6gJIMg127dpR3RR0FkeQATVnPEgjqMTTOG+MKdb/toGJyK13p6P83H1Z1u63ogPKJ6CZg8hq6YCaIuy5gqpFIV8XXN8suAjvpQHNjpdqp0woWSPZ/vTBkoweJUVURQXk0nPXsBXV3C2oTBTMKSl5Xl7QSt/V6W8X43jFlddKOp+n+QCambIlKrypBM4yh0BSJU+rEX8BZpYhzB/dDiXqncylfRtfKqdsKLGEmaKLli9/8DQYgsieBr6i+fKn746tlKpvEpZyn+0kUi+IDPG3jwziksxPmW/V34Inwce49sTayKPqVO8BSdkkW2X3wOoLUhCuwlIlXDzZDL4vwL7k28ayySUWqdg0TiV8/UXLFKmlY0J4yqTf1XPDpkrmOOUqBvfD6VOYXInfr9al+PJqfez3hkqvZlgvfel/Oxs0pwtR8qT8cywtfaleiio5m2yo8jvAz8Jsd60OaniN2tG2MDdR2cCtStqfzJ8tGz3dPQ/tfwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951092D1B07A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951092D1B06A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951092D1B06A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091F89DACB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091F89DACB30E0401F0A0599396A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023540245</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091F89DBCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9502358DF8B1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9502358DF8B1B42E0401F0A05990975</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9502358DF8C1B42E0401F0A05990975</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023543320</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00116_UVTC_PrimaryEmail_maps_to_multiple_users_status_forcedeleted_Token_Type_ValidateEmail_node_role_Retailer_404_NOT_FOUND_P1" searchProperties="true" id="38567f45-2ea0-4c67-b00e-bdf03631b9e3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1XIBwGSqCBRoCy7dNsLtFv6cmWcIbhNnBA7QPn1a4cmBUp7u1dCQp6MZ87MHB/7gqEotLw2Y5ByElNl0G2q/xp1x52bAJo7b5iaXTdm2gw5DQ2qRmPmmnZ9PsOqMmAsgwFlHFHeVC3DtDWjppnViVX1rJpnOxXLcB5V5R5SJkILl4qhKpsopMzL0zbVLKVejBhhHkURMI9jb9y+HnrC00MFJrV1sUOZJ0xbC84TT9dxxQcMYYgrOI70C/3A58Jn3pgEFPEshdecPmuqr3vX63VlXa3EaaBbhmHohqsLH5+R4ExtfSs2gz+g83i37iAaU4JRSLZIgroGvoh9pR0GcUr4IvogtKmbhgytwQZr2LTpmaq/JcjRfTHSAciUIY0tkFkEG8EcUqAYlLvRoKmefW2Cu72TFFE2j9OIHa3/DhLQFYRxAr7GisoKdF+PeKJdrQvA3oDiMGNkBb8kTRKEgSm3KczJZkiYIJ/PlHz8yoaJHylYBvhvxnKh72MV0PUT3emSABj/PzPbn9cuyj0KM2gh11nC3dT6te1n1ev6s//Uv13djR6er56bOYR95x2octyv62Oyltx63XQ//O5Ox7Ps8r6fDBduxOtVspr8mJrXPx6ve8HNFYm7v++/b7JOf/KwrCX/OIuXIBtGjzePPajVzQFe/o4v7d/m+dL6NnBu4Nb1HX10N7wJG/eX/VrQ7Vh20nhaJVP8vb1GPxsGtpL+ujd9ts911kOj8Hl1+XC+fXQCv//jvK6n/hoCmH4Lt06nt24P6rQ2XdZ/NhZPcfOtpv0aDo2FJIyz2RNgXiwlPQZd5UrMC/HP5UVaiK/Nc1cvkRrFOFCutuQuKS1eJgSI+J4Y5m595daMrmXUqma7YdjOVc+wDfPKaBs117UaHbPQoB2KI4idmM6JzCVVdsefzwHiyGNAfUi1VZzhBTD1k4hdxJEyoCNxOGLKYBILFaeLJbedqgvb6tycmYG/rW8h2SJxPH7F/IbepO05h3RPuu2JYR1I9wgwSQhIfZcEZ4LhjIteLNEq46FZWaEKhUzcAKkUYc+ynZrOSJSEIJHqUexnIVSSRZJ3Rme7f0tDmOXWUW+SH7wP6zr+VrRA+PhEOjBZyyWIMcKJO6haFPJxwbX9govw7cwn8nyJfvKU4B2Sw09vNJH8KDkiKiogl57HhoOo+nFBZSJ/RXBJ9PKGFgIvjn+rGMcSVZaVbLXK8gE0pLSlIrwuFM7Ux4AzoU8vk/gZqF6G0L90PZSojzKX9kN8GV/QMUccIkEXJV9+4W0wBibfBgPB881XHx4HKUXfOGz4KVsnFE8IifjTVwb2sPQT5lvxt45T/21cJ2Lt5RF1igcBJzSQK3kRvHxAChyLsEQoV5zuBz8V4FTyQ2PZ5BILF2yaZRw+/qJISWqqCOM4o3zQVXPDvkzmOPlLAt6b07swuRS/3q0b9uHd+nA9HAvBipBa+pL/dtZIThcMqrzCcyxNdSOeiiI5DfZk+RXgsTJbVqdhd7tGzbSdUpkbrmtY3cuygQeVtN6Z31v2enp8Hlp/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C74DD15148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C74DD05148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C74DD05148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D20531A7048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D20531A7048FE0401F0A059927C1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023547123</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D20531A8048FE0401F0A059927C1</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950212A808829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950212A808829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950212A808929DFE0401F0A059909A1</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023549796</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00117_UVTC_PrimaryEmail_maps_to_single_child_user_and_valid_node_role_DECE_CS_Token_Type_ValidateEmail_200_OK_P1" searchProperties="true" id="e43e7d30-2655-4aa7-9809-92dcfd6b24a9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH6uQj0JoooLER9nNLdAWuO1uX1bGmRDfGxyIHQj8+rUDSYFCt3clJOTJeObMzPGx7xiaR5bbYgwSTmKqeN2G+o99Y9dv6lNbcwLH0Kq4ZmtTA6aaZdWnQTC9RY4xVRWPsRQ8yjiivKFahlnVjJpm3kysG9equbVqpWpab6ryAgkToYVLxVCVbB5R5uZpG2qaUDdGjDCXojkwl2N33Br0XeHpogKT2rzbocwTJs2Q84Wr67jiA4YowhUcz/U7/cjnzmfumMwo4mkC+5w+a6j7vev1urK+qcTJTLcMw9ANRxc+PiOzK7X5rdgMvkeDeLfuIBpTglFEtkiCGgAPY19pRbM4ITycXwht6qYhQ2uQYQ2bVXql6u8JcnRfjHQEMmFIYyEyi2AjCCABikH5MfIa6tXXJrjbO0kQZUGczNnJ+vcgAV1BFC/A11hRWYHu6xHPtKt5B9j1KI5SRlYwlDRZIAxMeUogIFmfMEE+nyn5+JWMiR8pWAb4d8Zypx9iFdD1M93pkhkw/n9mdjivXZQXFKXQdNLJNuiQKd30hk+v8DK3NqEVrJPIfG7kEA6dd6DKce/Xp2QtubXftLm+Xz+NSKT3STdi7bc6t9vJ42hdf7i2x/7fWfbD81G4GQS8/XpLHmdLnS5typd/LGqvr0b/GXy999Buj5wUbr/Zte3w8bttzQZsmC4m1w9vbNXBg/tZ7/XPdojqfv9l8j20bgf1x9YsfgmfreUW41rW7057XQKv7Ff89DSceJPxdvhtErR/6m9GsrV9GnY2XowGjfeaDms4NhaSME6nPwHzYinp4XWVnpgX4p/Li7QQXwtyV3chNYpxoFxtyl1SWtxUCBDxXTHM3brn1EzDMXstp3XvGE733qgaZs9oGTXHuXHq1UKDdihOIHZiGhCZS6rsjj+fA8RzlwH1IdFWcYpDYOonEbuII8WjI3E4YspgEgsVDyKUZku+2lTr5mxbTQRP6+ssYqoyjPkjfUxaAYfkQLmrE8M6Uu4RYLIgIOVd8psJgjMuWrFEq5RHZmWFKhRScQEkUoNdq3pb0xmZLyKQQPV57KcRVBbhIm+Mznb/loYwy615VzHLz97F0k6/FV0QPj6RDkzW0wYxSThzDVWLYi4XXTssugjfSn0ij5hoKU8I3iE5/vTOFEmRkib7qgrYpfep4SiyflpUmcxfEVzyvbyohc4LFWgWY1miyrKSrlZpPoi6VLhEhNeF0Jn6GHAqZGoziX8B1csQ+pduiRL1SebSfowv5SEdc8RhLmij5MsvPBHGwOQTwRN0z776/jhKKfrGIePnbJ1IvCQk4k8fG9jF0k+Yn8TfOk7893GdiXWQR9Qp3gWc0Jlcyftgc4EYOBZhiRCwODkMfi7AueTHxrLJJRYu2DRNOVz+okhlaqgI4zil3OuqueFQLXOcfLMA993pQ5hckfdXbMYuXrF/DfpjoVtzpJa+5L+dNZLTBYMqb/IcS0PNxItRJKezA3XeAzwRaMOyurbVse1er90pBbruOIZ1b5YNPKqk+cH80XLQ09Pz0PwX</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022D62C69FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022D62C66FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022D62C66FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091FA9AE909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091FA9AE909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023553300</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091FA9B1909DE0401F0A05993974</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F951091FA9AE909DE0401F0A05993974</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F951091FA9AE909DE0401F0A05993974</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023556263</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950228A5A597D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950228A5A597D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950228A5A5C7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950212A808829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950212A808829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950212A808929DFE0401F0A059909A1</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023549796</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00118_UVTC_PrimaryEmail_maps_to_single_child_user_and_node_role_Retailer_Token_Type_ValidateEmail_403_FORBIDDEN_P1" searchProperties="true" id="61219819-3ca3-40c9-a665-99e44be30b06"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbdbvI4EL3vU0TpZRXyAwESARKFoqYt0C3QbXuzMo4DhsRJYwcCT792aFKg0OVbCQl5Mp45M3N87AYFgW/YbUpRzHBIJKfblP+xymXPq0yB4ml1TakAz1UAqNcUt1wDACKoT6e6LDmUJsghlAHCmrKh6RVFMxW9PDbKtmHaplWq6daHLL2imPLQ3KWkyVIa+ITaWdqmnMTEDgHF1CYgQNRm0B61+08297RBjkluNXYos4Rxa85YZKsqLLkIIt+HJRgGakM98Gm41B7hGQEsidFXTpc25a+96/W6tC6XwnimGpqmqZqlch+X4tm13LrKNyPXIV64W3cACQmGwMdbIED1EZuHrtT2Z2GM2Tw4E1pXdU2EVlAKFahXyLWsfifI0F0Y6QBkTIFC50DPg70gD8WIQCRNXpymfH3ZBHd7xzEg1AvjgB6t/wwSIivkhxFyFZpXlqO7POKJdrUaCNoOgX5C8QoNBE0iXgGVnmPk4fQJU04+l0rZ+KWU8h/OWYbgn4yloe5j5dDVE93p4hmi7P/MbH9euyivwE9QK76LzErPnyzf9IAFb2GweFs+xNH2PnWaGYR95x2oYtxf62OyFtz62gRn9HXwMbupAy19VPUlWXuJ2ceTSbKt1XR/sPUfO+WhZViDD6s2GG+Hm+lkmgTmiHxM+uF9xTPvbunz31bnr7p/tVmkb+C16m6r7MafO0R/H62sWXi/rPef+o9GF46t2Xy0CZajd6EPD2uSju8cy3e3i/i97lbHVtrefET+jUedq6E36z20x8bt6zMgw/f0xeo3v2var+HQmEvCKJkuEGT5UtDD6Uo9Pi/AfpcXYcGu4mWudiQ0ijJEmNwSu4S02AkXIOzafJi7dc8yNcPoVo1Ordbr3XbutIqm97S2VrMszbjTcw3aoTiC2AmJh0UuobI7/vwOEAY2RcRFsbIKEzhHVP4lYhcwIDnkhR+OkFA0DrmK1+psakYL018ufLymLsBb31xUfVkahGxIhnHbYyjeU+7KWDMOlPsFQRxhJORd8JtyglPGW/EJVgnz9dIKlAhK+AUQCw22jUrdVCkOIh8JoGoQuomPStE8yhqj0t2/oQBIM+vL3Tg7d2fLOv6Wd4D7uFg4UFHLLeJTRCeuoEpeyPmCzf2C8/DtxMXiePF2shjDHZLDT98sEfQoKMIryiEXnseGg6jqcUFFIneFYcHz4oLm+s5PfysfxycofZaS1SrJBlATyhbz8CoXOF0dIZhwedqMwyUiahFCveh2KFAfZS7sh/gSNicjBhgKOF2kbHnB02CEqHgaOJzm6aXvjoOUvG8MpeyUrePzF4RA/OsjA9pQ+HHzM/9bh7H7Pa4Tsfby8Dr5e4BhMhMrcQ9szpAChjws5sIVxvvBTwU4lfzQWDS5wMI4m6YJQ+e/SEKRmjKAMEwIc7pyZthXyQwn20TI/nb6ESZT4q+rNaVnr9a3/tOI61UA5MIX/7ezgjO6QCSLGzzD0pRT/lLkyclsT5W/AB4Lc9fQzO6t0e6YXW1fmM1q9bZo4EElrR/mn5a9nh6fh9a/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205DB2BC5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205DB2AC5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205DB2AC5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D62C77FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D62C77FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023558349</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D62C78FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95022D62C77FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95022D62C77FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023561192</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950D206B9F9E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950D206B9F9E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950D206B9FAE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950212A808829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950212A808829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950212A808929DFE0401F0A059909A1</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023549796</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00119_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="9b99916c-ad10-4246-bd47-5f9d5bc29250"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3A5j1vGF8zNFagiARLPkiuQTOZlS8hto4ktOZZsyHz9SiZ2gFw2s1VUUWq3uk93Hx3pmKMkdrwh55AJwqjmj/r6P50AuuEysIwlDkPDtcPAWHbdlmEtMbitZdBxW4Gu+Zzn4FMuEBV93bFs17Baht2cO03PaXuW27C7rZ+6dgcZl6GlS8PStU0SU+6Vaft6nlGPIU64R1EC3BPYmw0vpp709FCFSR8cb1GWCbPBSojUM03cCABDHOMGZol5bO75HAfcm5GIIpFn8JIz4H39Ze96vW6smw2WRaZjWZZp9UzpE3ASHemDb9VmCHwasu36FFFGCUYx+Y0UqAsQKxZowzhiGRGr5IPQtmlbKrQBG2xg26VHuvmaoET3xUh7IDOODL5CdhXsFkLIgGLQFrd+Xz/62gS3e+cZojxkWcIP1n8GCWgBMUshMHhVWYXu6xHfadfgGLDnUxznnBRwqWiSIgxcu84gJJsp4ZJ8AdfK8WsbLn+kYhngPxnLsbmLVUI33+nOiETAxf+Z2e68tlHuUJzDAN0H9vwMWZvwMbk5u7oPLh4hGRfx+GLdLyHsOm9B1eN+WR+StebWy6abBGc3vUlYTNHD02pory4781/FaOb+dEfx09+L0D0dj8+at9+RLex0dkr9FUwnrp3+fnhuM9Junp1dZ+cYTTus+23ent6fNK8TiobYnq+uJ53ZYsmbMBxPN724/SPCwTReRL7t38Dz7LwYuiy++2ua4fF51MkWbjtabIpuyp43J4/fLpMH8jhtheCcOG66ZlffF/3XmnZr2DdWkjDLl78Ai2qp6OGPtImcFxKfy4uykMAIS1cvVRrFBVChD9QuJS1eLgWIBJ4c5nY96bVsq2ePbXdsdU4ce2y5lj2xhlar12v22u1Kg7YoDiCeMhoSlUup7JY/nwPEiceBBpAZBcvxCrj+ScQREkjz6a08HIxymDOp4kuOl+vlmq+WqGO3o6hDn8K2aLOerl0ycUWvsmEoINuRbnduOXvSfQuYpASUviuCc8lwLmQvnlCRi9huFKhBIZc3QKZE2HPcbsvkJEljUEjNhAV5DI10lZadMfn23zEQ5qX1djwvD96HdR1+q1ogfQKiHLiq5QTkGOHNHdTyWlUhHxfc2i24Cj/MA6LOl+ynyAjeItn/9EoTxY+aI7KiCnLteWjYi2oeFlQnCgqCa6LXN7QUeHn8B9U4nlDjqZEXRV4OoKOkLZPhTalwtjkDnEt9ep6zR6BmHcL80vVQoz7IXNv38eViRWcCCUgkXbRy+YW3wQy4ehv4kuebrz489lLKvgnYiPdsp7F8QijEn74ysIeVnzRfy781y14Lfy/WTh5Zp3wQCEIjtVIXwfMHpMBMhiVSuVi2G/y9AO8l3zfWTa6xCMmmZS7g4y+akqS+jjBmORX+SC8NuzJZ4hTPKXivTm/ClFL8crdu+Id364+L6UwKVoL02pf8t7NBSrpg0NUVXmLp6xv5VJTJabQjyy8AD5TZGjmWM7Ek1bq9PWV2OieTuoF7lQzemN9adnp6eB4G/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D202F0211891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D202F0201891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D202F0201891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091E14E07B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091E14E07B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023563204</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091E14E17B21E0401F0A05993966</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510927535E7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510927535E7965E0401F0A05993983</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510927535F7965E0401F0A05993983</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023565703</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00120_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="c9ab09e1-7686-4cdf-9c73-29bc1a94c7b8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2Do4x4EImhl1BmrdW/a2otY256XMzFEzC4EJEGxv34nKFTt5XSfGWecLFa+9a1LvqTNYBQCp8cYTjmJqeIOOuq/zboN8Nz2tdZs7mtWw/K1mW02NWTPTd80gNWyfFVxGcuwSxmHlHdUYJiWZtiaWZ+AugMajtGqNYD1j6pMccoEtHCpGaqSRyFlThG2o2YpdWLICHMojDBzOHK83ujaEZ4OLDmp3faWZREw7S44TxxdRzUfIxyGqIbiSG/rBz5tnzkeCSjkWYp3MX3WUXd71+t1bV2vxWmgA8MwdKOlCx+fkeBU7Z6Um7Hv0nm8XfchjSlBMCSvUJIaYb6IfaUXBnFK+CL6BNrUTUNCazhHGjIteqrqbwEKdt9EOiCZMqixBTRLsDGe4xRThJWHsdtRT7/Xwe3eSQopm8dpxI7Wf0cJ0xUO4wT7GiszK9l9H/GDcnXbGDkuRWHGyArfyDFJIMJMuUvxnOTXhInh85lStF/JmfiRcsow+pu2tPV9roK6/kF1BiTAjP+fnu33a4syhWGGu8HQ+2UGl/0JhcZgvZ4k6fPLMn9+vPYuOgWFfectqardu/XxsFaztduUPcKX2+gJ01sKxqMGmL7kz3qQz2Z8ct5I67f2cj0eNCf+NInO8sUy+smN/HkTG+v1cmb595v+xISNq743eZqOTy7PjJa77AcP14sbGJ+d9y5/rGcCfmbW9TvLBcC7/7EcP4T2K5yZTfI0dY3gvgHHD1e/pquXofe6oqPHn2AN6xfTE3LNRqPfd0b98rkJ+t7VkN133nLaz+HQWEqCl81+Y8TLpRwPd6AMRb8g/1pepIX42rxwdRKpUYxjytWu3CWlxcmEABHfEc3croct2wB1+2wwHDTMcwtcGJZhDo2eYbdaRqtplxq0ZXFEsR/TOZGxpMpu5+drgihyGKY+TrVVnKEFZuoXiAPIoeLSsTgcMWV4EgsVb/FkhTZh3CAkMWdLtrFmAQN2ulSVm5jf0tu0N+c43ZNua2KAA+keY0QSgqW+ywFnYsIZF7VYwlXGQ7O2gjWKM3EDpFKEHWCd2TojURJiyVSPYj8LcS1ZJEVldLb9BxpErLCOLybFwfs0r+NvZQmEj0+kA5O5nGPRRvzuDrIdu0zk84Tt/YRL+F7mE3m+RD15StCWyeGntzGR81HNiMiopFx5HhsOUPXjhKpA/oqgatCrG1oIvDj+3bIdS1hb1rLVKisa0JTSlgp4XSicqXsYZUKfNpP4BVO9gtC/dT1UrI8iV/ZDfhlfUI9DjiMxLkqx/MbbwMNMvg1cMef5dx8eByFF3TjO+Ue2fiieEJLxl68M5CDpJ8x34m8dp2+Jf4S1F0fkKR4EnNBAruRFsPlkKFAsYIlQrjjdB/8I4KPgh8aqyBUXLqZplnH8+RdFSlJHhQjFGeXuQC0M+zJZ8OSbBDtvTu9gCine3a05+/RufRpde0KwIqhWvuS/nTVSjAvCqrzCCy4dNRdPRRGcBnuyvCP4TplBvQXqdQBAq3GozGfNqoAHmXTfmd9b9mp6fB66fwA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950223923332296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950223923322296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950223923322296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502358DFD61B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502358DFD61B42E0401F0A05990975</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023568616</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502358DFD71B42E0401F0A05990975</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951091E14FF7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951091E14FF7B21E0401F0A05993966</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951091E15007B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023571359</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00121_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_UnlockMe_node_role_Retailer_null_P2" searchProperties="true" id="c6bc6872-dbb9-4da2-8e6b-cba1ad23c395"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIhWuigkRLadPSywG23e3LkXEG4pLYaexw6a9fOzQpUNrTPRIS8mQ8883M588+4SiOHK/LOaSCMKr5vbb+b2uCWhPbsoym5bhGDdenBqracond1qQ6tWvNaVPXfM4z8CkXiIq27lh2zbDqhl0dO1XPaXh2rdJqtJ507QFSLkNLl4qla6s4otzL07b1LKUeQ5xwj6IYuCewN+reDDzp6aECk9452aDME6adUIjEM01cCQBDFOEKZrF5Yu74nATcG5EZRSJL4S1nwNv6297lcllZVissnZmOZVmm5ZrSJ+BkdqR3fhSbIfDplG3WZ4gySjCKyCtSoG5AhCzQutGMpUSE8SehbdO2VGgDVtjAdo0e6eZ7ghzdNyPtgEw5MniI7CLYEKaQAsWg/Rz6bf3oexPc7B2niPIpS2O+t/47SEAXELEEAoMXlRXovh/xQLs6J4A9n+Io42QBt4omCcLAtfsUpmQ1IFySL+BaPn5txeWPFCwD/DdjOTG3sUro5oHu9MgMuPg/M9ue1ybKA4oy6LyCGdfsLk9+P867HI5rd1dW76EbLNesnUPYdt6AKsf9tt4na8mtt039oHou6Dxk8PAyOn4e3kdJw1z9c336+/iyi1/nIz56TmfuVe1muK4+uNFd63Qxt+6Sbq9/uR4j9tS8tK+yezu5og8/sstoMLRuf9n+1K+b4+v+ioeuv5qT55ufg+U1Cu4EDNYsFI3BBVzQHgof7wdPQbB+ZOz4aolnwTKrSoAXT/OnHwt/2nLipNlwWdDvN66zBmu/17Rdw66xkIRRNnkGLIqlooff0/pyXkh8LS/KQgJjmrt6idIoLoAKvaN2KWnxMilAJPDkMDfrvlu3Ldc+t+t2vXnq2OdWzbL7Vtequ27VbTQKDdqg2IN4xuiUqFxKZTf8+Rogjj0ONIDUWLAMh8D1LyL2kECaT4fycDDKYcykitv0NSbROqjidG2Fr8tJXJ+kz64V6totE3f0Lu1OBaRb0l0bW86OdA8Bk4SA0ndFcC4ZzoXsxQtaZCKyKwtUoZDJGyBVIuw5tVbd5CROIlBIzZgFWQSVJEzyzph88+8YCPPcOjwf5wfv07r2vxUtkD4BUQ5c1XIKcoxw4A6yikI+L7i+XXARvpsFRJ0v2U+RErxBsvvpnSaKHyVHZEUF5NJz37AT1dwvqEwULAguiV7e0FLg5fHvFON4QZWXSrZYZPkAmkraUhnelApnmyPAmdSn9ZjNgZplCPNb10OJei9zad/Fl4mQjgQSEEu6aPnyG2+DEXD1NvAlz1fffXjspJR9E7ASh2xnkXxCKMRfvjKwh5WfNN/LvyVLg/dxHYi1lUfWKR8EgtCZWqmLYP0JKTCTYYlULpZuBz8U4FDyXWPZ5BKLkGyaZAI+/6IpSWrrCGOWUeH39NywLZM5TrFOwHt3+hAml+K3u3XFP71bf90MRlKwYqSXvuS/nQ2S0wWDrq7wHEtbX8mnokxOZ1uy/AZwT5ktx+k1nDP3vN8/PSuVuem6lnNulw3cqaTzwfzRstXT/fPQ+QM=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022D62C9FFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022D62C9EFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022D62C9EFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091E15157B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091E15157B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023574051</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091E15167B21E0401F0A05993966</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00122_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="89b57c26-23a1-4d0a-8561-092a8cf48f2f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx3jSyHEnsAM4ZI6JaTBJG3OyxlFWkDUlsCSuf36SiZ2gJCc9Mwww2i92v1299MnXQiUxF7QEgJSSTkzwk7D/BdIzYWxSyyHOOdW9QyPLR972BpXa8riemcAvmmEQmQQMiERkw3Tc9yq5dQs9+vI+xp4Z4HrV1yn/o9pPEAqVGjlUnFMY53ETAR52oaZpSzgSFARMJSACCQOotZNP1CeASowmc2LHco8YdqcSjkPbBtXCGCIY1zBPLEv7AOfCyKCiE4YklkKzzmJaJjPe1erVWX1tcLTie05jmM7vq18iKCTz2bzU7EZSMjGfLduI8YZxSimW6RB3YCccmK04glPqZwmb4R2bdfRoS1YYwu7VfbZtF8S5Og+GOkAZCqQJabILYINYQwpMAzG/TBsmJ8/NsHd3lGKmBjzNBFH67+DBGwJMZ8DsURRWYHu4xFPtKt5ATgIGY4zQZcw0DSZIwzC+JHCmK77VCjyEWHk4zfWQv1owTLAfzOWC3sfq4Jun+hOh05AyP8zs/157aI8oDiDZmtzM5iQzsN50ovkdhtGT2E3WnTs2G41cgj7zjtQ5bif18dkLbn1vCm+urxF5IoILHpi8e1uymZz9MX/4d/1N6NEku/bGqnez+LZw7j/OHg8W2/vHecuXtTvHrd88XuWXLXxqDOrj2a3/U+EP9rRw9Wj7F1vfm0vrxH53vF8B7ynp2gWrWrhhq2T+c+fdbJqX89i4Lzeo5ubjeuH3Xb67b4uU58MhPDWwD85w2F9ih+cLe8PbsLO4MtTt/FS034Nh8ZCEqLsaQZYFktNj7Bj9NS8kHxfXrSFEmucuwZzrVFCApNmU+/S0hJkSoAoCdQwd+ueX3M8r3PmtS+9Xu+y3XWqjttzWk7d9x2v6xYatENxBLHN2ZjqXFpld/x5HyBOAgGMQGoteYanIMx3InaQREbIhupwcCZgxJWKu+42JtWzsSehvsVVucQrn6JpUjONAZe37DZtjSWke9JdHTnegXQPAdM5Ba3vmuBCMVxI1YsFWmYyditLVGGQqRsg1SIceNXzmi1oMo9BI7UTTrIYKvPpPO+MLXb/noWwyK3D7ig/eG/WdfytaIHyIVQ7CF3LJagxwok7yCkKebvg2n7BRfhWRqg+X6qfMqV4h+Tw0wtNND9KjqiKCsil57HhIKp9XFCZiCwpLole3tBK4NXxbxbjWKDKopItl1k+gLqWtlSFt5XCuXYEOFP6tBnx38DsMoT9oeuhRH2UubQf4svklEUSSUgUXYx8+YG3QQRCvw1CxfP1Rx8eBylV3ySs5SlbO1ZPCI343VcGDrD2U+Yf6m/FU/IyrhOx9vKoOtWDQFI20St9EWzeIAXmKixVysXT/eCnApxKfmgsm1xikYpNT5mEt78YWpIaJsKYZ0yGHTM37MtkjlNu5hC8OL0Kk0vx8926Fm/erb9u+pESrASZpS/9b2eL5nTBYOorPMfSMNfqqaiSs8meLD8DfK3M561ay+/VO17rQJmrnW7ZwINKmq/Mry17PT0+D80/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950228A5AA07D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950228A5A9F7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950228A5A9F7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D62CB2FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D62CB2FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023577956</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D62CB3FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950228A5AAD7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950228A5AAD7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950228A5AAE7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023581003</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00123_UVTC_PrimaryEmail_maps_to_single_user_status_pending_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="5ef6de7b-5a82-4c98-81e7-a42a9436c16e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj6sQJ4VCooIEpO2mhZYC2499uTLOAO4mNo0doP311w5NCizt7V4JCXkynjkzc3zsU4GT2PXbQkAqKWdGGDTNf5zJBLuoBpZXb0RWFWHXaqBGw3LwybQBJ57reJFphEJkEDIhMZNN00VO1UI1yzkeu8e+e+K7tcpxHf0yjTtIhQqtXCrINNZJzISfp22aWcp8jgUVPsMJCF8Sf9Tu93zl6eMCk9k63aDME6atuZQL37ZJJQICcUwqhCf2qb3jcxoJf0RnDMsshbeckWiab3tXq1VldVzh6cx2EUI28mzlEwk6+2a2jorNEIVsyjfrLmacUYJj+oo1qD7IOY+MdjzjKZXz5IPQju0gHdqCNbGIU2XfTPs9QY7ui5F2QKYCW2KOnSLYEKaQAiNg/ByGTfPb1ya42TtOMRNTniZib/13kIAtIeYLiCxRVFag+3rEA+1qnQLxQ0biTNAlXGuaLDABYQxSmNJ1jwpFvkgY+fiNtVA/WrAMyN+M5dTexqqg2we6E9AZCPl/ZrY9r02UOxxn0OqGSXCXjdjtzeVxp+883aaD4Ifdf3Hl72YOYdt5A6oc99t6n6wlt942TTodtECzhucN7DS4Cgi/hMsuflxVk17vHgcXYRyu+r3kVxS1L+r0x/Tpe2Paf0bsYVXFF4s46oqn60VjePuKsiO8fFgN6xc/kPsd3Vzwa7szq8vB/ePvq4c2Hd+3u3QyDAars5SPrtyHdj8Ox6gfPUH0s914vD256VxkZBjYj8F5Lzp6fVwPnKu6E4RwdkNWk879Y/O9pu0ado2FJIyyyRMQWSw1PcLAOFfzwvJzedEWGlnT3NVfaI0SEpg0W3qXlhY/UwJEI18Nc7M+92rIdZ2zs1r35NxF1TNURc45aqO65yE3cAoN2qDYg9jlbEp1Lq2yG/58DpAkvgAWQWoteUbmIMxPIgZYYiNkQ3U4OBMw5lrFXzzmzp8SmXjPjnx1XpwEGtNIctO45vKG3aTtqYR0S7qrY+TuSPcQCF1Q0PquCS4Uw4VUvXjGy0zGTmWJKwwydQOkWoR9t9qo2YImixg0UjvhURZDZTFf5J2xxebftTARuXV4Ns4P3od17X8rWqB8IqodhK6lA2qMcOAOcopCPi64tl1wEb6dRVSfL9VPmVKyQbL76Z0mmh8lR1RFBeTSc9+wE9XeL6hMFC0pKYle3tBK4NXxbxXjeMaV50q2XGb5AOpa2lIV3lYK59gjIJnSp5cx/w3MLkPYX7oeStR7mUv7Lr5MztlIYgmJoouRL7/wNhiB0G+DUPF8/dWHx05K1TcJa3nI1o3VE0Ij/vSVQXyi/ZR5oP5WPH0v/FCsrTyqTvUgkJTN9EpfBC8fkIJwFZYq5eLpdvBDAQ4l3zWWTS6xSMWmSSbh4y+GlqSmiQnhGZNhYOaGbZnMccqXBfjvTn+EyaX47W5diw/v1od+b6QEK8Fm6Uv/29miOV0ImPoKz7E0zbV6KqrkbLYly28A95U5UMQ5dp0uqjbOS2WueZ5b75bKvFtJ6w/zn5atnu6fh9a/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205321D048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205321C048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205321C048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950221EE5C6F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950221EE5C6F204E0401F0A079902D1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023584476</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950221EE5C7F204E0401F0A079902D1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00124_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_UnlockMe_node_role_Retailer_null_P2" searchProperties="true" id="7b9f978a-e7ba-4fbe-bc30-c92ac5420319"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj6uQL74SFSQKpaWCdgss2/blyjgTME1sGjsp7a+/dmhSoLS3eyUk5Ml45szM8bFPOYojx+9wDokgjGqDXkv/p2nhoFmt14xaGDaMqlwYntcAY163PA/ssAFuXdcGnKcwoFwgKlq6Y9lVw6oZtjt1XN+p+45Xsd3mg67NIOEytHSpWLq2iSPK/TxtS08T6jPECfcpioH7AvuTzmjoS08fFZj09ukWZZ4waS+FWPumiSsBYIgiXMEsNk/NPZ/TgPsTsqBIpAm85Qx4S3/b+/z8XHl2KyxZmI5lWablmdIn4GTxQ2+fFJshGNCQbdddRBklGEXkFSlQIxBLFmidaMESIpbxJ6Ft07ZUaAM22MB2lf7QzfcEObpvRtoDmXBk8CWyi2BjCCEBikH7PR609B/fm+B27zRBlIcsifnB+u8gAc0gYmsIDF5UVqD7fsQj7WqfAvYHFEcpJxlcK5qsEQau/UogJJsh4ZJ8Adfy8WsbLn+kYBngvxnLqbmLVUI3j3SnRxbAxf+Z2e68tlFmKEqhfTuN7y/mzbMsHTbJ1etArFDTnT79ZAFr5RB2nbegynG/rQ/JWnLrbdPqpYGu+85mtLqF5Z35MGlY0eXs8fFytnheivnI/JXNOr3H19mtsP7cXaTNrtPjNLOjVfcxfXBex5fxPXZtPoZ172TZzebp5fhl3TR/3/GH6I+5vIy82YLji1F9FaJNfcqGWcTn/fDmzL0MLx7qN/PhhdecDO+ve/PbjrNhs9FVtTn8uTq5T+nV7LYvIjrozPmou7iwWu817dawbywkYZLOV4BFsVT0GPS0vpwXEl/Li7KQwAhzV3+tNIoLoEJvq11KWvxUChAJfDnM7brv1SzH7fW9rlc/P3ecc6tq2X2rYzU8z6ranUKDtigOIHYZDYnKpVR2y5+vAeLY50ADSIyMpXgJXP8iYg8JpA3oWB4ORjlMmVRxkYqVm4Yxq7G6PV/yzI5f6h6p1nTtmokbepN0QgHJjnRXp5azJ91jwGRNQOm7IjiXDOdC9uIJZamI7EqGKhRSeQMkSoR9p9qsmZzE6wgUUjNmQRpBZb1c550x+fbfMRDmuXV8Ps0P3qd1HX4rWiB9AqIcuKrlDOQY4cgdZBeFfF5wbbfgInwnDYg6X7KfIiF4i2T/0ztNFD9KjsiKCsil56FhL6p5WFCZKMgILole3tBS4OXxbxfjeEKVp0qaZWk+gIaStkSGN6XC2eYEcCr16WXKHoGaZQjzW9dDifogc2nfx5eKJZ0IJCCWdNHy5TfeBhPg6m0wkDzffPfhsZdS9k3ARhyzdSP5hFCIv3xlYB8rP2n+Jf+eWRK8j+tIrJ08sk75IBCELtRKXQQvn5ACMxmWSOViyW7wYwGOJd83lk0usQjJpnkq4PMvmpKklo4wZikVg56eG3ZlMscpXtbgvzt9CJNL8dvduuGf3q13o+FEClaM9NKX/LezQXK6YNDVFZ5jaekb+VSUyeliR5bfAB4os23V3bOzM7djdW1vV5lrbs0uG7hXSfuD+aNlp6eH56H9Lw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951063BBB3B0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951063BBB3A0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951063BBB3A0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DF9C96EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DF9C96EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023587988</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DF9C97EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00125_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="0e62dbd8-91c6-444c-9caa-9aae7d26334e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j4zxB3aMPYEZCiWhgTYFmt6blzuKvIBSW3Is2Tj99VcysQOE5KZ3hhlG69Xu2d2jI51zlMROOOAcMkEY1Sajnv4P6li+E1hnxpnvY8O9c13jDt35RgBO4Ha7/qrbWenahPMcJpQLREVPdyzbNSzPsDtLpxM6Z2HHaXc79q2u3UDGZWjp0rZ0rUxiysMqbU/PMxoyxAkPKUqAhwKHi8FsGkrPENWY9P75DmWVMOtvhEhD08TtCDDEMW5jlpjn5oHPecTDBVlTJPIMnnJGvKc/7d1ut+1tp82ytelYlmVagSl9Ik7WH/X+h3ozRBO6Yrv1EFFGCUYx+Y0UqBmIDYu0QbxmGRGb5JXQtmlbKrQBJTaw7dKPuvmcoEL3zkgHIDOODL5Bdh1sDivIgGLQfswnPf3j+ya427vMEOUrliX8aP1nkIAWELMUIoPXldXo3h/xRLv654DDCcVxzkkBXxVNUoSBa9cZrEg5JVySL+JaNX6t5PJHapYB/pOxnJv7WCV080R3RmQNXPyfme3PaxflBsU59MlyWcQts3iYJfeb7qJoxd8noiy97pj1Kgj7zjtQzbif1sdkbbj1tOlRbIf+bfFl6X4m08Sij7NN4PmX/upnPmq5i+3KvPamF8ulCdf0a+5+H1zl09m3x3s7KFvzpRjk+eC2dXHWXSyu4w+X24dBcL/J7m3Csvl8TljrviPin5dfmOWPO/TLzcVsbV14KVzk69lwXV5eiZvIfvjdvbLSdfzjIrryrsruD56MOh88m18iOh22RuO0NKdnf3+a9Z5r2q/h0FhLwiK/uwcs6qWix2SkjeW8kHhbXpSFRMaqcg1TpVFcABV6X+1S0hLmUoBIFMph7tbjwLOtwB4PBh0rsILRZ8u17LE1sLwg6AS+W2vQDsURxCGjK6JyKZXd8edtgDgJOdAIMqNgOd4A19+IOEICaRM6l4eDUQ5LJlU8E3GQMXCzLXTtwElZsU29X5H/W9e+MvGNfssGKwHZnnS7S8s5kO45YJISUPquCM4lw7mQvXhARS5iu12gNoVc3gCZEuHQcbueyUmSxqCQmgmL8hja6SatOmPy3b9jIMwr6/zzsjp4r9Z1/K1ugfSJiHLgqpZPIMcIJ+4gpy7k9YK9/YLr8IM8Iup8yX6KjOAdksNPzzRR/Gg4IiuqITeex4aDqOZxQU2iqCC4IXpzQ0uBl8e/X4/jAbUf2nlR5NUAfCVtmQxvSoWzzQXgXOrT45L9Amo2Icx3XQ8N6qPMjf0QXy42dCGQgETSRauW73gbLICrt8FE8rx878PjIKXsm4BSnLINY/mEUIjffGXgECs/ab6Wf1uWRc/jOhFrL4+sUz4IBKFrtVIXweMrpMBMhiVSuVi2H/xUgFPJD41NkxssQrLpLhfw+hdNSVJPRxiznIrJSK8M+zJZ4RSPKYTPTi/CVFL8dLeW/NW79a/ZdCEFK0F640v+29kgFV0w6OoKr7D09FI+FWVyut6T5SeAR8psOY43Hrqea3f8oFFmPwgsZ+Q3DTyopP/C/NKy19Pj89D/Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950225FC4551379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950225FC4541379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950225FC4541379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091FAA30909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091FAA30909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023591865</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091FAA31909DE0401F0A05993974</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00126_UVTC_PrimaryEmail_maps_to_single_user_status_blocked:clg_Token_Type_UnlockMe_node_role_Retailer_403_FORBIDDEN_P2" searchProperties="true" id="5da39622-b43d-4204-b6a1-95ad28f3a489"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGljyjkAuESFSS2wDYVtFug3cvLkXEmwW3iBNuhtL/+2KFJgaU93SMhIU/GM9/MfP7sc46S2PEGnAMTJKWaP+zp/7htwG4QWEbYcjtGc7kMje6yjY2lEy47uN1oN1uhrvmc5+BTLhAVPd2x7KZhuYbdWDgNz2l5jVa92er+1rV7YFyGli51S9e2SUy5V6Tt6TmjXoo44R5FCXBPYG8+mE486emhEpPeP9+hLBKy/kqIzDNNXA8AQxzjOk4T89w88DkPuDcnEUUiZ/CaM+A9/XXv09NT/alRT1lkOpZlmVbXlD4BJ9GZ3v9SbobAp2G6W18gmlKCUUxekAI1BbFKA20QRykjYpW8E9o2bUuFNmCLDWw36ZluviUo0H0y0gFIxpHBV8gug80gBAYUg3Y383v62ecmuNu7YIjyMGUJP1r/HSSgG4jTDAKDl5WV6D4f8US7+ueAPZ/iOOdkA9eKJhnCwLXvDEKynRAuyRdwrRi/tuXyR0qWAf6bsZyb+1gldPNEd4YkAi7+z8z257WLco/iHPqEPdg2yZYP4hbdDKL48mYajWoJyn+mvQLCvvMOVDXu1/UxWStuvW66zKxgYrOumDeeRex0r9gTp/YVE481JxyAT5ZxbM+CYY2ItSNu/Yda4yXji3t/MknxKEC+f9mq/VjYhDTCLy9XzR/t37XNdjGzFg+p+W01tafRy3P+OGrfXTizrnnnJo3oN4rH7UfzjmI7arDbNfijTq3za+t3Lvm3hx/3t2t3dP3lEbmTq8WvoDO6zdyLCM+Wg95bTfs1HBpLSZjnywfAolwqevhDbSznhcTH8qIsJDDCwtXLlEZxAVTofbVLSYuXSwEigSeHuVuPu67lOPZo1LIaY8dqjqymZY+tgdXudi1naJcatENxBPEipSFRuZTK7vjzMUCceBxoAMzYpDleAdc/iDhEAmk+ncnDkVIOi1SquN2Jwxe3laM1o5ndeUTrVm7ZThK3dO06FTf0hg1CAWxPu5sLyznQ7hlgkhFQAq8YziXFuZDNWKNNLmK7vkF1Crm8AphSYc9pdlyTkySLQUE1kzTIY6hnq6xojcl3/46BMC+ss9GiOHnvFnb8reyB9AmIcuCqlq8g5wgnLiGnLOT9gt39gsvwgzwg6oDJhgpG8A7J4ac3niiCVCSRFZWQK89jw0FU87igKlGwIbhienVFS4WX579fjmON6ut6vtnkxQDaStuYDG9KibPNOeBcCtTzIn0EalYhzE/dDxXqo8yV/RBfLlZ0LpCARNJFK5afeBzMgavHgS+Jvv3sy+MgpeybgK04ZbuI5RtCIf7wmYE9rPyk+bv8e0pZ8DauE7H28sg65YtAEBqplboJnt8hBU5lWCKlK2X7wU8FOJX80Fg1ucIiJJuWuYD3v2hKk3o6wjjNqfCHemHY18kCp3jOwHtz+iNMocWvl+uWv3u5/pxO5lKxEqRXvuS/nQ1S0AWDru7wAktP38q3okxOoz1dfgV4LM1Dx3LGlmvZna5dSbPb7Trtr+OqgQeV9P8w/2nZ6+nxeej/Cw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D202F0511891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D202F0501891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D202F0501891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950221EE603F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950221EE603F204E0401F0A079902D1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023595707</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950221EE604F204E0401F0A079902D1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00127_UVTC_PrimaryEmail_maps_to_single_user_status_suspended_Token_Type_UnlockMe_node_role_Retailer_(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="aaa4ddff-3216-4b63-a77a-f00cb7739d46"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxVygQCJClIKdJOqV6CX3Zcj4zjB3YkdYifQfv2xQ5MCpT3dR0JCnoxn1swsL/uUgSS2XI8xlHFMieIPe+o/AZoH0HYcrdXtAK0FOk0NdM25FsxBABwjmAdzpCo+YznyCeOA8J5qGWZLM2zNbM6spmu13ZbRaLabz6rygDImQguXhqEq6yQmzC3T9tQ8Iy4FDDOXgAQxl0N36l1dusLTBRUmtX+6QVkmzPoLzlNX12EjQBDFMWxAmuin+o7PacDcKY4I4HmG3nMGrKe+712tVo1Vs0GzSLcMw9ANRxc+AcPRsdo/qjajwCch3awHgFCCIYjxG5CgrhBf0EDx4ohmmC+SL0KbumnI0BpaQw2aLXKs6h8JSnQ/jLQDMmNAYwtgVsEmKEQZIhAp9xO/px7/bIKbvbMMEBbSLGF767+DhEiBYpqiQGNVZRW6n0c80K7+KYKuT2CcM1yga0mTFEDElNsMhXh9iZkgX8CUcvzKmokfrliG4N+M5VTfxiqg6we6M8QRYvz/zGx7XpsoDyDOUd/pLE/8JU678Okt/J0a+lNMu3R8Qu37Xglh23kDqh73+3qfrDW33jf50RIP83j6eN/Nrbd48kefvoVF58FEs5smu8iuzpc349FsEb78Tu7Wb7c8LIjBw3hszS/Wxhkht5Oz1vPJ8CYa+keL6+c0hYNf+X0Xj/ldNNGno+HIvuLe8+XTo/Pwcr1c3TuTMYwuLDBcQo+07hySDNJHlv1KX4s7z3H88Qmxabd75D3OjeTCCgLYGU/scNA+j3ofNW3XsGusJGGaz18Q5NVS0sMfKudiXoB/Ly/SggMtLF3dVGoU44hwtS93SWlxcyFAOHDFMDfrc8c2rKbpOKP2mT0YnY2MlmGeG54hDprhtM8rDdqg2IM4oCTEMpdU2Q1/vgcIE5chEqBMK2gOF4ip30QcAg4Un0zE4aCEoRkVKt5MihVavhTLELZjFNtptIrX8dJWlWvKb8hN5oUcZVvK3ZoZ1o5yTxDEKUZS3iW/mSA446IVS1DkPDYbBWgQlIsLIJMa7Fqtrq0znKQxkkD1hAZ5jBrpIi0bo7PNv6UByErrZDQrz92XZe1/qzogfAIsHZis5QyJKaIDV1CzKuTrgu3tgqvwXh5gebxEO3mG4QbJ7qcPlkh61BQRFVWQa899w05Ufb+gOlFQYFjzvL6ghb6L09+vxrEEjWUjL4q8HEBHKlsmwutC4Ex9imAu5Ol1Rv8gotch9B/dDjXqvcy1fRdfzhdkygFHiaCLUi5/8DSYIiafBr6g+fqn746dlKJvHK35IdsgFi8IifjbRwZ0ofQT5lvxt6JZ8DGuA7G28og6xXuAYxLJlbwHXr8gBaQiLBbCRbPt4IcCHEq+a6ybXGPhgk3znKOvvyhSkXoqgJDmhPtDtTRsq2SJk7+myP1w+hSmVOL3q3XNvrxan64up0KvEqDWvvi/nTVc0gWKh6XwL7H01LV4KYrkJNpS5XeAe8JsGh3P8CyjZXbaZi3MHcex7ZZXN3Cnkv4n82fLVk/3z0P/Xw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95107A0A2051761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95107A0A2041761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95107A0A2041761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023199E6B5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023199E6B5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023599040</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023199E6C5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00128_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_UnlockMe_node_role_Retailer(Negative)_404_NOT_FOUND_P2" searchProperties="true" id="44f12fac-dfd0-41b0-a195-594240d8965e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlPGFwwGV6AqCbmYCbkAmZ2dly1ZbrASWzKWDCRfv5KJHSAkm9kqqii1W92nu4+OdMxRmjj+CeeQC8KoFgx6+j+zMJy1nCgyZmEUGm7odoyO1QIj9CIUWa2Zg5tI1wLOCwgoF4iKnu5YtmtYLcNuTp2m77R9t9nodtzfuvYTci5DS5eGpWvrNKHcL9P29CKnPkOccJ+iFLgvsD85GV370tNHFSa9f7xBWSbM+7EQmW+auBEBhiTBDcxS89jc8TmOuD8hc4pEkcNrzoj39Ne9q9WqsWo2WD43HcuyTKtrSp+Ik/l3vf+t2gxRQGdssz5DlFGCUUJekAI1AhGzSDtJ5iwnIk4/CG2btqVCG7DGBrZd+l033xKU6L4YaQdkzpHBY2RXwcYwgxwoBu1hHPT071+b4GbvNEeUz1ie8r31n0ECuoSEZRAZvKqsQvf1iAfa1T8G7AcUJwUnS7hRNMkQBq7d5TAj62vCJfkirpXj19Zc/kjFMsB/MpZjcxurhG4e6M6AzIGL/zOz7XltovxESQH9dhwvXKftxcM4Ca0j/jTquhNO7m6jTq+EsO28AVWP+3W9T9aaW6+bwtnwZt48vU+X48Xt1AnurzrZcjY8H9yKZWexGk7A/nG/WJ1eOr9GL+Jiff6QB0/d66OCdQpvMXroinWbLejjZTayv1mnzdVjbE6n6/wO1sO/rq68y7vx04tnj2A1f7bO/h4ciWiaeWF78HNyJJjXyq/FZDiJwWWWexeCx9u/Ti+wF0y//U4GxbjdfCAveTgYZfcPj7j3VtN2DbvGShImRfgIWFRLRY9goF3IeSHxubwoC5Hno3T1M6VRXAAVel/tUtLiF1KASOTLYW7WF92W5TjNrvydOU63fW65ln1hnVitbtfqdrxKgzYo9iCeMTojKpdS2Q1/PgeIU58DjSA3lqzAMXD9k4gDJJAW0LE8HIxymDKp4vZjiwJ9Cp/CjK5SL88eaRLzRRHp2g0Tt/Q2P5kJyLek251azo50jwGTjIDSd0VwLhnOhezFAi0LkdiNJWpQKOQNkCsR9h230zI5SbMEFFIzZVGRQCOLs7IzJt/8OwbCvLSOz6flwfuwrv1vVQukT0SUA1e1nIIcIxy4g5pVIR8X3NouuAp/UkREnS/ZT5ETvEGy++mNJoofNUdkRRXk2nPfsBPV3C+oThQtCa6JXt/QUuDl8e9X41igxqJRLJdFOQBPSVsuw5tS4WxzAriQ+vQ8ZU9AzTqE+aXroUa9l7m27+IrREwnAglIJV20cvmFt8EEuHobBJLn668+PHZSyr4JWItDtrNEPiEU4k9fGdjHyk+a7+TfiuXR27gOxNrKI+uUDwJB6Fyt1EXw/AEpMJNhiVQulm8HPxTgUPJdY93kGouQbAoLAR9/0ZQk9XSEMSuoCAZ6adiWyRKneM7Af3N6F6aU4te7dc0/vFt/ja4nUrBSpNe+5L+dDVLSBYOurvASS09fy6eiTE7nW7L8CvC9MrcuzlyvbTe9bq3MnlRmZ1Ar824l/Xfm95atnu6fh/6/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950225FC4771379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950225FC4761379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950225FC4761379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502239239C2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502239239C2296E0401F0A05990987</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023603147</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502239239D2296E0401F0A05990987</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00129_UVTC_PrimaryEmail_maps_to_single_user_status_forcedeleted_Token_Type_UnlockMe_node_role_Retailer(Negative)_404_NOT_FOUND_P2" searchProperties="true" id="56e45747-2a85-496c-9a9e-82503f2206b9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxnjjxiIPYEZPnOdQJICTZu83BHyGtTasrFk4/TXVzKxA5TkpneGGUbr1e7Z3aMjXTIUhZbbYwxSTmKqeMOO+i+0mjaCtqE1raWl2S2MNcdEgYb8c2NpnptOyw9UxWMsA48yjijvqJZh2prR1MzzhXXuWi3Xbjcu2q0nVXmAlInQwqVhqEoRhZS5ZdqOmqXUjREjzKUoAuZy7M5704krPF1UYVK7lzuUZcK0u+Y8cXUdN3zAEIa4geNIv9QPfC595s7JiiKepfCS02cd9WXvdrttbM8bcbrSLcMwdMPRhY/PyOqz2v1UbQbfo0G8Ww8QjSnBKCS/kAQ1Bb6OfaUXruKU8HX0RmhTNw0ZWoMCa9i06WdVf01QovtgpAOQKUMaWyOzCjaDAFKgGJSvM6+jfv7YBHd7FymiLIjTiB2t/w4S0BzCOAFfY1VlFbqPRzzRru4lYNejOMwYyeFW0iRBGJhyn0JAiglhgnw+U8rxKwUTP1KxDPDfjOVS38cqoOsnujMkK2D8/8xsf167KA8ozKB7lU5/BHjZv7a+pIvvzmA0IjSxv1wv/cdOCWHfeQeqHvfL+pisNbdeNg281t2abNq2B5Or6f2ZjyLHav7I4WIc67dnLSMYXSwmD18fvC93YT9aTXyyYre/CmR+OwuvHqaj23/A397Hoxu8+BQ7YG/N5GLW+jl5ui1ia32TP242/V+Po1X86IyyAT7T0SSfTIbJWTCc9Z8Dc7Qppv1vP68QWVw4D0/9GzZjWxLST+Obp0UURPMiMbI2eW5dR73Oa037NRwaK0mYZ8sfgHm1lPTwhspYzAvx9+VFWoivBaWrm0iNYhwoV7tyl5QWNxMCRHxXDHO3HjtN02j3jJ5l2Wa7ZY4M2zDHRs9oO06zafcqDdqhOII4iGlAZC6psjv+vA8QRy4D6kOq5XGG18DUdyIOEUeKR2ficMSUwSIWKu63k5AWRm4TbjqrXAgBXRO8XKnKbczv6F3aCzike8ptLwzrQLlngElCQMq75DcTBGdctGKD8oyHZiNHDQqZuABSqcGuZV80dUaiJAQJVI9iPwuhkayTsjE62/1bGsKstM5Gi/LcvVnW8beqA8LHJ9KByVr6IKYIJ66g86qQtwtu7hdche9lPpHHS7STpwTvkBx+emWJpEdNEVFRBbn2PDYcRNWPC6oT+TnBNc/rC1rouzj93WocG9TYNLI8z8oBtKWypSK8LgTO1OeAMyFPz4v4J1C9DqF/6HaoUR9lru2H+DK+pnOOOESCLkq5/MDTYA5MPg08QfPio++Og5SibxwKfso2CMULQiJ+95GBXSz9hPle/G3j1H8d14lYe3lEneI9wAldyZW8B57fIAWORVgihCtO94OfCnAq+aGxbnKNhQs2LTMOb39RpCJ1VIRxnFHuDdXSsK+SJU7+nID76vRHmFKJX67Wgr15tX6fTuZCryKk1r7kv501UtIFgypv8BJLRy3ES1Ekp6s9VX4BeCTMxtAymr3BcDxuj+0DYW61nLqBB5V0/zD/adnr6fF56P4G</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205ACE0F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205ACDFF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205ACDFF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107A0A2241761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95107A0A2241761E0401F0A0799554A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023606638</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95107A0A2251761E0401F0A0799554A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00130_UVTC_PrimaryEmail_maps_to_multiple_users_status_pending_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="122640fd-f488-482f-a8ba-70b1d893fe80"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx1XIB4SQqCBBKVta+gW02+7LyjgD+DY41HbSpL9+7dCkQGm3dyUk5Ml45szM8bFPOFpFTtDlHJggMdWG/bb+j+f5YYgbntFqeGA0LD80Wm4TGc267/lo5rrNmaNrQ84TGFIuEBVt3bHshmG5hl2fOvXAaQauXavb9b917QEYl6GlS83StWwVUR4Uadt6wmgQI054QNEKeCBwMOlejQLpGaASk9452aAsErLOUoh1YJq4FgKGKMI1HK/ME3PH5yTkwYQsKBIJg/ecIW/r73tfX19rr/VazBamY1mWafmm9Ak5WRzrnaNyM4RDOo8361NEY0owisgbUqCuQCzjUOtGi5gRsVx9Edo2bUuFNiDDBrYb9Fg3PxIU6H4YaQck48jgS2SXwcYwBwYUg3Y/Hrb1459NcLN3yhDl85it+N769yABTSGK1xAavKysRPfziAfa1TkBHAwpjhJOUrhWNFkjDFy7ZTAn2YhwSb6Qa8X4tYzLHylZBvh3xnJibmOV0M0D3emTBXDxf2a2Pa9NlAcUJdAZ9JdP8+ycDR6n1pq3bhqDsXWeXeSL6L5dQNh23oCqxv2+3idrxa33TT36VH87tc8nfISdhOVj7jav+/24//xIsl/NwfKvNJ/n3cts8dbL3NlsejV7unbZzHvo4RAGsXPx0sV3gK4S+/Eoz6/tpyR8ze7RPMXN1s3FYOmFEUnveiw/Oxua+VXzuSFu+uHDw0V2+3aJMh+n6fVyMbGeRi+XrSeUj4gXwh8Pt0e33ig+Gy7O7/LZnx5+a03quP1R03YNu8ZSEibJ7BdgUS4VPYZ9bSDnhcT38qIsJDTmhWuwVhrFBVChd9QuJS1BIgWIhIEc5mY98F3LcXzL8wee3ev1z6yGZQ+sruX6vuX7dqlBGxR7EE9jOicql1LZDX++B4hXAQcaAjPSOMFL4Po3EftIIG1Ix/JwxJTDNJYqHrXCaNYiixfEsA2ew5oz312nPujadSxu6A3rzgWwLeluTC1nR7rHgMmagNJ3RXAuGc6F7MULShMR2bUU1Sgk8gZgSoQDp9FyTU5W6wgUUnMVh0kEtfVyXXTG5Jt/x0CYF9bx2bQ4eF/Wtf+tbIH0CYly4KqWHsgxwoE7qFEW8nXB7nbBZfhuEhJ1vmQ/BSN4g2T30wdNFD8qjsiKSsiV575hJ6q5X1CVKEwJrohe3dBS4OXx75TjeEG1l1qSpkkxAE9JG5PhTalwtjkBnEh9yqfxM1CzCmH+6HqoUO9lruy7+BKxpBOBBKwkXbRi+YO3wQS4ehsMJc+znz48dlLKvgnIxCHbaSSfEArxt68MHGDlJ8238u81ZuHHuA7E2soj65QPAkHoQq3URZB/QQocy7BEKlfMtoMfCnAo+a6xanKFRUg2zRIBX3/RlCS1dYRxnFAx7OuFYVsmC5wiX0Pw4fQpTCHF73drxr+8Wx+vRhMpWCukV77kv50NUtAFS3mS/gWWtp7Jp6JMThdbsvwOcE+ZbatZb/R7br3ruN1KmT3fd6W5auBOJZ1P5s+WrZ7un4fOvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9510634DB54A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9510634DB53A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9510634DB53A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950229079F71BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950229079F71BBDE0401F0A05990991</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023610106</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950229079F81BBDE0401F0A05990991</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950D206BAB8E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950D206BAB8E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950D206BAB9E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023613500</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00131_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="e4263527-cad5-4308-9802-70cbdcfd5e6a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSxyrkAiEXFaQA7Z70Xkgv25eV6wzgnuCE2AHaX792aFKgtNuzEhLyZDzzzcznzz5maJZYfsAY5JykVAkHHfWfptH0LOS2tGcHTK1leY7mmtjVsO2aFmq5DrJsVQkZKyCkjCPKO6plmC3NsDWzGVlN32r7ttPw7NaTqtxDzkRo4dIwVGU1Syjzy7QdtcipnyJGmE/RDJjPsT8KLi984emjCpPaPV6jLBPm3Snnma/ruBEDhiTBDZzO9GN9y+c4Zv6ITCjiRQ7vOWPWUd/3LpfLxrLZSPOJbhmGoRueLnxiRiaHaveg2gxxSMfpet1HNKUEo4S8IQnqEvg0jZUgmaQ54dPZF6FN3TRkaA1WWMNmix6q+keCEt0PI22BzBnS2BSZVbAhjCEHikG5G4Yd9fBnE1zvjXJE2TjNZ2xn/WeQgC4gSTOINVZVVqH7ecQ97eoeA/ZDipOCkQVcSZpkCANTbnIYk9UFYYJ8MVPK8SsrJn6kYhngPxnLsb6JVUDX93RnQCbA+P+Z2ea81lHuUVJAdxqe9ewH5/cvMrxbBiT9iwZunwU4yJadEsKm8xpUPe739S5Za269b7q3zi9P2txMLx7DnnkbZhxdTJu/2uFdPHzMrlNq3PZfj45eYjvWr66u5i0UnemryS0kyHTx3fw2jyY0gTedUDh4tooM5pEbnuunj88v7niwzCbe2eJ22H5gDnsa4Bs7Mk1ncY8uI+tiZUTkTGcP99ej6CqZ944Gt849Yq9J1GQvB62/Hx3bGz0tQufRPX3o2+fLzkdNmzVsGytJGBXPL4B5tZT0CAfKqZgX4t/Li7SQWBuXrn4mNYpxoFztyl1SWvxCCBCJfTHM9frUsw3L9By3Z/Ut22meGC3DPDUCw/Y8wwt6lQatUexA7Kd0TGQuqbJr/nwPEM98BjSGXFukBZ4CU7+JOEAcKSEdisORUgZRKlS8neW2Zb3YBs2WJsxYe5yNM3Dnb6pylfJrep0HYw75hnS3IsPaku4hYJIRkPouCc4EwxkXvZijRcETs7FADQqFuAFyKcK+1XJtnZFZloBEqs/SuEigkU2zsjM6W/9bGsKstA5PovLgfVnX7reqBcInJtKByVp6IMYIe+6gVlXI1wXbmwVX4YMiJvJ8iX7ynOA1ku1PHzSR/Kg5IiqqINeeu4atqPpuQXWieEFwTfT6hhYCL45/txrHHDXmjWKxKMoBOFLachFeFwpn6iPAhdCn1yj9DVSvQ+g/uh5q1DuZa/s2voJP6YgjDjNBF6Vc/uBtMAIm3wah4Pnqpw+PrZSibxxWfJ+tn4gnhET87SsD+1j6CfON+Fumefwxrj2xNvKIOsWDgBM6kSt5Ebx+QQqcirBEKFeabwbfF2Bf8m1j3eQaCxdsei44fP1FkZLUURHGaUF5OFBLw6ZMljj5awb+h9OnMKUUv9+tK/bl3fp4eTESgjVDau1L/ttZIyVdMKjyCi+xdNSVeCqK5HSyIcvvAHeU2TQ889QNBoN+r2lsKnPTawd1A7cq6X4yf7Zs9HT3PHT/BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091F8ADECB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091F8ADDCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091F8ADDCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95021978B2C2573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95021978B2C2573E0401F0A059909AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023616998</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95021978B2D2573E0401F0A059909AB</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95021978B422573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95021978B422573E0401F0A059909AB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95021978B432573E0401F0A059909AB</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023619346</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00132_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked_and_revert_to_previous_status_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="60b40459-8ab2-4a02-b022-4fcca3a4004d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxljGzAfnsCMQ0LjBJpcoGnalztCWoNaWwJLdkh+fSUTO0BIbnpnmGG0Xu2e3T060qlASVz3AyEglZQzIzzvmf+25vN2a95wrFar0bCaDgILkZZjIdcD1GoCQS6YRihEBiETEjHZM+uO27Qcz3Ibs3rDr7d9p1FrdL2fpnEHqVChlUvNMY1NEjPhF2l7ZpYynyNBhc9QAsKX2J8G45GvPH1UYjL7p1uURcK0v5Ry5ds2rhHAEMe4hnlin9p7PqdE+FO6YEhmKTznJKJnPu99eHioPTRqPF3YdcdxbKdrKx8i6OKz2f9UbgYSsohv1wPEOKMYxfQJaVBjkEtOjCBe8JTKZfJGaNd2HR3agg22sNtkn037JUGB7oOR9kCmAlliidwy2AQiSIFhML5Nwp75+WMT3O6dpYiJiKeJOFj/HSRgOcR8BcQSZWUluo9HPNKu/ilgP2Q4zgTN4aumyQphEMZtChHdjKhQ5CPCKMZvbIT60ZJlgP9mLKf2LlYF3T7SnXO6ACH/z8x257WNcofiDPqrLr9E/6RhQw4QXI15cjv44ZHpxnG+9QoIu85bUNW4n9eHZK249bzpC//euFt/pU4cBd+Ti+44yB5nAjfp7clZIBLcWf+KLpvh6KqzuZVP+RiN3bnHYdEak9GIDLI7mp/Z91dXP67X7U9nUT7P8+bi98UwlotkaecBwV9uCeO/riM0ydvyki8wjmc4OmmPUJLeo2GYTJotPFpf/vhZd5+ABPzk200zuP+Uo1n+dEPlqEumJ9dfAux1ei817dawbywlYZrNfwGW5VLTIzw3hmpeSL4vL9pCiRUVrv5Ka5SQwKTZ17u0tPiZEiBKfDXM7XrY9Vyn6w47wbAzOGs4F07TcYdO4HjdbqPbCkoN2qI4gDjgLKI6l1bZLX/eB4gTXwAjkFo5z/AShPlOxHMkkRGyiTocnAmYcaXi7jxZJiSKHp7iaCG87rwjWObx35lpfOXyht2kQSQh3ZHu5syp70n3BDBdUdD6rgkuFMOFVL1YozyTsVvLUY1Bpm6AVIuwX292PFvQZBWDRmonnGQx1FbLVdEZW2z/6xbCorBOLmbFwXuzrsNvZQuUD6HaQehazkCNEV7dQS3fKwt5u2Bvt+AyfJARqs+X6qdMKd4i2f/0QhPNj4ojqqIScuV5aNiLah8WVCUiOcUV0asbWgm8Ov79chxrVFvXsjzPigG0tbSlKrytFM61p4AzpU+PM/4bmF2FsD90PVSoDzJX9n18mVyyqUQSEkUXo1h+4G0wBaHfBqHi+eajD4+9lKpvEjbymG0QqyeERvzuKwP7WPsp8636e+ApeRnXkVg7eVSd6kEgKVvolb4IHt8gBeYqLFXKxdPd4McCHEu+b6yaXGGRik3zTMLbXwwtST0TYcwzJsNzszDsymSBUz6uwH9xehWmkOLnu3Uj3rxb78ejqRKsBJmVL/1vZ4sWdMHqZan8Cyw9c6Oeiio5W+zI8jPAI8p84bbcQfus7h4oc6tq4F4l/Vfm15adnh6eh/4f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091E161D7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091E161C7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091E161C7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091F8AF8CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091F8AF8CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023622386</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091F8AF9CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510634DB81A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510634DB81A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510634DB82A25AE0401F0A0799534D</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023624961</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00133_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked:clg_Token_Type_UnlockMe_node_role_Retailer_403_FORBIDDEN_P2" searchProperties="true" id="246b22a2-c77c-4dc8-bad9-8307a0255c6c" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGljyjEgVAgKkhcK9pSWqCX3Zcj4wzg7sSmscOlX3/s0KRAoaf7SJEiT8Yza2ZWln0hcBgUvIYQEEnKmdFr18x/igQh7ACyisVS2XKrZd+alPyS5btuCWOEqsjBptETIoYeExIzWTMLyClaTsEquGPkeiVHPXm1/cU0HiESKrRyySPTWIcBE16StmbGEfM4FlR4DIcgPEm8UaN/4ylPD6eYzPrFFmWSMKrPpVx4tk3yPhAIApInPLQv7D2fC194IzpjWMYRfOT0Rc382LtarfKrYp5HM7uAELJR1VY+vqCzM7P+K90Mfo9N+XbdwowzSnBA37EG1Qc5577RCGY8onIengjt2A7SoS1YE4s4Ljsz7c8ECbofRtoDGQlsiTl20mBDmEIEjIDxMOzVzLOfTXC7dxxhJqY8CsXB+u8gAVtCwBfgWyKtLEX384hH2lW/AOL1GAliQZdwq2mywASEcRfBlK5vqFDk84WRjN9YC/XQlGVA/mYsF/YuVgXdPtKdNp2BkP9nZrvz2kZ5xEEMddYf31+pzoXN1WhwzUdXV/Tpz7rYvos6tQTCrvMWVDbuj/UhWTNufWwaPI2c13fErqds1b+bdkY8dzfYoPeXwuwKbgrd3PUtrYZvr/e5m5fnFYT9ce6c4crs4ZFvXobUDgfXovo79DciKPzqo1n18vWZX1+Wc/OF0+SdVmHSauUin03YcNCdzKfP11Hxsvx7DO7mtnQ5f3JWpd7VYxAhX5bk4O1xcve8EfePIfv1NK3270PHucy1xFOzFzx0+rXPmnZr2DemkjCKJ69AZLrU9Oi1ja6aF5bfy4u2UN+aJq7eQmuUkMCkWde7tLR4sRIg6ntqmNt1p+M65WKn2e5228VG67yDXOR0UQOVq9VSp91NNWiL4gBii7Mp1bm0ym758z1AEnoCmA+RteQxmYMwv4nYxhIbPTZUPwdnAsZcqXi7hdzSeRk1y0W30mgWHbdSqbQq1aLbdrptR2nxLZcDNogaUwnRvoKX9xR8CIQuKGiZ1zwXiuhCqpa84WUsAye/xHkGsToIIq3FXsGtlGxBw0UAGrAdcj8OIL+YL5IG2WL7LliYiMQ67IyT/+9keYff0k4oH59qB6FraYKaJhw5ity0kJMFO2i34DR8I/ap/s1UW2VEyRbJ/qdPtmiaZFRRFaWQM89Dw15U+7CgLJG/pCTje3ZQK51XKlBPx/GG82/5eLmMkwGUtcJFKrythM6xR0BiJVObMf8DzM5C2D86JTLUB5kz+z6+WM7ZSGIJoaKLkSx/cEUYgdBXhJ6i+/qn94+9lKpvEtbymK0VqJuERvztZYN4RPsp8516rXjkf47rSKydPKpOdS+QlM30Sp8HmxOkIFyFpUrAeLQb/FiAY8n3jVmTMyxSsWkSSzj9xdDKVDMxITxmstc2E8OuWiY45WYB3qfTlzCJIn8csWtx8oh97t+MlG6F2Mx86X87WzShCwFTn+QJlpq5VjdGlZzNdtT5A+AJgXa+E+j9SupfzF8tOz09/B/q/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EE4173EBDFF23AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EE4173EBDFF13AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EE4173EBDFF13AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EE4173EBDFFD3AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EE4173EBDFFD3AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131224_1387860768719</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EE4173EBDFFE3AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EE4173EBE0313AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EE4173EBE0313AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE4173EBE0323AC6E0401F0A07995EDF</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20131224_1387860789802</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00134_UVTC_PrimaryEmail_maps_to_multiple_users_status_suspended_Token_Type_UnlockMe_node_role_Retailer_403_FORBIDDEN_P2" searchProperties="true" id="635fc5ab-21d0-4cfc-a8e6-149b93aaa650" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlPGFxyMXYEqc/HECSTZQMLsvGwJuQEltkwsmct8/UomdoCQbGarqKLUbnWf7j460gVDSWx5PmOQcZJSJey11H+gEU0jmDU027EjzTYjrKHZtKmZjjuFadOp121LVULGcggp44jylmoZZl0zLc2yx8a5Z5meZdWMZvOXqjxCxkRo4VIzVGWTxJR5RdqWmmfUSxEjzKMoAeZx7I384cATnh4qMantix3KImHWXnC+9HQd1yLAEMe4htNEv9APfC4i5o3InCKeZ/CaM2It9XXver2ureu1NJvrlmEYuuHqwidiZP5dbX8rN0MU0lm6W3cRTSnBKCa/kQQ1BL5II8WP52lG+CL5ILSpm4YMrcEGa9i06XdVf0tQoPtipAOQGUMaWyCzDHYPM8iAYlAe7sOW+v1rE9ztHWeIslmaJexo/WeQgK4gTpcQaaysrET39Ygn2tW+AOyFFMc5Iyu4kTRZIgxMuctgRjYDwgT5IqYU41c2TPxIyTLAfzKWC30fq4Cun+hOj8yB8f8zs/157aI8ojiH9jNyTfo0XTwtMjOtbxPoD4MZekq6k36rgLDvvANVjft1fUzWiluvm67DB1gP8sv5ZDwYNfTGrO8MzsLVetSDB+NqcDUJf0/87u9Id37wxP/7hU5/LLrP3QXc1NfMeQhWbPJrFc31cwP63xo3nAbOQ7OZ+vyvgN4FZ4sz3X52zV7neeveLofj/nY9uLtbTjtPTpyaw4efHWOYks7V+nE7mdQ7fM798bmx0Z3bb/llbl1fzy/jWbi1H/27y6tm662m/RoOjaUkjPLpE2BeLiU9wp4SiHkh/rm8SAuJtFnh6i2lRjEOlKttuUtKi5cLASKRJ4a5W/f7tukGdsewGueuZTb6hm2YgeEbjuvW3cAsNWiH4ghiN6UzInNJld3x53OAOPEY0AgybZXmeAFM/SRiD3GkhPReHI6UMhinQsVtu+/WAwHWMTp+w6k3fbdebwSNZmB2go4jFPwm5bf0NvNnHLJDBW8eKPg9YLIkIGVe8pwJojMuWvKCVjmPzdoK1Sjk4iLIpBZ7lt081xlJljFIwHqSRnkMteViWTRIZ7t/S0OYFdb7/rg4fx+Wd/yt7ITwiYh0YLKWDohpwomryCwL+bBg09wvuAzv5xGRx0y0lWcE75Acfnpji6RJRRVRUQm58jw2HETVjwuqEkUrgiu+Vxe10HmhAu1yHC+o9lLLV6u8GIAjFS4T4XUhdKY+ApwLmdqO02egehVC/9ItUaE+ylzZD/HlfEFHHHFIBF2UYvmFJ8IImHwihILum6++Pw5Sir5x2PBTtm4sXhIS8aePDexh6SfMd+JvnWbR27hOxNrLI+oU7wJO6Fyu5H2w/YAUOBVhiRCwNNsPfirAqeSHxqrJFRYu2DTNOXz8RZHK1FIRxmlOedhTC8O+WhY4+XYJ3pvTuzCFIr9esRv24RX7czgYCd1KkFr5kv921khBFwyqvMkLLC11I16MIjmd76nzK8DTAn3ufibQh5W035nfW/Z6enwe2v8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EE419F4B025A9216E0401F0A079939F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EE419F4B02599216E0401F0A079939F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EE419F4B02599216E0401F0A079939F1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EE419F4B02659216E0401F0A079939F1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EE419F4B02659216E0401F0A079939F1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131224_1387862540663</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EE419F4B02669216E0401F0A079939F1</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>EE41B98BFE93FD35E0401F0A07996DC5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:EE41B98BFE93FD35E0401F0A07996DC5</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>EE41B98BFE94FD35E0401F0A07996DC5</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20131224_1387862559417</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00135_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_UnlockMe_node_role_Retailer_404_NOT_FOUND_P2" searchProperties="true" id="ffe5c633-7c92-4a09-b30b-9db3d4d2fd17"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyPIhXtUkFIo3XTL0gV6fTkyziS4TewQO0D769cOTQr0crpHQkKejGe+mfn82SccxZHtuJxDKgijmjfo6v/O/TqCZi2oIGy2K3XLqlfazcCv4LkdoE6j08YW0jWP8ww8ygWioqvbpvQyGxWrNrNrjt1yzE61VW8/6NoNpFyGli5VU9c2cUS5k6ft6llKHYY44Q5FMXBHYGfqji4d6emgApPeO9mizBOmvYUQiWMYuOoDhijCVcxi48TY8znxuTMlIUUiS+E1p8+7+uve9XpdXdeqLA0N2zRNw+wY0sfnJDzWe0fFZvA9GrDtuo8oowSjiLwgBWoEYsF8zY1ClhKxiD8JbRmWqUJXYIMr2KrTY914S5Cj+2akPZApRxW+QFYRbAIBpEAxaNcTr6sff2+C272zFFEesDTmB+u/gwR0BRFLwK/worIC3fcjftCu3glgx6M4yjhZwS9FkwRh4NpVCgHZXBIuyedzLR+/tuHyRwqWAf6bsZwYu1gldOOD7gxICFz8n5ntzmsb5QZFGfSu77N1MBpfPZHo/PIuWZre3c/RQ2g9/Ay7OYRd5y2octyv60Oyltx63RQ+TUfe6dRdL5HN75veP25NhOOrux+XzVYrarq/0+d7d/NMCcS/+tPWpb+ex48tzDsXnri4C+uL2c0wq909o3N0cUStOoj78XjUGnLTinwv+XnTwaez5GIYnTXnzcnvadsc3F6Ew0XrlBGYRAtzPF+djwM8PLcW14/pecPtsxeMs9uj5e00SZePfT6KL36c3tyfuWH3rabdGvaNhSRMs/kjYFEsFT28gTaU80Lia3lRFuJXgtzVSZRGcQFU6D21S0mLk0kBIr4jh7ldDzsNy2zW6oPTjuvaDffMrJvW0HTNVqfTkOZCg7YoDiD2GQ2IyqVUdsufrwHi2OFAfUgrK5bhBXD9i4gDJJDm0Yk8HIxymDGp4vLQB/V2kzUztnyxgqdOEM4DtFnRUNd+MTGm49QNBKQ72l2fmfaedk8Ak4SAEnjFcC4pzoVsxhKtMhFZ1RWqUsjkFZAqFXbserthcBInESioRsz8LIJqskjy1hh8+29LWeK5dXI2y0/ep4Udfit6IH18ohy4quUU5Bzh3SXUdBpFIZ8X3NgtuAjvZj5RB0w2VKQEb5Hsf3rjiSJISRJZUQG59Dw07EU1DgsqE/krgkuml1e0VHh5/nvFOJaouqxmq1WWD6CltC2V4Q0pcZYxBZxJgXqesSegRhnC+Nb9UKI+yFza9/FlYkGnAgmIJV20fPmNx8EUuHoceJLom+++PPZSyr4J2IiPbP1IviEU4i+fGdjByk+ar+TfmqX+27g+iLWTR9YpXwSC0FCt1E3w/AkpMJNhiZQulu4G/yjAR8n3jWWTSyxCsmmeCfj8i6Y0qasjjFlGhTfQc8OuTuY4xXMCzpvTuzC5Fr9erhv+6eV6N7qcSsWKkV76kv92rpCcLhh0dYfnWLr6Rr4VZXKpWW+tfQV4IM2mbZ/ZZw3bqjWsxq40m7Vav2zgXiW9d+b3lp2eHp6H3h8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022E2E5223515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022E2E5213515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022E2E5213515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510634DB9AA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510634DB9AA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023628488</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9510634DB9BA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95023DF9D1DEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95023DF9D1DEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95023DF9D1EEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023631196</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00136_UVTC_PrimaryEmail_maps_to_multiple_users_status_forcedeleted_Token_Type_UnlockMe_node_role_Retailer_404_NOT_FOUND_P2" searchProperties="true" id="e23d8121-ccb3-493c-b477-49038d4f348b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP7ur+h0P+6UpuVNOsJMAb32rqILqKtf7oT0lEbbFJq0gL/+JsVWYNHr3tEZJqcnz3nOS57kjOM4sh2Xc0gFTZjmDbv6P8iHzozYgYEC4huNGfjGrBkEho8I6aC63bGaSNc8zjPwGBeYia5uI6thoKZh1ad23bHbjtWsNa32k67dQ8oltHSpyV3rOGLcKcJ29SxlToI55Q7DMXBHEGfiXl850tPBJSe9d7ZlWQRMe6EQC8c0Sc0HAlFEaiSJzTNzz+fM586EzhkWWQpvMX3e1d/2rlar2qpeS9K5aSOETNQxpY/P6fyb3jspN4PvsSDZrgeYJYwSHNFXrEhdgwgTX3OjeZJSEcYfQFumhRS0AWtiEKvBvunme4CC3ReR9kimHBs8xFYJNoYAUmAEtLux19W/fa2D273TFDMeJGnMD9Z/RglYDlGykIF4mVnJ7uuIR8rVOwPieIxEGac5jNSYLDABrt2mEND1FeVy+HyuFe3X1lz+03LKgPxJW87MXa6SunmkOkM6By7+T892+7VFucdRBr3L9oPpvzT6qxHka7xq3VyQp9B8qI9aSbegsOu8JVW1+219OKzVbL1tmv66di/X7vX09c4eAYj7Tri5HbJO/vgSXc28X/6Lh/+K1qOQ89x9HIwe0c+7qCXxZhvkPgfspj9s9e/Th+RunJ2MZnTji/GQXb0ss+fb4ernD+zdN+6eRbz83nYTGJihtSTnTy8rjEYWuOO/R5Oni/Hl+KHdiutP6fQiqvcnbuv5kZ4sVmF+fhPDLPpJ6rQV/fh+2n3PaTeHfWMpCZNs9gxElEs1Ht5Qu5D9wuJzeVEW6htB4eoslEZxAUzoPbVLSYuTSQGiviObuV1fdJoWarfdht1uuehc/jWQdYFc1O50ms0mKjVoy+KA4iBhAVWxlMpu5+dzgiR2ODAfUiNPMhIC1z9BHGKBNY+N5eFIGIdpIlXc6sxeV3mAT5/5UoQ2wihDp75trXRtlIgbdpO6gYB0R7obU2TvSfcYCF1QUPquBpzLCedC1mKJ80xEVi3HNQaZvAFSJcKO3ThtmpzGiwgUUzNO/CyC2iJcFJUx+fbXNjDhhXV8Pi0O3od5HX4rSyB9fKocuMqlD7KNcOQOQmUiHyfc3E24hHczn6rzJespUkq2TPY/vY+Jmo9qRmRGJeXK89Cwh2oeJlQF8nNKqkGvbmgp8PL498p2LHFtWcvyPCsa0FbSlkp4UyqcZU6AZFKfNtPkBZhZQZhfuh4q1geRK/s+v0yEbCKwgFiOi1Ysv/A2mABXbwNPzvn6qw+PvZCybgLW4phtEMknhGL86SuDOET5SfOt/Fklqf/eriNYO3FknvJBICibq5W6CDYfDAVJJCyVypWku+DHAI4F3zdWRa64CDlNs0zAx180JUldHROSZEx4Q70w7MpkwVNsFuC8O/0GU0jx29265h/erb+uryZSsGKsV770v50NWowLAV1d4QWXrr6WT0UZnM13ZPmN4IEyI9tGLde2+uf9QWtXmZE96FcF3Muk95v5d8tOTQ/PQ+9f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502206A21CEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502206A21BEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502206A21BEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951077A4276A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951077A4276A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023634469</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951077A4277A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951077A428BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951077A428BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951077A428CA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023637157</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00137_UVTC_PrimaryEmail_maps_to_single_child_user_and_valid_node_role_DECE_CS_Token_Type_UnlockMe_200_OK_P2" searchProperties="true" id="9b438aa6-1db4-4980-8245-c553e14af283"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU/I6EP7ur+jUj07phUtpR5ipXI4oXl4q+h6/nAnpAtE2wSZF9NefpNAKiB7fM8MMk+1m99ndJ09yylESO37AOaSCMKoNui39nwmOpk2rPjUwhppRm0YTY+LVsIEj7IBtNdzqZKJrA84zGFAuEBUt3bHsmmHVDbt651R9x/Udu+LWao+6dg8pl6GlS8XStVUSU+7naVt6llKfIU64T1EC3BfYD4OroS89fVRg0tuna5R5wrQ9F2LhmyauRIAhjnEFs8Q8NXd8TiPuh2RGkchS2OSMeEvf7H19fa28VissnZmOZVmm5ZnSJ+Jkdqy3j4rNEA3olK3XHUQZJRjF5B0pUFcg5izSgnjGUiLmyRehbdO2VGgDVrJ9do0e6+ZHghzdDyPtgEw5Mvgc2UWwEUwhBYpBG48GLf34ZxNc771LEeVTliZ8b/1nkIAuIWYLiAxeVFag+3nEA+1qnwL2BxTHGSdLuFY0WSAMXLtNYUpWQ8Il+SKu5ePXVlz+SMEywH8yllNzG6uEbh7oTpfMgIv/M7Ptea2j3KM4g3a/Hsbn12Y2Gd/H4eNFOnLt+tn5gMRmr5VD2HZegyrHvVnvk7Xk1mZTf/V4H/4an7+5zfFD+OCM0+TcdC/fKeZx0BihUXXYOBkF98vn5d8njctBxhrZSRJfDK3L5QNxakNv1Wxkt8wyHTgKXzs9K7q+HTtB/HbW7J6gp7EgC2ecPd3yp1gwMC9/k8UMj6ndcS/ocPmXN+pWb2nwPHq8dq/NYDZ8uUKz8DnsHAVkfNOMnlkzePzlJqtzBr3WR03bNewaC0kIs8kTYFEsFT0GXa0v54XE9/KiLCQyprmrv1AaxQVQobfVLiUtfiYFiES+HOZ63ffqllO1Pa/X69Y7vbOeVbPsvhVYdc+zvEa/0KA1ij2IHUanROVSKrvmz/cAceJzoBGkxpJleA5c/yZiFwmkDehIHg5GOdwxqeLZu/R+qzUEfaJiKnDm2S5pQKpr10zc0Js0mApIt5S7dmc5O8o9AkwWBJS8K35zSXAuZCte0DITsV1ZogqFTF4AqdJg36k16yYnySIGBdRMWJTFUFnMF3ljTL7+dwyEeW7Nu4p5fva+LG3/W9EF6RMR5cBVPWcgJwkHriG7KObrouvbRRfhgywi6ojJloqU4DWS3U8fTFEUKWmyqaqAXXrvG3Yim/tFlcmiJcEl38uLWuq8VIF2MZYXVHmpZMtllg/CVQqXyvCmFDrbDAFnUqbe7tgzULMMYf7olihR72Uu7bv4MjGnoUACEkkbLV/+4IkQAldPhIGk++qn74+dlLJvAlbikK0Ty5eEQvztYwP7WPlJ8638e2Vp9DGuA7G28sg65btAEDpTK3UfvH1BDMxkWCIFjKXbwQ8FOJR811g2ucQiJJsmmYCvv2hKmVo6wphlVAy6em7YVsscp3hbgP/h9ClMrsibK3bFv7xif18NQ6lbCdJLX/LfzgbJ6YJBVzd5jqWlr+SLUSansy113gDcF+iuYzXOgn6959b7pUC7nldvfAj0biXtT+bPlq2e7p+H9r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206BAF8E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D206BAF5E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D206BAF5E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023199EED5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023199EED5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023640872</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023199EF05CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95023199EED5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95023199EED5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023643074</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95022907AB91BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95022907AB91BBDE0401F0A05990991</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95022907ABC1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951077A428BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951077A428BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951077A428CA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023637157</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00138_UVTC_PrimaryEmail_maps_to_single_child_user_and_node_role_Retailer_Token_Type_UnlockMe_200_OK_P2" searchProperties="true" id="c276a0b8-de9e-45ae-9d36-4c3e9d03ab0b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx1WIEwI0UUGiBbRogZbPlr5cGcchbhMnjZ0A/fXXDk0KlPZ2r4SEPBnPnJk5PvY1g2FgOm3GcMJJRJV+p6n+U12ZHmzYdc20PahZFnI126oirbpamfWV3cAeWKlKn7EU9ynjkPKmagLD0kBNM6ozs+qYDcesVWzLflKVBU6YCC1cKkBVtmFAmZOnbappQp0IMsIcCkPMHI6caXs4cISnAwtMaut6jzJPmLR8zmNH11HFxQgHAaqgKNSv9SOfa5c5U7KmkKcJfs/psqb6vnez2VQ21UqUrHUTAKADWxc+LiPrS7V1UWzGbp960X59C2lECYIBeYMS1BBzP3KVdrCOEsL98IvQhm4AGVrDW6Qhw6KXqv6RIEf3w0hHIBMGNeZDowg2wR5OMEVYmU/6TfXyZxPc750lkDIvSkJ2sv47SJhmOIhi7GqsqKxA9/OIZ9rVusbI6VMUpIxkeCRpEkOEmXKfYI9sB4QJ8rlMycevbJn4kYJlGP3NWK71Q6wCun6mOx2yxoz/n5kdzmsfZQGDFLcCY961/ix7T/Va8meIh4+bP6vxU333FF01cwiHzntQ5bjf16dkLbn1vml2RaD+a7KYuvPOrjoKtsDbPNxn3cS42r6kb6vYrJK34Qqg8eDxzaw9z8aDmydac5fLKx/MB1lG3OffYZL2H9r4YrFbesPaK1n0J0vdT+O75XJ6U08ex+MX27B+s4DPR8v1fDF2N/5mZL/SZwNmrDN/GHZvh/VHRI3FCJAg1efhr4t7cYYH7jrxR7OYBAt3d7duftR0WMOxsZCEabp6xogXS0mPfkfpiXlB/r28SAtxNS93dWKpUYxjytWW3CWlxUmFABHXEcPcr3t2zQC20Wu3e10b2J0usIDRA21Qs+2q3bAKDdqjOIF4G1GPyFxSZff8+R4gCh2GqYsTLYtS5GOmfhOxAzlU+nQiDkdEGZ5FQsUNvxpndBU1Vv5L1YvqOx6DGNRdQ1VGEb+jd0nb4zg5kG5rBswj6Z5gRGKCpb5LgjPBcMZFL15hlvLAqGSwQnEqboBEirBjWlc1nZEwDrBEqoeRmwa4Evtx3hmd7f9NDSKWWyfdWX7wvqzr9FvRAuHjEunAZC03WIwRn7mDjKKQrwuuHRZchG+nLpHnS/STJwTtkRx/+qCJ5EfJEVFRAbn0PDUcRdVPCyoTuRlBJdHLG1oIvDj+rWIcr7DyWkmzLM0H0JDSlojwulA4Q59ilAp92s2iF0z1MoT+o+uhRH2SubQf40u5T6ccchwKuij58gdvgylm8m3QFzzf/vThcZRS9I3jLT9nuw3EE0Ii/vaVgRwk/YT5XvxtosT9GNeZWAd5RJ3iQcAJXcuVvAh2X5ACRSIsEcoVJYfBzwU4l/zYWDa5xMIFm1Ypx19/UaQkNVWIUJRS3u+oueFQJnOcfBdj58PpU5hcit/v1i378m59HA6mQrBCqJa+5L+dNZLTBWFVXuE5lqa6FU9FkZyuD2T5HeCJMgPTNLrdesfomcAqlblh28DsGGUDjyppfTJ/thz09PQ8tP4F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EE6D2F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EE6D1F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EE6D1F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091FAAFE909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091FAAFE909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023644825</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091FAAFF909DE0401F0A05993974</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F951091FAAFE909DE0401F0A05993974</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F951091FAAFE909DE0401F0A05993974</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023647471</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F9502129BBFDE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F9502129BBFDE314E0401F0A07990586</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F9502129BBFEE314E0401F0A07990586</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951077A428BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951077A428BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951077A428CA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023637157</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00139_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="653e4669-7370-4ae2-afdb-d9450253e934"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyzyEX7lFBoqW0aaEXoN0uL0fGmSTeJg61HS77648dmhQo7ekeCQl5Mp75ZubzZ59ylMSO2+McmCAp1bx+R//HbwaB7ziBYbcavlGr1asGqrctI4Cg3Wg05DdAuuZxnoFHuUBUdHTHsmuGVTfs6tSpuk7TrVqVVrU107UnYFyGli4VS9fWSUy5m6ft6Bmjboo44S5FCXBXYHfSGw1d6emiApPePd2izBOybiTEwjVNXPEBQxzjCk4T89Tc8zn1uTshIUUiY/CW0+cd/W3varWqrKqVlIWmY1mWabVN6eNzEv7QuyfFZvA9GqTb9TmiKSUYxeQPUqBGIKLU13pxmDIiouST0LZpWyq0AWtsYLtGf+jme4Ic3Tcj7YFkHBk8QnYRbAwBMKAYtMex19F/fG+C271ThigPUpbwg/XfQQK6hDhdgG/worIC3fcjHmlX9xSw61EcZ5ws4VbRZIEwcO2eQUDWQ8Il+Xyu5ePX1lz+SMEywH8zllNzF6uEbh7pTp+EwMX/mdnuvLZRnlCcQffKHC+HD9PH6PHp6vFy5JGfMytKr6/uMtzJIew6b0GV435bH5K15Nbbpnm4qrcj5KxEaJL1phWNf/76tVixyCej+uL3tD+3GsH9bftsY7/UB0tn1k96z9yKW7di0Axny2rbalej1c9LepaeDNmkeX02y9p05oWTqjVzyOOvsHczc+6bQ3yeBJDM+fwmEvF9+MzYy9VTdjm/aTyMa+k5Z3FtHKxHo5ead/c8/3Nyu55P8ebhkj4MXq753Wg1WXXea9qtYd9YSMIkm/8GLIqloofX1wZyXkh8LS/KQnwjyF3dhdIoLoAKvat2KWlxMylAxHflMLfrQbtuObbTaznVC6fdH1xYNcseWD2r3pYN6tmFBm1RHEA8T2lAVC6lslv+fA0QJy4H6gMzlmmGI+D6FxH7SCDNo2N5OFLKYZpKFbd5gKhPQ7JazoVtt/5s7CSK1q8bXbtNxR29Y71AANuR7trUcvakewyYLAgofVcE55LhXMhevKJlJmK7skQVCpm8AZgSYdepteomJ8kiBoXUTFI/i6GyiBZ5Z0y+/XcMhHluHV9M84P3aV2H34oWSB+fKAeuajkDOUY4cgc5RSGfF1zfLbgI38t8os6X7KdgBG+R7H96p4niR8kRWVEBufQ8NOxFNQ8LKhP5S4JLopc3tBR4efy7xTheUeW1ki2XWT6AppI2JsObUuFscwI4k/q0maYvQM0yhPmt66FEfZC5tO/jy0REJwIJSCRdtHz5jbfBBLh6G3iS5+vvPjz2Usq+CViLY7bzWD4hFOIvXxnYxcpPmu/l3ypl/vu4jsTaySPrlA8CQWioVuoi2HxCCpzKsEQqV8p2gx8LcCz5vrFscolFSDbNMwGff9GUJHV0hHGaUeH19dywK5M5TrFZgPvu9CFMLsVvd+uaf3q3Po+GEylYCdJLX/LfzgbJ6YJBV1d4jqWjr+VTUSan4Y4svwH8oMyOfXHRuLAHjlUrlbkpldnpl8q8X0n3g/mjZaenh+eh+y8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EE6E2F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EE6E1F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EE6E1F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A823E29DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A823E29DFE0401F0A059909A1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023649750</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A823F29DFE0401F0A059909A1</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95023DF9D6CEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95023DF9D6CEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95023DF9D6DEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023652555</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00140_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1" searchProperties="true" id="3a07f702-a76a-4a8c-a1a8-91a60f87c203"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSxyrECQFKVJBogC67pe3yUdq+XBlnAHcTB2KHr19/7dCkQGlv90pIyJPxzJmZ42NfcRwGttvgHGJBI6Z1mjX9HwdfYjIhljFGRWI4Y982sFUcGyWwymPHxhW/OtG1DucJdBgXmImabiPLMVDJsIoDu+jaFbdYLlRR5UXXHiHmMrR0KSBdW4cB426atqYnMXMjzCl3GQ6Bu4K4/Ub31pWeLs4w6fWrHco0YVyfCTF3TZMUfCAQBKRAotC8Mg98rnzu9umUYZHE8JbT5zX9be9qtSqsioUonpo2QshEVVP6+JxOz/X6WbYZ/A6bRLu1h1nEKMEB3WIFqgtiFvlaI5hGMRWz8JPQlmkhFdqANTGI5bBz3XxPkKL7ZqQDkDHHBp9hKwvWgwnEwAhow16npp9/b4K7vYMYMz6J4pAfrf8OErAlBNEcfINnlWXovh/xRLvqV0DcDiNBwukS7hRN5pgA1x5imND1LeWSfD7X0vFray5/NGMZkL8Zy5W5j1VCN090p0mnwMX/mdn+vHZRHnGQQD14GPcfSz8fvftmrz+8vlndwlS8dC9e1p1aCmHfeQcqH/fb+pisObfeNnmj/tAr3fz6sWgNV+s/5cVde7SN+L13+asVhU+PPastgirwJ2TjXrdatqC1GS798m+PDencmz5sNoPtnLNFAtbZMEGXpEHHfdjeC7OxMH+OZjfj3sR6HQ5sFG7tzV2xxUbF1vM1K88qP274YHHxjJKEsUdcsi6Crdd7HqGIzxA9u3nCE4v89jZP1jjsrkqDUbf2XtN+DYfGTBL6yfgViMiWih6dptaW88Lia3lRFuobk9TVnSuN4gKY0Otql5IWN5ECRH1XDnO3bldLyLa9itMuOiXLuWwhB1lt1ECVahXZzetMg3YojiB6EZtQlUup7I4/XwMkocuB+RAbyyghM+D6FxGbWGCtw3rycESMwyCSKr4KVq++PP6Eh3S5hSVbbhESpKhrd5G4Z/dxYyIg3lNuZ4DsA+XuAaFzCkreFb+5JDgXshULvExEYBWWuMAgkRdArDTYtZ3LkslpOA9AATXDyE8CKMxn87QxJt/9SykiPLX2WoP03H1a1vG3rAPSx6fKgatarkFOEU5cQXZWyOcFl/YLzsI3Ep+q4yXbKWJKdkgOP72zRNEjp4isKIOcex4bDqKaxwXlifwlJTnP8wta6rs8/fVsHAtcWBSS5TJJB1BRyhbL8KYUOMvsA0mkPG0G0R9gZh7C/NbtkKM+ypzbD/ElYsb6AgsIJV20dPmNp0EfuHoadCTN1999dxyklH0TsBanbF4gXxAK8ZePDOIS5SfND/JvFcX++7hOxNrLI+uU7wFB2VSt1D2w+YQUJJJhqRSuKN4PfirAqeSHxrzJORYh2TROBHz+RVOKVNMxIVHCRKepp4Z9lUxxis0c3HenD2FSJX67Wtf806v1qXvbl3oVYj33pf/tbNCULgR0dYOnWGr6Wr4UZXI23VPlN4DHwty0UdmxilWr6LRzYS5Vq3bFK+UNPKik/sH80bLX0+PzUP8X</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206413A134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D2064139134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D2064139134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022C74F345148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022C74F345148E0401F0A079902DB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023655546</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022C74F355148E0401F0A079902DB</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022907AEF1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022907AEF1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022907AF01BBDE0401F0A05990991</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023658485</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00141_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_mergedeleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1" searchProperties="true" id="94aa6cfb-f8b1-40b4-9e6a-9010fc482892"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","mergedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chlyZcooKUctllW9oucNpuX46MMwlugx1iB2h//dqhSYHSnu6RkJAn45lvZj5/9ilHi8TxA84hE4RRbdhr6/9aNuAIWdjwQtQw3Lo9M2bNemQ0Ws3QAjuysNXStSHnOQwpF4iKtu5YtmtYnmGfTJ0T32n4rlNreY17XbuBjMvQ0qVm6dpmkVDuF2nbep5RnyFOuE/RArgvsD8JRhe+9PRRiUnvnG5RFgmzzlyI1DdNXAsBQ5LgGmYL89Tc8zkNuT8hMUUiz+AlZ8jb+sve9XpdW5/UWBabjmVZptUypU/ISfxV73wpN0M4pBHbrruIMkowSsgzUqBGIOYs1IIkZhkR88U7oW3TtlRoAzbYwLZLv+rma4IC3Scj7YHMODL4HNllsDFEkAHFoP0zHrb1r5+b4HbvNEOURyxb8IP130ECuoKEpRAavKysRPf5iEfa1TkF7A8pTnJOVnCpaJIiDFy7ziAimwvCJflCrhXj1zZc/kjJMsB/M5ZTcxerhG4e6U6PxMDF/5nZ7ry2UW5QkkPHm+XfA+e8O8mZfd+/GMwDlN+6Fh9Eo3YBYdd5C6oa98v6kKwVt142DZs8QTNvPh7P2LL5bfJzcpY8A3pKrCCPp+hhObpdcod4V7/z7vVKPJ4/3s3PadRtXp6n+OIheX4Og9Xg1w82b15+eej/GHW/35yb3rpx7y3WV0+UTu+fZr37+vL3TVp/GC3WsJw+D396N3lsX5N42bwNfrKEfX8e95aTLDtrBneWaY9X9pdv/VaX92+j+DxP68EP9uuBtV9r2q1h31hKwiSfPQAW5VLRY9jTBnJeSHwsL8pCQiMqXP1UaRQXQIXeUbuUtPi5FCAS+nKY2/Wg5Vk9x6q7tntmn7iDvuVa9sAKLK/Vchpdr9SgLYoDiF1GI6JyKZXd8udjgHjhc6AhZMaK5XgOXP8gYg8JpA3pWB4ORjlMmVTxVcNJZ+AuIab1Bm7O8o2L40dc17VLJq7oVRZEArId5XanlrOn3GPAJCWg5F3xm0uCcyFbsUSrXCR2bYVqFHJ5AWRKg33HbXomJ4s0AQXUXLAwT6CWztOiMSbf/jsGwrywjvvT4ty9W9bht7ID0ickyoGrWs5AThGOXEEnZSHvF+ztFlyGD/KQqOMl2ykygrdI9j+9skTRo6KIrKiEXHkeGvaimocFVYnCFcEVz6sLWuq7PP2dchxLVFvW8tUqLwbQUMqWyfCmFDjbnADOpTw9TdkjULMKYX7qdqhQH2Su7Pv4cjGnE4EELCRdtGL5iafBBLh6GgwlzTeffXfspZR9E7ARx2zdRL4gFOIPHxnYx8pPmq/l35pl4eu4jsTaySPrlO8BQWisVuoeeHqHFJjJsEQKF8t2gx8LcCz5vrFqcoVFSDbNcgHvf9GUIrV1hDHLqRj29MKwq5IFTvGUgv/q9CZMocQvV+uGv3u13o0uJlKvFkivfMl/OxukoAsGXd3gBZa2vpEvRZmcxjuq/ALwUJgdp1d3emeDweCsWwlzo9WynL5dNXCvks4b81vLTk8Pz0PnDw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022D62DC0FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022D62DBFFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022D62DBFFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D206414B134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D206414B134FE0401F0A059927C5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023661900</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D206414C134FE0401F0A059927C5</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950227473CA96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950227473CA96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950227473CB96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023664417</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00142_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_DECE_CS_Token_Type_ValidateEmail_P1_SUCCESS" searchProperties="true" id="3dfb7a9a-5edb-48b4-8c95-1fad8151dea4"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="6e16697e-9bb5-4e16-a8b9-b6055031e383"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="4e466209-24ea-4b82-b6f8-10d1640a58f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate" id="7dd4c43b-c1f1-492c-95c4-4a166275b2f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser" id="076b5720-1c1f-4a2c-8100-58c3c8c3493d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH69CPggFooLER2mz20K3QG/VlyvjDOAlsUPsQNhff+1AUmBpb/dKSMiT8cyZmeNjX3MUhY7X4RwSQRjV/H5L/8e2Z2hmzQLjKmhcGW51PjMaYFvGlQUYkGVht4l0zec8BZ9ygaho6Y5lu4ZVM+zqxKl6Tt1zG5Waa7/q2jMkXIaWLhVL17IopNzL07b0NKEeQ5xwj6IIuCewN+483HvS00MFJr19vUeZJ0zaSyFizzRxJZBowhBXMIvMa/PE5zrg3pgsKBJpAoecAW/ph73b7bayrVZYsjAdy7JMq2lKn4CTxVe9/aXYDIFP52y/7iHKKMEoJL+QAvUAYskCrRMuWELEMnontG3algptQIYNbLv0q26+JcjRfTLSCciEI4MvkV0Ee4I5JEAxaNMnv6V//dwE93snCaJ8zpKIn63/DBLQDYQshsDgRWUFus9HvNCu9jVgz6c4TDnZwFDRJEYYuPaYwJxk94RL8gVcy8evZVz+SMEywH8ylmvzGKuEbl7oTp8sgIv/M7Pjee2jPKMwhXYtENlf09G64X53xzP0kq1/7jAdfPs2dVs5hGPnPahy3If1OVlLbh02PWD7doWQa73AzWYzjaPGVDxO757D5/ur+epHrwd11JtBimvP2+2oMRws05hVb0j28vhy9fc2muLX+nq0c35MfOcLu/Pptzrx+9vnB5pW2Y+b290w69o9+9Zcj6cJ6yzt4ej2NnodhMPH1XCwibOpGfa/L6Ab1laNaBZ3+ejuhjd960v69Fq7ay4anemvGRs1o/Gk03qr6biGU2MhCeN09hOwKJaKHn5fG8h5IfGxvCgLCYx57urFSqO4ACr0ttqlpMVLpQCRwJPD3K8HzZptXVW73e6ga/Xs5o3lWvbA6lj1ZrNWrdmFBu1RnEHsMTonKpdS2T1/PgaII48DDSAxNizFS+D6BxH7SCDNp0/ycDDKYcKUiterNEoimzJYcRttk2VS3a3qv35udG3IxIiOks5cQHKk3e7Eck60+wkwiQkogVcM55LiXMhmrNEmFaFd2aAKhVReAYlSYc9xGzWTkygOQUE1IxakIVTiZZy3xuT7f8dAmOfWvK+Y56fv3eLOvxV9kD4BUQ5c1dMFOUu4cBFVi2LeL7p2XHQRvpMGRB0y2VSRELxHcvrpjSuKJCVRDlUVsEvvc8NJZPO8qDJZsCG4ZHx5VUullzrQLsayRpV1Jd1s0nwQdaVxiQxvSqmzzTHgVArVbsJWQM0yhPmpe6JEfZa5tJ/iS8WSjgUSEEnaaPnyE4+EMXD1SPAl4bPPvkBOUsq+CcjEJVsvlG8JhfjD5wb2sPKT5kf5t2VJ8DauC7GO8sg65ctAELpQK3Uj7N4hBmYyLJESxpLj4JcCXEp+aiybXGIRkk2zVMD7XzSlTS0dYcxSKvy+nhuO9TLHKXYxeG9Ov4XJNflwyWb83Uv25eF+LJUrQnrpS/7b2SA5XTDo6i7PsbT0TL4ZZXK6ONLnA8AzibYcp1d3B/VazXYbxxJtOf1u2cCTStq/mX+3HPX0/Dy0/wU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C74F785148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C74F755148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C74F755148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951063BBBFB0C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951063BBBFB0C19E0401F0A07995351</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023667648</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951063BBBFE0C19E0401F0A07995351</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951062F0ED6F689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951062F0ED6F689E0401F0A07995349</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951062F0ED9F689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023670144</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F951063BBBFB0C19E0401F0A07995351</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F951063BBBFB0C19E0401F0A07995351</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023672553</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95022FF1C3A406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95022FF1C3A406FE0401F0A079903A3</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95022FF1C3D406FE0401F0A079903A3</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F951062F0ED6F689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F951062F0ED6F689E0401F0A07995349</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F951062F0ED9F689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023670144</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7dd4c43b-c1f1-492c-95c4-4a166275b2f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>076b5720-1c1f-4a2c-8100-58c3c8c3493d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6e16697e-9bb5-4e16-a8b9-b6055031e383</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e466209-24ea-4b82-b6f8-10d1640a58f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00143_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_Retailer__Token_Type_ValidateEmail_P1_SUCCESS" searchProperties="true" id="b8fc0dd6-d78f-48ca-81fe-5c35ad6798ac"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jS55BPPhIVJFrgbu6lLQuU3vZlZZwhMQQHYiek/fXrhCYFSru9KyEhT8YzZ2aOj33F0Do0nC5jEHMSUcntteV/GvOmjhoGVhCeI8UyGnMFebanNFqmgRZgtRYWyJLLWAIuZRxR3pYNTbcUra7o5tQwHaPp1K2abdafZWkGMROhhUtNk6VsHVLmFGnbchJTJ0KMMIeiNTCHY2fSvR06wtNBJSa5c7VHWSSMOwHnG0dVcc0DDGGIazhaq1fqkc+Vx5wJ8SniSQxvOT3Wlt/27na72s6sRbGvGpqmqZqtCh+PEf9S7lyUm8Fz6SLar28QjSjBKCSvKAd1CzyIPKkb+lFMeLD+JLSu6loeWoEMK1i36KWsvico0H0z0hHImCGFBUgvg41hATFQDNLD2G3Ll9+b4H7vNEaULaJ4zU7WfwYJaAphtAFPYWVlJbrvRzzTrs4VYMelOEwYSeEup8kGYWDSKIYFyYaECfJ5TCrGL2VM/EjJMsB/MpYr9RCrgK6e6U6P+MD4/5nZ4bz2UWYoTKDjD3+vfN9aoYlx70aPf8fzBkamMXqyonYB4dB5D6oa99v6lKwVt9423W7dWS94bdnZ7Ln79ETGw8XS1p6mK3X0tFrOUOvaSgP+gw9fd+mrb28JPD64A8twg8cVGiyQ+bhtZu7r9b0H24tbb8mTZZDOhnMduK2Z28xrRfbu9vnnKMIv6hJ5qPe8/utulAY/Bw+L2TRI1aRpwy+z0aebpi+WakKeB2g8uqijl+WPfv95pJGXXs+/SR5x+72mwxqOjaUkTJL5EjAvlzk93J40EPNC/Gt5yS3EUxaFq7PJNYpxoFzu5LtyaXESIUDEc8Qw9+uBXdcMw7QNq6Ubht3oa5amD7SuVrdtzW41Sw3aoziBeBPRBclz5Sq758/XAPHaYUA9iJU0SnAATP4iYg9xJLl0LA5HRBlMI6HiJm69rrSGnkG20zEF30Raw8SoKUt3Eb+n93F3wSE+kG5rqhlH0j0GTDYEcn3PCc4EwxkXvdiiNOGhXktRjUIiboA4F2FHNKauMrLehJAjVdeRl4RQ2wSbojMq2/8bQpVYYR33p8XB+7Su029lC4SPR3IHltdyDWKMcOYOsspCPi+4flhwGb6beCQ/X6KfPCZ4j+T40ztNcn5UHBEVlZArz1PDUVT1tKAqkZcSXBG9uqGFwIvj3ynHsUW1bS1J06QYQDOXtliEV4XC6eoEcCL06WUarYCqVQj1W9dDhfokc2U/xpfwgE444rAWdJGK5TfeBhNg+dvAFTzPvvvwOEop+sYh4+dsN6F4QuSIv3xlYAfnfsI8En+7KPbex3Um1kEeUad4EHBC/XyVXwQvn5ACRyIsEcoVxYfBzwU4l/zYWDW5wsIFm+YJh8+/SLkktWWEcZRQ7vbkwnAokwVO/rIB593pQ5hCit/u1ox9erf+vh1OhGCtkVz5kv92VkhBFyxelsK/wNKWM/FUFMmpfyDLbwBPlFnXGkbPsrot67rfPFRmo9VvVA08qqTzwfzRctDT0/PQ+Rc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951062D44A94BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951062D44A84BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951062D44A84BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950223924812296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950223924812296E0401F0A05990987</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023674059</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950223924822296E0401F0A05990987</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950223924812296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951091E16D07B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951091E16D07B21E0401F0A05993966</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951091E16D17B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023676653</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950223924812296E0401F0A05990987</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023678875</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95021923C303C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95021923C303C50E0401F0A0799053D</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95021923C313C50E0401F0A0799053D</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F951091E16D07B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F951091E16D07B21E0401F0A05993966</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F951091E16D17B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023676653</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00144_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_DECE_CS_Token_Type_ValidateEmail_P1_SUCCESS" searchProperties="true" id="2fac0cc6-03a4-46be-ab06-44ebafe59727"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pC1SkI8zwei+KoIBePV/uxCRAtE1qktLqrz9JoRXw5XruDDNMtpvdZ3efPMm5AFHoBW0hMJeEUWPYa5r/1h0PNqoQWB50kFVDNdd6rFZ9q77w62eLU9epub5pDIVI8JAKCahsmp7j1izHt9zq3KsG3lnguBWv1vhlGneYCxVauVQc08iikIogT9s0E04DBgQRAQURFoGEwax9NQqUZwAKTGbrfIMyT8hbKynjwLZhBWGIwxBWIIvsc3vP5xyJYEaWFMiE421OJJrmdm+appW0WmF8aXuO49hOw1Y+SJDlsdk6KjZjNKQLtll3AWWUQBCSN6BBXWG5Yshoh0vGiVxFX4R2bdfRoS2cQQu6NXps2u8JcnQ/jLQHkgtgiRVwi2BTvMAcU4iN2+mwaR7/bIKbvXMOqFgwHomD9Z9BwnSNQxZjZImisgLdzyN+0q7WOYbBkMIwEWSNx5omMYBYGNccL0g2IkKRDwkjH7+RCfUjBcsw/JOxnNu7WBV0+5Pu9MgSC/l/ZrY7r02UOxAmuDVti0t5Mbp8fmo82bQj4pMsxM/1VRqzZg5h13kDqhz3dn1I1pJb203TibjvDJ3ZLXroT1f3z2/hmM/QUnTCZ5eTyejGFTcieUq7k/SfxlPqT/3pL/9h/Phy3fajrnPVmaCXq/noZH06qR8NhvJErDi3Z5e3Z/GLD5es93Z52/nbj2/OeLIMu5dOdZo20qwrRUYe0qsLZzzPvPXbupOhbH7f6Vdvnhr2w91r/4hM0GgcLdD9ZHJxMwa8/xdsvte0W8O+sZCEWfL4hKEslpoew54xUPMC8nt50RaCrEXuGsRao4TEVJotvUtLS5AoASIoUMPcrAcN3/G83qnX67uDQafbd2qOO3DaTr3RcLy+W2jQBsUBxC6jC6JzaZXd8Od7gDAKBKYIc2vNErjCwvwmYg9IYAzpVB0ORgWeM6Xi7vPrIl2n0WlySpiXoccacrMFemWmMWZyQie8vZCY70h3be54e9I9xZDEBGt91wQXiuFCql68gHUiQ7eyBhWKE3UDcC3CgVc7821BojjEGqkdMZSEuBKv4rwzttj8exaAIrfmbYUiP3xf1nb4rWiD8kFEOwhdTwerUeIP91A98Itivi7a3y26CN9OENFnTPVUcgI3SPY/vVNFc6TkybaqAnbpfWjYi2wfFlUmQ2sCS8KXN7USeiUDrWIsL6DyUknW6yQfRF1LHFfhbaV0rj3DMFE69Tpnz5jaZQj7R9dEifogc2nfx5fIFZ1JIHGkaGPkyx+8EWZY6DfCUPE9++kDZC+l6pvEmfzM1g3VU0Ij/va1AQOo/ZT5Wv2ljKP3cX0SayePqlM9DCShS73SF8LrF8SATIUlSsEY3w3+WYDPku8byyaXWKRi02Mi8ddfDC1NTRNAyBIqhz0zN+zKZY5TvsY4eHf6ECaX5O0dm4kv79j7q9FMCVcEzNKX/LezRXK6QGzqqzzH0jQz9WRUyelyR563AD8qdLdeG3Q9362d7St0r1M2cK+S1gfzR8tOTw/PQ+s3</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C74FC55148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C74FC25148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C74FC25148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D62DE1FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D62DE1FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023680272</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D62DE4FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95022D62DE1FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950D206BB5AE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950D206BB5AE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950D206BB5DE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023682525</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95022D62DE1FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023686024</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950212AAABFF905E0401F0A079905EF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950212AAABFF905E0401F0A079905EF</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950212AAAC2F905E0401F0A079905EF</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F950D206BB5AE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F950D206BB5AE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F950D206BB5DE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023682525</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F950D206BB5AE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F950D206BB5AE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F950D206BB5DE75FE0401F0A0799566F</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023682525</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00145_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_Retailer__Token_Type_ValidateEmail_P1_SUCCESS" searchProperties="true" id="ae6f2072-5c16-4f43-bd41-d51f4a045490"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XIhVAgAiSubVrKtkAvuy9HxpkEbxOHxg6k/fXHDiQFejndIyEhT8Yz38x8/uwWQ1FoOV3GIOEkpoo7aKv/mNiuLXxYaFXLbGh2E/kaMqy6ZvtnZ5YPTatqYVVxGUvBpYwjytuqZZi2ZtQ0szq3qo7VcIxGpW7Zv1XlHhImQguXiqEqWRRS5uRp22qaUCdGjDCHogiYw7Ez616PHeHpoAKT2mltUeYJk86S85Wj67jiAYYwxBUcR3pLP/BpecyZkYAiniawy+mxtrrbu9lsKptqJU4C3TIMQzeauvDxGAlO1M6PYjN4LvXj7bqPaEwJRiF5RRLUNfBl7CndMIgTwpfRJ6FN3TRkaA0yrGHTpieq/pYgR/fNSAcgE4Y0tkRmEWwKPiRAMSh3U7etnnxvgtu98wRR5sdJxI7WfwcJ6BrCeAWexorKCnTfj/hBuzotwI5LcZgysoaJpMkKYWDKTQI+ycaECfJ5TMnHr2RM/EjBMsB/M5aWvo9VQNc/6M6ABMD4/5nZ/ry2Ue5RmELnHC/5S9S7f5g0R5G7NNLTh379IruybdzOIew7b0GV496tj8lacmu36cK43lzSLEqH8HS3hGp1dgoTd3j7eIqyMcPR3dWvxc3VxJv3aO1m0Ewb1muN2qcGXunnr8NfYzJLBpeY82A0vv1h1s3MH7K7u9/+Mnxo9uZ31eqgkU7GvT8rxOLJ4moxeD1/ZGenbl9/ot059l9T7/6Rhr4dXkwf/MupP+8GyOv3Xn5E0dXicRrd3yB2m1b74X321H6rab+GQ2MhCbN08QcwL5aSHu5AGYl5If61vEgL8TQ/d3VWUqMYB8rVjtwlpcVJhQARzxHD3K5HzZphWYMza2icjUa9/tCwDXNkdI16s2lYQ7PQoC2KI4j9mPpE5pIqu+XP1wBx5DCgHiTaOk7xEpj6RcQB4khx6VQcjpgymMdSxWuNgL7YDZ8sVw0TmmsjCGreM4oCVZnE/Cf9mXR9DsmedttzwzrQ7ilgsiIgBV4ynAmKMy6a8YzWKQ/NyhpVKKTiCkikCjuW3ajpjESrECRUPYq9NITKarnKW6Oz7b+lIcxy63Q4z0/ep4Udfyt6IHw8Ih2YrKUHYo7w7hKqO7WikM8Lru0XXITvph6RB0w0lCcEb5EcfnrjiSRISRJRUQG59Dw2HETVjwsqE3lrgkuml1e0UHhx/jvFOJ5R5bmSrtdpPoC61LZEhNeFxJn6DHAqBOplHj8B1csQ+rfuhxL1UebSfogv5Us644hDJOii5MtvPA5mwOTjwBVEz7778jhIKfrGIeMf2fqheENIxF8+M7CDpZ8wCxFimzjx3sb1Qay9PKJO8SLghAZyJW+Cl09IgWMRlgjpipP94B8F+Cj5obFscomFCzYtUg6ff1GkJrVVhHGcUu4O1Nywr5M5Tv6yAufN6V2YXIt3l2vGPr1cH6/HM6FYEVJLX/LfzhrJ6YJBlXd4jqWtZuKtKJLTYE+XdwDfSbPZrDf61b5Vq1dLaa4JaW52e2UDDyrpvDO/t+z19Pg8dP4F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95021978C3D2573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95021978C3C2573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95021978C3C2573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D62E06FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D62E06FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023687599</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D62E07FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95022D62E06FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951092D1CF6A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951092D1CF6A648E0401F0A05993970</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951092D1CF7A648E0401F0A05993970</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023690637</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95022D62E06FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023693348</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950223924C62296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950223924C62296E0401F0A05990987</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950223924C72296E0401F0A05990987</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F951092D1CF6A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F951092D1CF6A648E0401F0A05993970</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F951092D1CF7A648E0401F0A05993970</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023690637</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F951092D1CF6A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F951092D1CF6A648E0401F0A05993970</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F951092D1CF7A648E0401F0A05993970</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023690637</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00146_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_DECE_CS_Token_Type_UnlockMe_P1_SUCCESS" searchProperties="true" id="f2f3d041-2d1e-485e-b05d-1b9b1cc7bd89"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfnRKX3iTjjCDgp4eX0DBo8cvd0K6QLRNapIW9NffpNAKiF7PnWGGyXaz++zukyc5FiiOPL8rBHBJGDWCXtv8pzbBUJs0W1YdTUOr5nkNq9U4qlp17LiTVrWGJ6hpGoEQKQRUSERl2/Qct2Y5dcutjr2q7x35bqNSbTiPpvEbuFChlUvFMY1lHFHh52nbZsqpz5AgwqcoBuFL7I+6V5e+8vRRgcnsHK9Q5gl5Zy5l4ts2roSAIYpwBbPYPra3fI5D4Y/IjCKZcljnDEXbXO9dLBaVRbXC+Mz2HMexnZatfEJBZgdm50exGcKATtlqfYooowSjiLwhDeoK5JyFRjeaMU7kPP4ktGu7jg5twRJb2K3RA9N+T5Cj+2akLZBcIEvMkVsEu4UpcKAYjLvboG0efG+Cq71jjqiYMh6LnfXfQQKaQcQSCC1RVFag+37EPe3qHAP2A4qjVJAMrjVNEoRBGEMOU7K8JEKRLxRGPn5jKdSPFCwD/DdjObY3sSro9p7u9MgMhPw/M9uc1yrKbxSl0CFX/dn85URmNxdH0YB7QYj62eihTuzndg5h03kFqhz3er1L1pJb603LC3ss00NylTrJ88Vtb/rroX93PhwePizYGN2fDLNqzOu9hrg/cU+IM4SfNcrlw+MjtZfsjR89UH4/vc4GQ5Y1fkQsuEguRl49c29u7qe/LpvX0dtPMUAzdgjnaD46xKeng9HVm7zG/VfhPY5pdJQO4Ya/VW9x7fzPoBpyp3V4MYz//OCP8f0A3LvZMHladnvBU3bXfq9ps4ZtYyEJo3TyBFgWS02PoGecqXkh+bW8aAsJrWnu6idao4QEKs2O3qWlxU+VAJHQV8Ncrc9adcdzvZNew3F73b7Td2qOe+Z0nXqr5bS69UKDVih2IJ4yOiU6l1bZFX++BohjXwANgVsZS/EchPlFxB6SyAjorTocjAoYM6XibmvRdGi0aCXVeOIinqE4e6sm1YU0jWsmB3TAu1MJfEO7a2PH29LuW8AkIaAFXjNcKIoLqZrxgrJURm4lQxUKqboCuFZh36sd1W1B4iQCDdWOWZhGUEnmSd4aW6z+PQthkVvzvmKRn75Pi9v9VvRB+YREOwhdzwmoWcKei8gpivm86Ppm0UX4bhoSfchUUyUneIVk+9M7VzRJSqKsqypgl967hq3I9m5RZbIwI7hkfHlVK6VXOtApxvKCKi+VNMvSfBBNrXFchbeV1Ln2CHCqhOp1zJ6B2mUI+1v3RIl6J3Np38aXyjkdSSQhVrQx8uU3HgkjEPqRECjCL7/7AtlKqfomYSn32U4j9ZbQiL98bmAfaz9lHqq/BePh+7j2xNrIo+pULwNJ6Eyv9I3w+gkxMFNhiZIwxjeD7wuwL/m2sWxyiUUqNk1SCZ9/MbQ2tU2EMUupDHpmbtjUyxynfE3Af3f6ECbX5PUluxSfXrIPV5cjpVwxMktf8t/OFsnpgsHUd3mOpW0u1ZtRJaezDX1eA/wg0Z7b7zcb/TPPqZUS3VQS7fXcsoFblXQ+mD9aNnq6ex46/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EE771F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EE76EF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EE76EF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212BD601DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212BD601DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023695251</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212BD604DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950212BD601DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022C74FDB5148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022C74FDB5148E0401F0A079902DB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022C74FDE5148E0401F0A079902DB</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023697866</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950212BD601DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023699962</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F951063531B9D0B0E0401F0A07995357</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951063531B9D0B0E0401F0A07995357</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F951063531BCD0B0E0401F0A07995357</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F95022C74FDB5148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F95022C74FDB5148E0401F0A079902DB</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F95022C74FDE5148E0401F0A079902DB</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023697866</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00147_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_Retailer__Token_Type_UnlockMe_P1_SUCCESS" searchProperties="true" id="85172258-5ee2-43a3-83a7-0eb8fb3e9189"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbvU+I8EP7uX9HpfXRKfwPtCDMcgoKinuB555d3YrqFaJvUJkX0r3+TYitw6Ou9M8ww2W52n9198iRHHKWJE/Y4h1wQRrXRcUf/J/bce9y2bCNwPWx47ZZvINy2jRZ2g3uIW36z2dS1EecFjCgXiIqO7li2Z1i+Ybszxw2ddui4Dafp3OnaT8i5DC1dGpaurdKE8rBM29GLnIYMccJDilLgocDhtDc5D6VniCpMevdojbJMmHcXQmShaeJGBBiSBDcwS80jc8vnKOLhlMwpEkUObzkj3tHf9j4/Pzee3QbL56ZjWZZpBab0iTiZf9O7B9VmiEY0Zut1H1FGCUYJeUUK1ATEgkVaL5mznIhF+kFo27QtFdqAFTaw7dFvuvmeoET3xUhbIHOODL5AdhXsGmLIgWLQbq5HHf3b1ya43jvLEeUxy1O+s/47SECXkLAMIoNXlVXovh5xT7u6R4DDEcVJwckSLhRNMoSBa1c5xGR1TrgkX8S1cvzaissfqVgG+G/GcmRuYpXQzT3dOSZz4OL/zGxzXusoP1FSQHcR55cPrXSZjC/8W4ccPlyyJfnB7JM+75QQNp3XoOpxv613yVpz621TjweXF/Ob6yC/XZmPqZuJ9u1hH32n6QDwgPwuXu/E1XAGtjPBiL02/d/th8OcjzMHTWc4GveH43Z06I9fJsXZwXN8ce/fPg5P2K8ZnQj/akFHU/ucZ+Bd9OHHzUNyexfFpydpf+yaY08Erzd55jZnl8vm8Mk5HZgDtBSH3uzu+y9+cBufmP1DPDNdC5+dDQvzlHfea9qsYdtYScK0uH8ALKqlosfoWBvKeSHxubwoC4mMuHQNM6VRXAAVelftUtISFlKASBTKYa7Xw8C3HGfgDPyg7fq2P7A8yx5aPasVBJbr9isNWqPYgdhnNCYql1LZNX8+B4jTkAONIDeWrMAL4PonEY+RQNqIXsvDwSiHGZMqbjMvuV/gSDyy+MV+cLLAfk2SpkhiXbtg4pJe5r1YQL6h3d7Mcra0+xowyQgogVcM55LiXMhmPKFlIRK7sUQNCoW8AnKlwqHjtX2TkzRLQEE1UxYVCTSyRVa2xuTrf0eKES+t14NZefI+LGz3W9UD6RMR5cBVLd9BzhH2XEJ2VcjHBfubBVfhe0VE1AGTDRU5wWsk25/eeaIIUpNEVlRBrj13DVtRzd2C6kTRkuCa6fUVLRVenv9uNY4n1HhqFMtlUQ6gpbQtl+FNKXG2OQVcSIF6mbFHoGYdwvzS/VCj3slc27fxFWJBpwIJSCVdtHL5hcfBFLh6HIwk0VdffXlspZR9E7AS+2z9RL4hFOJPnxk4xMpPmq/k3zPLo/dx7Ym1kUfWKV8EgtC5Wqmb4OUDUmAmwxIpXSzfDL4vwL7k28a6yTUWIdl0Xwj4+IumNKmjI4xZQcXoWC8NmzpZ4hQvGYTvTn+EKbX47XJd8Q8v11+T86lUrBTptS/5b2eDlHTBoKs7vMTS0VfyrSiT0/mGLr8B3JXmY8dqeo7ds11vWEuzHwROq+/XDdyqpPuH+U/LRk93z0P3Xw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206421B134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D206421A134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D206421A134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022E2E5983515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022E2E5983515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023701804</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022E2E5993515E0401F0A0799033C</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F95022E2E5983515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950226D19FA3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950226D19FA3221E0401F0A07990473</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950226D19FB3221E0401F0A07990473</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023704814</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95022E2E5983515E0401F0A0799033C</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023707459</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95022FF1CC3406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95022FF1CC3406FE0401F0A079903A3</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95022FF1CC4406FE0401F0A079903A3</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F950226D19FA3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F950226D19FA3221E0401F0A07990473</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F950226D19FB3221E0401F0A07990473</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023704814</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00148_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_DECE_CS_Token_Type_UnlockMe_P1_SUCCESS" searchProperties="true" id="9fb41291-b2ec-4d1d-bd23-9fe051f6d27b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC4RLVJDCpSrbUlrodnf7cmScCbhNbGo7QPfXHzuQFFja0z0SEvJkPPPNzOfPPhcoTbwgFAK4JIwaw37b/Mdv1N3I88Caea5j1Zo1z5pVY9+q+X7Lr/vgxdg3jaEQGQypkIjKtuk5bs1yfMut3nvVwGsGVbfies6jaTwAFyq0cqk4prFJEyqCPG3bzDgNGBJEBBSlIAKJg2k4ug6UZ4AKTGbnfIsyT8g7CymXgW3jSgQYkgRXMEvtc/vA5zwSwZTMKZIZh13OSLTN3d71el1ZVyuMz23PcRzbadnKJxJkfmZ2vhSbIRrSmG3XPUQZJRgl5DfSoEYgFywywmTOOJGL9J3Qru06OrQFG2xht0bPTPstQY7uk5EOQHKBLLFAbhFsAjFwoBiM75Nh2zz73AS3e+85oiJmPBVH67+DBHQFCVtCZImisgLd5yOeaFfnHHAwpDjJBFnBjabJEmEQxi2HmGyuiVDki4SRj9/YCPUjBcsA/81Yzu19rAq6faI7fTIHIf/PzPbntY3ygJIMOlkadh+va9XRreM0GXvk3cHk++CygYa1dg5h33kLqhz3bn1M1pJbu03PG/IQXtVv0tfxt2rkdkcCh0+9Ho9X7vqOMOzfTZLpDY5ux7yfjZeeP/7WvR1Vs+lVTJxMTurTy699x49/PIfw5cdr3R4tv4XzB6fxFD3iTdi8lC/pU7p+9XrO18ELoVV6lV79bFU38VWje2lX/ZtesrYH49UsvQ6juwf31/3v5mxavfiCf6ZX4/Xd4tddMnN+XDabbth+q2m/hkNjIQnTbPYEWBZLTY9h37hQ80LyY3nRFhJZce4aLLVGCQlUmh29S0tLkCkBIlGghrldX7R8x3O90PFrXX9Q7w2cmuNeOGrdajmtVrfQoC2KI4g9RmOic2mV3fLnY4A4DQTQCLi1YhlegDA/iNhHEhlDOlGHg1EB90ypuLup8ycCJKvPn7N5a7Z8mvPGmtG6adwwOaZjHsYS+J501+4d70C6J4DJkoDWd01woRgupOrFC1plMnErK1ShkKkbgGsRDrxa07cFSZcJaKR2yqIsgcpyscw7Y4vtv2chLHJr3lYs8sP3bm3H34o2KJ+IaAeh6+mCGiWcuIe8opj3i/b3iy7Ch1lE9BlTPZWc4C2Sw09vVNEcKXmyq6qAXXofGw4i28dFlcmiFcEl4cubWgm9koFOMZYXVHmpZKtVlg+ioSWOq/C2UjrXngLOlE693rNnoHYZwv7UNVGiPspc2g/xZXJBpxJJSBVtjHz5iTfCFIR+IwwV3zeffYAcpFR9k7CRp2y9RD0lNOIPXxs4wNpPmW/V35rx6G1cJ2Lt5VF1qoeBJHSuV/pCeH2HGJipsEQpGOP7wU8FOJX80Fg2ucQiFZtmmYT3vxhamtomwphlVA77Zm7Yl8scp3xdQvDm9EeYXJJ3d+xGvHvH/hxdT5Vwpcgsfcl/O1skpwsGU1/lOZa2uVFPRpWczvfkeQfwWKH7nuOHA9e9aFzUSoVutBRv6q2ygQeVdP4w/2nZ6+nxeej8Cw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205AE14F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205AE11F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205AE11F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A054B5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A054B5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023710203</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A054E5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951091FAC12909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951091FAC12909DE0401F0A05993974</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951091FAC15909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023712377</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950212A054B5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950212A054B5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023715225</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95022E2E5C43515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95022E2E5C43515E0401F0A0799033C</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95022E2E5C73515E0401F0A0799033C</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F951091FAC12909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F951091FAC12909DE0401F0A05993974</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F951091FAC15909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023712377</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F951091FAC12909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F951091FAC12909DE0401F0A05993974</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F951091FAC15909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023712377</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00149_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_Retailer__Token_Type_UnlockMe_P1_SUCCESS" searchProperties="true" id="6f64b0b6-b5e3-4782-9abf-e18e576b81d7"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4j2eMbzjGnsAMgVzcXJoCTdu8nBHyGtQYiejCJb++sokdICQnPTPMMFqvdr/d/fRJxwLNci/uCgFcEkaNpN82//WPwlYUtZAV4nRsNY+ClhV5rdDykeeHLS8ct3wwjUQIBQkVElHZNj3HbVpOYLn+yPNjrxX7YeMoOLo3jTvgQofWLg3HNFaznIq4TNs2FacxQ4KImKIZiFjieNi9voq1Z4wqTGbneIOyTMg7UynnsW3jRgoY8hw3MJvZx/aOz3Eq4iGZUCQVh+ecqWibz3uXy2Vj6TcYn9ie4zi2E9naJxVk8tnsfKo2Q5rQjG3WPUQZJRjl5AkVoK5BTllqdPMJ40ROZ2+Edm3XKUJbsMIWdpv0s2m/JCjRfTDSDkgukCWmyK2CDSADDhSD8X2QtM3PH5vgZu+IIyoyxmdib/13kIAuIGdzSC1RVVah+3jEA+3qHAOOE4pzJcgCbgqazBEGYdxyyMjqighNvlQY5fiNldA/UrEM8N+M5djexqqh2we60ycTEPL/zGx7XpsodyhX0Mm75P52OboXmfv16fpxPeYqS/pXWY8m7RLCtvMGVD3u5/U+WWtuPW+6PrntR1dwMbicq8GS/vS5dyvY3fdVz12EvgLsj+hwet4fr4mK/knusnN+cx6yh6W7sC+/XQC+m9j3sOTNm+j8E/9GHmlrOMO/vJ/f50EryEKcP95nKbZvMvXr3L0LfvxohpfhUF049ycPqXM0/ZHc/vZ76CFFSH755Y6D3H1gTXr5KWeTb82LcPk7G4prDeHLiWi/1LRdw66xkoShGv8GLKtlQY+kb5zpeSH5vrwUFpJaWekazwuNEhKoNDvFrkJaYqUFiKSxHuZmfRYFjudGYat34nlB6J86Tcc9c7pOEEVO1D2pNGiDYg9ij9GMFLkKld3w532AeBYLoClwa8EUnoIw34nYRxIZCR3ow8GogBHTKu4KtfZCvmiR+cJ1PT9HzSCST5M1NY0bJr/Sr7ybSeBb2t0cOd6Odg8AkzmBQuALhgtNcSF1Mx7RQsncbSxQg4LSVwAvVDj2mq3AFmQ2z6GAas9YqnJozKfzsjW22Px7FsKitA5OR+XJe7Ow/W9VD7RPSgoHUdRyAnqOcOAS8qpC3i442C64Ct9VKSkOmG6o5ARvkOx+euFJQZCaJLqiCnLtuW/YiWrvF1QnShcE10yvr2it8Pr8d6pxPKLGY0MtFqocQFhoG9fhbS1xrj0ErLRArUfsAahdh7A/dD/UqPcy1/ZdfEpO6VAiCTNNF6NcfuBxMARRPA4STfTVR18eOyl13ySs5CFbL9dviALxu88MHOPCT5tv9d+S8fRlXAdibeXRdeoXgSR0UqyKm2D9Bikw02GJli7Gt4MfCnAo+a6xbnKNRWo2jZWEt78YhSa1TYQxU1QmfbM0bOtkiVOu5xC/OL0KU2rx8+W6Em9erj+vr4ZasWbIrH3JfztbpKQL1k9L7V9iaZsr/VbUyelkS5efAb6SZs89PQ27vTPPadbSHGpp9vpu3cCdSjqvzK8tWz3dPw+dPw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EE7ADF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EE7ACF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EE7ACF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95021978CB22573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95021978CB22573E0401F0A059909AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023716790</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95021978CB32573E0401F0A059909AB</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951077255EDF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951077255EDF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951077255EEF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023719614</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95021978CB22573E0401F0A059909AB</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95021978CB22573E0401F0A059909AB</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023723228</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F9510764C70E3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F9510764C70E3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F9510764C70F3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F951077255EDF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F951077255EDF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F951077255EEF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023719614</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F951077255EDF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F951077255EDF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F951077255EEF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023719614</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>92a8eed0-5bab-4279-96f6-947494effb7e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>81c6db0d-6b86-4d4b-8365-53142a99ccb5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00150_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_1000_and_2000" searchProperties="true" id="76176df1-3b59-487e-a69e-ceb848f34e41"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","suma.nadimpally@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00151_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_5000_and_6000" searchProperties="true" id="7f62a433-a991-4b1d-b58d-00b7b50385ab"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","srikanth.paridala@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00152_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_6000_and_10000" searchProperties="true" id="39e1e8e0-e785-456d-8890-9d5330c615ff"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","ankit.nidhi@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00153_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_20000_and_25000" searchProperties="true" id="2813aa99-6f84-42c9-9b19-37a15d11c1b7"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","07112013email@email.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00154_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_50000_and_55000" searchProperties="true" id="58535ebf-850f-4692-a0c1-9235d77cb6d6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","compugain.com@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00155_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_60000_and_65000" searchProperties="true" id="63149261-9113-4362-ad7d-568b58a6b3fc"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","aravind.racharla@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00156_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_100000_and_120000" searchProperties="true" id="19a40ab8-835f-4dcc-94db-625a9d16344a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","kalyan.ineni@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00157_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_1000_and_2000" searchProperties="true" id="4efbb5af-f704-4b97-b191-fb0efcef020e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","suma.nadimpally@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00158_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_5000_and_6000" searchProperties="true" id="9e971fc3-345a-4d91-b048-240062856c51"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","srikanth.paridala@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00159_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_6000_and_10000" searchProperties="true" id="59114bb0-3012-4787-a90a-e12052f12955"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","ankit.nidhi@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00160_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_20000_and_25000" searchProperties="true" id="d6317b60-c64f-4e46-a079-c43ae5d16a24"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","07112013email@email.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00161_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_50000_and_55000" searchProperties="true" id="9b380650-1973-42fb-ae3b-0c36478c1c6a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","compugain.com@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00162_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_60000_and_65000" searchProperties="true" id="eb1deb5b-bf22-4141-82bf-a96907ce19b1"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","aravind.racharla@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00163_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_100000_and_120000" searchProperties="true" id="a7acf3ce-5cd0-4c65-8308-dbcab5c2bd23"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","kalyan.ineni@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00164_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_1000_and_2000" searchProperties="true" id="33d29bc8-834b-45d9-8526-d3961623a3e7"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","suma.nadimpally@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00165_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_5000_and_6000" searchProperties="true" id="9e348a85-42dc-4a17-880b-ec96c8cc5fcd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","srikanth.paridala@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00166_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_6000_and_10000" searchProperties="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","ankit.nidhi@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00167_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_20000_and_25000" searchProperties="true" id="1f3012b4-3c0a-40d1-b73e-4a85f907be35"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","07112013email@email.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00168_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_50000_and_55000" searchProperties="true" id="d44945a4-5df3-481e-b8d9-5a448f973660"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","compugain.com@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00169_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_60000_and_65000" searchProperties="true" id="f59323eb-483f-4fc5-b67f-3eaec97caefe"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","aravind.racharla@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00170_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_100000_and_120000" searchProperties="true" id="2d620992-c10f-44fc-8b8c-1c4cdfe4d470"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","kalyan.ineni@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00171_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_1000_and_2000_AlternateEmail-raviteja.pathivada0445@gmail.com" searchProperties="true" id="e51bfd51-6ec5-47e2-b4de-77987960eaff"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","raviteja.pathivada0445@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00172_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_5000_and_10000_AlternateEmail-srikanth@compugain.com" searchProperties="true" id="948ec696-d5dd-42d1-b83c-43bd2e7dbfdf"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","srikanth@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00173_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_20000_and_25000_AlternateEmail-albertmza@neustar.biz" searchProperties="true" id="faecf59d-733a-4bc3-9a95-4daf1fb1f5ba"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","albertmza@neustar.biz");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00174_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_50000_and_55000_AlternateEmail-kalyan@gmail.com" searchProperties="true" id="18c2f7a3-ecce-4756-859b-fc178d1833ef"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","kalyan@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00175_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_60000_and_65000_AlternateEmail-test_sts123@uvvutesting.biz" searchProperties="true" id="68539609-8f62-45e8-9e52-c72485dce951"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","test_sts123@uvvutesting.biz");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00176_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_100000_and_140000_AlternateEmail-testing_428@uvvutesting.biz" searchProperties="true" id="775aa4d7-dc66-448f-8cff-3376213df0d5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","testing_428@uvvutesting.biz");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_AlternateEmail_FUNC"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="f3abc956-6039-46c6-9a21-1a4120ba9c3e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="e242ef77-ebdb-4367-9e3e-8c2fea9cad56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH69CPkgIiQoSlHJLF0oLlC19WRnHgLmJDbGT0P76tUOTAqXd3pWQkCfjmTMzx8e+ZCAKLb/FGIo5pkTpdRrqP8CrzsHCNjS7ZgPNXjhzrQ7hXDOB5bhVMwCugVSlx1iCeoRxQHhDtQzT1gxHM6sTq+pbdd9xK07dfFaVKYqZCC1cKoaq7KKQMD9P21CTmPgUMMx8AiLEfA79cWvQ94WnDwpMavNyjzJPGDdXnG98XYeVAEEUhrACaaRf6kc+lwHzx3hJAE9i9JYzYA31bW+WZZWsWqHxUrcMw9ANTxc+AcPLC7X5o9iMgh5Z0P36ChBKMAQhfgUS1ADxFQ2UVrikMear6JPQpm4aMrSGdlCDpk0uVP09QY7um5GOQMYMaGwFzCLYCC1QjAhEyuOo11AvvjfB/d5JDAhb0DhiJ+s/g4RIikK6QYHGisoKdN+PeKZdzUsE/R6BYcJwiu4kTTYAIqbcx2iBd33MBPkCpuTjV3ZM/HDBMgT/ZCyX+iFWAV0/050OXiLG/8/MDue1jzIFYYKavEW7bD2/8Z6G6XAz6E6362h2+zzrXNUbOYRD5z2octxv61Oyltx62zTf3lxvRx3M1zSr3y0gcbe0exuA7dJuvT4/Toxw23mY1l68bH2TxQ/Vbus6vXuchuAR89sbY+qkd8MwmCz7af33DzhGq+owmv61Xs1av8zBrDZf2XD1EyDbzWw+GNy7Rv+hvTP6ZNkNZ7dWi17RX09QH2ZGZ/z3bZVfORlczdJ5PfqxfVzX7zvL+ujnvF0bxlUds8Z7TYc1HBsLSRgn8zWCvFhKevQ6SlfMC/Cv5UVacKAtcld/IzWKcUS42pS7pLT4iRAgHPhimPt113OMjmU4rWu73XW79rVhG2bXaBmu5zm1mldo0B7FCcQrShZY5pIqu+fP1wBh5DNEAhRrKU3gCjH1i4gdwIHSIyNxOChhaEKFilNqvoJNFDHqJabLs0VaXacvmQFU5Y7yIRnGrQVH8YF02xPDOpLuEYJ4g5HUd0lwJhjOuOjFFqQJD81KCioEJeIGiKUI+5Zdd3SGo02IJFI9okESospmtck7o7P9v6UByHLr6HqSH7xP6zr9VrRA+ARYOjBZSxuJMaIzd5BdFPJ5wc5hwUX4VhJgeb5EP3mM4R7J8ad3mkh+lBwRFRWQS89Tw1FU/bSgMlGQYlgSvbyhhcCL498sxrEFlW0lSdMkH4ArpS0W4XWhcKY+RjAR+vQyob8R0csQ+reuhxL1SebSfowv4Ssy5oCjSNBFyZffeBuMEZNvg57g+e67D4+jlKJvHO34OdtVKJ4QEvGXrwzoQ+knzPfiL6Nx8D6uM7EO8og6xYOAY7KUK3kRvHxCCkhFWCyUi8aHwc8FOJf82Fg2ucTCBZvmCUeff1GkJDVUACFNCO911NxwKJM5Tv6yQf6704cwuRS/3a079und+jToj4VgRUAtffF/O2s4pwsUL0vhn2NpqDvxVBTJyfJAlt8AniqzZbm2a9erXq3tlsrseJ7h1dtlA48qaX4wf7Qc9PT0PDT/BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502274748496B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502274748396B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502274748396B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D205AE4BF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D205AE4BF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023736323</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D205AE4CF7F4E0401F0A07995669</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ef970a71-ac89-4de5-b3ac-d452951d4ae0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f564e1c4-a882-43f4-a950-b4d495099626</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c6a5c62-b1be-432a-a1b8-3e633ac21465</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5bcb1c9a-2a1d-4934-838e-4093d4056f76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63b11e86-7c7d-4612-bcd3-c93a10983d6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e242ef77-ebdb-4367-9e3e-8c2fea9cad56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00078_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="7cdd1814-65ea-4de5-911e-f48085c1a117"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="24947e7e-f032-4b6d-883a-b4de1b44baa8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="8a34c90b-becb-4c1f-9a5f-e7fe44ce5189"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSx1XIhQRIVJC4dmnp5QCnpz0vK9cZwDSxqe1A6K9fJzQp0Mv2rISEPBnPfDPz+bPPBIojJ2gLAVwSRrVhr6n/U7fdEIceGA3k2oZbdUOj4XvIqNUfHxu1qg2hZevaUIgEhlRIRGVTdyzbNSzPsKtTpxo4fmDZlWqt9lvX7oALFVq5VCxdS+OIiiBP29QTTgOGBBEBRTGIQOJg0r4aBcozQAUmvXW2Q5kn5K2FlKvANHElBAxRhCuYxeaZeeBzFopgQuYUyYTDa85QNPXXvZvNprKpVhifm45lWablm8onFGR+qrdOis0QDumM7dZdRBklGEXkBWWgrkAuWKi1oznjRC7iT0Lbpm1loQ1IsYFtl57q5luCHN03Ix2A5AIZYoHsItgYZsCBYtB+jodN/fR7E9ztnXJExYzxWByt/wwS0DVEbAWhIYrKCnTfj/hBu1pngIMhxVEiyBquM5qsEAah3XKYkXREhCJfKLR8/Foq1I8ULAP8J2M5M/exKujmB93pkTkI+X9mtj+vXZQ7FCXQchovy+tfXodu0fKiE7d7j9HD84yh2Q1r5hD2nXegynG/ro/JWnLrdVMcz9azlFz27R9z/JzQDYvvujcXD/H5KLoe9p3lZH53uZqmjak/Wffnncsrnky6t420U+P8ai4uws2T/Gsxv7/Zbk/+Ttt4ZCd3FqweyMCq3ztL5vmXo4VzEaaRGd05y+4zC/Gqa734o5drxq3BcCBC95cVk/OBO17Sxu9+B9aNW3liPp3/xGn3xzi9NKeX1W2ytZpvNe3XcGgsJGGSPC4By2KZ0WPY0wZqXkh+LS+ZhYTGLHcNVplGCQlU6q1sVyYtQaIEiISBGuZuPfA926o5Pdere26nX+9brmUPrLbl+b7T6NcKDdqhOILYZXRGslyZyu748zVAHAcCaAjcWLMEL0DoX0TsIYm0IR2rw8GogClTKu7Y7ovTWPhyyZgtNphxOXNoVAddu2byht7w9kwC35Nud2o5B9I9BkxWBDJ9zwguFMOFVL14RutERnZljSoUEnUD8EyEA8dteKYg8SqCDKkZszCJoLJarPLOmGL37xgIi9w67k/zg/dpXcffihYon5BkDiKrpQNqjPDuDmoEXlHI5wV7+wUX4dtJSLLzpfopOcE7JIef3miS8aPkiKqogFx6HhsOoprHBZWJwjXBJdHLG1oJvDr+rWIcz6jyXEnW6yQfQD2TNq7Cm0rhbHMCOFH6tJ2yJ6BmGcL81vVQoj7KXNoP8SVyQScSSYgVXbR8+Y23wQRE9jYYKp6n3314HKRUfZOQyo9s3Ug9ITLEX74ycIAzP2W+VX8bxsO3cX0Qay+PqlM9CCSh82yVXQTbT0iBmQpLlHIxvh/8owAfJT80lk0usUjFpsdEwudftEySmjrCmCVUDnt6btiXyRyn3K4geHN6FyaX4te7NRWf3q33V6OJEqwY6aUv+W9ng+R0wUqelH+Opamn6qmoktP5niy/AnynzL49aHe9um/5vX1lrvp1t2zgQSWtd+b3lr2eHp+H1r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091FAC58909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091FAC57909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091FAC57909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062D45754BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062D45754BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023740194</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062D45764BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jD2w+PIEZYkNKEhIChOT2paPIa1Bqy9SSgPTXX8nEBAjJpXcmE0br1e7Z3aMjnTGUJo7fYQxyTjKq9cOW/hNHNRSjWsNoNuKG4dYtz2g0wTVqgLworiHs2Q1d6zMmoE8ZR5S3dMeyq4btGHZtYjX9quNbXsWpez90bQo5k6GlS8XStXWaUOYXaVu6yKmfIUaYT1EKzOfYH3cG17709FGJSW+fbVAWCfP2nPOFb5q4EgGGJMEVnKXmmbnncxYxf0xmFHGRw2vOiLX0172r1aqyqlayfGY6lmWZVtOUPhEjs696+0u5GaI+jbPNOkA0owSjhPxBCtQA+DyLtE4yy3LC5+kHoW3TtlRoA9bYwLZLv+rmW4IC3YmR9kDmDBlsjuwy2AhiyIFi0O5H/Zb+9bQJbvZOckRZnOUpO1j/HSSgS0iyBUQGKysr0Z0e8Ui72meA/T7FiWBkCTeKJguEgWnDHGKyviZMki9iWjF+bc3kHylZBvhvxnJm7mKV0M0j3QnJDBj/PzPbndcmyhQlAtoPAX4WLFzW/hHx9bObfPPIuHfhkMtBp1VA2HXegNqO+3V9SNYtt143Peb55PuyO+1Hw8Xlw9PK7C6uAsZneWfYGJpdfFMdk/WfG3s9ehxWzykMhJvZ39aC3QeDGxZdUnTbeb6w7ngEyZeVF1088Hgau1NkPz944urWXS088b0+/RFc924nVxNSnUTfHXb/MkkxFWbduXu65154Mbztnz9l8fiuN30eRbMB++L86DUno8x7IPPllffyK33qtt5q2q1h31hKwlg8PQPm5VLRox9qPTkvxD+XF2UhkREXrv5CaRTjQLneVruUtPhCChCJfDnMzbobdty6E4Rew7Hkv3rXci27Z3Usr9msVptuqUEbFAcQg4zGROVSKrvhz+cAceozoBHkxjITeA5M/yRiiDjS+nQkD0dGGUwyqeLndhCElud4tuM0gp5TC62w7gbn50HVCeudmq7dZPyW3uadmEO+p+C2s6fgI8BkQUDJvOI5k0Rnkgv4N1oKntiVJapQEPIiyJUW+47b8ExG0kUCCrCZZpFIoLKYL4oGmWzz6xgIs8I66k6K8/dheYffyk5In4goB6ZqOQc5TXh3Fdm+VxbyccHebsFl+I6IiDpmsq08J3iDZP/TG1sUTbZUkRX9DMY/7RL31v3k7e93mp+AMg/7sU0ULclO2vJOldeEFJF2Oc3fqPK7IpZLUcyvrgQyl+FNqZO2OQYspMq9TLJfQM1tCPOkS2aL+iDz1r6PT/A5HXPEIZVs04rlCS+MMTD1wujL07I+9fmyl1L2jcOaH7MFiXyIKMSfvlWwj5WfNA/lzyrLo7dxHYm1k0fWKZ8VnNCZWqnr5OUDUuBMhiVS/7J8N/ixAMeS7xu3Td5i4ZJNT4LDx180JWwtHWGcCcr7oV4YdsW2wMlfFuC/Ob0LUwj66w29Zh/e0I+D67GUvRTpW1/y384GKeiCQVcPgQJLS1/LB6dMTmc74v4K8Ki+17vuZ/q+X0n7nfm9Zaenh+eh/S8=</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951091FAC69909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951091FAC69909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023744164</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951091FAC6A909DE0401F0A05993974</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e945343c-a840-4585-aa9e-d90769b532bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8a34c90b-becb-4c1f-9a5f-e7fe44ce5189</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>24947e7e-f032-4b6d-883a-b4de1b44baa8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00079_UVTC_PrimaryEmail_maps_to_single_user_status_pending_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="9aee938b-b87c-4073-83a6-fbc318975c6f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="7e3c2915-3b62-4e1d-bcac-d0c3fcdadeb8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb6M6EH3fX4HYx4pgCLQBNZHyuTfapu2GtLfblyvHTIJbMCk2IemvvzYpNEk/bvdKkSIP45kzM8fHPuc4iW2/yzlkgqZMGw/a+j+e7XiuB2C0TkPXcPDCNVrYtQ0nJKeeM583HcvStTHnOYwZF5iJtm4jyzGQa1jNmd30bc9HrYbTtO517RYyLkNLlwbStU0SM+6Xadt6njE/xZxyn+EEuC+IH3QnF7709HGFSe+c71CWCbNOJMTKN03SCIFAHJMGSRPz3DzwOQ+5H9AlwyLP4CVnyNv6y96iKBpFs5FmS9NGCJnIM6VPyOnyu975Vm2GcMwW6W7dxyxllOCYPmMFagIiSkOtGy/TjIoo+SC0ZVpIhTZgQwxiOey7br4mKNF9MdIByIxjg0fYqoJNYQEZMALazXTc1r9/bYK7vbMMM75Is4Qfrf8MErA1xOkKQoNXlVXovh7xnXZ1zoH4Y0binNM1XCqarDABrl1nsKCbC8ol+UKulePXNlz+aMUyIH8ylnNzH6uEbr7TnQFdAhf/Z2b789pFucVxDp2H/nXsXj4ufqBN0QvuAvq3fTorkvXJ6He7hLDvvANVj/tlfUzWmlsvm26R8wgn0fzmjs08YMUwaqJo9Bxf9gKHyBWOhdX3YJkNgic45e5J6t2v3Yfr4WUQkYvbdDUR98OM4ZPiXnwbXf0sRnj7eOK6yW+2vo2LbQuLm4enYOBZF7/FyY/weYB+zZpTs3W7JLzfo3gyPB33vV+jafLQyrq5a/Zmk0V3/ePb4NfcmdtkMrwZ3ZG/+nZ4htqvNe3XcGisJCHI5w9ARLVU9BgPtJGcFxafy4uy0NBYlK7+SmkUF8CE3lG7lLT4uRQgGvpymLv1yHORbXvorO/0rV5vMEQOskaoi1zPQ55nVRq0Q3EEsZ+yBVW5lMru+PM5QJL4HFgImbFOcxIB1z+JOMACa2M2lYcjZRxmqVRxKFrhBm+LLU68R+vRJaT5HPFlpGuXqbhiV1l3ISDbU25nhuwD5Z4CoSsKSt4Vv7kkOBeyFU94nYvYaqxxg0EuL4BMabBvOy3X5DRZxaCAmkka5jE0VtGqbIzJd/+2gQkvrdPhrDx3H5Z1/K3qgPQJqXLgqpYeyCnCmyuo5btVIR8X7O4XXIXv5iFVx0u2U2SU7JAcfnpliaJHTRFZUQW59jw2HEQ1jwuqE4VrSmqe1xe01Hd5+jvVOJ5w46mRr9d5OYAzpWyZDG9KgbPMAEgu5Wk7Sx+BmXUI80u3Q436KHNtP8SXi4gFAgtIJF20cvmFp0EAXD0NxpLmm6++Ow5Syr4J2Ij3bP1YviAU4k8fGcQnyk+ar+VfkWbh67jeibWXR9Yp3wOCsqVaqXtg+wEpSCrDUilcabYf/L0A7yU/NNZNrrEIyaZ5LuDjL5pSpLaOCUlzJsYDvTTsq2SJU2xX4L86vQlTKvHL1brhH16td5OLQOpVgvXal/63s0FLuhDQ1Q1eYmnrG/lSlMnZck+VXwAeCbOFzs66jmP1umiIamE+8zzXdVHdwINKOm/Mby17PT0+D51/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951077A441CA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951077A441BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951077A441BA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022907C4C1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022907C4C1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023747346</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022907C4D1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7e3c2915-3b62-4e1d-bcac-d0c3fcdadeb8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00080_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="976c83cc-532e-4ea1-b9c1-465e4f01938a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="74ec924e-7a35-4902-ae49-d7d17e53f2b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkAuESFSTK5SxsoS2XdpeXI9eZgLuJDbHDZX/92qFJgdKe7pGQkCfjmW9mPn/2NUdR6HhNziEWhFGt167r/wJ27efqc8VwbNs1SmVUNWrP1bKBKhBYPraskgW61uM8gR7lAlFR1x3LLhmWa9jFiVP0nJpnOwW7Upzp2iPEXIaWLgVL17ZRSLmXpq3rSUw9hjjhHkURcE9gb9wc3HrS00MZJr1xvUeZJowbCyGWnmnigg8YwhAXMIvMa/PI59rn3pjMKRJJDK85fV7XX/duNpvCplhg8dx0LMsyrZopfXxO5pd64yLbDH6PBmy/biHKKMEoJL+RAjUAsWC+1gznLCZiEX0Q2jZtS4U2YIsNbJfopW6+JUjRfTHSEciYI4MvkJ0FG0EAMVAM2nTUq+uXX5vgfu8kRpQHLI74yfrvIAFdQ8iW4Bs8qyxD9/WIZ9rVuAbs9SgOE07WMFQ0WSIMXLuPISDbW8Il+XyupePXtlz+SMYywH8zlmvzEKuEbp7pTpvMgYv/M7PDee2jPKIwgcbTz++1bqsVzWbBQ+sXG7Grp3uYtquzqFpPIRw670Hl435dn5I159brpkcRvNy1oHsDu+9OuPY3XRr9g5lV5h2TrdDg6fZqPNiOyM9BK1jd+NPn8o8Vaw5H3flm1A+/xSXuVmfzp0XlZh1eTAejLdz+/lZjZMjIsrQKquFwgaobd9W/sSZmafpQ3Q1aL1cds18RD7N+p4XQZvc4mLWuuu15/1d/uG4XJ6FZvp9eTFso6myvyshy/aTP19PhoP5W02ENx8ZMEsbJ8wtgkS0VPXptrSvnhcTn8qIsxDeC1NVbKo3iAqjQG2qXkhYvkQJEfE8Oc7/u1lzLKba7tU672uk4TkeeIrtrNa1KrWaV7GamQXsUJxBbjAZE5VIqu+fP5wBx5HGgPsTGmiV4AVz/JGIbCaT16EgeDkY5TJhU8V3txd7AxoKiG239l5IPUF4E9EXXhkzc0bu4GQiID5S7NLGcI+UeASZLAkreFb+5JDgXshUrtE5EaBfWqEAhkRdArDTYc0pV1+QkWoaggJoR85MQCsvFMm2Myff/joEwT62jziQ9dx+Wdfot64D08Yly4KqWG5BThDNXkJUV8nHB7mHBWfhm4hN1vGQ7RUzwHsnxpzeWKHrkFJEVZZBzz1PDUVTztKA8kb8mOOd5fkFLfZenv5GNY4UKq0KyXifpACpK2WIZ3pQCZ5tjwImUp92E/QJq5iHML90OOeqTzLn9GF8iFnQskIBI0kVLl194GoyBq6dBT9J8+9V3x1FK2TcBW3HO1grlC0Ih/vSRgT2s/KT5Xv5tWOy/jetMrIM8sk75HhCEztVK3QO7D0iBmQxLpHCx+DD4uQDnkh8b8ybnWIRk03Mi4OMvmlKkuo4wZgkVvbaeGg5VMsUpdkvw3pzehUmV+PVq3fIPr9Yfg9ux1KsI6bkv+W9ng6R0wfJhKf1TLHV9K1+KMjmdH6jyK8ATYbatcrHUbrvNpuM2D4XZlea8gUeVNN6Z31sOenp6Hhp/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9510634DD5BA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9510634DD5AA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9510634DD5AA25AE0401F0A0799534D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DF9ED8EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DF9ED8EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023751128</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DF9ED9EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>74ec924e-7a35-4902-ae49-d7d17e53f2b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00081_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="4900189d-01ec-455c-9d51-7d05dbb8a4ac"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="e262fae6-95e2-4230-9b09-1673463fe1a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQC4RLVJAol24WaHeB7rb7cmScCZgmTogdSPvrjx2aFCjt6R4JCXkynvlm5vNnXzIUBpbTZQwSTiKquP22+o+3sC272mhouGU0tJppIK3ZrIJmNpHtNaFmes2FqriMpeBSxhHlbdUyzJpm2JpZnVtVx2o5pl1ptlp/VOUXJEyEFi4VQ1WyMKDMydO21TShToQYYQ5FITCHY2fWnYwd4emgApPaudyjzBMmnRXnsaPruOIBhiDAFRyF+qV+5HPpMWdGlhTxNIGXnB5rqy97d7tdZVetRMlStwzD0I2WLnw8RpZf1c6XYjN4LvWj/bqHaEQJRgF5RhLUBPgq8pRusIwSwlfhO6FN3TRkaA0yrGGzRr+q+muCHN0nIx2BTBjS2AqZRbAp+JAAxaDcTd22+vVzE9zvnSeIMj9KQnay/jtIQLcQRDF4GisqK9B9PuKZdnUuATsuxUHKyBZuJE1ihIEpPxLwSTYmTJDPY0o+fiVj4kcKlgH+m7Fc6odYBXT9THf6ZAmM/5+ZHc5rH+UXClLo/Kk/Xtw9jFfX8XBavRtN6g/j8eZm8KM/37VzCIfOe1DluF/Wp2QtufWy6X6+7vZWY+YmV93n8WiEGruhy4eN0bN3/zD9Yz3efqeD8bw+ya5qw19r//q3e1E3N7Nn46kxri+9yPWfzMX1xc9r2/iyGFl4+/upqacbm3hNu//tYjG+sGYpDhv3uLq7MuJr6xkya7L+Hmdr0quO+MPW97venbe73yxuuyN/PWx9y6B/96W5qbeu0+7icTD5Nt8m5vznoP1a02ENx8ZCEmbpYg2YF0tJD7evDMW8EP9YXqSFeJqfuzqx1CjGgXK1I3dJaXFSIUDEc8Qw9+thyzYsy6h3a6Y9uOrVB0bNMIdG12i0WobVuyo0aI/iBGIvoj6RuaTK7vnzMUAcOgyoB4m2jVK8AqZ+ELGPOFJcOhWHI6IM5pFQce6zhDTiWrhJYxpn29YujOtre6UqNxG/pbdJ1+eQHCh3bW5YR8o9BUxiAlLeJb+ZIDjjohUbtE15YFa2qEIhFRdAIjXYsWpNW2ckjAOQQPUw8tIAKvEqzhujs/2/pSHMcut0MM/P3btlnX4rOiB8PCIdmKzlCsQU4cwVZBSFvF+wfVhwEb6bekQeL9FOnhC8R3L86ZUlkh4lRURFBeTS89RwFFU/LahM5G0JLnleXtBC38Xp7xTj2KDKppJut2k+gIZUtkSE14XAmfoMcCrk6WkePQLVyxD6p26HEvVJ5tJ+jC/lKzrjiEMo6KLky088DWbA5NPAFTTPPvvuOEop+sYh4+dsvUC8ICTiDx8Z2MHST5h/iL9dlHiv4zoT6yCPqFO8BzihS7mS98DTO6TAkQhLhHBFyWHwcwHOJT82lk0usXDBpkXK4f0vilSktoowjlLK3b6aGw5VMsfJn2JwXp3ehMmV+OVqzdi7V+v9ZDwTehUitfQl/+2skZwuGFR5g+dY2momXooiOV0eqPILwLfCbA979erArDZax8Lcb5QNPKqk88b81nLQ09Pz0PkX</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950225FC63F1379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950225FC63E1379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950225FC63E1379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502206A415EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502206A415EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023754903</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502206A416EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e262fae6-95e2-4230-9b09-1673463fe1a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00082_UVTC_PrimaryEmail_maps_to_single_user_status_blocked:clg_Token_Type_ResetPassword_node_role_Retailer_P1_INVALID_STATUS" searchProperties="true" id="3c86acfb-77b6-4ba3-94b4-fd694e597f3b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="fd71f690-2d95-4348-a2bb-9ac42a65fb16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxVygQCJAIlLabM3lLbQdrcvR8YZwG3ihNjh9vXHCU0KFHrYR0JCnoxn1swsL7vGkO8ZdpMxiDgJqOR06vI/UEXWpKxVlbE5cZVSEQwF6eOqYrnY0E1LN1zdlCWHsRgcyjiivC4bml5SNFPRiyOjaBuWrVuFsmm8ydIzREyEFi4FTZZWvkeZnaaty3FE7QAxwmyKfGA2x/aw2e/ZwtNGGSa5UduiTBNGjRnnoa2quOACBs/DBRz4ak3d86m5zB6SKUU8juAzp8vq8ufe5XJZWBYLQTRVDU3TVM1ShY/LyPRSblxkm8F16CTYrtuIBpRg5JENSkD1gc8CV2p60yAifOafCK2rupaEVmCFFayX6KWsfiVI0Z0ZaQ9kxJDCZkjPgj3CBCKgGKSnR6cuX543we3eUYQomwSRzw7WfwcJ6AK8IARXYVllGbrzIx5pV6MG2HYo9mJGFnCX0CREGJh0H8GErHqECfK5TErHL62Y+JGMZYD/Ziw1dRergK4e6U6HTIHx/zOz3XltozwjL4bGXBvgpz9vzJz7nWbljuie//t2eLWu3mr1FMKu8xZUPu7P9SFZc259bmoOHn49V8bQ859eq/x+NRYwI6qt3jYv3qvPvPKL+mtY0e/my6DTXd34ExK1+k29X1kWr6JNCzujj5IbFa/card6EYduueT0HFO7uX3j7mgwGt5uVtak93IfO3jdb72/TcJ2uz/jT1cvzXkvNKHaGy4f7qeD0Xz+OOrjfvxulu68ygNceDdPD9MuUpubK2vwPq7ebF7rXzXt1rBvzCRhGI/fAfNsmdDD6UhdMS/Ef5aXxEJcZZK62mGiUYwD5XIj2ZVIix0LASKuLYa5XXctUzOKZvXaaBt6q2RcayVN72pNzbQszaqYmQZtURxAbAdUtNVPxUPa8udngNi3GVAXImURxHgGTP4hYgdxJDn0URyOgDIYBULFy3ppFgazhbnezPSP5VorVZYeYuW5LN0FfEAHUXPCIdqR7tJIM/ak+xEwCQkk+p4QnAmGMy56MUeLmHt6YYEKFGJxA0SJCNtGqWqqjPihBwlS1Q/c2INCOAvTzqhs+y+0CLPU+ng9Sg/eyboOv2UtED4uSRxYUksLxBjhyB2kZYWcLtjcLTgL34xdkpwv0U8eEbxFsv/piyYJP3KOiIoyyLnnoWEvqnpYUJ7IXRCcEz2/oYXAi+PfyMYxR4V5IV4s4nQAlUTaIhFeFQqnq0PAsdCn9Sj4AKrmIdSzrocc9UHm3L6PL+YzOuSIgy/oIqXLM94GQ2DJ28ARPF+d+/DYSyn6xmHFj9naguwsQfzjKwPbOPET5nvxtwwi92tcR2Lt5BF1igcBJ3SarJKLYH2CFDgQYYlQriDaDX4swLHk+8a8yTkWLtg0jjmc/iIlklSXEcZBTLnTkVPDrkymOPk6BPvL6VuYVIo/79YVO3m3/un3hkKwfCTnvuS/nRWS0gWDnFzhKZa6vBJPRZGcTndk+RPggTLrWrnYanUMXWvrVq7MFcsyi6aeN3CvksY383fLTk8Pz0PjXw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951063BBD220C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951063BBD210C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951063BBD210C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502358E2C21B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502358E2C21B42E0401F0A05990975</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023758671</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502358E2C31B42E0401F0A05990975</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fd71f690-2d95-4348-a2bb-9ac42a65fb16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00083_UVTC_PrimaryEmail_maps_to_single_user_status_suspended_Token_Type_ResetPassword_node_role_Retailer_P1_INVALID_STATUS" searchProperties="true" id="1328b4b6-9af8-46a5-a89d-6702b978c914"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="0e458561-52ee-4a0c-8366-daaf96e24338"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH1chHyTQRAUpQLk3bSm9QNm2LyvXccAlsUPs8NFfv3ZoUqC027sSEvJkPHNm5vjYFwwkseX5jKGMY0qUoNdS/7EaANqWA7RGZBqajdxIc+uOoxm2YQG7cR5GoasqAWM5CgjjgPCWahmmrRmOZtYnVt2zXM+q15qN5pOqTFHGRGjhUjNUZZPEhHlF2paaZ8SjgGHmEZAg5nHojf3BjSc8PVBiUtsXO5RFwqw95zz1dB3WQgRRHMMapIl+oR/4XITMG+MZATzP0FvOkLXUt73r9bq2rtdoNtMtwzB0w9WFT8jw7Ext/yg3ozAgEd2tu4BQgiGI8SuQoAaIz2mo+PGMZpjPk09Cm7ppyNAa2kANmjY5U/X3BAW6b0Y6AJkxoLE5MMtgIxShDBGIlPtR0FLPvjfB3d5JBgiLaJawo/WfQUJkhWKaolBjZWUluu9HPNGu9gWCXkBgnDO8QreSJimAiCl3GYrw5gYzQb6QKcX4lQ0TP1yyDME/GcuFvo9VQNdPdKeHZ4jx/zOz/XntokxBnKP2i6Wv4fD+wRjPbf95+9yfX/W3FN7kq8tWAWHfeQeqGvfb+pisFbfeNl2Rn4vF8tE2p74fbdLBQzABTDd/hbG9CGdwfPNzGmWGk+fXi8fg/m54no7GnW5/OfrrpTf5+xIOG7MR8evrTnD16we9avj3fWvdH9DFoO68wofm6mbi9qYvOWTToTlIAnjb+/2U2ttltH10H2bbobO471339WV6NX8cnofda999msLV9gcdZnaDxvb093SVmLfB6+Sx9V7Tfg2HxlISxvnzC4K8XEp6BD2lL+YF+NfyIi041KLC1UulRjGOCFfbcpeUFi8XAoRDTwxzt+67jmFZTbvp2B230WleitNk9g3fcFzXcM87pQbtUBxB7FISYZlLquyOP18DhInHEAlRpq1oDueIqV9E7AEOlICMxOGghKEJFSpOk/wlM7ZZvjU3pkNjSkJMYtMSx+OW8iEZZn7EUbYn3fbEsA6ke4QgTjGS+i4JzgTDGRe9WIJVzmOztgI1gnJxA2RShD3LPnd0hpM0RhKpntAwj1EtnadFZ3S2+7c0AFlhHV1OioP3aV3H38oWdGUx0oHJWjpIjBGduIPMspDPC3b2Cy7D+3mI5fkS/eQZhjskh5/eaSL5UXFEVFRCrjyPDQdR9eOCqkThCsOK6NUNLQReHP92OY4lqC1r+WqVFwNoSmnLRHhdKJypjxHMhT5tJ3SBiF6F0L91PVSojzJX9kN8OZ+TMQccJYIuSrH8xttgjJh8GwSC55vvPjwOUoq+cbThp2zdWDwhJOIvXxnQg9JPmO/E35pm4fu4TsTayyPqFA8CjslMruRFsP2EFJCKsFgoF832g58KcCr5obFqcoWFCzY95xx9/kWRktRSAYQ0JzzoqYVhXyYLnHybIu/d6UOYQorf7tYN+/RufRjcjIVgJUCtfPF/O2u4oAtEqrzCCywtdSOeiiI5me3J8hvAI2U2Ddfs+92OI6S4t6/MdbdpVw08qKT9wfzRstfT4/PQ/hc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091FACB6909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091FACB5909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091FACB5909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502274754B96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502274754B96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023762516</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502274754C96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0e458561-52ee-4a0c-8366-daaf96e24338</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00084_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_ResetPassword_node_role_Retailer_(Negative)_P1_NOT_FOUND" searchProperties="true" id="e91c224e-55f9-4b7b-9691-c033f0e2554b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="f5aa653a-c844-46cc-b9f1-c3a781f16925"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5no3vXFyBqgyQjRNIsoFhMnnZUuQGK9gSWDKXfP1KJnaAkGxmq6ii1G51n+4+OtIZR2niBOecQyYIo1rYa+v/uNhxIterG4AajuFNAYyWP60bGJqWVX9ykNeKdC3kPIeQcoGoaOuOZXuG5Ru2O3bcwGkFTqNmWd6jrk0g4zK0dKlZurZJE8qDIm1bzzMaMMQJDyhKgQcCB6Pz4SCQngEqMemdsx3KImHWiYVYBKaJaxFgSBJcwyw1z8wDn7OIByMyo0jkGbzmjHhbf927Xq9ra7fGspnpWJZlWi1T+kSczL7rnW/lZohCOmW7dRdRRglGCXlBCtQQRMwi7TyZsYyIOP0gtG3algptwAYb2Pbod918S1Cg+2KkA5AZRwaPkV0Gu4cpZEAxaD/vw7b+/WsT3O0dZ4jyKctSfrT+M0hAV5CwBUQGLysr0X094ol2dc4AByHFSc7JCm4UTRYIA9fuMpiSzYBwSb6Ia8X4tQ2XP1KyDPCfjOXM3McqoZsnutMjM+Di/8xsf167KBOU5ND5cfkkHnK74U/yyYsFS9K9pOngcb69/N0uIOw770BV435dH5O14tbrpvWw39ys71rOcO7ejJ/jxsPwb+F7fvIitpdXs7gfXree6+Fkm3cvwqgRbSa95dL/+SsO48eBeeUkvzAZmHFzbc6X38bpU5bPf9Rt5tIH5j/n63X4xC89OtnEP8Pr9S83+2t+O/Ba3ei2ycwrAqs+7ScXjeE4i+/s3Lzq5fh3vReh6+Y3xDbOIJnRe//xAS+ADR7D9ltN+zUcGktJGOVPz4BFuVT0CHvahZwXEp/Li7KQyJgWrsFCaRQXQIXeUbuUtAS5FCASBXKYu/VFy7ccp+/0633b9W2/b3mWfWGdW41Wy3LdbqlBOxRHELuMTonKpVR2x5/PAeI04EAjyIwVy3EMXP8kYg8JpIX0Xh4ORjmMmVRxPl9l8bYhWnN/ZiOgCEFKopep0LUbJm7pbXY+FZDtSbc3tpwD6b4HTBYElL4rgnPJcC5kL5ZolYvErq1QjUIub4BMiXDgeE3f5CRdJKCQmimL8gRqi3hRdMbku3/HQJgX1vv+uDh4H9Z1/K1sgfSJiHLgqpYfIMcIJ+4guyzk44L9/YLL8Od5RNT5kv0UGcE7JIef3mii+FFxRFZUQq48jw0HUc3jgqpE0YrgiujVDS0FXh7/TjmOJaota/lqlRcDaChpy2R4UyqcbY4A51KftmM2B2pWIcwvXQ8V6qPMlf0QXy5iOhJIQCrpohXLL7wNRsDV2yCUPN989eFxkFL2TcBGnLJ1E/mEUIg/fWXgACs/ab6Tf2uWvRV+KtZeHlmnfBAIQmdqpS6C7QekwEyGJVK5WLYf/FSAU8kPjVWTKyxCsukpF/DxF01JUltHGLOcirCnF4Z9mSxwiu0Cgjend2EKKX69Wzf8w7v1YTgYScFKkV75kv92NkhBFwy6usILLG19I5+KMjmd7cnyK8B3yuy6tu1cWHXX6x0os9NvVA08qKTzzvzestfT4/PQ+Rc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950233112F1634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950233112F0634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950233112F0634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022E2E6E13515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022E2E6E13515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023766127</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022E2E6E23515E0401F0A0799033C</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f5aa653a-c844-46cc-b9f1-c3a781f16925</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00085_UVTC_PrimaryEmail_maps_to_single_user_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_(Negative)_P1_NOT_FOUND" searchProperties="true" id="875664b1-0066-4b1d-8890-2c82d19d3de5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="ff20e299-7af9-4d04-9653-38d3c4c74673"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH49CLlzSRAWJQqHpQi9Ary9HxpkQt4mTxg6w/fVrhyYFSnu6R0JCnoxnvpn5/NnHDMWR5XYZg4yThCpev63+iw2n6Rw5ptbyLaw1AjA1x242tJZVt+2632gGRl1VPMZy8CjjiPK2ahlmQzOamlmfWXXXcty6WTuyjh5V5RYyJkILl5qhKus4oswt0rbVPKNughhhLkUxMJdjd9odj1zh6aISk9o53qAsEmadkPPU1XVc8wFDFOEaTmL9WN/xOfaZOyULiniewVtOn7XVt72r1aq2qteSbKFbhmHohqMLH5+RxU+186PcDL5Hg2Sz7iGaUIJRRF6RBDUGHia+0o0WSUZ4GH8S2tRNQ4bWYI01bDboT1V/T1Cg+2akHZAZQxoLkVkGm0AAGVAMys3Ea6s/vzfBzd5ZhigLkixme+u/gwR0CVGSgq+xsrIS3fcjHmhX5xiw61Ec5Yws4ULSJEUYmHKVQUDWI8IE+XymFONX1kz8SMkywH8zlmN9G6uArh/oTp8sgPH/M7PteW2i3KIoh87Dw+WrdTZYOdGJdRbcD4PWbDT35/jmymsXELadN6Cqcb+t98lacettE+lZp4/2hDyfPZ9MgzwiQwjGI69Bz9Dw1ntMDZ3PR+fMWVyOZmnzKrxDtM8vcO+5b/Mk7b2eDs+T89b1vfF0v/oxxndzSFvr25eL6/DEHOfNME6G1/ptMOzdh90rfXEe0e7TP3e/HuO7m/7Qfppn+uu9NZzfBKfO9NfFaHIxHxsPy8Ur/rG6Ht+sALWGr3HfsH3n+nbcfq9pu4ZdYykJ03z+BJiXS0kPr68MxLwQ/1pepIX4WlC4uqnUKMaBcrUjd0lpcXMhQMR3xTA364HTNCzT6nZ7lj1wjOap0TDMgdE1bEeuBqUGbVDsQewlNCAyl1TZDX++BohjlwH1IdOWSY5DYOoXEfuII8WjE3E4EspglggVN6N1FsJT/egptJ/N/Mh2zFYriepWpCoXCb+kl1k34JBtaXdjZlg72j0BTFICUuAlw5mgOOOiGS9omfPIrC1RjUIuroBMqrBrNY6aOiNxGoGEqseJn0dQS8O0aI3ONv+WhjArrJPTWXHyPi1s/1vZA+HjE+nAZC0nIOYIBy4hqyzk84Kb2wWX4bu5T+QBEw3lGcEbJLuf3nkiCVKRRFRUQq489w07UfX9gqpE/pLgiunVFS0UXpz/TjmOF1R7qeXLZV4MwJbalonwupA4U58CzoVA/Z4lz0D1KoT+rfuhQr2XubLv4st5SKcccYgFXZRi+Y3HwRSYfBx4gujr7748dlKKvnFY80O2XiTeEBLxl88M7GLpJ8xX4m+VZP77uA7E2soj6hQvAk7oQq7kTfD7E1LgRIQlQrqSbDv4oQCHku8aqyZXWLhg0zzn8PkXRWpSW0UYJznlXl8tDNs6WeDkv1Nw350+hCm0+O1yXbNPL9f78WgqFCtGauVL/ttZIwVdMKjyDi+wtNW1eCuK5HSxpctvAPek2TRs22q2Tu1Bvd6vpLnpOHWje1I1cKeSzgfzR8tWT/fPQ+cP</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951077256E8F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951077256E7F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951077256E7F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212AAC27F905E0401F0A079905EF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212AAC27F905E0401F0A079905EF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023770694</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212AAC28F905E0401F0A079905EF</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ff20e299-7af9-4d04-9653-38d3c4c74673</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00086_UVTC_PrimaryEmail_maps_to_single_child_user_and_valid_node_role_DECE_CS_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="00c6f36a-0953-4d92-97b4-d1344acefd8f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="9c2735be-c30e-4e61-bcb9-82c2a66d6614"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIvUAESLSU7pSWXqCX05cj40zANHFo7ADt1287kHAp7ek+UqTIk/HMmpmVZTcYiiPLazMGKScJVfxOU/3XqjniqWMttANTc+xRoNWQ62g4wNXAdcAMTlxV8RnLwKeMI8qbqmWYjma4mmkPLduz6p7tVqon1ouqPELKRGjhUjFUZRlHlHl52qaapdRLECPMoygG5nHsDdrXV57w9FCBSW01VijzhGlrwvnM03VcCQBDFOEKTmK9oe/4NALmDciYIp6lsM4ZsKa63rtYLCoLu5KkY90yDEM36rrwCRgZH6mtX8VmCHwaJqv1GaIJJRhF5ANJUNfAJ0mgtKNxkhI+ib8IbeqmIUNrsMQaNh16pOqbBDm6H0baAZkypLEJMotg9xBCChSD8nDvN9Wjn01wtXeYIsrCJI3Z3vrvIAGdQ5TMINBYUVmB7ucRD7Sr1QDs+RRHGSNz6EuazBAGptymEJLlFWGCfAFT8vErSyYeUrAM8N+MpaFvYxXQ9QPd6ZAxMP5/ZrY9r1WURxRl0EK67/Dx/P4+nui3D7P332/Hx0/GJb6Y3DVzCNvOK1DluNfrfbKW3FpvWjzPpo/RCxq2fWyGbFjDF2+94ePzEPeuonCip3f287VlnqHLW94nybO7zE5TczDqTnoPi3NOrP7T0Md3C/Leu/ll2qPTuEvcqzvUvnpOQuut+uHXP064H7f/eUzH7vn47rLv9rvXaDhLn4zpb2b1Rr3w5WxuXpgv3Zue41zc1s6fjqfdX/PqFCzfsEP8wnvnfXxu3DU3NW3XsGssJGGQjaaAebGU9PA7SlfMC/Hv5UVaSKCFuas3kxrFOFCutuQuKS1eJgSIBJ4Y5mrdrbuGZdartU7VttyqfW44htk12oZbrxv19mmhQSsUexDPEhoSmUuq7Io/3wPEsceABpBq8yTDE2DqNxE7iCPFp/fi50gog2EiVHy6fEXR2EYwmk5MxIzY+fh4nb9Oa6rST/gNvUnbIYd0S7qdoWHtSPc9YDIjIPVdEpwJhjMuevGG5hmPzMocVShk4gRIpQh7llNzdUbiWQQSqR4nQRZBZTaZ5Z3R2eptaQiz3Jq3FbP85/uytv1vRRuET0CkA5P1nIIYJRw4h6yimK+LdreLLsK3s4DIf0z0lKcEr5DsftpQRXKk5Mm6qgJ26b1v2Ims7xdVJgvmBJeEL09qIfRCBlrFWN5Q5a2SzedZPoiqlLhUhNeF0pn6AHAmdOp9mLwC1csQ+o+OiRL1XubSvosv4xM64IhDLGij5Msf3BEGwOQdwRd8X/70ArKTUvSNw5Ifsp1F4iohEX9728Aeln7CfCteiyQNNuM6EGsrj6hTXAw4oWO5kgfC+xfEwIkIS4SCJel28EMBDiXfNZZNLrFwwaZRxuHrL4qUpqaKME4yyv2Omhu25TLHyd9n4G2cPoXJJXl9xi7Zl2fs8/XVQAhXjNTSl/y3s0ZyumBQ5VGeY2mqS3FlFMnpeEue1wD3FNo0qlXLPemedG27s63QtrFR6N1KWp/Mny1bPd3/H1p/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951077256F9F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951077256F6F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951077256F6F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95021978D732573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95021978D732573E0401F0A059909AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023774623</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95021978D762573E0401F0A059909AB</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F95021978D732573E0401F0A059909AB</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95021978D732573E0401F0A059909AB</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023776975</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F951091E180C7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951091E180C7B21E0401F0A05993966</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F951091E180F7B21E0401F0A05993966</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951091FAC69909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951091FAC69909DE0401F0A05993974</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951091FAC6A909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023744164</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>86ed78e0-67f4-45d3-bfde-62c6b9ba296b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c2735be-c30e-4e61-bcb9-82c2a66d6614</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00087_UVTC_PrimaryEmail_maps_to_single_child_user_and_node_role_Retailer_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="92c0a77b-9dc8-42e5-9206-12058ff64f72"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="e3046816-37b5-43a6-b253-b79799b26943"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chTkj4iACJAt2ypYXlo+3uy5VxHHCbOCF2AuXXrx1IChR6u1dCQp6MZ87MHB+7wWDgm06bMRxzElKl322q/3pWpebVDU8zUNXULLsy1+Y2hBosA1yxPbPs1qqq0mcswX3KOKS8qZrAsDRga0Z5apYds+5YoGSY5m9VecQxE6GFSwmoyibwKXOytE01iakTQkaYQ2GAmcORM2nfDxzh6cAck9pq7FBmCePWkvPI0XVUcjHCvo9KKAz0hn7k03CZMyELCnkS431OlzXV/d71el1al0thvNBNAIAO6rrwcRlZXKmtb/lm7PapF+7WHUhDShD0yRZKUPeYL0NXafuLMCZ8GVwIbegGkKE1vEEaMix6pervCTJ0X4x0BDJmUGNLaOTBxtjDMaYIK7Nxv6lefW2Cu73TGFLmhXHATtZ/BwnTFPthhF2N5ZXl6L4e8Uy7Wg2MnD5FfsJIih8kTSKIMFNGMfbIZkCYIJ/LlGz8yoaJH8lZhtHfjKWhH2IV0PUz3emSBWb8/8zscF67KI/QT3ArQjNj0OuMjaHbeYY23975lduX70s+tJoZhEPnHahi3Pv1KVkLbu038YdluvBTq3N3h0h9VjUAeOmtKqvtr9n2IRn6fneB/fboeTh1LWS83bv97z/K087z28tcf11PBk/ITUfWr1sy2K6/0WoI7akX6SkCPH4CI5ttLdb1qo/rH97T6J95/XY7j2eBsRrfGhV3YXq153LcXpd/BrfdgRd1FyNzltZnv7e34Ntrexr8ZKvq6/IZjPVgWYv7zfeaDms4NuaSMEnmLxjxfCnp0e8qN2JekH8uL9JCXM3LXJ1IahTjmHK1JXdJaXESIUDEdcQwd+ubug1Mw6xf9yo3vbJh9YAFjBvQBtV6Hdi1Sq5BOxQnEDsh9YjMJVV2x5/PAaLAYZi6ONbSMEFLzNRPInYhh0qfjsXhCCnD01CouLFa1NDShq/Bal42XLA2VhtEaRgaqvIQ8iEdxm2P4/hAu60pMI+0e4wRiQiWAi8ZzgTFGRfNWME04b5RSmGJ4kRcAbFUYce0arbOSBD5WELVg9BNfFyKllHWGp3t/k0NIpZZx71pdvIuFnb6Le+B8HGJdGCylmss5ojPXELlvJDLBduHBefh24lL5AETDeUxQTskx5/eeSIJUpBEVJRDLjxPDUdR9dOCikRuSlDB9OKKFgovzn8rH8cKllalJE2TbABVqW2xCK8LiTP0CUaJEKi3afiKqV6E0L90PxSoTzIX9mN8CV/SCYccB4IuSrb8wuNggpl8HPQF0TdffXkcpRR943jDz9k6vnhDSMSfPjOQg6SfMI/E3zqM3fdxnYl1kEfUKV4EnNCFXMmb4O0CKVAowhIhXWF8GPxcgHPJj41FkwssXLBpnnB8+YsiNampQoTChPJ+V80MhzqZ4eRvEXbenT6EybR4f7lu2MXL9fl+MBGKFUC18CX/7ayRjC4Iq/IOz7A01Y14K4rkdHGgy3uAp9LcNUHlumuavap9cyjNdqVyUzTwqJLWB/NHy0FPT89D6w8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206BD23E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D206BD22E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D206BD22E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502129BE6FE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502129BE6FE314E0401F0A07990586</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023778806</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502129BE70E314E0401F0A07990586</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F9502129BE6FE314E0401F0A07990586</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F9502129BE6FE314E0401F0A07990586</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023782267</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F951091F8C7DCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951091F8C7DCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F951091F8C7ECB30E0401F0A0599396A</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951091FAC69909DE0401F0A05993974</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951091FAC69909DE0401F0A05993974</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951091FAC6A909DE0401F0A05993974</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023744164</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e3046816-37b5-43a6-b253-b79799b26943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00088_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_DECE_CS_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="60784be4-587d-40ac-9e55-f898bed18d2c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="1242e55a-d451-4a75-9689-c5635c3f3733"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HreMb9zsClQRLhlnA2ECySR52RJyG5SxZWPJXPL1KxnsACHZzFZRRand6j7dfXSkC4ai0HI7jEHKSUwVr9dS/zGas6YVNGpa3Zk1tGoAjuZUfVODWg07uOnU7cBXFY+xDDzKOKK8pVqGWdWMmmbaU8t2Lcet1iq22XxWlQdImQgtXCqGqmyikDI3T9tSs5S6MWKEuRRFwFyO3UlneOMKTxcVmNT2xQ5lnjBtLzhPXF3HFR8whCGu4DjSL/QjnwufuRMyp4hnKexz+qyl7veu1+vK2q7E6Vy3DMPQDUcXPj4j8+9q+1uxGXyPBvFu3UU0pgSjkLwiCWoIfBH7Siecxynhi+iD0KZuGjK0BhusYbNKv6v6W4Ic3RcjHYFMGdLYAplFsDsIIAWKQbm/81rq969NcLd3miLKgjiN2Mn6zyABXUEYJ+BrrKisQPf1iGfa1b4A7HoUhxkjKxhJmiQIA1PGKQRkc0OYIJ/PlHz8yoaJHylYBvhPxnKhH2IV0PUz3emROTD+f2Z2OK9dlAcUZtC+TpeL3sa2no3O0/X0aXDVjR/vt4ndy362cgiHzjtQ5bj361Oyltzab2K/x+sVGt8uF8vN+Mfw70QfjAI6THkzhuB6OMl+GgbRHy9j8970nmvBy8Mw5N1Zn99z+NUPRtNfSTC7fx1Ejz+Db4+zH/Nq3756gJsmqS+SK/I01iM9m48ag+f+2L6sPyz5dF6vva6s+pUDHTObBLO/Bn69am/8wEAsHI3rSdTf+s/frj22JTTMVr8Nbxo/zde9fuutpsMajo2FJEyy2QtgXiwlPbyeMhDzQvxzeZEW4mtB7uomUqMYB8rVttwlpcXNhAAR3xXD3K0HTs2wbKdn9q262TBrfaNqmAOjY9Qcx3CaZqFBOxQnELsxDYjMJVV2x5/PAeLIZUB9SLVVnOEFMPWTiD3EkeLRO3E4YspgGgsVN18S0wxeUlja28SkkTFvNutBE2UrVRnF/Jbepp2AQ3qg3dWpYR1p9x1gkhCQAi8ZzgTFGRfNWKJVxkOzskIVCpm4AlKpwq5VbdZ0RqIkBAlVj2I/C6GSLJK8NTrb/Vsawiy35n3FLD99HxZ3+q3og/DxiXRgsp5LELOEMxeRXRTzcdG1w6KL8J3MJ/KQiabylOAdkuNPb1yRJCmJsq+qgF16nxqOIuunRZXJ/BXBJePLq1oovdCBdjGWJaosK9lqleWDaEiNS0V4XUidqU8AZ0KottP4N1C9DKF/6Z4oUZ9kLu3H+DK+oBOOOESCNkq+/MIjYQJMPhI8QfjNV18gRylF3zhs+DlbNxRvCYn40+cGdrH0E+ax+FvH6Vvh52Id5BF1ipcBJ3QuV/JG2H5ADByLsERIWJweBj8X4FzyY2PZ5BILF2yaZRw+/qJIbWqpCOM4o9zrqbnhUC9znHybgPvm9C5Mrsn7S3bDPrxkH4c3E6FcEVJLX/LfzhrJ6YJBlXd5jqWlbsSbUSSn8wN93gN8J9FWx7Quu51Bs9soJbohJNrqOWUDjyppvzO/txz09PQ8tP8F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022A12BCDF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022A12BCAF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022A12BCAF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950239D1E261715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950239D1E261715E0401F0A05990981</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023784127</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950239D1E291715E0401F0A05990981</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9502206A4C8EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9502206A4C8EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9502206A4CBEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023786519</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F950239D1E261715E0401F0A05990981</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950239D1E261715E0401F0A05990981</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023788902</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F9510772571AF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F9510772571AF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F9510772571DF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F9502206A4C8EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F9502206A4C8EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F9502206A4CBEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023786519</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c09203d8-6ef5-46c8-bd4d-8f8aa8b9182e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1242e55a-d451-4a75-9689-c5635c3f3733</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00089_UVTC_PrimaryEmail_maps_to_multi_user_with_one_child_and_node_role_Retailer__Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="7b697d4e-0b75-4df2-9c11-6e14e9587d1d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="d07d53bc-f4d1-4f00-9768-200d9fdcc768"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1WIE8JHooIEpe1m+w20u92XK+M44JLYYDuQ9tdfOzQpsLS3eyUk5Ml45szM8bFPBEwTN+gJgbkkjBrhoGP+E0PYaDcd33JiF1geApHVBpOJVW977dhtu8D1gGmEQmQ4pEJCKjumCxzPAg3LqY/deuD6QcOp+XX3t2k8Yi5UaOVSU7vyNKEiKNJ2zIzTgEFBREBhikUgUTDqXV8FyjOAJSaze7JBWSTk3ZmUi8C2US3CCCcJqiGW2if2js9JJIIRmVIoM47fckaiY77tXa/XtXW9xvjUdgEANvBt5RMJMv1mdo/KzTgKacw261NIGSUIJuQValDXWM5YZPSSKeNEztIPQju2A3RoC+fIQo5Hv5n2e4IC3Rcj7YDkAlpiBp0y2BDHmGOKsPEwDDvmt69NcLN3zCEVMeOp2Fv/HSRMVzhhCxxZoqysRPf1iAfa1T3BKAgpSjJBVvhG02QBERbGHccxya+IUOSLhFGM38iF+pGSZRj9zVhO7G2sCrp9oDsDMsVC/p+Zbc9rE+URJhnuktfv7UcHeOmdoH1xX5+IZfPn4CJPf887BYRt5w2oatxv632yVtx62ySaYVa3p+SUzTkPZxcLBo9Zc+1mDD7PnNtJMp8/XecvA349sfFV+OMm6t0tvvtP7kVrnOeDY7Smlz/7sXs5f0BHr/Zpbzj07+3sev78q3kxYmN5j64e+PEpykb3j0vcf7ipNwBxvZ+cNK9Ae/X8i9zbEzlLbtbIGzbJj7Q9BbLpDY/CXN5+l32ZnQ/9S3r8EDtPnfeatmvYNZaSMMomzxjJcqnpEQ6MczUvKD+XF20hkRUXrsFCa5SQmEqzq3dpaQkyJUAkCtQwN+tzv+GApjvw1MHy+metM+AB5xz0QMP33fZZs9SgDYo9iKeMxkTn0iq74c/nAFEaCEwjzK0Vy9AMC/OTiAMooRHSoTocjAo8ZkrFX1uNmEZMtLgvnLU/XYJ8PWexnJvGDZO39Jb3Yon5lnR7Y+DuSPcQI7IgWOu7JrhQDBdS9WIJV5lMnNoK1ijO1A3AtQgHrtdu2IKkiwRrpHbKoizBtcVsUXTGFpt/14JIFNbh2bg4eB/Wtf+tbIHyiYh2ELqWPlZjxAfuIK8s5OOCG9sFl+F7WUT0+VL9lJygDZLdT+800fyoOKIqKiFXnvuGnaj2fkFVomhFUEX06oZWAq+Of7ccxxLWlrVstcqKAbS0tHEV3lYK59gjjDKlTy9jNsfUrkLYX7oeKtR7mSv7Lr5MzuhIQolTRRejWH7hbTDCQr8NQsXz/KsPj52Uqm8S5/KQ7TRRTwiN+NNXBgqQ9lPmO/W3Zjx6H9eBWFt5VJ3qQSAJneqVvghePiAFYiosUcrF+HbwQwEOJd81Vk2usEjFpkkm8cdfDC1JHRMixDIqw4FZGLZlssApXxY4eHf6I0whxW93ay4+vFt/XV+NlGCl0Kx8yX87W6SgC8KmvsILLB0zV09FlZxOt2T5DeCeMgPXcfuDVqs96J2BbWUGfq9RNXCnku4f5j8tWz3dPw/dfwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212BD779DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212BD778DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212BD778DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062D46194BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062D46194BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023790526</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062D461A4BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022D63040FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022D63040FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022D63041FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023794046</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>F951062D46194BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F951062D46194BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023796565</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F950212A84A529DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F950212A84A529DFE0401F0A059909A1</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F950212A84A629DFE0401F0A059909A1</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F95022D63040FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F95022D63040FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F95022D63041FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023794046</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d07d53bc-f4d1-4f00-9768-200d9fdcc768</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00090_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_DECE_CS_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="1b0076ad-2c46-48aa-9ffb-c67f62ba9695"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="fdcaf9f7-400a-46f1-8973-9c8482868e26"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH69CPkgIiQoShbKb3ra0paXtvlwZZwC3iQOxE9L++msHkgJLe7tXQkKejGfOzBwf+4ShOLL8HmOQcpJQJRh01H+gPZ15LXemme0WaDb2XG3ack1tBi6aYq/pYeSoSsBYBgFlHFHeUS3DtDXD0czmndX0Lc93vIbVtn6pygRSJkILl4ahKkUcUeaXaTtqllI/QYwwn6IYmM+xP+5dXvjC00cVJrV7skFZJky7C86Xvq7jRggYogg3cBLrJ/qez0nI/DGZU8SzFLY5Q9ZRt3vX63Vj3Wwk6Vy3DMPQDU8XPiEj8+9q91u1GcKAzpLNuo9oQglGEXlDEtQl8EUSKr1onqSEL+IPQpu6acjQGhRYw6ZNv6v6e4IS3Rcj7YFMGdLYAplVsFuYQQoUg3J/G3TU71+b4GbvXYoomyVpzA7WfwYJaA5RsoRQY1VlFbqvRzzSru4JYD+gOMoYyeFK0mSJMDDlOoUZKS4IE+QLmVKOXymY+JGKZYD/ZCwn+i5WAV0/0p0BmQPj/2dmu/PaRJmgKIOuZY2HPx7Np9Ws/fzz6eyaRaMCWf3zO+++U0LYdd6Aqse9XR+StebWdtNoHt6Y/PzmjBpDw8y916L59Fc2jd4g1s228zBa9F9uX3tXb+Nx+gCj9blto7dVa1WMwkf3KZyc3r+s+mE0DFAy+WYV5s3Z6geNsl7efFjl43a/8OjzyJpcXCZhfKbfn8XPg7c1u3f166vlj6Y9+UVbl9HgetX/2/v1c9ia0wvmeKabvn67sV4WdvNyMm0Fp26Ax8/Tp857Tbs17BsrSRhn02fAvFpKegQDZSjmhfjn8iItJNRmpau/lBrFOFCuduUuKS1+JgSIhL4Y5mY99BxjYBmWZXiWPTi1zgzbMIdGz3A9z2m1nEqDNigOIPYTOiMyl1TZDX8+B4hjnwENIdXyJMMLYOonEQeIIyWgt+JwJJTBXSJUnJC8GVkYnlNn0XIKuxVO3VUzf1OVq4SP6CjtzTikO8pt3xnWnnLfAiZLAlLeJb+ZIDjjohUrlGc8Mhs5alDIxAWQSg32Lbvt6IzEywgkUD1OwiyCxnKxLBujs82/pSHMSmvZVczKs/dhaYffqi4In5BIBybrOQUxSThyDdlVMR8X7ewWXYXvZSGRR0y0lKcEb5Dsf3pniqRITZNtVRXs2vvQsBdZPyyqThbmBNd8ry9qofNCBbrVWFaosWpkeZ6Vg3ClwqUivC6EztTHgDMhU693yQtQvQ6hf+mWqFEfZK7t+/gyvqBjjjjEgjZKufzCE2EMTD4RAkH34qvvj72Uom8cCn7M1o/ES0Ii/vSxgX0s/YT5WvytkzR8H9eRWDt5RJ3iXcAJncuVvA9ePyAGTkRYIgQsSXeDHwtwLPm+sW5yjYULNk0zDh9/UaQydVSEcZJRHgzU0rCrliVO/roE/93ptzClIm+v2IJ9eMU+Xl6MhW7FSK19yX87a6SkCwZV3uQllo5aiBejSE7nO+q8BXgg0KbQZleI8dD1Wk4t0I4nSNNu1g3cq6T7m/l3y05PD89D918=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951092756727965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9510927566F7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9510927566F7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D20220924DB2E0401F0A07995665</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D20220924DB2E0401F0A07995665</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023798318</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D20220954DB2E0401F0A07995665</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950225FC7991379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950225FC7991379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950225FC79C1379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023800698</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F950D20220924DB2E0401F0A07995665</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F950D20220924DB2E0401F0A07995665</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023804301</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F95023DFA03FEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F95023DFA03FEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F95023DFA042EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F950225FC7991379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F950225FC7991379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F950225FC79C1379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023800698</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F950225FC7991379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F950225FC7991379E0401F0A079902D7</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F950225FC79C1379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023800698</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2ef02e16-f3f8-47c6-8253-f3a5a6d71656</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdcaf9f7-400a-46f1-8973-9c8482868e26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00091_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_Retailer__Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="03932cdc-e91b-4ab5-9203-aea1caebc119"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="8bc3d136-3bf6-4d12-baeb-36487367cd23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("LegalGuardian",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_ChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_ChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID3",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid3",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName3",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondChildUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("LegalGuardian",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("MeetsAgeOfMajority","false");</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondChildUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Child_UserCreate API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID4",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL4",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid4",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName4",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chFxICUUGiXHazvUPb0/blyDgDuCROiG0u++vXDk0KbNvTPRIS8mQ8883M588+YSiJnaDLGOScpFQL+23930ZrUveR2zTcZsMy3AZqGRN30jC8ljPxvCn4TdTQtZAxASFlHFHe1h3Ldg3LM+z6rVMP6lZg+TW35T/p2j3kTIaWLjVL1zZJTFlQpG3rIqdBihhhAUUJsIDjYNy9OA+kZ4BKTHrnZIeySJh35pxngWniWgQY4hjXcJqYJ+aBz0nEgjGZUcRFDi85I9bWX/au1+vaul5L85npWJZlWi1T+kSMzL7qnS/lZohCOk136x6iKSUYxeQXUqAugM/TSOvGszQnfJ68E9o2bUuFNmCDDWy79KtuviYo0H0y0gHInCGDzZFdBhvBFHKgGLS7UdjWv35ugru9tzmibJrmCTta/x0koCuI0wwig5WVleg+H/GNdnVOAAchxbFgZAWXiiYZwsC06xymZHNOmCRfxLRi/NqGyR8pWQb4b8ZyYu5jldDNN7rTJzNg/P/MbH9euyj3KBbQue5Hz34f/cKDenPJvg3iBfFi6+nqZ8zaBYR95x2oatwv62OyVtx62XQTTXrT61bzpjm4uTqPksk/rcu75Bv6fka8Hhk2HrciM0c9P3lkYS+5p8OLxo87ECP0+Hx155x5sE1EMvKno+lKfIk8MQjD8/5lY/SdPp95Kf95dh8t7vsPw3rvKu2ve/V+xtBInKFrDovHzSx+StdR/5nOqP8YNbuQbIen8WK8/EW+nPvJ4tJ/YKNIoJ/ff9xA3W2/1rRfw6GxlISxmDwD5uVS0SPsa0M5L8Q/lhdlIZExLVyDTGkU40C53lG7lLQEQgoQiQI5zN162PJsy+9aXa/btP2GPbBcyx5aXctvtTzP7ZYatENxBLGX0ilRuZTK7vjzMUCcBAxoBLmxSgWeA9M/iNhHHGkhHcnDkVIGt6lUcdtbLqzlxGdZZj2vWJNtFzAnk/VS1y5TfkWv8u6UQ74n3e6t5RxI9wgwyQgofVcEZ5LhjMteLNFK8NiurVCNgpA3QK5EOHDcpmcykmQxKKRmkkYihlo2z4rOmGz37xgIs8I6GtwWB+/duo6/lS2QPhFRDkzVcgpyjHB8BzmtwCsLeb9gb7/gMnxXRESdL9lPnhO8Q3L46ZUmih8VR2RFJeTK89hwENU8LqhKFK0Irohe3dBS4OXx75TjWKLasiZWK1EMwFfSlsvwplQ42xwDFlKftrfpAqhZhTA/dT1UqI8yV/ZDfILP6ZgjDomki1YsP/E2GANTb4NQ8nzz2YfHQUrZNw4b/patF8snhEL84SsDB1j5SfO1/FunefQ6rjdi7eWRdcoHASd0plbqIti+QwqcyrBEKlea7wd/K8BbyQ+NVZMrLFyyaSI4vP9FU5LU1hHGqaA87OuFYV8mC5x8m0Hw6vRHmEKKX+7WDXv3bn24OB9LwUqQXvmS/3Y2SEEXDLq6wgssbX0jn4oyOZ3tyfILwCNlthzHanQ9dzA47TX2ldlyeqdVAw8q6fxh/tOy19Pj89D5DQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502206A54FEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502206A54EEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502206A54EEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107A0A5A81761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95107A0A5A81761E0401F0A0799554A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023806323</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95107A0A5A91761E0401F0A0799554A</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950226D1BA83221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950226D1BA83221E0401F0A07990473</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950226D1BA93221E0401F0A07990473</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023809417</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F95107A0A5A81761E0401F0A0799554A</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:F95107A0A5A81761E0401F0A0799554A</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140513_1400023812789</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F951092D1DE5A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F951092D1DE5A648E0401F0A05993970</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F951092D1DE6A648E0401F0A05993970</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-05-16</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F950226D1BA83221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F950226D1BA83221E0401F0A07990473</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F950226D1BA93221E0401F0A07990473</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023809417</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>F950226D1BA83221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:F950226D1BA83221E0401F0A07990473</con:value></con:property><con:property><con:name>user_oid4</con:name><con:value>F950226D1BA93221E0401F0A07990473</con:value></con:property><con:property><con:name>UserName4</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023809417</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8bc3d136-3bf6-4d12-baeb-36487367cd23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00092_UVTC_PrimaryEmail_maps_to_multiple_users_status_pending_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="74e219b1-7d8a-4f4d-91fe-7bcff6622c82"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="ce628925-0df5-4e4a-a38c-dd51f5809f7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","pending");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkUsIlKkjc2k0XSltot9uXI+MM4G7iQOwkwK8/diApUNrTPRIS8mQ8883M58++YijwLafFGESchFRxuw31H8BTs1wzLrWKVa9oZduztYlXq2mo7uE6eBNzYmFVcRmLwaWMI8obqmWYZc2wNfNybF06l4Zj2qVKvfqqKs8QMRFauJQMVVkFPmVOlrahxhF1QsQIcygKgDkcO6PWoO8ITwflmNTm1RZlljBqzjlfOLqOSx5g8H1cwmGgX+kHPlcec0ZkRhGPI9jl9FhD3e1N07SUXpbCaKZbhmHoRl0XPh4js3O1eZZvBs+l03C77iAaUoKRTzZIghoAn4ee0vJnYUT4PPgktKmbhgytwQpr2CzTc1V/T5Ch+2akA5ARQxqbIzMP9ghTiIBiUJ4e3YZ6/r0JbveOI0TZNIwCdrT+O0hAE/DDBXgayyvL0X0/4ol2Na8AOy7FfsxIAneSJguEgSn3EUzJqk+YIJ/HlGz8yoqJH8lZBvhvxnKl72MV0PUT3emSGTD+f2a2P69tlGfkx9CkP9qzh/KoWpvUNrT9azlc8mHlNy/XX9JGBmHfeQuqGPdufUzWglu7Tenr4OkXj/35uL021oOWxZ42wfoCcBqmtVp/tfl5r1eI+dv+MUtvHpCHUvZ2O1/y6fPbpoyq9xxvJrXen/Jt78I7m9+yl6GLbwIWXF/37y5eHtyLrhU8DZdud56sW68D0u4NCGsng04Fec/TJGHI6I3SIbEvPeti3oeRDj9nrxfD3pnO+khfpMy+WwU3t7778DRrvNe0X8OhMZeEUTx5A8zzpaSH21WuxbwQ/1pepIV42jRzdRZSoxgHytWm3CWlxYmFABHPEcPcrq/rtmGZVsusdK7LVt3uGWXDvDZaRrVeN+xOLdegLYojiJ2QTonMJVV2y5+vAeLAYUA9iLQkjPEcmPpFxC7iSHHpozgcIWUwDoWKm5WkSrEQgMnGeDNrVp1OZhYm1WChKnchH9Jh1JpyiPa0uzw2rAPtfgRMFgSkwEuGM0FxxkUzliiJuW+WElSiEIsrIJIq7Fjlmq0zEix8kFD1IPRiH0qL+SJrjc62/5aGMMusj71xdvI+Lez4W94D4eMR6cBkLW0Qc4QTl5CRF/J5wfZ+wXn4VuwRecBEQ3lE8BbJ4ad3nkiCFCQRFeWQC89jw0FU/bigIpGXEFwwvbiihcKL89/Mx7FEpWUpTpI4G0BValskwutC4kx9BDgWArUeh3+A6kUI/Vv3Q4H6KHNhP8QX8zkdccQhEHRRsuU3HgcjYPJx4Aqir7778jhIKfrGYcVP2Tq+eENIxF8+M7CDpZ8w34u/NIy893GdiLWXR9QpXgSc0JlcyZtg/QkpcCjCEiFdYbQf/FSAU8kPjUWTCyxcsGkSc/j8iyI1qaEijMOYcrerZoZ9ncxw8vUCnHenD2EyLd5driv26eX6MuiPhGIFSC18yX87aySjCwZV3uEZloa6Em9FkZzO9nR5B/BYmruWYXd7Pbtjd419abYrlXbRwINKmh/MHy17PT0+D81/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205DEE6C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205DEE5C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205DEE5C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A16CF4295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A16CF4295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023814776</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A16D04295E0401F0A079905C8</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950D20537FB048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950D20537FB048FE0401F0A059927C1</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950D20537FC048FE0401F0A059927C1</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023817574</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ac36cb2-3283-48c3-a275-53020173907c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcd426a0-46ce-42f5-a670-edfd3d75c9f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce628925-0df5-4e4a-a38c-dd51f5809f7e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00093_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="81152834-697b-4a98-b651-1c139e0846a4"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="132a7479-ce31-45ad-8bd6-6d50523f9c32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pCxRoR5hB0GtV9MiLev1yJ6Qp5NgmNUmh+OtvUmwFRK/nzjDDZLvZfXb3yZOccpDEjt/jHDGBKdGCQUf/J/K8KERgZjRmoWc0QrtltN3WzGh7YehAb2a7nqdrAecZCggXgIiO7lh2w7Bcw65PnLpft3zHqTntxrOuPSDGZWjpUrN0LU9iwv0ibUfPGPEp4Jj7BCSI+wL6497wxpeePigx6d3TDcoiIesuhEh904S1EEEUx7AGaWKemjs+pyH3x3hOgMgYes8Z8o7+vne1WtVW9Rplc9OxLMu0PFP6hBzPj/XuUbkZhQGJ6GbdB4QSDEGM34ACNURiQUOtF88pw2KRfBHaNm1LhTZQDg1oN8ixbn4kKND9MNIOSMaBwRfALoONUIQYIhBp01HQ0Y9/NsHN3gkDhEeUJXxv/WeQEFmimKYoNHhZWYnu5xEPtKt7iqAfEBhnHC/RraJJCiDi2i+GIpzfYC7JF3KtGL+Wc/nDJcsQ/JOxnJrbWCV080B3BniOuPg/M9ue1ybKA4gz1L15XrT7c9wc/l6nwfnbSzy/tJx+nvPGsFNA2HbegKrG/b7eJ2vFrfdN8Rg1TvpXl976YXQ/ddr04vmEnpGeBZ8cHF5NJ7fcifPh5Nrsubet2d0oeosfQ/fh99Q6588L5iXpsP43m7GAekf3wrFR03Ve7r38r8fUEyd5tF7NprOk+XJ9ccue6/OX1n3AF+PpeOJ5J61WaBFytbTSwD5Z0sd792qGz4bjy8tG7yh9DurjJzJvRsy8xm8302a781HTdg27xlISxtnsN4KiXCp6BAPtQs4LiO/lRVlwaESFq58qjeICEaF31S4lLX4mBQiHvhzmZn3huZZje079vOXV+651bjUs+8LqWS3Ps9z6oNSgDYo9iH1KIqxyKZXd8Od7gDDxOSIhYsaSZnCBuP5NxAEQQAvISB4OSjiaUKnizfq8tWgkrYy95HbTW3kRX1hu7nBdu6XijtyxXiQQ25LuxsRydqR7hCBOMVL6rgjOJcO5kL14BctMxHZtCWoEZfIGYEqEfafRdk2OkzRGCqmZ0DCLUS1dpEVnTL75dwwAeWEdnU+Kg/dlXfvfyhZInxArB65qOUNyjOjAHWSXhXxdsLtdcBm+l4VYnS/ZT8Ew3CDZ/fRBE8WPiiOyohJy5blv2Ilq7hdUJQqXGFZEr25oKfDy+HfLcbyC2mstWy6zYgAtJW1MhjelwtnmGMFM6tN6Ql8QMasQ5o+uhwr1XubKvosvEwsyFkCgRNJFK5Y/eBuMEVdvg0DyPP/pw2MnpeybQLk4ZOvH8gmhEH/7yoA+VH7S/Ev+rSgLP8Z1INZWHlmnfBAITOZqpS6C9RekgFSGxVK5KNsOfijAoeS7xqrJFRYh2TTLBPr6i6YkqaMDCGlGRDDQC8O2TBY4xTpF/ofTpzCFFL/frTn/8m59Gt6MpWAlQK988X87G7igC0S6usILLB09l09FmZzMt2T5HeAnZXZ6ttO3BxftfmtHmZ3BB5d3Kul+Mn+2bPV0/zx0/wU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022A12C1EF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022A12C1DF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022A12C1DF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95021923E793C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95021923E793C50E0401F0A0799053D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023821312</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95021923E7A3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950D202F3831891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950D202F3831891E0401F0A059927BF</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950D202F3841891E0401F0A059927BF</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023824208</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>132a7479-ce31-45ad-8bd6-6d50523f9c32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00094_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="c643c18c-bd94-43a7-aa83-437f38451a4a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="a9ad9f85-3c9b-41b6-914d-b2e4a0c299e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSxyrECVBIVJBoKXfTQj+A3kv7sjKOAd8mNthOgP31a4cmBQpd7kpIyJPxzJmZ42NfCRhHrt8SAnNJGDWCdsP8ezKu1Gro0rPq5QqwKvUKsryaO7Y8OKm6qAJA1Q1NIxAiwQEVElLZMF3gVCxQtZzy0C37ZeC79VLdu3wzjZ+YCxVauZSAaaziiAo/S9swE059BgURPoUxFr5E/qDV6/rK04c5JrN5tUGZJeTNmZRz37ZRKcQIRxEqIRbbV/aOz1Uo/AGZUigTjj9yhqJhfuxdLpelZbnE+NR2AQA28GzlEwoyPTebZ/lmHAZ0wjbrG0gZJQhG5B+oQfWwnLHQaEVTxomcxUdCO7YDdGgLr5CFnAo9N+3PBBm6EyPtgOQCWmIGnTxYH08wxxRh46UfNMzz0ya42TvkkIoJ47HYW/8ZJExTHLE5Di2RV5ajOz3igXY1rzDyA4qiRJAUP2iazCHCwnjieEJWXSIU+UJhZOM3VkL9SM4yjP5kLFf2NlYF3T7QnTaZYiH/z8y257WJ8hNGCW7Gry+tH922gK5b83Ag3q7fr9Fj9/KCPDcyCNvOG1DFuD/W+2QtuPWxaeJMg06HBXej+/UEVvv2ff9XMvTW3J16UdxLn6cXPy4AdYP7Mhfdv94Xz8GsNxhfxv1Wu4fj+1Ft3b0pz+/HJHg482I5fAgf+neP7RaGPXfUnf9+nY9mcMlfby/4Ipz1K+MymC7Yit7dEdt9StavI+Z1Ref9Oh2g0eDu5fItHojexa8z6fbc/puA6KI6LAf9F+/ptvFZ03YNu8ZcEgbJ+DdGMl9qegRto6PmBeX38qItJLQmmas/1xolJKbSbOpdWlr8RAkQCX01zM2641WB67gtUK90qreXN7egApwOaIGq5wHPu841aINiD+INoxOic2mV3fDne4Ao9gWmIeZWyhI0w8L8JmIbSmgEtK8OB6MCD5lScYdAOWGQpuR36sScQ5AiCpJZbBoPTD7SR96aSMy3pLsyBO6OdPcxInOCtb5rggvFcCFVLxYwTWTklFJYojhRNwDXIuy7lXrVFiSeR1gjtWMWJhEuzWfzrDO22Py7FkQis/Zvh9nBO1rX/re8BconJNpB6FqusRojPnAHOXkhxwuubhech28lIdHnS/VTcoI2SHY/fdJE86PgiKooh1x47ht2otr7BRWJwpSggujFDa0EXh3/Zj6OBSwtSkmaJtkAalrauApvK4Vz7AFGidKn9ZC9Y2oXIeyTrocC9V7mwr6LL5EzOpBQ4ljRxciWJ7wNBljot0GgeL469eGxk1L1TeKVPGS7idQTQiP+9pWBfKT9lPlJ/S0Z/yz8UKytPKpO9SCQhE71Sl8E6yOkQEyFJUq5GN8OfijAoeS7xqLJBRap2DROJD7+xdCS1DAhQiyhMmibmWFbJjOccj3H/qfTlzCZFH/crStx9G4d9boDJVgxNAtf8t/OFsnogrCpr/AMS8NcqaeiSk6nW7L8AfCrMntu+dZzyjdVUChzTSlztdwuGrhTSfOL+atlq6f756H5Lw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95021923E923C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95021923E913C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95021923E913C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A084F5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A084F5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023827789</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A08505E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95022E2E83C3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95022E2E83C3515E0401F0A0799033C</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95022E2E83D3515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023831618</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a9ad9f85-3c9b-41b6-914d-b2e4a0c299e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00095_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked:clg_Token_Type_ResetPassword_node_role_Retailer_P1_INVALID_STATUS" searchProperties="true" id="938b0c7d-fa18-4a75-a249-e6d412393330"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="f74309c6-5f63-4b5c-b76a-30272144da8a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked:clg");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jD2w+PIEZEiAxJTQXSEr6ckeRF6PUlhxLJtBfX8nEDlCSm94ZZhitV7tnd4+OdMZREjt+j3PIBGFUC/od/V+3Di1YIsdoYi80XK+OjXZ96RpOC1pey/NssG1dCzjPIaBcICo6umPZrmF5hl2fO3W/bvn1Rs1u2j907Q4yLkNLl5qla5skptwv0nb0PKM+Q5xwn6IEuC+wP+tdj33p6aMSk94926EsEmbdlRCpb5q4FgKGOMY1zBLzzDzwOQu5PyMRRSLP4CVnyDv6y97n5+fac73Gssh0LMsyrbYpfUJOos9691O5GcKALtlufYEoowSjmPxCCtQ1iBULtV4csYyIVfJGaNu0LRXagA02sO3Sz7r5mqBA98FIByAzjgy+QnYZbApLyIBi0G6nQUf//LEJ7vbOM0T5kmUJP1r/HSSga4hZCqHBy8pKdB+PeKJd3TPAfkBxnHOyhomiSYowcO0mgyXZjAmX5Au5Voxf23D5IyXLAP/NWM7MfawSunmiO30SARf/Z2b789pFuUNxDt2H+3TQ+zoYbyPiNVb3o9mv3tVttGa91O0UEPadd6Cqcb+sj8lacetl08RarH+0H5tPCxE0vniXk38Wj3Z/cL3tD8zz5soebsV8enNF2aVrXS2vBPt6j8eDm+3t8tbb/ry73LjPFN1/cde9qftpsL4dje7ufzQodubDy+35djLKB4vvwyBiQTLuj89vrydP7ng4jkab74/RPGgMrsOvN6JufzF7bbEY3/y66C+9kSmCT5Pvzrz9rTdi/KGVNNNFMuGd15r2azg0lpIwyx8eAYtyqegR9LWhnBcS78uLspDQWBaufqo0igugQu+qXUpa/FwKEAl9Oczdetj2bKvhDG3HGg4brfbAci17aPWsZrvt1d12qUE7FEcQLxhdEpVLqeyOP+8DxInPgYaQGWuW4xVw/Z2IfSSQFtCpPByMcpgzqeK2s5GiTPInz21EdvoYWhZ68HgYx7o2YeIb/Zb1lgKyPe1255ZzoN1TwCQloAReMZxLinMhm/GE1rmI7doa1Sjk8grIlAr7jtvyTE6SNAYF1UxYmMdQS1dp0RqT7/4dA2FeWKeDeXHy3izs+FvZA+kTEuXAVS3nIOcIJy4hpyzk7YK9/YLL8L08JOqAyYaKjOAdksNPrzxRBKlIIisqIVeex4aDqOZxQVWicE1wxfTqipYKL89/txzHE6o91fL1Oi8G0FTalsnwppQ425wBzqVAbefsJ1CzCmF+6H6oUB9lruyH+HKxojOBBCSSLlqx/MDjYAZcPQ4CSfTNR18eByll3wRsxCnbRSzfEArxu88M7GPlJ8038u+ZZeHruE7E2ssj65QvAkFopFbqJti+QQrMZFgipYtl+8FPBTiV/NBYNbnCIiSbHnIBb3/RlCZ1dIQxy6kI+nph2NfJAqfYpuC/Ov0RptDil8t1w9+8XBfX45lUrATplS/5b2eDFHTBoKs7vMDS0TfyrSiT02hPl18AHkmz1Xeshltvndt1d1hJs9duO80Lr2rgQSXdP8x/WvZ6enweur8B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206438C134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D206438B134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D206438B134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062F120FF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062F120FF689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023834714</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062F1210F689E0401F0A07995349</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951062F1228F689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951062F1228F689E0401F0A07995349</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951062F1229F689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023837931</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f74309c6-5f63-4b5c-b76a-30272144da8a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00096_UVTC_PrimaryEmail_maps_to_multiple_users_status_suspended_Token_Type_ResetPassword_node_role_Retailer_P1_INVALID_STATUS" searchProperties="true" id="b270ab01-2f2e-402b-b2a2-c38acc5f2402"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="b01099f7-31f9-4d98-b0d8-514de57cbbe5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","suspended");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_STATUS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj6uQO5eoILFAz7K9US7d0pcj40yIaeLQ2AHKr187NClQ2tM9EhLyZDzzzcznzz5nKI4sr80YpJwkVOl3m+q/aDazke8Yml2vzzTHbFQ1BNZMs2tBMKu7btV3sKr0GcugTxlHlDdVyzAdzXA10x5btmcbnmNXHNd5VJV7SJkILVwqhqps4ogyL0/bVLOUeglihHkUxcA8jr1R+/rKE54eKjCprfMdyjxh2go5X3q6jis+YIgiXMFJrJ/rBz7nPvNGZE4Rz1J4zemzpvq6d71eV9Z2JUnnumUYhm40dOHjMzL/prbOis3g92mQ7NYdRBNKMIrIFklQ18DDxFfa0TxJCQ/jD0KbumnI0BpssIZNh35T9bcEObovRjoAmTKksRCZRbAhBJACxaBMhv2m+u1rE9ztHaeIsiBJY3a0/jtIQFcQJUvwNVZUVqD7esQT7WqdA/b6FEcZIyu4kTRZIgxMGaQQkM0VYYJ8PlPy8SsbJn6kYBngvxnLub6PVUDXT3SnS+bA+P+Z2f68dlHuUZRB665WGy/u592blRs7d6kxRczdTqvdyyBp5hD2nXegynG/ro/JWnLrddMdm3aSn6ga8i3z7QladKJgGi5uug7cbR966++PdD5d/Qxx/+lXpz7RX/xlo5rW77c1q2G5weTn78frx/n6ZTgIgjM+jh9ujfn06vf1Q3o5GLO58ft5UFvc1EdXbFa17e/3U6u3mVj/TAazuEMHv+zeNHAHq9kP2PLqxdLfVtHa3lQn+vBsc2PY9+H3h23HaTTSy8Xwudd8q2m/hkNjIQmjbLYAzIulpEe/q1yIeSH+ubxIC/G1IHf1llKjGAfK1ZbcJaXFy4QAEd8Tw9ytLxquYZnWj27dqXfbPaNnOIZ5YbQNt9EwGm230KAdiiOInYQGROaSKrvjz+cAcewxoD6k2irJcAhM/SRiF3Gk9OlQHI6EMhgnQsVTWJAgrFuN58ixKApM+sKNp3qoKjcJv6W3aTvgkO4ptzM2rAPlHgImSwJS3iW/mSA446IVz2iV8cisrFCFQiYugFRqsGc5dVdnJF5GIIHqceJnEVSW4TJvjM52/5aGMMutw944P3cflnX8reiA8PGJdGCylh8gpggnriC7KOTjgt39govw7cwn8niJdvKU4B2Sw09vLJH0KCkiKiogl57HhoOo+nFBZSJ/RXDJ8/KCFvouTn+rGMczqjxXstUqywdQk8qWivC6EDhTHwHOhDy9jJMnoHoZQv/S7VCiPspc2g/xZTykI444xIIuSr78wtNgBEw+DfqC5puvvjsOUoq+cdjwU7ZOJF4QEvGnjwzsYeknzAPxt05S/21cJ2Lt5RF1ivcAJ3QuV/IeePmAFDgRYYkQriTdD34qwKnkh8ayySUWLtg0yzh8/EWRitRUEcZJRnm/q+aGfZXMcfKXJXhvTu/C5Er8erVu2IdX68P11UjoVYzU0pf8t7NGcrpgUOUNnmNpqhvxUhTJ6XxPlV8BvhNm2zZNx7CrttMthbkmhNnq1coGHlTSemd+b9nr6fF5aP0B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95023311404634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95023311403634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95023311403634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212BD848DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212BD848DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023842381</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212BD849DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95023311418634DE0401F0A079902E7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95023311418634DE0401F0A079902E7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95023311419634DE0401F0A079902E7</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023844859</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_STATUS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b01099f7-31f9-4d98-b0d8-514de57cbbe5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00097_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_ResetPassword_node_role_Retailer_P1_NOT_FOUND" searchProperties="true" id="74b522ab-2ffb-4cd5-9a53-a654f3ff4c94"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="e531362f-fa6a-4ba4-ac4a-c0c0b1d445a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4hyH1chHwRKooIEFNrcFm6B3n69rFxnAHcTG2IHQn/92qFJgdJu70pIyJPxzJmZ42OfcRRHjt/mHBJBGNWC86b+9/S53sD1Rmh4DQ8MF2zH8Dz0bNgW1JBnN6pQf9a1gPMUAsoFoqKpO5btGlbNsKu3TtWvWr7rVRpO9UnX7iDhMrR0qVi6lsUR5X6etqmnCfUZ4oT7FMXAfYH9SXtw7UtPHxWY9NbZFmWeMGnNhVj4pokrIWCIIlzBLDbPzD2fs5D7EzKjSKQJvOUMeVN/27teryvraoUlM9OxLMu0PFP6hJzMfuitk2IzhAGdsu26iyijBKOIvCIFagBizkKtHc1YQsQ8/iS0bdqWCm1Ahg1su/SHbr4nyNF9M9IeyIQjg8+RXQQbwxQSoBi03+Ogqf/43gS3e28TRPmUJTE/WP8ZJKAriNgCQoMXlRXovh/xSLtaZ4D9gOIo5WQFQ0WTBcLAtZsEpiS7JlySL+RaPn4t4/JHCpYB/pOxnJm7WCV080h3zskMuPg/M9ud1zbKHYpSaPUXqQhGfev6Cb+6f7nX4agbp307fB3hZg5h13kLqhz32/qQrCW33jZdTm46P93R4C50cNzp9quX97Ob115wZ8fJGt9X6/c1ej4OQsux8Pil1z1NxGWE3ScWWaPNI978apwu+5xfDkevjRM6cHEabILBC714eOgvZ3g4zH7z6sVDuP7pjGrJ1dKS9Fu3O2wU3L3cLMwX7Dz1MLkfkNEwfXwgj91G/4EPl+j+hA+n7IJdJbXr7Iax7PRq/Nh8r2m3hn1jIQmT9PkFsCiWih7BudaX80Lia3lRFhIa09zVXyiN4gKo0Ftql5IWP5UCREJfDnO77ns1y7GdttVodGq9erdnuZbdt9pWzfMsz+sUGrRFcQCxy+iUqFxKZbf8+Rogjn0ONITEWLEUz4HrX0Q8RwJpAR3Lw8Eoh1smVdxevSyFw9zYi+25Xcs8O81sam+eG7o2ZOIX/ZW0pwKSHe12by1nT7vHgMmCgBJ4xXAuKc6FbMYSrVIR2ZUVqlBI5RWQKBX2HbdRMzmJFxEoqGbMwjSCymK+yFtj8u2/YyDMc+u4d5ufvE8LO/xW9ED6hEQ5cFVLB+Qc4cglVC0K+bzg2m7BRfh2GhJ1wGRDRULwFsn+p3eeKIKUJJEVFZBLz0PDXlTzsKAyUbgiuGR6eUVLhZfnv1WMY4kqy0q6WqX5AE6VtiUyvCklzjYngFMpUJtb9g9Qswxhfut+KFEfZC7t+/hSMacTgQTEki5avvzG42ACXD0OAkn07Lsvj72Usm8CMnHM1o3kG0Ih/vKZgX2s/KT5Rv6tWRK+j+tIrJ08sk75IhCEztRK3QSbT0iBmQxLpHSxZDf4sQDHku8byyaXWIRk03Mq4PMvmtKkpo4wZikVwbmeG3Z1MscpNgvw350+hMm1+O1yzfinl+vD4HoiFStGeulL/tvZIDldMOjqDs+xNPVMvhVlcjrb0eU3gB+k2en37V6n7lr1finNp1Kaq+1q2cC9SlofzB8tOz09PA+tfwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022FF1EB7406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022FF1EB6406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022FF1EB6406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A088B5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A088B5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023848822</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A088C5E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F95023DFA0A0EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F95023DFA0A0EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F95023DFA0A1EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023851695</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e531362f-fa6a-4ba4-ac4a-c0c0b1d445a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00098_UVTC_PrimaryEmail_maps_to_multiple_users_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_P1_NOT_FOUND" searchProperties="true" id="c9d70a4d-3103-408f-a50b-5938df3307ad"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="fad4aafa-de2a-4107-932f-4f1c9dae4e9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1chHyRAooLElrKl2w9a2LbblyvjTMBLsEPsQOivv3ZoUqC0t3slJOTJeObMzPGxTzhaxE7Q5RxSQRjVBr22/o/T8lue47kGroee4UYRMny3AYbt1n3L87yG72NdG3CewYBygaho645lu4blGXZ97NSDuhV4Xs1v1Z907R5SLkNLl5qla/kipjwo0rb1LKUBQ5zwgKIF8EDgYNS9ugykZ4BKTHrnZIuySJh2ZkIkgWniWggY4hjXMFuYJ+aez0nIgxGZUiSyFF5yhrytv+xdr9e1db3G0qnpWJZlWr4pfUJOpl/1zpdyM4QDGrHt+hRRRglGMXlGCtQViBkLtW48ZSkRs8U7oW3TtlRoA3JsYNulX3XzNUGB7pOR9kCmHBl8huwy2B1EkALFoP26G7T1r5+b4HbvOEWURyxd8IP130ECuoKYJRAavKysRPf5iEfa1TkBHAwojjNOVnCtaJIgDFwbphCR/JJwSb6Qa8X4tZzLHylZBvhvxnJi7mKV0M0j3emRKXDxf2a2O69tlHsUZ9CZhI/sbDI+5+l1RvPLX3/ulsP5DJPTZrddQNh13oKqxv2yPiRrxa2XTfen55vxw2CTz1zOn3Az2Vyt8SqP18gZUqfrWSQKb25vGPz8DU9Pv1qN0eaMztIZu//z8I0MHlr52cX58je7HTbYl2GfTIePXrrMLujUvFz96NtDa80pb/bqc3xz+c2c306mtxcXUfbj+qG1adF4jCfX9mazmXb9ZLn65iRs1byN58P7L834XFytY5tMmvy05z+fR7ft15p2a9g3lpIwyiZ/AItyqegx6Gl9OS8kPpYXZSGhERWuQaI0igugQu+oXUpagkwKEAkDOcztuu97ttVw+rbj9fuNln9muZbdt7pW0/e9uuuXGrRFcQDxlNGIqFxKZbf8+RggXgQcaAipsWIZngHXP4jYQwJpA3onDwejHMZMqrhtTwQKvfrEmz+nduTMp2t4zmOaOLp2zcQNvUm7kYB0R7vdseXsafcdYJIQUAKvGM4lxbmQzViiVSZiu7ZCNQqZvAJSpcKB47Y8k5NFEoOCai5YmMVQS2ZJ0RqTb/8dA2FeWO/OxsXJe7eww29lD6RPSJQDV7V8BzlHOHIJuWUh7xfs7RZchu9mIVEHTDZUpARvkex/euWJIkhFEllRCbnyPDTsRTUPC6oShSuCK6ZXV7RUeHn+O+U4lqi2rGWrVVYMoKm0LZXhTSlxtjkCnEmB2ozZHKhZhTA/dT9UqA8yV/Z9fJmY0ZFAAhaSLlqx/MTjYARcPQ4Gkuj5Z18eeyll3wTk4pjtNJZvCIX4w2cGDrDyk+ah/FuzNHwd15FYO3lknfJFIAidqpW6CTbvkAIzGZZI6WLpbvBjAY4l3zdWTa6wCMmmSSbg/S+a0qS2jjBmGRWDnl4YdnWywCk2CQSvTm/CFFr8crnm/N3L9fHqciQVa4H0ypf8t7NBCrpg0NUdXmBp67l8K8rkdLqjyy8AD6TZcmzH/96Xsly33V1ptrxWo2rgXiWdN+a3lp2eHp6Hzr8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502129BF8AE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502129BF89E314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502129BF89E314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062F125FF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062F125FF689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023854953</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062F1260F689E0401F0A07995349</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F9510764C8603F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F9510764C8603F80E0401F0A059930AD</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F9510764C8613F80E0401F0A059930AD</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023857567</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fad4aafa-de2a-4107-932f-4f1c9dae4e9e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00099_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="67206761-34f4-4378-89f2-88d4f6d98624"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="0b83b7e5-a456-47b2-a396-fec17be95280"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1chTgJtiAoShUWlX+wC7bb7cuU6QzCb2CF2Etpff+3QUKAft3slJOTJeObMzPGxTwROYjfoCQGZpJwZo0HH/KftHIfgE99y8AOxmh45stptcC04wt4RcpHTbjmmMRIihxETEjPZMZW1aaGW5Xgz1ws8J0Buo+mh36ZxC5lQoZVLA5nGOomZCKq0HTPPWMCxoCJgOAERSBJMe1eXgfIMcI3J7J5sUFYJs+5CyjSwbdIIgUAckwbhiX1i7/mchCKY0ohhmWfwnDMUHfN5b1mWjdJr8CyyXYSQjdq28gkFjb6a3S/1ZghHbM436z5mnFGCY/qENagrkAseGr044hmVi+Sd0I7tIB3agjWxiNNkX037JUGF7pOR9kBmAltigZ062ATmkAEjYNxMRh3z6+cmuNk7yzATc54l4mD9d5CAFRDzFEJL1JXV6D4f8Y12dU+ABCNG4lzQAq41TVJMQBg/MpjT9SUVinyhMKrxG2uhfrRmGZC/GcuJvYtVQbff6M6ARiDk/5nZ7rw2UW5xnEP3GwvXt2l6PWgt0Vk/STktYXk3jr6vRKeCsOu8AbUd9/P6kKxbbj1viq/Olz84OV7j4tfQPbvzE6/t/BqH9IzfTUV56xTu9Ni5vLh18DTEP/v5+E9K7HvpefPRY+tuUd4lv33fXxXtJXzxy+WS9paT1un87OlP7+bi9oJfsGH2tJrS0/GKl+fXN1eXvSy+FNk3HPfvUTie3f+86bXE+e+b2QO6js7bRX9yP26WX/hN4Zy606tsVXpeOHMejknnpabdGvaNtSRM84clEFkvNT1GA2Oo5oXlx/KiLTS05pVrkGqNEhKYNLt6l5aWIFcCRMNADXOzHqpDg9rO0B+g0/6ph76jJnKGqIda7bbXPurVGrRBcQCxz9mc6lxaZTf8+RggSQIBLITMKnhOFiDMDyIOsMTGiE3U4eBMwIwrFffnkUCreeZjP1xEyTLMIxHFZdM0rrkcs3HWm0vIdpS7OUPunnJPgNCUgpZ3zW+hCC6kasUKF7mMnUaBGwxydQFkWoMDt+m3bEGTNAYN1E54mMfQSBdp1RhbbP5dCxNRWSffZ9W5e7esw291B5RPSLWD0LWcgpoivLqCUNCqC3m/4NZuwXX4Xh5SfbxUO2VGyQbJ/qcXlmh6bCmiKqohbz0PDXtR7cOCtonCgpItz7cXtNJ3dfq79ThWuLFq5EWRVwM41sqWqfC2EjjHngLJlTw9zvgfYPY2hP2p22GL+iDz1r6PL5cLNpVYQqLoYlTLTzwNpiD002CkaL7+7LtjL6Xqm4S1fMvWj9ULQiP+8JFBAqL9lPmH+it5Fr6M641YO3lUneo9ICmL9ErfA4/vkIJwFZYq4eLZbvC3AryVfN+4bfIWi1RsesglvP/F0IrUMTEhPGdyNDArw65KVjjlYwrBi9OrMJUSP1+ta/Hu1Xp3dTlVepVgc+tL/9vZohVdCJj6Bq+wdMy1eimq5CzaUeVngAfCjAYuanl+6wg1/eGuMLvH/Rcu71XSfWV+bdnp6eF56P4L</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D2053857048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D2053856048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D2053856048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091F8D0BCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091F8D0BCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023861427</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091F8D0CCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F950212BD883DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F950212BD883DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F950212BD884DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023864202</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0b83b7e5-a456-47b2-a396-fec17be95280</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00100_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_forcedeleted_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="d33cc190-6b3c-4580-80c6-fad3e306f9d5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="04631111-54c2-42d5-8f62-db85d6bb4c59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxVypZCoIGUDbdmlN6C7l5cj15mA28QJsQNpv/7YoUmBXk73kZCQJ+OZNTPLyz5iKI4sz2cMMk4Sqgz7HfUfZLctB4UtDbeMR80JXKy1cRs010ZmCIdgOI6tKkPGchhSxhHlHdUyTEczmpppTy3bs03PaDfaVutBVf5AxkRo4dIwVKWII8q8Mm1HzTPqJYgR5lEUA/M49ib++cgTnh6qMKndozXKMmHWnXOeerqOGwFgiCLcwEmsH+lbPkcB8yZkRhHPM3jLGbCO+rZ3tVo1VnYjyWa6ZRiGbri68AkYme2r3b1qMwRDGibrdQ/RhBKMIvKKJKhz4PMkUPxolmSEz+MvQpu6acjQGhRYw6ZD91X9PUGJ7oeRtkBmDGlsjswq2BhCyIBiUG7Gw466/7MJrvdOM0RZmGQx21n/HSSgS4iSFAKNVZVV6H4e8ZN2dY8Ae0OKo5yRJVxImqQIA1OuMghJMSJMkC9gSjl+pWDiRyqWAf6bsRzpm1gFdP2T7vTJDBj/PzPbnNc6yh8U5dAd2Y/GgXWasJjfTH/FbvhiPz3rwdnFqd8pIWw6r0HV435b75K15tbbpqsC6Tx9deO2Hx1cNO9OB6JXOAif0OmjM5zN7p5eTQfPWgtAxeDs8dod9s8e7u7vrZfn0a17d7FY4Bsr6D/7i8Vq79W5S3P7lcQHzmhw0Du5vu2H97Oxe3LbzJo3RHdeepPiYFXgVzu+fD487Y1PTrK0GGVLo7XUSe7HcSu9OjB/X+itvSc3v+5dnznn+r3JSBs9YNZ5r2mzhm1jJQmT/PEJMK+Wkh7DvnIs5oX49/IiLSTQwtLVS6VGMQ6Uq125S0qLlwsBIoEnhrleH7tNw7KOj83BoO0Yh8cDwzHMY8M3Wq5r2L5dadAaxQ7EXkJDInNJlV3z53uAOPYY0AAybZnkeA5M/SZiH3GkDOlYHI6EMpgmQsWtcLmaLZAzx4fZod065O4yB7CEBl8k/JJeZn7IIdtQbmdqWFvKPQZMUgJS3iW/mSA446IVC7TMeWQ2lqhBIRcXQCY12LOcdlNnJE4jkED1OAnyCBrpPC0bo7P1v6UhzErreDAtz92XZe1+qzogfAIiHZis5ReIKcKHK8jwmlUhXxfc3Cy4Cu/nAZHHS7STZwSvkWx/emeJpEdNEVFRBbn23DVsRdV3C6oTBUuCa57XF7TQd3H6u9U4FqixaOTLZV4OoCWVLRPhdSFwpj4BnAt5epkmz0D1OoT+o9uhRr2TubZv48v5nE444hALuijl8gdPgwkw+TQYCpoXP313bKUUfeNQ8M9svUi8ICTibx8Z2MPST5ivxN8qyYL3cX0SayOPqFO8BzihM7mS98DLF6TAiQhLhHAl2WbwzwJ8lnzbWDe5xsIFmx5zDl9/UaQidVSEcZJTPuyrpWFTJUuc/CUF793pQ5hSid+u1oJ9ebXenY8mQq9ipNa+5L+dNVLSBYMqb/ASS0ctxEtRJKezDVV+A/hBmE3LbzfdluX234W5KYTZ9c26gVuVdD+YP1o2erp7Hrr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212A859829DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212A859729DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212A859729DFE0401F0A059909A1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022FF1EE8406FE0401F0A079903A3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022FF1EE8406FE0401F0A079903A3</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023867332</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022FF1EE9406FE0401F0A079903A3</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F951077257EFF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F951077257F0F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20140513_1400023870474</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>04631111-54c2-42d5-8f62-db85d6bb4c59</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_PERM"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UVTC_PrimaryEmail_valid_Role_DECE_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="76abf2d5-b7e1-4cf1-ba3e-72e98ceeb5bb"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="10e849d4-77d8-4436-9c50-50b7424e9b43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DECE"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="151f591a-e568-4449-b64e-8f4cc4f04b49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkQrgkAiQWyiFdaHeBdo94OTLOQLxNHBo7XPrrjx1IChR62CMhIU/GM9/MfP7sBkNRaLltxiDhJKaK122q/5RrGKyqWdNqhlnXbMe0tFkdI61eqzhGBWFkzi1V8RhLwaOMI8qbqmWYtmZUNLM8scpu2XRNu1RznKmqvEDCRGjhUjJUZROFlLlZ2qaaJtSNESPMpSgC5nLsjtvDgSs8XZRjUluNHcosYdIKOF+6uo5LPmAIQ1zCcaQ39COfhs/cMVlQxNME9jl91lT3e9frdWldLsXJQrcMw9ANRxc+PiOLW7V1k28G36PzeLfuIBpTglFI3pEENQQexL7SDhdxQngQXQht6qYhQ2uwwRo2bXqr6h8JMnRXRjoCmTCksQCZebARzCEBikF5HnlN9fa6Ce72ThJE2TxOInay/jNIQFcQxkvwNZZXlqO7PuKZdrUagF2P4jBlZAWPkiZLhIEpPxKYk82AMEE+nynZ+JUNEz+Sswzwn4yloR9iFdD1M93pkgUw/n9mdjivXZQXFKbQehgY1nB7tzKfzWhF1rPAeplMOl7H8e6bGYRD5x2oYtz79SlZC27tN/FFez6ifmdEK8F68r3tPPX90KcOjvvTXgAPj9XeIJi82qNt33/Hej8d3jv9BxQ+4i48LTGFKdarQ/v3tvr4ehN9fzf6PajcMe8bf5iGxsS0Jp3prP8y/ll/n8Pbcrzyf26BsLv018B5TZJO/2GRBu9exGfDKk0726feX5th0PWrN/1wMJ4OaolokXM/f7bpr0Xzo6bDGo6NuSSM09lvwDxfSnp4XaUn5oX41/IiLcTX5pmru5QaxThQrrbkLiktbioEiPiuGOZu3XMqRtcyqna5WzPLdu/esA2zZ7SNiuNYtU4l16AdihOInZjOicwlVXbHn68B4shlQH1ItFWc4gCY+kXELuJI8ehIHI6YMpjEQsXBqK827DcKmCA8cuJki8Xhd2yuKo8xf6JPSXvOITmQbntiWEfSPQJMlgSkvkuCM8FwxkUv3tAq5aFZWqEShVTcAIkUYdey6xWdkWgZgkSqR7GfhlBaBsusMzrb/Vsawiyzju4n2cG7WNfpt7wFwscn0oHJWr6BGCOcuYOMvJDLBVcOC87Dt1OfyPMl+skTgndIjj990ETyo+CIqCiHXHieGo6i6qcFFYn8FcEF0YsbWgi8OP6tfBxvqPRWSlerNBtATUpbIsLrQuFMfQw4Ffq0ncSvQPUihH7V9VCgPslc2I/xpTygY444RIIuSra84m0wBibfBp7g+ebah8dRStE3Dht+ztYJxRNCIv7ylYFdLP2E+Yf4W8eJ/zGuM7EO8og6xYOAE7qQK3kRbC+QAsciLBHKFSeHwc8FOJf82Fg0ucDCBZtmKYfLXxQpSU0VYRynlHtdNTMcymSGk2+X4H44fQqTSfH+bt2wi3fr38PBWAhWhNTCl/y3s0YyumBQ5RWeYWmqG/FUFMnp4kCW9wBPldmyOvdOuV43nU71UJkNp+oUDTyqpPXJ/Nly0NPT89D6Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022CE938919C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022CE938819C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022CE938819C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D20643D7134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D20643D7134FE0401F0A059927C5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023873650</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D20643D8134FE0401F0A059927C5</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>10e849d4-77d8-4436-9c50-50b7424e9b43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>151f591a-e568-4449-b64e-8f4cc4f04b49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UVTC_PrimaryEmail_valid_Role_Portal_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="3ce180dd-b3ac-45d4-bdd0-cb3f5d8dd76c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfnRK35V2hBkUVDwiCqhHv9xJ00CjbYJJStFff5NiKyB6PXeGGSbbze6zu0+e5IiDLHXCDueICUyJ1u+29H+cQ9e1QOAb8UHUNDzHi43AdR3jENluHEX+9CAKdK3PeY76hAtAREt3LNszLN+w3Ynjhq4d2s2G13Qfde0OMS5DS5eGpWvLLCU8LNO29JyRkAKOeUhAhngoYDjuDC5D6RmCCpPePlqhLBOydiLEPDRN2IgRRGkKG5Bm5pG54XMU83CMZwSInKH3nDFv6e97i6JoFG6DspnpWJZlWoEpfWKOZ3t6+1e1GcV9MqWr9QkglGAIUvwGFKgBEgmNtU46owyLJPsitG3algptoCU0oO2RPd38SFCi+2GkDZCMA4MnwK6CjdAUMUQg0m5H/Za+97MJrvZOGCB8SlnGt9Z/BwmRBUrpHMUGryqr0P084o52tY8QDPsEpjnHC3SlaDIHEHHtmqEpXl5iLskXc60cv7bk8ocrliH4N2M5MtexSujmju508Qxx8X9mtj6vVZQ7kOaojfJe554Vg4N43wkeDuj9BB6fHaOL2yFvlRDWnVeg6nG/r7fJWnPrfdNx8CyOX6In3xkMKSr8P9feXVB05nYfL0BvOPl9fvty8jSKrjN2d69K6r/1luR5NugUMX50Hm+wn1M4HrhRvvj1FuEFf43PRxRM4cXNZJLNhuStS6YPb92Uju/OAnHjw4IcDPwkcpv7o+YDy60Rnz7c5BfD82XCEgae9s/whT/9lTadp553Nr7qRWC4nJwUT7z1UdN6DZvGShLGefSEoKiWih79rnYq5wXE9/KiLDg2pqVrOFcaxQUiQm+rXUpawlwKEI5DOczV+jTwLcf1mz2v2bWPPadneZZ9anUsPwis4NCvNGiFYgviCSVTrHIplV3x53uAMAs5IjFixoLmMEFc/yZiFwig9clIHg5KOJpQqeJ28sKsIvNYHkWzJCgKQd5eJWMTXbuiYkiGrDMViK1JtzexnA3pHiGI5xgpfVcE55LhXMhevIBFLlK7sQANgnJ5AzAlwqHjNX2T42yeIoXUzGicp6gxT+ZlZ0y++ncMAHlpxRzOKRMgtcvz92V529+qTkifGCsHrko6RnKaaMdVZFX1fF23v153Fb6Tx1gdM9lWwTBcIdn89MEWRZOaKh+FVcjrDduGjeDmdl11vniBYU37+r6Wci/FoF0N5wU0Xhr5YpGX4zhUQsdkeFPqnW2OEcylWr1O6DMiZh3C/NFlUaPeylzbN/HlIiFjAQTKJHm0cvmDl8IYcfVS6EvWL3/6DNlIKfsm0FLssp2k8kGhEH/75oAhVH7SfC3/Csrij3HtiLWWR9YpnwcCk5laqWvh9QtuQCrDYqljlK0H3xVgV/JNY93kGouQbIpygb7+oimBaukAQpoT0e/qpWFdNEuc4nWOwg+nT2FKYX6/aZf8y5v2z+ByLOUrA3rti//b2cAlXSDS1YVeYmnpS/lwlMnJbE2k3wF+0mnb6XR6gX8aWH6t04eBWp3WDdyopP3J/Nmy1tPt89D+Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212AAE96F905E0401F0A079905EF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212AAE95F905E0401F0A079905EF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212AAE95F905E0401F0A079905EF</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502358E48D1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502358E48D1B42E0401F0A05990975</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023877422</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502358E48E1B42E0401F0A05990975</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UVTC_PrimaryEmail_valid_Role_Retailer_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="26e704e3-7163-43a2-bc58-d522ea7b7d2c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1fBSQgfiQoShdJNl7Z8be+WlyvXGcBt4kDsBNpfv3ZoUmBpb/dKSMiT8cyZmeNjn3EchbbX4RwSQWOm+b2W/u+81gSwzYYR2HNsOHXXMbBdbxqBYzbdeaPmzu2mrvmcp+AzLjATLd02Lccwa4ZVndpVr2p5tl2xrPpM1+4g4TK0dKmYuraNQsa9PG1LTxPmxZhT7jEcAfcE8Sad64EnPT1cYNLbZzuUecKkvRRi5SFEKgEQCENSIXGEztCBz1nAvQldMCzSBF5zBrylv+7dbDaVTbUSJwtkm6aJTBdJn4DTxVe9/aXYDIHP5vFu3cUsZpTgkL5gBeoaxDIOtE64iBMqltE7oS1kmSq0AVtiEMthX3X0liBH98lIByATjg2+xFYRbAxzSIAR0H6O/Zb+9XMT3O2dJpjxeZxE/Gj9d5CAZRDGKwgMXlRWoPt8xBPtap8B8XxGwpTTDG4UTVaYANeGCczpdkC5JF/AtXz82pbLHy1YBuRvxnKG9rFK6OhEd3p0AVz8n5ntz2sX5Q6HKbRH383FaNZfnLNOr/9wy16WfYt06OD83m/lEPadd6DKcb+uj8lacut10+xuk9F/nJdf6AGNxiP2o3YbNxsmJPbt5Tc+3oqfQzzuo0FTfBObbmY/Xffp7MaOzPVDPBv4k159OL1qfL987Pnul6v+iETdR/qjhqbpFO7XKGCPk2t3hDti2A/H9qhbd89feN16mckDU3WeBkAe/PtkfnmL1na4uHMB8Gw8sYbZl+njDxje3axvwun9y6W4urogrbea9ms4NBaSMEkfHoGIYqno4fe0vpwXFh/Li7LQwJjnrt5KaRQXwITeVruUtHipFCAaeHKYu3XfrZm2ZZ/3mudOr3NhXpiOafXNjllzXdPt1AoN2qE4gtiN2ZyqXEpld/z5GCCJPA4sgMTI4pQsgesfROxhgTWfjeXhiBmHaSxV3HpsNutrnjWeQqhaTmxnbkSI9ZyEunYTi1t2m3TmApI97Xampn2g3WMgdEVBCbxiOJcU50I2Y42zVIRWJcMVBqm8AhKlwp7tNGuI02gVgoKKojhIQ6islqu8NYjv/m0DE55bxxfT/OS9W9jxt6IH0iegyoGrWs5BzhFOXEJWUcj7Bdf2Cy7Cd9KAqgMmGyoSSnZIDj+98UQRpCSJrKiAXHoeGw6iouOCykRBRknJ9PKKlgovz3+7GMcaV9aVNMvSfAANpW2JDI+kxFloAiSVAvU8jZ+AoTIE+tT9UKI+ylzaD/GlYskmAguIJF20fPmJx8EEuHoc+JLo28++PA5Syr4J2IpTtm4o3xAK8YfPDOIR5SfNQ/m3iZPgbVwnYu3lkXVKgROULdRK3QTP75CCxDIsldIVJ/vBTwU4lfzQWDa5xCIkmx5SAe9/0ZQmtXRMSJwy4ff03LCvkzlO8bwC783pjzC5Fr9erlv+7uX663owkYoVYb30pf/tbNCcLgR0dYfnWFr6Vr4VZXK22NPlV4DH0tyzzVq12TFNp9nfl2a70bXKBh5U0v7D/Kdlr6fH56H9Gw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D20538A1048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D20538A0048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D20538A0048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212BD8B4DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212BD8B4DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023880669</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212BD8B5DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="e3a3be7a-3423-4c89-b556-bed8349da301"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU/I6EP3ur+jUj07pG+WlI8ygoPYRFQFfv9wJSQrBkmCTFvDX36TYCghenzvDTMl2s3t29/QkpxzMIsdvcY5jQRjVgnZD/wch24P1StnAVg0a5SoYGbWK/IdQ6HrlarniVEe6FnCe4IByAaho6I5llw3LM2x36Li+a/uOV6pXnFdde8Qxl6GlS8nSteUsotzP0jb0JKY+A5xwn4IZ5r6A/qB10/Wlpw9yTHrzdI0ySxg3J0LMfdOEJYQhjiJYgmxmnppbPqeI+wMypkAkMf7MiXhD/9y7WCxKC7fE4rHpWJZlWnVT+iBOxsd68yjfjFFAQ7ZenwPKKIEgIh9AgbrBYsKQ1orGLCZiMjsQ2jZtS4U28BIa0C7TY938SpCh+2WkLZAxBwafADsP1schjjGFWHvoBw39+HcTXO8dxoDykMUzvrP+O0iYpjhic4wMnleWo/t9xD3tap5i6AcURgknKb5VNJkDiLnWi3FIll3CJfkQ17Lxa0sufyRnGYZ/M5ZTcxOrhG7u6U6bjDEX/2dmm/NaR3kEUYKb/evHUfgyRxaoWCvv7AyWmbidwm7tvdbIIGw6r0EV4/5c75K14NbnplfQnwbsXLySZ/ftfnV5efYc/Pm4Xw2veg+TVxrHLep0VtdWkp7VXp49exF134nrTCqBNXFb0ckd69bePlIXfdw/HJHe7TLsB+yy9uD1Rl7nDcPXu3RZt9zWFVq8eNNhiKDdgtWnt07nOoo+ajC6+lN9PWGL2Sq4epx2PO7egaunp+Xt0bA3elq8dE7sBMVDRBfh9KHxVdNmDdvGXBIGyWiKociXih5BW7uQ8wLiZ3lRFoKMMHP150qjuMBU6E21S0mLn0gBIsiXw1yvL+qe5bh2veVUqt5556xjlS37wmpZXr1u1SsXuQatUexAPGc0JCqXUtk1f34GCGc+xxTh2EhZAieY6z9EbAMBtID25cfBKMdDJlXcHpehZGU0ntcjVLPnURouUDqtCV27ZeKO3sWtUOB4Q7rLQ8vZku4+hmROsNJ3RXAuGc6F7MU7SBMR2aUUlChO5AkQKxH2nXLNMzmZzSOskJozhpIIl+aTedYZk6+fjgEgz6ztbmvQyz69g5XtvsubIH0QUQ5cVXOG5SDxnlPIzks5XLK3WXIevpUgor4w2VERE7hGsv3qiyiKIQVLsppy0IXvrmErrrlbUpEKpQQWZC9OaSnyUgKa+UjeQem9lKRpkg2hquQtluFNqXK2OcAwkRq1GrI3TM0ihPmrI6JAvZO5sG/jS8SEDgQQeCYpo2XLX9wPBpir+0Egub787eVjK6Xsm8BLsc92HslrhEL8400D+lD5SXNPPhYsRl/j2hNrI4+sU14KBKFjtVKHweoALSCTYYlULxZvBt8XYF/ybWPR5AKLkGwaJQIffqMpWWroAEKWUBG09cywKZUZTrGaY//L6VuYTI4/z9clP3i+Pt90B1K0ZkAvfMl/OxskowvEujrGMywNfSmvizI5HW9I8yfAb+rseBfntUrZdqv1Qp2rUp2ddrVo4FYlzW/m75aNnu5+D81/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950225FC8651379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950225FC8641379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950225FC8641379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502319A2675CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502319A2675CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023884954</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502319A2685CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UVTC_PrimaryEmail_valid_Role_Linked_LASP_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="66947913-a34e-4638-bccd-621dc2caa552"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC9dEBYlLadMF2gJtOX05Ms4E3CYOxA6k++vXDk0KlPZ0jxQp8mQ8883Ml88+ZygMLKfNGMScRFRxe031X4ytct0zQfMNVNUqZs3W5o15WfNrc2RX7HoF+6aquIwl4FLGEeVN1TLMimZUNbM8tcpO2RRPyWw0nlTlAWImQguXkqEqaRhQ5mRpm2oSUydCjDCHohCYw7EzaQ8HjvB0UI5JbZ3vUGYJ49aS85Wj67jkAYYgwCUchfq5fuBz7jFnQhYU8SSGt5wea6pve7fbbWlbLkXxQrcMw9ANWxc+HiOLM7X1I98Mnkv9aLfuIhpRglFAfiMJagh8GXlKO1hEMeHL8JPQpm4aMrQGKdawWaFnqv6eIEP3zUgHIGOGNLZEZh5sDD7EQDEo92O3qZ59b4K7vdMYUeZHcciO1n8HCegGgmgFnsbyynJ03494ol2tc8COS3GQMLKBkaTJCmFgym0MPkkHhAnyeUzJxq+kTDwkZxngvxnLub6PVUDXT3SnRxbA+P+Z2f68dlEeUJBAyzLqt7ZdewmWw3t7+/gYzKqhewuLBA+bGYR95x2oYtxv62OyFtx62zSezkepfr96+ZmS7rO3peXFY3g1WaabMUzvbqxerfswmU0HAXseXw7M5fU/bnXkza6HvPPztdO/wzhAbNHz7Xv/7kd9m1ZWSd/aPKzDK/p0eTfyOq/Vi+sr8Pj10xKhZ7yejEwTTe3Or82oc92jd8u1PfzVHw5fxg/19Gk2e2rfP7BRefRj1F5cjv2GfjGzutfugM2Du+Z7Tfs1HBpzSZgk82fAPF9Kerg9pS/mhfjX8iItxNP8zNVZSY1iHChXW3KXlBYnEQJEPEcMc7fu21XTqFm9Sr1frXQu6hdGxTD7Rtuo2rbVuKjlGrRDcQSxG1GfyFxSZXf8+RogDh0G1INY20QJXgJTv4jYQxwpLh2LnyOiDKaRUPEkhQDjeJXg6vr5NUJmY7N4Tn4jVRlF/IbexG2fQ7yn3JWpYR0o9xgwWRGQ8i75zQTBGRetWKNNwgOztEElCok4AGKpwY5VaVR1RsJVABKoHkZeEkBptVxljdHZ7m1pCLPMOhi0J7fZn/dpYcff8h4IH49IByar6YCYI5w4hKy8lM9Lru6XnIdvJx6RP5hoKI8J3iE5/PTOE0mQgiRZTTnowvfYcBBXPy6pSOVtCC64XhzSQuOFArTykaxRaV1KNpskG0JdqlsswutC5Ex9AjgREvU6jV6A6kUI/VsnRIH6KHNhP8SX8CWdcMQhFJRRsuU3rgcTYPJ64Aqqp9+9exykFH3jkPJTtq7QLSYRf3nRwI7UNybMt+K1jWLvfVwnYu3lEXWKOwEndCFX8ix4/YQWOBJhiRCvKN4PfirAqeSHxqLJBRYu2DRPOHz+RZGq1FQRxlFCudtTM8O+UmY4+esKnHenD2EyNX47XlP26fE6Gw4mQrNCpBa+5L+dNZLRBYMqT/EMS1NNxW1RJKeLPWV+A3gkzoZlGbV2rd2+6HRrhTjXbduwup2igQeVtD6YP1r2enr8P7T+AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502206A6ABEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502206A6AAEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502206A6AAEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062D47F54BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062D47F54BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023888800</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062D47F64BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UVTC_PrimaryEmail_valid_Role_AccessPortal_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="3350732a-c7ae-4129-b15d-a8649497cf3a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5no2vGOwKVBEIO+S+OJNk5mVLyG1QYktgyQT4+pVM7AAh2cxWUUWp3eo+3X10pBOOstQJe5xDLgij2mjQ0f/xnAA7tt80vBYgw/O92EAexkZrkiQOChILey1dG3FewIhygajo6I5le4bVNGz3znFD1w5dr9FsN3/r2j3kXIaWLg1L11ZZSnlYpu3oRU5DhjjhIUUZ8FDgMOpdXYbSM0QVJr17skVZJsy7MyHmoWniRgwY0hQ3MMvME3PP5yTmYUSmFIkih9ecMe/or3tfXl4aL26D5VPTsSzLtAJT+sScTL/r3W/VZohHNGHbdR9RRglGKdkgBeoKxIzFWi+dspyIWfZBaNu0LRXagBU2sO3R77r5lqBE98VIeyBzjgw+Q3YVbAwJ5EAxaD/Ho47+/WsT3O69yxHlCcszfrD+M0hAl5CyOcQGryqr0H094pF2dU8AhyOK04KTJVwrmswRBq7d5pCQ1SXhknwx18rxaysuf6RiGeA/GcuJuYtVQjePdGdApsDF/5nZ7ry2Ue5RWkCXkad+Am6fXZn8SWB6ccrbLLeDdjHtlBB2nbeg6nG/rg/JWnPrddNykb1wHNne43XrYv1r8ihuFg+rkZU/9n7E86fg6fcja/t/X5D7/DRC5z/Sa/d2EbXOVzD5tQym15th/rB5oLNJdvn0bYUWwwu72XPTyRWzTsfDq4fxwzih858Uok3ir0bPE8/ctAI2vL2939C/JjfTv7A/E46/NjdnP2/7d3jt/TCzzbD5bX3R888G55c4G/nnUzM/O2Odt5p2a9g3VpIQFZMnwKJaKnqMBtpQzguJz+VFWUhsJKVrOFcaxQVQoXfVLiUtYSEFiMShHOZ2PQyatuU7Q9t1/aHfDs4sz7KHVs9qBUHT9YJKg7YoDiD2GU2IyqVUdsufzwHiLORAY8iNJSvwDLj+ScQBEkgb0bE8HIxyuGNSxZ/pJEUJLRbPm7QJwo+LeYIJeta1ayZu6E3eSwTkO8rt3VnOnnKPAZM5ASXvit9cEpwL2YoFWhYitRtL1KBQyAsgVxocOl67aXKSzVNQQM2MxUUKjflsXjbG5Nt/x0CYl9Zev38WReXR+7Cyw29VE6RPTJQDV+WcghwkHLmFnKqWj2tu7tZche8VMVEnTHZU5ARvkex/eiOKYkjNkm1RFera+dCwF9g8rKnOFS8JrtleX9NS5aUGdKuhLFBj0SiWy6IcQ0vpWy7Dm1LmbDMCXEiRWt+xZ6BmHcL80h1Roz7IXNv38RViRiOBBGSSNFq5/MIDIQKuHggjSfbVV18feyll3wSsxDFbP5XvCIX406cGDrHyk+Zb+ffC8vhtXEdi7eSRdcpXgSB0qlbqNlh/wAvMZFgi5Yvlu8GPBTiWfN9YN7nGIiSbJoWAj79oSpc6OsKYFVSMBnpp2NXKEqdYzyF8c3oXptTj1wt2xT+8YB+vLiOpWhnSa1/y384GKemCQVf3eImlo6/ke1Emp9MdbX4F+E6eA2dgD91Wz/fatTw3g8ANWlbdwL1Kuu/M7y07PT08D91/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951092D1F38A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951092D1F37A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951092D1F37A648E0401F0A05993970</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062F1336F689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062F1336F689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023893767</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062F1337F689E0401F0A07995349</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UVTC_PrimaryEmail_valid_Role_DECE_CS_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="6b43d5b0-3ea8-4fee-ae09-1d3b8bba2639"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyJKH4+CcyFcooLEpZyFhfYUKL28rIwzgNvEobHDpb9+7UBSoLTbsxIS8mQ8883M58++5DgMbK/BOcSCRkzrtmv6P8T2K+BWXMMsgmMUS9g1pqWpaZRs17IqpOxXCdG1LucJdBkXmImabptW0TBdw3LGtuM5lueUCtVy8UnXJhBzGVq6FExd24QB416atqYnMfMizCn3GA6Be4J4o8ag70lPD2eY9PrlDmWaMK4vhFh6CJGCDwSCgBRIFKJLdORz6XNvROcMiySGfU6f1/T93vV6XVg7hSieI9s0TWRWkfTxOZ1f6PUf2Wbwu2wW7dYtzCJGCQ7oG1agBiAWka81gnkUU7EIPwltIctUoQ3YEINYRXaho/cEKbpvRjoCGXNs8AW2smBDmEEMjIB2N+zW9IvvTXC3dxxjxmdRHPKT9Z9BAraCIFqCb/Cssgzd9yOeaVf9EojXZSRIOF3BtaLJEhPg2u8YZnTTp1ySz+daOn5tw+WPZiwD8idjuUSHWCV0dKY7bToHLv7PzA7ntYsywUEC9eJfEPyMRsxxhqy3LfXGJr32HStoXb3UUgiHzjtQ+bj361Oy5tzabxIo6bnmw3NQfez2bvk26VXbsyZu2tvRzYAPGnz5PHLNyVX/uvJ2275PXpCJkgTJ7+NWIhZOa1p8s0qTDmmV3R/9+1t4fFzfVx6n6NYaOKgynGyaizsx722fytbPX53Sqt8bj+F1cNdutgaTFwc1Rv0Xd/uQhNfbxepmJTbNIn/oda5/hOPJ3/avJ1puL0uxezt8WkW195oOazg2ZpIwSqbPQES2VPTotrWOnBcWX8uLslDfmKWu3lJpFBfAhF5Xu5S0eIkUIOp7cpi7dafqmrZtXV01OlbHNotXZtG0OmbDLFerpt22Mg3aoTiB2IrYjKpcSmV3/PkaIAk9DsyH2FhFCVkA17+I2MYCa102lIcjYhzGkVTx+TRmAdnIc4Nty40qS+fFguc3ZunadSRu2E3cmAmID6S7ODbtI+keAqFLCkrfFcG5ZDgXsheveJWIwCqscIFBIm+AWImwZxcrLuI0XAagkKIw8pMACsvFMu0M4rt/28CEp9a0rYSnh+/T2k6/ZW2QPj5VDlzV0wQ5SjhzD9lZMZ8X7R4WnYVvJD5VZ0z2VMSU7JAcf3qniuJIzpN9VRns3PvUcBQZnRaVJ/NXlOSEz29qKfRSBurZWF5x4bWQrFZJOoiykrhYhkdS6Sw0ApJIndqOoxdgKA+BvnVN5KhPMuf2Y3xSL9hIYAGhpI2WLr/xRhgBV2+EruT75rsPkKOUsm8CNuKcrRXIp4RC/OVrg3hE+Unzb/m3jmL/fVxnYh3kkXXKh4GgbK5W6kLYfkIMEsmwVCpYFB8GPxfgXPJjY97kHIuQbJomAj7/oilpqumYkChhotvWU8OhXKY4xXYJ3rvThzCpJO/v2A3/9I59GPRHUrhCrOe+9L+dDZrShYCurvIUS03fyCejTM7mB/K8B/hRoc1So9SqXDVbpWOFbjXzBh5VUv9g/mg56Onpeaj/Cw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502206A6CBEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502206A6C8EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502206A6C8EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950221EEAF1F204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950221EEAF1F204E0401F0A079902D1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023895966</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950221EEAF4F204E0401F0A079902D1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UVTC_PrimaryEmail_valid_Role_Coord_CS_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="738508d0-b97e-4fe8-9bca-699f62631528"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4j3eM5Q8weAIzFJqMadJQoGnSlzuqvGAltuxYsiH59ZVM7AAhuemdYYbRerV7dvfoSKccJ7HtDzmHXNCUacG4r/+L3HaI3GXb6HZIx3CJhwwcWh3DWYLleK7tEc/WtYDzAgLGBWair9vIcg3UNixnYTu+Y/kuaqGe80vXriHnMrR0aSFd2yQx436Vtq8XOfNTzCn3GU6A+4L48+HlhS89fVxj0genW5RVwnwQCZH5pklaIRCIY9IiaWKemns+pyH353TFsChyeM4Z8r7+vHe9XrfWTivNV6aNEDJRz5Q+IaerE33wqd4MYcCW6XY9wixllOCYPmEF6hJElIbaMF6lORVR8kZoy7SQCm3AhhjEctmJbr4kqNB9MNIeyJxjg0fYqoPNYAk5MALaj1nQ108+NsHt3kWOGV+mecIP1n8HCVgJcZpBaPC6shrdxyMeadfgFIgfMBIXnJbwTdEkwwS4Ns1hSTcXlEvyhVyrxq9tuPzRmmVA/mYsp+YuVgndPNKdMV0BF/9nZrvz2ka5xnEBA2sWjOZjGyauhVL6E76CF629Mi+veL+CsOu8BdWM+3l9SNaGW8+bbv9xqHeOra+T9uL7HZR34/X4SwGbCX6M0qkLZ93N4+U6vjXLh++L2/PzyU3Pu6Tk3hue/8rojX3tzH5Zvzeku+DdT9GKXV2UV26Inh5uv/5IMmd6d/8ZdUZfzPSCry42IxRbUffzdTCc3riXdjJbZ+yeTQuKr4ej8n5pRzc/Jw/r717y+OnnlHij0OxN0fC8CCdJMEn7LzXt1rBvrCVhXvy+AyLqpaJHMNbO5LyweF9elIWGxrJy9TOlUVwAE/pA7VLS4hdSgGjoy2Fu12e9toU69pnltDtnnW7vC3KRdYaGyOv12o7bqzVoi+IA4ihlS6pyKZXd8ud9gCTxObAQcqNMCxIB19+JOMYCawGbycORMg6LVKp4vip59tSxChLjrI3KXnYf4aentq59S8UVu8qHSwH5jnK7C2TvKfcMCM0oKHlX/OaS4FzIVjzgshCx1Spxi0EhL4BcabBvu922yWmSxaCAmkkaFjG0siirGmPy7b9tYMIrK0nTPPQJrw7fm7UdfqvbIH1Cqhy4KugzyFHCkXvIqat5u+r2btV1+GERUnXGZE9FTskWyf6nF6oojjQ8qcuqcTfuh4a90OZhVU22sKSkYXxzVUullzowqAfzgFsPraIsi2oUntK4XIY3pdRZ5hxIIYXqcZHeAzObEOaH7okG9UHmxr6PrxARmwssIJHE0arlBx4Jc+DqkRBIwm8++gLZSyn7JmAjjtlGsXxLKMTvPjeIT5SfNE/l31qO8GVcR2Lt5JF1ypeBoGylVupGeHyPGVRKWJrvBj8W4FjyfWPT5AaLkGz6XQh4+4umtKmvY0LSgolgrFeGXb2scIrHDPwXp1dhKk1+vmQ3/M1L9ubyYi6VK8F640v/29mgFV0I6Oour7D09Y18M8rkbLWjz88ADyQa2XZnbI2GtmPb1q5EI9dzmgbuVTJ4ZX5t2enp4XkY/AE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950226D1CA43221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950226D1CA23221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950226D1CA23221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062F1356F689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062F1356F689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023898960</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062F1358F689E0401F0A07995349</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UVTC_PrimaryEmail_valid_Role_Portal_CS_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="b4b00594-46bb-4292-8e3e-5b53db5d37e6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQK7eoIFFSutlCu6ew9PJyZOyBuA0OxA6X/fVrhyYFlvZ0j4SEPBnPfDPz+bPPOZrHjt/hHFJBE6aFQUv/l9hOc1K3aka17oDhWdWG0ZjUmwbUpk4DSMOaNKu6FnKeQci4QEy0dMeyPcOqGrY7clzftX3Pqzhu/UnXxpByGVq6VCxd28xjxv08bUvPUuYniFPuMzQH7gvsDzuDvi89fVRg0tvnO5R5wrQdCbHwTRNXCGCIY1zBydw8Nw98zgn3h3TGkMhSeM1JeEt/3bterytrt5KkM9OxLMu0mqb0IZzOvurtL8VmICGbJrt1F7GEUYxi+gspUAMQUUK0TjxLUiqi+TuhbdO2VGgDNtjAtse+6uZbghzdJyMdgEw5MniE7CLYHUwhBYZB+3kXtvSvn5vgbu8oRYxPk3TOj9Z/BwnYCuJkAcTgRWUFus9HPNGu9jlgP2Q4zjhdwY2iyQJh4NqPFKZ006dcko9wLR+/tuHyRwuWAf6bsZyb+1gldPNEdwI6Ay7+z8z257WLMkZxBu0waiwbmztwB8H3CH5uKXSuRxhztHxs5RD2nXegynG/ro/JWnLrdVP8dHVld7fEjobbfhjWthERTwjuf1wkF42X+j+Dxq0zi85uzp6a/eUI31xfBTZJ+uOLSS3tVq+eRu6kG/Bf40H9wvlyf7n4Nu2R3nj50+Te9/X9MgiCwSAa8pV12x9HvWf+0L9E9bOaGPQzHtw9WmfT50WnGVk4un6wx3Tcaw4f8dJ1p1+6ztX4m2uv3Wo1qz0I1OBe662m/RoOjYUkDLPJM2BRLBU9wkDryXkh8bG8KAslxjR39RdKo7gAJvS22qWkxc+kAFHiy2Hu1r1m1XLcoNexesHlpeNcWp5l96yOVW82Lc/uFBq0Q3EEsZuwKVW5lMru+PMxQDz3OTACqbFKMhwB1z+IGCCBtJDdycORMA6jRKr4S+Qssy2p1zAAc4hrkQjIZKlrN4m4ZbdpZyog3RNub2Q5B8J9B5guKCh1V/Tmkt9cyE4s0SoTsV1ZoQqDTOp/qiTYd7xG1eR0vohB4TTnCcliqCyiRd4Xk+/+HQNhnlspx4skFSjG3M7P37vlHX8rOiF9CFUOXBV1AXKacOIqcouK3q+8ul95Eb6TEaqOmWyrSCneITn89MYWRZOSKvulFdjLLceGg/DmcWVlRrKiuCR+eWNLwZdy0C4GtESVZSVbrbJ8JHUldakMb0rFs80h4Ezq1XaUvAAzyxDmp66LEvVR5tJ+iC8TERsKJGAuCaTly0+8FYbA1VshlLzffPYhcpBS9k3ARpyydWP5pFCIP3x1YB8rP2n+If/WSUrexnUi1l4eWad8IAjKZmqlLobtO+zAiQxLpZIl6X7wUwFOJT80lk0usQjJpkkm4P0vmpKolo4wTjImwkDPDfuymeMU2wX4b05/hMml+fWu3fB379qHQX8oBWyO9NKX/rezQXO6YNDVlZ5jaekb+XSUydlsT6ZfAR4rdeBYNc+zL23X65VKXW02nXr3jcsHlbT/MP9p2evp8Xlo/wY=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D206441F134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D206441E134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D206441E134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DFA0FDEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DFA0FDEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023902915</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DFA0FEEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UVTC_PrimaryEmail_valid_Role_Retailer_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="6e1bab54-e84d-4ded-afd1-2b9e4e95bf02"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3Pr/C4jxlj2Xx7AjN8JXUKJAGStH3pKPICKkY2luyY/PpKJnaAktz0zjDDaL3aPbt7dKQLjte+7XQ4h0jQgGluv6X/wnZtbtebyMAA2KjULctoIOQZNUB2uf6Enyo10DWX8xhcxgVmoqXbyKoYqGpY5ZlddsqWU6mXrHLtp649QMRlaOlSQrqWrn3GnSxtS48j5gSYU+4wvAbuCOJMO6OhIz0dnGPS2xc7lFnCqL0UInRMk5Q8IOD7pESCtXlhHvhceNyZ0gXDIo7gNafHW/rr3ufn59JzuRREC9NGCJmoaUofj9PFF719lm8Gz2XzYLfuYRYwSrBPX7ACNQKxDDyt4y+CiIrl+p3QlmkhFdqAlBjEqrAvuvmWIEP3yUgHICOODb7EVh5sAnOIgBHQ7iduS//yuQnu9s4izPg8iNb8aP1vkIAl4AcheAbPK8vRfT7iiXa1L4A4LiN+zGkCY0WTEBPg2m0Ec5oOKZfk87iWjV9LufzRnGVA/mUsF+Y+VgndPNGdPl0AF/9nZvvz2kV5wH4M7eb9Kukmy1u+SWf0qfLzMTK3Pz1rcDUZtTII+847UMW4X9fHZC249brpsWnxmRBf+XY8fKj3r6+Xd9+6lm937P5qfB02r6sNOlzbqHwV3l0tvZkZnqPzUS+tzeuoX2tuB6LzMvyx3FpJr3bmQi0e3c6ftmxcnQfNePV19H18172f+4/36cv4/qv7e3J/O325qYW9aQVYNH3Y/N6szB9pfB5sktjqjq/J+Jv7uBrdniWX8Y19VW5URvyqN2WXQzZovdW0X8OhMZeEafz0G4jIl4oebl+7lPPC4mN5URbqGfPM1QmVRnEBTOhttUtJixNLAaKeI4e5W182q8i27GYP9a1B2aoMUAVZl6iD6s0mqjZquQbtUBxB7AVsTlUupbI7/nwMkKwdDsyDyEiCmCyB6x9E7GOBNZdN5OEIGIdZIFV80yg3eJ0kK1IVFope7C1LpRuu6to4EDfsJurMBUR70l2ZIftAuidAaEhB6bsiOJcM50L2YoOTWPhWKcElBrG8ASIlwo5daVRNTtehDwqpuQ682IdSuAyzzph8928bmPDMOhnMfvWmv6zs9L1b3PG3vA/Sx6PKgauCuiBnCScuonJezftVV/erzsN3Yo+qQyabKiJKdkgOP71xRZGkIEpeVo67cD82HIQ2j6sqsnkJJQXli7taSr0UgnY+mA0ubUpxksTZKOpK5CIZ3pRaZ5lTILFUqu0sWAEzixDmpy6KAvVR5sJ+iC8WSzYVWMBaEkfLlp94JUyBq1eCKxmffvYJcpBS9k1AKk7Zer58TCjEH743iEOUnzTfyr/nIPLexnUi1l4eWad8GgjKFmqlroTtO8wggQxLpYYF0X7wUwFOJT80Fk0usAjJpqdYwPtfNCVOLR0TEsRMuH09M+wLZoZTbENw3pz+CpOJ8ustm/J3b9nvo+FUStca64Uv/W9ng2Z0IfKNKf0zLC09lY9GmZwt9gT6FeCxRvdtVB2gbqNX7aN9ja7Wat2igQeVtP8y/23Z6+nxeWj/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205E0B9C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205E0B8C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205E0B8C5D0E0401F0A0799566B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502129C0D1E314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502129C0D1E314E0401F0A07990586</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023906420</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502129C0D2E314E0401F0A07990586</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="b14ca06b-fbda-4838-8dd9-101193f37ca9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbT/M4EH3nV0ThcZUmzqXQiFYqvSy9ABUpLPCCXMdpXBKnjZ2S8uvXTkloS2H5VqpUeTKeOTNzfOwLBuPIdNuM4ZSThCqDblN9qQMAoQHrmg8CU7OhZWoNy65rllWHdQcGcGbNVGXAWIYHlHFIeVM1DWBrhqMBa2pargVcu1GzHfCsKg84ZSK0cKkZqpLHEWVukbapZil1E8gIcymMMXM5cr329dgVni4sMamtiy3KImHaCjlfurqOaj5GOIpQDSWxfqHv+Vz4zPXInEKepfgjp8+a6sfet7e32ptVS9K5bhqGoRsNXfj4jMxP1dZJuRn7Axok23UH0oQSBCPyDiWoa8zDxFfa0TxJCQ/jb0IDHRgytIZzpCFg01NV/0xQoPtlpD2QKYMaCyEog93hAKeYIqzc3w2a6unvJrjdO00hZUGSxuxg/WeQMF3jKFliX2NlZSW630c80q7WBUbugKIoY2SNbyRNlhBhpkxSHJB8TJggn8+UYvxKzsSPlCzD6E/GcqHvYhXQ9SPd6ZI5Zvz/zGx3XtsoDzDKcMufXD/cdnqPwWa6WYx6D1fwcgQc/QmPULOAsOu8BVWN+2N9SNaKWx+bemYOnQewYBM+hv3ASR3QWTnjOfTgJOxtRlfp33p8aQf3eWTcGYubeWPSvWxc5TQfrR7qj/YQAr/3tJl0+Do6qcfDtyicgu4/QbjomXg6dXqLoH99fnblDFd53Vv7wZhH3nq4mNnP10Y8y4L1Kn31bvjUd4aLs/iZ9Iadp5u/6PzEer9n4TC8Ob8lONDv7cVo0PysabeGfWMpCV42W2DEy6Wkx6Cr9MW8IP9ZXqSF+FpQuLpLqVGMY8rVltwlpcXNhAAR3xXD3K77DccwrW6/DUCn1zPNnmEboG+0jbNGw7BBu9SgLYoDiJ2EBkTmkiq75c/PAFHsMkx9nGrrJEMhZuoPEbuQQ2VA78ThSCjD00SoeD5/963XhWOCVQ5Y6Cxf67PN/DXPVOUm4bf0Nm0HHKc70m1PDXNPuu8wIkuCpb5LgjPBcMZFL1ZwnfEI1NawRnEmboBUirBr2ueOzki8jLBEqseJn0W4tgyXRWd0tv03NYhYYe2O297kpeO9gOL8fVve4beyE8LHJ9KByZIusZgmPnIVWWU939ft7NZdhm9nPpHHTLSVpwRtkex/+mSLpElFlc/CSuTVhkPDXnD9sK4qn78mqKJ9dV8LuRdi0CqHs4K1VS1br7NiHGdS6FIRXhd6B3QPo0yo1WaavGKqVyH0X10WFeqDzJV9H1/GQ+pxyHEsyKMUy1+8FDzM5EthIFif//YZspdS9I3jnB+zdSLxoJCIf3xzIBdJP2GeiL+3JPU/x3Uk1k4eUad4HnBC53Ilr4XNN9xAiQhLhI4l6W7wYwGOJd83Vk2usHDBplnG8fdfFClQTRUilGSUD7pqYdgVzQIn3yyx++n0JUwhzB83bc6+vWkfr8eekK8YqpUv+W9njRR0QViVF3qBpanm4uEoktP5jkh/ADzQaWA0QP+8ZzmdS8uodNppNKxGvdLp/UpaX8xfLTs9PTwPrX8B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091F8E36CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091F8E35CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091F8E35CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DFA11CEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DFA11CEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023908658</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DFA11DEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UVTC_PrimaryEmail_valid_Role_Linked_LASP_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="fe56271d-9ac6-463d-a3ee-b28e6029a784"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3Pr/C4jx3jCzYET2DGBGide4DSpC8dIa+NGiODJXP79ZVMbC4h+dJvJhNG69Xu2d2jI10wNI0t12MMUk4Sqvidpvob24AtsGwtMMU/u1G3tHEtHGtmzQ5tpx4CsrCq+Ixl4FPGEeVN1TJMWzMczawOrapbNV3HqhiO/UtVRpAyEVq4VAxVWU1jytw8bVPNUuomiBHmUjQF5nLsDrzbG1d4uqjApLYutijzhGlrwvnM1XVcCQBDHOMKTqb6hX7gcxEwd0AiiniWwmvOgDXV173L5bKyrFaSNNItwzB0o6ELn4CR6IvaOis2Q+DTMNmuLxFNKMEoJhskQd0CnySB4sVRkhI+mb4T2tRNQ4bWYIU1bNr0i6rvEuToPhnpAGTKkMYmyCyC9SGEFCgG5Uffb6pfPjfB7d5hiigLk3TKjtb/BgnoAuJkBoHGisoKdJ+PeKJdrQvArk9xnDGygDtJkxnCwJSHFEKyuiFMkC9gSj5+ZcXEHylYBvhfxnKh72MV0PUT3emQCBj/PzPbn9c2ygjFGbR0a1b7CY90wdb2ZPDNi37NR05v41mPXjOHsO+8BVWO+3V9TNaSW6+bUGBdn798fWg/ddKr5+GVd92rrTZ6nLS/9Tc/x9/jWmQ+TayuV73L2vZGv+e16E83fOz1X9D513EyDr9O9av5S+L8Cs/qT/6atn/gKxaRa+t5PJ+PniMWjjAZ9auLLva6Yec8/ZGe+/ix2nnGm+d2d7i00JBf1/3vhtfgd3OrvdRZvH4+I/Eyvr6/Bnz/x3kZ8npj5Dd3Ne3XcGgsJGGQjf8A5sVS0sPvKD0xL8Q/lhdpIYEW5q7uTGoU40C52pK7pLS4mRAgErhimNt1r+EYlmm1Ow3D7nhdo2vYhtkzPMNpNIyG5xQatEVxBPEyoSGRuaTKbvnzMUA8dRnQAFJtkWR4Akz9IGIHcaT4tC8OR0IZDBOh4ssEGxFKq5jE6yWMOWzSOphsoyp3Cb+n96kXckj3lNseGtaBcvcBkxkBKe+S30wQnHHRijlaZDw2KwtUoZCJCyCVGuxa9rmjMzKdxSCB6tMkyGKozCazvDE62/5aGsIst97ceIOH35eD32Z+/N6t7vhb0QjhExDpwGRJbRDDhBM3kV3U837dzn7dRXgvC4g8ZaKrPCV4i+Tw044skiUlU3aFFcjLDceGg+D6cV1lvmBBcMn68roWai+0oFUMZ44q80q2WGT5OOpS51IRXhdyZ+oDwJkQq/UweQGqlyH0T90VJeqjzKX9EF/GJ3TAEYepII+SLz/xUBgAkw8FX5B+9dlXyEFK0TcOK37KdhmL94RE/OGTA7tY+gnzg/hZJmmwG9eJWHt5RJ3idcAJjeRK3grrd7iBExGWCBlL0v3gpwKcSn5oLJtcYuGCTeOMw/tfFKlPTRVhnGSU+x01N+xrZo6Tr2fg7pzehMl1+fWiXbF3L9qn25uBUK8pUktf8t/OGsnpgkGV93mOpamuxLtRJKfRnka/AjySadOoVdvtnmUbl2ajlOl6o+FUnd2RPKik9cb81rLX0+Pz0PoL</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951063BBF250C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951063BBF240C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951063BBF240C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212BD904DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212BD904DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023911390</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212BD905DAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UVTC_PrimaryEmail_valid_Role_AccessPortal_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="32b4908e-9bc1-4277-93a3-2073ade65cf1"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HlPGF2wurkCVY2DXQxIyQC4zL1uK3BjtGBksGRy+fiSDHSAkm9kqCpfare7T3cdHumRoEVuuxxiknCRUCXod9Z+63Xo2cLulmdgxNdtszLR2S/xhy7JRC0xwZm1VCRjLIKCMI8o7qmWYtmY4mlmfWnW3brqOXWs6zZ+q8gApE6GFS81QlXwRU+YWaTtqllI3QYwwl6IFMJdjd+LdXLvC00UlJrV7uUNZJEy7c86Xrq7jWggY4hjXcLLQL/Ujn8uQuRMSUcSzFPY5Q9ZR93s3m01tU68laaRbhmHoRlsXPiEj0Ve1+6XcDGFAZ8lu7SOaUIJRTLZIgroBPk9CxYujJCV8vngntKmbhgytQY41bNr0q6q/JijQfTLSEciUIY3NkVkGG8MMUqAYlPtx0FG/fm6Cu73TFFE2S9IFO1n/GSSga4iTJYQaKysr0X0+4pl2dS8BuwHFccbIGm4lTZYIA1PuUpiR/JowQb6QKcX4lZyJHylZBvhPxnKpH2IV0PUz3emRCBj/PzM7nNcuygOKM+j2tjd4eRu14dum3+rzx3gyfF4Or8NZ0+gUEA6dd6Cqce/Xp2StuLXf9Dga6oMRBP7wyvrRu7f1u+3Pmx/TH+bFy/AvSq0gGY3yp+33Ufw3rAbcitLrp/vx49a/0q82UeNbVL9fO571NBz/Cr6kDXN+S7Z67qf+hWPofRJt7PnUeo4f8kHvwYkuRnfed3v63B/Ho+nNNE5bv5i9umBQH7Z+6s359/549fjkcKdBv3je+Haw8cYP6yZN+qPrb0Gr81rTYQ3HxlISJtnzv4B5uZT0CHrKQMwL8Y/lRVpIqM0KV3cpNYpxoFztyl1SWtxMCBAJXTHM3XrQdgzLMhpeo9/uX/mNvmEb5sDwjGa7bVj+ValBOxQnEP2EzojMJVV2x5+PAeKFy4CGkGrrJMNzYOoHEXuIIyWgY/FxJJTBNBEqbqIlWb2gnK6srW1uGjgkuVmPGvCiKrcJH9FR6s04pAfabU8N60i7x4DJkoAUeMlwJijOuGjGCq0zHpu1NapRyMQRkEoVdi275eiMLJYxSKj6IgmzGGrL+bJojc52T0tDmBVWz/f7E39SfH3vFnf6ruyD8AmJdGCynisQs4QzB5FdFvN+0c5h0WV4LwuJ/MhEU3lK8A7J8atXrkiSVETZV1XCrrxPDUeR9dOiqmThmuCK8dVRLZRe6EC3HMsK1Va1bL3OikE0pcalIrwupM7UJ4AzIVQv0+QXUL0KoX/qnKhQn2Su7Mf4Mj6nE444LARtlGL5iUvCBJi8JASC8PlnbyBHKUXfOOT8nM2PxV1CIv7wuoFdLP2E+U48Nkkavo7rTKyDPKJOcTPghEZyJU+El3eIgRMRlggJS9LD4OcCnEt+bKyaXGHhgk3PGYf33yhSmzoqwjjJKA96amE41MsCJ39Zgvvq9CZMocn7QzZn7x6yTzfXE6FcC6RWvuS/nTVS0AWDKs/yAktHzcWdUSSn0YE+7wG+lei+1W8N/LpjOkcSXa/7VQOPKum+Mb+1HPT09Hvo/gY=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022E2E8FD3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022E2E8FC3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022E2E8FC3515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502206A6E9EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502206A6E9EBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023913919</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502206A6EAEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UVTC_PrimaryEmail_Invalid_Role_dsp_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="77df00e1-e0f6-47e8-aee3-a9d1f9987638"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSP"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HqeML9gBXIEqhkvWM7kQYDJJXrYUuQ0abNlIMjj79SuZ2AGGZDNbRRWldqv7dPfRkc45SmLH73MOTJCUasGwq//d9JCNHADD7nhtw223Q6PTRKFx5rktaOInx7NauhZwnkNAuUBUdHXHsl3D8gy7OXeaftP2vVbD85xHXbsDxmVo6dKwdK1IYsr9Mm1Xzxn1U8QJ9ylKgPsC+7P+1aUvPX1UYdJ75zuUZULWWwqR+aaJGyFgiGPcwGlinpsHPuch92dkQZHIGbzkDHlXf9m73W4b22YjZQvTsSzLtDqm9Ak5WXzWe5+qzRAGNEp36wGiKSUYxeQfpEBdgVimodaPFykjYpm8Edo2bUuFNqDABrZd+lk3XxOU6D4Y6QAk48jgS2RXwaYQAQOKQfsxDbr6549NcLd3zhDlUcoSfrT+M0hANxCnGYQGryqr0H084ol29c4B+wHFcc7JBq4VTTKEgWsTBhEpLgmX5Au5Vo5fK7j8kYplgP9kLOfmPlYJ3TzRnSFZABf/Z2b789pFuUNxDr0sEH81R3SSfB+uniZbb/LzGwoeHgc0t7olhH3nHah63C/rY7LW3HrZxHnwfbB8GHnud/HXGLbTTUwWF3d3F3ctxq5hNTibc2cyvQ+H/PH2YkVIJ3B/kaxg5PbH5bfrKHNiOhhdji5uzx4+sVHz5uqsNdkGs4dVfxvM7/tsRqPFz2UWFclT5Jpf1uFZ08u+/Hhcia94TAdBdG0X0eh6kKN84100nwcjkdHh4+0nM7n7lky//iRJGN4vb5aP64fua037NRwaK0mY5U+/AItqqegRDLWxnBcS78uLspDQiEpXP1MaxQVQoffULiUtfi4FiIS+HOZuPe54lmM7fbvVb7lOxxtZrmWPrb7V6nQsb9CuNGiH4gjiIKURUbmUyu748z5AnPgcaAjM2KQ5XgLX34k4RAJpAZ3Kw5FSDvNUqrjXxny1XjudVhHbBd8kGNp2wZytrl2n4obesH4kgO1Jtzu3nAPpngImGQGl74rgXDKcC9mLNdrkIrYbG9SgkMsbgCkR9h237ZmcJFkMCqmZpGEeQyNbZmVnTL77dwyEeWmdjublwXuzruNvVQukT0iUA1e1fAU5RjhxB7lVIW8X7O0XXIXv5yFR50v2UzCCd0gOP73SRPGj5oisqIJcex4bDqKaxwXVicINwTXR6xtaCrw8/r1qHGvUWDfyzSYvB9BS0sZkeFMqnG3OAOdSn57n6QqoWYcwP3Q91KiPMtf2Q3y5WNKZQAISSRetXH7gbTADrt4GgeR58dGHx0FK2TcBhThlG8TyCaEQv/vKwD5WftI8kX/blIWv4zoRay+PrFM+CAShC7VSF8HzG6TAqQxLpHKlbD/4qQCnkh8a6ybXWIRk01Mu4O0vmpKkro4wTnMqgqFeGvZlssQpnjPwX51+C1NK8cvdWvA379b7q8uZFKwE6bUv+W9ng5R0waCrK7zE0tUL+VSUyeliT5ZfAB4r89CxvGZ7PLbc9rhWZq/TcVoDu27gQSW938y/W/Z6enweev8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D2053900048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D20538FF048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D20538FF048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A17A74295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A17A74295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023916416</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A17A84295E0401F0A079905C8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UVTC_PrimaryEmail_Invalid_Role_device_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="a0f7c382-1807-49a7-a380-409572892c2b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DEV"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chNwIkKkgUaJeqpRdot8vLkXEmYDZxQuyEy68/dmhSoJfTPRIS8mQ8883M588+YygKLa/LGKScxFQZ9tvqPxibjgPNmeZg19fqM9/WZlYj0LDtWo7vNwzDqKvKkLEMhpRxRHlbtQyzrhmOZtoTy/ZsyzPMWt2xp6ryBCkToYVLzVCVTRRS5hVp22qWUi9GjDCPogiYx7E37t5ce8LTQyUmtXO2R1kkTDsLzhNP13HNBwxhiGs4jvQz/cjnzGfemMwp4lkKLzl91lZf9q7X69rarsXpXLdEMbrh6sLHZ2T+Xe18KzeDP6RBvF/3EI0pwSgkOyRB3QBfxL7SDedxSvgi+iC0qZuGDK3BBmvYrNPvqv6aoED3xUhHIFOGNLZAZhnsAQJIgWJQHh+GbfX71ya43ztJEWVBnEbsZP13kIDmEMYJ+BorKyvRfT3iO+3qnAH2hhSHGSM5jCRNEoSBKXcpBGRzTZggn8+UYvzKhokfKVkG+G/GcqYfYhXQ9Xe60ydzYPz/zOxwXvsoTyjMoLMYD7LVlHIILlt2+KM/frR2O9hOrd26XUA4dN6Dqsb9sj4la8Wtl013o5H/lHf9+2zqT6d328ZV69eVMbMMlOHG6j6BnMyvZvlkxC3U+pn0Avvptvv8h26i3Xr2eH39bIBx27zq9W5Y8K1p/rxruOEybzomvdeXYP3OfvyYIL3588J0h2Ej0uPN5f1da7w6t81dsN61Lhq9MPSD53tngM6Z3tw9WqObvD54/nZpPI0ul1FqZdPHX7+3iR632q81HdZwbCwlYZzNloB5uZT0GPaVCzEvxD+XF2khvhYUrl4iNYpxoFztyF1SWrxMCBDxPTHM/frCdUzDNQdm1xw0zy1zYNQN88LoGo7r2m6jUWrQHsUJxF5MAyJzSZXd8+dzgDjyGFAfUi2PM7wApn4SsY84Uob0QRyOmDKYxELFzTheGtultZivFs5qbbjR8k8YJa2Wqoxifktv027AIT2Q7vrEsI6k+wEwSQhIfZcEZ4LhjIterFCe8dCs5ahGIRM3QCpF2LPqLUdnJEpCkEj1KPazEGrJIik6o7P9v6UhzArrw2BSHLwP6zr9VrZA+PhEOjBZyzmIMcKbO8j0nLKQjwt2Dgsuw3czn8jzJfrJU4L3SI4/vdJE8qPiiKiohFx5nhqOouqnBVWJ/JzgiujVDS0EXhz/TjmOFaqtalmeZ8UAmlLaUhFeFwpn6mPAmdCn7ST+A1SvQuhfuh4q1CeZK/sxvowv6JgjDpGgi1Isv/A2GAOTb4Oh4Pnmqw+Po5Sibxw2/D1bLxRPCIn401cG9rD0E+Y78beOU/91XO/EOsgj6hQPAk7oXK7kRbD9gBQ4FmGJUK44PQz+XoD3kh8bqyZXWLhg0yzj8PEXRUpSW0UYxxnlw75aGA5lssDJtwl4r05vwhRS/HK3btiHd+vzzfVYCFaE1MqX/LezRgq6YFDlFV5gaasb8VQUyen8QJZfAJ4os2FZjb7Zty3bOlDmpusa9aZdNfCoks4b81vLQU9Pz0PnXw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950226D1D333221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950226D1D323221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950226D1D323221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091E1A1E7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091E1A1E7B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023920265</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091E1A1F7B21E0401F0A05993966</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UVTC_PrimaryEmail_Invalid_Role_dsp:customersupport_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="0b739aae-ad46-4e77-8f9e-8267d1cbca32"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSPCS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3A5j1vGdy6uQBXhknE2IRkgTCYvW0JuQBNbdizZXL5+JRM7QC6b2SqqKLVb3ae7j450zlAUWl6XMUg5iani99vqPw5qGnZj4WqNehNrjttsaMiy6lodzecNt+XiprVQFZ+xDHzKOKK8rVqG6WiGq5n21LI92/IMt2a6jUdVmUHKRGjhUjNUZROFlHlF2raapdSLESPMoygC5nHsTbo3157w9FCJSe2c71EWCdPOivPE03VcCwBDGOIajiP9XD/yOQ+YNyFLiniWwkvOgLXVl73r9bq2tmtxutQtwzB0o6ULn4CR5Zna+VZuhsCni3i/7iEaU4JRSHZIgroBvooDpRsu45TwVfRBaFM3DRlagw3WsOnQM1V/TVCg+2KkI5ApQxpbIbMMNoYFpEAxKPdjv62efW2C+73TFFG2iNOInaz/DBLQHMI4gUBjZWUluq9HfKddnXPAnk9xmDGSw0jSJEEYmHKXwoJsrgkT5AuYUoxf2TDxIyXLAP/JWM71Q6wCuv5Od/pkCYz/n5kdzmsfZYbCDDo+D7Igj7hdp9P7wa8AjxJ35NbH+dBoFxAOnfegqnG/rE/JWnHrZdPjLLPc2f0umexas20yHuD6z7tGE60vr1rxaEW/P8waa74czEb1+mg5o/79xUPvJ/01XT/N4WIZ/v0Y301bmWNcPdjfrq+N7uLK7u9+Pw3M9ah7Z1z+WNWv8skTeR7k86dhI7/fTQG1LkM273H7uxHe/sXS26R+PXcW6NK0n/n80W+09OHom/6Dp2YX7bajce/iMYKd5bRfazqs4dhYSsIkm/8GzMulpIffV4ZiXoh/Li/SQgJtUbh6idQoxoFytSN3SWnxMiFAJPDEMPfrYcs1LKtft81hczi86A0MxzCHRtdotFqGNTBLDdqjOIHYi+mCyFxSZff8+RwgjjwGNIBUy+MMr4Cpn0TsI44Un47F4Ygpg2ksVNyMGM8XEU2Wztbkjg277TbKt/lSVUYxv6W3aXfBIT2QbmdqWEfSPQZMEgJS3yXBmWA446IXzyjPeGjWclSjkIkbIJUi7FlO09UZiZIQJFI9ioMshFqySorO6Gz/b2kIs8I6HkyLg/dhXaffyhYIn4BIByZruQAxRnhzB5meWxbyccHuYcFl+G4WEHm+RD95SvAeyfGnV5pIflQcERWVkCvPU8NRVP20oCpRkBNcEb26oYXAi+PfKcfxjGrPtSzPs2IADSltqQivC4Uz9QngTOjTdho/AdWrEPqXrocK9Unmyn6ML+MrOuGIQyToohTLL7wNJsDk28AXPN989eFxlFL0jcOGv2frheIJIRF/+srAHpZ+wnwn/tZxGryO651YB3lEneJBwAldypW8CLYfkALHIiwRyhWnh8HfC/Be8mNj1eQKCxdsmmccPv6iSElqqwjjOKPc76uF4VAmC5x8m4D36vQmTCHFL3frhn14tz7cXE+EYEVIrXzJfztrpKALBlVe4QWWtroRT0WRnC4PZPkF4BtlNluWYxiW3XONI2V27X7VwKNKOm/Mby0HPT09D51/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950219240033C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950219240023C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950219240023C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D631F8FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D631F8FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023924266</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D631F9FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UVTC_PrimaryEmail_Invalid_Role_contentprovider_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="d0debe93-8696-4fab-8f3d-ed59313836ac"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CON"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCON"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC2QhUUFKC+2yBUoL7V5ejowzgEviUF+A8uuPHZoU6OV0j4SEPBnPfDPz+bNPOUoTL4w4ByZIRo1uu2n+U8currqNieX6MVi1uouswIWGhRqB5zho4oJbM40u5xK6lAtERdP0HLdmOb7lVsdeNax6odOo+J73xzTugXEVWrlUHNPYpAnlYZ62aUpGwwxxwkOKUuChwOEo6vdC5RmiApPZOt2hzBOy1lyIZWjbuBIDhiTBFZyl9ql94HMa83BEZhQJyeA5Z8yb5vPe9XpdWVcrGZvZqiDHdgJb+cSczE7M1pdiM8RdOs1263NEM0owSsgWaVB9EPMsNqJkljEi5uk7oV3bdXRoCzbYwm6Nnpj2S4Ic3ScjHYBkHFl8jtwi2C1MgQHFYNzddpvmyecmuNs7ZojyacZSfrT+O0hAV5BkS4gtXlRWoPt8xDfa1ToFHHYpTiQnKxhomiwRBm4MGUzJpke4Il/MjXz8xoarHylYBvhvxnJq72NV0O03utMmM+Di/8xsf167KPcokdD69XhzdXd3G1+yy5+x/00+LZzO9Ov3SMqsmUPYd96BKsf9vD4ma8mt503rof2rP3jYnLFBW/wUYsCSFLZ+/eI+uhgOY16t18feYH32kES91bA/ChYYfz2f3S/i30Pne6d+3/7Zd+9ntM9Woy+LZBSzaZVNvD900m9sJ1ed6mAQ3awi9OPh2zzA7VEwZ2PB5onc9obb9veHSyrtzpXXke0oOn9Cv8cPG/8KbXs3X66HNzXZm4qxfVmvp2edaa/WfKlpv4ZDYyEJIzl5ACyKpaZHt21cqHkh8bG8aAuJrWnuGi61RnEBVJgtvUtLSyiVAJE4VMPcrS8C3/FcL3KCWt3vfDvvODXHvXAixw8CJwjOCg3aoTiCeJ7RKdG5tMru+PMxQJyGHGgMzFplEs+Bmx9EbCOBjC69VYcjoxzGmVJxN6a8ugmCRT12l+5sMsUci4WzmPumMcjENb1m0VQA29Pu2tjxDrT7FjBZEtACrxnOFcW5UM14RCspEreyQhUKUl0BTKtw6NUavs1JukxAQ7XTLJYJVJbzZd4am+/+PQthnltvO+P85L1b2PG3ogfKJybagetazkDNEV5dQm7oF4W8X7C/X3ARPpIx0QdMNVQwgndIDj+98EQTpCSJqqiAXHoeGw6i2scFlYniFcEl08srWim8Ov+tYhyPqPJYkauVzAdQ19rGVHhbSZxrjwBLJVBP42wB1C5D2J+6H0rUR5lL+yE+KeZ0JJCAVNHFyJefeByMgOvHQVcRffPZl8dBStU3ARvxlu08UW8IjfjDZwYOsfZT5qH6W2csfhnXG7H28qg61YtAEDrTK30TPL1DCpypsERJV8b2g78V4K3kh8ayySUWodg0kQLe/2JoTWqaCONMUtFtm7lhXydznOJpCeGL06swuRY/X64b/u7l+qvfGynFSpFZ+pL/drZIThcMpr7DcyxNc6Peiio5ne3p8jPAV9LsuZ3OWaN94Tm1UprrSpq9tls28KCS1ivza8teT4/PQ+tf</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950221EEB8EF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950221EEB8DF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950221EEB8DF204E0401F0A079902D1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A09475E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A09475E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023927421</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A09485E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UVTC_PrimaryEmail_Invalid_Role_contentprovider:customersupport_with_TokeType_validateEmail_(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="6e605fa8-e196-43bb-85a4-cccca93f6029"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CONCS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCONCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj3dKW6ACHWEGBa4oqIcX9fjlTky3Jdom2KRQ/PU3KbQCgtdzZ5hhst3sPrv75EnOOYrCstvmHGJBGNX6nab+j2OhypmNsQGe5xnVCtgGqlmecVZvAEKO33ipWrrW5zyBPuUCUdHUy5ZdNSzHsCuTcsWtlF3bLtXqlWdde4CYy9DSpSR3pVFIuZulbepJTF2GOOEuRRFwV2B33B4OXOnpohyT3jpfo8wSxq2ZEHPXNHHJAwxhiEuYRea5ueNz7nF3TAKKRBLDJqfHm/pm73K5LC0rJRYHZtmyLNNqmNLH4yQ41Vsn+Wbw+tRn6/UloowSjELygRSoIYgZ87R2GLCYiFl0JLRt2pYKbUCKDWxX6alufibI0P0w0g7ImCODz5CdBxuBDzFQDNp01G/qpz+b4HrvJEaU+yyO+N76zyABXUDI5uAZPK8sR/fziAfa1ToH7PYpDhNOFnCraDJHGLh2H4NP0gHhknwe17LxaymXP5KzDPCfjOXc3MYqoZsHutMhAXDxf2a2Pa91lAcUJtCaPgRsaU4n05vucvjXDNe6d09+DNfdarWZQdh2XoMqxr1Z75O14NZm00WXJ73f0+ubycCbXT/2Eiswa95Tm/zqiFHApqMorKUTM1wN768eH+uPq3fidAaX1cChv59GdzeLs5s3M73t0V/e60knEXTycZde3BGGK7UQD98/SDh/GzzfYFRLh6/X9b8vl4vVS+Tf2LV7ZxrXVo1OG64DZGI0sdCDiCvpNXn2B9HJuDp+RV79aoauHtnkY8rKw+ZnTds17BpzSRgnL6+ARb5U9Oh3tJ6cFxLfy4uyEM/wM1d3rjSKC6BCb6ldSlrcRAoQ8Vw5zPW613Bsq1GuOXWnV2ucOV2ratk9q205jUalUa/kGrRGsQfxklGfqFxKZdf8+R4gjlwO1IPYWLAEz4Dr30TsIIG0Ph3Jw8EohwmTKm6/B+GL5QPMQ7KqB6kNVTz3E9/WtVsm7uhd3PYFxFvSXZ1Y5R3pHgEmcwJK3xXBuWQ4F7IX72iRiNAuLVCJQiJvgFiJsFuu1h2Tk2gegkJqRsxLQijNZ/OsMyZf/5cNhHlmHXUn2cE7Wtf+t7wF0scjyoGrWi5AjhEO3EFWXsjxgp3tgvPw7cQj6nzJfoqY4DWS3U+fNFH8KDgiK8ohF577hp2o5n5BRSJvQXBB9OKGlgIvj38rH8c7Kr2XksUiyQZQU9IWy/CmVDjbHANOpD6tJuwNqFmEMH90PRSo9zIX9l18iZjRsUACIkkXLVv+4G0wBq7eBn3J8/SnD4+dlLJvAlJxyHYZyieEQvztKwO7WPlJ8738W7LY+xzXgVhbeWSd8kEgCA3USl0EqyOkwEyGJVK5WLwd/FCAQ8l3jUWTCyxCsuklEXD8i6YkqakjjFlCRb+jZ4ZtmcxwitUc3E+nL2EyKd7crSk/erc+DQdjKVgR0gtf8t/OBsnogkFXV3iGpamn8qkok9NgS5Y3AL8qs92rd+uNy4uKtavMZ+2igTuVtL6Yv1q2erp/Hlr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091F8E8ACB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091F8E89CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091F8E89CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510927585F7965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510927585F7965E0401F0A05993983</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023930822</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951092758607965E0401F0A05993983</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UVTC_PrimaryEmail_valid_Role_DECE_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="39a70e35-334a-4489-9019-220416b1f22e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DECE"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSx1XIhUtJVJC4lLM5pbRcWg59WRlnAHMSO40dSvvr1w5NCpR2e1ZCQp6MZ76Z+fzZlxxFoeO1OIdEEEY1v9vQ/6njBa7VETIAOdiowDww6nULGRfOAlfndWm1Al3zOU/Bp1wgKhq6Y9kVw6oadnnilL2y49nVUs2qPeraAyRchpYuJUvXtlFIuZelbehpQj2GOOEeRRFwT2Bv3Lrpe9LTQzkmvXm5Q5klTJorIWLPNHEpAAxhiEuYRealeeBzGXBvTJYUiTSBt5wBb+hve5+fn0vP5RJLlqZjWZZpuab0CThZnuvNs3wzBD5dsN26gyijBKOQvCIF6gbEigVaK1yyhIhV9Elo27QtFdqALTawXaHnuvmeIEP3zUgHIBOODL5Cdh5sBAtIgGLQ7kd+Qz//3gR3eycJonzBkogfrf8MEtANhCyGwOB5ZTm670c80a7mJWDPpzhMOdnAQNEkRhi4dpfAgmz7hEvyBVzLxq9tufyRnGWA/2Qsl+Y+VgndPNGdLlkCF/9nZvvz2kV5QGEKTTGo0GC42Awhfrhb9WuvbiSqv8S1b88aGYR95x2oYtxv62OyFtx627TqufdP0+HdzaL3unns+tv4x+DlcTAdvk7cwXxy0yMB2l6tV+nMdO/mvVGn5o6gb9HH+fi6brNb2monvadpu5JY9bPObD2sxSOfhD/xff9WjCJ3fX01ms0GAxIPEtYZXs/WNg3bQxCxWK6hJf76cTNNr8aPFV55LrOw7NZny6lbm7hnP/++nfzmPTafhZXpw6o/nA4b7zXt13BozCVhnM7XgEW+VPTwu1pPzguJr+VFWUhgLDJXL1YaxQVQoTfVLiUtXioFiASeHOZu3XOrtlUrt9u9jmN1bPfKqlh2z2pZF65bLVftXIN2KI4gdhhdEJVLqeyOP18DxJHHgQaQGBuW4hVw/YuIXSSQ5tORPByMcpgwqeJ2bMfrxe+XF2rZc5th263xWpomrq4NmLilt0lrISDZk+7KxHIOpHsEmMQElL4rgnPJcC5kL57QJhWhXdqgEoVU3gCJEmHPqdSrJidRHIJCakYsSEMoxas464zJd/+OgTDPrKOrSXbwPq3r+FveAukTEOXAVS1tkGOEE3eQlRfyecHV/YLz8K00IOp8yX6KhOAdksNP7zRR/Cg4IivKIReex4aDqOZxQUWiYENwQfTihpYCL49/Mx/HEyo9ldLNJs0GcKGkLZHhTalwtjkGnEp9epmw30DNIoT5reuhQH2UubAf4kvFio4FEhBJumjZ8htvgzFw9TbwJc+33314HKSUfROwFadsnVA+IRTiL18Z2MPKT5rv5N8zS94LPxVrL4+sUz4IBKFLtVIXwcsnpMBMhiVSuViyH/xUgFPJD41FkwssQrJpngr4/IumJKmhI4xZSoXf1TPDvkxmOMVLDN6704cwmRS/3a1b/und+uumP5aCFSG98CX/7WyQjC4YdHWFZ1ga+lY+FWVyutyT5TeAR8psOU7nolq2pUZX6vvKbDnddtHAg0qaH8wfLXs9PT4PzX8B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C7531A5148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C753195148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C753195148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951063BBFC20C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951063BBFC20C19E0401F0A07995351</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023934486</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951063BBFC30C19E0401F0A07995351</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UVTC_PrimaryEmail_valid_Role_Portal_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="d3230972-60d2-44a5-bb01-1f437f5e8278"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb6M6EH7fX4HYxyPCJdAU1ERKk6ZLN027SXrZvhw5ZgjegqG2yaW/fg0p5LJpT/dIkSIP45lvZj5/9hlHSWx5Xc6BCZJSxe+31X8tA1zbcZrayWnT1mzbDTQ3tJBmnRguBK4FlnuqKj7nOfiUC0RFW7UM09YMRzObU6vpNS3PdBvWifOkKvfAuAwtXRqGqqySmHKvTNtWc0a9FHHCPYoS4J7A3qR7PfSkp4cqTGrnbIOyTMg6kRCZp+u4EQCGOMYNnCb6mb7ncxZwb0LmFImcwVvOgLfVt73L5bKxbDZSNtctwzB0w9WlT8DJ/Kva+VJthsCnYbpZ9xBNKcEoJq+oAHUNIkoDpRvPU0ZElLwT2tRNowitwQpr2LTpV1XfJijRfTLSHkjGkcYjZFbBxhACA4pBuRv7bfXr5ya42TtliPIwZQk/WP8dJKALiNMMAo1XlVXoPh/xSLs6Z4A9n+I452QBo4ImGcLAlVsGIVkNCZfkC7hSjl9ZcfkjFcsA/81YzvRdrBK6fqQ7fTIHLv7PzHbntYlyj+IcOsOLaTy+S/8JJi/9O/f6eXD3aAxG4cOya7dLCLvOG1D1uN/Wh2StufW2KbQuHqLJjZsb4YDdR8nrZTDsn1739ARffu/BrcVel/fTtDW8WVqjO/3x/Bou2Ddy+2i8PM6e+M+mO55HhkhGsxi+jMb6Reb/yr+Ry3H2MM9DN2pa9DJstbL45vKhNfO/+evp96fe4OpqSFE2Yo+t2ehuzWc9/PTj/DKaj5+t7OQl+uHHX6zRs209PP+03fvbCWfT1ZXd3ta0W8O+sZKEST77BVhUy4Iefl8ZyHkh8bG8FBYSaGHp6mWFRnEBVKidYlchLV4uBYgEnhzmZj1wHaNvGc656XQHrYF9YdiGOTC6Rst1nZMTt9KgDYoDiL2UhqTIVajshj8fA8SJx4EGwLRFmuMIuPpBxD4SSPHpWB6OlHKYplLFTac1fyXRjCSnc2QK5Ii1vXY5D0BVRqm4oTesGwpgO9ptTw1rT7vHgElGoBD4guFcUpwL2YwXtMhFbDYWqEEhl1cAK1TYs+xTR+ckyWIooOpJGuQxNLIoK1uj882/pSHMSyvhOEuZQLFZHsB36zv8VrVC+gSkcOBFSecgxwlH7iKjquf9up3duqvw3TwgxTmTfRWM4A2S/U9buhQ8qbmyLaxCXm84NOwF1w/rqvMFC4Jr3tcXttR7qQadajgvqPHSyBeLvBxHq1A6JsPrUvBMfQI4l3K1nqbPQPU6hP6p26JGfZC5tu/jy0VEJwIJSCR5lHL5iafCBHjxVPAl7VeffYfspZR9E7ASx2y9WL4oCsQfPjqwhws/ab6Vf8uUBdtxHYm1k0fWKd8HgtB5sSruhfU73MCpDEukkKVsN/ixAMeS7xvrJtdYhGTTLBfw/helUKi2ijBOcyr8vloadlWzxCnWGXhbpz/ClMr8dtWu+LtX7eP1cCL1K0Fq7Uv+21kjJV2wFCvpX2Jpqyv5cpTJ6XxHpd8AHhPqpmt1Dft0UAu147pWq7c9knuVdP4w/2nZ6enheej8Bg==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205392B048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205392A048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205392A048FE0401F0A059927C1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D205B15AF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D205B15AF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023938140</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D205B15BF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UVTC_PrimaryEmail_valid_Role_Retailer_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="0ebcd9e0-767b-41c8-bd29-90ffcc645309"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIhQRoVJC4tuzegdKevhwZZwIuiRNiByhfv+3QpEBpT/eRkJAn45k1M8vLPmcoDCy3yRgknERU6Xfq6r8V5NUMVENaGRs1zS4jS6uZZVsrO6Zv2FUDzgysKn3GUuhTxhHlddUyTFszHM0sj6yyW7Zcyyo51eqLqowhYSK0cCkZqrIOA8rcLG1dTRPqRogR5lIUAnM5dofNm2tXeLoox6Q2zrcos4RJY8Z57Oo6LnmAIQhwCUehfq7v+Zx7zB2SKUU8TeA9p8fq6vve1WpVWpVLUTLVLcMwdONMFz4eI9MTtfEr3wxen/rRdt1GNKIEo4BskAR1A3wWeUozmEYJ4bPwi9CmbhoytAZrrGHTpieq/pEgQ/fDSHsgE4Y0NkNmHmwAPiRAMSiPg35dPfnZBLd7RwmizI+SkB2s/w4S0CUEUQyexvLKcnQ/j3ikXY1zwG6f4iBlZAm3kiYxwsCU+wR8sr4mTJDPY0o2fmXNxI/kLAP8N2M513exCuj6ke50yBQY/z8z253XNsoYBSk0xp3hbXvcQte3l2NSeXm9Swbpw3308miyegZh13kLqhj3+/qQrAW33jc1H8nDxdi4fLPGUXprGxd+TIPNtDxZEi/ebGo3p63NfHU3aC99yl5vdd/j098vz/O2V7m8f+uw7mayqPhPrfHT7O4XHZwijucv9vK0dfOc3DyVW+FiEegXXYsvL+/bDq7eB2+T2pPdxTCK/drrJfUvrjZXl+lmcTFtrk20vp7aL8Sx+7/mlXb4T2c2as+6V/1JcLf4/VD/qGm3hn1jLgnDdPIKmOdLSY9+R+mJeSH+vbxIC/E0P3N1Y6lRjAPlakPuktLipkKAiOeKYW7XvTPH6FhGpdWrOd2q0+satmH2jKZRPTtzKpVerkFbFAcQ2xH1icwlVXbLn+8B4tBlQD1ItGWU4hkw9ZuIHcSR0qcDcTgiymAUCRU3fex5q3W6npM4MBPqLVZzMiGQ1lTlNuJ39C5p+hySHe22R4a1p90DwCQmIAVeMpwJijMumrFAy5QHZmmJShRScQUkUoVdy645OiNhHICEqoeRlwZQimdx1hqdbf8tDWGWWQfdUXbyvizs8FveA+HjEenAZC0tEHOEI5eQmRfydcHObsF5+GbqEXnAREN5QvAWyf6nD55IghQkERXlkAvPQ8NeVP2woCKRtyS4YHpxRQuFF+e/kY9jgUqLUrpcptkAqlLbEhFeFxJn6kPAqRCot1E0B6oXIfQf3Q8F6oPMhX0fX8pndMgRh1DQRcmWP3gcDIHJx0FfEH3905fHXkrRNw5rfszWDsQbQiL+9pmBXSz9hPle/K2ixPsY15FYO3lEneJFwAmdypW8Cd6+IAWORFgipCtKdoMfC3As+b6xaHKBhQs2TVIOX39RpCbVVYRxlFLe76iZYVcnM5z8LQb3w+lTmEyL3y/XNfvycn2+uR4KxQqRWviS/3bWSEYXDKq8wzMsdXUt3ooiOZ3u6PI7wCPSXO05tmN1Wva+NFedooF7lTQ+mT9bdnp6eB4afwA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D207F5462DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D207F5452DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D207F5452DB4E0401F0A07995675</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D206BF85E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D206BF85E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023941323</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D206BF86E75FE0401F0A0799566F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="3e7cfc45-0b71-4dfe-85bb-f9499bf95872"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr6CcxynjC1e7AlWEy6x3QiBAMiQvW0JqgxJbNpIMZL5+ZRM7QEg2s1VUUWq3uk93Hx3pUqAwsN2OEMAljVjJ67W0f4AAIlVE9Ea1YurVmgU6qjaJbsHCcZoOqdfB1EqeEAl4TEjEZEuzTauqmzXdqszsiluxXbterjrOo1a6By5UaOVSVrt2YcCEm6VtaQlnboQEFS5DIQhXYnfaGV67ytNFOSatfblHmSXk7ZWUsWsYuEwAQxDgMo5C49I48rkkwp3SJUMy4fCak4iW9rp3u92Wt5VyxJeGbZqmYTqG8iGCLi+09rd8MxCP+dF+3UUsYhSjgP5GKaghyFVESp1gGXEqV+EHoS3DMtPQOuywjq0qu9CMtwQZui9GOgLJBdLFCll5sAn4wIFhKN1NvJZ28bUJ7vfOOGLCj3goTtZ/BgnYBoIoBqKLvLIc3dcjnmlX+xKw6zEcJIJu4CalSYwwiNKYg09311Qo8hFRysZf2gn1oznLAP/JWC6NQ6wKunGmOz26BCH/z8wO57WPco+CBNr9x6E/e/Jgfct3PwbxMwI8sld03Am9Vgbh0HkPqhj36/qUrAW3Xjdt2bzZTWKje7tq1nDcZb/oxO8/jCt16y8ym39fOD9t0RtO5/bPTv3l9t6bc2tk9GqSTEYzL3qyF/7v3abnjO4eybe5mIT9lzqMvfFNMBjcN8LN0+p5sX6EIb+Twx/8xh/e/rq68xtkOHh+nIrFekXE7cNoO+JPnl2NEzS93kTfjc324dvzA67MO8LkN4b5/DebTjde662mwxqOjbkkTJPFE2CZL1N6eL3SQM0Lyc/lJbVQovuZqxunGiUkMKm1012ptLiJEiBKXDXM/Xrg1Ezb7vadavPKcrr1vlk1rYHZMWuOYzp1J9egPYoTiN2I+TTNlarsnj+fA8ShK4AR4PomSvAKhPZJxB6SqOSxiTocERMwi5SK+xwvuY+syoI06dM6WtiVSkQaa610E8kRG/GOL4EfKHd1ZtpHyj0BTGMKqbyn/BaK4EKqVqzRJpGBVd6gMoNEXQA81WDXrjZrhqBhHEAK1AgjkgRQjldx1hhD7P9tHWGRWXvXnek4O3kfFnb6Le+B8iE0dRBpNVeg5ghnLiErL+XjkmuHJefhOwmh6QFTDZWc4j2S409vPEkJUpAkqykHXfieGo7iGqclFanIhuKC68UlrTReKUA7H8kaldflZLNJsiE0UnXjKryhRM4ypoATJVEvs+gZmFGEML50QxSoTzIX9mN8iVyxqUQSQkWZUrb8wvNgCiJ9HniK6ruvvj2OUqq+SdjJc7ZuoF4RKeJPHxrYxamfMo/V3zbi5G1cZ2Id5FF1qjeBpGyZrtK74OUDWuBIhaVKvCJ+GPxcgHPJj41FkwssUrFpkUj4+EspVaWWhjCOEia9npYZDpUywylfYnDfnN6FydT49XrdiQ+v1/nweqo0K0Ra4Uv/21mnGV0waOktnmFpaTv1WlTJ2fJAmV8BvhPnSq3Zr9X71lXVPhbnRq1o4FEl7Xfm95aDnp6eh/a/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502358E56F1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502358E56E1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502358E56E1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022CE948B19C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022CE948B19C6E0401F0A05990969</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023945197</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022CE948C19C6E0401F0A05990969</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UVTC_PrimaryEmail_valid_Role_Linked_LASP_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="7a49d9ac-e429-462f-8b0c-861306c29408"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyLKeaxCboRLVJBoKN20UHoK7VZ9WRlnAHOCk9oOl/76tUOTAqXdnpUiRZ6MZ76Z+fLZ5xwtY8fvcA5MkIRqYbel/zNFEWDsYMOq1ZBRdW3PaNQd23Ab9anrVC0PrIauhZxnEFIuEBUt3bHsqmF5hu2OHdd3Hd+1K42a96xrj8C4DC1dKpaubZYx5X6etqVnjPoJ4oT7FC2B+wL7o86g70tPHxWY9Pb5DmWekLXnQqS+aeKKBAlxjCs4WZrn5oHPecT9EZlRJDIGbzkj3tLf9q7X68rarSRsZjqWZZlW05Q+ESezn3r7R7EZopBOk906QDShBKOYvCIFagBinkRaJ54ljIj58pPQtmlbKrQBG2xgu0p/6uZ7ghzdNyMdgGQcGXyO7CLYPUyBAcWgPdyHLf3n9ya42ztmiPJpwpb8aP1nkICuIE5SiAxeVFag+37EE+1qnwP2Q4rjjJMV3CqapAgD1+4YTMmmT7gkX8S1fPzahsuHFCwD/CdjOTf3sUro5onudMkMuPg/M9uf1y7KI4ozaGf14O++Ux2zsYOuar97Exe9XtlxsD6zWjmEfecdqHLcb+tjspbcetvUTy+IfTuw8OK6Fl3cDnvkyQu8YQ0Wo3TivOJs2Ltdd6g12r40B/RGnE1qz/PxBBrsOr5pXA2am/7w8sy67Jth80eQhE8udIOq8/jX9e3lTXBj0uDuehw8PI86Ygh4e1/9C4lf4fy1yRZueBaFIrbBeohXv7yn8Opxsto+MD5I4Tn4sZjaa2LdjFmQWutJQq+2v1rvNe3XcGgsJGGUTRaARbFU9Ai7Wk/OC4mv5UVZSGRMc1c/VRrFBVCht9UuJS1+JgWIRL4c5m7da3qW43RrruN1e72L4NKqWnbP6lj1ZtNyLu1Cg3YojiAGCZ0SlUup7I4/XwPES58DjYAZqyTDc+D6FxG7SCAtpPfy50goh3EiVdyeOl59yaLFS1Tj1dqqvnh9IbHArq7dJmJIh6wzFcD2pLs6tpwD6b4HTFICSt8VwblkOBeyFy9olcmhVlaoQiGTJwBTIuw71YZncrJMY1BIzWUSZTFU0nmad8bku7djIMxza7/fGd3lv96nlR1/K5ogfSKiHLiq5gLkIOHEKeQUpXxesrdfchG+k0VE/WGyo4IRvENy+OmdKIohJUvymgrQpe+x4SCueVxSmSpaEVySvTylpchLCWgXI3lBlZdKtlpl+RDqSt6YDG9KlbPNEeBMatR2nPwGapYhzG8dESXqo8yl/RBfJuZ0JJCApaSMli+/cT8YAVf3g1ByffPdy8dBStk3ARtxyhbE8hqhEH9508A+Vn7SfCdf64RF7+M6EWsvj6xTXgoEoTO1UofB9hNa4ESGJVK9ErYf/FSAU8kPjWWTSyxCsmmSCfj8i6ZkqaUjjJOMirCr54Z9qcxxim0K/rvThzC5HL+drxv+6fn6NOiPpGgtkV76kv92NkhOFwy6OsZzLC19I6+LMjmd7UnzG8CP6uw2nUZNvpu1Up09qc7NRr1s4EEl7Q/mj5a9nh7/D+1/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950223928612296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950223928602296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950223928602296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022D6325DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022D6325DFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023948903</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022D6325EFFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UVTC_PrimaryEmail_valid_Role_AccessPortal_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="9b64718c-4e32-4ccc-966c-4e691644dc99"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jS55APSCBRQUqh3JtdPnoJ7W37snIdB9wmDrWdAP31a4cmBUq7vSshIU/GM2dmjo99wUCaWJ7PGKIcZ0QJBl31H8cGsRs7sRbFoKO1OghqHRe2tdajY1q2YyMntlQlYCxHAWEcEN5VLcNsaYatmc251fSalte0G4bbelCVW0SZCC1cGoaqbNKEMK9M21VzSrwMMMw8AlLEPA690B+PPOHpgQqT2rvYoSwT0t6S85Wn67ARIYiSBDZgluoX+oHPRcS8EC8I4DlFbzkj1lXf9q7X68a62cjoQrcMw9ANVxc+EcOLc7V3Vm1GUUDibLfuA5IRDEGCX4EENUZ8mUWKnywyivky/SS0qZuGDK2hDdSg2SLnqv6eoET3zUgHICkDGlsCswo2QzGiiECk3MyCrnr+vQnu9s4pICzOaMqO1n8GCZECJdkKRRqrKqvQfT/iiXb1LhD0AgKTnOECTSRNVgAiplxTFOPNCDNBvogp5fiVDRM/XLEMwT8Zy4W+j1VA1090Z4AXiPH/M7P9ee2i3IIkR71FejX2B3Ty+ntCt8bScHJiDbN7RHXWLSHsO+9A1eN+Wx+TtebW2yaa/Mps8PAcoGVhh0WzE93qN7Hr/xjPB2bx++emM7oP5v6vhEfj7W0Mr+d380nq3I14Cv++XVHeub/60Z7PwEP/51nyOHNHdMQiOGu7DISxb6+eFxM/2M4fx53L6xcyXU9MNnkadkLjaTKYtQwWvZjD2J/mk/WUXT1sF8RPYas9RWfLZXC/fr0cOOFNMHyK/uoXN933mvZrODRWkhDmj08I8mop6REMlKGYF+Bfy4u04EiLS1dvJTWKcUS42pO7pLR4uRAgHHlimLv10LUNy7KHfddpm822e2W0DHNo+EbbdQ1r0K40aIfiCGI/IzGWuaTK7vjzNUCYegyRCFGtyHK4REz9IuIAcKAEZCYOR0YYmmdCxaP0ObcKt73oLJq4yek278RO01GVScanZEr9mCO6J9ytuWEdCPcMQbzCSKq7pDcT/GZcdOIFFDlPzEYBGgTlQv+plGDPanVsneF0lSCJU0+zKE9QY7VclX3R2e7f0gBkpdXv96/CsDx5nxZ2/K3qgfCJsHRgspxLJOaITlxCVlXL5zXb+zVX4f08wvKAiYZyiuEOyeGnd55IgtQk2RVVoa6djw0HgfXjmupcUYFhTfb6lhYiLySgVw3lBTReGnlR5OUY2lLeqAivC5Uz9RDBXGjUdp49I6LXIfRvXRE16qPMtf0QX86XJOSAo1SQRimX33gfhIjJ90EguL757uPjIKXoG0cbfsrWT8QzQiL+8qUBPSj9hPla/K0zGr2P60SsvTyiTvEo4Jgs5EpeBttPeAEzERYL9crofvBTAU4lPzTWTa6xcMGmx5yjz78oUpa6KoAwywkPBmpp2JfKEiffrpD37vQhTCnHb/frhn16v96NR6EQrRSotS/+b2cNl3SBSJXXeImlq27Ec1EkJ4s9aX4DeKTOpuGaV6bv+u1Ly6zV2Xbdpus4dQMPKul9MH+07PX0+Dz0/gU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091E1A9B7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091E1A9A7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091E1A9A7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950225FC9671379E0401F0A079902D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950225FC9671379E0401F0A079902D7</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023954218</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950225FC9681379E0401F0A079902D7</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UVTC_PrimaryEmail_valid_Role_DECE_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="f8693770-39b8-4842-be75-ea9d74d72c30"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0TpYxVyIVwSARItvdApMAP0cublyHU2idvESWMn0H792IGkQGlP50hIyDvba6998bI7DEWh5fYZg5STmCrDQVf9F1nthm0325pRrz9qNl60NWRblma3H73GwvGauGWqypCxDIaUcUR5V7UM09aMhmbW51bdrVtuvV1rNq3fqnIHKRPQwqVmqMoqCilzi7BdNUupGyNGmEtRBMzl2J31Rzeu8HRRyUntddYsi4BpL+A8cXUd1zzAEIa4huNI7+g7Ph2PuTPiU8SzFDYxPdZVN3uXy2VtWa/Fqa9bhmHohqMLH48R/1jtHZWbwRvSRbxenyEaU4JRSN6QJDUCHsSe0g/9OCU8iD6BNnXTkNAarLCGTZseq/p7gILdN5F2SKYMaSxAZgk2hQWkQDEot9NhVz3+XgfXe+cpomwRpxHbW/8dJaA5hHECnsbKzEp230c8UK5eB7A7pDjMGMlhLMckQRiY8jOFBVndECaGz2NK0X5lxcSPlFMG+G/a0tG3uQrq+oHqDIgPjP+fnm33a41yh8IMevQ+Of81e3qY3IaXwfzc7J9P/rHzaZoz1i0obDuvSVXt3qz3h7Warc2maXznE+/yFJ+kjcHbLHi8nD1cvY6uTqd+QpDd9weW3w/iX4ZZ98c4+nFyT6xLc+L7ieHdXT/+HjVGJy/BveWDPz3CZ/44nxtBNlzRKZ9Mp09Pb0/L62QEp9bq5NrjwfhGf7qy6EBv+eM7Jz2ZBadvxrODzBc9QoMfWTz3aYOHcEWPBtfh8+3dZNZe0pVvtu7t89vue07bOewaS0mYZY9PgHm5lOMxHCgXol+Ify0v0kI8bVG4uonUKMaBcrUnd0lpcTMhQMRzRTPX6wunYRqtdt1uXVwYpmOfG7ZhXhh9o+E4daNvlhq0ZrFH8SymCyJjSZVdz8/XBHHkMqAepFoeZzgApn6BOEAcKUM6FYcjpgzmsVDxdh4JUCvPAzNzePO15TSfPeKAqoxjPqGTtL/gkG4ptz03rB3lngImCQEp73K+mRhwxkUpXlCe8dCs5ahGIRMXQCo12LXsdkNnJEpCkET1KPayEGpJkBSF0dn639IQZoW1qCpmxdn7NLX9b2UVhI9HpAOT+ZyC6CQcuIasMpnPk25sJ13C9zOPyCMmSspTgtdMdj+9T4ockWpMNlmVtCvvfcMOsr6fVBXMywmu5r26qIXOCxXolW15QbWXWpbnWdGIllS4VMDrQuhMfQY4EzL1Oo+fgeoVhP6tW6JivRe5su/yy3hAZxxxiMTYKMXyG0+EGTD5RBiKcV999/2xE1LUjcOKH7KdheIlIRl/+djALpZ+wvxT/C3j1Htv1wGsrTgiT/Eu4IT6ciXvg9dPBgPHApYIAYvTbfBDAIeC7xqrIldcuJimx4zD518UqUxdFWEcZ5QPB2ph2FbLgid/TcB9d/oAUyjy5opdsU+v2IfRzUzoVoTUypf8t7NGinHBQqaEf8Glq67Ei1EEp/6WOm8I7gm0YVl1x2q3zizLaW4LtOG0W1UBdzLpfTB/tGzVdP889P4A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502239287F2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502239287C2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502239287C2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951078347FF0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951078347FF0194E0401F0A059930A1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023957434</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951078348020194E0401F0A059930A1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UVTC_PrimaryEmail_valid_Role_Coord_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="339517f8-cb14-4a22-be31-0e964c2ce629"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HqeMLxgMrkAVhElCbjMDhEzysiXkNhZrS8aSueTrVzKxAwzJZreKKkrtVvfp7qMjnXGUxI7f4xwyQRjVhoOO/lfTDdyZ69qGXbeR4WLXMtoe8owgdKBphZ4dBJ6uDTnPYUi5QFR0dMeyXcNqyC0Tp+7XHd91am7Le9a1KWRchpYuNUvXNklMuV+k7eh5Rn2GOOE+RQlwX2B/3Lu79aWnj0pMevdsh7JImHUjIVLfNHEtAAxxjGuYJeaZeeBzFnB/TOYUiTyD15wB7+ive9frdW1dr7FsbjqWZZlW25Q+ASfzr3r3S7kZgiEN2W59jiijBKOYvCAF6g5ExAKtF89ZRkSUvBPaNm1LhTZggw1su/Srbr4lKNB9MtIByIwjg0fILoONIIQMKAbtYTTs6F8/N8Hd3kmGKA9ZlvCj9X+DBHQFMUshMHhZWYnu8xFPtKt7BtgfUhznnKzgXtEkRRi49jODkGxuCZfkC7hWjF/bcPkjJcsA/5exnJn7WCV080R3BmQOXPyfme3PaxdliuIcurPfyyRbnbeuozhdXPRJ86Z9NX6KrxfRU6eAsO+8A1WN+3V9TNaKW6+btu7P58m3J/KIfj1FcB+u2PMkiR5dUwTXLL0bjKes75mtze/ZS2D376cwhfvHbeM7hpdJ25plz9f21k7rfOAs+Bf7ZhF8i0bkzkLhw9Xj7eWv66v6ut6/mT/cXIX9y8y7vHT6m+bL48p7ulo8NFcw9dCi5eFl/qM322zTy8eH5o079ebxl9k3z34aLfORGXghRI0pcztvNe3XcGgsJWGczxaARblU9BgOtAs5LyQ+lhdlIYERFq5+qjSKC6BC76pdSlr8XAoQCXw5zN36ot2wBo7lXLjfG3arbX+3XMu+sHpWo912vP5FqUE7FEcQzxkNicqlVHbHn48B4sTnQAPIjBXLcQRc/yDiAAmkDelIHg5GOUyYVHGbrfNU0FbDzeaNZZLHtjNrvWzSpa7dM/GD/sh6oYBsT7rdieUcSPcIMEkJKH1XBOeS4VzIXizRKhexXVuhGoVc3gCZEmHfcVsNk5MkjUEhNRMW5DHU0igtOmPy3b9jIMwLK2YsC3zMi9P3bnHH38o+SJ+AKAeuCuqDnCWcuIjqZTXvV93Yr7oM38sDog6ZbKrICN4hOfz0xhVFkoooZVkl7sr92HAQ2jyuqsoWrAiuKF/d1VLqpRB0y8EsUW1Zy1ervBiFp0Quk+FNqXW2OQacS6XaTtjfQM0qhPmpi6JCfZS5sh/iy0VExwIJSCRxtGL5iVfCGLh6JQwl4zeffYIcpJR9E7ARp2znsXxMKMQfvjewj5WfNP+Uf2s5wrdxnYi1l0fWKZ8GgtC5WqkrYfsRM4jUMJbtBz8V4FTyQ2PV5AqLkGya5QLe/6IpceroCGOWUzEc6IVhXzALnGKbgv/m9EeYQpRfb9kNf/eW/X13O5bSlSC98iX/7myQgi4YdHWZF1g6+kY+GmVyOt8T6FeARxptW1KNG62B5bWbjX2Nrrdb9aqBB5V0/zD/adnr6fF56P4D</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951092758D27965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951092758D07965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951092758D07965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D202F4E51891E0401F0A059927BF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D202F4E51891E0401F0A059927BF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023960905</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D202F4E71891E0401F0A059927BF</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UVTC_PrimaryEmail_valid_Role_Portal_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="73ed1e75-6c8f-4266-a201-060e920f762b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj1VIAgmQqCDRAi203X5Atx8vV64zAW+DHWInDf311w5NCizt7V4JCXkynjkzc3zsI44WUd3vcQ6JIIxqo35H/8drgGN7Hhh227EMpxU0DQ+3wHh229hFIbaaHtK1EecpjCgXiIqOXrdsx7Bcw25M6w2/Ufcdt9Z2nCdd+wUJl6GlS83StXwRUe4XaTt6mlCfIU64T9ECuC+wP+ldXvjS00clJr17tEZZJEy6cyFi3zRxLQAMUYRrmC3MI3PL5yjg/oTMKBJpAu85A97R3/e+vr7WXhs1lszMumVZpuWZ0ifgZPZD7x6UmyEY0ZCt1yeIMkowisgbUqAuQcxZoPWiGUuImC8+CW2btqVCG5BjA9sO/aGbHwkKdN+MtAUy4cjgc2SXwW4hhAQoBu3udtTRf3xvguu90wRRHrJkwXfWfwcJaAYRiyEweFlZie77Efe0q3sE2B9RHKWcZPBT0SRGGLh2nUBI8gvCJfkCrhXj13Iuf6RkGeC/GcuRuYlVQjf3dKdPZsDF/5nZ5rzWUX6hKIUuvVo91/OB/eTaL21rvLJCmpyf37QOny47BYRN5zWoatzv612yVtx63zQ47d1ZA5tdTpfNu8n9W3h4fdiy8cOp27xdXYbRywmw+SHv1wf2Q/s+Gk7GF9bZUzTOIvNl8vLYeH6dLe9PPa8ZnpkHQxgFrfPV5PhwnI/uefy4DMbL7M7J2cUkafI2uztzp2nG8+WYRWePNno7DPlpbt5Y7WtvSo/fZg/x+eyJw0V0ehCYTnrzNJ5myds4us7ObsDqfNS0WcO2sZSESfr8G7Aol4oeo742lPNC4mt5URYSGGHh6sdKo7gAKvSu2qWkxU+lAJHAl8Ncr4eea1utntVr9QZ2q2kPLMeyh1bPanme6zq9UoPWKHYgnjAaEpVLqeyaP18DxAufAw0gMTKW4jlw/YuIfSSQNqK38nAwymHKpIq3g1kY84iGi+Xc/Q3uQtg2WSFP134ycUWvkl4oINlQbmdq1beU+xYwiQkoeVf85pLgXMhWLFGWisiuZahGIZUXQKI02K87bdfkZBFHoICaCxakEdTieVw0xuTr/7qBMC+shOOYJQJFmNvFAfy0vt1vZSukT0CUA1dFHYMcJ+y5ixplRZ9X7m5WXobvpQFR50z2VSQEr5Fsf/qgi+JJxZXN0krs1ZZdw1Z4c7eyKmOQEVwxv7qypeJLPeiWA1qi2rKWZllajKSltC6R4U0pebY5AZxKwVpN2QtQswphfuu+qFDvZK7s2/hSMacTgQQsJIG0YvmNx8IEuHosjCTx8+++RLZSyr4JyMU+20kk3xQK8ZfPDuxj5SfN1/LvlSXBx7j2xNrII+uULwRB6Eyt1M2w+oQdmMmwREoZSzaD7wuwL/m2sWpyhUVINj2nAj7/oimN6ugIY5ZSMerrhWFTNwucYhWD/+H0R5hCm98v25x/etk+XF5MpIItkF75kv92NkhBFwy6utMLLB09l29HmZzONnT6HeCOVFv9uuUe295g2Bo6W1LdbHpVA7cq6f5h/tOy0dPd89D9Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D205B19FF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D205B19EF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D205B19EF7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107A0A7AE1761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95107A0A7AE1761E0401F0A0799554A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023964562</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95107A0A7AF1761E0401F0A0799554A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UVTC_PrimaryEmail_valid_Role_Retailer_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="182cd069-c969-4f08-9b03-5d3c0bb8ab39"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxnjTwJ4AjMJkF63ScgAKWlfOkJag1JbJpaESX79lUzsACW56Z1hhtF6tXt29+hIZxyliReecw65oBkzokHX/EVabkzmLWQRZ+5ZgXPqW4g0YysIgPgEIT92kGlEnEuIGBeIia7pOW5gOU3L9aeeH/peGLQbHafz0zS+Q85VaOXScExjkyaMh2XarilzFmaIUx4ylAIPBQ4n59dXofIMUYXJ7J1tUZYJ895SiFVo27hBAEOS4AbOUvvM3vM5Izyc0AVDQubwkpPwrvmytyiKRuE3snxhe47j2E7HVj6E08Vns/ep2gwkYnG2XfcRyxjFKKHPSIO6BrHMiHGeLLKcimX6RmjXdh0d2oINtrAbsM+m/ZqgRPfBSHsgc44svkRuFWwMMeTAMBh346hrfv7YBLd7pzliPM7ylB+s/w4SsDUk2QqIxavKKnQfj3ikXb0zwGHEcCI5XcONpskKYeDGbQ4x3VxRrshHuFGO39hw9aMVywD/zVjO7F2sCrp9pDsDugAu/s/Mdue1jfIdJRJ64nTobaTv2j6az0aLVuI6J+PmumjFUbeEsOu8BVWP+2V9SNaaWy+b8uB0NPoyIrORexexk58XyUmr83TvJ/P2w2g6nH0jV6ubwbi/IJL2mxQEocVg8cgJGk7uvszi+2QwuWIJg/t28imVQ9m+bbb9Yv316qbVeuAo+dIaXdhD556QH//EycOsGF3Mfv8YByJ5kMvN2H9Y9yfXNP16+W1+i4bF3eNMlYjs4tPNbzQbRJvBcyLlt/7jSd5vd19r2q1h31hJwkTOHwCLaqnpEQ2MSzUvJN6XF22hxIpL13ClNYoLYMLs6V1aWkKpBIiSUA1zu77sNB3PG3rDzoXvN93m0Akc99I5d1qdjuP7/UqDtigOIPYzFlOdS6vslj/vA8RpyIERyK11JvESuPlOxAESyIjYWB2OjHGYZkrF3dW6KBKSbTp0yfPnhUj5wneen9TxuMnEiI3y81hAviPdwdTx9qR7DJiuKGh91wTniuFcqF48orUUidtYowYDqW6AXItw6AXtps1pukpAI7XTjMgEGqvlquyMzbf/noUwL63j4fRXf/LLLU/fm8Udfqv6oHwI1Q5cF3QBapZw5CLyq2rerrq5W3UV/lwSqg+ZaqrIKd4i2f/0yhVNkpooVVkV7tr90LAX2j6sqs5G1hTXlK/vaiX1Sgh61WAeUeOxIddrWY6ipUUuV+FtpXWuPQEslVI9TbPfwOw6hP2hi6JGfZC5tu/jk2LJJgIJSBVxjHL5gVfCBLh+JUSK8ZuPPkH2Uqq+CdiIY7Z+oh4TGvG77w0cYu2nzLfqr8hy8jquI7F28qg61dNAULbQK30lPL3BDJypsFRpWJbvBj8W4FjyfWPd5BqLUGyaSwFvfzG0OHVNhHEmmYgGZmnYFcwSp3haQfjq9EeYUpRfbtkNf/OWvb++mijpSpFZ+9L/drZoSRcMpr7MSyxdc6MejSo5W+wI9AvAQ40eeM5pEFxcun5wWWt0s9PxWv1m3cC9Snp/mP+07PT08Dz0/gU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D20644C0134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D20644BF134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D20644BF134FE0401F0A059927C5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022E2E9B33515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022E2E9B33515E0401F0A0799033C</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023967921</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022E2E9B43515E0401F0A0799033C</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="33460527-5c3b-4a9b-bd07-c326fce321b8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I8EH3vr4jSx1XIhaSQqCBxKatsYaFAL9uXyjgOGBKbxg6h/fVrhyYFSvt1PwkJeTKeOTNzfOxLBuLI8lqMoYRjShS/21CfAHQsyzRqWjCDoWYD29XqdWOmAeiC2cwOTRNBVfEZS5FPGAeEN1TLMG3NcDSzOrWqXtXyHLNSs2qPqnKHEiZCC5eKoSrbOCLMy9M21DQhHgUMM4+AGDGPQ2/SGvQ94emBApPavNyhzBMmzQXna0/XYSVAEEURrEAa65f6gc9lwLwJnhPA0wS95QxYQ33bm2VZJatWaDLXLcMwdMPVhU/A8PxcbZ4Vm1Hgk5Du1h1AKMEQRPgVSFADxBc0UFrRnCaYL+JPQpu6acjQGtpCDZo2OVf19wQ5um9GOgCZMKCxBTCLYGMUogQRiJTbsd9Qz783wd3eaQIIC2kSs6P1v0FCZIMiukaBxorKCnTfj3iiXc1LBD2fwChleIN+S5qsAURMGSUoxNs+ZoJ8AVPy8StbJn64YBmC/zKWS30fq4Cun+hOF88R4/9nZvvz2kW5A1GKmv3q7cWNsXk09fvryZVvuL3pNVhGxE9vGzmEfecdqHLcb+tjspbcetvUur4eLanVHq9Wy43u2KObKLnwnZo7NDs/9Yc/w3ptsljdQNYf62CB20nXyZwsW77cL2b1BWubdjyNVrOUPrbCs477+Ir1ZZz+uB2wu3rsrv0Htu3CG386ZFv3ZRZPptmv6zaIx711dXQRWmTdHwwHz0v8cwbmdDitx7/uwHPMhqOzP/58+ICD9n1I6zOf3rd/0MZ7Tfs1HBoLSZiksyWCvFhKevhdpSfmBfjX8iItONDC3NVbS41iHBGuNuUuKS1eKgQIB54Y5m7dcx3DMq121+1ddVtXxpVhG2bPaBmO6xpuyyk0aIfiCGKHkhDLXFJld/z5GiCMPYZIgBJtQ1O4QEz9ImIXcKD4ZCwOByUMTalQcR5naBmEM55lK3P7WnftJXTnGVOV35QPyTBphRwle8ptTw3rQLnHCOI1RlLeJb+ZIDjjohXPYJPyyKxsQIWgVFwAidRgz7Lrjs5wvI6QBKrHNEgjVFkv1nljdLb7t4QKsdza7bcmo6fO5MnMj9+n1R1/KxohfAIsHZgsqY3EMNGJm8gu6vm8bme/7iJ8Kw2wPGWiqzzBcIfk8NM7WSRLSqa8F1YgLzccGw6C68d1lfmCDYYl68vrWqi90IJmMZxnUHmupJtNmo+jJnUuEeF1IXemPkEwFWL1MqUrRPQyhP6tu6JEfZS5tB/iS/mCTDjgKBbkUfLlNx4KE8TkQ8EXpN9+9xVykFL0jaMtP2XrROI9IRF/+eSAHpR+wjwSfxlNgvdxnYi1l0fUKV4HHJO5XMlb4eUTbkAqwmIhYzTZD34qwKnkh8ayySUWLtg0Szn6/Isi9amhAghpSrjfVXPDvmbmOPnLGnnvTh/C5Lr8dtFu2acX7cOgPxHqFQO19MX/7azhnC4QqfI+z7E01K14N4rkZL6n0W8AP8i01ak51XrVMe16KdM1IdNWt1028KCS5gfzR8teT4/PQ/Mv</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C753845148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C753835148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C753835148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212BD9FEDAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212BD9FEDAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023970792</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212BD9FFDAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UVTC_PrimaryEmail_valid_Role_Linked_LASP_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="092fc6d7-e3ea-4579-807a-d687d978782e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc6JKEH3Pr6DYxxQyoESgolWsrrtuzMeNZPPxsjUOjU4Cg2EGxPz6O2Ag6prc7K2yypqmp/t095kzc8pxHJmuxzmkgiZMGQ976m8bQ2CjkxPNNAxL6yBzpuHQnmmog0kbuuYJkJmqjDnPYMy4wEz0VBMZHQ1ZmtH2zbbbNl2r02o76EFVfkHKZWjp0kKqUsQR426VtqdmKXMTzCl3GY6Bu4K4U+984kpPF9eY1P7pBmWVMO0vhFi6uk5aARCIItIiSayf6js+pwF3p3TOsMhSeM0Z8J76une1WrVW7VaSznUTIaQjR5c+AafzL2r/qN4MwZiFyWY9wCxhlOCIvuAS1DmIRRIoXjRPUioW8TuhDd1AZWgNCqIRo8O+qPpbggrdJyPtgEw51vgCG3WwawghBUZAubke99Qvn5vgZq+fYsbDJI353vrvIAHLIUqWEGi8rqxG9/mIB9rVPwXijhmJMk5zuChpssQEuHKVQkiLCeWSfAFXqvErBZc/WrMMyN+M5VTfxiqh6we6M6Rz4OL/zGx7Xpsov3CUQX/y+FSchU/zfHw7sUezfI1PfizNxT945PUqCNvOG1DNuF/X+2RtuPW66eYp8G/8u/YtTFbfFmCjWSf67ttP8/NVfIxvZ7MFYAP7tj+5Q/epjTqPlig8ZFNncjv4fokexGVsnD0G32c/FkfzF4G6z6vEju5z8Omx3W37L4NiOrn5uTgbPr6Yo+PrhT6+YLHV/UZwET48dkN+98PSb+9GhhM8X/C1uC8mIXmIj2BtjW5/hv7sOOJ3Qzi+Oj7vvdW0XcOusZaEaTZ7BCLqZUmP8VAZyXlh8bG8lBYaaGHl6i5LjeICmFD75a5SWtxMChANXDnMzXrkWAbqesjrDjyje2J8Qx1kjJCHuo5jWR2v1qANij2Ig4SFtMxVquyGPx8DJLHLgQWQanmSkQVw9YOIQyywMmbX8nAkjIOfSBU3bPEkjJPnyHrJRYjXLM+wFczWRFUuEnHJLlMvFJBuSXfHR+aOdF8DoUsKpb6XBOeS4VzIXjzjPBOR0cpxi0Emb4C0FGHX7NiWzmm8jKBEqsdJkEXQWi6WVWd0vvk3NUx4ZZ1MvOnV78H0t1Gdv3fL2/9Wd0L6BLR04GVJX0FOEw5cRZ26nvfrtrbrrsN7WUDLYybbKlJKNkh2P72xpaRJQ5W3wmrkzYZ9w05wfb+uJl+QU9LQvrmvpdxLMejXw3nGredWludZNY5uKXSpDK9LvTP0KZBMqtXaT56A6U0I/VOXRYN6L3Nj38WXiQWbCiwgluRRquUnXgpT4OVLYSxZX3z2GbKTUvZNQCEO2QaRfFCUiD98cxCXlH7SfCX/VkkavI3rQKytPLJO+TwQlM3LVXktrN/hBklkWCp1LEm3gx8KcCj5rrFpcoNFSDbNMgHvf1FKgeqpmJAkY2I8VCvDtmhWOMV6Ce6b0x9hKmF+vWkL/u5Ne3c+mUr5irHa+NL/dtZoRRcCanmhV1h6aiEfjjI5m2+J9CvAPZ1GpuF0HaPtmFa33ei05TjI8b42DdyppP+H+U/LVk/3z0P/Xw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502197913A2573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950219791392573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950219791392573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107A0A7CA1761E0401F0A0799554A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95107A0A7CA1761E0401F0A0799554A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023973587</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95107A0A7CB1761E0401F0A0799554A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UVTC_PrimaryEmail_valid_Role_AccessPortal_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="5ef27bc6-91b5-4b20-8ed3-cb46c5662b35"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc7I4FL7vr2Do5Q7yIYgw1RlebV27be2q/bzZiSFiWgiYBKX99ZugULW223dHRyeHk3Oec87Dk5wxkMSWHzCGKMcpUYb9jvpPu9lq27ZraLYzFz+wbWvAch3NtWdeK5y15nDWUpUhYzkaEsYB4R3VMkxbMxzNbE6tpt+0fMdtOG3nWVXuEWUitHBpGKpSJDFhfpm2o+aU+ClgmPkEJIj5HPqT4PrKF54+qDCp3bMNyjIh7S44z3xdh40QQRTHsAHTRD/T93zOQuZPcEQAzyna5gxZR93uXa/XjXWzkdJItwzD0A1PFz4hw9Gp2j2pNqNwSObpZt0DJCUYghi/AwnqGvFFGipBHKUU80XyRWhTNw0ZWkMF1KBpk1NV/0hQovthpD2QlAGNLYBZBRujOaKIQKTcjYcd9fRnE9zsnVJA2DylCTtY/x4kRFYoTjMUaqyqrEL384hH2tU9Q9AfEhjnDK/QjaRJBiBiyi1Fc1xcYSbIFzKlHL9SMPHFFcsQ/J2xnOm7WAV0/Uh3+jhCjP+fme3OaxPlHsQ56j4t+KRoZ/2g6eQP5LLn/enp7mDlre6eOiWEXecNqHrc2/UhWWtubTdNl0nx9NKnEZ48343C1ptrwd4gmoVZX496unszcMLHgg3im/w2aN3n7++DNVzcm9gJhm/L8I/F7JrQQSu8uPDAyWhqDR6ar8XT2HsYoQgAmq/Xr4+Xw/Pn5DV4TMDl36/0/nExHr0ky+Vf7XvvaoLsuyzFN83MfbpYZWNESfE8ay/HJw5yRlHribzemrcwuHoG5K7zUdNuDfvGShIm+ewFQV4tJT2GfeVCzAvw7+VFWnCozUtXP5MaxTgiXO3KXVJa/FwIEA59MczN+sJzTMN1A9sNgsA4Fx/bMC+MwHA9z3Eco9KgDYoDiL2UzLHMJVV2w5/vAcLEZ4iEiGqrNIcLxNRvIvYBB8qQjMXLkRKGpqlQcepm1lqUtWrz92b87rFFlkQvcaYqNykfkREN5hzRHeW2p4a1p9xjBHGGkZR3yW8mCM64aMUSrHIem40VaBCUiwOASg32Lbvt6AwnWYwkUD1JwzxGjWyRlY3R2ebf0gBkpTXo9c4nvUn57n1Z2uGzqgvCJ8TSgcl6fiExSXTkGLKrYr4u2tktugof5CGWr5hoKacYbpDsP/pgiqRITZNtVRXs2vvQsBdZPyyqThauMKz5Xh/UQueFCnSrsSxBY9nIV6u8HIQrFY6K8LoQOlOfIJgLmXqbpq+I6HUI/UenRI36IHNt38eX8wWZcMBRImijlMsfXBEmiMkrwlDQvfjp/WMvpegbRwU/ZuvF4iYhEX972YA+lH7CfCv+1ikNP8Z1JNZOHlGnuBdwTCK5kufB2xfEgKkIi4WApXQ3+LEAx5LvG+sm11i4YNMs5+jrJ4pUpo4KIExzwod9tTTsqmWJk79lyP9w+hSmVOTtEVuwL4/Yx+uridCtBKi1L/5vZw2XdIFIlSd5iaWjFuLGKJKTaEedtwAPBNqwTM/1TKdpOW6zFmjH8wwv+FU3cK+S7ifzZ8tOTw/fh+6/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950219791542573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950219791532573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950219791532573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951077A47AAA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951077A47AAA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023976810</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951077A47ABA0E0E0401F0A07995550</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UVTC_PrimaryEmail_Invalid_Role_dsp_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="ad39890e-848f-446e-bd20-d263d4c87324"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSP"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfnRKX2gt7QgzKL6goEdQ9PrlTppuS7RNoUkB/fUnKbYCvlzPnWGGyXaz++zukyc5ZChNLL/LGOScZFTp99rqv2Da2PUCW2uFTqTZNhhay2mB5kYQhAYEwcEBVpU+YwX0KeOI8rZqGaatGY5mNm+tpt9s+obRMJvuo6pMIGcitHBpGKqyShPK/DJtWy1y6meIEeZTlALzOfbH3eHAF54+qjCpncM1yjJh3plyPvN1HTdCwJAkuIGzVD/Ut3wOQ+aPSUwRL3J4yxmytvq2d7lcNpbNRpbHumUYhm54uvAJGYn31M6vajOEfRpl6/UxohklGCXkFUlQQ+DTLFS6SZzlhE/TL0KbumnI0BqssIZNm+6p+nuCEt0PI22BzBnS2BSZVbARRJADxaDcjfptde9nE1zvvc0RZVGWp2xn/XeQgC4gyWYQaqyqrEL384iftKtzCNjvU5wUjCzgStJkhjAw5XcOEVkNCBPkC5lSjl9ZMfEjFcsA/81YDvVNrAK6/kl3eiQGxv/PzDbntY4yQUkBHfZg9YzxzVkRpJZ3eXNmvzwlj9nzUX6A2yWETec1qHrcb+tdstbcetv0jO4ebh5TNI4nOLg4dovHp4uLfXTPbB7un8c9e791kqcv8X5cnKDhgdMazPmsOUSt1GW2w54nVy6MsKt3p+f812w4uZy9Bom5etjf75Lz4tRb2dPJMLoZnN0Ho+D1JjgeLIkdRGeXCF2eOzd3FwNa/PMcnxj53VX/1WPz6djJXIs8/bqfRGPj+tF1DvQMLZJ5SuP2e02bNWwbK0kYF8ETYF4tJT36PeVUzAvx7+VFWkioRaWrP5MaxThQrnbkLiktfiEEiIS+GOZ6feo5hmV5hnvadMyjo96JYRvmqdE1HM8zPM+sNGiNYgficUYjInNJlV3z53uAOPUZ0BBybZEVeApM/SZiD3Gk9OlIHI6MMrjNhIqbz4CsZhCjaEEts7mwWok7nZPAdVXlKuPX9DrvRhzyDe22bw1rS7tHgMmMgBR4yXAmKM64aMYcLQqemI0FalAoxBWQSxX2Lbvl6IykswQkVD3NwiKBxmw6K1ujs/W/pSHMSuvo5LY8eV8Wtvut6oHwCYl0YLKWIxBzhA+XkOU7VSFfF+xsFlyF7xYhkQdMNJTnBK+RbH9654kkSE0SUVEFufbcNWxF1XcLqhOFC4JrptdXtFB4cf471TjmqDFvFItFUQ7AldqWi/C6kDhTHwMuhEC93GbPQPU6hP6j+6FGvZO5tm/jK/iUjjnikAq6KOXyB4+DMTD5OOgLoq9++vLYSin6xmHFP7MdJ+INIRF/+8zAPpZ+wvxb/C2zPHwf1yexNvKIOsWLgBMay5W8CV6+IAXORFgipCvLN4N/FuCz5NvGusk1Fi7YFBQcvv6iSE1qqwjjrKC831NLw6ZOljj5ywz8d6cPYUotfrtcV+zLy/VhOBgLxUqRWvuS/3bWSEkXDKq8w0ssbXUl3ooiOY03dPkN4Edpdm3XM469gyN3W5pbR3UDtyrpfDB/tGz0dPc8dP4A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502274790D96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502274790C96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502274790C96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022907F351BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022907F351BBDE0401F0A05990991</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023979389</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022907F361BBDE0401F0A05990991</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00051_UVTC_PrimaryEmail_Invalid_Role_device_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="f3d27da5-2e63-49a6-b72d-da203cd532a6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DEV"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HqeML9hcXIEqwiXrBIYsl2QyL1tCbkCJLRNJdiBfv5KJHSCXzWwVVZTare7T3UdHOuMojhy/wzkwQRKqBb2W/o+zaDgWgobhNuu24QJyDVRdNowQMHjNsOp5C0vXAs5TCCgXiIqW7li2a1ieYVdnTtWvVn3LrTiO81vXboBxGVq6VOSubRxR7udpW3rKqJ8gTrhPUQzcF9ifdkZDX3r6qMCkt8/2KPOErL0WYuObJq4oOFGEKziJzTPzyOcs5P6UrCgSKYOXnCFv6S97n56eKk/VSsJWpmNZlmk1TekTcrL6rre/FZshDOgy2a+7iCaUYBSRZ6RAjUCsk1DrRKuEEbGOPwhtm7alQhuwxQa2XfpdN18T5Oi+GOkIJOPI4GtkF8EmsAQGFIM2nwQt/fvXJrjfO2OI8mXCYn6y/jNIQDOIkg2EBi8qK9B9PeI77WqfAfYDiqOUkwx+KppsEAauXTNYku2QcEm+kGv5+LUtlz9SsAzwn4zlzDzEKqGb73SnR1bAxf+Z2eG89lFuUJRCe76Z7xDYYnL+EN02Vu5kccfO6wm9GCatHMKh8x5UOe6X9SlZS269bJrD9XA09P769Rd9GoVi9uPmNiTJcDy+vwj6N2YGu8fz6vQy+tEd1K4TK+uEk2WDzC7i8Wz+6wE1B72o3iertRiNq98maH55dWfeL8aTzvRiHs2yrplNf2cNdvtsQrIgPy7T7U9S++1N6eamF5DpuJGmd6O7ef36ynYwW9xekVoz+Ntm3W/xuT26TSOGnOGlO7q56vcfWq81HdZwbCwkYZou7gGLYqnoEfS0gZwXEp/Li7KQ0Fjmrv5GaRQXQIXeVrvUOfFTKUAk9OUw9+tB07Mc2+nYjXrPdZpe33Ite2B1rHqzaXndRqFBexQnELsJXRKVS6nsnj+fA8Sxz4GGwIwsSfEauP5JxB4SSAvoRB6OhHKYJVLF7e3zw/09e3Y2vF7jOzd6ZGnzeVer6drPRIzpmHWWAtiBdLszyzmS7glgsiGg9F0RnEuGcyF78YiyVER2JUMVCqm8AZgSYd9xG57JSbyJQCE14yRMI6hs1pu8Mybf/zsGwjy3Tvqz/OB9WNfpt6IF0ickyoGrWs5BjhHe3EGO7xWFfFywd1hwEb6ThkSdL9lPwQjeIzn+9EoTxY+SI7KiAnLpeWo4imqeFlQmCjOCS6KXN7QUeHn828U4HlHlsZJmWZoPoK6kjcnwplQ425wCTqU+7WbJA1CzDGF+6XooUZ9kLu3H+FKxplOBBMSSLlq+/MLbYApcvQ0CyfPtVx8eRyll3wRsxXu2biSfEArxp68M7GPlJ83X8u8pYeHruN6JdZBH1ikfBILQlVqpi2D3ASlwIsMSqVwJOwz+XoD3kh8byyaXWIRk0yIV8PEXTUlSS0cYJykVQU/PDYcymeMUuw34r05vwuRS/HK3bvmHd+uv0XAqBStGeulL/tvZIDldMOjqCs+xtPStfCrK5HR1IMsvAN8os9OrVZ2uNxicd4+U2enbZQOPKmm/Mb+1HPT09Dy0/wU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022D632C6FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022D632C5FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022D632C5FFBCE0401F0A079902E1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A187D4295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A187D4295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023982881</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A187E4295E0401F0A079905C8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00053_UVTC_PrimaryEmail_Invalid_Role_dsp:customersupport_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="d7d00fbb-c93a-46bd-a3f5-a8530d66090c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSPCS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQKyWJChLlshstUA6h3bYvR8YZwG3i0NhJaX/92qFJgV5O90hIyJPxzDcznz/7jKEktvwuY5BxklIl6LfVfwEvbdwEVzMN5GjOqetqyFxgbekCLJewdBe2pyoBYzkElHFEeVu1DNPRjKZm2nPL9m3bN1qNltW8VZUryJgILVwahqpsk5gyv0zbVvOM+ilihPkUJcB8jv2wOx75wtNHFSa1c7ZDWSbMOmvON76u40YEGOIYN3Ca6Gf6gc9ZxPyQrCjieQYvOSPWVl/2Pj4+Nh7tRpqtdMswDN3wdOETMbI6UTvfqs0QBXSZ7tY9RFNKMIrJM5KgxsDXaaR041WaEb5OPght6qYhQ2uwxRo2HXqi6q8JSnRfjHQAMmNIY2tkVsFmsIQMKAblcha01ZOvTXC3d54hypZplrCj9d9BAlpAnG4g0lhVWYXu6xHfaVfnDLAfUBznjBQwkTTZIAxMmWawJNsRYYJ8EVPK8StbJn6kYhngvxnLmb6PVUDX3+lOn6yA8f8zs/157aJcoTiHjv78z/S5+NmdFisC9zfM1e/d5+uhWXwftEsI+847UPW4X9bHZK259bJp8z1APwatqLgKg9Mxs7rPqy1eDxa23Xq6XY821uXF7O68d9sb9C6nP6Zu62ZyagzCJJsNxiFrde/vPPMKvOnAjOff9KA3vp3Mi8U5Ws/5bNb/9ZAHDr9lo2H3pr9I3Iubi8lvNuveb+yrdFQ8eMZieBXOW6GlZxfOz+FzzzntjcLtfDL+Vmzx+Hf0NAaPhNfjX608wu3XmvZrODRWkhDmizvAvFpKegR9ZSjmhfjn8iItJNKWpau/kRrFOFCuduQuKS1+LgSIRL4Y5m499JqGZVpez3JOB7bpDAzHMIdG12h5ntF0TysN2qE4gthL6ZLIXFJld/z5HCBOfAY0gkwr0hyvgamfROwjjpSAzsThSCmDeSpUnLouoQs3396x5GnB4sUi85zUQaoySfkFvci6Sw7ZnnI7c8M6UO4ZYLIhIOVd8psJgjMuWvGAipzHZqNADQq5uAAyqcG+5bhNnZFkE4MEqidplMfQ2Kw3ZWN0tvu3NIRZaZ0N5uW5+7Cs429VB4RPRKQDk7Wcg5givLmCLL9ZFfJxwc39gqvw3Twi8niJdvKM4B2Sw0+vLJH0qCkiKqog157HhoOo+nFBdaKoILjmeX1BC30Xp79TjeMBNR4aeVHk5QBaUtkyEV4XAmfqIeBcyNPTPL0Hqtch9C/dDjXqo8y1/RBfztc05IhDIuiilMsvPA1CYPJpEAiab7/67jhIKfrGYcvfs/Vi8YKQiD99ZGAfSz9hnoq/xzSLXsf1Tqy9PKJO8R7ghK7kSt4DTx+QAqciLBHClWb7wd8L8F7yQ2Pd5BoLF2xa5Bw+/qJIRWqrCOM0pzzoq6VhXyVLnPxpA/6r05swpRK/XK1b9uHVej0ehUKvEqTWvuS/nTVS0gWDKm/wEktb3YqXokhOV3uq/ALwSJhNo+XajusMDdN7Feam59lG16wbeFBJ5435rWWvp8fnofMH</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951078348500194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9510783484F0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9510783484F0194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502129C246E314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502129C246E314E0401F0A07990586</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023986630</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502129C247E314E0401F0A07990586</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00054_UVTC_PrimaryEmail_Invalid_Role_contentprovider_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="df957b5a-d84d-4a33-8e5b-7a609508f7c5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CON"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCON"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6sQJ1wTFSQWaDfd3hboRX05ch2HuCQ2tZ2Q7q8/dmhSoLSneyQk5Ml45puZz599LGCauP5QCMwlYdQIxn3zHwhgM+p0IwtGUWi1UBNbPdR6tFAHAtfpgbYHkWkEQmQ4oEJCKvumC5yWBdqW05y7Tb/Z9B3Q6HWaD6Zxi7lQoZVLA5hGkSZU+GXavplx6jMoiPApTLHwJfJnw4tzX3n6sMJkDo43KMuEfBBLufJtGzVCjHCSoAZiqX1s7/gch8KfkQWFMuP4NWco+ubr3vV63Vg3G4wvbBcAYAPPVj6hIIvv5uBbtRmHAY3YZj2ClFGCYEL+QA3qAsuYhcYwWTBOZJx+ENqxHaBDW7hAFnJa9LtpvyUo0X0x0g5ILqAlYuhUwaY4whxThI2badA3v39tgpu9cw6piBhPxd767yBhmuOErXBoiaqyCt3XIx5o1+AYIz+gKMkEyfGlpskKIiyMa44jUpwTocgXCqMcv1EI9SMVyzD6m7Ec29tYFXT7QHfGZIGF/D8z257XJsotTDI8uD0CcTS5AverPFqE3uz69vfUbXHn/mnYLyFsO29A1eN+Xe+TtebW66bJr3ixvF8Wz0UYLtfT7gt68trzO3f4cDq2Jbr3vOfi5Nf1vPujc54wmF97NuRn/P4y7qZFMztlZ884uLt6GIeXxbezVjJ/OUXrYeCNgEu9mRt77m/2II5GaHkakaOjx3g4aeadG/Ikupd37uzoF+h0E4luerZcPqWplHTd/gkCcP6NyInafXea/DyNvN5VnF4s+281bdewa6wkYZY9PmEkq6WmRzA2TtS8oPxcXrSFhFZUuvorrVFCYirNgd6lpcXPlACR0FfD3KxPvLYDOu645Xmd1o9JdwJawDkBQ3WaPLc36VQatEGxB3HEaER0Lq2yG/58DhClvsA0xNzKWYZiLMxPIo6hhEZAp+pwMCrwnCkVlzyB3dx1/+SZ60AKlpwD9uSGC9O4ZPKKXvFhJDHfku7WHLg70j3FiKwI1vquCS4Uw4VUvXiGeSYTp5HDBsWZugG4FmHfbfXatiDpKsEaqZ2yMEtwYxWvys7YYvPvWhCJ0jqdzMuD92Fd+9+qFiifkGgHoWv5gdUY8YE7CFSFfFxwe7vgKvwwC4k+X6qfkhO0QbL76Y0mmh81R1RFFeTac9+wE9XeL6hOFOYE1USvb2gl8Or4D6pxPMPGcyPL86wcQFdLG1fhbaVwjj3DKFP69DJnS0ztOoT9peuhRr2Xubbv4stkTGcSSpwquhjl8gtvgxkW+m0QKJ4XX3147KRUfZO4kIdso0Q9ITTiT18ZyEfaT5mv1d+a8fBtXAdibeVRdaoHgSR0oVf6Inj5gBSIqbBEKRfj28EPBTiUfNdYN7nGIhWbHjOJP/5iaEnqmxAhllEZjM3SsC2TJU75ssL+m9O7MKUUv96thfjwbr2/OJ8pwUqhWfuS/3a2SEkXhE19hZdY+mahnooqOV1syfIrwD1lVvxwvZHbHk2aTqtW5q7ngXavVubdSgbvzO8tWz3dPw+DfwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502129C25DE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502129C25CE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502129C25CE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062D49964BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062D49964BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023989814</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062D49974BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00055_UVTC_PrimaryEmail_Invalid_Role_contentprovider:customersupport_with_TokeType_ResetPassword_(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="d2932e18-10fb-470d-b28b-b6abaf764742"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CONCS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCONCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj6sQJ+EaFSTaLN3QC91C2cvLkXEm4DZxQuwA7a8/dmhSoLSneyQk5Ml45puZz599ynEc2W6fc8gETZjme139H6cZNi3caRp2CyyjHjTaRrs9QwZudoCEnQAjx9Y1n/McfMYFZqKr28iqG6hhWM7EdlzHca16zXbQH12bQsZlaOlSQ7q2iSPG3SJtV88z5iaYU+4yHAN3BXHH/esrV3q6uMSk9063KIuEWW8hROqaJqkFQCCKSI0ksXlq7vmcBtwd0znDIs/gJWfAu/rL3vV6XVs7tSSbmzZCyEQdU/oEnM6/6L2TcjMEPguT7focs4RRgiP6jBWoaxCLJND60TzJqFjE74S2TAup0AZsiEGsOvuim68JCnSfjLQHMuPY4AtslcHuIIQMGAHt/s7v6l8+N8Ht3kmGGQ+TLOYH67+DBGwFUZJCYPCyshLd5yMeaVfvFIjrMxLlnK7gRtEkxQS4dptBSDdXlEvyBVwrxq9tuPzRkmVA/mYsp+YuVgndPNIdj86Bi/8zs915baNMcZRDb+6s18Pw1wjF8TJ6+C7mYTTx0PT+SZBuAWHXeQuqGvfL+pCsFbdeNl2Cgx7nt7cT1B8M6s8/vw5WqReb601wkTn3YX77e+Q38/N46Y28+eYC//SC6Z8Hz2w8T8z+BUUB/3E5uG+O/HvTP1mOrxaPl3xxPvydZsNsYi4ITq3FWvTrU/H8YwrnwyXA8nfbmT2s+t8HqT2qT2FGWTjcDPPlzdOzuNmcta5mE+yfXOdJq2GieDYkFw77Ok0bfve1pt0a9o2lJIzz2QMQUS4VPXxPG8h5YfGxvCgLDYywcHVTpVFcABN6T+1S0uLmUoBo4MphbteDTgPZdqve6nScTvOs9Q3VkTVAfdTodFCnfVZq0BbFAcTzhIVU5VIqu+XPxwBJ7HJgAWTGKsnJArj+QUQPC6z57E4ejoRxmCRSxamw23GLzqy0Q6ywGbVZYD1YS2Lp2k0iRmyU9UMB2Y501yfI3pPuOyA0paD0XRGcS4ZzIXuxxKtcRFZthWsMcnkDZEqEXbvebpicxmkECqkZJ0EeQS1dpEVnTL79tw1MeGG9+zYpDt67dR1+K1sgfQKqHLiq5QzkGOHIHYTKQt4vuLFbcBm+nwdUnS/ZT5FRskWy/+mVJoofFUdkRSXkyvPQsBfVPCyoShSsKKmIXt3QUuDl8e+V41ji2rKWr1Z5MYCWkrZMhjelwlnmGEgu9elpkjwCM6sQ5qeuhwr1QebKvo8vFws2FlhALOmiFctPvA3GwNXbwJc833z24bGXUvZNwEYcs51H8gmhEH/4yiAuUX7SfCv/1kkWvI7rSKydPLJO+SAQlM3VSl0ET++QgiQyLJXKlWS7wY8FOJZ831g1ucIiJJtmuYD3v2hKkro6JiTJmfA9vTDsymSBUzyl4L46vQlTSPHL3brh796tv66vxlKwYqxXvvS/nQ1a0IWArq7wAktX38inokzO5juy/ALwrTI3PcsbWI5tW5UyS6lG9ZZTNXCvkt4b81vLTk8Pz0PvXw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950226D1DF23221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950226D1DF13221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950226D1DF13221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502274799396B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502274799396B7E0401F0A0599098B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023993249</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502274799496B7E0401F0A0599098B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00057_UVTC_PrimaryEmail_valid_Role_DECE_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="e32ba329-bfad-45de-938b-992adc166c15"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DECE"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1HIhWuigpSFtpteaE+hl92XI+NMwN3ESW2Hhv31a4cmBUp7ukdCQp6MZ76Z+fzZRxwlseP5nAMTJKVaMB7o/7rgtBy72zGw5bSNdj8KDYRcZPQ7Vj+ybLcfWj1dCzjPIaBcICoGumPZbcPqGHZr5rS8Vsuze0233/qpa3fAuAwtXZqWrhVJTLlXph3oOaNeijjhHkUJcE9gb+pfXnjS00MVJn14tEFZJmTDpRCZZ5q4GQKGOMZNnCbmkbnjcxRyb0oWFImcwUvOkA/0l73Pz8/N51YzZQvTsSzLtFxT+oScLL7qwy/VZggDGqWb9QjRlBKMYvIbKVCXIJZpqPnxImVELJN3QtumbanQBhTYwHabftXN1wQluk9G2gHJODL4EtlVsBuIgAHFoN3eBAP96+cmuNk7Y4jyKGUJ31v/HSSgK4jTDEKDV5VV6D4f8UC7hkeAvYDiOOdkBRNFkwxh4No1g4gUF4RL8oVcK8evFVz+SMUywH8zliNzG6uEbh7ozpgsgIv/M7PteW2i3KE4h+G1g29Pu2ds+lM8/GxPRlchWznFfNk5+TEoIWw7b0DV435Z75O15tbLpnOTJkVy1VgKdNE4PxOE+P+0x6eNR7bwxXwdHa8nlz94TE6zh4QHZ0XqNtybYto7n/PV3eqR2Y3v5NfMubYvsvsv6yszno2+3xdBd9zNJ6F46DWK+/MsOhE/st9Fa8593v9932o10lN+ljkLNOlD7/4awvlt9LS4NaNH1Maj6VUUj7+079d9P72dixG7CyZR9/x0MXitabuGXWMlCdN8/ghYVEtFj2Csnch5IfGxvCgLCY2odPUypVFcABX6UO1S0uLlUoBI6MlhbtYnbsdynNGx/PNtd9Q9ttqWfWL5Vsd1LbfrVhq0QbEHcZTSiKhcSmU3/PkYIE48DjQEZqzSHC+B6x9EHCOBtIDeyMORUg6zVKq4zbpx+LRY9la0J+zc5glvdaGf2XNdm6Tiil4xPxLAtrS7PbOcHe2+AUwyAkrgFcO5pDgXshlPaJWL2G6uUJNCLq8AplTYc9r9jslJksWgoJpJGuYxNLNlVrbG5Jt/x0CYl9ab41l58t4tbP9b1QPpExLlwFUt30DOEQ5cQlZVyPsFd7YLrsL7eUjUAZMNFYzgDZLdT688UQSpSSIrqiDXnvuGnajmfkF1onBFcM30+oqWCi/P/7AaxxNqPjXz1SovB9BT2sZkeFNKnG1OAedSoNaz9BdQsw5hfup+qFHvZa7tu/hysaRTgQQkki5aufzE42AKXD0OAkn04rMvj52Usm8CCnHINorlG0Ih/vCZgT2s/KT5Wv49pyx8HdeBWFt5ZJ3yRSAIXaiVugnW75ACpzIskdKVsu3ghwIcSr5rrJtcYxGSTfNcwPtfNKVJAx1hnOZUBGO9NGzrZIlTrDPwXp3ehCm1+OVyLfi7l+vD5cVUKlaC9NqX/LezQUq6YNDVHV5iGeiFfCvK5HSxpcsvAN9Is+18G/vt0dg/tnal2e/UDdypZPjG/Nay1dP98zD8Aw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212BDA4DDAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212BDA4CDAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212BDA4CDAE0E0401F0A059909A5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022CE950A19C6E0401F0A05990969</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022CE950A19C6E0401F0A05990969</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400023996771</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022CE950B19C6E0401F0A05990969</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00058_UVTC_PrimaryEmail_valid_Role_Portal_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="13d208c1-2627-4be0-876a-497d237723ec"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSxyrESfhKVJBSKLvZlkKB9m77cuU6BlyCDbEDob9+7dCEj9Le7pWQkCfjmTMzx8e+5HAe2Z7POY4FYVQL2g39XxdAq1qpO4ZVQ65RHgNk1CshMHDZca0Kcir1MNS1gPMEB5QLSEVDt4FVNkDFsJyR7XiO49lWyXGcZ117xDGXoaVLCehaOo8o97K0DT2JqccgJ9yjcI65J5A39Lu3nvT0YI5Jb15uUWYJ4+ZUiIVnmqgUYoSjCJUQm5uX5oHPZci9IZlQKJIYv+cMeUN/37ter0trp8TiiWkDAEzgmtIn5GRyrjfP8s04DOiYbdctSBklCEbkDSpQXSymLNT8aMJiIqbzT0JbpgVUaAOnyEBWmZ7r5i5Bhu6bkQ5AxhwafAqtPNgAj3GMKcLawyBo6Offm+B27yiGlI9ZPOdH67+DhOkKR2yBQ4PnleXovh/xRLualxh5AUVRwskK3ymaLCDCXOvHeEzSW8Il+UKuZePXUi5/JGcZRn8zlktzH6uEbp7oTptMMBf/Z2b789pGeYRRgpuPKxb1bRD8rFvUvSlHbXHDf9WTzng5a2QQ9p23oIpxv6+PyVpw633TU9+ldvi2gX13tRTX98FF66X9w0GrX/XaM/H92f3VeA3I6OWliyo3r/bGB73ZZg4Gr1FndG+HIFp01vepGHTTh7N6+fr5GSyfry7szW377r73ej0bPfWXnS59urq4mXZB7+KBB4NecPGARjV/KC6q/ddbwkDEAvajNUoH04fKZNzrR/+cjarMGc86fcd/6aY/738/t1FjV9N+DYfGXBKGycsrRiJfKnoEba0j5wXF1/KiLCQ0xpmrt1AaxQWmQm+qXUpavEQKEAk9OcztuuNWgG3XyjXXb7nVq9o1KAOrA3xQcV3g1q9yDdqiOILYYnRMVC6lslv+fA0QzT2OaYhjY8USNMVc/yJiGwqoBXQgDwejHI+YVHEer2Gt+hZVHfq2TN+qKFqV6ew11rU7Jnq0F/tjgeM95S6PgH2g3AOMyIJgJe+K31wSnAvZiiVcJSKySitYojiRF0CsNNizy/WKycl8EWEF1JyzMIlwaTFdZI0x+fbfNiDimZVwtGCxgJGVHb9Pqzv+ljdC+oREOXBV0hWWw8QnbiIrr+fzuiv7defh/SQk6pTJroqYoC2Sw087siiWFEzZFZYjLzYcGw6Cm8d1FfnCFUEF64vrWqq91IJmPpwlLC1LyWqVZOOoKZ2LZXhTyp1lDjFKpFhtRmyGqVmEML91VxSojzIX9kN8iZjSoYACzyV5tGz5jYfCEHP1UAgk6dPvvkIOUsq+CZyKU7ZWJN8TCvGXTw7kIeUnzX35t2bxrvBTsfbyyDrl60AQOlErdStsPuEGYjIskTLG4v3gpwKcSn5oLJpcYBGSTS+JwJ9/0ZQ+NXSIEEuoCNp6ZtjXzAyn2Cywt3P6ECbT5feLNuWfXrS/u7dDqV5zqBe+5L+dDZLRBWFd3ecZloaeynejTE4nexr9DvCjTPuWfd2qduqtnUzXpEzbbbdo4EElzQ/mj5a9nh6fh+Yf</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022A12EC7F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022A12EC6F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022A12EC6F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950227479AC96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950227479AC96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024000321</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950227479AD96B7E0401F0A0599098B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00059_UVTC_PrimaryEmail_valid_Role_Retailer_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="387d560b-000f-4c43-821c-6cb8b98c5023"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb/I4EH3vr4jSxyrkQrhFgERLu01bWgr0ti8r40zAJXHS2OH269cOJAVKu/1WQkKejGfOzBwfu8lQGFhOhzFIOImo4nZb6j/jOq6PEYw1f1y1NNseVzVUt8catsFCVb9cRnVQFZexFFzKOKK8pVqGaWtGRTPLI6vslMuOZZfMcvVvVXmGhInQwqVkqMoyDChzsrQtNU2oEyFGmENRCMzh2Bl2eneO8HRQjkltNzcos4RJe8p57Og6LnmAIQhwCUeh3tT3fJoec4ZkQhFPE9jm9FhL3e5dLBalRbkUJRPdMgxDNxq68PEYmZyq7ZN8M3gu9aPN+gLRiBKMArJGElQP+DTylE4wiRLCp+E3oU3dNGRoDZZYw6ZNT1X9M0GG7peR9kAmDGlsisw82AB8SIBiUJ4Gbks9/d0EN3tHCaLMj5KQHaz/DBLQOQRRDJ7G8spydL+PeKRd7SZgx6U4SBmZw72kSYwwMKWfgE+Wd4QJ8nlMycavLJn4kZxlgP9kLE19F6uArh/pTpdMgPH/M7PdeW2iPKMghfYA38bY6FS7wUX4otcbgnfnbucVjdaLVgZh13kDqhj3dn1I1oJb2029YX+1GCzOV4nrrh/cGfbPrmeNe391P3h7JjTudNy/en555T0T3Lt+Sut3+oudjN/eeey/96+f2dm9QZfYe+SD6xNuLNjtcNC9Sdjs8mUN73decDNn51V8+/D01LdnHtbdau12HMwfrx9f6g2elPGAvH3U1q84eBufuZgvePr29p72T17sIWvc1K5H4TOMz+bTp2HU+qxpt4Z9Yy4Jw3T8DpjnS0kPt6tciXkh/rO8SAvxND9zdWKpUYwD5Wpb7pLS4qRCgIjniGFu1leNimFZF7VK+dKsmHb90rAN88roGLVGw7C657kGbVAcQLyIqE9kLqmyG/78DBCHDgPqQaLNoxRPgak/ROwijhSXDsThiCiDUSRUfB0EDW82sxcVWDeqE2zgD2vl4ZWq3Ef8gT4kHZ9DsqPc9siw9pR7AJjEBKS8S34zQXDGRSs+0DzlgVmaoxKFVFwAidRgsa9e0RkJ4wAkUD2MvDSAUjyNs8bobPNvaQizzDq4HGXn7tuyDr/lHRA+HpEOTNZyDmKKcOQKMvNCvi+4sltwHr6TekQeL9FOnhC8QbL/6ZMlkh4FRURFOeTC89CwF1U/LKhI5M0JLnheXNBC38Xpb+fj+EClj1I6n6fZAGpS2RIRXhcCZ+pDwKmQp9UomgHVixD6r26HAvVB5sK+jy/lUzrkiEMo6KJky188DYbA5NPAFTRf/vbdsZdS9I3Dkh+zXQTiBSER//jIwA6WfsLcF3+LKPE+x3Uk1k4eUad4D3BCJ3Il74HVN6TAkQhLhHBFyW7wYwGOJd83Fk0usHDBpnHK4fsvilSkloowjlLK3a6aGXZVMsPJVzE4n05fwmRKvL1al+zbq/W1dzcUehUitfAl/+2skYwuWDwshX+GpaUuxUtRJKeTHVXeAjwQZtOo1Tp27crqGJfGrjBXKhWjaOBeJe0v5q+WnZ4enof2vw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951077A47F3A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951077A47F2A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951077A47F2A0E0E0401F0A07995550</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95022C753E15148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95022C753E15148E0401F0A079902DB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024003330</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95022C753E25148E0401F0A079902DB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00060_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="9b128b51-de3e-42fe-a5b7-7098d35df6f3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZRc6o6EH7vr2DoYwcJIFWZ6gxKvccjrZ3q7enty50YgqaFgCQo9tefBAtVa3t77owOk2Wz++3ux5dcMRhHpuMyhjNOEqqMvK76LzKaLcMEUAPmHGtNM4DafN5qazZAHQxbxjwM26oyYizHI8o4pLyrmsBoasDWDGtmWo5lOWa7cWk1n1TlAWdMhBYuDaAqRRxR5pRpu2qeUSeBjDCHwhgzhyNn6t74jvB0YIVJ7V3tUJYJs96S89TRddQIMMJRhBooifUr/cDnKmDOlCwo5HmG33IGrKu+7d1sNo2N1UiyhW4CAHTQ0YVPwMjiXO2dVZtxMKJhslsPIE0oQTAir1CCusF8mQSKGy2SjPBl/EloQzeADK3hAmmirfRc1d8TlOi+GekAZMagxpbQqILd4xBnmCKs/H0/6qrn35vgbu8sg5SFSRazo/WfQcJ0jaMkxYHGqsoqdN+PeKJdvSuMnBFFUc7IGt9KmqQQYabcZTgkhU+YIF/AlHL8SsHEj1Qsw+hPxnKl72MV0PUT3fHIAjP+f2a2P69dlAcY5bg3f5o9Lmevnj4KMju9fvpFQUzizsvUbHdLCPvOO1D1uN/Wx2StufW2aZza4+VD/nS7ehw/LouhZ3n9/qCzJf6vomi/bI3s52UY/JO7k+11uw8m9HYTPN//bA3M12cvGs6CdOa9GK0f/s3QOvNew7W5ysZpai9Jpi8S78m/RjeX24u724FdJH5sT9Nw3G+n/tb9i839wSQm+vjO2uYT3/V/3BuPqX7hX/po6p5ZFxd3i6IZTjomM9Hmef2QdN9r2q/h0FhJwjSfP2PEq6Wkx8hThmJekH8tL9JCAi0sXZ1UahTjmHK1J3dJaXFyIUAkcMQwd+thxzZAq2XafQCGluVdgyYwhsAFdqdjAbdfadAOxRHEQUJDInNJld3x52uAKHYYpgHOtHWSoyVm6hcRPcihMqL34uNIKMOzRKj4IoVb8xI3t60YtMV/ZSWhGPZKVW4TPqGTzA05zvaUuzkD5oFy32NEUoKlvEt+M0FwxkUrVnCd88horGGD4lwcAJnUYMdstm2dkTiNsASqx0mQR7iRLtOyMTrbPU0NIlZaPd+d3pVf3qeFHb+reiB8AiIdmKymj8Uc8YlDyKhK+bxke7/kKrybB0R+YKKhPCNoh+Tw1TtPJEFqkpQ1VaBr32PDQVz9uKQ6VbAmqOZ6fUgLjRcK0KtGsoKNVSNfr/NyCC2pbpkIrwuRM/QpRrmQqO0secFUr0Po3zohatRHmWv7Ib6cL+mUQ45jQRmlXH7jejDFTF4PRoLqxXfvHgcpRd84Lvgp2yAStwiJ+MuLBnKQ9BPmO/HYJFnwPq4TsfbyiDrFnYATupAreRZsP6EFSkRYIsQryfaDnwpwKvmhsW5yjYULNs1zjj9/o0hV6qoQoSSnfOSppWFfKUucfJti593pQ5hSjd+O14J9erw+3vhToVkxVGtf8t/OGinpgrAqT/ESS1ctxG1RJKeLPWV+A3gkzsA0r81r17Qs27BrcW51OsCyBnUDDyrpfTB/tOz19Ph76P0G</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022E2EA243515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022E2EA233515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022E2EA233515E0401F0A0799033C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95107725B00F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95107725B00F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024007450</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95107725B01F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00061_UVTC_PrimaryEmail_valid_Role_Linked_LASP_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="8f030846-cd24-47d1-afcd-9e105a44c41e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQjx0kILbCVGeoL3c8VetRTm/bL3fSEDA9EJQEX/rrb4KFotVez51xBrNsdp/dfXiSWwbjyHRcxnDKSUKVQbel/lO3moEJLFOzDXCjWaaNNNt6Ff8atg/sRvD62qiryoCxDA8o45DylmoCw9JAQzPqnll36vJXA9f2i6o84pSJ0MKlBlRlE0eUOXnalpql1EkgI8yhMMbM4ciZuaOhIzwdWGBS27c7lHnCtD3nfOHoOqr5GOEoQjWUxPqtvudz6zNnRkIKeZbij5w+a6kfe9frdW1dryVpqJsAAB3YuvDxGQkv1fZFsRn7Axoku3UH0oQSBCPyDiWoEebzxFfcKExSwufxidCGbgAZWsMbpCHDopeq/pkgR3dmpD2QKYMam0OjCDbFAU4xRVj5NR201MvzJrjb66WQsiBJY3aw/jNImK5wlCywr7GisgLd+RGPtKt9i5EzoCjKGFnhsaTJAiLMlEmKA7IZEibI5zMlH7+yYeJHCpZh9CdjudWrWAV0/Uh3uiTEjP+fmVXntYvyCKMMt3t3UwZgNnCv33/Vg87YAv7fPfupNzFGrRxC1XkHqhz3x/qQrCW3PjalPQafG81tsPZeNmhOes+j0fgZbuzMxnT8dPXX+iZ537LH2Vt/EQ2jYXxtrabWBHhxI7t7e7Si/sQc9sLmM9qMLrz77fjpZuV6pP+TdfqW3Xno/njy7Jd7Qslzsz7zfw7j+dzVr8OrR/0ha96/NV6mvwm3h9QbL357oyiLouC1+2PevzBgx3uJlk3W7fCrh6twGLLWZ03VGvaNhSTMstc3jHixlPQYdJW+mBfk38uLtBBfC3JXZyE1inFMudqWu6S0OJkQIOI7Ypi7dd9uGMA2+s3+td25q4MesIDRBy5o2HbdvnYLDdqhOIDYSWhAZC6psjv+fA8QxQ7D1MeptkoyNMdM/SZiF3KoDOhUfBwJZdhLhIobPluibNmkZkCT5dYKWIhCaK+RqowT/kAfUjfgOK1It+UBc0+6pxiRBcFS3yXBmWA446IXS7jKeGTUVrBGcSZOgFSKsGNazYbOSLyIsESqx4mfRbi2mC/yzuhs9zQ1iFhuHQ7d2ST/9E5WdviuaILw8Yl0YLKaOywGiY+cQmZRyumSG9WSi/Bu5hP5hYmO8pSgHZL9V59EkQwpWZLXVIAufQ8Ne3H1w5LKVP6KoJLs5SktRF5IQLsYyRLWlrVstcryIdxIeUtFeF2onKHPMMqERm295DemehlCP+uIKFEfZC7t+/gyPqczDjmOBWWUfHnG/WCGmbwfDATXN+dePvZSir5xvOHHbJ1IXCMk4m9vGshB0k+YJ+KxTlL/c1xHYlXyiDrFpYATGsqVPAy2J2iBEhGWCPVK0mrwYwGOJd83lk0usXDBpteM49NvFClLLRUilGSUD7pqbqhKZY6TbxfY+XT6EiaX44/zdcNOnq9Po+FMiFYM1dKX/LezRnK6IKzKYzzH0lI34rooktOwIs0fAA/UGZimDW76rmvc3XWr6gxs2ygbuFdJ+4v5q6XS08Pvof0v</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022907FAB1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022907FAA1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022907FAA1BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091F8F69CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091F8F69CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024011861</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091F8F6ACB30E0401F0A0599396A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00062_UVTC_PrimaryEmail_valid_Role_AccessPortal_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="dbca792c-5541-4b4c-9345-b7090ccdeedf"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6sQJyEQooJEobR0C22BtlterowzgJfgQOzw0V9/7dCkQGlv90qRIk/GM2dmTo59zvE8tP065xALGjGt3azq/7hl2yXICgxkjypGEXnIwF4FDCsYAyYljxRLlq61OU+gzbjATFR1G1lFA7mG5Qxsx3fkUyqUyu5Q154g5jK0dCkgXdvMQ8b9NG1VT2LmR5hT7jM8B+4L4vfrnVtfevo4w6TXznco04RxbSrEwjdNUgiAQBiSAonm5rl54HMecL9PJwyLJIa3nAGv6m971+t1Ye0Uonhi2gghE1VM6RNwOjnTaz+yzRC02TjarRuYRYwSHNJXrEB1QEyjQKuHkyimYjr/JLRlWkiFNmBDDGIV2ZluvidI0X0z0gHImGODT7GVBevBGGJgBLTHXruqn31vgru9gxgzPo7iOT9a/x0kYCsIowUEBs8qy9B9P+KJdtXOgfhtRsKE0xV0FU0WmADX7mMY080t5ZJ8AdfS8WsbLh+asQzI34zl3NzHKqGbJ7rTpBPg4v/MbH9euyhPOEyglgzR8yWMHpyH7eBucL+47T+jrUMugDxWUwj7zjtQ+bjf1sdkzbn1tqlVasXOz/vyxfXDgzO8qiP08ouPGnbn9Vl0PfYSwMts8/xCVyOvNZxNo9ET6z2+rheoAzeNIRW4M271hjwYPXvNHzfLtTOw2vQFed3u9f19kwxLXfJ6Nds+e8vfbpd3bp6s5CGo13vDy/Ljy9PN7LZhRnesZC+G2EPlm3LRHMUN7+rn+Idzzfom7pUr/dm0wpdAVqT6XtN+DYfGTBL6yegPEJEtFT3aTa0l54XF1/KiLDQwxqmrv1AaxQUwodfULiUtfiIFiAa+HOZu3aq4yLYqdtGym07DRZeoiKwWqqNypYJcp5lp0A7FEcRGxMZU5VIqu+PP1wDJ3OfAAoiNVZSQKXD9i4hNLLDWZj35c0SMwyCSKs5nf9a4kqxgYoWW91pGibcubsuE61o3EnfsLq6PBcR70l0cIPtAuntA6IKC0ndFcC4ZzoXsxRKvEhFahRUuMEjkCRArEfbtoueanM4XISik5jwKkhAKi+ki7YzJd2/bwISn1nqjcdnvp//ep6Udf8u6IH0Cqhy4KucC5CThxDFkZ7V8XrO7X3MWvp4EVP1isqUipmSH5PDTO1MURXKa7IrKUOfOx4aDwOZxTXmuYEVJTvf8nJYyL0Wglg1liQvLQrJaJekYykrgYhnelDpnmX0giVSp7SCaATPzEOa3Dokc9VHm3H6ILxFT1hdYwFySRkuX37gh9IGrG0Jbsn3z3evHQUrZNwEbccrWCOVFQiH+8q5BfKL8pPlevtZRHLyP60SsvTyyTnktEJRN1EodB9tPeEEiGZZK/Yri/eCnApxKfmjMm5xjEZJNo0TA5180JUxVHRMSJUy0m3pq2BfLFKfYLsB/d/oQJhXktxN2wz89YX93bvtStuZYz33pfzsbNKULAV0d5CmWqr6RF0aZnE32xPkN4Ad9dipN23LrVtlyc312pT5XvHcuH1RS+2D+aNnr6fH/UPsX</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950239D215B1715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950239D215A1715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950239D215A1715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502192412D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502192412D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024015857</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502192412E3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00063_UVTC_PrimaryEmail_valid_Role_DECE_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="25ab9353-a23e-4932-899c-ce54f4e4c3d9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1VwbtyigkQLtPS+QLtsX45cZwC3wQHbCXR//bEDSYHSnu6RkJAn45lvZj5/9onAs8gNWkIAlzRmRq/dMP+pYg8DrlSsahU7lu+6tlUnHrG8+hh87DvVytgzjZ4QCfSYkJjJhunajm/ZZcvxhq4XeF7g2yW7Vn4yjUfgQoVWLiXbNFaziIkgS9swE86CGAsqAoZnIAJJgkHr5jpQngHOMZnNkzXKLCFvTqWcBwiRUggEooiUSDxDJ2jH5yQUwYBOGJYJh03OUDTMzd7lcllaeqWYT5Br2zay60j5hIJOjszmj3wzhD02jtfrM8xiRgmO6B+sQd2AnMah0YomMadyOvsktIMcW4e2YEUs4vjsyETvCTJ034y0A5ILbIkpdvJgfRgDB0bAeOj3GubR9ya43jvkmIlxzGdib/13kIClEMVzCC2RV5aj+37EA+1qngAJeoxEiaAp3GqazDEBYdxzGNPVNRWKfKEwsvEbK6F+NGcZkL8ZywnaxqqgowPdadMJCPl/ZrY9r3WURxwl0ESXAs3GC3y3Sp3R8XE1mV/6v3q3gwfwGxmEbec1qGLcm/U+WQtubTaNX57QtJ/wO4d20eTpZjp5mqT3Nxf3/MLx8P3oGvlvT9Pzn4OpoC+4/7i4dVp+9aJ71XJ6aYVP5+7zLxG6nd+tRfyD/cHn1H27dFF5dNyO7xd3w9W503295pX+69MFHkr6G+TxMRp5suYMy27nofbozvmgXr0g/Apf/nxx6enVMmTy7sfgdug+hp3UWdVGUGb1UdluvNe0XcOuMZeEQfL8AkTmS02PXtvoqnlh+bW8aAsNrXHmGsy1RgkJTJpNvUtLS5AoAaJhoIa5XnfrZdv12t2WW612Oq7bsX3b6dotu1qv277TyjVojWIP4lnMxlTn0iq75s/XAMksEMBC4FYaJ2QKwvwiYhtLbPRYXx2OmAkYxkrFk/qyUlssqrEbVTC3l5U3Ml6kWJrGbSzv2B1vjSXwLeX2h7a7o9x9IHROQcu75rdQBBdStWKB00RGTinFJQaJugC41uDA9WtlJOhsHoEGimZxmERQmk/nWWOQWP+7FiYis2ZdJSI7e5+Wtv8t74LyCal2ELqeU1CThAPXkJcX83nR5e2i8/CtJKT6iKmWSk7JGsnup3emaIoUNNlUlcMuvPcNO5HRflFFsjClpOB7cVErnVcq0MzHssClRSlJ0yQbRFUrHFfhkRI6Bw2AJEqm3obxKzBUhEDfuiUK1HuZC/suvkRO2UBiCTNFGyNbfuOJMAChnwg9RffVd98fOylV3ySs5CHbWaReEhrxl48NEhDtp8z36m8Z8/B9XAdibeVRdap3gaRsolf6Pnj7hBgkVmGpErCYbwc/FOBQ8l1j0eQCi1Rsek4kfP7F0MrUMDEhccJkr21mhm21zHDKtzkE704fwmSKvLliV+LTK3Z0cz1QujXDZuFL/9vZohldCJj6Js+wNMyVejGq5Gyypc4bgB8E2nFb9qnvljuVs0Kgy0qg6/XTooE7lTQ/mD9atnq6fx6a/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950212A0B455E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950212A0B425E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950212A0B425E6CE0401F0A0599099B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DFA277EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DFA277EE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024018848</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DFA27AEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00064_UVTC_PrimaryEmail_valid_Role_Coord_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="19e342c6-f80c-43d4-8ac1-8e1f42bd6288"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWn56NT+grYjjCDIB5ERYHjUb/cCelCIyUtTQrFX3+TYisgej13hhkm283us7tPnuSMoUVoeS3GIOEkokqv01D/qSPXQq450SbYsTTHr1c1t+6casYUW46LTy2rNlGVHmMp9CjjiPKGahmmoxlVzbTHlu3Ztuc4FccynlXlARImQguXiqEq2SKkzMvTNtQ0oV6EGGEeRQtgHsfeqHVz7QlPDxWY1ObZFmWeMGkGnMeeruOKDxjCEFdwtNDP9D2fM595IzKjiKcJvOX0WUN927terytruxIlM90yDEM3XF34+IzMfqrNH8Vm8Ht0Gm3XbUQjSjAKySuSoG6AB5GvtMJZlBAeLD4JbeqmIUNrkGENmw79qervCXJ034y0BzJhSGMBMotgQ5hCAhSD8nvYa6g/vzfB7d5xgiibRsmCHaz/DhLQFYRRDL7GisoKdN+PeKRdzTPAXo/iMGVkBbeSJjHCwJS7BKYkuyZMkM9nSj5+JWPiRwqWAf6bsZzpu1gFdP1IdzpkBoz/n5ntzmsb5QGFKTQpM/Tg15VO0gAQTJbz2347if3L4ea+kUPYdd6CKsf9tj4ka8mtt01X9mN7/Yrt+XX86vyh1+f93/Fv5wR3TzvL24AtX+5/Xbn9y2w+r13aNzbv1BPqrp/9mXE1fnw2u53O2KoDewLHiX48TbLBHD3EDrp7HEZ+3an2n6/XV4NndzobnNy3LrL6aPDniSzNRbem97P+00s/Ib/SdHjZrm24c/nyCsHjJp62z5Mf1B+fLF/ag80dTyc356YB68Z7Tbs17BsLSRilkxfAvFhKevQ6SlfMC/Gv5UVaiK9Nc1cvlhrFOFCuNuUuKS1eKgSI+J4Y5nbddaumUbO6ZtXodmun7oXhGGbXaBl1163ajlto0BbFAcR2RKdE5pIqu+XP1wDxwmNAfUi0VZTiAJj6RcQO4kjp0aE4HBFlMI6EipsUbYLNbDO1eTAxZ/F6vZpPrMSoZapyG/EBHSStKYdkR7udsWHtafcQMIkJSIGXDGeC4oyLZizRKuWhWVmhCoVUXAGJVGHPck6rOiOLOAQJVV9EfhpCJQ7ivDU62/5bGsIst+IoSnwPs/z4fVrd4beiEcLHJ9KByYLOQQwTjtxEdlHN51VXd6suwrdSn8hTJrrKE4K3SPY/vZNFsqRkSlFWgbt0PzTshdYPqyqz+SuCS86Xl7XQeqEEzWIwS1RZVtLVKs1HUZcql4jwuhA7Ux8BToVUbcbRHKhehtC/dVOUqA8yl/Z9fCkP6IgjDgtBHCVffuOZMAImnwk9Qfnsu2+QvZSibxwyfszWDsVrQiL+8sGBPSz9hPlO/K3FCN/HdSTWTh5Rp3gbcEJnciXvhM1XzCBCxKJkN/ixAMeS7xvLJpdYuGDTJOXw+RdFqlNDRRhHKeW9jpobdhUzx8k3MXjvTh/C5Kr8ds1m7NNr9vHmeiS0a4HU0pf8t7NGcrpgUOVtnmNpqJl4NYrkdLaj0G8AD0TaENzomBdmx7Ysc1ekDadulw3cq6T5wfzRstPTw/PQ/Bc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950226D1E1F3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950226D1E1D3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950226D1E1D3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062F150FF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062F150FF689E0401F0A07995349</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024022995</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062F1511F689E0401F0A07995349</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00065_UVTC_PrimaryEmail_valid_Role_Portal_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="f05cd425-2d9e-4f5d-bbaa-d5ac078eb3a9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj1XIlUuiggSldNktu+WyvezLkXEMeJvY4EuA/vpjhyYFSnu6R0JCHo9nvpn58tkXHKSJF7U5R0xgSox+t2n+Uw/qcbU2nVqB67lWUAeu1QBTZDVqbgDUnut5yDT6nEvUJ1wAIpqm57iB5VQt1594fuT7UVCveIH/2zTuEOMqtHKpOKaxSRPCozxt05SMRBRwzCMCUsQjAaNxe3ATKc8IFJjM1sUOZZ6QtRZCLCPbhpUYQZQksAJpal/YBz4XMY/GeE6AkAy95Ix503w5u16vK2u/Qtnc9hzHsZ3QVj4xx/MvZuusOIziPpnR3foSEEowBAl+BhrUAIkFjY12MqcMi0X6TmjXdh0d2kIbaEE3IF9M+zVBju6TkQ5AMg4svgBuEWyEZoghApHxa9Rvml8+N8Hd2QkDhM8oS/nR+u8gIZKhhC5RbPGisgLd5yOeaFfrAsGoT2AiOc7QD02TJYCIG7cMzfDmBnNFvpgb+fiNDVc/XLAMwb8Zy4W9j1VBt090p4vniIv/M7P9ee2i3IFEotbAz8K77iXN7pC02/i+CklwLm/9eNFu5hD2nXegynG/rI/JWnLr5dC3+flotZhkvSvnGxpeNxodPFytZ32+xvfDq0f398Lb1qTa9ZZBI3usTdgvDjsTOazfdcgQOpfVZEDunuT94zdxJta99cAffZ0/eDfnv6vXHcgn58/n4nr0x1+HaXtbzxqz6ZwNx/FT7evwPPHH4R+xlUlvsVrd3j6y5On5+5aGz5KDswXrwwe7B1ImyGWnS2ZXtPla034Nh8ZCEsZy+gdBUSw1Pfpdo6fmBcTH8qItOLZmuWu01BrFBSLCbOlTWloiqQQIx5Ea5m7dC6uuE7pXbsfz6h3PvXICx+05bacahn5YqxUatENxBPGSkhnWubTK7vjzMUCYRhyRGDEroxIuEDc/iNgFAhh9MlIfByUcTahScbeRwC3mDRcv11MfOgw4MvEDODWNH1T8JD9ZeyYQ25PuYOJ4B9I9QhAvMdL6rgnOFcO5UL1YgUyKxK1koEKQVDcA0yIceUGjanOcLhOkkdopjWWCKsvFMu+MzXf/ngUgz62YwyVlAiSQu/kX+G6Bx3tFL5RPjLUD10V1kJonOnEZ+UVF71de3a+8CN+WMdYfmmqsYBjukBxuvfJFE6Uky35pBfbyyLHhILx9XFmZMc4wLKlf3tlK8pUgtIoBrUBlVZFZJvOR1LXYMRXeVprn2mMEpVKs7YQ+IWKXIexPXRgl6qPMpf0QnxQLMhZAoFQRyMiXn3gtjBHXr4W+Yv7ms0+Rg5SqbwJtxCnbZaIeFRrxh+8OGEHtp8y36m9NWfw6rhOx9vKoOtUTQWAy1yt9NWzfYQekKixWWkbZfvBTAU4lPzSWTS6xCMWmqRTo/R1Di1TTBBBSSUS/a+aGfeHMcYrtEkWvTm/C5OL8cttu+Lu37cPgZqwkLAVm6Yv/29nCOV2gemsq/xxL09yox6NKTuZ7Qv0C8I1W17yeW/XavVojLLW6HoZVPwjLBh5U0npjfmvZ6+nx99D6Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951062F152BF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951062F152AF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951062F152AF689E0401F0A07995349</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091E1B227B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091E1B227B21E0401F0A05993966</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024026212</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091E1B237B21E0401F0A05993966</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00066_UVTC_PrimaryEmail_valid_Role_Retailer_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="47419b00-3302-4f25-90a2-37be3c83a5cd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4jx0jfwL2BGZICL1uCMnFNDflpSPkNaixZWLJ4PTXX9nEDlCSm94ZZhitV7tnd4+OdM5xEpvegHPIBE2Z4g976o+F3TZdDEQzwYo02zQiDXecthYtyKKrt40oauuq4nOeg8+4wEz0VFM3bE13NMOamZZnWZ7ttrpme64q95BxGVq6tOSuIokZ96q0PTXPmJdiTrnHcALcE8QLBjdjT3p6uMak9s93KKuEWX8lxNpDiLRCIBDHpEXSBJ2jA5/zkHsBXTIs8gxecoa8p77s3W63ra3VSrMlMnVdR7qLpE/I6fJM7X+qN0PosyjdrS8xSxklOKa/cAnqBsQqDZVBvEwzKlbJG6ENZOhlaA0KohHDZmcqek1QoftgpAOQGccaX2GjDjaFCDJgBJRvU7+nnn1sgru9swwzHqVZwo/WfwYJ2AbidA2hxuvKanQfj3iiXf1zIJ7PSJxzuoFJSZM1JsCVuwwiWowpl+QLuVKNXym4/NGaZUD+ZCznaB+rhI5OdGdIl8DF/5nZ/rx2Ue5xnEN/Eehj8MNC0GFub3TiI3t8Z42Mx3DbqyDsO+9ANeN+WR+TteHWy6Z/7i1ybQt/ZZg3vy4vVnyN5tO7z6h7R1wTjbdt9BndfI2y4XhuGpOOkKmLL4NBG0a+8/M5mC/1v2YP069ogq6+f7qfPOLi2pkvuiGIb8alGSRQLNPvnWQa/D257qQJttqDe6Cd7PtD92sQWMWXeH7NcBg5TDzNrwhbW5P5YDH/Of001A0nfv7M17718CDM7OqW915r2q/h0FhLQpAvfgIR9bKkhz9URnJeWLwvL6WFhlpUuXrrUqO4ACbUfrmrlBYvlwJEQ08Oc7ceuY4+NHXnwnI6o87IvtJt3RjpA73juk677dYatENxBPEyZREtc5Uqu+PP+wBJ4nFgIWTaJs3JCrj6TsQhFljx2VQejpRxmKVSxWnHth+7hfH4i+XEKTbrZ5ymncJRlUkqbtltNogEZHvKbc9080C5p0DomkIp7yW/uSQ4F7IVT3iTi9hobXCLQS4vgKzUYM+0uw7iNFnHUAJFSRrmMbTWq3XVGMR3/6aGCa+s06vZj8vgh1EdvjdrO/5Wt0H6hLR04GVBFyBHCSfuIauu5u2qnf2q6/CDPKTlGZM9FRklOySHn16pUnKk4UldVo27cT82HIRGx1U12cINJQ3jm6taKr3UgX49mCfcemrlm01ejaJTalwmwyMpdQYKgORSqJ5n6SMw1IRAH7onGtRHmRv7Ib5crFggsIBEEkeplh94JATAy0eCLwlffPQFcpBS9k1AIU7ZLmP5ligRv/vcIB4p/aT5Tv5t0yx8HdeJWHt5ZJ3yZSAoW5ar8kZ4foMZJJVhqZSwNNsPfirAqeSHxqbJDRYh2bTIBbz9RSm1qadiQtKcCX+oVoZ9vaxwiuc1eK9Ov4WpNPnlki34m5fsw804kMqVYLXxpf/trNGKLgTU8i6vsPTUQr4ZZXK23NPnF4DHEm0absc1za7pdKxGoh3X1d3BRdPAg0r6v5l/t+z19Pg89P8F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950219792292573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950219792282573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950219792282573E0401F0A059909AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D205B357F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D205B357F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024029006</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D205B358F7F4E0401F0A07995669</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00067_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="175bc5e6-1d04-48d9-8a74-b7a2cc2b464e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pG2/tCDMockTlwLUcPPrlTEi3EG1TaFIo/vqbFFsB0eu5M8ww2W52n9198iTnDEWh5XYYg4STmCr9bkv906ibfh3ZjhY0zUCrgtXUHKte06aOiWsNy7LMqqMqfcZS6FPGEeUt1TLMqmbUNNMeW7Zr227NqhiN5pOqTCBhIrRwqRiqkkUhZW6etqWmCXVjxAhzKYqAuRy7Xmdw5wpPFxWY1Pb5FmWeMGnPOV+4uo4rPmAIQ1zBcaSf63s+5z5zPTKjiKcJvOX0WUt927terytruxInM90yDEM3HF34+IzMTtX2SbEZ/D4N4u36EtGYEoxC8ookqAHweewrnXAWJ4TPo09Cm7ppyNAaZFjDZpWeqvp7ghzdNyPtgUwY0tgcmUWwewggAYpB+XXfb6mn35vgdu84QZQFcRKxg/XfQQK6gjBegK+xorIC3fcjHmlX+xyw26c4TBlZwU9JkwXCwJRRAgHJ7ggT5POZko9fyZj4kYJlgP9mLOf6LlYBXT/SnS6ZAeP/Z2a789pGmaAwhTZJfjw3mzxZP11evNx5NyMHvwTOxoyg08oh7DpvQZXjflsfkrXk1tsmfv2Kqjxb+tawM7Wfwl/N4fOgMbx9TO/Dbvpk66PgR39izh+mv390r0ntxsNznp1dx+OzyfKGXKX6Q2jOhuz56pd1coN/e9f6NYfbaHS7wdP1tENWo5fJ45WP1lHwwryBlzXrm8nD+uYxfOw5d85TvddoPqCzxmO4Zv/UG8bjYMgeJpSeBFPWu+iNB5sL9PA0ebaXy2rrvabdGvaNhSR46fQZMC+Wkh79rtIT80L8a3mRFuJrQe7qLqRGMQ6Uq225S0qLmwoBIr4rhrld95yaYdmm06k2urXLq4sro2qYPaNj1BzHcOq9QoO2KA4gXsY0IDKXVNktf74GiCOXAfUh0VZxiufA1C8idhFHSp/ei8MRUwbjWKi4P418mzmNeGoszXhmzJvrxWsWzTJV+RnzIR0mnYBDsiPd1bFh7Un3PWCyICD1XRKcCYYzLnqxRKuUh2ZlhSoUUnEDJFKEXavarOmMRIsQJFI9iv00hMpivsg7o7Ptv6UhzHJr967jjf5cen/M/Px9Wt7ht6ITwscn0oHJki5ATBOOXEXVop7P667t1l2E76Q+kcdMtJUnBG+R7H96Z4ukSUmV98IK5OWGQ8NecP2wrjKfvyK4pH15Xwu5F2LQLoazRJVlJV2t0nwcDSl0iQivC70zdQ9wKtRqM45fgOplCP1bl0WJ+iBzad/Hl/I59TjiEAnyKPnyGy8FD5h8KfQF67PvPkP2Uoq+ccj4MdtlKB4UEvGXbw7sYuknzCPxt44T/31cR2Lt5BF1iucBJ3QmV/Ja2HzCDRyLsEToWJzsBj8W4FjyfWPZ5BILF2yaphw+/6JIgWqpCOM4pbzfVXPDrmjmOPlmAe6704cwuTC/3bQZ+/Sm/T24E9cJREgtfcl/O2skpwsGVV7oOZaWmomHo0hOZzsi/Qbwg05b9a55ZXVtwZJSpxtCp6sNu2zgXiXtD+aPlp2eHp6H9r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950226D1E2E3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950226D1E2D3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950226D1E2D3221E0401F0A07990473</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502319A47D5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502319A47D5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024031346</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502319A47E5CEBE0401F0A0599096F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00068_UVTC_PrimaryEmail_valid_Role_Linked_LASP_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="14ad292b-b388-4cf9-b98f-451fd58782b4"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH3vV0Tp4yjkQgJNBEhAWzVT6HAIQ1teKuMY8DQ4IbYh7dcfO5BwKe3pHAkJeWd77bUvXnaDgmVkeW1KUcpwTBT/uqm+GGbNhIYBNTCFU82eIktzZ1dTrWbVbdeCNbMahqriU8qRTygDhDVVyzBtzXA0szqyql616jl2pWZaE1UZo5QKaOFSMVQlW0aEennYpspT4sWAYuoRsETUY9AL2v2eJzw9UHBSW40tyzxg2lowlni6DishgiiKYAXGS72hH/k0QuoFeE4A4ynaxQxpU93t3Ww2lU21Eqdz3TIMQzdcXfiEFM8v1dZFsRmFPpnF23UXkJhgCCL8DiSpPmKLOFTa0TxOMVssP4E2ddOQ0BrKoAZNm1yq+j5Azu6bSEckUwo0ugBmATZEM5QiApHye+g31cvvdXC7d5QCQmdxuqQn67+jhMgaRXGCQo0WmRXsvo94plytBoKeT2DEKV6jBzkmCYCIKoMUzXDWw1QMX0iVvP1KRsUPF1OG4N+0paEfchXU9TPVucZzRNn/6dlhv7YoYxBx1Jos4CCheNQP2P0/dn8c3MH+I04ynxjNnMKh85ZU2e7d+nRYy9nabXrq0Hdq39+GBPqTNBtmr5O7kC+W7/DOTbPJwyP7yVb3gFwFnL/fPs9eX3V/GKye+ojSVWf1MHl8qo7T9s9xdxpekIdaCtuu83i9sTdX2XztR0Z90QYD/MNarGqcPehOf5RUf6zGw/dOD3f01XhjO/3n17dREpnuXfI8anPGg/rv0cWN0Z3U2bA7uv0T8tcbZ5C0m/ucDnM4NhaSEPDpHwRZsZTj4V8rt6JfgH0tL9KCQ22Wu3qJ1CjKEGFqS+6S0uJxIUA49EQzt+tb1zEs03K71ZvOTdW0bwzbMG+NtlF3XcO5qhUatGVxQrEbkxmWsaTKbufna4Jw6VFEQpRq65jDBaLqF4jXgAHFJ0NxOGJC0SgWKm7+sd7pPM4MIQTVeuSsDWc2XUR2TVUeYvaL/ErbM4bSA+m2R4Z1JN1DBHGCkdR3OeBUTDhlohYrsOYsMitrUCGIixsglSLsWfaVo1O8TCIkmerLOOQRqiSLJK+MTrf/lgYgza29XjsYvHSDFzM/f5+md/qtqITwCbF0oDKlDhLdRGeuIrvI5/O8ncO8C/g2D7E8ZqKsLMVwy+T4035a5JiUo7JPrGBebjg1HIHrp3mV8cI1huXYl/e1kHshBq2iOStQWVX4es3zdtSl0KUCXhd6Z+oBglyo1dsofkVELyH0b10WJeuTyKX9mB9nCxIwwNBSDI+SL7/xUgiE3ghoX0x99t1nyFFIUTeGMnbO1o3Eg0Iy/vLNAT0o/YR5IP42cbpP/BzWQRyRp3geMEzmciWvhbdPZgPGAhYLHYvTQ/BzAOeCHxvLIpdcmJimKWfo8y+KFKimCiCMOWH+tZobDkUz58neEuTtnT7A5MK8u2kz+ulN+9TvBUK+lkAtffF/O2s4HxeIVHmh51yaaiYejiI4mR+I9I7giU6bhmvemB27U+9YZqnTjutW3Vqp08eZtD6YP1oOanp6Hlr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091E1B4C7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091E1B4B7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091E1B4B7B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502129C3EBE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502129C3EBE314E0401F0A07990586</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024033790</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502129C3ECE314E0401F0A07990586</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00069_UVTC_PrimaryEmail_valid_Role_AccessPortal_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="2f1ec15e-c08b-49d4-92be-d6647ef3f0b3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3A5j1PGF8zNFagiQLIkgUlik2HzsqXIDdbEloglc5mvX8lgBwjJZraKKkrtVvfp7qMjnXOUxI7X5RxSQRjVhv22/o+DwmdkO3UjhGrLcBF2DfTsOgbCdQgdp+E4FtK1IecZDCkXiIq27li2a1g1w64GTtWrVr1ao1JtuU+69ggpl6GlS8XStXUSU+7ladt6llKPIU64R1EC3BPY87ujW096eqjApHfOtyjzhGknEmLhmSauhIAhjnEFs8Q8Nw98zkPu+WROkchS2OUMeVvf7V2tVpVVtcLSuelYlmVaLVP6hJzMz/TOt2IzhEM6Y9t1D1FGCUYx+Y0UqBGIiIVaN56zlIgo+SC0bdqWCm3AGhvYdumZbr4lyNF9MdIByJQjg0fILoI9wAxSoBi0ycOwrZ99bYLbvUGKKJ+xNOFH6z+DBHQJMVtAaPCisgLd1yOeaFfnHLA3pDjOOFnCWNFkgTBw7S6FGVnfEi7JF3ItH7+25vJHCpYB/pOxnJv7WCV080R3+mQOXPyfme3PaxvlEcUZdL7f3f+e1MX14hdeZ81WkL78sOYXJBoN79s5hH3nLahy3Lv1MVlLbu02RT/x7WiK7m7c6ygkN00CvWkjGAWjJ3HvX8XJ6iUInEUK1aDFY2fMq+HyhsEE08lqRnxrenEfTSM7eJ2+2NVv8PcomCVNp3893TxejebjJ/P+enQ7GJOf8eRx8zh+8jm3ms3s6sq/oMvr76tWMGa9tcPn0/HK7r2Mfl0m7mZeDx4W355e75hNqb9ik78seBr8hEn7rab9Gg6NhST42fMvwKJYKnoM+9qlnBcSn8uLspDQmOWu3kJpFBdAhd5Ru5S0eJkUIBJ6cpjb9WWrZvWlzjmDerNnDeoDy7XsS6tr1Votp3FRKzRoi+IIYo/RGVG5lMpu+fM5QJx4HGgIqbFkGY6A659E7COBtCF9kIeDUQ4BkyqeJbVZhF2eNar0OQ1xNN9g8XtFdW3MxA/6I+3OBKR7yu0GlnOg3A+AyYKAknfFby4JzoVsxStaZiK2K0tUoZDJCyBVGuw5brNmcpIsYlBAzYSFWQyVRbTIG2Py7b9SIZ5bu73ewO/5+dn7sLTjb0UXpE9IlANX9VyAnCScuIbcopiPi67tF12E72YhUUdMtlSkBG+RHH56Y4qiSEmTXVUF7NL72HAQ2TwuqkwWLgku+V5e1FLnpQp0irG8osprJVsus3wQDaVwqQxvSqGzTR9wJmVqE7AXoGYZwvzSLVGiPspc2g/xZSKivkACEkkbLV9+4YngA1dPhKGk+/qr74+DlLJvAtbilK0Xy5eEQvzpYwN7WPlJ8538W7E0fBvXiVh7eWSd8l0gCJ2rlboPNh8QAzMZlkgBY+l+8FMBTiU/NJZNLrEIyabnTMDHXzSlTG0dYcwyKoZ9PTfsq2WOU2wW4L05vQuTK/Luil3zD6/Y6ejWl7qVIL30Jf/tbJCcLhh0dZPnWNr6Wr4YZXI631PnHcBjgXacZrduuZeNvtMtBbrRalluf1A28KCSzjvze8teT4/PQ+df</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950228A60507D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950228A604F7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950228A604F7D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950D2012E68C0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950D2012E68C0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024036636</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950D2012E69C0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00070_UVTC_PrimaryEmail_Invalid_Role_dsp_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="6aa86049-da18-4d91-b98e-01f33a8615cd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSP"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSxyokDgmQCJAotHfTpS0L9PPlyjgOeEmcNHb46K9fO5AUKO1lr4SEPBnPnJk5PnaTwSg03Q5jOOUkporXa6n/2r5tA6tqa7hu+po1sW1tYk0m2sRAGGHHcQIzUBWPsQx7lHFIeUs1DWBphq2B6tisulXLNYwKqNdeVeURp0yEFi4VQ1VWUUiZm6dtqVlK3RgywlwKI8xcjtxR57bvCk8XFpjUdnODMk+YtmecJ66uo4ovwIQhqqA40pv6nk/TZ+6ITCnkWYq3OX3WUrd7l8tlZVmtxOlUNw3D0A1HFz4+I9NztX1WbMa+R4N4s+5CGlOCYEjeoQR1i/ks9pVOOI1TwmfRF6GBDgwZWsMrpCFg0XNV/0iQozsx0h7IlEGNzSAogg1xgFNMEVYehl5LPT9tgpu94xRSFsRpxA7WfwcJ0wUO4wT7GisqK9CdHvFIu9pNjFyPojBjZIHvJE0SiDBTBikOyKpPmCCfz5R8/MqKiR8pWIbR34ylqe9iFdD1I93pkSlm/P/MbHdemyiPMMxw+8mLzbvF4/LmZd41nhrmcjAb10nNfAhfWjmEXecNqHLc2/UhWUtubTfNLZggMoUz0/8B5/PF+xUfg17K/ol+xQtrRu0J6OnDcVZ7I14t9AYNMHiFy4shCbj+1OhGxs3Dz7h/CV4bLxdnHbhKr37bd42H5+VkaDwE70/BIkoa68yPuhbv6asf1RqcNkLTu4VrtEZRUh+tglcyNN9glNrP40sbX0xuZt15/6x2278frAe/SPIzjW5MED6i1kdNuzXsGwtJGGWT3xjxYinp4fWUazEvyL+XF2khvhbkrm4iNYpxTLnalruktLiZECDiu2KYm/W1YwOjVr3sgkbd6ALnyrAMcG10jLrj2FUbFBq0QXEAsRvTgMhcUmU3/PkeIIpchqmPU20RZ2iGmfpNxB7kUPHoUByOmDI8joWKrx27ETiT1dIhdZCApdDK2W+yrgFVuYv5Pb1POwHH6Y50W2PD3JPuIUYkIVjquyQ4EwxnXPTiDS4yHoLKAlYozsQNkEoRdk2rYeuMREmIJVI9iv0sxJVkluSd0dnm39QgYrl1eDXOD96XdR1+K1ogfHwiHZis5RKLMeJPd1DVtYtCvi7Y3i24CN/JfCLPl+gnTwnaINn/9EETyY+SI6KiAnLpeWjYi6ofFlQm8hcElUQvb2gh8OL4t4txvMHKWyVbLLJ8AHUpbakIrwuFA/oIo0zo03oczzHVyxD6SddDifogc2nfx5fxGR1xyHEk6KLkyxPeBiPM5NvAEzxfnfrw2Esp+sbxih+zdUPxhJCIv31lIBdJP2EeiL9lnPof4zoSayePqFM8CDihU7mSF8H6C1KgWIQlQrnidDf4sQDHku8byyaXWLhg0yTj+OsvipSklgoRijPKvZ6aG3ZlMsfJ1wl2P5w+hcmleHu3rtiXd+vzbX8kBCuCaulL/ttZIzldEFblFZ5jaakr8VQUyel0R5a3AA+U2TCrTs8EDQvUgV0qs+04htMolXm/kvYn82fLTk8Pz0P7Dw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950239D21851715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950239D21841715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950239D21841715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951063BC1870C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951063BC1870C19E0401F0A07995351</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024038992</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951063BC1880C19E0401F0A07995351</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00071_UVTC_PrimaryEmail_Invalid_Role_device_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="d494b61a-8681-402a-b948-0bf05e012ace"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DEV"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIhUBKBEi0lJa29AKU7vblyDiTYHbiQOxA6NcfOzQp0MvpPhIS8mQ8s2ZmedlNhqLQcjuMQcJJTJV+t6X+U3catlE3kFZDNUezDR80NLUcDaaoeuJXjapjV1Wlz1gKfco4orylWoZpa0ZNM6tjq+pWbdewK6ZVf1GVCSRMhBYuFUNVsiikzM3TttQ0oW6MGGEuRREwl2N31BncuMLTRQUmtd3coswTJu0Z5wtX13HFAwxhiCs4jvSmvufT9Jg7IgFFPE3gLafHWurb3vV6XVlXK3ES6JZhGLrR0IWPx0hwpLZ/FZvB61M/3q7PEI0pwSgkr0iCGgCfxZ7SCYM4IXwWfRHa1E1DhtYgwxo2bXqk6u8JcnQ/jLQHMmFIYzNkFsGG4EMCFIPyOOy31KOfTXC7d5wgyvw4idjB+u8gAV1BGC/A01hRWYHu5xE/aVe7CdjtUxymjKzgVtJkgTAw5T4Bn2Q3hAnyeUzJx69kTPxIwTLAfzOWpr6LVUDXP+lOlwTA+P+Z2e68tlEmKEyhTWrO9aszg+BYH10/HHuj6sY7nzzrEz9o5RB2nbegynG/rQ/JWnLrbdNl1jgzJ2fjl9fraGDG1thbPq6jrJf5vevwdOD0Jy+TrPdn8FJlD1n8+67fubQvkqdx8Lpc3kav3lViw+iKZefhcfArCOynOzoilvE4fUZnF/A4vjBJ13rEdZ89hZcPp35vc3kyD++Oz5fPK2zqVzfQnT8+OHfrcW+Ix7dxr2ZcXyXO9OEXQzTd3N/Xo9v5yvanK/Tcab3XtFvDvrGQhFE6nQPmxVLSo99VemJeiH8vL9JCPM3PXd2F1CjGgXK1LXdJaXFTIUDEc8Uwt+teo2ZY1kmnLk6W07U654ZtmD2jYziNhmF3zwsN2qI4gHgWU5/IXFJlt/z5HiCOXAbUg0RbxSmeAVO/idhFHCl9OhSHI6YMxrFQ8dprOHfmxHDsDdnUQ58G5hTNw4aq3Mb8jt4lHZ9DsqPc9tiw9pR7CJgsCEh5l/xmguCMi1Ys0SrloVlZoQqFVFwAidRg17JPajoj0SIECVSPYi8NobKYLfLG6Gz7b2kIs9w6PB/n5+7Lsg6/FR0QPh6RDkzWcgpiivDhCqq6taKQrwuu7RZchO+kHpHHS7STJwRvkex/emeJpEdJEVFRAbn0PDTsRdUPCyoTeSuCS56XF7TQd3H628U4lqiyrKSrVZoPwJHKlojwuhA4Ux8BToU8bcbxH6B6GUL/0e1Qoj7IXNr38aV8RkcccYgEXZR8+YOnwQiYfBr0Bc2zn7479lKKvnHI+Ge2s1C8ICTibx8Z2MXST5jvxd86Trz3cX0SayePqFO8BzihgVzJe2DzBSlwLMISIVxxshv8swCfJd83lk0usXDBpmnK4esvilSkloowjlPK+101N+yqZI6Tbxbgvjt9CJMr8dvVmrEvr9bfg5uR0KsIqaUv+W9njeR0waDKGzzH0lIz8VIUyWmwo8pvAD8Kc7VhdYyuZTXqpTDXhDA3TpyygXuVtD+YP1p2enp4Htr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022392A0E2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022392A0D2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022392A0D2296E0401F0A05990987</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950228A60607D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950228A60607D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024042801</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950228A60617D2AE0401F0A079904DE</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00073_UVTC_PrimaryEmail_Invalid_Role_dsp:customersupport_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="3c3e9b55-a4cb-4e4b-8bf5-c407e28058cd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSPCS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSxyrkDk1UkCiULi29LNCW05eV6zjBPYmT+sKlv37t0KRAL9uzEhLyZDzzzcznzz5hIEudsMsYohznRBv22/o/jtMEVvDkG1bkuIYXwCcjiONjI25B5Hq2ZQPg69qQMYGGhHFAeFt3LNszLN+w3anjhq4XWq2G51uPunaPKJOhpUvD0rVVlhIWlmnbuqAkzAHDLCQgQyzkMJx0r0ah9AxBhUnvnGxQlglpZ855EZombEQIojSFDZhn5om543MSsXCCEwK4oOgtZ8Ta+tve5XLZWLqNnCamY1mWaQWm9IkYTg71zkG1GUVDEuebdQ+QnGAIUvwKFKgrxOd5pHXTJKeYz7MvQtumbanQBlpBA9oeOdTN9wQluh9G2gFJGTDYHNhVsDGKEUUEIu1uPGzrhz+b4GbvlALC4pxmbG/9Z5AQWaA0L1BksKqyCt3PI37Srs4JguGQwFQwvEDXiiYFgIhptxTFeDXCTJIvYlo5fm3F5A9XLEPwT8ZyYm5jldDNT7rTxwli/P/MbHtemyj3IBWoM8UxvejZzw94Ojt+uIrHy2B+1+ViYZ61SwjbzhtQ9bjf1vtkrbn1til9OSqS5HL9xGb3lHvm0+g0TR5O6WTyOFnz5uv19CZDQVaMLy6EfRNkd+TBPF//fdp6nl2L4MIhpn+0PrVbAzQbHfRml6mV9P46Yildrs5sc8Und12RjH49/rpous6sOxlcsmlRDK4HwkpfF48FOe934+D+cQlGV8JNnUvX6vdsMTg7uE/SoFiaD6tz1Gz2o9btjdd+r2m7hl1jJQkT8fSMIK+Wih7DvjaQ8wL8e3lRFhwZcekaFkqjGEeE6x21S0lLKKQA4SiUw9ysB4FvW61j1wt8SaHAO7M8yx5YXcsPAtfq2pUGbVDsQezlJMYql1LZDX++BwizkCESIWoscgHniOnfROwDDrQhGcvDkROGprlUcZv4kVusiaBe3Cro/HcBoyZ9nnu6dp3zG3JDuzFHdEu6vanl7Ej3GEFcYKT0XRGcSYYzLnvxAhaCp3ZjARoECXkDUCXCoeMd+ybDWZEihdTM8kikqFHMi7IzJtv8OwaArLSOz6blwfuyrv1vVQukT4SVA1O1nCI5RvThDnJDvyrk64L97YKr8F0RYXW+ZD85xXCDZPfTO00UP2qOyIoqyLXnvmEnqrlfUJ0oWmBYE72+oaXAy+PfqcbxAhovDbFYiHIALSVtVIY3pcLZ5gRBIfVpPc1/I2LWIcwfXQ816r3MtX0Xn+BzMuGAo0zSRSuXP3gbTBBTb4Oh5Pnqpw+PnZSybxyt+Ge2XiqfEArxt68MGELlJ8238m+Z0+h9XJ/E2soj65QPAo5JolbqIlh/QQqYy7BYKldOt4N/FuCz5LvGusk1Fi7Z9CQ4+vqLpiSprQMIc0H4sK+Xhm2ZLHHydYHCd6cPYUopfrtbV+zLu3V2NZpIwcqAXvvi/3Y2cEkXiHR1hZdY2vpKPhVlcpJsyfIbwD1lthzXPz5rBgP71HO2ldkKWu9c3qmk88H80bLV0/3z0PkX</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502358E6A01B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502358E69F1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502358E69F1B42E0401F0A05990975</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951078349500194E0401F0A059930A1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951078349500194E0401F0A059930A1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024046544</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951078349510194E0401F0A059930A1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00074_UVTC_PrimaryEmail_Invalid_Role_contentprovider_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="e2ee6a1b-e08a-4021-8799-6d944e148bd2"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CON"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCON"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4j3eMLQMGewIzlI+WJhAKNGnzckeWBSjYErEkcPLrK5nYAUJy0zvDDKP1avfs7tGRLjhMYjfocI5TQRg1hr2W+a8HgO/6Yc1aOKFn1aootJpNp2H5kYegF3rAqXumMeRc4iHlAlLRMl0H1CynboHq3K0G1VoAnIrn+HemcYNTrkIrl4pjGlkSUx7kaVumTGnAICc8oDDBPBAomHVGV4HyDGCByWxf7FHmCdP2SohNYNuoEmGE4xhVEEvsC/vI5yLiwYwsKRQyxc85I94yn/fudrvKrlph6dJ2HcexHd9WPhEny89m+1OxGUdDumD7dRdSRgmCMXmCGtQIixWLjE68ZCkRq+SN0MAGjg5t4QxZCNToZ9N+SZCj+2CkI5AphxZfQVAEm+IFTjFF2Pg5HbbMzx+b4H7vPIWUL1ia8JP130HCdItjtsGRxYvKCnQfj3imXe0LjIIhRbHkZIvHmiYbiDA3JilekOyKcEW+iBv5+I2Mqx8pWIbR34zlwj7EqqDbZ7rTI0vMxf+Z2eG89lFuYCxxG02/hTfkaUd7m+qDuLX5elsbZzU3+c5aOYRD5z2octzP61Oyltx63tTNvjb63u/Lu2nY64XZ/UxM78ZxMvj+MA5HvaWMvrnr0U882rAf3QGfrkfz+jW5bcjtLZg9DRY3Az++S8XXy8U/1+tPpD+8v0/dsDkJr77P+vHMW01Gv+3tiO9Yv5qNncaKrAf9y2iddBuz3njQn/742h12cC8Bze7g9yL0CFrKVXd06X2q/3Inl8vLxq0LJJhMlujqR+ulpsMajo2FJMxkeI+RKJaaHsOeMVDzguJ9edEWElmL3DXYaI3iAlNhtvUuLS2BVAJEokANc78e+HXHBa7frblf+lVQ6zs1BwycjtPwfafe9AoN2qM4gdhldEF0Lq2ye/68DxAlAcc0wqm1ZRKtMDffidiDAhpDOlWHg1GO50ypuMuqT+7jPeLZEgD5iNhCbu7TlYSmMWbiml6nnYXA6YF01+aOeyTdU4zIhmCt75rgXDGcC9WLB7iVIgaVLaxQLNUNkGoRDtxas25zkmxirJHaCYtkjCub1SbvjM33/64FEc+t0/48P3hv1nX6rWiB8omIduC6li9YjRGfuYOcopC3C64fFlyE78iI6POl+ilSgvZIjj+90ETzo+SIqqiAXHqeGo6i2qcFlYmiLUEl0csbWgm8Ov7tYhwPsPJQkdutzAfQ0NKWqvC2UjhgzzCSSp8e52yNqV2GsD90PZSoTzKX9mN8UqzoTECBE0UXI19+4G0ww1y/DYaK59lHHx5HKVXfBM7EOVs3Vk8IjfjdVwYKkPZT5on627E0ehnXmVgHeVSd6kEgCF3qlb4IHt8gBWIqLFHKxdLD4OcCnEt+bCybXGIRik2hFPjtL4aWpJYJEWKSimHPzA2HMpnjFI8bHLw4vQqTS/Hz3ZrxN+/WX6OrmRKsBJqlL/lvZ4vkdEHY1Fd4jqVlZuqpqJLT5YEsPwN8pcxVv+cC3wMNUC+Vua6U2W+CsoFHlbRfmV9bDnp6eh7afwA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950239D21971715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950239D21961715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950239D21961715E0401F0A05990981</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502129C42BE314E0401F0A07990586</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502129C42BE314E0401F0A07990586</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024049548</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502129C42CE314E0401F0A07990586</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00075_UVTC_PrimaryEmail_Invalid_Role_contentprovider:customersupport_with_TokeType_UnlockMe_(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="0148f23c-8046-430b-b2da-ce16d6462cf5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CONCS"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCONCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HqeMfANjV6CKS7JLNmRYIJnMvGw5cgNKbMmxZDD5+pVM7AAh2cxWpUKp3eo+3X10pDMeJrEd9DiHTBBGtdGwo//TArPZhLZjtBzsG64l/4X3nmksrJa3sE373nc8XRtxnsOIchFS0dFt03INs2lYztx2AscNLLfhWOYvXbuFjMvQ0qVh6lqRxJQHZdqOnmc0YCEnPKBhAjwQOJj1xleB9AzCCpPePduhLBNm3ZUQaYAQbkSAIY5xA7MEnaEDn7OIBzOypKHIM3jJGfGO/rJ3s9k0Nk6DZUtkm6aJTB9Jn4iT5Ve9+6XaDNGILthuPQgpowSHMXkOFagxiBWLtF68ZBkRq+Sd0BayTBXagAIb2HLpVx29JijRfTLSAciMhwZfhVYVbAoLyIBi0G6mo47+9XMT3O2dZyHlC5Yl/Gj9e5CAriFmKUQGryqr0H0+4ol2dc8AByOK45yTNVwrmqQhBq5NMliQ4opwSb6Ia+X4tYLLP1KxDPDvjOUM7WOV0NGJ7gzJErj4PzPbn9cuym0Y59B9RuimmA7957spp/Nv8/tIDDDbrP58NDslhH3nHah63C/rY7LW3HrZlPxVbKK8/dw3o/7NfdG+Sa3BZp2wyeVgvs0u3Qn0Lq5/eX8wTi/oQ/rz5qKJXfD/XqXszuyzUeZeJ7c/ifPsbPiXjF1vv6cp3P4QLbhzw8eniSmix6vLn+M/FnN+NVhOJgnyHn6hHt167rMNc3E9treXyFnRwdjtmz9875tvb0yEv2RPY6d/s46Lq8ncw3cFehh1Xmvar+HQWEnCLL9/ACyqpaLHaKhdyHmF4mN5URYSGYvSNUiVRnEBVOhdtUtJS5BLASJRIIe5W1/4Tcts2UO359pu/9w7N13TujB7ZtP37fZ5q9KgHYojiANGF0TlUiq748/HAHEScKARZMaa5XgFXP8g4jAUoTaiU3k4GOUwZ1LFH+i21W57zkPWSq2C0VXcJjlbFImuXTPxnX7PegsB2Z50u3PTPpDuKWCSElD6rgjOJcO5kL14Cte5iK3GOmxQyOUNkCkRDmy33UScJGkMCilKWJTH0EhXadkZxHe/thFiXlqn5/Py4L1b1/G3qgXSJyLKgata+iDHCCfuILMq5P2Cm/sFV+F7eUTU+ZL9FBnBOySHn15povhRc0RWVEGuPY8NB1HRcUF1omhNcE30+oaWAi+Pf7cax1PYeGrk63VeDsBT0pbJ8EgqnIVmgHOpT9s5ewSK6hDoU9dDjfooc20/xJeLFZ2JUEAi6aKVy0+8DWbA1dtgJHlefPbhcZBS9k1AIU7ZBrF8QijEH74ycICVnzRP5M+GZdHruE7E2ssj65QPAkHoUq3URbB9hxSYybBEKhfL9oOfCnAq+aGxbnKNRUg23ecC3v+iKUnq6CHGLKdiNNRLw75MljjFNoXg1elNmFKKX+7Wgr97t96Nr2ZSsJJQr33JfzsbpKQLBl1d4SWWjl7Ip6JMTpd7svwC8I0y+7bX9PuO57ea+8rs+G2nbuBBJd035reWvZ4en4fuvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951092759B47965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951092759B37965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951092759B37965E0401F0A05993983</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951062D4A424BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951062D4A424BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024053292</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951062D4A434BE7E0401F0A059928E6</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="RETRY_ATTEMPT_LIMIT"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00168_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_with_sameTokenType_same_EmailID_200_OK_P1" searchProperties="true" id="fef151c8-6a1b-4241-adae-967b551b3283"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="11722852-0337-490c-b888-8c8f31312d2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="e44e6bc5-ee62-4e76-a398-3bfeeeb1bb01"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSx1XIhVAgAiRKT9ts74TSnr6sjDOAIXFS2+HSX792aFKgtNuzEhLyZDzzzcznz25xFEeO1+UcmCAJ1fyztv6PXcMWwu7YaDqjhuGihm0gqNkGQPVk5NYbUMeWrvmcZ+BTLhAVbd2xbNewaoZdHThVr+p6dr1Sr7ovujYExmVo6VKRu1ZxRLmXp23rGaNegjjhHkUxcE9gL+jeXHvS00MFJr3T2qDME7LOVIjUM01cCQFDFOEKTmKzZe74tELuBWRCkcgYvOcMeVt/37tcLivLaiVhE9OxLMu0mqb0CTmZHOudo2IzhD4dJ5t1D9GEEowi8oYUqBsQ0yTUutEkYURM4y9C26ZtqdAGrLCBbZce6+ZHghzdDyPtgGQcGXyK7CJYH8bAgGLQHvt+Wz/+2QQ3ewcMUT5OWMz31n8GCegCoiSF0OBFZQW6n0c80K5OC7DnUxxlnCzgVtEkRRi4ds9gTFbXhEvyhVzLx6+tuPyRgmWA/2QsLXMbq4RuHujOGZkAF/9nZtvz2kQZoiiDzuWwGb683K795unvcfqcTp+C2f1L8+3t4aadQ9h23oAqx/2+3idrya33TRfh1B6e/n3thynQbGg+TF5d9HoxZQ/d0VNSx43AFzCYPPq0um5c1e+tqHd5wa5/n3T9hVPn4jkcPZzgyYxdDS+PHrNhdb6K7hyK0KxXe2zG0XwNT1couAwmV6vRAjkZml+F9fu/7pbri8HNzYiwRhTP1yK5XjLnZZYOyHxAYzEKjoILPnqe+848fRN+fzL1Vw/tj5q2a9g1FpIQZKMZYFEsFT38M+1czguJ7+VFWUhojHNXL1UaxQVQoXfULiUtXiYFiISeHOZmfd6s2Vb9xO2dOqfV84b1y3It+9zqWrVms2p1zwoN2qDYg9hL6JioXEplN/z5HiCOPQ40BGYskgxPgevfRDxDAmk+7cvDkVAOg0SpuJi9Ld9qNWsp0CgbO0g4Kyuz7Zmu3Sbijt6x7lgA25Jud2A5O9LdB0xSAkrfFcG5ZDgXshevaJGJyK4sUIVCJm8ApkTYc9xGzeQkTiNQSM04CbMIKuk0zTtj8s2/YyDMc2v/1yA/eF/Wtf+taIH0CYly4KqWU5BjhAN3kFUU8nXBte2Ci/DdLCTqfMl+CkbwBsnupw+aKH6UHJEVFZBLz33DTlRzv6AyUbgguCR6eUNLgZfHv1OM4xVVXivZYpHlA6graWMyvCkVzjYDwJnUp/UgmQM1yxDmj66HEvVe5tK+iy8TUxoIJCCWdNHy5Q/eBgFw9TbwJc9XP3147KSUfROwEodsvUg+IRTib18Z2MPKT5rv5d8yYeHHuA7E2soj65QPAkHoRK3URbD+ghQ4kWGJVK6EbQc/FOBQ8l1j2eQSi5BsGmUCvv6iKUlq6wjjJKPCP9Nzw7ZM5jjFOgXvw+lTmFyK3+/WFf/ybn2+uQ6kYMVIL33JfzsbJKcLBl1d4TmWtr6ST0WZnE62ZPkd4CdlPqme9uyea/XsZqnM9WazVq3ZZQN3Kul8Mn+2bPV0/zx0/gU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951063BC1C50C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951063BC1C40C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951063BC1C40C19E0401F0A07995351</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510764CB2B3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510764CB2B3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024056674</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9510764CB2C3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>11722852-0337-490c-b888-8c8f31312d2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e44e6bc5-ee62-4e76-a398-3bfeeeb1bb01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00169_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_with_differentTokenTypes_same_EmailID_200_OK_P1" searchProperties="true" id="0f882814-c07a-455f-97cb-659860bd701d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1chzgcNiQoSlMKyty1tabtLX66M4xB3EwdsJ6T31187NClQ2tu9EhLyZDxzZub42Kccpokd9DnHTJCMapNhV//bdaEbeiA0wkV7YbjtMDI6EfCMjuO6oe8C5FmOrk04z/GEcgGp6Oo2sFwDtA3LubOdwHED22r5ADzq2gNmXIaWLi2ga2WaUB5Uabt6zmiQQU54QGGKeSBQMOtfXgTSM4A1Jr13ukVZJWS9WIhVYJqoFWKEkwS1UJaap+aez2nIgxlZUihyhl9yhryrv+zdbDatjdPK2NK0AQAm8E3pE3Ky/Kr3vtSbcTihUbZdn0GaUYJgQv6BCtQlFnEWav1kmTEi4vSd0JZpARXawCUykOXSr7r5mqBC98lIeyAZhwaPoVUHu8URZpgirN3fTrr6189NcLv3jkHKo4yl/GD9Z5AwLXCSrXBo8LqyGt3nIx5pV+8Uo2BCUZJzUuArRZMVRJhr1wxHpLwgXJIv5Fo1fq3k8kdqlmH0J2M5NXexSujmke4MyRJz8X9mtjuvbZQHmOS4Ny/5VAx+LAYnY9PmReIk3+Z+ySbs+323grDrvAXVjPtlfUjWhlsvm/C4yJ8X06eT3+kojs3FdQyG45vx2Dv7xUFczuZm5yeOw1F08wgep+SmnaUntnWeLai4tr4tOlcP0AN/PT1YS8/7spxnv55DsTyxxVmxJpubm8dzx1t2/Gi89mbOzYU3W+HY8R7Yz3nb+35lXgibiIGYWoP70EdP43ke2fdOzm7nj18mYmE50aJ9+bNcPzjF1Flvuq817dawb6wlYZYvnjAS9VLRYzLURnJeUHwsL8pCQiOqXIOV0iguMBV6T+1S0hLkUoBIGMhhbtcjvw1s2wcdADrWYDA8By6wRqAP2r4PfN+qNWiL4gDiWUYjonIpld3y52OAKA04piFmRpHlKMZc/yDiEAqoTeitPBwZ5fgukypuLS0m/DUovJL5Tx3PcZznTpi6J7p2lYkpnbJ+JDDbkW73Dth70n2LEVkRrPRdEZxLhnMhe7GGRS4Sq1XAFsW5vAGYEuHAdjttk5N0lWCF1EyzME9waxWvqs6YfPtvGxDxynp7flcdvHfrOvxWt0D6hEQ5cFXLAMsx4iN3kFUX8n7B7d2C6/D9PCTqfMl+CkbQFsn+p1eaKH40HJEV1ZAbz0PDXlTzsKAmUVgQ1BC9uaGlwMvj36vHsYatdSsvirwagKekjcnwplQ4y5xhlEt9er7LfmNqNiHMT10PDeqDzI19H18uYjoTUOBU0kWrlp94G8wwV2+DieR5+dmHx15K2TeBS3HMdpbIJ4RC/OErAwVI+UnztfzbZCx8HdeRWDt5ZJ3yQSAIXaqVugie3yEFymRYIpUrY7vBjwU4lnzf2DS5wSIkmxa5wO9/0ZQkdXWIUJZTMRnqlWFXJiuc4nmFg1enN2EqKX65W0v+7t366/JiJgUrhXrjS/7b2SAVXRDW1RVeYenqpXwqyuR0uSPLLwDfKnPfskcdf9Q58xpl9qQy20O/aeBeJb035reWnZ4enofevw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022A12F8AF8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022A12F89F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022A12F89F8C7E0401F0A079902D9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950229080081BBDE0401F0A05990991</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950229080081BBDE0401F0A05990991</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024060775</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950229080091BBDE0401F0A05990991</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00170_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_sameTokenType_same_EmailID_same_Node(negative)_403_FORBIDDEN_P1" searchProperties="true" id="8c8394b0-7821-40d2-943b-60208146c192"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6uQT1oSAVLKRze9hXaB0t2+XLnOBEyDk8YO0Pvrrx1ICpT2dq+EhDwZz5yZOT52k6FlbHk+Y5BxklAl6LbUv3FogtkIbc1xG+ea08AN7ekCYe3ccQyrbrpuCJGqBIzlEFDGEeUt1TJMRzPqmmlPLNuzHc+q1xpm/VFVppAxEVq41AxV2SxjyrwibUvNM+oliBHmUbQE5nHsjf3BjSc8PVRiUtvNLcoiYdaec556uo5rIWCIY1zDyVJv6gc+zZB5YzKjiOcZ7HKGrKXu9q7X69rariXZTLcMw9ANVxc+ISOzM7X9rdwMYUCjZLvuIJpQglFM/kES1AD4PAkVP54lGeHz5QehTd00ZGgNNljDpkPPVP0tQYHui5EOQGYMaWyOzDLYCCLIgGJQ7kdBSz372gS3eycZoixKsiU7Wv8ZJKAriJMUQo2VlZXovh7xRLvaTcBeQHGcM7KCoaRJijAw5S6DiGxuCBPkC5lSjF/ZMPEjJcsA/8lYmvo+VgFdP9GdLpkB4/9nZvvz2kaZojiH9tR+fui4i9WDga9nUf1+eBWMF8EKT4LfrQLCvvMWVDXu3fqYrBW3dps608V04Eff76l7N/TD29nP1/P58/OPmwY9v7Wmgzy6XpgL073O0zvr18rM1heLKH+Ne8Pwgq6u6MB6nFwNFvO78Tj95vgjP552bxZXvc2r33fuO2lv8JPqg9F8HU+ffR0vx9+hEUxupu6YTwjZoE786AweCMwY/E4eZj/i/mJ6dWn9NfjGbSuo5+vJ9YDWk7Q77AzvW2817ddwaCwlYZw/LQDzcinpEXSVvpgX4p/Li7SQUIsKVy+VGsU4UK625S4pLV4uBIiEnhjmdt1364Zld/u+bV/2epbVMxzD7Bu+ceG6hmP6pQZtURxB7CQ0IjKXVNktfz4HiJceAxpCpq2SHM+BqZ9E7CKOlICOxOFIKINJIlScsrCRIHy+jp8y08zs3LUuNlbkUFUZJvyW3mZ+xCHbk25nYlgH0j0CTFICUt8lwZlgOOOiFy9olfPYrK1QjUIuboBMirBnOY26zsgyjUEi1ZdJmMdQS+dp0Rmdbf8tDWFWWEe9SXHwPqzr+FvZAuETEunAZC2XIMYIJ+4gsyzk44Lr+wWX4f08JPJ8iX7yjOAtksNPbzSR/Kg4IioqIVeex4aDqPpxQVWicEVwRfTqhhYCL45/uxzHC6q91PLVKi8GcCGlLRPhdaFwpj4GnAt9ep0kz0D1KoT+peuhQn2UubIf4sv5nI454rAUdFGK5RfeBmNg8m0QCJ5vvvrwOEgp+sZhw0/ZOrF4QkjEn74ysIelnzDfib91koVv4zoRay+PqFM8CDihM7mSF8HrB6TAiQhLhHIl2X7wUwFOJT80Vk2usHDBpqecw8dfFClJLRVhnOSUB121MOzLZIGTv6bgvTm9C1NI8e5u3bAP79Zfg5uxEKwlUitf8t/OGinogkGVV3iBpaVuxFNRJKezPVneATxSZtNwzX6j3210Lm2jUua669rueaXMh5W035nfW/Z6enwe2v8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091F8FD9CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091F8FD8CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091F8FD8CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F95023DFA33BEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F95023DFA33BEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024064808</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F95023DFA33CEE22E0401F0A0799041A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00171_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_differentTokenTypes_same_EmailID_same_Node(negative)_403_FORBIDDEN_P1" searchProperties="true" id="5c2e3ab0-888b-48c7-993b-603bd0b10500"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj1chX3xGBQlI2c0ttCywVduXK+MM4CVxQuxA6K+/dmhSoLS3eyUk5Ml45szM8bGvGQoDy+kyBgknEVU8t63+YwLYLXNR10wfGVoVWg0Nmb6pNeZQXaAGnguLqniMpeBRxhHlbdUyzKpm1DTTnlm2Y1cdq1lpNe1nVXmAhInQwqViqEoWBpQ5edq2mibUiRAjzKEoBOZw7Ey7o6EjPB1UYFI71weUecKks+I8dnQdV3zAEAS4gqNQv9ZPfK595kzJkiKeJvCa02dt9XXvbrer7OxKlCx1yzAM3WjpwsdnZHmldr4Vm8H36CI6rPuIRpRgFJAXJEGNgK8iX+kGyyghfBV+ENrUTUOG1iDDGjar9ErV3xLk6L4Y6QRkwpDGVsgsgk1gAQlQDMqviddWr742wcPeWYIoW0RJyM7WfwYJ6BaCKAZfY0VlBbqvR7zQrs41YMejOEgZ2cKdpEmMMDBlnMCCZEPCBPl8puTjVzImfqRgGeA/Gcu1foxVQNcvdMclS2D8/8zseF6HKA8oSKGzWnf7esty+0MDxtHo9+OPp8f9ZsvMfbedQzh2PoAqx/26Pidrya3XTUNr96sLT6M64oNwgObN+ztrtsq6w6rb94aN3iLc3M3ccLQL45+33u19n3ib7w9re4LT5rr/9+Tp5Xk8eqkv+mn/x7d5f7pePWf27DGxnuoPm9vE1dO7TdoaD2L3pz7//WP78j2b3ES7lKHlureMnnGAx2lvRv8iQa1eH8/5c7Jr3qJk8223yhLXft4S12sM5vE6CZvtt5qOazg1FpIwTee/AfNiKenhucpAzAvxz+VFWoivLXJXJ5YaxThQrnbkLiktTioEiPiOGOZhPWjVTKNlDpqDm1a/Zxs3RtUwB0bXqLVadqveLTTogOIMYj+iCyJzSZU98OdzgDh0GFAfEm0bpXgFTP0koos4Ujw6EYcjogxmkVRxP8uy5s6Cahxis7ZgWXXN9iza11XlLuL39D7pLjgkR9pdnRnWiXZPAJOYgBR4yXAmKM64aMYGbVMemJUtqlBIxRWQSBV2rGqzpjMSxgFIqHoY+WkAlXgV563R2eHf0hBmuXVyM8tP3oeFnX8reiB8fCIdmKylB2KOcOESMotCPi64dlxwEb6b+kQeMNFQnhB8QHL66Y0nkiAlSURFBeTS89xwElU/L6hM5G8JLpleXtFC4cX57xTj2KDKppJut2k+gIbUtkSE14XEmfoUcCoEaj+L1kD1MoT+pfuhRH2WubSf4kv5ik454hAKuij58guPgykw+TjwBNGzr748TlKKvnHI+CVbPxBvCIn402cGdrD0E+ax+NtFif82rguxjvKIOsWLgBO6lCt5E+w/IAWORFgipCtKjoNfCnAp+amxbHKJhQs2zVMOH39RpCa1VYRxlFLuuWpuONbJHCffx+C8Ob0Lk2vx6+WasQ8v18fRcCoUK0Rq6Uv+21kjOV0wqPIOz7G01Uy8FUVyujzS5VeA76S50bBqvfpgYNvuiTQb3V7ZwJNKOu/M7y1HPT0/D51/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95107725B70F33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95107725B6FF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95107725B6FF33DE0401F0A059930AB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091F8FE9CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091F8FE9CB30E0401F0A0599396A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024067947</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091F8FEACB30E0401F0A0599396A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00172_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_sameTokenType_same_EmailID_different_Nodes(negative)_403_FORBIDDEN_P1" searchProperties="true" id="df84f56f-3cac-4977-8eff-694db3437e58"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">DECE</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">RET</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">iscportal1</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>Node_Role</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_loop" id="905178f2-b95d-4c0c-86f9-ff5e87945571"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",context.expand( '${Steps#Node_Role}' ));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>NodeId_Setup_loop</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb+I4EP6+vyLKfqxC3nmJChIQ2M1eSynQ3t59OTmOAdPEprYDlF9/dmhSYGmvexIS8mQ888zM48e+5iBLnaDLOWICU6JFYVv/J0Z27DS9xPCtuWt4EEAjrstlw4N+w429esNDuhZxnqOIcAGIaOuOZXuG5Ru2O3PcwPUC161ZDftvXXtEjMvQ0qVm6douSwkPirRtPWckoIBjHhCQIR4IGEy7tzeB9AxAiUnvXB9QFglZZynEOjBNWEsQRGkKa5Bm5rV54nOd8GCKFwSInKHXnAlv6697t9ttbevWKFuYjmVZptUypU/C8eKr3vlSbkZJROb0sO4DQgmGIMV7oEDdIrGkidZNF5RhsczeCW2btqVCG2gHDWh75KtuviUo0H0y0glIxoHBl8Aug03QHDFEINIeJlFb//q5CR72zhggfE5Zxs/WvwcJkQ1K6RolBi8rK9F9PuKFdnWuEQwiAtOc4w0aKZqsAURcGzM0x7sbzCX5Eq4V49d2XP5wyTIEf2cs1+YxVgndvNCdEC8QF/9nZsfzOkR5BGmOOtve1BrdfKf381mMN7dWK/YfW9YQP0xpu4Bw7HwAVY37dX1O1opbr5v+fDHZ3rv5Fibf7vOuy5vbOH/MtlfzB7YPI7x7Wu0TuBoPeL6ux/zlKbqiZjdORlfhHG7vHvf18XIS3V/1FhT5X6L7/dBfrraYjfpueGeH6cD83jLdwR+jEHrmX2Ye3/jfUQbG1ni/+vHwOLwFo7j5zJL4aeZPus/C+dln7sb5iXtfmrNwFXJnfdV9Gvrj5hqw+/ZbTcc1nBpLSZjm8QpBUS4VPaJQG8p5AfGxvCgLTox54RqslUZxgYjQO2qXkpYglwKEk0AO87AetnzLcax6txn2Br1+fWB5lj20ulaj1bKcfq/UoAOKM4h9SuZY5VIqe+DPxwBhFnBEEsSMDc3hEnH9g4ghEECLyEQeDko4mlGp4u7TnOYNkrsetlvZiiUrssENKJV7RMUduWPduUDsSLm9meWcKPcEQbzGSMm74jeXBOdCtuIZbHKR2rUNqBGUywuAKQ0OHK/pmxxn6xQpoGZGkzxFtfVyXTTG5Id/xwCQF9bJYFacu3fLOv9WdkD6JFg5cFVLD8kpogtXkFMW8n7B/nHBZfhunmB1vGQ7BcPwgOT00xtLFD0qisiKSsiV57nhJKp5XlCVKNlgWPG8uqClvsvT3ynH8Qxqz7V8s8mLATSUsjEZ3pQCZ5tTBHMpTy8z+oSIWYUwP3U7VKjPMlf2U3y5WJKpAAJlki5asfzE02CKuHoaRJLmu8++O05Syr4JtBOXbP1UviAU4g8fGTCAyk+ax/JvS1nyNq4LsY7yyDrle0BgslArdQ+8vEMKSGVYLIWLsuPglwJcSn5qrJpcYRGSTXEu0PtfNKVIbR1ASHMiolAvDMcqWeAUL2sUvDn9EqZQ4terdcffvVp/3t5MpV5lQK988X87G7igi5In6V9gaes7+VKUycniSJVfAZ4Js2217IHd6zqNnmNXwuy3Wm6rXq8aeFJJ5xfzr5ajnp6fh86/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F951091E1BA37B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F951091E1BA27B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F951091E1BA27B21E0401F0A05993966</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9502206A8DBEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9502206A8DBEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024072078</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9502206A8DCEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>905178f2-b95d-4c0c-86f9-ff5e87945571</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00173_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_differentTokenTypes_same_EmailID_different_Nodes(negative)_403_FORBIDDEN_P1" searchProperties="true" id="d618467f-c9e7-4fdf-9c2f-dd4620db4a79"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">DECE</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">RET</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">iscportal1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>Node_Role</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_loop"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",context.expand( '${Steps#Node_Role}' ));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>NodeId_Setup_loop</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jxlj+cbFE5jhElpaAimQtvTljJDXWMSWwZK59Ncf2cQOUJKTnhlmGK1Xu9/ufvqkW46j0HTbnEMiaMyUQa+p/mMiy/EMu6HZjo81myBHq3sN0LCDrUW1bqGqRVRlwHkKA8YFZqKpmsiwNeloWDPTci3btWqVes35pSrfIeEytHSpIFXZRyHjbp62qaYJc2PMKXcZjoC7grjT9v3QlZ4uLjCprdsjyjxh0gqEWLu6TioeEAhDUiFxpN/qZz63HnendMmwSBN4zunxpvq8d7fbVXZWJU6WuokQ0lFDlz4ep8uPautDsRm8AfPj47qLWcwowSH9jTNQ9yCC2FPa4TJOqAiiV0IbuoGy0BrsiUYMm31U9ZcEObp3RjoDmXCs8QAbRbAJ+JAAI6A8TgZN9eP7JnjcO0sw436cRPxi/XeQgG0hjNfgabyorED3/ohX2tW6BeIOGAlTTrcwymiyxgS48pCAT/dDyiX5PK7k41f2XP5owTIgfzOWW/0Uq4SuX+lOjy6Bi/8zs9N5HaN8x2EKLWSMPvcXk5tgtlrDCjnryc2osUc/Hn99a+YQTp2PoMpxP68vyVpy63nTl/m9U09uFptx7f6nYQMefvK+EXs1mc133mERfE2nnf3oy7S7amyTuXO37odPYFbj8c3BaXQYa5sPc3248qvbz98/3GxJ79MmGN9TnfucPh2G9a4/bQQ/5j6soC9Ca7iZNtDGZv2Oc+g7o1m987OxeGTzL/7T03g+e/gl2uPPYtcfDT8k0cR6HPdT1HmYBGY836R286Wm0xrOjYUkTNPFCogolhk9Bj2lL+eFxdvyklmop/m5q7vONIoLYEJtZbsyaXFTKUDUc+Uwj+t+wzFQrWp3O07X6tfRHbKR0Udt5DQaFmr3Cg06oriA2I2ZT7Ncmcoe+fM2QBK5HJgHibaNUxIAV9+I2MMCKwM2kYcjZhxmsVTxqs/EIWLxds+fjFVsot/EC2ps46nKKBZjNk7avoDkRLrtGTLPpHsChK4pZPqeEZxLhnMhe7HB21SERmWLKwxSeQMkmQi7pl13dE6jdQgZUj2KvTSEyjpY553R+fHf1DDhuXVyN8sP3qt1XX4rWiB9PJo58KyWDsgxwpU7yCwKeb1g57TgInw79Wh2vmQ/RULJEcn5pxeaZPwoOSIrKiCXnpeGs6j6ZUFlIm9LSUn08oaWAi+Pf6sYxwZXNpV0u03zAdQyaUtkeF0qnKFPgaRSnw6z+AmYXobQ33U9lKgvMpf2c3ypCNhUYAGRpIuSL9/xNpgCz94GA8nz/XsfHmcpZd8E7MU1WzeUT4gM8ZuvDOKSzE+aH+TfLk68l3FdiXWSR9YpHwSCsmW2yi6CwyukILEMS6Vyxclp8GsBriU/N5ZNLrEIyaZFKuD1L0omSU0VExKnTAx6am44lckcpziswX1x+iNMLsXPd+uev3q3/rwfTqVgRVgtfel/O2s0pwsBNbvCcyxNdS+fijI5W57I8jPAC2VGPckys2/cddFd9VSZzVrHKRt4VknrD/OflpOeXp6H1r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F950D2012F1FC0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F950D2012F1EC0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F950D2012F1EC0E6E0401F0A059927B5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F9510764CB5C3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F9510764CB5C3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024076815</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F9510764CB5D3F80E0401F0A059930AD</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00174_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_and_new_Call_after_15_minutes_with_sameTokenType_same_EmailID_200_OK_P1" searchProperties="true" id="36532db6-c234-4d53-835d-0e5c9d70233e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:testStep type="delay" name="Delay_15Min"><con:settings/><con:config><delay>960000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5HqeML5iAXYEqEkINWXIZYJmEly1FbkAZW3IsyVy+fiUTO8CQbGarUqHUbnWf7j460jlHSeyFXc4hE4RRY9Brm/803ejMwQ6ynLN5w/IhallBI3As3Aoi8HGAG62WaQw4lzCgXCAq2qbnuL7lNCy3PvHqYd0Pfa/mNYOZaUwh4yq0cqk5prFOYsrDIm3blBkNGeKEhxQlwEOBw3H3ZhgqzxCVmMzO+Q5lkTDrLIVIQ9vGtQgwxDGuYZbY5/aBz3nEwzFZUCRkBq85I942X/euVqvaql5j2cL2HMexncBWPhEni69m50u5GaIBnbPd+hJRRglGMdkiDeoGxJJFRjdesIyIZfJOaNd2HR3agjW2sOvTr6b9lqBA98lIByAzjiy+RG4ZbARzyIBiMP4eDdrm189NcLd3kiHK5yxL+NH6zyABzSFmKUQWLysr0X0+4ol2dc4BhwOKY8lJDreaJinCwI37DOZkPSRckS/iRjF+Y83VHylZBvhPxnJu72NV0O0T3emRBXDxf2a2P69dlCmKJXTueEwl/f54tmVZb/K9eQdnvM57L3bstwsI+847UNW4X9fHZK249brpHvvJ3J29JPngeTX9uWxtv99uhuPe+N7t+vLhAskf9rfoukvx8+X1aphvr9azmCU+JuNf6XiaXYyHaJXOl0v63PjS7Nc3w3o9mE5umrOfziB/kvcseEgWj2ydT7dTuVmK/uiv+d23PHv60YKhGluaS1SfXz++zDb0G/ceght0v+b96y89b/bIIP+RjuSM4GBx7SzabzXt13BoLCVhLJ+eAYtyqekx6Bl9NS8kPpYXbSGRNS9cw1RrFBdAhdnRu7S0hFIJEIlCNczduh80XCdw+4HjXF1e1J0rx3fcvtN1GkFQD866pQbtUBxBvGR0TnQurbI7/nwMECchBxpBZuVM4iVw84OIPSSQMaAjdTgY5TBhSsVdyLa/ouYTXWXPq2e5hUWQJ1FCE9O4ZeKO3mXduYBsT7r9ieMdSPcIMEkJaH3XBOeK4VyoXrygXIrYreWoRkGqGyDTIhx6fqthc5KkMWikdsIiGUMtXaZFZ2y++/UshHlhHV1NioP3bl3H38oWKJ+IaAeua7kANUY4cQfVy0LeL7ixX3AZvisjos+X6qfICN4hOfz0RhPNj4ojqqIScuV5bDiIah8XVCWKcoIrolc3tBJ4dfw75TheUO2lJvNcFgNoamnLVHhbKZxrjwFLpU+bCfsF1K5C2J+6HirUR5kr+yE+KZZ0LJCARNHFKJafeBuMgeu3wUDxfP3Zh8dBStU3AWtxynYZqyeERvzhKwOHWPsp8736WbEsehvXiVh7eVSd6kEgCF3olb4INu+QAjMVlijlYtl+8FMBTiU/NFZNrrAIxaYnKeD9L4aWpLaJMGaSikHPLAz7MlngFJsUwjen38IUUvx6t675u3frw81wrAQrQWblS/7b2SIFXTCY+govsLTNtXoqquR0sSfLrwCPlNnxvMtmw29dNVz1r1TmZhA4Xu+iauBBJZ3fzL9b9np6fB46/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F95022C7548F5148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F95022C7548E5148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F95022C7548E5148E0401F0A079902DB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F951091F900ECB30E0401F0A0599396A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F951091F900ECB30E0401F0A0599396A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024081234</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F951091F900FCB30E0401F0A0599396A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00175_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_and_new_Call_after_15_minutes_with_differentTokenTypes_same_EmailID_200_OK_P1" searchProperties="true" id="766dfdb9-ec4b-4c5a-9546-c20726f6a52c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ).toString());
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:testStep type="delay" name="Delay_15Min"><con:settings/><con:config><delay>960000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ).toString());
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx1XIFxSIChKFspsubFugFerLletMgtvEhtgJtL/+2qFJgdLe7pWQkCfjmTMzx8c+5yiJHa/HOaSCMKr5g47+z9lZGLooDA3XeQSj7gZ1o9VsIsOFJkZwhpBjNXXN5zwDn3KBqOjojmXXDath2O7McT237tUbtXaj9aBr95ByGVq61Cxd2yQx5V6RtqNnKfUY4oR7FCXAPYG9aW888qSnh0pMevd8i7JImHYXQiw908S1ADDEMa5hlpjn5p7PecC9KYkoElkKbzkD3tHf9q7X69rarbE0Mh3LskyrbUqfgJPoVO+elJsh8GnItus+oowSjGLyihSoMYgFC7ReHLGUiEXySWjbtC0V2oANNrBdp6e6+Z6gQPfNSHsgU44MvkB2GWwCIaRAMWh3E7+jn35vgtu9sxRRHrI04Qfrv4MENIeYLSEweFlZie77EY+0q3sO2PMpjjNOcvijaLJEGLh2k0JINiPCJfkCrhXj1zZc/kjJMsB/M5ZzcxerhG4e6c6ARMDF/5nZ7ry2Ue5RnEH3dRXb/vRyNH95uMqffywes97gNlidmW7UKSDsOm9BVeN+Wx+SteLW26anK9K6H65+jqbTKI5Web8ZPj/wpn/xQ7zM03y5GS7W0eqnef1LceP5tsHaVxd386zdX/tmurlx46dbszectJJG6+Rl9Ot66q9myWA2iFrQQv7vcD5e9mIzYmt3Ec839tSi+etwkSR9F1ECD+un68vxvP647o8fB2cjErLrFN0sMn6yursaJS77Obmd39+P82T4HHXea9qtYd9YSsI0e3wCLMqlooc/0IZyXkh8LS/KQgIjLFy9pdIoLoAKvat2KWnxMilAJPDkMLfrYbthObbTs6Wu1Z1249KqW/bQ6lnNdttq9FulBm1RHEDsMxoSlUup7JY/XwPEiceBBpAaOcvwArj+RcQBEkjz6UQeDkY5zJhUcRu/Os+toMF49EoSxliLMng6Cze69oeJa3qd9kIB6Y5012eWsyfdE8BkSUDpuyI4lwznQvZihfJMxHYtRzUKmbwBUiXCnlNvNUxOkmUMCqmZsCCLobZcLIvOmHz77xgI88I6uZwVB+/Tug6/lS2QPgFRDlzVcgFyjHDkDnLLQj4vuLFbcBm+lwVEnS/ZT5ESvEWy/+mdJoofFUdkRSXkyvPQsBfVPCyoShTkBFdEr25oKfDy+HfLcaxQbVXL8jwrBtBU0pbK8KZUONucAs6kPr3M2DNQswphfut6qFAfZK7s+/gysaBTgQQkki5asfzG22AKXL0NfMnzzXcfHnspZd8EbMQxWz+WTwiF+MtXBvaw8pPmG/m3ZmnwPq4jsXbyyDrlg0AQGqmVughePiEFZjIskcrF0t3gxwIcS75vrJpcYRGSTY+ZgM+/aEqSOjrCmGVU+AO9MOzKZIFTvCzBe3f6EKaQ4re7dcM/vVvn49FUClaC9MqX/LezQQq6YNDVFV5g6egb+VSUyWm0I8tvAD8qc9up2+2B229Y+8rsDqoG7lXS/WD+aNnp6eF56P4L</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>F9502192419E3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F9502192419D3C50E0401F0A0799053D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F950212A19584295E0401F0A079905C8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140513_1400024084916</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F950212A19594295E0401F0A079905C8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate TestSuite" disabled="true"><con:description>TestSuite generated for REST Service [UserValidationTokenCreate]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserValidationTokenCreate TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [UserValidationTokenCreate] located at [/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="d518e1c7-22e6-457b-bbb7-348cd8659ece" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 2"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 2" id="f7810e26-714c-4d74-add5-ef703a16a6e1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 3"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 3" id="20541f67-eb37-4cab-b933-da6048380d80" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 4"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-4" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 4" id="689307f0-db5d-4de3-a1cd-9ec7079e2e19" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 5"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#V1}/${#Project#V2}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-5" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 5" id="8614e2c4-c855-40e4-bd6c-8f191c66c89f"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Test" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UVTC_PrimaryEmail_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="1a8ebef0-35f2-4249-9dea-e6d723e57c10"><con:settings/><con:testStep type="groovy" name="NodeId_Setup"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="PrimaryEmail_Set" id="572afc5e-6cd4-404b-80bb-25111fc1b5cf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Used a combination of test_uvtc for PrimaryEmail Generation
def email = "aravind.racharla@compugain.com";

log.info "generated emailId: "+email;
tP.setPropertyValue("PrimaryEmail",email);</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>572afc5e-6cd4-404b-80bb-25111fc1b5cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>F9502206A54FEBC6E0401F0A079902CB</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20140513_073444@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Coordinator_Schema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:8001</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>Email</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>Encoded_NodeAcc_Id</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>Encoded_NodeUser_Id</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Encoded_PolicyClass</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>eTag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20140513_073444@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:8001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:8001</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"><Name><GivenName>${#TestCase#UserName}</GivenName><SurName>${#TestCase#UserName}</SurName></Name><ContactInfo><PrimaryEmail><Value>${#Project#PrimaryEmail}</Value></PrimaryEmail><AlternateEmail><Value>${#Project#AlternateEmail}</Value></AlternateEmail><Address><PostalAddress>${#Project#PostalAddress}</PostalAddress><PostalCode>${#Project#PostalCode}</PostalCode><Locality>${#Project#Locality}</Locality><StateOrProvince>${#Project#StateOrProvince}</StateOrProvince><Country>${#Project#Country}</Country></Address><TelephoneNumber><Value>${#Project#TelephoneNumber}</Value></TelephoneNumber><MobileTelephoneNumber><Value>${#Project#MobileTelephoneNumber}</Value></MobileTelephoneNumber></ContactInfo><Languages><Language>${#Project#Language1}</Language></Languages><DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>${#TestCase#LegalGuardian}<Credentials><Username>${#TestCase#UserName}</Username><Password>${#Project#password}</Password></Credentials><UserRecoveryTokens><RecoveryItem><QuestionID>${#Project#QuestionID1}</QuestionID><QuestionResponse>${#Project#QuestionResponse1}</QuestionResponse></RecoveryItem><RecoveryItem><QuestionID>${#Project#QuestionID2}</QuestionID><QuestionResponse>${#Project#QuestionResponse2}</QuestionResponse></RecoveryItem></UserRecoveryTokens></User>]]></con:value></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"><Name><GivenName>${#TestCase#UserName}</GivenName><SurName>${#TestCase#UserName}</SurName></Name><ContactInfo><PrimaryEmail><Value>${#Project#PrimaryEmail}</Value></PrimaryEmail><AlternateEmail><Value>${#Project#AlternateEmail}</Value></AlternateEmail><Address><PostalAddress>${#Project#PostalAddress}</PostalAddress><PostalCode>${#Project#PostalCode}</PostalCode><Locality>${#Project#Locality}</Locality><StateOrProvince>${#Project#StateOrProvince}</StateOrProvince><Country>${#Project#Country}</Country></Address><TelephoneNumber><Value>${#Project#TelephoneNumber}</Value></TelephoneNumber><MobileTelephoneNumber><Value>${#Project#MobileTelephoneNumber}</Value></MobileTelephoneNumber></ContactInfo><Languages><Language>${#Project#Language1}</Language></Languages><DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>${#TestCase#LegalGuardian}<Credentials><Username>${#TestCase#UserName}</Username><Password>${#Project#password}</Password></Credentials><UserRecoveryTokens><RecoveryItem><QuestionID>${#Project#QuestionID1}</QuestionID><QuestionResponse>${#Project#QuestionResponse1}</QuestionResponse></RecoveryItem><RecoveryItem><QuestionID>${#Project#QuestionID2}</QuestionID><QuestionResponse>${#Project#QuestionResponse2}</QuestionResponse></RecoveryItem></UserRecoveryTokens></User>]]></con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6uQD0IpUUGCArdR6Rdku719uTLOBNwNdohtoPvrrx2aFCjt7V4JCXkynjkzc3zsc44WqRd0OYdcEEaNsN82/6n7zdh1/FMrmXqJ5eMzsM7qfmy509PTuuc0cQsj0wg5lxBSLhAVbdNzXN9yGpZbj7x64HmB26y5fv3JNB4g5yq0cqk5prFZpJQHRdq2KXMaMMQJDyhaAA8EDibd61GgPANUYjI751uURcK8MxciC2wb12LAkKa4htnCPrf3fM5jHkzIjCIhc3jNGfO2+bp3vV7X1vUay2e25ziO7bRs5RNzMjsxO9/KzRCHNGHb9QWijBKMUvIbaVDXIOYsNrrpjOVEzBcfhHZt19GhLdhgC7s+PTHttwQFui9G2gOZc2TxOXLLYGNIIAeKwfgxDtvmydcmuN0b5YjyhOULfrD+M0hAV5CyDGKLl5WV6L4e8Ui7OueAg5DiVHKyghtNkwxh4MZdDgnZjAhX5Iu5UYzf2HD1IyXLAP/JWM7tXawKun2kO30yAy7+z8x257WN8oBSCR2UkVETi+ebJwL3w6u5/bi8m56+MLpi7QLCrvMWVDXu1/UhWStuvW4CiS8vGw82/VXveZdpdIV/PfF7Lsn6xl0PPG8Rfe9PnqKe33ucjbsvE3ikz8/w2B2PJvcobl0kP+uCXrtyPdrcfItWjrO8F9FqE27kepL88GnyxNPw58vw+4j0NtmEPibLAQ+nU3E17f1o3bHB1fh3eEt7UXeYyTS/fBjCjP+d/xV9m8+95gMb9PLR1fj2XiaDLGy/1bRbw76xlISJnD4DFuVS0yPsG0M1LyQ+lxdtIbGVFK5BpjWKC6DC7OhdWloCqQSIxIEa5nY9bDUcr153nX6/cVr3+wPHd9yh03WarZbjDZqlBm1RHEC8YDQhOpdW2S1/PgeIFwEHGkNurZjEc+DmJxH7SCAjpGN1OBjlEDGl4q4/XzfctEkE9ZZuLqceYw1MW6hpGjdM3NLbvJsIyHe0248cb0+7x4BJRkALvGY4VxTnQjVjiVZSpG5thWoUpLoCcq3CgeefNWxOFlkKGqq9YLFMoZbNs6I1Nt/+exbCvLCOB1Fx8j4s7PBb2QPlExPtwHUtPVBzhCOXkFMW8nHBjd2Cy/BdGRN9wFRDRU7wFsn+pzeeaIJUJFEVlZArz0PDXlT7sKAqUbwiuGJ6dUUrhVfnv1OOY4lqy5pcrWQxgKbWtlyFt5XEufYEsFQC9RKxX0DtKoT9pfuhQn2QubLv45NiTicCCVgouhjF8guPgwlw/TgIFdE3X3157KVUfROwEcdsF6l6Q2jEnz4zcIC1nzLfqb81y+O3cR2JtZNH1aleBILQmV7pm+DlA1JgpsISJV0s3w1+LMCx5PvGqskVFqHYNJUCPv5iaE1qmwhjJqkI+2Zh2NXJAqd4ySB4c3oXptDi18t1wz+8XB+vRxOlWAtkVr7kv50tUtAFg6nv8AJL29yot6JKTmc7uvwK8J00e13Xa7Tc4dlFc1+a+62qgXuVdN6Z31t2enp4Hjr/Ag==</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwqCBWkqphUVFxw5Wbt3AYEGWTAUF//Tto9CQ5yfnyflc6PT3dTy/0PPOMTd9j2wBjFCduGJRV+aXyD2c3OaZlbWst2GjUGk3bqgl1vlFrMS1oNhFqtLhtpaxinCI1wIkZJC8VlmbqNZqvsdycoduM0G7Wn7hmw6iUlyjGxDRReaIr5dz3Aty+un2ppHHQDk3s4nZg+gi3E9jWgTZsE822ecdUeX2+obw6jF93SRK1KQo+WQgiz4NPMPSpZ+qDzrOF27rrBGaSxujNp4VfKm9nsyx7yupPYexQLE3TFC1QRMfCrvOr8lq6H0aWGtjhbS2ZQRi40PTci1mA0lCyC60y8JwwdpOd/41phmLownQN5bAGmUbwq0L9dnBF90NLH0DG2Kzhncncjc2QjWIUQFRezNSXyq+fVfB2dh6bAbbD2Mef1v8NEgpOyAsjZNXwPbI7up9b/CJdr88IttUAeil2T2hUtElkQoTLkxjZbj50MWk+C5ev5S/n+N5hCP6XkjxT73ES2NQXmZFdB+Hk/6nX+1rdrCxNL0Wv8yrPxynfyS7VzoHVu8dcy6U5xeMReLlCeK98A/Uo9dv6c6M++urtkBnTs1BtZkYQ7OvKLGUWikdNxsal1Tx05LS5x+N063p1fEw5WuOwhpWR0jzWca8pBUzmHB2QpvvBuTuaqqWhLrsHLhlBdwH2MBpI7Bo3uvGazT18OOFgXN1EzfRCdRlrPRYPF2AgaiK7k56uVgOOderV1uXgIdh0ZFzqTlLeUcYabycGYIXcndIvv2N6H0MR1wCdr0EW/9dNWpDNxHwspGJS2OTzTNCrpqpSVZYkgCQHZKoIHFUcXsBIdA7H3cHtChktgumiA2Rw1mYgk52NvJxOB0pmLZeesVQ7HVGbNbIe2MglsiEr+VI21n3aXBnRhu3Qhi6K1noWbuv9yOodst4OjrS5lo3m6lnbK/lortCrq8zJyfqi7TVmPF/US6u9KGgzJZOzq0dZyXYjYzWLNgshgxdlqoFGF5D6SDutN/eXDKzPdnCvDDVwuMrFnSYtl1quzMGkJDqjJYltLnWMCPpWtPW93TvjPWJ8bnWX523XS42LstckpSvpx66ubuvyVOmD2WaxXS0P5qpzKsHeCGzvHt2ma67DzDFamTzd9Aehoe5OcASmiihOAUkXDTS12wdhVwRaA7j5RdqLXChZnYzqs7hUFbwutz67xzU2u7RnMq0WsxmuuMmRk5WgagzS7X6n7dadcXWgW6eFkAiXDT5VT5zpMjCP7Ola6SWD3O5N9dJ2Iudr2KtaTp/yLkIn1vg+iC/nnac5s2TFjfF569r2SlyPGx5ve1p9FtmeHZ1xdR5ODzHNiajOUpvzaZCUgKOJAHT3i7041cRWkVRLzaYbTTRBR0lScNmzyYBdHvu9kwc3dRDmg9V4f3grjCVnikhlU4W0lVJqycAqitDTF0pnDxai48Sio3TEKZTBdKMOsg3J16JHlD/nsXPNo6OIQKkbgBN6pfqCFpJxojca4ByIi6Aj7LRjvrI4n+aPSBnqo6iRaXhkB8YqPGi+Gy/iVF8MBqNhvp2n3cOezCqb1genulFSTocIuKPBfHeQQ9mcRJtNElUDGMNEjXxNzS9jA+9b7tan+9UmI05oGfLswt9mi66pGIPY0ZlBbxZM6rxQwql97vnVfStbVec6F/GWFNjy+UwZ8ZIOQdgRZs2jlbPsYbfIhlxm98Fha7Kj3BPEs6AMjDnMZtPBSverzVLzNBz69GVONUbRONO7WUOZTqt1S5z35jiK3U3acvJ4HFjsxky4k0EvOTfyDgKbHuaNqL50fFKsycmKeG1SmjbW0PAdPoJ9akadgMLbQ7V73l7MS+SP4W2Afp4OD+FtflDvJ8uH0XMnHTrpVgST+7K4gFS53CG3gpn8ncAUEteq2VfVdlSwIJygIKm8FqcK8tJOCcVxrTa5Mm5rheVafFPmBZkW6hJHK3SDZjo0oJuCwLF8/c5ybig+QZTCwHYLXwWPu91SfwcI/TZGgYXi2ilM4Q7hyl8sFvkqq8GMXL9hgNE8LHgiLck8kDkZEG4h0S1eYhhREQAjdGSpITOV8ihMxsE4BnaC4o8csf6BI84QdCMXFUSyuE0xuU5xQlJyNE9p4jFPJ/MpQCmhmnHB9tpso9WksOtHHioAU35opR56inbRNUEUvv2yNRPiq3SmzP9Rdel6038b4ue9ezaIjuUWCriIR0SkougLwtu4B/N90Nz7oO/mQWq5xYVOUpvELrwh+bj1u2OKVnm0C4nqDvmh+VnwwSr1OaCHI+vkwkfPP54DhE0SvvF6L8nRfDo+padTei0CX3CpmJinGIrmKR3BlBCi8zw8oIB6mKB+xEUfqD95fsg/4kuTXaAn5Hv2ScuUr8sfPER0hIuHiEpaPv/pK+eDS5K3BOXJVzLJI++VAvFfnzSwDQs9Ip6QnyyMrd/l+sLWOz8kzmKAuYFTrArmef6mKWBIzLpkiIXxe+NfGfjK+UfhI8kPLAnppm2aoO93ysV0eqmYEIZpkKhy5Sp4PzGvOJNzhNq/lf4wc+V+b2Q+x9+S+bU21Mns8s3KQ9f938o199ouEJFT2L1ieank5F1KnAfOuwn9BvDLIS116L8N6Y+RvP4h/lPyLqefv4fXfwE=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwKYqVpGoQUFTcwI2bt3AYFmWTRdBf/w4aPUlOcr6835VOT0/30ws9zzwnhu/RXZAkKE7dMKjKwkvtH8SSu86ubTa4DkSNZqvTanA7kmswLdTptFm2BRFXq8pJkiE5SFIjSF9qNEkxDbLdoFmN5LotskuRTxTd0WvVFYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuCpRxF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0lVdOzDSLEZvPs3kpfZ2Ns/zp5x5CmOboEmSJEiOwDpm4tq/aq+V+2FkyoEV3tY9IwgDFxqeezFKUApKndCsAs8OYzd1/G9MUwRFlqYbqIANSDWDXzXit4Mruh9a+gAyToxG4hjU3dgCWShGAUTV5UJ+qf36WQVvZ7XYCBIrjP3k0/q/QULBCXlhhMxGco/sju7nFr9I1+szgl05gF6WuCc0KdskMiBKqrMYWW4xdhPcfGZSvZa/WiT3DkPwv5TkmXiPE8MmvsiM4NooSf+fer2v1c3KyvAy9MoZ7PBiMoRYP5BC33Y7JhGKkj4dLZSXK4T3yjdQj1K/rT836qOv3g4Jq9O6ZRuIopoxtJBKLHb5hLN344MwAgKkDlMjGJvOQmR2RV9vtk6AXuWuUW9FM5bRjxqfGrO1bHBCKsUVx9+01MEyXBfMead47daU5yext6D2LrM6G6Z3aW74DWXZXphLI3CuA53pxQeHXu/HZ28+pRxvns+WoXJ2PYxMG0vrjZtlWYR0werozZffMb2PoYxrhM7XIMv/mxbJCUZqPBa9clJY+PNM0asiy7260OsB1LNBLvPAlvnxBUx4+3B0Dm6fy0kezJcSEMBZWYBcsLfCaj4fibm5Wnn6SpYkXlk08wHYChW8IYjFStA3Q9JY69GWlkhd5Xlzswh3zDAyB4d84MCJoin5RJPPyl4sJppIrq8yu8Dri7JXqKm2ZCrrPc8pCzEX8qtHQcydib5eRNsll8OLOFdAsw+opdhzlIHmryjILBy4F8cKOFzlvKP0ViulEDUwq/D2ZIVj03qSHkHfjHa+57wzPsDGNbO/Ou/6XqZfxL3SE/s99dhX5R0jzMUhWGyXu/XqYKylUwUOJmB39+i2XGMT5rbeyYX5djgKddk5wQmYizw/BzhdJFDk/hCEfR4oTeAWl96eZ8OeKeXEkE4qdc7rs5uze9wkRp/0DKrTobbjNTs7soIY1PVRtts7irORpvWRap6WXMpdtsmpfmINl4JFZM034iAdFdZgrlZ2M6HYwEHdtIeEd+GkWGkPQXw5O55iL9I1O03OO9ey1vxm2vTalqcwi8jyrOic1LVwfohJlkcMTWzPp1FaAbbCA9DfL/f8XOE7ZVJNOZ9vFd4Akphm4LKn0xG9Og4HJw9uGRAWo/V0f3grjCnkIk/kcxG3lVjpCMAsizBQl6K0B0vetmPeFiV+DgUw38qjfIvztRxg5c95lK55tEUeiIwOWG5QYZYkl05TtdkE54BfBhLnKMdibbI+2T4icaxOomauJBMr0NfhQfHdeBln6nI0moyLnZb1D3s8qyxSHZ0YvSKeDhFwJyPNOQihYMyi7TaN6gGMYSpHviIXl6me7DvuzieH9RbFz0gBtumlv8uXfUPUR7GtUqPBIpgxba6SZNZ54Nf3nXxd11Q2apu9wBLOZ0KPV2QIQolbtI5mQdMHZ5mP2dwagsPOoCeFx/FnThzpGswX89Fa9eutSus0HvvkRSOak2iaq/28Kc7ndcbktYGWRLG7zTp2EU8Dk94aKXvSyRXrRt6Bo7OD1oyYle3jYs1OZtRWZpV5cwN1325HcEgsiBMQ29ZY7p93F+MS+VN4G6Cfp8NDeJsfxPvJ8mH03EmHirsVwfS+LC8gWahK+FYw0r8TmFLimg3rqtqNShaUpChIa6/lqZK8dDNMcVyzi6+M21qk2Q4pMjTHdnotlmRFsklSEgnINseRNN27s5wbik8Qe2FguaWvksfdbqm/A4R+N0GBieLGKcygg5LaXyyW+arKwQJfv2GQIC3EPLHTFHoUaDabUpsDFAO4liS12HYbgCbLCz2mVp2E6TSYxsBKUfyBI1L0B464QNCNXFQSyfI2TfB1mqQ4JUfjlKUe9XQyngKUYaoZl2yvSzc7LSJx/chDJWDCD83MQ0+RE10TRCS3X7phwOQqXYjaP7Lau97034b4ee+eDaxjuqVCUsbDI1xR9AXhJe/BfB90633Qd/MgM93yQsepTWMX3pB83PrdMWWrPNoFR3WH/ND8LPhglfgc0MOReXLho+cfzwHMJjHfeL2X5Gg8HZ+y0ym7FqFdcqkYmycogmwTKoIZJkRnLTyggHiYIH7ERR+oP3l+yD/iy1InUFP8Pfu4ZarX5Q8eIipKyoeIjFu++Okr54NLnLcUFelXsp6H3ysl4r8+aWAXlnpYPMM/eRibv8v1ha13fnCc5QBzA7tclczz/E1TwBCbdfEQC+P3xr8y8JXzj8JHkh9YUtxNuyxF3+9Uy+n0UjMgDLMglYXaVfB+Yl5xpucIdX8r/WHmyv3eyHyRfEvmN8pYxbPLN2oPXfd/Kzfca7tAhE8l7hXLS63A71LsPLDfTeg3gF8O6ZbE/m1If4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:8001</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>8001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>8001</con:value></con:property><con:property><con:name>targetPort_TOU</con:name><con:value>7002</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:8001</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ValidateEmail</con:value></con:property><con:property><con:name>TokenType_RP</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>TokenType_UM</con:name><con:value>urn:dece:type:token:UnlockMe</con:value></con:property><con:property><con:name>TokenType_VE</con:name><con:value>urn:dece:type:token:ValidateEmail</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20121024</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>User_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>V1</con:name><con:value>1</con:value></con:property><con:property><con:name>V2</con:name><con:value>11</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>PrimaryEmail_Prefix</con:name><con:value>test_uvtc_pe_</con:value></con:property><con:property><con:name>AlternateEmail_Prefix</con:name><con:value>test_uvtc_ae_</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\scripts\Scripts_Praveen</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>nodeIdNotProvisioned</con:name><con:value>notprovisioned</con:value></con:property><con:property><con:name>nodeDeviceDefault</con:name><con:value>0200</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>YES</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>