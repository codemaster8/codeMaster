<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="ReportGenerator" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Dynamic LASP Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\StreamCreate - Dynamic LASP Test Cases"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="ReportGenerator"/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\reports"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting></con:settings><con:testSuite name="ReportGenerator" id="e3d69969-201a-4c2d-ae59-58d882659653"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Report" searchProperties="true" id="ae076145-7af2-4304-8579-9dbf395fcc5e" disabled="true"><con:settings/><con:testStep type="groovy" name="Looper" id="2415070f-466a-4e16-8972-d3884898e091"><con:settings/><con:config><script>import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ResultsDir = context.expand( '${#Project#ReportsDir}');
Date date=new Date();
DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm"); 

def outputDir = ResultsDir;
new File(outputDir).mkdir();
//Setting Output Directory 
tS.setPropertyValue("outputDir",ResultsDir );


tC.setPropertyValue("isFirstFile","true")

File newFile =new File(ResultsDir);
String[] dirList = newFile.list();
	log.info "!!!!!! Executing for "  + ResultsDir;
			
			 		File file1 = new File(ResultsDir);
					String[] names = file1.list();
					log.info "RD/Folder: " +ResultsDir;
				 	for(String name : names)
					{	
						if(!name.contains('.'))
						{
					 		reportXml = ResultsDir + '/' + name +'/report.xml';
					 		log.info "######## PROCESSING FOR reportXml: $reportXml";
					 		tS.setPropertyValue("currentFileName",reportXml);
					          tS.setPropertyValue("ProjFileName",name);        
					          tC.getTestStepByName('Reporter').run(testRunner, context );
					          tC.setPropertyValue("isFirstFile","false")
				 		}
					}
				 	def returnBatch= tC.getTestStepByName('Consolidate').run(testRunner, context )

log.info "##################### Execution Completed !!!!"
log.info "##################### Check Reports at " + ResultsDir;
tP.setPropertyValue("ReportFile",ResultsDir);
</script></con:config></con:testStep><con:testStep type="groovy" name="Reporter" disabled="true"><con:settings/><con:config><script><![CDATA[
///Variables for Overall tracking
def totalTcs=0;
def totalPassTcs=0;
def totalFailTcs=0;
/////

//Project Path Extraction
def projectDir = context.expand('${projectDir}');
def myFile = context.expand( '${#TestSuite#currentFileName}');
//log.info "Project Path   :"+ projectDir; 
//log.info "File  Path     :"+ myFile; 

def xmldata = new XmlSlurper().parse(new File(myFile))
def tS = xmldata.testsuite.size();
def tC;

def outputDir = context.expand( '${#TestSuite#outputDir}');

def projName= context.expand( '${#TestSuite#ProjFileName}');
def versionMinor = context.expand( '${#TestCase#versionMinor}' )

def fileName= outputDir +"\\"+ projName + "." + versionMinor;
log.info "######### " + fileName;
File file = new File( fileName); 

        if ( !file.exists() )
        {
            file.createNewFile();
        }

        FileWriter fw = new FileWriter(file);
        writer = new BufferedWriter( fw );
	if(context.expand( '${#TestCase#isFirstFile}' ))
        writer.write("ProjectName,TestSuite,TestCase,Failures");
        writer.write("\n"); 

//Storing data from xml to csv      

for (i=0;i<tS;i++)
                {
                                                                
			// log.info 'xmldata.testsuite[i] : ' + xmldata.testsuite[i].@name.toString();
			 if  (!(			xmldata.testsuite[i].@name.toString().contains("CommonTestSteps")
                                || xmldata.testsuite[i].@name.toString().endsWith("GeoProfile")
                                || xmldata.testsuite[i].@name.toString().endsWith("First_User_Create")
                                || xmldata.testsuite[i].@name.toString().endsWith("User_Create_API")
                                || xmldata.testsuite[i].@name.toString().endsWith("End_To_End")
                                || xmldata.testsuite[i].@name.toString().endsWith("SetupScripts")
                                || xmldata.testsuite[i].@name.toString().endsWith("Child_User_Create_API")))
                {
	                tC  = xmldata.testsuite[i].testcase.size();                            
	                def tcNs=[:];
	                def tcSs=[:];
				 for (j=0;j<tC;j++)
				 {			  //if (xmldata.testsuite[i].testcase[j].failure.@type != "")
				 	tcNs.put(xmldata.testsuite[i].testcase[j].failure.@type,xmldata.testsuite[i].testcase[j].@name);
				 	tcSs.put(xmldata.testsuite[i].testcase[j].@name,xmldata.testsuite[i].testcase[j].failure.@type);
				 }
				 def tcNames=tcNs.values().toArray();
				 def tcStats=tcSs.values().toArray();
				 for(a=0;a<tcNames.size();a++)
				 {
				 	for(b=0;b<tcNames.size();b++)
				 	{
				 		if(tcNames[a]==tcNames[b] && a!=b)
				 		{
				 			if(tcStats[b] != "" && b>a)
				 			{
				 				tcNames[b]="";
				 			}
				 			
				 		}
				 	}
				 }
				 def propMap=[:];


				 for(l=0;l<tcNames.size();l++)
				 {
				 	if(tcNames[l]!="")
				 	propMap.put(tcNames[l],tcStats[l]);
				 }
				 //propMap.each{ k, v -> 
				 //log.info "$k::$v"};
				 		propMap.each{ k, v -> 
				 		writer.write(projName);
						writer.write(",");
						writer.write(xmldata.testsuite[i].@name);
	                 		writer.write(",");
	                 		writer.write(k);
	                 		writer.write(",");
	                 		if(v!='')
	                 		{
	                         	writer.write('Fail');
	                         	totalFailTcs=totalFailTcs+1;
	                 		} 
	                 		else
	                 		{
	                 			writer.write('');
	                 			totalPassTcs=totalPassTcs+1;
	                 			//writer.write('Pass');
	                 		}
	                 		totalTcs=totalTcs+1;
	                         writer.write(",");
	                         writer.write("\n");
				 	}
				     	//writer.write("\n");
				 
			 } 
      }

writer.flush();
writer.close();
fw.close();


log.info "totalTcs " + totalTcs
log.info "totalPassTcs " + totalPassTcs
log.info "totalFailTcs" + totalFailTcs
log.info "FileName = " + outputDir +"\\"+ projName;
def failLink="http://10.31.15.235/Reports/soapUIReports/A&U/$projName/alltests-fails.html"//.replace("\\", "/")
String myRow="""<tr><td>$projName</td><td>$totalTcs</td><td>$totalPassTcs</td><td>$totalFailTcs</td><td><a href=$failLink>$projName</a></td></tr>"""
//log.info myRow

def destinationFile="C:/Users/utkarsh.sinha/Desktop/832/Reports.html"
//createFreshFile(destinationFile)
udpateFile(destinationFile,myRow)





////USED FUNCTIONS defined below
def udpateFile(destinationFile,Replacer)
{log.info destinationFile
	String strFile = new File(destinationFile).getText('UTF-8')
	
	new File(destinationFile).withWriter { w ->
		w << strFile.replace("<REPLACE_ME>",Replacer+"<REPLACE_ME>");
	}
}

def createFreshFile(destinationFile)
{
	new File(destinationFile).withWriter { w ->
		w << """<html><head><h1>REPORTS</h1>
</head><table border="1" style="width:50% ">
	<tr><td>PROJECT</td><td>RAN</td><td>Passed</td><td>FAILED</td><td>Failure Links</td>
	<REPLACE_ME></table></html>"""
	}
	//log.info "Copy Source Files to Html Location";
	//new File(destinationFile) << new File(source).text;
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Consolidate" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def batFileName = context.expand( '${#Project#ReportsDir}')+ "/myBat.bat";


def file = new File(batFileName)
def ReportName = context.expand( '${#TestCase#versionMinor}' );

//log.info "ReportName="+ReportName;
file.withWriter('UTF-8') {
    it.writeLine "cd " + context.expand( '${#Project#ReportsDir}')
    it.writeLine "copy *.$ReportName $ReportName"+"_Report.csv"
    //log.info ReportName;
    it.writeLine "sleep 3" 
    it.writeLine "del *.$ReportName"
    
    it.writeLine "del *.bat"
}
batFileName.execute()


tP.setPropertyValue("FinalReportFile",context.expand( '${#Project#ReportsDir}')+"\\"+"$ReportName"+"_Report.csv");
//log.info("Created Reports!!!")


/*
Runtime.runtime.exec(batFileName)
process=new ProcessBuilder(batFileName).start()
process.inputStream.eachLine {log.info (it)}
process.waitFor();
log.info("Execution Competed with Code: "+process.exitReportNamealue());
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Looper_with_SpecificFolderName_DEPR" id="dccb972a-9c4e-4eb9-88cd-50ba47db5641" disabled="true"><con:settings/><con:config><script>import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ResultsDir = context.expand( '${#Project#ReportsDir}');
Date date=new Date();
DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm"); 

def outputDir = ResultsDir;
new File(outputDir).mkdir();
//Setting Output Directory 
tS.setPropertyValue("outputDir",ResultsDir );

File newFile =new File(ResultsDir);
String[] dirList = newFile.list();


for(String folder : dirList)
{
	log.info "!!!!!! Executing for "  + ResultsDir+"/"+folder;
			
		 
			 		File file1 = new File(ResultsDir+"/"+folder);
					String[] names = file1.list();
					log.info "RD/Folder: " +ResultsDir+ '/' + folder;
					tC.setPropertyValue("versionMinor",folder);
				 	for(String name : names)
					{	
				 		reportXml = ResultsDir + '/' + folder + '/' + name +'/report.xml';
				 		log.info "######## PROCESSING FOR reportXml: $reportXml";
				 		tS.setPropertyValue("currentFileName",reportXml);
				          tS.setPropertyValue("ProjFileName",name);        
				          tC.getTestStepByName('Reporter').run(testRunner, context );
				 	}
				 	def returnBatch= tC.getTestStepByName('Consolidate').run(testRunner, context )
}


log.info "##################### Execution Completed !!!!"
log.info "##################### Check Reports at " + outputDir;

</script></con:config></con:testStep><con:properties><con:property><con:name>versionMinor</con:name><con:value>Reports.html</con:value></con:property><con:property><con:name>isFirstFile</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dccb972a-9c4e-4eb9-88cd-50ba47db5641</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2415070f-466a-4e16-8972-d3884898e091</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Summarize" searchProperties="true" id="335636b6-5d7f-461f-b173-b646ffebb5db" disabled="true"><con:settings/><con:testStep type="groovy" name="setUpData" id="03e89b94-889f-472f-a4ef-f5c346e24730"><con:settings/><con:config><script><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//Get File name
//Setting Up Data Source
def projectPath = groovyUtils.projectPath
def source= projectPath + '/source.html';

def destinationFile = context.expand( '${#Project#ReportsDir}' )+"//AccountReport.html"
testRunner.testCase.getTestStepByName("DataSource").getDataSource().setFileName(context.expand( '${#Project#FinalReportFile}' ));
testRunner.getTestCase().setPropertyValue('lastProject','ProjectName');
def thisTc =testRunner.getTestCase();
thisTc.setPropertyValue('cFailCtr','0')	
thisTc.setPropertyValue('cPassCtr','0') 
thisTc.setPropertyValue('cTotalCtr','0') 
createFreshFile(source,destinationFile)


def createFreshFile(source,destinationFile)
{
	new File(destinationFile).withWriter { w ->
		w << """<html><head><h1>REPORTS</h1>
</head><table border="1" style="width:50% ">
	<tr><td>Project</td><td>Failures</td><td>Passed</td><td>Totals</td><td>Failure Links</td>
	<REPLACE_ME></table></html>"""
	}
	//log.info "Copy Source Files to Html Location";
	//new File(destinationFile) << new File(source).text;
}
]]></script></con:config></con:testStep><con:testStep type="datasource" name="DataSource"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="File"><con:configuration><fileName>C:/Users/utkarsh.sinha/Desktop/832/R15_Report.csv</fileName><separator>,</separator><trim>true</trim><charset>Cp1252</charset><quotedValues>false</quotedValues></con:configuration></con:dataSource><con:property>Project</con:property><con:property>Suite</con:property><con:property>TestCase</con:property><con:property>Failure</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Processor"><con:settings/><con:config><script><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def finalReportFile = context.expand( '${#Project#FinalReportFile}' )
def projectPath = groovyUtils.projectPath
def destinationFile = context.expand( '${#Project#ReportsDir}' )+"//AccountReport.html"
def Project = context.expand( '${DataSource#Project}' );
def Suite = context.expand( '${DataSource#Suite}' );
def TestCase = context.expand( '${DataSource#TestCase}' );

def thisTc =testRunner.getTestCase();
def cFailCtr=thisTc.getPropertyValue('cFailCtr')	
def cPassCtr=thisTc.getPropertyValue('cPassCtr') 
def cTotalCtr=thisTc.getPropertyValue('cTotalCtr') 
def isFailed = context.expand( '${DataSource#Failure}' );
//def cFailLink=
String Replacer = """	<tr><td>AccountCreate</td><td>2</td><td>50</td><td>52</td><td>google.com</td></tr><tr><td>AccountCreate</td><td>2</td><td>50</td><td>52</td><td>google.com</td></tr>""";
def lastProject = context.expand( '${#TestCase#lastProject}' )


if(Project!="" && Project!="			" && Project!="ProjectName")
{
if(lastProject == "ProjectName")
{lastProject = Project }
	if(lastProject==Project)
	{//Processing
		log.info TestCase +"=="+ isFailed;
		if(isFailed=="Fail")
		{
			log.info cTotalCtr+ " Counter Fail= " + cFailCtr;
			cFailCtr=cFailCtr+1
			cTotalCtr=cTotalCtr+1
		}
			
	}
	else
	{
		log.info "#########New Project Updated" + Project;
		log.info "lastProject = "+ lastProject + " \nNext Project=" + Project+"<<";
		udpateFile(destinationFile,Replacer)
		thisTc.setPropertyValue("lastProject",Project);
	}

}



def udpateFile(destinationFile,Replacer)
{
	String strFile = new File(destinationFile).getText('UTF-8')
	
	new File(destinationFile).withWriter { w ->
		w << strFile.replace("<REPLACE_ME>",Replacer+"<REPLACE_ME>");
	}
}
//For future use

//
//log.info "@@@@@@@@ Read and Process " + finalReportFile
//def destinationFile=projectPath+'/anU.html']]></script></con:config></con:testStep><con:testStep type="groovy" name="rnDGroovy" disabled="true"><con:settings/><con:config><script>def demo(){def m2=8;
m2}
log.info demo()</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>Processor</targetStep></con:config></con:testStep><con:properties><con:property><con:name>currentProject</con:name><con:value>R15_AccountCreate</con:value></con:property><con:property><con:name>cFailCtr</con:name><con:value>0</con:value></con:property><con:property><con:name>cPassCtr</con:name><con:value>0</con:value></con:property><con:property><con:name>cTotalCtr</con:name><con:value>0</con:value></con:property><con:property><con:name>lastProject</con:name><con:value>ProjectName</con:value></con:property><con:property><con:name>Project</con:name><con:value>R15_AccountCreate</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>03e89b94-889f-472f-a4ef-f5c346e24730</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>outputDir</con:name><con:value>C:\Users\utkarsh.sinha\Desktop\832</con:value></con:property><con:property><con:name>currentFileName</con:name><con:value>C:\Users\utkarsh.sinha\Desktop\832/New folder (2)/R15_UVTC_PrimaryEmail/report.xml</con:value></con:property><con:property><con:name>ProjFileName</con:name><con:value>R15_UVTC_PrimaryEmail</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements><con:requirement><con:id>Policy-1000</con:id><con:name>ViewControl trumps Parental Control</con:name><con:description>In cases where both a parental control policy and the ViewControl settings of a Rights Token are in conflict ViewControl shall take precedence over all other policies. For example, when a BlockUnratedContent policy is in effect and a RightsToken ViewControl property names the user involved in the policy evaluation step, the named user shall have access to the content identified by the rights token.,</con:description><con:status>In Scope</con:status><con:links/><con:testCases/></con:requirement></con:requirements><con:properties><con:property><con:name>ReportsDir</con:name><con:value>C:\Users\utkarsh.sinha\Desktop\832</con:value></con:property><con:property><con:name>FinalReportFile</con:name><con:value>C:\Users\utkarsh.sinha\Desktop\832\Reports.html_Report.csv</con:value></con:property><con:property><con:name>ReportFile</con:name><con:value>C:\Users\utkarsh.sinha\Desktop\832</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestSuiteRunListener.afterTestCase" name="TestSuiteRunListener.afterTestCase" target=""><con:script disabled="false"/></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>